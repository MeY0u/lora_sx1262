
hitan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e81c  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078e  0800ea70  0800ea70  0000fa70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f200  0800f200  00010200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f208  0800f208  00010208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  0800f210  0800f210  00010210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000021c  20000000  0800f218  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003ce  2000021c  0800f434  0001121c  2**2
                  ALLOC
  8 ._user_heap_stack 00000606  200005ea  0800f434  000115ea  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0001121c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002461b  00000000  00000000  00011252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003dbe  00000000  00000000  0003586d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001920  00000000  00000000  00039630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001369  00000000  00000000  0003af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c4e7  00000000  00000000  0003c2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f16d  00000000  00000000  000787a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167013  00000000  00000000  0009790d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fe920  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008208  00000000  00000000  001fe964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  00206b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000021c 	.word	0x2000021c
 800026c:	00000000 	.word	0x00000000
 8000270:	0800ea54 	.word	0x0800ea54

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000220 	.word	0x20000220
 800028c:	0800ea54 	.word	0x0800ea54

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9b4 	b.w	8001028 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	2200      	movs	r2, #0
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d48:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14d      	bne.n	8000dec <__udivmoddi4+0xa8>
 8000d50:	428a      	cmp	r2, r1
 8000d52:	460f      	mov	r7, r1
 8000d54:	4684      	mov	ip, r0
 8000d56:	4696      	mov	lr, r2
 8000d58:	fab2 f382 	clz	r3, r2
 8000d5c:	d960      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5e:	b14b      	cbz	r3, 8000d74 <__udivmoddi4+0x30>
 8000d60:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d72:	4317      	orrs	r7, r2
 8000d74:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d78:	fa1f f48e 	uxth.w	r4, lr
 8000d7c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d80:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d84:	fb06 7711 	mls	r7, r6, r1, r7
 8000d88:	fb01 f004 	mul.w	r0, r1, r4
 8000d8c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d90:	4290      	cmp	r0, r2
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d94:	eb1e 0202 	adds.w	r2, lr, r2
 8000d98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x60>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f200 812d 	bhi.w	8000ffe <__udivmoddi4+0x2ba>
 8000da4:	4639      	mov	r1, r7
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	fa1f fc8c 	uxth.w	ip, ip
 8000dac:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db0:	fb06 2210 	mls	r2, r6, r0, r2
 8000db4:	fb00 f404 	mul.w	r4, r0, r4
 8000db8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dbc:	4564      	cmp	r4, ip
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dc0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x8c>
 8000dca:	4564      	cmp	r4, ip
 8000dcc:	f200 811a 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	ebac 0c04 	sub.w	ip, ip, r4
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b125      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000dde:	fa2c f303 	lsr.w	r3, ip, r3
 8000de2:	2200      	movs	r2, #0
 8000de4:	e9c5 3200 	strd	r3, r2, [r5]
 8000de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d905      	bls.n	8000dfc <__udivmoddi4+0xb8>
 8000df0:	b10d      	cbz	r5, 8000df6 <__udivmoddi4+0xb2>
 8000df2:	e9c5 0100 	strd	r0, r1, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	4608      	mov	r0, r1
 8000dfa:	e7f5      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000dfc:	fab3 f183 	clz	r1, r3
 8000e00:	2900      	cmp	r1, #0
 8000e02:	d14d      	bne.n	8000ea0 <__udivmoddi4+0x15c>
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	f0c0 80f2 	bcc.w	8000fee <__udivmoddi4+0x2aa>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f080 80ef 	bcs.w	8000fee <__udivmoddi4+0x2aa>
 8000e10:	4606      	mov	r6, r0
 8000e12:	4623      	mov	r3, r4
 8000e14:	4608      	mov	r0, r1
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e6      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e1a:	e9c5 6300 	strd	r6, r3, [r5]
 8000e1e:	e7e3      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f040 80a2 	bne.w	8000f6a <__udivmoddi4+0x226>
 8000e26:	1a8a      	subs	r2, r1, r2
 8000e28:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e2c:	fa1f f68e 	uxth.w	r6, lr
 8000e30:	2101      	movs	r1, #1
 8000e32:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e36:	fb07 2014 	mls	r0, r7, r4, r2
 8000e3a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e42:	fb06 f004 	mul.w	r0, r6, r4
 8000e46:	4290      	cmp	r0, r2
 8000e48:	d90f      	bls.n	8000e6a <__udivmoddi4+0x126>
 8000e4a:	eb1e 0202 	adds.w	r2, lr, r2
 8000e4e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e52:	bf2c      	ite	cs
 8000e54:	f04f 0901 	movcs.w	r9, #1
 8000e58:	f04f 0900 	movcc.w	r9, #0
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d903      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e60:	f1b9 0f00 	cmp.w	r9, #0
 8000e64:	f000 80c8 	beq.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e68:	4644      	mov	r4, r8
 8000e6a:	1a12      	subs	r2, r2, r0
 8000e6c:	fa1f fc8c 	uxth.w	ip, ip
 8000e70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e74:	fb07 2210 	mls	r2, r7, r0, r2
 8000e78:	fb00 f606 	mul.w	r6, r0, r6
 8000e7c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e80:	4566      	cmp	r6, ip
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x152>
 8000e84:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e8c:	d202      	bcs.n	8000e94 <__udivmoddi4+0x150>
 8000e8e:	4566      	cmp	r6, ip
 8000e90:	f200 80bb 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e94:	4610      	mov	r0, r2
 8000e96:	ebac 0c06 	sub.w	ip, ip, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	e79d      	b.n	8000ddc <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb2:	40f4      	lsrs	r4, r6
 8000eb4:	408a      	lsls	r2, r1
 8000eb6:	431f      	orrs	r7, r3
 8000eb8:	ea4e 030c 	orr.w	r3, lr, ip
 8000ebc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fa1f fc87 	uxth.w	ip, r7
 8000ecc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb00 f90c 	mul.w	r9, r0, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	d90e      	bls.n	8000efe <__udivmoddi4+0x1ba>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	bf2c      	ite	cs
 8000ee8:	f04f 0b01 	movcs.w	fp, #1
 8000eec:	f04f 0b00 	movcc.w	fp, #0
 8000ef0:	45a1      	cmp	r9, r4
 8000ef2:	d903      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ef4:	f1bb 0f00 	cmp.w	fp, #0
 8000ef8:	f000 8093 	beq.w	8001022 <__udivmoddi4+0x2de>
 8000efc:	4650      	mov	r0, sl
 8000efe:	eba4 0409 	sub.w	r4, r4, r9
 8000f02:	fa1f f983 	uxth.w	r9, r3
 8000f06:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f0a:	fb08 4413 	mls	r4, r8, r3, r4
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	d906      	bls.n	8000f28 <__udivmoddi4+0x1e4>
 8000f1a:	193c      	adds	r4, r7, r4
 8000f1c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f20:	d201      	bcs.n	8000f26 <__udivmoddi4+0x1e2>
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d87a      	bhi.n	800101c <__udivmoddi4+0x2d8>
 8000f26:	4643      	mov	r3, r8
 8000f28:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f2c:	eba4 040c 	sub.w	r4, r4, ip
 8000f30:	fba0 9802 	umull	r9, r8, r0, r2
 8000f34:	4544      	cmp	r4, r8
 8000f36:	46cc      	mov	ip, r9
 8000f38:	4643      	mov	r3, r8
 8000f3a:	d302      	bcc.n	8000f42 <__udivmoddi4+0x1fe>
 8000f3c:	d106      	bne.n	8000f4c <__udivmoddi4+0x208>
 8000f3e:	45ce      	cmp	lr, r9
 8000f40:	d204      	bcs.n	8000f4c <__udivmoddi4+0x208>
 8000f42:	3801      	subs	r0, #1
 8000f44:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f48:	eb68 0307 	sbc.w	r3, r8, r7
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x222>
 8000f4e:	ebbe 020c 	subs.w	r2, lr, ip
 8000f52:	eb64 0403 	sbc.w	r4, r4, r3
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	431e      	orrs	r6, r3
 8000f62:	e9c5 6400 	strd	r6, r4, [r5]
 8000f66:	2100      	movs	r1, #0
 8000f68:	e73e      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000f6a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f6e:	f1c3 0120 	rsb	r1, r3, #32
 8000f72:	fa04 f203 	lsl.w	r2, r4, r3
 8000f76:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f7a:	40cc      	lsrs	r4, r1
 8000f7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f80:	fa20 f101 	lsr.w	r1, r0, r1
 8000f84:	fa1f f68e 	uxth.w	r6, lr
 8000f88:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fb07 4410 	mls	r4, r7, r0, r4
 8000f92:	0c11      	lsrs	r1, r2, #16
 8000f94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f98:	fb00 f406 	mul.w	r4, r0, r6
 8000f9c:	428c      	cmp	r4, r1
 8000f9e:	d90e      	bls.n	8000fbe <__udivmoddi4+0x27a>
 8000fa0:	eb1e 0101 	adds.w	r1, lr, r1
 8000fa4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa8:	bf2c      	ite	cs
 8000faa:	f04f 0901 	movcs.w	r9, #1
 8000fae:	f04f 0900 	movcc.w	r9, #0
 8000fb2:	428c      	cmp	r4, r1
 8000fb4:	d902      	bls.n	8000fbc <__udivmoddi4+0x278>
 8000fb6:	f1b9 0f00 	cmp.w	r9, #0
 8000fba:	d02c      	beq.n	8001016 <__udivmoddi4+0x2d2>
 8000fbc:	4640      	mov	r0, r8
 8000fbe:	1b09      	subs	r1, r1, r4
 8000fc0:	b292      	uxth	r2, r2
 8000fc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000fca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fce:	fb04 f106 	mul.w	r1, r4, r6
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x2a2>
 8000fd6:	eb1e 0202 	adds.w	r2, lr, r2
 8000fda:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fde:	d201      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d815      	bhi.n	8001010 <__udivmoddi4+0x2cc>
 8000fe4:	4644      	mov	r4, r8
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000fec:	e721      	b.n	8000e32 <__udivmoddi4+0xee>
 8000fee:	1a86      	subs	r6, r0, r2
 8000ff0:	eb64 0303 	sbc.w	r3, r4, r3
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	e70e      	b.n	8000e16 <__udivmoddi4+0xd2>
 8000ff8:	3c02      	subs	r4, #2
 8000ffa:	4472      	add	r2, lr
 8000ffc:	e735      	b.n	8000e6a <__udivmoddi4+0x126>
 8000ffe:	3902      	subs	r1, #2
 8001000:	4472      	add	r2, lr
 8001002:	e6d0      	b.n	8000da6 <__udivmoddi4+0x62>
 8001004:	44f4      	add	ip, lr
 8001006:	3802      	subs	r0, #2
 8001008:	e6e3      	b.n	8000dd2 <__udivmoddi4+0x8e>
 800100a:	44f4      	add	ip, lr
 800100c:	3802      	subs	r0, #2
 800100e:	e742      	b.n	8000e96 <__udivmoddi4+0x152>
 8001010:	3c02      	subs	r4, #2
 8001012:	4472      	add	r2, lr
 8001014:	e7e7      	b.n	8000fe6 <__udivmoddi4+0x2a2>
 8001016:	3802      	subs	r0, #2
 8001018:	4471      	add	r1, lr
 800101a:	e7d0      	b.n	8000fbe <__udivmoddi4+0x27a>
 800101c:	3b02      	subs	r3, #2
 800101e:	443c      	add	r4, r7
 8001020:	e782      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8001022:	3802      	subs	r0, #2
 8001024:	443c      	add	r4, r7
 8001026:	e76a      	b.n	8000efe <__udivmoddi4+0x1ba>

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <_ZN5RadioC1EP16RadioCallbacks_t>:
     *
     * \param [in]  callbacks     The structure of callbacks function pointers
     *                            to be called on radio interrupts
     *
     */
    Radio( RadioCallbacks_t *callbacks )
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
    {
 8001036:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <_ZN5RadioC1EP16RadioCallbacks_t+0x68>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	601a      	str	r2, [r3, #0]
        this->txDone = callbacks->txDone;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	605a      	str	r2, [r3, #4]
        this->rxDone = callbacks->rxDone;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]
        this->rxPreambleDetect = callbacks->rxPreambleDetect;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60da      	str	r2, [r3, #12]
        this->rxSyncWordDone = callbacks->rxSyncWordDone;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	611a      	str	r2, [r3, #16]
        this->rxHeaderDone = callbacks->rxHeaderDone;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	615a      	str	r2, [r3, #20]
        this->txTimeout = callbacks->txTimeout;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
        this->rxTimeout = callbacks->rxTimeout;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	699a      	ldr	r2, [r3, #24]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	61da      	str	r2, [r3, #28]
        this->rxError = callbacks->rxError;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	69da      	ldr	r2, [r3, #28]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	621a      	str	r2, [r3, #32]
        this->cadDone = callbacks->cadDone;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	6a1a      	ldr	r2, [r3, #32]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	625a      	str	r2, [r3, #36]	@ 0x24
    }
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	0800ec48 	.word	0x0800ec48

08001098 <_ZN5RadioD1Ev>:
    virtual ~Radio( void ){ };
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <_ZN5RadioD1Ev+0x1c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	0800ec48 	.word	0x0800ec48

080010b8 <_ZN5RadioD0Ev>:
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ffe9 	bl	8001098 <_ZN5RadioD1Ev>
 80010c6:	2128      	movs	r1, #40	@ 0x28
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f009 f8c2 	bl	800a252 <_ZdlPvj>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_ZN6SX126xC1EP16RadioCallbacks_t>:
    /*!
     * \brief Instantiates a SX126x object and provides API functions to communicates with the radio
     * \param [in]  callbacks      Pointer to the callbacks structure defining
     *                             all callbacks function pointers
     */
    SX126x( RadioCallbacks_t *callbacks ):
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
        Radio( callbacks )
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6839      	ldr	r1, [r7, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffa0 	bl	800102c <_ZN5RadioC1EP16RadioCallbacks_t>
 80010ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001120 <_ZN6SX126xC1EP16RadioCallbacks_t+0x48>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	601a      	str	r2, [r3, #0]
    {
        this->dioIrq      = &SX126x::OnDioIrq;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001124 <_ZN6SX126xC1EP16RadioCallbacks_t+0x4c>)
 80010f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	631a      	str	r2, [r3, #48]	@ 0x30
        this->PacketType  = PACKET_TYPE_NONE;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	220f      	movs	r2, #15
 8001102:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        this->PollingMode = false;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        this->IrqState    = false;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    }
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	0800ec80 	.word	0x0800ec80
 8001124:	0800212d 	.word	0x0800212d

08001128 <_ZN6SX126xD1Ev>:

    virtual ~SX126x( )
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    {
 8001130:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <_ZN6SX126xD1Ev+0x20>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
    }
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffad 	bl	8001098 <_ZN5RadioD1Ev>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	0800ec80 	.word	0x0800ec80

0800114c <_ZN6SX126xD0Ev>:
    virtual ~SX126x( )
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    }
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffe7 	bl	8001128 <_ZN6SX126xD1Ev>
 800115a:	2138      	movs	r1, #56	@ 0x38
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f009 f878 	bl	800a252 <_ZdlPvj>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_ZN9SX126xHalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tmmS3_tP16RadioCallbacks_t>:
#define __SX126x_HAL_CPP__

#include "sx126x-hal.hpp"
#include <cstring>

SX126xHal::SX126xHal(SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *nssPort, uint16_t nssPin,
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	807b      	strh	r3, [r7, #2]
					 uint32_t deviceChannel, GPIO_TypeDef *antSwPort, uint16_t antSwPin,
                     RadioCallbacks_t *callbacks)
    : SX126x(callbacks), hspi(spiHandle), nssPort(nssPort), nssPin(nssPin), busyPort(busyPort), busyPin(busyPin),
      dio1Port(dio1Port), dio1Pin(dio1Pin), dio2Port(dio2Port), dio2Pin(dio2Pin), dio3Port(dio3Port), dio3Pin(dio3Pin),
      rstPort(rstPort), rstPin(rstPin), freqChannel(freqChannel), deviceChannel(deviceChannel),
      antSwPort(antSwPort), antSwPin(antSwPin) {}
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffaa 	bl	80010d8 <_ZN6SX126xC1EP16RadioCallbacks_t>
 8001184:	4a21      	ldr	r2, [pc, #132]	@ (800120c <_ZN9SX126xHalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tmmS3_tP16RadioCallbacks_t+0xa0>)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]
    : SX126x(callbacks), hspi(spiHandle), nssPort(nssPort), nssPin(nssPin), busyPort(busyPort), busyPin(busyPin),
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	645a      	str	r2, [r3, #68]	@ 0x44
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	887a      	ldrh	r2, [r7, #2]
 800119a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	8bba      	ldrh	r2, [r7, #28]
 80011a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
      dio1Port(dio1Port), dio1Pin(dio1Pin), dio2Port(dio2Port), dio2Pin(dio2Pin), dio3Port(dio3Port), dio3Pin(dio3Pin),
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6a3a      	ldr	r2, [r7, #32]
 80011b0:	655a      	str	r2, [r3, #84]	@ 0x54
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80011b6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80011c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011cc:	665a      	str	r2, [r3, #100]	@ 0x64
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80011d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
      rstPort(rstPort), rstPin(rstPin), freqChannel(freqChannel), deviceChannel(deviceChannel),
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011da:	66da      	str	r2, [r3, #108]	@ 0x6c
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80011e0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80011e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011ee:	679a      	str	r2, [r3, #120]	@ 0x78
      antSwPort(antSwPort), antSwPin(antSwPin) {}
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80011f4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80011fc:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	0800ebe8 	.word	0x0800ebe8

08001210 <_ZN9SX126xHalD1Ev>:

SX126xHal::~SX126xHal(void) {}
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	4a05      	ldr	r2, [pc, #20]	@ (8001230 <_ZN9SX126xHalD1Ev+0x20>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff81 	bl	8001128 <_ZN6SX126xD1Ev>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	0800ebe8 	.word	0x0800ebe8

08001234 <_ZN9SX126xHalD0Ev>:
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffe7 	bl	8001210 <_ZN9SX126xHalD1Ev>
 8001242:	2184      	movs	r1, #132	@ 0x84
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f009 f804 	bl	800a252 <_ZdlPvj>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN9SX126xHal7SpiInitEv>:

void SX126xHal::SpiInit(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001266:	2201      	movs	r2, #1
 8001268:	4619      	mov	r1, r3
 800126a:	f002 fe05 	bl	8003e78 <HAL_GPIO_WritePin>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_ZN9SX126xHal9IoIrqInitEM6SX126xFvvE>:
//  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
    HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0); // Set the priority for EXTI11
    HAL_NVIC_EnableIRQ(EXTI11_IRQn); // Enable interrupt for EXTI line 11
}
*/
void SX126xHal::IoIrqInit(DioIrqHandler irqHandler) {
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	e883 0006 	stmia.w	r3, {r1, r2}
    assert_param(irqHandler != NULL);

    // Configure DIO1 pin with interrupt
    // Enable interrupt for the pin and set the priority
     HAL_NVIC_SetPriority(EXTI11_IRQn, 2, 0); // Set the priority for EXTI11
 8001284:	2200      	movs	r2, #0
 8001286:	2102      	movs	r1, #2
 8001288:	2016      	movs	r0, #22
 800128a:	f002 faa1 	bl	80037d0 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(EXTI11_IRQn); // Enable interrupt for EXTI line 11
 800128e:	2016      	movs	r0, #22
 8001290:	f002 fab8 	bl	8003804 <HAL_NVIC_EnableIRQ>
     this->dio1IrqHandler = irqHandler;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3338      	adds	r3, #56	@ 0x38
 8001298:	1d3a      	adds	r2, r7, #4
 800129a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800129e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <_ZN9SX126xHal5ResetEv>:

void SX126xHal::Reset(void) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_RESET);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	f002 fdda 	bl	8003e78 <HAL_GPIO_WritePin>
    	HAL_Delay(50);
 80012c4:	2032      	movs	r0, #50	@ 0x32
 80012c6:	f002 f9a7 	bl	8003618 <HAL_Delay>
    	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_SET);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80012d4:	2201      	movs	r2, #1
 80012d6:	4619      	mov	r1, r3
 80012d8:	f002 fdce 	bl	8003e78 <HAL_GPIO_WritePin>
    	HAL_Delay(20);
 80012dc:	2014      	movs	r0, #20
 80012de:	f002 f99b 	bl	8003618 <HAL_Delay>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <_ZN9SX126xHal6WakeupEv>:

void SX126xHal::Wakeup(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80012fe:	2200      	movs	r2, #0
 8001300:	4619      	mov	r1, r3
 8001302:	f002 fdb9 	bl	8003e78 <HAL_GPIO_WritePin>
    uint8_t dummy[2] = {RADIO_GET_STATUS, 0};
 8001306:	23c0      	movs	r3, #192	@ 0xc0
 8001308:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(hspi, dummy, 2, HAL_MAX_DELAY);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800130e:	f107 010c 	add.w	r1, r7, #12
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	2202      	movs	r2, #2
 8001318:	f007 fa4c 	bl	80087b4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001326:	2201      	movs	r2, #1
 8001328:	4619      	mov	r1, r3
 800132a:	f002 fda5 	bl	8003e78 <HAL_GPIO_WritePin>
    WaitOnBusy();
 800132e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001332:	480b      	ldr	r0, [pc, #44]	@ (8001360 <_ZN9SX126xHal6WakeupEv+0x74>)
 8001334:	f002 fd88 	bl	8003e48 <HAL_GPIO_ReadPin>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	bf0c      	ite	eq
 800133e:	2301      	moveq	r3, #1
 8001340:	2300      	movne	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f2      	bne.n	800132e <_ZN9SX126xHal6WakeupEv+0x42>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001348:	b662      	cpsie	i
}
 800134a:	bf00      	nop
    __enable_irq();
    AntSwOn();
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	334c      	adds	r3, #76	@ 0x4c
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	4798      	blx	r3
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	42021000 	.word	0x42021000

08001364 <_ZN9SX126xHal12WriteCommandE15RadioCommands_ePht>:

void SX126xHal::WriteCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	461a      	mov	r2, r3
 8001370:	460b      	mov	r3, r1
 8001372:	72fb      	strb	r3, [r7, #11]
 8001374:	4613      	mov	r3, r2
 8001376:	813b      	strh	r3, [r7, #8]
	WaitOnBusy();
 8001378:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800137c:	4818      	ldr	r0, [pc, #96]	@ (80013e0 <_ZN9SX126xHal12WriteCommandE15RadioCommands_ePht+0x7c>)
 800137e:	f002 fd63 	bl	8003e48 <HAL_GPIO_ReadPin>
 8001382:	4603      	mov	r3, r0
 8001384:	2b01      	cmp	r3, #1
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f2      	bne.n	8001378 <_ZN9SX126xHal12WriteCommandE15RadioCommands_ePht+0x14>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	f002 fd6a 	bl	8003e78 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, (uint8_t *)&command, 1, HAL_MAX_DELAY);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80013a8:	f107 010b 	add.w	r1, r7, #11
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	2201      	movs	r2, #1
 80013b2:	f007 f9ff 	bl	80087b4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, buffer, size, HAL_MAX_DELAY);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80013ba:	893a      	ldrh	r2, [r7, #8]
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	f007 f9f7 	bl	80087b4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013d0:	2201      	movs	r2, #1
 80013d2:	4619      	mov	r1, r3
 80013d4:	f002 fd50 	bl	8003e78 <HAL_GPIO_WritePin>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	42021000 	.word	0x42021000

080013e4 <_ZN9SX126xHal11ReadCommandE15RadioCommands_ePht>:

void SX126xHal::ReadCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	461a      	mov	r2, r3
 80013f0:	460b      	mov	r3, r1
 80013f2:	72fb      	strb	r3, [r7, #11]
 80013f4:	4613      	mov	r3, r2
 80013f6:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	f002 fd37 	bl	8003e78 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, (uint8_t *)&command, 1, HAL_MAX_DELAY);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800140e:	f107 010b 	add.w	r1, r7, #11
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	2201      	movs	r2, #1
 8001418:	f007 f9cc 	bl	80087b4 <HAL_SPI_Transmit>
    uint8_t dummy = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(hspi, &dummy, 1, HAL_MAX_DELAY);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001424:	f107 0117 	add.w	r1, r7, #23
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	2201      	movs	r2, #1
 800142e:	f007 f9c1 	bl	80087b4 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, size, HAL_MAX_DELAY);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001436:	893a      	ldrh	r2, [r7, #8]
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	f007 fbc9 	bl	8008bd4 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800144c:	2201      	movs	r2, #1
 800144e:	4619      	mov	r1, r3
 8001450:	f002 fd12 	bl	8003e78 <HAL_GPIO_WritePin>
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_ZN9SX126xHal13WriteRegisterEtPht>:

void SX126xHal::WriteRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	461a      	mov	r2, r3
 8001468:	460b      	mov	r3, r1
 800146a:	817b      	strh	r3, [r7, #10]
 800146c:	4613      	mov	r3, r2
 800146e:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800147a:	2200      	movs	r2, #0
 800147c:	4619      	mov	r1, r3
 800147e:	f002 fcfb 	bl	8003e78 <HAL_GPIO_WritePin>
    uint8_t header[3] = {RADIO_WRITE_REGISTER, (uint8_t)((address >> 8) & 0xFF), (uint8_t)(address & 0xFF)};
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	2100      	movs	r1, #0
 8001488:	460a      	mov	r2, r1
 800148a:	801a      	strh	r2, [r3, #0]
 800148c:	460a      	mov	r2, r1
 800148e:	709a      	strb	r2, [r3, #2]
 8001490:	230d      	movs	r3, #13
 8001492:	753b      	strb	r3, [r7, #20]
 8001494:	897b      	ldrh	r3, [r7, #10]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	757b      	strb	r3, [r7, #21]
 800149e:	897b      	ldrh	r3, [r7, #10]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	75bb      	strb	r3, [r7, #22]
    HAL_SPI_Transmit(hspi, header, 3, HAL_MAX_DELAY);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80014a8:	f107 0114 	add.w	r1, r7, #20
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	2203      	movs	r2, #3
 80014b2:	f007 f97f 	bl	80087b4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, buffer, size, HAL_MAX_DELAY);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80014ba:	893a      	ldrh	r2, [r7, #8]
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	f007 f977 	bl	80087b4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014d0:	2201      	movs	r2, #1
 80014d2:	4619      	mov	r1, r3
 80014d4:	f002 fcd0 	bl	8003e78 <HAL_GPIO_WritePin>
}
 80014d8:	bf00      	nop
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_ZN9SX126xHal8WriteRegEth>:

void SX126xHal::WriteReg(uint16_t address, uint8_t value) {
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
    WriteRegister(address, &value, 1);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3318      	adds	r3, #24
 80014f6:	681c      	ldr	r4, [r3, #0]
 80014f8:	1c7a      	adds	r2, r7, #1
 80014fa:	8879      	ldrh	r1, [r7, #2]
 80014fc:	2301      	movs	r3, #1
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	47a0      	blx	r4
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bd90      	pop	{r4, r7, pc}

0800150a <_ZN9SX126xHal12ReadRegisterEtPht>:

void SX126xHal::ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	461a      	mov	r2, r3
 8001516:	460b      	mov	r3, r1
 8001518:	817b      	strh	r3, [r7, #10]
 800151a:	4613      	mov	r3, r2
 800151c:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	f002 fca4 	bl	8003e78 <HAL_GPIO_WritePin>
    uint8_t header[3] = {RADIO_READ_REGISTER, (uint8_t)((address >> 8) & 0xFF), (uint8_t)(address & 0xFF)};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2100      	movs	r1, #0
 8001536:	460a      	mov	r2, r1
 8001538:	801a      	strh	r2, [r3, #0]
 800153a:	460a      	mov	r2, r1
 800153c:	709a      	strb	r2, [r3, #2]
 800153e:	231d      	movs	r3, #29
 8001540:	753b      	strb	r3, [r7, #20]
 8001542:	897b      	ldrh	r3, [r7, #10]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	b29b      	uxth	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	757b      	strb	r3, [r7, #21]
 800154c:	897b      	ldrh	r3, [r7, #10]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	75bb      	strb	r3, [r7, #22]
    HAL_SPI_Transmit(hspi, header, 3, HAL_MAX_DELAY);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001556:	f107 0114 	add.w	r1, r7, #20
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	2203      	movs	r2, #3
 8001560:	f007 f928 	bl	80087b4 <HAL_SPI_Transmit>
    uint8_t dummy = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	74fb      	strb	r3, [r7, #19]
    HAL_SPI_Transmit(hspi, &dummy, 1, HAL_MAX_DELAY);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800156c:	f107 0113 	add.w	r1, r7, #19
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	2201      	movs	r2, #1
 8001576:	f007 f91d 	bl	80087b4 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, size, HAL_MAX_DELAY);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800157e:	893a      	ldrh	r2, [r7, #8]
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	f007 fb25 	bl	8008bd4 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001594:	2201      	movs	r2, #1
 8001596:	4619      	mov	r1, r3
 8001598:	f002 fc6e 	bl	8003e78 <HAL_GPIO_WritePin>
}
 800159c:	bf00      	nop
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_ZN9SX126xHal7ReadRegEt>:

uint8_t SX126xHal::ReadReg(uint16_t address) {
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
    uint8_t value;
    ReadRegister(address, &value, 1);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3320      	adds	r3, #32
 80015b6:	681c      	ldr	r4, [r3, #0]
 80015b8:	f107 020f 	add.w	r2, r7, #15
 80015bc:	8879      	ldrh	r1, [r7, #2]
 80015be:	2301      	movs	r3, #1
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	47a0      	blx	r4
    return value;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd90      	pop	{r4, r7, pc}

080015ce <_ZN9SX126xHal11WriteBufferEhPhh>:

void SX126xHal::WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	461a      	mov	r2, r3
 80015da:	460b      	mov	r3, r1
 80015dc:	72fb      	strb	r3, [r7, #11]
 80015de:	4613      	mov	r3, r2
 80015e0:	72bb      	strb	r3, [r7, #10]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80015ec:	2200      	movs	r2, #0
 80015ee:	4619      	mov	r1, r3
 80015f0:	f002 fc42 	bl	8003e78 <HAL_GPIO_WritePin>
    uint8_t header[2] = {RADIO_WRITE_BUFFER, offset};
 80015f4:	2300      	movs	r3, #0
 80015f6:	82bb      	strh	r3, [r7, #20]
 80015f8:	230e      	movs	r3, #14
 80015fa:	753b      	strb	r3, [r7, #20]
 80015fc:	7afb      	ldrb	r3, [r7, #11]
 80015fe:	757b      	strb	r3, [r7, #21]
    HAL_SPI_Transmit(hspi, header, 2, HAL_MAX_DELAY);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001604:	f107 0114 	add.w	r1, r7, #20
 8001608:	f04f 33ff 	mov.w	r3, #4294967295
 800160c:	2202      	movs	r2, #2
 800160e:	f007 f8d1 	bl	80087b4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, buffer, size, HAL_MAX_DELAY);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001616:	7abb      	ldrb	r3, [r7, #10]
 8001618:	b29a      	uxth	r2, r3
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f007 f8c8 	bl	80087b4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800162e:	2201      	movs	r2, #1
 8001630:	4619      	mov	r1, r3
 8001632:	f002 fc21 	bl	8003e78 <HAL_GPIO_WritePin>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_ZN9SX126xHal10ReadBufferEhPhh>:

void SX126xHal::ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	461a      	mov	r2, r3
 800164a:	460b      	mov	r3, r1
 800164c:	72fb      	strb	r3, [r7, #11]
 800164e:	4613      	mov	r3, r2
 8001650:	72bb      	strb	r3, [r7, #10]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	f002 fc0a 	bl	8003e78 <HAL_GPIO_WritePin>
    uint8_t header[2] = {RADIO_READ_BUFFER, offset};
 8001664:	2300      	movs	r3, #0
 8001666:	82bb      	strh	r3, [r7, #20]
 8001668:	231e      	movs	r3, #30
 800166a:	753b      	strb	r3, [r7, #20]
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	757b      	strb	r3, [r7, #21]
    HAL_SPI_Transmit(hspi, header, 2, HAL_MAX_DELAY);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001674:	f107 0114 	add.w	r1, r7, #20
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
 800167c:	2202      	movs	r2, #2
 800167e:	f007 f899 	bl	80087b4 <HAL_SPI_Transmit>
    uint8_t dummy = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	74fb      	strb	r3, [r7, #19]
    HAL_SPI_Transmit(hspi, &dummy, 1, HAL_MAX_DELAY);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800168a:	f107 0113 	add.w	r1, r7, #19
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	2201      	movs	r2, #1
 8001694:	f007 f88e 	bl	80087b4 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, size, HAL_MAX_DELAY);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800169c:	7abb      	ldrb	r3, [r7, #10]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	f007 fa95 	bl	8008bd4 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80016b4:	2201      	movs	r2, #1
 80016b6:	4619      	mov	r1, r3
 80016b8:	f002 fbde 	bl	8003e78 <HAL_GPIO_WritePin>
}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_ZN9SX126xHal12GetDioStatusEv>:

uint8_t SX126xHal::GetDioStatus(void) {
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
    return (HAL_GPIO_ReadPin(dio3Port, dio3Pin) << 3) | (HAL_GPIO_ReadPin(dio2Port, dio2Pin) << 2) |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80016d6:	4619      	mov	r1, r3
 80016d8:	4610      	mov	r0, r2
 80016da:	f002 fbb5 	bl	8003e48 <HAL_GPIO_ReadPin>
 80016de:	4603      	mov	r3, r0
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	b25c      	sxtb	r4, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80016ee:	4619      	mov	r1, r3
 80016f0:	4610      	mov	r0, r2
 80016f2:	f002 fba9 	bl	8003e48 <HAL_GPIO_ReadPin>
 80016f6:	4603      	mov	r3, r0
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	4323      	orrs	r3, r4
 80016fe:	b25c      	sxtb	r4, r3
           (HAL_GPIO_ReadPin(dio1Port, dio1Pin) << 1) | (HAL_GPIO_ReadPin(busyPort, busyPin));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800170a:	4619      	mov	r1, r3
 800170c:	4610      	mov	r0, r2
 800170e:	f002 fb9b 	bl	8003e48 <HAL_GPIO_ReadPin>
 8001712:	4603      	mov	r3, r0
 8001714:	005b      	lsls	r3, r3, #1
    return (HAL_GPIO_ReadPin(dio3Port, dio3Pin) << 3) | (HAL_GPIO_ReadPin(dio2Port, dio2Pin) << 2) |
 8001716:	b25b      	sxtb	r3, r3
 8001718:	4323      	orrs	r3, r4
 800171a:	b25c      	sxtb	r4, r3
           (HAL_GPIO_ReadPin(dio1Port, dio1Pin) << 1) | (HAL_GPIO_ReadPin(busyPort, busyPin));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001726:	4619      	mov	r1, r3
 8001728:	4610      	mov	r0, r2
 800172a:	f002 fb8d 	bl	8003e48 <HAL_GPIO_ReadPin>
 800172e:	4603      	mov	r3, r0
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4323      	orrs	r3, r4
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2db      	uxtb	r3, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bd90      	pop	{r4, r7, pc}

08001740 <_ZN9SX126xHal13GetDeviceTypeEv>:

uint8_t SX126xHal::GetDeviceType(void) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
        return SX1262;
 8001748:	2301      	movs	r3, #1
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_ZN9SX126xHal13GetFreqSelectEv>:

uint8_t SX126xHal::GetFreqSelect(void) {
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
        return MATCHING_FREQ_868;
 800175e:	2306      	movs	r3, #6
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_ZN9SX126xHal7AntSwOnEv>:

void SX126xHal::AntSwOn(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(antSwPort, antSwPin, GPIO_PIN_SET);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800177e:	2201      	movs	r2, #1
 8001780:	4619      	mov	r1, r3
 8001782:	f002 fb79 	bl	8003e78 <HAL_GPIO_WritePin>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <_ZN9SX126xHal8AntSwOffEv>:

void SX126xHal::AntSwOff(void) {
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(antSwPort, antSwPin, GPIO_PIN_RESET);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80017a0:	2200      	movs	r2, #0
 80017a2:	4619      	mov	r1, r3
 80017a4:	f002 fb68 	bl	8003e78 <HAL_GPIO_WritePin>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_ZN9SX126xHal13InvokeHandlerEv>:

// Method to invoke the handler
void SX126xHal::InvokeHandler(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	if (this->dio1IrqHandler) { // Check if the handler is set
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <_ZN9SX126xHal13InvokeHandlerEv+0x20>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <_ZN9SX126xHal13InvokeHandlerEv+0x20>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <_ZN9SX126xHal13InvokeHandlerEv+0x22>
 80017d0:	2300      	movs	r3, #0
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d01a      	beq.n	800180c <_ZN9SX126xHal13InvokeHandlerEv+0x5c>
		(this->*dio1IrqHandler)(); // Call the member function
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017dc:	1052      	asrs	r2, r2, #1
 80017de:	1899      	adds	r1, r3, r2
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <_ZN9SX126xHal13InvokeHandlerEv+0x42>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f0:	e009      	b.n	8001806 <_ZN9SX126xHal13InvokeHandlerEv+0x56>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017f8:	1052      	asrs	r2, r2, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001802:	4413      	add	r3, r2
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4608      	mov	r0, r1
 8001808:	4798      	blx	r3
    } else {
    	printf("No IRQ handler assigned!");
    }
}
 800180a:	e002      	b.n	8001812 <_ZN9SX126xHal13InvokeHandlerEv+0x62>
    	printf("No IRQ handler assigned!");
 800180c:	4803      	ldr	r0, [pc, #12]	@ (800181c <_ZN9SX126xHal13InvokeHandlerEv+0x6c>)
 800180e:	f009 fd11 	bl	800b234 <iprintf>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	0800ea70 	.word	0x0800ea70

08001820 <_ZN6SX126x4InitEv>:
 */
static bool ImageCalibrated = false;


void SX126x::Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
    CalibrationParams_t calibParam;

    Reset();
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3308      	adds	r3, #8
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
    /*
    uint32_t value = ReadReg(0x08D8);
    value = value | 0x1E;
    WriteReg(0x08D8, value);
	*/
    IoIrqInit(dioIrq);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3330      	adds	r3, #48	@ 0x30
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	322c      	adds	r2, #44	@ 0x2c
 8001840:	ca06      	ldmia	r2, {r1, r2}
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3

    Wakeup();
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	333c      	adds	r3, #60	@ 0x3c
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	4798      	blx	r3
    SetStandby(STDBY_RC);
 8001852:	2100      	movs	r1, #0
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f8db 	bl	8001a10 <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t>

    // Configure TCXO or XTAL based on hardware detection logic

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 800185a:	2101      	movs	r1, #1
 800185c:	4820      	ldr	r0, [pc, #128]	@ (80018e0 <_ZN6SX126x4InitEv+0xc0>)
 800185e:	f002 faf3 	bl	8003e48 <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <_ZN6SX126x4InitEv+0x6a>
    {
        SetDio3AsTcxoCtrl(TCXO_CTRL_1_7V, 320); // 5 ms
 8001872:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001876:	2101      	movs	r1, #1
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f9b5 	bl	8001be8 <_ZN6SX126x17SetDio3AsTcxoCtrlE22RadioTcxoCtrlVoltage_tm>
        calibParam.Value = 0x7F;
 800187e:	237f      	movs	r3, #127	@ 0x7f
 8001880:	733b      	strb	r3, [r7, #12]
        Calibrate(calibParam);
 8001882:	7b39      	ldrb	r1, [r7, #12]
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f901 	bl	8001a8c <_ZN6SX126x9CalibrateE19CalibrationParams_t>
    }

    SetPollingMode();
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fc32 	bl	80020f4 <_ZN6SX126x14SetPollingModeEv>

    AntSwOn();
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	334c      	adds	r3, #76	@ 0x4c
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	4798      	blx	r3
    SetDio2AsRfSwitchCtrl(true);
 800189c:	2101      	movs	r1, #1
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f98a 	bl	8001bb8 <_ZN6SX126x21SetDio2AsRfSwitchCtrlEh>

    OperatingMode = MODE_STDBY_RC;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    SetPacketType(PACKET_TYPE_LORA);
 80018ac:	2101      	movs	r1, #1
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f9fa 	bl	8001ca8 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>

#ifdef USE_CONFIG_PUBLIC_NETWORK
    WriteReg(REG_LR_SYNCWORD, (LORA_MAC_PUBLIC_SYNCWORD >> 8) & 0xFF);
    WriteReg(REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF);
#else
    WriteReg(REG_LR_SYNCWORD, (LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	331c      	adds	r3, #28
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2214      	movs	r2, #20
 80018be:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
    WriteReg(REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	331c      	adds	r3, #28
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2224      	movs	r2, #36	@ 0x24
 80018d0:	f240 7141 	movw	r1, #1857	@ 0x741
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4798      	blx	r3
#endif
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	42020400 	.word	0x42020400

080018e4 <_ZN6SX126x16CheckDeviceReadyEv>:
{

}

void SX126x::CheckDeviceReady(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    if ((GetOperatingMode() == MODE_SLEEP) || (GetOperatingMode() == MODE_RX_DC))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3334      	adds	r3, #52	@ 0x34
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	4798      	blx	r3
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <_ZN6SX126x16CheckDeviceReadyEv+0x2c>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3334      	adds	r3, #52	@ 0x34
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	4798      	blx	r3
 800190a:	4603      	mov	r3, r0
 800190c:	2b06      	cmp	r3, #6
 800190e:	d101      	bne.n	8001914 <_ZN6SX126x16CheckDeviceReadyEv+0x30>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <_ZN6SX126x16CheckDeviceReadyEv+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <_ZN6SX126x16CheckDeviceReadyEv+0x4e>
    {
        Wakeup();
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	333c      	adds	r3, #60	@ 0x3c
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	4798      	blx	r3
        AntSwOn();
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	334c      	adds	r3, #76	@ 0x4c
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
    }
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_ZN6SX126x16GetOperatingModeEv>:

RadioOperatingModes_t SX126x::GetOperatingMode( void )
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
    return OperatingMode;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_ZN6SX126x10SetPayloadEPhh>:


void SX126x::SetPayload( uint8_t *payload, uint8_t size )
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	4613      	mov	r3, r2
 8001960:	71fb      	strb	r3, [r7, #7]
    WriteBuffer( 0x00, payload, size );
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3328      	adds	r3, #40	@ 0x28
 8001968:	681c      	ldr	r4, [r3, #0]
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	2100      	movs	r1, #0
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	47a0      	blx	r4
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bd90      	pop	{r4, r7, pc}

0800197c <_ZN6SX126x10SetCrcSeedEt>:
    WriteRegister( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SX126x::SetCrcSeed( uint16_t seed )
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	0a1b      	lsrs	r3, r3, #8
 800198c:	b29b      	uxth	r3, r3
 800198e:	b2db      	uxtb	r3, r3
 8001990:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	737b      	strb	r3, [r7, #13]

    switch( GetPacketType( ) )
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f9a1 	bl	8001ce0 <_ZN6SX126x13GetPacketTypeEv>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10b      	bne.n	80019bc <_ZN6SX126x10SetCrcSeedEt+0x40>
    {
        case PACKET_TYPE_GFSK:
            WriteRegister( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3318      	adds	r3, #24
 80019aa:	681c      	ldr	r4, [r3, #0]
 80019ac:	f107 020c 	add.w	r2, r7, #12
 80019b0:	2302      	movs	r3, #2
 80019b2:	f240 61bc 	movw	r1, #1724	@ 0x6bc
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	47a0      	blx	r4
            break;
 80019ba:	e000      	b.n	80019be <_ZN6SX126x10SetCrcSeedEt+0x42>

        default:
            break;
 80019bc:	bf00      	nop
    }
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd90      	pop	{r4, r7, pc}

080019c6 <_ZN6SX126x16SetCrcPolynomialEt>:

void SX126x::SetCrcPolynomial( uint16_t polynomial )
{
 80019c6:	b590      	push	{r4, r7, lr}
 80019c8:	b085      	sub	sp, #20
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80019d2:	887b      	ldrh	r3, [r7, #2]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80019dc:	887b      	ldrh	r3, [r7, #2]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	737b      	strb	r3, [r7, #13]

    switch( GetPacketType( ) )
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f97c 	bl	8001ce0 <_ZN6SX126x13GetPacketTypeEv>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10b      	bne.n	8001a06 <_ZN6SX126x16SetCrcPolynomialEt+0x40>
    {
        case PACKET_TYPE_GFSK:
            WriteRegister( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	3318      	adds	r3, #24
 80019f4:	681c      	ldr	r4, [r3, #0]
 80019f6:	f107 020c 	add.w	r2, r7, #12
 80019fa:	2302      	movs	r3, #2
 80019fc:	f240 61be 	movw	r1, #1726	@ 0x6be
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	47a0      	blx	r4
            break;
 8001a04:	e000      	b.n	8001a08 <_ZN6SX126x16SetCrcPolynomialEt+0x42>

        default:
            break;
 8001a06:	bf00      	nop
    }
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd90      	pop	{r4, r7, pc}

08001a10 <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t>:
    WriteCommand(RADIO_SET_SLEEP, &sleepConfig.Value, 1);
    OperatingMode = MODE_SLEEP;
}

void SX126x::SetStandby(RadioStandbyModes_t standbyConfig)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	70fb      	strb	r3, [r7, #3]
    WriteCommand(RADIO_SET_STANDBY, (uint8_t *)&standbyConfig, 1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	3310      	adds	r3, #16
 8001a22:	681c      	ldr	r4, [r3, #0]
 8001a24:	1cfa      	adds	r2, r7, #3
 8001a26:	2301      	movs	r3, #1
 8001a28:	2180      	movs	r1, #128	@ 0x80
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	47a0      	blx	r4
    OperatingMode = (standbyConfig == STDBY_RC) ? MODE_STDBY_RC : MODE_STDBY_XOSC;
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t+0x28>
 8001a34:	2201      	movs	r2, #1
 8001a36:	e000      	b.n	8001a3a <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t+0x2a>
 8001a38:	2202      	movs	r2, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd90      	pop	{r4, r7, pc}

08001a48 <_ZN6SX126x5SetTxEm>:

void SX126x::SetTx(uint32_t timeout)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2204      	movs	r2, #4
 8001a56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	0c1b      	lsrs	r3, r3, #16
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t)(timeout & 0xFF);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	73bb      	strb	r3, [r7, #14]
    WriteCommand(RADIO_SET_TX, buf, 3);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	3310      	adds	r3, #16
 8001a76:	681c      	ldr	r4, [r3, #0]
 8001a78:	f107 020c 	add.w	r2, r7, #12
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	2183      	movs	r1, #131	@ 0x83
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	47a0      	blx	r4
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd90      	pop	{r4, r7, pc}

08001a8c <_ZN6SX126x9CalibrateE19CalibrationParams_t>:
#endif
    WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}

void SX126x::Calibrate( CalibrationParams_t calibParam )
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	7039      	strb	r1, [r7, #0]
    WriteCommand( RADIO_CALIBRATE, &calibParam.Value, 1 );
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	3310      	adds	r3, #16
 8001a9c:	681c      	ldr	r4, [r3, #0]
 8001a9e:	463a      	mov	r2, r7
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	2189      	movs	r1, #137	@ 0x89
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	47a0      	blx	r4
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}

08001ab0 <_ZN6SX126x11SetPaConfigEhhhh>:
    }
    WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
}

void SX126x::SetPaConfig( uint8_t paDutyCycle, uint8_t HpMax, uint8_t deviceSel, uint8_t paLUT )
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	70fb      	strb	r3, [r7, #3]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	70bb      	strb	r3, [r7, #2]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	707b      	strb	r3, [r7, #1]
    uint8_t buf[4];

#ifdef ADV_DEBUG
    printf("SetPaConfig ");
 8001aca:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <_ZN6SX126x11SetPaConfigEhhhh+0x50>)
 8001acc:	f009 fbb2 	bl	800b234 <iprintf>
#endif

    buf[0] = paDutyCycle;
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	733b      	strb	r3, [r7, #12]
    buf[1] = HpMax;
 8001ad4:	78bb      	ldrb	r3, [r7, #2]
 8001ad6:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8001ad8:	787b      	ldrb	r3, [r7, #1]
 8001ada:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLUT;
 8001adc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ae0:	73fb      	strb	r3, [r7, #15]
    WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	3310      	adds	r3, #16
 8001ae8:	681c      	ldr	r4, [r3, #0]
 8001aea:	f107 020c 	add.w	r2, r7, #12
 8001aee:	2304      	movs	r3, #4
 8001af0:	2195      	movs	r1, #149	@ 0x95
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	47a0      	blx	r4
}
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd90      	pop	{r4, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	0800eaec 	.word	0x0800eaec

08001b04 <_ZN6SX126x15SetDioIrqParamsEtttt>:
{
    WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SX126x::SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	4608      	mov	r0, r1
 8001b0e:	4611      	mov	r1, r2
 8001b10:	461a      	mov	r2, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	817b      	strh	r3, [r7, #10]
 8001b16:	460b      	mov	r3, r1
 8001b18:	813b      	strh	r3, [r7, #8]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[8];

#ifdef ADV_DEBUG
    printf("SetDioIrqParams ");
 8001b1e:	4818      	ldr	r0, [pc, #96]	@ (8001b80 <_ZN6SX126x15SetDioIrqParamsEtttt+0x7c>)
 8001b20:	f009 fb88 	bl	800b234 <iprintf>
#endif

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8001b24:	897b      	ldrh	r3, [r7, #10]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	743b      	strb	r3, [r7, #16]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8001b2e:	897b      	ldrh	r3, [r7, #10]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8001b34:	893b      	ldrh	r3, [r7, #8]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001b3e:	893b      	ldrh	r3, [r7, #8]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	0a1b      	lsrs	r3, r3, #8
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8001b54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	75bb      	strb	r3, [r7, #22]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001b5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	75fb      	strb	r3, [r7, #23]
    WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3310      	adds	r3, #16
 8001b6a:	681c      	ldr	r4, [r3, #0]
 8001b6c:	f107 0210 	add.w	r2, r7, #16
 8001b70:	2308      	movs	r3, #8
 8001b72:	2108      	movs	r1, #8
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	47a0      	blx	r4
}
 8001b78:	bf00      	nop
 8001b7a:	371c      	adds	r7, #28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}
 8001b80:	0800eafc 	.word	0x0800eafc

08001b84 <_ZN6SX126x12GetIrqStatusEv>:

uint16_t SX126x::GetIrqStatus( void )
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
    uint8_t irqStatus[2];

    ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	3314      	adds	r3, #20
 8001b92:	681c      	ldr	r4, [r3, #0]
 8001b94:	f107 020c 	add.w	r2, r7, #12
 8001b98:	2302      	movs	r3, #2
 8001b9a:	2112      	movs	r1, #18
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	47a0      	blx	r4
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 8001ba0:	7b3b      	ldrb	r3, [r7, #12]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	7b7b      	ldrb	r3, [r7, #13]
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	4313      	orrs	r3, r2
 8001bac:	b21b      	sxth	r3, r3
 8001bae:	b29b      	uxth	r3, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}

08001bb8 <_ZN6SX126x21SetDio2AsRfSwitchCtrlEh>:

void SX126x::SetDio2AsRfSwitchCtrl( uint8_t enable )
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
#ifdef ADV_DEBUG
    printf("SetDio2AsRfSwitchCtrl ");
 8001bc4:	4807      	ldr	r0, [pc, #28]	@ (8001be4 <_ZN6SX126x21SetDio2AsRfSwitchCtrlEh+0x2c>)
 8001bc6:	f009 fb35 	bl	800b234 <iprintf>
#endif
    WriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	3310      	adds	r3, #16
 8001bd0:	681c      	ldr	r4, [r3, #0]
 8001bd2:	1cfa      	adds	r2, r7, #3
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	219d      	movs	r1, #157	@ 0x9d
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	47a0      	blx	r4
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd90      	pop	{r4, r7, pc}
 8001be4:	0800eb10 	.word	0x0800eb10

08001be8 <_ZN6SX126x17SetDio3AsTcxoCtrlE22RadioTcxoCtrlVoltage_tm>:

void SX126x::SetDio3AsTcxoCtrl(RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8001bf6:	7afb      	ldrb	r3, [r7, #11]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	753b      	strb	r3, [r7, #20]
    buf[1] = (uint8_t)((timeout >> 16) & 0xFF);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	0c1b      	lsrs	r3, r3, #16
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	757b      	strb	r3, [r7, #21]
    buf[2] = (uint8_t)((timeout >> 8) & 0xFF);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	75bb      	strb	r3, [r7, #22]
    buf[3] = (uint8_t)(timeout & 0xFF);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	75fb      	strb	r3, [r7, #23]
    WriteCommand(RADIO_SET_TCXOMODE, buf, 4);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3310      	adds	r3, #16
 8001c1c:	681c      	ldr	r4, [r3, #0]
 8001c1e:	f107 0214 	add.w	r2, r7, #20
 8001c22:	2304      	movs	r3, #4
 8001c24:	2197      	movs	r1, #151	@ 0x97
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	47a0      	blx	r4
}
 8001c2a:	bf00      	nop
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd90      	pop	{r4, r7, pc}
 8001c32:	0000      	movs	r0, r0
 8001c34:	0000      	movs	r0, r0
	...

08001c38 <_ZN6SX126x14SetRfFrequencyEm>:

void SX126x::SetRfFrequency(uint32_t frequency)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
    uint8_t buf[4];
    uint32_t freq = (uint32_t)((double)frequency / (double)FREQ_STEP);
 8001c42:	6838      	ldr	r0, [r7, #0]
 8001c44:	f7fe fc6e 	bl	8000524 <__aeabi_ui2d>
 8001c48:	a315      	add	r3, pc, #84	@ (adr r3, 8001ca0 <_ZN6SX126x14SetRfFrequencyEm+0x68>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	f7fe fe0d 	bl	800086c <__aeabi_ddiv>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ffb5 	bl	8000bc8 <__aeabi_d2uiz>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	60fb      	str	r3, [r7, #12]

    buf[0] = (uint8_t)((freq >> 24) & 0xFF);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	0e1b      	lsrs	r3, r3, #24
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)((freq >> 16) & 0xFF);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	0c1b      	lsrs	r3, r3, #16
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	727b      	strb	r3, [r7, #9]
    buf[2] = (uint8_t)((freq >> 8) & 0xFF);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	72bb      	strb	r3, [r7, #10]
    buf[3] = (uint8_t)(freq & 0xFF);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	72fb      	strb	r3, [r7, #11]
    WriteCommand(RADIO_SET_RFFREQUENCY, buf, 4);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3310      	adds	r3, #16
 8001c86:	681c      	ldr	r4, [r3, #0]
 8001c88:	f107 0208 	add.w	r2, r7, #8
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	2186      	movs	r1, #134	@ 0x86
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	47a0      	blx	r4
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd90      	pop	{r4, r7, pc}
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	00000000 	.word	0x00000000
 8001ca4:	3fee8480 	.word	0x3fee8480

08001ca8 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>:

void SX126x::SetPacketType( RadioPacketTypes_t packetType )
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
#ifdef ADV_DEBUG
    printf("SetPacketType ");
 8001cb4:	4809      	ldr	r0, [pc, #36]	@ (8001cdc <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t+0x34>)
 8001cb6:	f009 fabd 	bl	800b234 <iprintf>
#endif

    // Save packet type internally to avoid questioning the radio
    this->PacketType = packetType;
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3310      	adds	r3, #16
 8001cc8:	681c      	ldr	r4, [r3, #0]
 8001cca:	1cfa      	adds	r2, r7, #3
 8001ccc:	2301      	movs	r3, #1
 8001cce:	218a      	movs	r1, #138	@ 0x8a
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	47a0      	blx	r4
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd90      	pop	{r4, r7, pc}
 8001cdc:	0800eb28 	.word	0x0800eb28

08001ce0 <_ZN6SX126x13GetPacketTypeEv>:

RadioPacketTypes_t SX126x::GetPacketType( void )
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    return this->PacketType;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_ZN6SX126x11SetTxParamsEa16RadioRampTimes_t>:

void SX126x::SetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
 8001cfa:	b590      	push	{r4, r7, lr}
 8001cfc:	b087      	sub	sp, #28
 8001cfe:	af02      	add	r7, sp, #8
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	70fb      	strb	r3, [r7, #3]
 8001d06:	4613      	mov	r3, r2
 8001d08:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];

	SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	2207      	movs	r2, #7
 8001d12:	2104      	movs	r1, #4
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff fecb 	bl	8001ab0 <_ZN6SX126x11SetPaConfigEhhhh>
	power = 22;
 8001d1a:	2316      	movs	r3, #22
 8001d1c:	70fb      	strb	r3, [r7, #3]
	WriteReg( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	331c      	adds	r3, #28
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2238      	movs	r2, #56	@ 0x38
 8001d28:	f640 01e7 	movw	r1, #2279	@ 0x8e7
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	4798      	blx	r3
	buf[0] = power;
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	733b      	strb	r3, [r7, #12]
	buf[1] = RADIO_RAMP_200_US;
 8001d34:	2304      	movs	r3, #4
 8001d36:	737b      	strb	r3, [r7, #13]

	WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3310      	adds	r3, #16
 8001d3e:	681c      	ldr	r4, [r3, #0]
 8001d40:	f107 020c 	add.w	r2, r7, #12
 8001d44:	2302      	movs	r3, #2
 8001d46:	218e      	movs	r1, #142	@ 0x8e
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	47a0      	blx	r4
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd90      	pop	{r4, r7, pc}
 8001d54:	0000      	movs	r0, r0
	...

08001d58 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t>:

void SX126x::SetModulationParams( ModulationParams_t *modulationParams )
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
    uint8_t n;
    uint32_t tempVal = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001d66:	4a74      	ldr	r2, [pc, #464]	@ (8001f38 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1e0>)
 8001d68:	f107 0308 	add.w	r3, r7, #8
 8001d6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d70:	e883 0003 	stmia.w	r3, {r0, r1}

#ifdef ADV_DEBUG
    printf("SetModulationParams ");
 8001d74:	4871      	ldr	r0, [pc, #452]	@ (8001f3c <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1e4>)
 8001d76:	f009 fa5d 	bl	800b234 <iprintf>
#endif

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != modulationParams->PacketType )
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d005      	beq.n	8001d94 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x3c>
    {
        this->SetPacketType( modulationParams->PacketType );
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ff8a 	bl	8001ca8 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( modulationParams->PacketType )
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x4a>
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d04e      	beq.n	8001e3e <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0xe6>
        buf[2] = modulationParams->Params.LoRa.CodingRate;
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
        break;
    default:
    case PACKET_TYPE_NONE:
        return;
 8001da0:	e0bd      	b.n	8001f1e <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1c6>
        n = 8;
 8001da2:	2308      	movs	r3, #8
 8001da4:	75fb      	strb	r3, [r7, #23]
        tempVal = ( uint32_t )( 32 * ( ( double )XTAL_FREQ / ( double )modulationParams->Params.Gfsk.BitRate ) );
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbba 	bl	8000524 <__aeabi_ui2d>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	a15c      	add	r1, pc, #368	@ (adr r1, 8001f28 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1d0>)
 8001db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dba:	f7fe fd57 	bl	800086c <__aeabi_ddiv>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	4b5d      	ldr	r3, [pc, #372]	@ (8001f40 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1e8>)
 8001dcc:	f7fe fc24 	bl	8000618 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe fef6 	bl	8000bc8 <__aeabi_d2uiz>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	613b      	str	r3, [r7, #16]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	0c1b      	lsrs	r3, r3, #16
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	7b1b      	ldrb	r3, [r3, #12]
 8001dfa:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	7b5b      	ldrb	r3, [r3, #13]
 8001e00:	733b      	strb	r3, [r7, #12]
        tempVal = ( uint32_t )( ( double )modulationParams->Params.Gfsk.Fdev / ( double )FREQ_STEP );
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fb8c 	bl	8000524 <__aeabi_ui2d>
 8001e0c:	a348      	add	r3, pc, #288	@ (adr r3, 8001f30 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1d8>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f7fe fd2b 	bl	800086c <__aeabi_ddiv>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7fe fed3 	bl	8000bc8 <__aeabi_d2uiz>
 8001e22:	4603      	mov	r3, r0
 8001e24:	613b      	str	r3, [r7, #16]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	0c1b      	lsrs	r3, r3, #16
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	73fb      	strb	r3, [r7, #15]
        break;
 8001e3c:	e064      	b.n	8001f08 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1b0>
        n = 4;
 8001e3e:	2304      	movs	r3, #4
 8001e40:	75fb      	strb	r3, [r7, #23]
        switch( modulationParams->Params.LoRa.Bandwidth )
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	7c5b      	ldrb	r3, [r3, #17]
 8001e46:	2b0a      	cmp	r3, #10
 8001e48:	d850      	bhi.n	8001eec <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x194>
 8001e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e50 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0xf8>)
 8001e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e50:	08001ee5 	.word	0x08001ee5
 8001e54:	08001ee5 	.word	0x08001ee5
 8001e58:	08001ee5 	.word	0x08001ee5
 8001e5c:	08001eb5 	.word	0x08001eb5
 8001e60:	08001e9d 	.word	0x08001e9d
 8001e64:	08001e85 	.word	0x08001e85
 8001e68:	08001e7d 	.word	0x08001e7d
 8001e6c:	08001eed 	.word	0x08001eed
 8001e70:	08001ee5 	.word	0x08001ee5
 8001e74:	08001ee5 	.word	0x08001ee5
 8001e78:	08001ecd 	.word	0x08001ecd
                 modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	74da      	strb	r2, [r3, #19]
                break;
 8001e82:	e034      	b.n	8001eee <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x196>
                if( modulationParams->Params.LoRa.SpreadingFactor == 12 )
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	7c1b      	ldrb	r3, [r3, #16]
 8001e88:	2b0c      	cmp	r3, #12
 8001e8a:	d103      	bne.n	8001e94 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x13c>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	74da      	strb	r2, [r3, #19]
                break;
 8001e92:	e02c      	b.n	8001eee <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x196>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2200      	movs	r2, #0
 8001e98:	74da      	strb	r2, [r3, #19]
                break;
 8001e9a:	e028      	b.n	8001eee <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x196>
                if( modulationParams->Params.LoRa.SpreadingFactor >= 11 )
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	7c1b      	ldrb	r3, [r3, #16]
 8001ea0:	2b0a      	cmp	r3, #10
 8001ea2:	d903      	bls.n	8001eac <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x154>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	74da      	strb	r2, [r3, #19]
                break;
 8001eaa:	e020      	b.n	8001eee <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x196>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	74da      	strb	r2, [r3, #19]
                break;
 8001eb2:	e01c      	b.n	8001eee <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x196>
                if( modulationParams->Params.LoRa.SpreadingFactor >= 10 )
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	7c1b      	ldrb	r3, [r3, #16]
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	d903      	bls.n	8001ec4 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x16c>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	74da      	strb	r2, [r3, #19]
                break;
 8001ec2:	e014      	b.n	8001eee <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x196>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	74da      	strb	r2, [r3, #19]
                break;
 8001eca:	e010      	b.n	8001eee <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x196>
                if( modulationParams->Params.LoRa.SpreadingFactor >= 9 )
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	7c1b      	ldrb	r3, [r3, #16]
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d903      	bls.n	8001edc <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x184>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	74da      	strb	r2, [r3, #19]
                break;
 8001eda:	e008      	b.n	8001eee <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x196>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	74da      	strb	r2, [r3, #19]
                break;
 8001ee2:	e004      	b.n	8001eee <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x196>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	74da      	strb	r2, [r3, #19]
                break;
 8001eea:	e000      	b.n	8001eee <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x196>
                break;
 8001eec:	bf00      	nop
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	7c1b      	ldrb	r3, [r3, #16]
 8001ef2:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	7c5b      	ldrb	r3, [r3, #17]
 8001ef8:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	7c9b      	ldrb	r3, [r3, #18]
 8001efe:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	7cdb      	ldrb	r3, [r3, #19]
 8001f04:	72fb      	strb	r3, [r7, #11]
        break;
 8001f06:	bf00      	nop
    }
    WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3310      	adds	r3, #16
 8001f0e:	681c      	ldr	r4, [r3, #0]
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f107 0208 	add.w	r2, r7, #8
 8001f18:	218b      	movs	r1, #139	@ 0x8b
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	47a0      	blx	r4
}
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd90      	pop	{r4, r7, pc}
 8001f24:	f3af 8000 	nop.w
 8001f28:	00000000 	.word	0x00000000
 8001f2c:	417e8480 	.word	0x417e8480
 8001f30:	00000000 	.word	0x00000000
 8001f34:	3fee8480 	.word	0x3fee8480
 8001f38:	0800eb50 	.word	0x0800eb50
 8001f3c:	0800eb38 	.word	0x0800eb38
 8001f40:	40400000 	.word	0x40400000

08001f44 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t>:

void SX126x::SetPacketParams( PacketParams_t *packetParams )
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
    uint8_t n;
    uint8_t crcVal = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001f52:	4a49      	ldr	r2, [pc, #292]	@ (8002078 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x134>)
 8001f54:	f107 030c 	add.w	r3, r7, #12
 8001f58:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f5a:	c303      	stmia	r3!, {r0, r1}
 8001f5c:	701a      	strb	r2, [r3, #0]

#ifdef ADV_DEBUG
    printf("SetPacketParams ");
 8001f5e:	4847      	ldr	r0, [pc, #284]	@ (800207c <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x138>)
 8001f60:	f009 f968 	bl	800b234 <iprintf>
#endif

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != packetParams->PacketType )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d005      	beq.n	8001f7e <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x3a>
    {
        this->SetPacketType( packetParams->PacketType );
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	4619      	mov	r1, r3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fe95 	bl	8001ca8 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( packetParams->PacketType )
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x48>
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d04e      	beq.n	8002028 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0xe4>
        buf[4] = packetParams->Params.LoRa.CrcMode;
        buf[5] = packetParams->Params.LoRa.InvertIQ;
        break;
    default:
    case PACKET_TYPE_NONE:
        return;
 8001f8a:	e071      	b.n	8002070 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x12c>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	7a5b      	ldrb	r3, [r3, #9]
 8001f90:	2bf1      	cmp	r3, #241	@ 0xf1
 8001f92:	d10c      	bne.n	8001fae <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x6a>
            SetCrcSeed( CRC_IBM_SEED );
 8001f94:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fcef 	bl	800197c <_ZN6SX126x10SetCrcSeedEt>
            SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8001f9e:	f248 0105 	movw	r1, #32773	@ 0x8005
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fd0f 	bl	80019c6 <_ZN6SX126x16SetCrcPolynomialEt>
            crcVal = RADIO_CRC_2_BYTES;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	75bb      	strb	r3, [r7, #22]
 8001fac:	e013      	b.n	8001fd6 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x92>
        else if(  packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	7a5b      	ldrb	r3, [r3, #9]
 8001fb2:	2bf2      	cmp	r3, #242	@ 0xf2
 8001fb4:	d10c      	bne.n	8001fd0 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x8c>
            SetCrcSeed( CRC_CCITT_SEED );
 8001fb6:	f641 510f 	movw	r1, #7439	@ 0x1d0f
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fcde 	bl	800197c <_ZN6SX126x10SetCrcSeedEt>
            SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8001fc0:	f241 0121 	movw	r1, #4129	@ 0x1021
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff fcfe 	bl	80019c6 <_ZN6SX126x16SetCrcPolynomialEt>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8001fca:	2306      	movs	r3, #6
 8001fcc:	75bb      	strb	r3, [r7, #22]
 8001fce:	e002      	b.n	8001fd6 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x92>
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	7a5b      	ldrb	r3, [r3, #9]
 8001fd4:	75bb      	strb	r3, [r7, #22]
        n = 9;
 8001fd6:	2309      	movs	r3, #9
 8001fd8:	75fb      	strb	r3, [r7, #23]
        packetParams->Params.Gfsk.PreambleLength = packetParams->Params.Gfsk.PreambleLength << 3;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	885b      	ldrh	r3, [r3, #2]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	805a      	strh	r2, [r3, #2]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	885b      	ldrh	r3, [r3, #2]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	885b      	ldrh	r3, [r3, #2]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	791b      	ldrb	r3, [r3, #4]
 8001ffe:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength << 3 ); // convert from byte to bit
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	795b      	ldrb	r3, [r3, #5]
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	799b      	ldrb	r3, [r3, #6]
 800200e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	79db      	ldrb	r3, [r3, #7]
 8002014:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	7a1b      	ldrb	r3, [r3, #8]
 800201a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800201c:	7dbb      	ldrb	r3, [r7, #22]
 800201e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	7a9b      	ldrb	r3, [r3, #10]
 8002024:	753b      	strb	r3, [r7, #20]
        break;
 8002026:	e018      	b.n	800205a <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x116>
        n = 6;
 8002028:	2306      	movs	r3, #6
 800202a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	899b      	ldrh	r3, [r3, #12]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	b29b      	uxth	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	899b      	ldrh	r3, [r3, #12]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.LoRa.HeaderType;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	7b9b      	ldrb	r3, [r3, #14]
 8002044:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	7bdb      	ldrb	r3, [r3, #15]
 800204a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	7c1b      	ldrb	r3, [r3, #16]
 8002050:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	7c5b      	ldrb	r3, [r3, #17]
 8002056:	747b      	strb	r3, [r7, #17]
        break;
 8002058:	bf00      	nop
    }
    WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3310      	adds	r3, #16
 8002060:	681c      	ldr	r4, [r3, #0]
 8002062:	7dfb      	ldrb	r3, [r7, #23]
 8002064:	b29b      	uxth	r3, r3
 8002066:	f107 020c 	add.w	r2, r7, #12
 800206a:	218c      	movs	r1, #140	@ 0x8c
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	47a0      	blx	r4
}
 8002070:	371c      	adds	r7, #28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd90      	pop	{r4, r7, pc}
 8002076:	bf00      	nop
 8002078:	0800eb6c 	.word	0x0800eb6c
 800207c:	0800eb58 	.word	0x0800eb58

08002080 <_ZN6SX126x9GetStatusEv>:
    buf[1] = rxBaseAddress;
    WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
}

RadioStatus_t SX126x::GetStatus( void )
{
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
    uint8_t stat = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
    RadioStatus_t status;

    ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3314      	adds	r3, #20
 8002092:	681c      	ldr	r4, [r3, #0]
 8002094:	f107 020f 	add.w	r2, r7, #15
 8002098:	2301      	movs	r3, #1
 800209a:	21c0      	movs	r1, #192	@ 0xc0
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	47a0      	blx	r4
    status.Value = stat;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	733b      	strb	r3, [r7, #12]
    return status;
 80020a4:	7b3b      	ldrb	r3, [r7, #12]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}
	...

080020b0 <_ZN6SX126x14ClearIrqStatusEt>:
    ReadCommand( RADIO_GET_ERROR, ( uint8_t * )&error, 2 );
    return error;
}

void SX126x::ClearIrqStatus( uint16_t irq )
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];
#ifdef ADV_DEBUG
    printf("ClearIrqStatus ");
 80020bc:	480c      	ldr	r0, [pc, #48]	@ (80020f0 <_ZN6SX126x14ClearIrqStatusEt+0x40>)
 80020be:	f009 f8b9 	bl	800b234 <iprintf>
#endif
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 80020c2:	887b      	ldrh	r3, [r7, #2]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3310      	adds	r3, #16
 80020d8:	681c      	ldr	r4, [r3, #0]
 80020da:	f107 020c 	add.w	r2, r7, #12
 80020de:	2302      	movs	r3, #2
 80020e0:	2102      	movs	r1, #2
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	47a0      	blx	r4
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	0800eb90 	.word	0x0800eb90

080020f4 <_ZN6SX126x14SetPollingModeEv>:

void SX126x::SetPollingMode( void )
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
    this->PollingMode = true;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_ZN6SX126x16SetInterruptModeEv>:

void SX126x::SetInterruptMode( void )
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    this->PollingMode = false;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <_ZN6SX126x8OnDioIrqEv>:

void SX126x::OnDioIrq( void )
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
    /*
     * When polling mode is activated, it is up to the application to call
     * ProcessIrqs( ). Otherwise, the driver automatically calls ProcessIrqs( )
     * on radio interrupt.
     */
    if( this->PollingMode == true )
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800213a:	2b01      	cmp	r3, #1
 800213c:	d104      	bne.n	8002148 <_ZN6SX126x8OnDioIrqEv+0x1c>
    {
        this->IrqState = true;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    }
    else
    {
        this->ProcessIrqs( );
    }
}
 8002146:	e002      	b.n	800214e <_ZN6SX126x8OnDioIrqEv+0x22>
        this->ProcessIrqs( );
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f805 	bl	8002158 <_ZN6SX126x11ProcessIrqsEv>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <_ZN6SX126x11ProcessIrqsEv>:

void SX126x::ProcessIrqs( void )
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    if( this->PollingMode == true )
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10d      	bne.n	8002186 <_ZN6SX126x11ProcessIrqsEv+0x2e>
    {
        if( this->IrqState == true )
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002170:	2b01      	cmp	r3, #1
 8002172:	f040 80a2 	bne.w	80022ba <_ZN6SX126x11ProcessIrqsEv+0x162>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002176:	b672      	cpsid	i
}
 8002178:	bf00      	nop
        {
            __disable_irq( );
            this->IrqState = false;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002182:	b662      	cpsie	i
}
 8002184:	bf00      	nop
        {
            return;
        }
    }

    uint16_t irqRegs = GetIrqStatus( );
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fcfc 	bl	8001b84 <_ZN6SX126x12GetIrqStatusEv>
 800218c:	4603      	mov	r3, r0
 800218e:	81fb      	strh	r3, [r7, #14]
    ClearIrqStatus( IRQ_RADIO_ALL );
 8002190:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff8b 	bl	80020b0 <_ZN6SX126x14ClearIrqStatusEt>

#ifdef ADV_DEBUG
    printf("0x%04x\n\r", irqRegs );
 800219a:	89fb      	ldrh	r3, [r7, #14]
 800219c:	4619      	mov	r1, r3
 800219e:	4849      	ldr	r0, [pc, #292]	@ (80022c4 <_ZN6SX126x11ProcessIrqsEv+0x16c>)
 80021a0:	f009 f848 	bl	800b234 <iprintf>
#endif

    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 80021a4:	89fb      	ldrh	r3, [r7, #14]
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d02b      	beq.n	8002206 <_ZN6SX126x11ProcessIrqsEv+0xae>
    {
        // LoRa Only
        FrequencyError = 0x000000 | ( ( 0x0F & ReadReg( REG_FREQUENCY_ERRORBASEADDR ) ) << 16 );
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3324      	adds	r3, #36	@ 0x24
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f240 716b 	movw	r1, #1899	@ 0x76b
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4798      	blx	r3
 80021be:	4603      	mov	r3, r0
 80021c0:	041b      	lsls	r3, r3, #16
 80021c2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80021c6:	4a40      	ldr	r2, [pc, #256]	@ (80022c8 <_ZN6SX126x11ProcessIrqsEv+0x170>)
 80021c8:	6013      	str	r3, [r2, #0]
        FrequencyError = FrequencyError | ( ReadReg( REG_FREQUENCY_ERRORBASEADDR + 1 ) << 8 );
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	3324      	adds	r3, #36	@ 0x24
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f240 716c 	movw	r1, #1900	@ 0x76c
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4798      	blx	r3
 80021da:	4603      	mov	r3, r0
 80021dc:	021a      	lsls	r2, r3, #8
 80021de:	4b3a      	ldr	r3, [pc, #232]	@ (80022c8 <_ZN6SX126x11ProcessIrqsEv+0x170>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	4a38      	ldr	r2, [pc, #224]	@ (80022c8 <_ZN6SX126x11ProcessIrqsEv+0x170>)
 80021e6:	6013      	str	r3, [r2, #0]
        FrequencyError = FrequencyError | ( ReadReg( REG_FREQUENCY_ERRORBASEADDR + 2 ) );
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3324      	adds	r3, #36	@ 0x24
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f240 716d 	movw	r1, #1901	@ 0x76d
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b32      	ldr	r3, [pc, #200]	@ (80022c8 <_ZN6SX126x11ProcessIrqsEv+0x170>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4313      	orrs	r3, r2
 8002202:	4a31      	ldr	r2, [pc, #196]	@ (80022c8 <_ZN6SX126x11ProcessIrqsEv+0x170>)
 8002204:	6013      	str	r3, [r2, #0]
    }

    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 8002206:	89fb      	ldrh	r3, [r7, #14]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d006      	beq.n	800221e <_ZN6SX126x11ProcessIrqsEv+0xc6>
    {
        if( txDone != NULL )
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <_ZN6SX126x11ProcessIrqsEv+0xc6>
        {
            txDone( );
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4798      	blx	r3
        }
    }

    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 800221e:	89fb      	ldrh	r3, [r7, #14]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d014      	beq.n	8002252 <_ZN6SX126x11ProcessIrqsEv+0xfa>
    {
        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 8002228:	89fb      	ldrh	r3, [r7, #14]
 800222a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d008      	beq.n	8002244 <_ZN6SX126x11ProcessIrqsEv+0xec>
        {
            if( rxError != NULL )
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <_ZN6SX126x11ProcessIrqsEv+0xfa>
            {
                rxError( IRQ_CRC_ERROR_CODE );
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	2004      	movs	r0, #4
 8002240:	4798      	blx	r3
 8002242:	e006      	b.n	8002252 <_ZN6SX126x11ProcessIrqsEv+0xfa>
            }
        }
        else
        {
            if( rxDone != NULL )
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <_ZN6SX126x11ProcessIrqsEv+0xfa>
            {
                rxDone( );
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4798      	blx	r3
            }
        }
    }

    if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 8002252:	89fb      	ldrh	r3, [r7, #14]
 8002254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00f      	beq.n	800227c <_ZN6SX126x11ProcessIrqsEv+0x124>
    {
        if( cadDone != NULL )
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00b      	beq.n	800227c <_ZN6SX126x11ProcessIrqsEv+0x124>
        {
            cadDone( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED );
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	89fa      	ldrh	r2, [r7, #14]
 800226a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800226e:	2a00      	cmp	r2, #0
 8002270:	bf14      	ite	ne
 8002272:	2201      	movne	r2, #1
 8002274:	2200      	moveq	r2, #0
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	4610      	mov	r0, r2
 800227a:	4798      	blx	r3
        }
    }

    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 800227c:	89fb      	ldrh	r3, [r7, #14]
 800227e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01a      	beq.n	80022bc <_ZN6SX126x11ProcessIrqsEv+0x164>
    {
        if( ( txTimeout != NULL ) && ( OperatingMode == MODE_TX ) )
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <_ZN6SX126x11ProcessIrqsEv+0x148>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002294:	2b04      	cmp	r3, #4
 8002296:	d103      	bne.n	80022a0 <_ZN6SX126x11ProcessIrqsEv+0x148>
        {
            txTimeout( );
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4798      	blx	r3
 800229e:	e00d      	b.n	80022bc <_ZN6SX126x11ProcessIrqsEv+0x164>
        }
        else if( ( rxTimeout != NULL ) && ( OperatingMode == MODE_RX ) )
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d009      	beq.n	80022bc <_ZN6SX126x11ProcessIrqsEv+0x164>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d104      	bne.n	80022bc <_ZN6SX126x11ProcessIrqsEv+0x164>
        {
            rxTimeout( );
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	4798      	blx	r3
 80022b8:	e000      	b.n	80022bc <_ZN6SX126x11ProcessIrqsEv+0x164>
            return;
 80022ba:	bf00      	nop
        {
            rxError( IRQ_HEADER_ERROR_CODE );
        }
    }  
*/
}
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	0800eba0 	.word	0x0800eba0
 80022c8:	20000238 	.word	0x20000238

080022cc <Lora_init>:
				SX_ANT_SW_GPIO_Port, SX_ANT_SW_Pin, &RadioEvents);

bool proceed = true;

void Lora_init()
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	Radio.Init();
 80022d0:	4805      	ldr	r0, [pc, #20]	@ (80022e8 <Lora_init+0x1c>)
 80022d2:	f7ff faa5 	bl	8001820 <_ZN6SX126x4InitEv>
	SetConfiguration(&radioConfiguration);
 80022d6:	4805      	ldr	r0, [pc, #20]	@ (80022ec <Lora_init+0x20>)
 80022d8:	f000 f8e0 	bl	800249c <SetConfiguration>
	ConfigureGeneralRadio(&Radio, &radioConfiguration);
 80022dc:	4903      	ldr	r1, [pc, #12]	@ (80022ec <Lora_init+0x20>)
 80022de:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <Lora_init+0x1c>)
 80022e0:	f000 f92a 	bl	8002538 <ConfigureGeneralRadio>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000284 	.word	0x20000284
 80022ec:	20000240 	.word	0x20000240

080022f0 <Lora_Operation_TX>:

void Lora_Operation_TX()
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
	Lora_init();
 80022f4:	f7ff ffea 	bl	80022cc <Lora_init>
	// initialize transmitter
	printf("-->TX mode\n");
 80022f8:	4804      	ldr	r0, [pc, #16]	@ (800230c <Lora_Operation_TX+0x1c>)
 80022fa:	f009 f803 	bl	800b304 <puts>
	State = SEND_PACKET;
 80022fe:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <Lora_Operation_TX+0x20>)
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
	while(true){
		RunTXStateMachine();
 8002304:	f000 f806 	bl	8002314 <RunTXStateMachine>
 8002308:	e7fc      	b.n	8002304 <Lora_Operation_TX+0x14>
 800230a:	bf00      	nop
 800230c:	0800ebac 	.word	0x0800ebac
 8002310:	2000023c 	.word	0x2000023c

08002314 <RunTXStateMachine>:
}

// let's keep the state machine because waiting for transmission to be done
// will take multiple instances of the state machine running. We could use a
// for loop, but the state machine seems g
void RunTXStateMachine(){
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
    switch(State){
 8002318:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <RunTXStateMachine+0x9c>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <RunTXStateMachine+0x14>
 8002322:	2b01      	cmp	r3, #1
 8002324:	d020      	beq.n	8002368 <RunTXStateMachine+0x54>
                State = SEND_PACKET;
            }
            break;
        }
    }
}
 8002326:	e040      	b.n	80023aa <RunTXStateMachine+0x96>
           if (proceed == true) {
 8002328:	4b22      	ldr	r3, [pc, #136]	@ (80023b4 <RunTXStateMachine+0xa0>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d139      	bne.n	80023a4 <RunTXStateMachine+0x90>
                proceed = false;
 8002330:	4b20      	ldr	r3, [pc, #128]	@ (80023b4 <RunTXStateMachine+0xa0>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
                PrepareBuffer(&Radio, messageToSend);
 8002336:	4b20      	ldr	r3, [pc, #128]	@ (80023b8 <RunTXStateMachine+0xa4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4619      	mov	r1, r3
 800233c:	481f      	ldr	r0, [pc, #124]	@ (80023bc <RunTXStateMachine+0xa8>)
 800233e:	f000 f85c 	bl	80023fa <PrepareBuffer>
                ConfigureRadioTx(&Radio, &radioConfiguration);
 8002342:	491f      	ldr	r1, [pc, #124]	@ (80023c0 <RunTXStateMachine+0xac>)
 8002344:	481d      	ldr	r0, [pc, #116]	@ (80023bc <RunTXStateMachine+0xa8>)
 8002346:	f000 f845 	bl	80023d4 <ConfigureRadioTx>
                Radio.SetTx(radioConfiguration.txTimeout);
 800234a:	4b1d      	ldr	r3, [pc, #116]	@ (80023c0 <RunTXStateMachine+0xac>)
 800234c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800234e:	4619      	mov	r1, r3
 8002350:	481a      	ldr	r0, [pc, #104]	@ (80023bc <RunTXStateMachine+0xa8>)
 8002352:	f7ff fb79 	bl	8001a48 <_ZN6SX126x5SetTxEm>
                HAL_GPIO_WritePin(SX_LED_TX_GPIO_Port, SX_LED_TX_Pin, GPIO_PIN_SET); // Turn LED On
 8002356:	2201      	movs	r2, #1
 8002358:	2102      	movs	r1, #2
 800235a:	481a      	ldr	r0, [pc, #104]	@ (80023c4 <RunTXStateMachine+0xb0>)
 800235c:	f001 fd8c 	bl	8003e78 <HAL_GPIO_WritePin>
                State = WAIT_SEND_DONE;
 8002360:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <RunTXStateMachine+0x9c>)
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
            break;
 8002366:	e01d      	b.n	80023a4 <RunTXStateMachine+0x90>
            if(radioFlags.txDone){
 8002368:	4b17      	ldr	r3, [pc, #92]	@ (80023c8 <RunTXStateMachine+0xb4>)
 800236a:	789b      	ldrb	r3, [r3, #2]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00b      	beq.n	8002388 <RunTXStateMachine+0x74>
                radioFlags.txDone = false;  // reset interrupted flag
 8002370:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <RunTXStateMachine+0xb4>)
 8002372:	2200      	movs	r2, #0
 8002374:	709a      	strb	r2, [r3, #2]
                printf("TX done\r\n");
 8002376:	4815      	ldr	r0, [pc, #84]	@ (80023cc <RunTXStateMachine+0xb8>)
 8002378:	f008 ffc4 	bl	800b304 <puts>
                State = SEND_PACKET;
 800237c:	4b0c      	ldr	r3, [pc, #48]	@ (80023b0 <RunTXStateMachine+0x9c>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
                HAL_Delay(200);
 8002382:	20c8      	movs	r0, #200	@ 0xc8
 8002384:	f001 f948 	bl	8003618 <HAL_Delay>
            if(radioFlags.txTimeout){
 8002388:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <RunTXStateMachine+0xb4>)
 800238a:	791b      	ldrb	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00b      	beq.n	80023a8 <RunTXStateMachine+0x94>
                radioFlags.txTimeout = false;  // reset interrupted flag
 8002390:	4b0d      	ldr	r3, [pc, #52]	@ (80023c8 <RunTXStateMachine+0xb4>)
 8002392:	2200      	movs	r2, #0
 8002394:	711a      	strb	r2, [r3, #4]
                printf("Tx Timeout\n\r" );
 8002396:	480e      	ldr	r0, [pc, #56]	@ (80023d0 <RunTXStateMachine+0xbc>)
 8002398:	f008 ff4c 	bl	800b234 <iprintf>
                State = SEND_PACKET;
 800239c:	4b04      	ldr	r3, [pc, #16]	@ (80023b0 <RunTXStateMachine+0x9c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
            break;
 80023a2:	e001      	b.n	80023a8 <RunTXStateMachine+0x94>
            break;
 80023a4:	bf00      	nop
 80023a6:	e000      	b.n	80023aa <RunTXStateMachine+0x96>
            break;
 80023a8:	bf00      	nop
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000023c 	.word	0x2000023c
 80023b4:	20000028 	.word	0x20000028
 80023b8:	20000024 	.word	0x20000024
 80023bc:	20000284 	.word	0x20000284
 80023c0:	20000240 	.word	0x20000240
 80023c4:	42020800 	.word	0x42020800
 80023c8:	2000027c 	.word	0x2000027c
 80023cc:	0800ebb8 	.word	0x0800ebb8
 80023d0:	0800ebc4 	.word	0x0800ebc4

080023d4 <ConfigureRadioTx>:

void ConfigureRadioTx(SX126xHal *radio, RadioConfigurations_t *config){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af02      	add	r7, sp, #8
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
    radio->SetDioIrqParams(config->irqTx, config->irqTx, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80023e8:	2300      	movs	r3, #0
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2300      	movs	r3, #0
 80023ee:	f7ff fb89 	bl	8001b04 <_ZN6SX126x15SetDioIrqParamsEtttt>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <PrepareBuffer>:

void PrepareBuffer(SX126xHal *radio, const Messages_t *messageToSend){
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
    radio->SetPayload((uint8_t*)messageToSend, MESSAGE_SIZE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2204      	movs	r2, #4
 8002408:	6839      	ldr	r1, [r7, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff faa2 	bl	8001954 <_ZN6SX126x10SetPayloadEPhh>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <OnTxDone>:

void OnTxDone( void )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
	proceed = true;
 800241c:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <OnTxDone+0x20>)
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
    radioFlags.txDone = true;
 8002422:	4b06      	ldr	r3, [pc, #24]	@ (800243c <OnTxDone+0x24>)
 8002424:	2201      	movs	r2, #1
 8002426:	709a      	strb	r2, [r3, #2]
    HAL_GPIO_WritePin(SX_LED_TX_GPIO_Port, SX_LED_TX_Pin, GPIO_PIN_RESET); // Turn LED On
 8002428:	2200      	movs	r2, #0
 800242a:	2102      	movs	r1, #2
 800242c:	4804      	ldr	r0, [pc, #16]	@ (8002440 <OnTxDone+0x28>)
 800242e:	f001 fd23 	bl	8003e78 <HAL_GPIO_WritePin>
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000028 	.word	0x20000028
 800243c:	2000027c 	.word	0x2000027c
 8002440:	42020800 	.word	0x42020800

08002444 <OnRxDone>:

void OnRxDone( void )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	proceed = true;
 8002448:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <OnRxDone+0x20>)
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
    radioFlags.rxDone= true;
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <OnRxDone+0x24>)
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SX_LED_RX_GPIO_Port, SX_LED_RX_Pin, GPIO_PIN_RESET); // Turn LED On
 8002454:	2200      	movs	r2, #0
 8002456:	2101      	movs	r1, #1
 8002458:	4804      	ldr	r0, [pc, #16]	@ (800246c <OnRxDone+0x28>)
 800245a:	f001 fd0d 	bl	8003e78 <HAL_GPIO_WritePin>
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000028 	.word	0x20000028
 8002468:	2000027c 	.word	0x2000027c
 800246c:	42020800 	.word	0x42020800

08002470 <OnTxTimeout>:

void OnTxTimeout( void )
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
    radioFlags.txTimeout = true;
 8002474:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <OnTxTimeout+0x20>)
 8002476:	2201      	movs	r2, #1
 8002478:	711a      	strb	r2, [r3, #4]
    proceed = true;
 800247a:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <OnTxTimeout+0x24>)
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SX_LED_TX_GPIO_Port, SX_LED_TX_Pin, GPIO_PIN_RESET); // Turn LED On
 8002480:	2200      	movs	r2, #0
 8002482:	2102      	movs	r1, #2
 8002484:	4804      	ldr	r0, [pc, #16]	@ (8002498 <OnTxTimeout+0x28>)
 8002486:	f001 fcf7 	bl	8003e78 <HAL_GPIO_WritePin>
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	2000027c 	.word	0x2000027c
 8002494:	20000028 	.word	0x20000028
 8002498:	42020800 	.word	0x42020800

0800249c <SetConfiguration>:

void SetConfiguration(RadioConfigurations_t *config){
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
    config->irqRx = IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f240 2202 	movw	r2, #514	@ 0x202
 80024aa:	865a      	strh	r2, [r3, #50]	@ 0x32
    config->irqTx = IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f240 2201 	movw	r2, #513	@ 0x201
 80024b2:	861a      	strh	r2, [r3, #48]	@ 0x30
    config->rfFrequency = RF_FREQUENCY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002534 <SetConfiguration+0x98>)
 80024b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    config->txTimeout = 50000;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80024c0:	635a      	str	r2, [r3, #52]	@ 0x34
    config->rxTimeout = (uint32_t)(RX_TIMEOUT_US / 15.625);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f44f 5248 	mov.w	r2, #12800	@ 0x3200
 80024c8:	639a      	str	r2, [r3, #56]	@ 0x38
    config->txPower = TX_OUTPUT_POWER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2216      	movs	r2, #22
 80024ce:	705a      	strb	r2, [r3, #1]
    config->txRampTime = RADIO_RAMP_10_US;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	709a      	strb	r2, [r3, #2]
    config->packetType = PACKET_TYPE_LORA;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
    config->modParams.PacketType = PACKET_TYPE_LORA;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	711a      	strb	r2, [r3, #4]
    config->modParams.Params.LoRa.Bandwidth = LORA_BANDWIDTH;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2206      	movs	r2, #6
 80024e6:	755a      	strb	r2, [r3, #21]
    config->modParams.Params.LoRa.CodingRate = LORA_CODINGRATE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	759a      	strb	r2, [r3, #22]
    config->modParams.Params.LoRa.LowDatarateOptimize = LORA_LOWDATARATEOPTIMIZE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	75da      	strb	r2, [r3, #23]
    config->modParams.Params.LoRa.SpreadingFactor = LORA_SPREADING_FACTOR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2207      	movs	r2, #7
 80024f8:	751a      	strb	r2, [r3, #20]
    config->packetParams.PacketType = PACKET_TYPE_LORA;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	761a      	strb	r2, [r3, #24]
    config->packetParams.Params.LoRa.CrcMode = LORA_CRC_MODE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    config->packetParams.Params.LoRa.HeaderType = LORA_HEADER_TYPE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    config->packetParams.Params.LoRa.InvertIQ = LORA_IQ;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    config->packetParams.Params.LoRa.PayloadLength = BUFFER_SIZE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2210      	movs	r2, #16
 800251c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    config->packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2210      	movs	r2, #16
 8002524:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	33bca100 	.word	0x33bca100

08002538 <ConfigureGeneralRadio>:

void ConfigureGeneralRadio(SX126xHal *radio, RadioConfigurations_t *config){
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
    radio->SetPacketType(config->packetType);
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	4610      	mov	r0, r2
 800254c:	f7ff fbac 	bl	8001ca8 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>
    radio->SetPacketParams(&config->packetParams);
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	3318      	adds	r3, #24
 8002556:	4619      	mov	r1, r3
 8002558:	4610      	mov	r0, r2
 800255a:	f7ff fcf3 	bl	8001f44 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t>
    radio->SetModulationParams(&config->modParams);
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	3304      	adds	r3, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f7ff fbf6 	bl	8001d58 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t>
    radio->SetRfFrequency(config->rfFrequency);
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f7ff fb5f 	bl	8001c38 <_ZN6SX126x14SetRfFrequencyEm>
    radio->SetTxParams(config->txPower, config->txRampTime);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	789b      	ldrb	r3, [r3, #2]
 8002586:	461a      	mov	r2, r3
 8002588:	f7ff fbb7 	bl	8001cfa <_ZN6SX126x11SetTxParamsEa16RadioRampTimes_t>
    radio->SetInterruptMode();
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fdbe 	bl	8002110 <_ZN6SX126x16SetInterruptModeEv>
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
  if(GPIO_Pin == SX_DIO1_Pin){
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025ac:	d102      	bne.n	80025b4 <HAL_GPIO_EXTI_Rising_Callback+0x18>
	  Radio.InvokeHandler();
 80025ae:	4803      	ldr	r0, [pc, #12]	@ (80025bc <HAL_GPIO_EXTI_Rising_Callback+0x20>)
 80025b0:	f7ff f8fe 	bl	80017b0 <_ZN9SX126xHal13InvokeHandlerEv>
  }
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000284 	.word	0x20000284

080025c0 <_Z41__static_initialization_and_destruction_0ii>:
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b092      	sub	sp, #72	@ 0x48
 80025c4:	af10      	add	r7, sp, #64	@ 0x40
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d12c      	bne.n	800262a <_Z41__static_initialization_and_destruction_0ii+0x6a>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d127      	bne.n	800262a <_Z41__static_initialization_and_destruction_0ii+0x6a>
				SX_ANT_SW_GPIO_Port, SX_ANT_SW_Pin, &RadioEvents);
 80025da:	4b1b      	ldr	r3, [pc, #108]	@ (8002648 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80025dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80025de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025e2:	930d      	str	r3, [sp, #52]	@ 0x34
 80025e4:	4b19      	ldr	r3, [pc, #100]	@ (800264c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80025e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80025e8:	2308      	movs	r3, #8
 80025ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80025ec:	2304      	movs	r3, #4
 80025ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80025f0:	2308      	movs	r3, #8
 80025f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80025f4:	4b16      	ldr	r3, [pc, #88]	@ (8002650 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80025f6:	9308      	str	r3, [sp, #32]
 80025f8:	2300      	movs	r3, #0
 80025fa:	9307      	str	r3, [sp, #28]
 80025fc:	2300      	movs	r3, #0
 80025fe:	9306      	str	r3, [sp, #24]
 8002600:	2300      	movs	r3, #0
 8002602:	9305      	str	r3, [sp, #20]
 8002604:	2300      	movs	r3, #0
 8002606:	9304      	str	r3, [sp, #16]
 8002608:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800260c:	9303      	str	r3, [sp, #12]
 800260e:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002620:	4a0a      	ldr	r2, [pc, #40]	@ (800264c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002622:	490d      	ldr	r1, [pc, #52]	@ (8002658 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002624:	480d      	ldr	r0, [pc, #52]	@ (800265c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002626:	f7fe fda1 	bl	800116c <_ZN9SX126xHalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tmmS3_tP16RadioCallbacks_t>
SX126xHal Radio(&hspi1, SX_SPI1_CS_GPIO_Port, SX_SPI1_CS_Pin,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d107      	bne.n	8002640 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002636:	4293      	cmp	r3, r2
 8002638:	d102      	bne.n	8002640 <_Z41__static_initialization_and_destruction_0ii+0x80>
 800263a:	4808      	ldr	r0, [pc, #32]	@ (800265c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800263c:	f7fe fde8 	bl	8001210 <_ZN9SX126xHalD1Ev>
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000000 	.word	0x20000000
 800264c:	42021400 	.word	0x42021400
 8002650:	42020000 	.word	0x42020000
 8002654:	42021000 	.word	0x42021000
 8002658:	20000318 	.word	0x20000318
 800265c:	20000284 	.word	0x20000284

08002660 <_GLOBAL__sub_I_State>:
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
 8002664:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002668:	2001      	movs	r0, #1
 800266a:	f7ff ffa9 	bl	80025c0 <_Z41__static_initialization_and_destruction_0ii>
 800266e:	bd80      	pop	{r7, pc}

08002670 <_GLOBAL__sub_D_State>:
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
 8002674:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002678:	2000      	movs	r0, #0
 800267a:	f7ff ffa1 	bl	80025c0 <_Z41__static_initialization_and_destruction_0ii>
 800267e:	bd80      	pop	{r7, pc}

08002680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002684:	f000 ff02 	bl	800348c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002688:	f000 f840 	bl	800270c <_Z18SystemClock_Configv>

  /* Configure the System Power */
  SystemPower_Config();
 800268c:	f000 f8a9 	bl	80027e2 <_ZL18SystemPower_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002690:	f000 f9ac 	bl	80029ec <_ZL12MX_GPIO_Initv>
  MX_ICACHE_Init();
 8002694:	f000 f8b8 	bl	8002808 <_ZL14MX_ICACHE_Initv>
  MX_SPI1_Init();
 8002698:	f000 f8d4 	bl	8002844 <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 800269c:	f000 f94a 	bl	8002934 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f000 fce9 	bl	8003078 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80026a6:	2001      	movs	r0, #1
 80026a8:	f000 fce6 	bl	8003078 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80026ac:	2002      	movs	r0, #2
 80026ae:	f000 fce3 	bl	8003078 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80026b2:	2101      	movs	r1, #1
 80026b4:	2000      	movs	r0, #0
 80026b6:	f000 fd6f 	bl	8003198 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80026ba:	4b12      	ldr	r3, [pc, #72]	@ (8002704 <main+0x84>)
 80026bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026c0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80026c2:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <main+0x84>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80026c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <main+0x84>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80026ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <main+0x84>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80026d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002704 <main+0x84>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80026da:	490a      	ldr	r1, [pc, #40]	@ (8002704 <main+0x84>)
 80026dc:	2000      	movs	r0, #0
 80026de:	f000 fdf5 	bl	80032cc <BSP_COM_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf14      	ite	ne
 80026e8:	2301      	movne	r3, #1
 80026ea:	2300      	moveq	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <main+0x76>
  {
    Error_Handler();
 80026f2:	f000 fab1 	bl	8002c58 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("INIT FINISH\n");
 80026f6:	4804      	ldr	r0, [pc, #16]	@ (8002708 <main+0x88>)
 80026f8:	f008 fe04 	bl	800b304 <puts>
  Lora_Operation_TX();
 80026fc:	f7ff fdf8 	bl	80022f0 <Lora_Operation_TX>
  while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <main+0x80>
 8002704:	20000308 	.word	0x20000308
 8002708:	0800ebd4 	.word	0x0800ebd4

0800270c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b09e      	sub	sp, #120	@ 0x78
 8002710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002712:	f107 0318 	add.w	r3, r7, #24
 8002716:	2260      	movs	r2, #96	@ 0x60
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f008 fef2 	bl	800b504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002720:	463b      	mov	r3, r7
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
 800272c:	611a      	str	r2, [r3, #16]
 800272e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002730:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8002734:	f001 fc1a 	bl	8003f6c <HAL_PWREx_ControlVoltageScaling>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	bf14      	ite	ne
 800273e:	2301      	movne	r3, #1
 8002740:	2300      	moveq	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <_Z18SystemClock_Configv+0x40>
  {
    Error_Handler();
 8002748:	f000 fa86 	bl	8002c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800274c:	2310      	movs	r3, #16
 800274e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002750:	2301      	movs	r3, #1
 8002752:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002754:	2310      	movs	r3, #16
 8002756:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8002758:	2300      	movs	r3, #0
 800275a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800275c:	2302      	movs	r3, #2
 800275e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002760:	2301      	movs	r3, #1
 8002762:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8002764:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002768:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 800276a:	2303      	movs	r3, #3
 800276c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800276e:	230a      	movs	r3, #10
 8002770:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8002772:	2308      	movs	r3, #8
 8002774:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002776:	2302      	movs	r3, #2
 8002778:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800277a:	2301      	movs	r3, #1
 800277c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800277e:	230c      	movs	r3, #12
 8002780:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002786:	f107 0318 	add.w	r3, r7, #24
 800278a:	4618      	mov	r0, r3
 800278c:	f001 fcea 	bl	8004164 <HAL_RCC_OscConfig>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	bf14      	ite	ne
 8002796:	2301      	movne	r3, #1
 8002798:	2300      	moveq	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 80027a0:	f000 fa5a 	bl	8002c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027a4:	231f      	movs	r3, #31
 80027a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027a8:	2303      	movs	r3, #3
 80027aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80027ac:	230a      	movs	r3, #10
 80027ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027b4:	2300      	movs	r3, #0
 80027b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027bc:	463b      	mov	r3, r7
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f002 fbab 	bl	8004f1c <HAL_RCC_ClockConfig>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf14      	ite	ne
 80027cc:	2301      	movne	r3, #1
 80027ce:	2300      	moveq	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 80027d6:	f000 fa3f 	bl	8002c58 <Error_Handler>
  }
}
 80027da:	bf00      	nop
 80027dc:	3778      	adds	r7, #120	@ 0x78
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <_ZL18SystemPower_Configv>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80027e6:	f001 fcad 	bl	8004144 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80027ea:	2002      	movs	r0, #2
 80027ec:	f001 fc4a 	bl	8004084 <HAL_PWREx_ConfigSupply>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bf14      	ite	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	2300      	moveq	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <_ZL18SystemPower_Configv+0x22>
  {
    Error_Handler();
 8002800:	f000 fa2a 	bl	8002c58 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}

08002808 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800280c:	2000      	movs	r0, #0
 800280e:	f001 fb7d 	bl	8003f0c <HAL_ICACHE_ConfigAssociativityMode>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf14      	ite	ne
 8002818:	2301      	movne	r3, #1
 800281a:	2300      	moveq	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 8002822:	f000 fa19 	bl	8002c58 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8002826:	f001 fb91 	bl	8003f4c <HAL_ICACHE_Enable>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf14      	ite	ne
 8002830:	2301      	movne	r3, #1
 8002832:	2300      	moveq	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 800283a:	f000 fa0d 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002854:	4b35      	ldr	r3, [pc, #212]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 8002856:	4a36      	ldr	r2, [pc, #216]	@ (8002930 <_ZL12MX_SPI1_Initv+0xec>)
 8002858:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800285a:	4b34      	ldr	r3, [pc, #208]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 800285c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002860:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002862:	4b32      	ldr	r3, [pc, #200]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002868:	4b30      	ldr	r3, [pc, #192]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 800286a:	2207      	movs	r2, #7
 800286c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800286e:	4b2f      	ldr	r3, [pc, #188]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002874:	4b2d      	ldr	r3, [pc, #180]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 8002876:	2200      	movs	r2, #0
 8002878:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800287a:	4b2c      	ldr	r3, [pc, #176]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 800287c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002880:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002882:	4b2a      	ldr	r3, [pc, #168]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 8002884:	2200      	movs	r2, #0
 8002886:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002888:	4b28      	ldr	r3, [pc, #160]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 800288a:	2200      	movs	r2, #0
 800288c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800288e:	4b27      	ldr	r3, [pc, #156]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 8002890:	2200      	movs	r2, #0
 8002892:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002894:	4b25      	ldr	r3, [pc, #148]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 8002896:	2200      	movs	r2, #0
 8002898:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800289a:	4b24      	ldr	r3, [pc, #144]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 800289c:	2207      	movs	r2, #7
 800289e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028a0:	4b22      	ldr	r3, [pc, #136]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 80028a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80028a8:	4b20      	ldr	r3, [pc, #128]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80028ae:	4b1f      	ldr	r3, [pc, #124]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80028b4:	4b1d      	ldr	r3, [pc, #116]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80028ba:	4b1c      	ldr	r3, [pc, #112]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 80028bc:	2200      	movs	r2, #0
 80028be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80028c0:	4b1a      	ldr	r3, [pc, #104]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80028c6:	4b19      	ldr	r3, [pc, #100]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80028cc:	4b17      	ldr	r3, [pc, #92]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80028d2:	4b16      	ldr	r3, [pc, #88]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80028d8:	4b14      	ldr	r3, [pc, #80]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 80028da:	2200      	movs	r2, #0
 80028dc:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028de:	4813      	ldr	r0, [pc, #76]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 80028e0:	f005 fe52 	bl	8008588 <HAL_SPI_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bf14      	ite	ne
 80028ea:	2301      	movne	r3, #1
 80028ec:	2300      	moveq	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <_ZL12MX_SPI1_Initv+0xb4>
  {
    Error_Handler();
 80028f4:	f000 f9b0 	bl	8002c58 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80028fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002900:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	4619      	mov	r1, r3
 800290a:	4808      	ldr	r0, [pc, #32]	@ (800292c <_ZL12MX_SPI1_Initv+0xe8>)
 800290c:	f006 fbed 	bl	80090ea <HAL_SPIEx_SetConfigAutonomousMode>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf14      	ite	ne
 8002916:	2301      	movne	r3, #1
 8002918:	2300      	moveq	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <_ZL12MX_SPI1_Initv+0xe0>
  {
    Error_Handler();
 8002920:	f000 f99a 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002924:	bf00      	nop
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000318 	.word	0x20000318
 8002930:	40013000 	.word	0x40013000

08002934 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800293a:	f107 0310 	add.w	r3, r7, #16
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002952:	4b25      	ldr	r3, [pc, #148]	@ (80029e8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002954:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002958:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800295a:	4b23      	ldr	r3, [pc, #140]	@ (80029e8 <_ZL12MX_TIM2_Initv+0xb4>)
 800295c:	2200      	movs	r2, #0
 800295e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002960:	4b21      	ldr	r3, [pc, #132]	@ (80029e8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002966:	4b20      	ldr	r3, [pc, #128]	@ (80029e8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002968:	f04f 32ff 	mov.w	r2, #4294967295
 800296c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800296e:	4b1e      	ldr	r3, [pc, #120]	@ (80029e8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002974:	4b1c      	ldr	r3, [pc, #112]	@ (80029e8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002976:	2200      	movs	r2, #0
 8002978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800297a:	481b      	ldr	r0, [pc, #108]	@ (80029e8 <_ZL12MX_TIM2_Initv+0xb4>)
 800297c:	f006 fbf6 	bl	800916c <HAL_TIM_Base_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf14      	ite	ne
 8002986:	2301      	movne	r3, #1
 8002988:	2300      	moveq	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8002990:	f000 f962 	bl	8002c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002998:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	4619      	mov	r1, r3
 80029a0:	4811      	ldr	r0, [pc, #68]	@ (80029e8 <_ZL12MX_TIM2_Initv+0xb4>)
 80029a2:	f006 fc3b 	bl	800921c <HAL_TIM_ConfigClockSource>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 80029b6:	f000 f94f 	bl	8002c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029c2:	1d3b      	adds	r3, r7, #4
 80029c4:	4619      	mov	r1, r3
 80029c6:	4808      	ldr	r0, [pc, #32]	@ (80029e8 <_ZL12MX_TIM2_Initv+0xb4>)
 80029c8:	f006 fecc 	bl	8009764 <HAL_TIMEx_MasterConfigSynchronization>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	bf14      	ite	ne
 80029d2:	2301      	movne	r3, #1
 80029d4:	2300      	moveq	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 80029dc:	f000 f93c 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029e0:	bf00      	nop
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	200003a8 	.word	0x200003a8

080029ec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	@ 0x30
 80029f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f2:	f107 031c 	add.w	r3, r7, #28
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	60da      	str	r2, [r3, #12]
 8002a00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a02:	4b8e      	ldr	r3, [pc, #568]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a08:	4a8c      	ldr	r2, [pc, #560]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a12:	4b8a      	ldr	r3, [pc, #552]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a20:	4b86      	ldr	r3, [pc, #536]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a26:	4a85      	ldr	r2, [pc, #532]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a30:	4b82      	ldr	r3, [pc, #520]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a44:	4a7d      	ldr	r2, [pc, #500]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a4e:	4b7b      	ldr	r3, [pc, #492]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5c:	4b77      	ldr	r3, [pc, #476]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a62:	4a76      	ldr	r2, [pc, #472]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a6c:	4b73      	ldr	r3, [pc, #460]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a7a:	4b70      	ldr	r3, [pc, #448]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a80:	4a6e      	ldr	r2, [pc, #440]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a82:	f043 0320 	orr.w	r3, r3, #32
 8002a86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a98:	4b68      	ldr	r3, [pc, #416]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a9e:	4a67      	ldr	r2, [pc, #412]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002aa0:	f043 0310 	orr.w	r3, r3, #16
 8002aa4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002aa8:	4b64      	ldr	r3, [pc, #400]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x250>)
 8002aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SX_LED_RX_Pin|SX_LED_TX_Pin|SX_Mode_SX126X_Pin, GPIO_PIN_RESET);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	210b      	movs	r1, #11
 8002aba:	4861      	ldr	r0, [pc, #388]	@ (8002c40 <_ZL12MX_GPIO_Initv+0x254>)
 8002abc:	f001 f9dc 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_RESET_GPIO_Port, SX_RESET_Pin, GPIO_PIN_RESET);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2108      	movs	r1, #8
 8002ac4:	485f      	ldr	r0, [pc, #380]	@ (8002c44 <_ZL12MX_GPIO_Initv+0x258>)
 8002ac6:	f001 f9d7 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SX_ANT_SW_Pin|SX_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002aca:	2200      	movs	r2, #0
 8002acc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002ad0:	485d      	ldr	r0, [pc, #372]	@ (8002c48 <_ZL12MX_GPIO_Initv+0x25c>)
 8002ad2:	f001 f9d1 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2120      	movs	r1, #32
 8002ada:	485c      	ldr	r0, [pc, #368]	@ (8002c4c <_ZL12MX_GPIO_Initv+0x260>)
 8002adc:	f001 f9cc 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SX_LED_RX_Pin SX_LED_TX_Pin SX_Mode_SX126X_Pin */
  GPIO_InitStruct.Pin = SX_LED_RX_Pin|SX_LED_TX_Pin|SX_Mode_SX126X_Pin;
 8002ae0:	230b      	movs	r3, #11
 8002ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aec:	2300      	movs	r3, #0
 8002aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af0:	f107 031c 	add.w	r3, r7, #28
 8002af4:	4619      	mov	r1, r3
 8002af6:	4852      	ldr	r0, [pc, #328]	@ (8002c40 <_ZL12MX_GPIO_Initv+0x254>)
 8002af8:	f000 ffce 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8002afc:	2304      	movs	r3, #4
 8002afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b00:	2303      	movs	r3, #3
 8002b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002b08:	f107 031c 	add.w	r3, r7, #28
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	484c      	ldr	r0, [pc, #304]	@ (8002c40 <_ZL12MX_GPIO_Initv+0x254>)
 8002b10:	f000 ffc2 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_Mode_FRx_Pin */
  GPIO_InitStruct.Pin = SX_Mode_FRx_Pin;
 8002b14:	2304      	movs	r3, #4
 8002b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SX_Mode_FRx_GPIO_Port, &GPIO_InitStruct);
 8002b20:	f107 031c 	add.w	r3, r7, #28
 8002b24:	4619      	mov	r1, r3
 8002b26:	4847      	ldr	r0, [pc, #284]	@ (8002c44 <_ZL12MX_GPIO_Initv+0x258>)
 8002b28:	f000 ffb6 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_RESET_Pin */
  GPIO_InitStruct.Pin = SX_RESET_Pin;
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b30:	2301      	movs	r3, #1
 8002b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SX_RESET_GPIO_Port, &GPIO_InitStruct);
 8002b3c:	f107 031c 	add.w	r3, r7, #28
 8002b40:	4619      	mov	r1, r3
 8002b42:	4840      	ldr	r0, [pc, #256]	@ (8002c44 <_ZL12MX_GPIO_Initv+0x258>)
 8002b44:	f000 ffa8 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX_OPT_Pin UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = SX_OPT_Pin|UCPD_FLT_Pin;
 8002b48:	f244 0301 	movw	r3, #16385	@ 0x4001
 8002b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b56:	f107 031c 	add.w	r3, r7, #28
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	483b      	ldr	r0, [pc, #236]	@ (8002c4c <_ZL12MX_GPIO_Initv+0x260>)
 8002b5e:	f000 ff9b 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX_ANT_SW_Pin SX_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SX_ANT_SW_Pin|SX_SPI1_CS_Pin;
 8002b62:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b74:	f107 031c 	add.w	r3, r7, #28
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4833      	ldr	r0, [pc, #204]	@ (8002c48 <_ZL12MX_GPIO_Initv+0x25c>)
 8002b7c:	f000 ff8c 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_DIO1_Pin */
  GPIO_InitStruct.Pin = SX_DIO1_Pin;
 8002b80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b86:	4b32      	ldr	r3, [pc, #200]	@ (8002c50 <_ZL12MX_GPIO_Initv+0x264>)
 8002b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SX_DIO1_GPIO_Port, &GPIO_InitStruct);
 8002b8e:	f107 031c 	add.w	r3, r7, #28
 8002b92:	4619      	mov	r1, r3
 8002b94:	482f      	ldr	r0, [pc, #188]	@ (8002c54 <_ZL12MX_GPIO_Initv+0x268>)
 8002b96:	f000 ff7f 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BUSY_Pin */
  GPIO_InitStruct.Pin = SX_BUSY_Pin;
 8002b9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SX_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002ba8:	f107 031c 	add.w	r3, r7, #28
 8002bac:	4619      	mov	r1, r3
 8002bae:	4829      	ldr	r0, [pc, #164]	@ (8002c54 <_ZL12MX_GPIO_Initv+0x268>)
 8002bb0:	f000 ff72 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc2:	f107 031c 	add.w	r3, r7, #28
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4820      	ldr	r0, [pc, #128]	@ (8002c4c <_ZL12MX_GPIO_Initv+0x260>)
 8002bca:	f000 ff65 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002bce:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be0:	f107 031c 	add.w	r3, r7, #28
 8002be4:	4619      	mov	r1, r3
 8002be6:	4817      	ldr	r0, [pc, #92]	@ (8002c44 <_ZL12MX_GPIO_Initv+0x258>)
 8002be8:	f000 ff56 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfa:	f107 031c 	add.w	r3, r7, #28
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4810      	ldr	r0, [pc, #64]	@ (8002c44 <_ZL12MX_GPIO_Initv+0x258>)
 8002c02:	f000 ff49 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8002c06:	2320      	movs	r3, #32
 8002c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c12:	2300      	movs	r3, #0
 8002c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8002c16:	f107 031c 	add.w	r3, r7, #28
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	480b      	ldr	r0, [pc, #44]	@ (8002c4c <_ZL12MX_GPIO_Initv+0x260>)
 8002c1e:	f000 ff3b 	bl	8003a98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2100      	movs	r1, #0
 8002c26:	2016      	movs	r0, #22
 8002c28:	f000 fdd2 	bl	80037d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8002c2c:	2016      	movs	r0, #22
 8002c2e:	f000 fde9 	bl	8003804 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c32:	bf00      	nop
 8002c34:	3730      	adds	r7, #48	@ 0x30
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	46020c00 	.word	0x46020c00
 8002c40:	42020800 	.word	0x42020800
 8002c44:	42020000 	.word	0x42020000
 8002c48:	42021400 	.word	0x42021400
 8002c4c:	42020400 	.word	0x42020400
 8002c50:	10110000 	.word	0x10110000
 8002c54:	42021000 	.word	0x42021000

08002c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c5c:	b672      	cpsid	i
}
 8002c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c60:	bf00      	nop
 8002c62:	e7fd      	b.n	8002c60 <Error_Handler+0x8>

08002c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c94 <HAL_MspInit+0x30>)
 8002c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c70:	4a08      	ldr	r2, [pc, #32]	@ (8002c94 <HAL_MspInit+0x30>)
 8002c72:	f043 0304 	orr.w	r3, r3, #4
 8002c76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002c7a:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <HAL_MspInit+0x30>)
 8002c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	46020c00 	.word	0x46020c00

08002c98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b0c0      	sub	sp, #256	@ 0x100
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cb0:	f107 0310 	add.w	r3, r7, #16
 8002cb4:	22d8      	movs	r2, #216	@ 0xd8
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f008 fc23 	bl	800b504 <memset>
  if(hspi->Instance==SPI1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a27      	ldr	r2, [pc, #156]	@ (8002d60 <HAL_SPI_MspInit+0xc8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d145      	bne.n	8002d54 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002cc8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cda:	f107 0310 	add.w	r3, r7, #16
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f002 fcf0 	bl	80056c4 <HAL_RCCEx_PeriphCLKConfig>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002cea:	f7ff ffb5 	bl	8002c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cee:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <HAL_SPI_MspInit+0xcc>)
 8002cf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d64 <HAL_SPI_MspInit+0xcc>)
 8002cf6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cfa:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002cfe:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_SPI_MspInit+0xcc>)
 8002d00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0c:	4b15      	ldr	r3, [pc, #84]	@ (8002d64 <HAL_SPI_MspInit+0xcc>)
 8002d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d12:	4a14      	ldr	r2, [pc, #80]	@ (8002d64 <HAL_SPI_MspInit+0xcc>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d1c:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <HAL_SPI_MspInit+0xcc>)
 8002d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SX_SPI1_SCK_Pin|SX_SPI1_MISO_Pin|SX_SPI1_MOSI_Pin;
 8002d2a:	23e0      	movs	r3, #224	@ 0xe0
 8002d2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d42:	2305      	movs	r3, #5
 8002d44:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4806      	ldr	r0, [pc, #24]	@ (8002d68 <HAL_SPI_MspInit+0xd0>)
 8002d50:	f000 fea2 	bl	8003a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d54:	bf00      	nop
 8002d56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40013000 	.word	0x40013000
 8002d64:	46020c00 	.word	0x46020c00
 8002d68:	42020000 	.word	0x42020000

08002d6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d7c:	d10e      	bne.n	8002d9c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <HAL_TIM_Base_MspInit+0x3c>)
 8002d80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d84:	4a08      	ldr	r2, [pc, #32]	@ (8002da8 <HAL_TIM_Base_MspInit+0x3c>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002d8e:	4b06      	ldr	r3, [pc, #24]	@ (8002da8 <HAL_TIM_Base_MspInit+0x3c>)
 8002d90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	46020c00 	.word	0x46020c00

08002dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002db0:	bf00      	nop
 8002db2:	e7fd      	b.n	8002db0 <NMI_Handler+0x4>

08002db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db8:	bf00      	nop
 8002dba:	e7fd      	b.n	8002db8 <HardFault_Handler+0x4>

08002dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <MemManage_Handler+0x4>

08002dc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <BusFault_Handler+0x4>

08002dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd0:	bf00      	nop
 8002dd2:	e7fd      	b.n	8002dd0 <UsageFault_Handler+0x4>

08002dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e02:	f000 fbe9 	bl	80035d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SX_DIO1_Pin);
 8002e0e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002e12:	f001 f849 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f000 fa32 	bl	8003288 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return 1;
 8002e2c:	2301      	movs	r3, #1
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <_kill>:

int _kill(int pid, int sig)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e42:	f008 fbc1 	bl	800b5c8 <__errno>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2216      	movs	r2, #22
 8002e4a:	601a      	str	r2, [r3, #0]
  return -1;
 8002e4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <_exit>:

void _exit (int status)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e60:	f04f 31ff 	mov.w	r1, #4294967295
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ffe7 	bl	8002e38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e6a:	bf00      	nop
 8002e6c:	e7fd      	b.n	8002e6a <_exit+0x12>

08002e6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b086      	sub	sp, #24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	e00a      	b.n	8002e96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e80:	f3af 8000 	nop.w
 8002e84:	4601      	mov	r1, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	60ba      	str	r2, [r7, #8]
 8002e8c:	b2ca      	uxtb	r2, r1
 8002e8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	3301      	adds	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	dbf0      	blt.n	8002e80 <_read+0x12>
  }

  return len;
 8002e9e:	687b      	ldr	r3, [r7, #4]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	e009      	b.n	8002ece <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	60ba      	str	r2, [r7, #8]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 fa66 	bl	8003394 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	dbf1      	blt.n	8002eba <_write+0x12>
  }
  return len;
 8002ed6:	687b      	ldr	r3, [r7, #4]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <_close>:

int _close(int file)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f08:	605a      	str	r2, [r3, #4]
  return 0;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <_isatty>:

int _isatty(int file)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f20:	2301      	movs	r3, #1
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f50:	4a14      	ldr	r2, [pc, #80]	@ (8002fa4 <_sbrk+0x5c>)
 8002f52:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <_sbrk+0x60>)
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f5c:	4b13      	ldr	r3, [pc, #76]	@ (8002fac <_sbrk+0x64>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d102      	bne.n	8002f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f64:	4b11      	ldr	r3, [pc, #68]	@ (8002fac <_sbrk+0x64>)
 8002f66:	4a12      	ldr	r2, [pc, #72]	@ (8002fb0 <_sbrk+0x68>)
 8002f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f6a:	4b10      	ldr	r3, [pc, #64]	@ (8002fac <_sbrk+0x64>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d207      	bcs.n	8002f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f78:	f008 fb26 	bl	800b5c8 <__errno>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	220c      	movs	r2, #12
 8002f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f82:	f04f 33ff 	mov.w	r3, #4294967295
 8002f86:	e009      	b.n	8002f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f88:	4b08      	ldr	r3, [pc, #32]	@ (8002fac <_sbrk+0x64>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f8e:	4b07      	ldr	r3, [pc, #28]	@ (8002fac <_sbrk+0x64>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	4a05      	ldr	r2, [pc, #20]	@ (8002fac <_sbrk+0x64>)
 8002f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20270000 	.word	0x20270000
 8002fa8:	00000400 	.word	0x00000400
 8002fac:	200003f4 	.word	0x200003f4
 8002fb0:	200005f0 	.word	0x200005f0

08002fb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002fb8:	4b18      	ldr	r3, [pc, #96]	@ (800301c <SystemInit+0x68>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbe:	4a17      	ldr	r2, [pc, #92]	@ (800301c <SystemInit+0x68>)
 8002fc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002fc8:	4b15      	ldr	r3, [pc, #84]	@ (8003020 <SystemInit+0x6c>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002fce:	4b14      	ldr	r3, [pc, #80]	@ (8003020 <SystemInit+0x6c>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002fd4:	4b12      	ldr	r3, [pc, #72]	@ (8003020 <SystemInit+0x6c>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002fda:	4b11      	ldr	r3, [pc, #68]	@ (8003020 <SystemInit+0x6c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8003020 <SystemInit+0x6c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8003020 <SystemInit+0x6c>)
 8002fe6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002fea:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002fee:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8003020 <SystemInit+0x6c>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <SystemInit+0x6c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a09      	ldr	r2, [pc, #36]	@ (8003020 <SystemInit+0x6c>)
 8002ffc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003000:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003002:	4b07      	ldr	r3, [pc, #28]	@ (8003020 <SystemInit+0x6c>)
 8003004:	2200      	movs	r2, #0
 8003006:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003008:	4b04      	ldr	r3, [pc, #16]	@ (800301c <SystemInit+0x68>)
 800300a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800300e:	609a      	str	r2, [r3, #8]
  #endif
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00
 8003020:	46020c00 	.word	0x46020c00

08003024 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003024:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800305c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003028:	f7ff ffc4 	bl	8002fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800302c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800302e:	e003      	b.n	8003038 <LoopCopyDataInit>

08003030 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003030:	4b0b      	ldr	r3, [pc, #44]	@ (8003060 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003032:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003034:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003036:	3104      	adds	r1, #4

08003038 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003038:	480a      	ldr	r0, [pc, #40]	@ (8003064 <LoopForever+0xa>)
	ldr	r3, =_edata
 800303a:	4b0b      	ldr	r3, [pc, #44]	@ (8003068 <LoopForever+0xe>)
	adds	r2, r0, r1
 800303c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800303e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003040:	d3f6      	bcc.n	8003030 <CopyDataInit>
	ldr	r2, =_sbss
 8003042:	4a0a      	ldr	r2, [pc, #40]	@ (800306c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003044:	e002      	b.n	800304c <LoopFillZerobss>

08003046 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003046:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003048:	f842 3b04 	str.w	r3, [r2], #4

0800304c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800304c:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <LoopForever+0x16>)
	cmp	r2, r3
 800304e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003050:	d3f9      	bcc.n	8003046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003052:	f008 fabf 	bl	800b5d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003056:	f7ff fb13 	bl	8002680 <main>

0800305a <LoopForever>:

LoopForever:
    b LoopForever
 800305a:	e7fe      	b.n	800305a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800305c:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8003060:	0800f218 	.word	0x0800f218
	ldr	r0, =_sdata
 8003064:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003068:	2000021c 	.word	0x2000021c
	ldr	r2, =_sbss
 800306c:	2000021c 	.word	0x2000021c
	ldr	r3, = _ebss
 8003070:	200005ea 	.word	0x200005ea

08003074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003074:	e7fe      	b.n	8003074 <ADC1_2_IRQHandler>
	...

08003078 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08e      	sub	sp, #56	@ 0x38
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003082:	2300      	movs	r3, #0
 8003084:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d009      	beq.n	80030a4 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d006      	beq.n	80030a4 <BSP_LED_Init+0x2c>
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d003      	beq.n	80030a4 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800309c:	f06f 0301 	mvn.w	r3, #1
 80030a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80030a2:	e06e      	b.n	8003182 <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d10f      	bne.n	80030ca <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 80030aa:	4b38      	ldr	r3, [pc, #224]	@ (800318c <BSP_LED_Init+0x114>)
 80030ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030b0:	4a36      	ldr	r2, [pc, #216]	@ (800318c <BSP_LED_Init+0x114>)
 80030b2:	f043 0302 	orr.w	r3, r3, #2
 80030b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80030ba:	4b34      	ldr	r3, [pc, #208]	@ (800318c <BSP_LED_Init+0x114>)
 80030bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	e046      	b.n	8003158 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10f      	bne.n	80030f0 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 80030d0:	4b2e      	ldr	r3, [pc, #184]	@ (800318c <BSP_LED_Init+0x114>)
 80030d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030d6:	4a2d      	ldr	r2, [pc, #180]	@ (800318c <BSP_LED_Init+0x114>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80030e0:	4b2a      	ldr	r3, [pc, #168]	@ (800318c <BSP_LED_Init+0x114>)
 80030e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	e033      	b.n	8003158 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f0:	4b26      	ldr	r3, [pc, #152]	@ (800318c <BSP_LED_Init+0x114>)
 80030f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d110      	bne.n	8003120 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	4b23      	ldr	r3, [pc, #140]	@ (800318c <BSP_LED_Init+0x114>)
 8003100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003104:	4a21      	ldr	r2, [pc, #132]	@ (800318c <BSP_LED_Init+0x114>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800310e:	4b1f      	ldr	r3, [pc, #124]	@ (800318c <BSP_LED_Init+0x114>)
 8003110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 800311c:	2301      	movs	r3, #1
 800311e:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8003120:	f001 f800 	bl	8004124 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8003124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003126:	2b01      	cmp	r3, #1
 8003128:	d107      	bne.n	800313a <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800312a:	4b18      	ldr	r3, [pc, #96]	@ (800318c <BSP_LED_Init+0x114>)
 800312c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003130:	4a16      	ldr	r2, [pc, #88]	@ (800318c <BSP_LED_Init+0x114>)
 8003132:	f023 0304 	bic.w	r3, r3, #4
 8003136:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 800313a:	4b14      	ldr	r3, [pc, #80]	@ (800318c <BSP_LED_Init+0x114>)
 800313c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003140:	4a12      	ldr	r2, [pc, #72]	@ (800318c <BSP_LED_Init+0x114>)
 8003142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003146:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800314a:	4b10      	ldr	r3, [pc, #64]	@ (800318c <BSP_LED_Init+0x114>)
 800314c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	4a0d      	ldr	r2, [pc, #52]	@ (8003190 <BSP_LED_Init+0x118>)
 800315c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003160:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003162:	2301      	movs	r3, #1
 8003164:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800316a:	2303      	movs	r3, #3
 800316c:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	4a08      	ldr	r2, [pc, #32]	@ (8003194 <BSP_LED_Init+0x11c>)
 8003172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003176:	f107 021c 	add.w	r2, r7, #28
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fc8b 	bl	8003a98 <HAL_GPIO_Init>
  }

  return ret;
 8003182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003184:	4618      	mov	r0, r3
 8003186:	3738      	adds	r7, #56	@ 0x38
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	46020c00 	.word	0x46020c00
 8003190:	0800ed30 	.word	0x0800ed30
 8003194:	20000034 	.word	0x20000034

08003198 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	460a      	mov	r2, r1
 80031a2:	71fb      	strb	r3, [r7, #7]
 80031a4:	4613      	mov	r3, r2
 80031a6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80031a8:	4b30      	ldr	r3, [pc, #192]	@ (800326c <BSP_PB_Init+0xd4>)
 80031aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031ae:	4a2f      	ldr	r2, [pc, #188]	@ (800326c <BSP_PB_Init+0xd4>)
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80031b8:	4b2c      	ldr	r3, [pc, #176]	@ (800326c <BSP_PB_Init+0xd4>)
 80031ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80031c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031ca:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80031cc:	2302      	movs	r3, #2
 80031ce:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80031d0:	2302      	movs	r3, #2
 80031d2:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80031d4:	79bb      	ldrb	r3, [r7, #6]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10c      	bne.n	80031f4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	4a23      	ldr	r2, [pc, #140]	@ (8003270 <BSP_PB_Init+0xd8>)
 80031e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e6:	f107 020c 	add.w	r2, r7, #12
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fc53 	bl	8003a98 <HAL_GPIO_Init>
 80031f2:	e036      	b.n	8003262 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80031f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003274 <BSP_PB_Init+0xdc>)
 80031f6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003270 <BSP_PB_Init+0xd8>)
 80031fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003200:	f107 020c 	add.w	r2, r7, #12
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fc46 	bl	8003a98 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800320c:	79fa      	ldrb	r2, [r7, #7]
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4a18      	ldr	r2, [pc, #96]	@ (8003278 <BSP_PB_Init+0xe0>)
 8003218:	441a      	add	r2, r3
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	4917      	ldr	r1, [pc, #92]	@ (800327c <BSP_PB_Init+0xe4>)
 800321e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f000 fbdb 	bl	80039e0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800322a:	79fa      	ldrb	r2, [r7, #7]
 800322c:	4613      	mov	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4a10      	ldr	r2, [pc, #64]	@ (8003278 <BSP_PB_Init+0xe0>)
 8003236:	1898      	adds	r0, r3, r2
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	4a11      	ldr	r2, [pc, #68]	@ (8003280 <BSP_PB_Init+0xe8>)
 800323c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003240:	461a      	mov	r2, r3
 8003242:	2100      	movs	r1, #0
 8003244:	f000 fba0 	bl	8003988 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003248:	2018      	movs	r0, #24
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	4a0d      	ldr	r2, [pc, #52]	@ (8003284 <BSP_PB_Init+0xec>)
 800324e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003252:	2200      	movs	r2, #0
 8003254:	4619      	mov	r1, r3
 8003256:	f000 fabb 	bl	80037d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800325a:	2318      	movs	r3, #24
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fad1 	bl	8003804 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3720      	adds	r7, #32
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	46020c00 	.word	0x46020c00
 8003270:	20000040 	.word	0x20000040
 8003274:	10110000 	.word	0x10110000
 8003278:	200003f8 	.word	0x200003f8
 800327c:	0800ed38 	.word	0x0800ed38
 8003280:	20000044 	.word	0x20000044
 8003284:	20000048 	.word	0x20000048

08003288 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8003292:	79fa      	ldrb	r2, [r7, #7]
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4a04      	ldr	r2, [pc, #16]	@ (80032b0 <BSP_PB_IRQHandler+0x28>)
 800329e:	4413      	add	r3, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fbb1 	bl	8003a08 <HAL_EXTI_IRQHandler>
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200003f8 	.word	0x200003f8

080032b4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	6039      	str	r1, [r7, #0]
 80032d6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80032e2:	f06f 0301 	mvn.w	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e018      	b.n	800331c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	2294      	movs	r2, #148	@ 0x94
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003328 <BSP_COM_Init+0x5c>)
 80032f4:	4413      	add	r3, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f870 	bl	80033dc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	2294      	movs	r2, #148	@ 0x94
 8003300:	fb02 f303 	mul.w	r3, r2, r3
 8003304:	4a08      	ldr	r2, [pc, #32]	@ (8003328 <BSP_COM_Init+0x5c>)
 8003306:	4413      	add	r3, r2
 8003308:	6839      	ldr	r1, [r7, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f80e 	bl	800332c <MX_USART1_Init>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003316:	f06f 0303 	mvn.w	r3, #3
 800331a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800331c:	68fb      	ldr	r3, [r7, #12]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000404 	.word	0x20000404

0800332c <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8003336:	4b16      	ldr	r3, [pc, #88]	@ (8003390 <MX_USART1_Init+0x64>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	220c      	movs	r2, #12
 800334a:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	895b      	ldrh	r3, [r3, #10]
 8003350:	461a      	mov	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	891b      	ldrh	r3, [r3, #8]
 8003362:	461a      	mov	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	899b      	ldrh	r3, [r3, #12]
 800336c:	461a      	mov	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003378:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f006 fab1 	bl	80098e8 <HAL_UART_Init>
 8003386:	4603      	mov	r3, r0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000030 	.word	0x20000030

08003394 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800339c:	4b09      	ldr	r3, [pc, #36]	@ (80033c4 <__io_putchar+0x30>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	2394      	movs	r3, #148	@ 0x94
 80033a4:	fb02 f303 	mul.w	r3, r2, r3
 80033a8:	4a07      	ldr	r2, [pc, #28]	@ (80033c8 <__io_putchar+0x34>)
 80033aa:	1898      	adds	r0, r3, r2
 80033ac:	1d39      	adds	r1, r7, #4
 80033ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033b2:	2201      	movs	r2, #1
 80033b4:	f006 faf2 	bl	800999c <HAL_UART_Transmit>
  return ch;
 80033b8:	687b      	ldr	r3, [r7, #4]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000498 	.word	0x20000498
 80033c8:	20000404 	.word	0x20000404

080033cc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80033d0:	2000      	movs	r0, #0
 80033d2:	f7ff ff6f 	bl	80032b4 <BSP_PB_Callback>
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	@ 0x28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80033e4:	4b27      	ldr	r3, [pc, #156]	@ (8003484 <COM1_MspInit+0xa8>)
 80033e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033ea:	4a26      	ldr	r2, [pc, #152]	@ (8003484 <COM1_MspInit+0xa8>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80033f4:	4b23      	ldr	r3, [pc, #140]	@ (8003484 <COM1_MspInit+0xa8>)
 80033f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8003402:	4b20      	ldr	r3, [pc, #128]	@ (8003484 <COM1_MspInit+0xa8>)
 8003404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003408:	4a1e      	ldr	r2, [pc, #120]	@ (8003484 <COM1_MspInit+0xa8>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003412:	4b1c      	ldr	r3, [pc, #112]	@ (8003484 <COM1_MspInit+0xa8>)
 8003414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003420:	4b18      	ldr	r3, [pc, #96]	@ (8003484 <COM1_MspInit+0xa8>)
 8003422:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003426:	4a17      	ldr	r2, [pc, #92]	@ (8003484 <COM1_MspInit+0xa8>)
 8003428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800342c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003430:	4b14      	ldr	r3, [pc, #80]	@ (8003484 <COM1_MspInit+0xa8>)
 8003432:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800343e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003442:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003444:	2302      	movs	r3, #2
 8003446:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003448:	2302      	movs	r3, #2
 800344a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800344c:	2301      	movs	r3, #1
 800344e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003450:	2307      	movs	r3, #7
 8003452:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8003454:	f107 0314 	add.w	r3, r7, #20
 8003458:	4619      	mov	r1, r3
 800345a:	480b      	ldr	r0, [pc, #44]	@ (8003488 <COM1_MspInit+0xac>)
 800345c:	f000 fb1c 	bl	8003a98 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8003460:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003464:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800346a:	2307      	movs	r3, #7
 800346c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800346e:	f107 0314 	add.w	r3, r7, #20
 8003472:	4619      	mov	r1, r3
 8003474:	4804      	ldr	r0, [pc, #16]	@ (8003488 <COM1_MspInit+0xac>)
 8003476:	f000 fb0f 	bl	8003a98 <HAL_GPIO_Init>
}
 800347a:	bf00      	nop
 800347c:	3728      	adds	r7, #40	@ 0x28
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	46020c00 	.word	0x46020c00
 8003488:	42020000 	.word	0x42020000

0800348c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003490:	4b12      	ldr	r3, [pc, #72]	@ (80034dc <HAL_Init+0x50>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a11      	ldr	r2, [pc, #68]	@ (80034dc <HAL_Init+0x50>)
 8003496:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800349a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800349c:	2003      	movs	r0, #3
 800349e:	f000 f98c 	bl	80037ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80034a2:	f001 ff2d 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 80034a6:	4602      	mov	r2, r0
 80034a8:	4b0d      	ldr	r3, [pc, #52]	@ (80034e0 <HAL_Init+0x54>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	490c      	ldr	r1, [pc, #48]	@ (80034e4 <HAL_Init+0x58>)
 80034b2:	5ccb      	ldrb	r3, [r1, r3]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
 80034b8:	4a0b      	ldr	r2, [pc, #44]	@ (80034e8 <HAL_Init+0x5c>)
 80034ba:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80034bc:	2004      	movs	r0, #4
 80034be:	f000 f9d1 	bl	8003864 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034c2:	200f      	movs	r0, #15
 80034c4:	f000 f812 	bl	80034ec <HAL_InitTick>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e002      	b.n	80034d8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80034d2:	f7ff fbc7 	bl	8002c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40022000 	.word	0x40022000
 80034e0:	46020c00 	.word	0x46020c00
 80034e4:	0800ecd8 	.word	0x0800ecd8
 80034e8:	2000002c 	.word	0x2000002c

080034ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80034f8:	4b33      	ldr	r3, [pc, #204]	@ (80035c8 <HAL_InitTick+0xdc>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e05c      	b.n	80035be <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003504:	4b31      	ldr	r3, [pc, #196]	@ (80035cc <HAL_InitTick+0xe0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b04      	cmp	r3, #4
 800350e:	d10c      	bne.n	800352a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003510:	4b2f      	ldr	r3, [pc, #188]	@ (80035d0 <HAL_InitTick+0xe4>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b2c      	ldr	r3, [pc, #176]	@ (80035c8 <HAL_InitTick+0xdc>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	4619      	mov	r1, r3
 800351a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800351e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e037      	b.n	800359a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800352a:	f000 f9f3 	bl	8003914 <HAL_SYSTICK_GetCLKSourceConfig>
 800352e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d023      	beq.n	800357e <HAL_InitTick+0x92>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d82d      	bhi.n	8003598 <HAL_InitTick+0xac>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_InitTick+0x5e>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d00d      	beq.n	8003564 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8003548:	e026      	b.n	8003598 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800354a:	4b21      	ldr	r3, [pc, #132]	@ (80035d0 <HAL_InitTick+0xe4>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b1e      	ldr	r3, [pc, #120]	@ (80035c8 <HAL_InitTick+0xdc>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	4619      	mov	r1, r3
 8003554:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003558:	fbb3 f3f1 	udiv	r3, r3, r1
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	60fb      	str	r3, [r7, #12]
        break;
 8003562:	e01a      	b.n	800359a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003564:	4b18      	ldr	r3, [pc, #96]	@ (80035c8 <HAL_InitTick+0xdc>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800356e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003572:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	60fb      	str	r3, [r7, #12]
        break;
 800357c:	e00d      	b.n	800359a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800357e:	4b12      	ldr	r3, [pc, #72]	@ (80035c8 <HAL_InitTick+0xdc>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003588:	fbb3 f3f2 	udiv	r3, r3, r2
 800358c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	60fb      	str	r3, [r7, #12]
        break;
 8003596:	e000      	b.n	800359a <HAL_InitTick+0xae>
        break;
 8003598:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f940 	bl	8003820 <HAL_SYSTICK_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e009      	b.n	80035be <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035aa:	2200      	movs	r2, #0
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	f04f 30ff 	mov.w	r0, #4294967295
 80035b2:	f000 f90d 	bl	80037d0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80035b6:	4a07      	ldr	r2, [pc, #28]	@ (80035d4 <HAL_InitTick+0xe8>)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000050 	.word	0x20000050
 80035cc:	e000e010 	.word	0xe000e010
 80035d0:	2000002c 	.word	0x2000002c
 80035d4:	2000004c 	.word	0x2000004c

080035d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035dc:	4b06      	ldr	r3, [pc, #24]	@ (80035f8 <HAL_IncTick+0x20>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	4b06      	ldr	r3, [pc, #24]	@ (80035fc <HAL_IncTick+0x24>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4413      	add	r3, r2
 80035e8:	4a04      	ldr	r2, [pc, #16]	@ (80035fc <HAL_IncTick+0x24>)
 80035ea:	6013      	str	r3, [r2, #0]
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000050 	.word	0x20000050
 80035fc:	2000049c 	.word	0x2000049c

08003600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return uwTick;
 8003604:	4b03      	ldr	r3, [pc, #12]	@ (8003614 <HAL_GetTick+0x14>)
 8003606:	681b      	ldr	r3, [r3, #0]
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	2000049c 	.word	0x2000049c

08003618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003620:	f7ff ffee 	bl	8003600 <HAL_GetTick>
 8003624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d005      	beq.n	800363e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003632:	4b0a      	ldr	r3, [pc, #40]	@ (800365c <HAL_Delay+0x44>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800363e:	bf00      	nop
 8003640:	f7ff ffde 	bl	8003600 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	429a      	cmp	r2, r3
 800364e:	d8f7      	bhi.n	8003640 <HAL_Delay+0x28>
  {
  }
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000050 	.word	0x20000050

08003660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003670:	4b0c      	ldr	r3, [pc, #48]	@ (80036a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800367c:	4013      	ands	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003688:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800368c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003692:	4a04      	ldr	r2, [pc, #16]	@ (80036a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	60d3      	str	r3, [r2, #12]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036ac:	4b04      	ldr	r3, [pc, #16]	@ (80036c0 <__NVIC_GetPriorityGrouping+0x18>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	0a1b      	lsrs	r3, r3, #8
 80036b2:	f003 0307 	and.w	r3, r3, #7
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	db0b      	blt.n	80036ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	f003 021f 	and.w	r2, r3, #31
 80036dc:	4907      	ldr	r1, [pc, #28]	@ (80036fc <__NVIC_EnableIRQ+0x38>)
 80036de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	2001      	movs	r0, #1
 80036e6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	e000e100 	.word	0xe000e100

08003700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	6039      	str	r1, [r7, #0]
 800370a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800370c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003710:	2b00      	cmp	r3, #0
 8003712:	db0a      	blt.n	800372a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	490c      	ldr	r1, [pc, #48]	@ (800374c <__NVIC_SetPriority+0x4c>)
 800371a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800371e:	0112      	lsls	r2, r2, #4
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	440b      	add	r3, r1
 8003724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003728:	e00a      	b.n	8003740 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	4908      	ldr	r1, [pc, #32]	@ (8003750 <__NVIC_SetPriority+0x50>)
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	3b04      	subs	r3, #4
 8003738:	0112      	lsls	r2, r2, #4
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	440b      	add	r3, r1
 800373e:	761a      	strb	r2, [r3, #24]
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000e100 	.word	0xe000e100
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003754:	b480      	push	{r7}
 8003756:	b089      	sub	sp, #36	@ 0x24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f1c3 0307 	rsb	r3, r3, #7
 800376e:	2b04      	cmp	r3, #4
 8003770:	bf28      	it	cs
 8003772:	2304      	movcs	r3, #4
 8003774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3304      	adds	r3, #4
 800377a:	2b06      	cmp	r3, #6
 800377c:	d902      	bls.n	8003784 <NVIC_EncodePriority+0x30>
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3b03      	subs	r3, #3
 8003782:	e000      	b.n	8003786 <NVIC_EncodePriority+0x32>
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003788:	f04f 32ff 	mov.w	r2, #4294967295
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43da      	mvns	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	401a      	ands	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800379c:	f04f 31ff 	mov.w	r1, #4294967295
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	43d9      	mvns	r1, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ac:	4313      	orrs	r3, r2
         );
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3724      	adds	r7, #36	@ 0x24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ff4c 	bl	8003660 <__NVIC_SetPriorityGrouping>
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037de:	f7ff ff63 	bl	80036a8 <__NVIC_GetPriorityGrouping>
 80037e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	6978      	ldr	r0, [r7, #20]
 80037ea:	f7ff ffb3 	bl	8003754 <NVIC_EncodePriority>
 80037ee:	4602      	mov	r2, r0
 80037f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037f4:	4611      	mov	r1, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff ff82 	bl	8003700 <__NVIC_SetPriority>
}
 80037fc:	bf00      	nop
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800380e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff ff56 	bl	80036c4 <__NVIC_EnableIRQ>
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3b01      	subs	r3, #1
 800382c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003830:	d301      	bcc.n	8003836 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003832:	2301      	movs	r3, #1
 8003834:	e00d      	b.n	8003852 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003836:	4a0a      	ldr	r2, [pc, #40]	@ (8003860 <HAL_SYSTICK_Config+0x40>)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3b01      	subs	r3, #1
 800383c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800383e:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <HAL_SYSTICK_Config+0x40>)
 8003840:	2200      	movs	r2, #0
 8003842:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003844:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <HAL_SYSTICK_Config+0x40>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a05      	ldr	r2, [pc, #20]	@ (8003860 <HAL_SYSTICK_Config+0x40>)
 800384a:	f043 0303 	orr.w	r3, r3, #3
 800384e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	e000e010 	.word	0xe000e010

08003864 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b04      	cmp	r3, #4
 8003870:	d844      	bhi.n	80038fc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003872:	a201      	add	r2, pc, #4	@ (adr r2, 8003878 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003878:	0800389b 	.word	0x0800389b
 800387c:	080038b9 	.word	0x080038b9
 8003880:	080038db 	.word	0x080038db
 8003884:	080038fd 	.word	0x080038fd
 8003888:	0800388d 	.word	0x0800388d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800388c:	4b1f      	ldr	r3, [pc, #124]	@ (800390c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1e      	ldr	r2, [pc, #120]	@ (800390c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003892:	f043 0304 	orr.w	r3, r3, #4
 8003896:	6013      	str	r3, [r2, #0]
      break;
 8003898:	e031      	b.n	80038fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800389a:	4b1c      	ldr	r3, [pc, #112]	@ (800390c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1b      	ldr	r2, [pc, #108]	@ (800390c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80038a0:	f023 0304 	bic.w	r3, r3, #4
 80038a4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80038a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80038a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ac:	4a18      	ldr	r2, [pc, #96]	@ (8003910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80038ae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80038b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80038b6:	e022      	b.n	80038fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80038b8:	4b14      	ldr	r3, [pc, #80]	@ (800390c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a13      	ldr	r2, [pc, #76]	@ (800390c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80038be:	f023 0304 	bic.w	r3, r3, #4
 80038c2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80038c4:	4b12      	ldr	r3, [pc, #72]	@ (8003910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80038c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ca:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80038ce:	4a10      	ldr	r2, [pc, #64]	@ (8003910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80038d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80038d8:	e011      	b.n	80038fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80038da:	4b0c      	ldr	r3, [pc, #48]	@ (800390c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a0b      	ldr	r2, [pc, #44]	@ (800390c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80038e0:	f023 0304 	bic.w	r3, r3, #4
 80038e4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80038e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80038e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ec:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80038f0:	4a07      	ldr	r2, [pc, #28]	@ (8003910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80038f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80038fa:	e000      	b.n	80038fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80038fc:	bf00      	nop
  }
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	e000e010 	.word	0xe000e010
 8003910:	46020c00 	.word	0x46020c00

08003914 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800391a:	4b19      	ldr	r3, [pc, #100]	@ (8003980 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003926:	2304      	movs	r3, #4
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	e021      	b.n	8003970 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800392c:	4b15      	ldr	r3, [pc, #84]	@ (8003984 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800392e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003932:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003936:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800393e:	d011      	beq.n	8003964 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003946:	d810      	bhi.n	800396a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d004      	beq.n	8003958 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003954:	d003      	beq.n	800395e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003956:	e008      	b.n	800396a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003958:	2300      	movs	r3, #0
 800395a:	607b      	str	r3, [r7, #4]
        break;
 800395c:	e008      	b.n	8003970 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800395e:	2301      	movs	r3, #1
 8003960:	607b      	str	r3, [r7, #4]
        break;
 8003962:	e005      	b.n	8003970 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003964:	2302      	movs	r3, #2
 8003966:	607b      	str	r3, [r7, #4]
        break;
 8003968:	e002      	b.n	8003970 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800396a:	2300      	movs	r3, #0
 800396c:	607b      	str	r3, [r7, #4]
        break;
 800396e:	bf00      	nop
    }
  }
  return systick_source;
 8003970:	687b      	ldr	r3, [r7, #4]
}
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	e000e010 	.word	0xe000e010
 8003984:	46020c00 	.word	0x46020c00

08003988 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	460b      	mov	r3, r1
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800399a:	7afb      	ldrb	r3, [r7, #11]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d011      	beq.n	80039c4 <HAL_EXTI_RegisterCallback+0x3c>
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	dc13      	bgt.n	80039cc <HAL_EXTI_RegisterCallback+0x44>
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_EXTI_RegisterCallback+0x26>
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d007      	beq.n	80039bc <HAL_EXTI_RegisterCallback+0x34>
 80039ac:	e00e      	b.n	80039cc <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	609a      	str	r2, [r3, #8]
      break;
 80039ba:	e00a      	b.n	80039d2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	605a      	str	r2, [r3, #4]
      break;
 80039c2:	e006      	b.n	80039d2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	609a      	str	r2, [r3, #8]
      break;
 80039ca:	e002      	b.n	80039d2 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	75fb      	strb	r3, [r7, #23]
      break;
 80039d0:	bf00      	nop
  }

  return status;
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e003      	b.n	80039fc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80039fa:	2300      	movs	r3, #0
  }
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	0c1b      	lsrs	r3, r3, #16
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	2201      	movs	r2, #1
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	4b17      	ldr	r3, [pc, #92]	@ (8003a90 <HAL_EXTI_IRQHandler+0x88>)
 8003a32:	4413      	add	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <HAL_EXTI_IRQHandler+0x8c>)
 8003a60:	4413      	add	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d009      	beq.n	8003a88 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	4798      	blx	r3
    }
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	4602200c 	.word	0x4602200c
 8003a94:	46022010 	.word	0x46022010

08003a98 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b089      	sub	sp, #36	@ 0x24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003aaa:	e1ba      	b.n	8003e22 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 81aa 	beq.w	8003e1c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a55      	ldr	r2, [pc, #340]	@ (8003c20 <HAL_GPIO_Init+0x188>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d15d      	bne.n	8003b8c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f003 0201 	and.w	r2, r3, #1
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003b00:	4a48      	ldr	r2, [pc, #288]	@ (8003c24 <HAL_GPIO_Init+0x18c>)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b08:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003b0a:	4a46      	ldr	r2, [pc, #280]	@ (8003c24 <HAL_GPIO_Init+0x18c>)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	08da      	lsrs	r2, r3, #3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	3208      	adds	r2, #8
 8003b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b22:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	220f      	movs	r2, #15
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69fa      	ldr	r2, [r7, #28]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	220b      	movs	r2, #11
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	69fa      	ldr	r2, [r7, #28]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	08da      	lsrs	r2, r3, #3
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	3208      	adds	r2, #8
 8003b56:	69f9      	ldr	r1, [r7, #28]
 8003b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	2203      	movs	r2, #3
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	2202      	movs	r2, #2
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e067      	b.n	8003c5c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x104>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b12      	cmp	r3, #18
 8003b9a:	d145      	bne.n	8003c28 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	08da      	lsrs	r2, r3, #3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3208      	adds	r2, #8
 8003ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	220f      	movs	r2, #15
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f003 020f 	and.w	r2, r3, #15
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	08da      	lsrs	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3208      	adds	r2, #8
 8003be2:	69f9      	ldr	r1, [r7, #28]
 8003be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0203 	and.w	r2, r3, #3
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e01e      	b.n	8003c5c <HAL_GPIO_Init+0x1c4>
 8003c1e:	bf00      	nop
 8003c20:	46020000 	.word	0x46020000
 8003c24:	0800ed3c 	.word	0x0800ed3c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	2203      	movs	r2, #3
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 0203 	and.w	r2, r3, #3
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d00b      	beq.n	8003c7c <HAL_GPIO_Init+0x1e4>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d007      	beq.n	8003c7c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c70:	2b11      	cmp	r3, #17
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b12      	cmp	r3, #18
 8003c7a:	d130      	bne.n	8003cde <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	2203      	movs	r2, #3
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	091b      	lsrs	r3, r3, #4
 8003cc8:	f003 0201 	and.w	r2, r3, #1
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d017      	beq.n	8003d16 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d07c      	beq.n	8003e1c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003d22:	4a47      	ldr	r2, [pc, #284]	@ (8003e40 <HAL_GPIO_Init+0x3a8>)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	3318      	adds	r3, #24
 8003d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	220f      	movs	r2, #15
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	0a9a      	lsrs	r2, r3, #10
 8003d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e44 <HAL_GPIO_Init+0x3ac>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	f002 0203 	and.w	r2, r2, #3
 8003d54:	00d2      	lsls	r2, r2, #3
 8003d56:	4093      	lsls	r3, r2
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003d5e:	4938      	ldr	r1, [pc, #224]	@ (8003e40 <HAL_GPIO_Init+0x3a8>)
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	089b      	lsrs	r3, r3, #2
 8003d64:	3318      	adds	r3, #24
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003d6c:	4b34      	ldr	r3, [pc, #208]	@ (8003e40 <HAL_GPIO_Init+0x3a8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003d90:	4a2b      	ldr	r2, [pc, #172]	@ (8003e40 <HAL_GPIO_Init+0x3a8>)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003d96:	4b2a      	ldr	r3, [pc, #168]	@ (8003e40 <HAL_GPIO_Init+0x3a8>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	4013      	ands	r3, r2
 8003da4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003dba:	4a21      	ldr	r2, [pc, #132]	@ (8003e40 <HAL_GPIO_Init+0x3a8>)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e40 <HAL_GPIO_Init+0x3a8>)
 8003dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dc6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003de6:	4a16      	ldr	r2, [pc, #88]	@ (8003e40 <HAL_GPIO_Init+0x3a8>)
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003dee:	4b14      	ldr	r3, [pc, #80]	@ (8003e40 <HAL_GPIO_Init+0x3a8>)
 8003df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003df4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003e14:	4a0a      	ldr	r2, [pc, #40]	@ (8003e40 <HAL_GPIO_Init+0x3a8>)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f47f ae3d 	bne.w	8003aac <HAL_GPIO_Init+0x14>
  }
}
 8003e32:	bf00      	nop
 8003e34:	bf00      	nop
 8003e36:	3724      	adds	r7, #36	@ 0x24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	46022000 	.word	0x46022000
 8003e44:	002f7f7f 	.word	0x002f7f7f

08003e48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	887b      	ldrh	r3, [r7, #2]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
 8003e64:	e001      	b.n	8003e6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e66:	2300      	movs	r3, #0
 8003e68:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	807b      	strh	r3, [r7, #2]
 8003e84:	4613      	mov	r3, r2
 8003e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e88:	787b      	ldrb	r3, [r7, #1]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e8e:	887a      	ldrh	r2, [r7, #2]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003e94:	e002      	b.n	8003e9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003e96:	887a      	ldrh	r2, [r7, #2]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d006      	beq.n	8003ecc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8003ef0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe fb68 	bl	800259c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003ecc:	4b08      	ldr	r3, [pc, #32]	@ (8003ef0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d006      	beq.n	8003ee6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003ed8:	4a05      	ldr	r2, [pc, #20]	@ (8003ef0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 f807 	bl	8003ef4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	46022000 	.word	0x46022000

08003ef4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003f18:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
 8003f28:	e007      	b.n	8003f3a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003f2a:	4b07      	ldr	r3, [pc, #28]	@ (8003f48 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 0204 	bic.w	r2, r3, #4
 8003f32:	4905      	ldr	r1, [pc, #20]	@ (8003f48 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40030400 	.word	0x40030400

08003f4c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003f50:	4b05      	ldr	r3, [pc, #20]	@ (8003f68 <HAL_ICACHE_Enable+0x1c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a04      	ldr	r2, [pc, #16]	@ (8003f68 <HAL_ICACHE_Enable+0x1c>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	40030400 	.word	0x40030400

08003f6c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003f74:	4b39      	ldr	r3, [pc, #228]	@ (800405c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f7c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d10b      	bne.n	8003f9e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f8c:	d905      	bls.n	8003f9a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003f8e:	4b33      	ldr	r3, [pc, #204]	@ (800405c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	4a32      	ldr	r2, [pc, #200]	@ (800405c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f98:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e057      	b.n	800404e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa4:	d90a      	bls.n	8003fbc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800405c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800405c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fb8:	60d3      	str	r3, [r2, #12]
 8003fba:	e007      	b.n	8003fcc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003fbc:	4b27      	ldr	r3, [pc, #156]	@ (800405c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003fc4:	4925      	ldr	r1, [pc, #148]	@ (800405c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003fcc:	4b24      	ldr	r3, [pc, #144]	@ (8004060 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a24      	ldr	r2, [pc, #144]	@ (8004064 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	099b      	lsrs	r3, r3, #6
 8003fd8:	2232      	movs	r2, #50	@ 0x32
 8003fda:	fb02 f303 	mul.w	r3, r2, r3
 8003fde:	4a21      	ldr	r2, [pc, #132]	@ (8004064 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	099b      	lsrs	r3, r3, #6
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003fea:	e002      	b.n	8003ff2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800405c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d102      	bne.n	8004004 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f3      	bne.n	8003fec <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d01b      	beq.n	8004042 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800400a:	4b15      	ldr	r3, [pc, #84]	@ (8004060 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a15      	ldr	r2, [pc, #84]	@ (8004064 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	099b      	lsrs	r3, r3, #6
 8004016:	2232      	movs	r2, #50	@ 0x32
 8004018:	fb02 f303 	mul.w	r3, r2, r3
 800401c:	4a11      	ldr	r2, [pc, #68]	@ (8004064 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	099b      	lsrs	r3, r3, #6
 8004024:	3301      	adds	r3, #1
 8004026:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004028:	e002      	b.n	8004030 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3b01      	subs	r3, #1
 800402e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004030:	4b0a      	ldr	r3, [pc, #40]	@ (800405c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004034:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f3      	bne.n	800402a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e000      	b.n	800404e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	46020800 	.word	0x46020800
 8004060:	2000002c 	.word	0x2000002c
 8004064:	10624dd3 	.word	0x10624dd3

08004068 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800406c:	4b04      	ldr	r3, [pc, #16]	@ (8004080 <HAL_PWREx_GetVoltageRange+0x18>)
 800406e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004070:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	46020800 	.word	0x46020800

08004084 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800408c:	4b22      	ldr	r3, [pc, #136]	@ (8004118 <HAL_PWREx_ConfigSupply+0x94>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a22      	ldr	r2, [pc, #136]	@ (800411c <HAL_PWREx_ConfigSupply+0x98>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	2232      	movs	r2, #50	@ 0x32
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	4a1f      	ldr	r2, [pc, #124]	@ (800411c <HAL_PWREx_ConfigSupply+0x98>)
 80040a0:	fba2 2303 	umull	r2, r3, r2, r3
 80040a4:	099b      	lsrs	r3, r3, #6
 80040a6:	3301      	adds	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d113      	bne.n	80040d8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80040b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004120 <HAL_PWREx_ConfigSupply+0x9c>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a1a      	ldr	r2, [pc, #104]	@ (8004120 <HAL_PWREx_ConfigSupply+0x9c>)
 80040b6:	f023 0302 	bic.w	r3, r3, #2
 80040ba:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80040bc:	e002      	b.n	80040c4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80040c4:	4b16      	ldr	r3, [pc, #88]	@ (8004120 <HAL_PWREx_ConfigSupply+0x9c>)
 80040c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d116      	bne.n	80040fe <HAL_PWREx_ConfigSupply+0x7a>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f3      	bne.n	80040be <HAL_PWREx_ConfigSupply+0x3a>
 80040d6:	e012      	b.n	80040fe <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80040d8:	4b11      	ldr	r3, [pc, #68]	@ (8004120 <HAL_PWREx_ConfigSupply+0x9c>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4a10      	ldr	r2, [pc, #64]	@ (8004120 <HAL_PWREx_ConfigSupply+0x9c>)
 80040de:	f043 0302 	orr.w	r3, r3, #2
 80040e2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80040e4:	e002      	b.n	80040ec <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80040ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004120 <HAL_PWREx_ConfigSupply+0x9c>)
 80040ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <HAL_PWREx_ConfigSupply+0x7a>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f3      	bne.n	80040e6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e000      	b.n	800410a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	2000002c 	.word	0x2000002c
 800411c:	10624dd3 	.word	0x10624dd3
 8004120:	46020800 	.word	0x46020800

08004124 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004128:	4b05      	ldr	r3, [pc, #20]	@ (8004140 <HAL_PWREx_EnableVddIO2+0x1c>)
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	4a04      	ldr	r2, [pc, #16]	@ (8004140 <HAL_PWREx_EnableVddIO2+0x1c>)
 800412e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004132:	6113      	str	r3, [r2, #16]
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	46020800 	.word	0x46020800

08004144 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004148:	4b05      	ldr	r3, [pc, #20]	@ (8004160 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800414a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414c:	4a04      	ldr	r2, [pc, #16]	@ (8004160 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	46020800 	.word	0x46020800

08004164 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08e      	sub	sp, #56	@ 0x38
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800416c:	2300      	movs	r3, #0
 800416e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d102      	bne.n	800417e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f000 bec8 	b.w	8004f0e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800417e:	4b99      	ldr	r3, [pc, #612]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004188:	4b96      	ldr	r3, [pc, #600]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 816c 	beq.w	8004478 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <HAL_RCC_OscConfig+0x52>
 80041a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a8:	2b0c      	cmp	r3, #12
 80041aa:	f040 80de 	bne.w	800436a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	f040 80da 	bne.w	800436a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d102      	bne.n	80041c4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	f000 bea5 	b.w	8004f0e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041c8:	4b86      	ldr	r3, [pc, #536]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d004      	beq.n	80041de <HAL_RCC_OscConfig+0x7a>
 80041d4:	4b83      	ldr	r3, [pc, #524]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80041dc:	e005      	b.n	80041ea <HAL_RCC_OscConfig+0x86>
 80041de:	4b81      	ldr	r3, [pc, #516]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80041e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041e4:	041b      	lsls	r3, r3, #16
 80041e6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d255      	bcs.n	800429a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80041ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	4618      	mov	r0, r3
 80041fa:	f001 f9dd 	bl	80055b8 <RCC_SetFlashLatencyFromMSIRange>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	f000 be82 	b.w	8004f0e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800420a:	4b76      	ldr	r3, [pc, #472]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	4a75      	ldr	r2, [pc, #468]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004210:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004214:	6093      	str	r3, [r2, #8]
 8004216:	4b73      	ldr	r3, [pc, #460]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	4970      	ldr	r1, [pc, #448]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004224:	4313      	orrs	r3, r2
 8004226:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004230:	d309      	bcc.n	8004246 <HAL_RCC_OscConfig+0xe2>
 8004232:	4b6c      	ldr	r3, [pc, #432]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f023 021f 	bic.w	r2, r3, #31
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	4969      	ldr	r1, [pc, #420]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004240:	4313      	orrs	r3, r2
 8004242:	60cb      	str	r3, [r1, #12]
 8004244:	e07e      	b.n	8004344 <HAL_RCC_OscConfig+0x1e0>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	2b00      	cmp	r3, #0
 800424c:	da0a      	bge.n	8004264 <HAL_RCC_OscConfig+0x100>
 800424e:	4b65      	ldr	r3, [pc, #404]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	015b      	lsls	r3, r3, #5
 800425c:	4961      	ldr	r1, [pc, #388]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 800425e:	4313      	orrs	r3, r2
 8004260:	60cb      	str	r3, [r1, #12]
 8004262:	e06f      	b.n	8004344 <HAL_RCC_OscConfig+0x1e0>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800426c:	d30a      	bcc.n	8004284 <HAL_RCC_OscConfig+0x120>
 800426e:	4b5d      	ldr	r3, [pc, #372]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	029b      	lsls	r3, r3, #10
 800427c:	4959      	ldr	r1, [pc, #356]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 800427e:	4313      	orrs	r3, r2
 8004280:	60cb      	str	r3, [r1, #12]
 8004282:	e05f      	b.n	8004344 <HAL_RCC_OscConfig+0x1e0>
 8004284:	4b57      	ldr	r3, [pc, #348]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	03db      	lsls	r3, r3, #15
 8004292:	4954      	ldr	r1, [pc, #336]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004294:	4313      	orrs	r3, r2
 8004296:	60cb      	str	r3, [r1, #12]
 8004298:	e054      	b.n	8004344 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800429a:	4b52      	ldr	r3, [pc, #328]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4a51      	ldr	r2, [pc, #324]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80042a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042a4:	6093      	str	r3, [r2, #8]
 80042a6:	4b4f      	ldr	r3, [pc, #316]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	494c      	ldr	r1, [pc, #304]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80042c0:	d309      	bcc.n	80042d6 <HAL_RCC_OscConfig+0x172>
 80042c2:	4b48      	ldr	r3, [pc, #288]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f023 021f 	bic.w	r2, r3, #31
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	4945      	ldr	r1, [pc, #276]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60cb      	str	r3, [r1, #12]
 80042d4:	e028      	b.n	8004328 <HAL_RCC_OscConfig+0x1c4>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	2b00      	cmp	r3, #0
 80042dc:	da0a      	bge.n	80042f4 <HAL_RCC_OscConfig+0x190>
 80042de:	4b41      	ldr	r3, [pc, #260]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	015b      	lsls	r3, r3, #5
 80042ec:	493d      	ldr	r1, [pc, #244]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60cb      	str	r3, [r1, #12]
 80042f2:	e019      	b.n	8004328 <HAL_RCC_OscConfig+0x1c4>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042fc:	d30a      	bcc.n	8004314 <HAL_RCC_OscConfig+0x1b0>
 80042fe:	4b39      	ldr	r3, [pc, #228]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	029b      	lsls	r3, r3, #10
 800430c:	4935      	ldr	r1, [pc, #212]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 800430e:	4313      	orrs	r3, r2
 8004310:	60cb      	str	r3, [r1, #12]
 8004312:	e009      	b.n	8004328 <HAL_RCC_OscConfig+0x1c4>
 8004314:	4b33      	ldr	r3, [pc, #204]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	03db      	lsls	r3, r3, #15
 8004322:	4930      	ldr	r1, [pc, #192]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004324:	4313      	orrs	r3, r2
 8004326:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10a      	bne.n	8004344 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	4618      	mov	r0, r3
 8004334:	f001 f940 	bl	80055b8 <RCC_SetFlashLatencyFromMSIRange>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	f000 bde5 	b.w	8004f0e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004344:	f001 f8e2 	bl	800550c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004348:	4b27      	ldr	r3, [pc, #156]	@ (80043e8 <HAL_RCC_OscConfig+0x284>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff f8cd 	bl	80034ec <HAL_InitTick>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 808a 	beq.w	8004476 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004362:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004366:	f000 bdd2 	b.w	8004f0e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d066      	beq.n	8004440 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004372:	4b1c      	ldr	r3, [pc, #112]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1b      	ldr	r2, [pc, #108]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800437e:	f7ff f93f 	bl	8003600 <HAL_GetTick>
 8004382:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004384:	e009      	b.n	800439a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004386:	f7ff f93b 	bl	8003600 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d902      	bls.n	800439a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	f000 bdba 	b.w	8004f0e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800439a:	4b12      	ldr	r3, [pc, #72]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0ef      	beq.n	8004386 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80043a6:	4b0f      	ldr	r3, [pc, #60]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	4a0e      	ldr	r2, [pc, #56]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80043ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043b0:	6093      	str	r3, [r2, #8]
 80043b2:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	4909      	ldr	r1, [pc, #36]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80043cc:	d30e      	bcc.n	80043ec <HAL_RCC_OscConfig+0x288>
 80043ce:	4b05      	ldr	r3, [pc, #20]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f023 021f 	bic.w	r2, r3, #31
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	4902      	ldr	r1, [pc, #8]	@ (80043e4 <HAL_RCC_OscConfig+0x280>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	60cb      	str	r3, [r1, #12]
 80043e0:	e04a      	b.n	8004478 <HAL_RCC_OscConfig+0x314>
 80043e2:	bf00      	nop
 80043e4:	46020c00 	.word	0x46020c00
 80043e8:	2000004c 	.word	0x2000004c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	da0a      	bge.n	800440a <HAL_RCC_OscConfig+0x2a6>
 80043f4:	4b98      	ldr	r3, [pc, #608]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	015b      	lsls	r3, r3, #5
 8004402:	4995      	ldr	r1, [pc, #596]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004404:	4313      	orrs	r3, r2
 8004406:	60cb      	str	r3, [r1, #12]
 8004408:	e036      	b.n	8004478 <HAL_RCC_OscConfig+0x314>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004412:	d30a      	bcc.n	800442a <HAL_RCC_OscConfig+0x2c6>
 8004414:	4b90      	ldr	r3, [pc, #576]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	029b      	lsls	r3, r3, #10
 8004422:	498d      	ldr	r1, [pc, #564]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004424:	4313      	orrs	r3, r2
 8004426:	60cb      	str	r3, [r1, #12]
 8004428:	e026      	b.n	8004478 <HAL_RCC_OscConfig+0x314>
 800442a:	4b8b      	ldr	r3, [pc, #556]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	03db      	lsls	r3, r3, #15
 8004438:	4987      	ldr	r1, [pc, #540]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 800443a:	4313      	orrs	r3, r2
 800443c:	60cb      	str	r3, [r1, #12]
 800443e:	e01b      	b.n	8004478 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004440:	4b85      	ldr	r3, [pc, #532]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a84      	ldr	r2, [pc, #528]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004446:	f023 0301 	bic.w	r3, r3, #1
 800444a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800444c:	f7ff f8d8 	bl	8003600 <HAL_GetTick>
 8004450:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004452:	e009      	b.n	8004468 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004454:	f7ff f8d4 	bl	8003600 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d902      	bls.n	8004468 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	f000 bd53 	b.w	8004f0e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004468:	4b7b      	ldr	r3, [pc, #492]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1ef      	bne.n	8004454 <HAL_RCC_OscConfig+0x2f0>
 8004474:	e000      	b.n	8004478 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004476:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 808b 	beq.w	800459c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	2b08      	cmp	r3, #8
 800448a:	d005      	beq.n	8004498 <HAL_RCC_OscConfig+0x334>
 800448c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d109      	bne.n	80044a6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004494:	2b03      	cmp	r3, #3
 8004496:	d106      	bne.n	80044a6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d17d      	bne.n	800459c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f000 bd34 	b.w	8004f0e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ae:	d106      	bne.n	80044be <HAL_RCC_OscConfig+0x35a>
 80044b0:	4b69      	ldr	r3, [pc, #420]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a68      	ldr	r2, [pc, #416]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 80044b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	e041      	b.n	8004542 <HAL_RCC_OscConfig+0x3de>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044c6:	d112      	bne.n	80044ee <HAL_RCC_OscConfig+0x38a>
 80044c8:	4b63      	ldr	r3, [pc, #396]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a62      	ldr	r2, [pc, #392]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 80044ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	4b60      	ldr	r3, [pc, #384]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a5f      	ldr	r2, [pc, #380]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 80044da:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b5d      	ldr	r3, [pc, #372]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a5c      	ldr	r2, [pc, #368]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 80044e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	e029      	b.n	8004542 <HAL_RCC_OscConfig+0x3de>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80044f6:	d112      	bne.n	800451e <HAL_RCC_OscConfig+0x3ba>
 80044f8:	4b57      	ldr	r3, [pc, #348]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a56      	ldr	r2, [pc, #344]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 80044fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	4b54      	ldr	r3, [pc, #336]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a53      	ldr	r2, [pc, #332]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 800450a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b51      	ldr	r3, [pc, #324]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a50      	ldr	r2, [pc, #320]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e011      	b.n	8004542 <HAL_RCC_OscConfig+0x3de>
 800451e:	4b4e      	ldr	r3, [pc, #312]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a4d      	ldr	r2, [pc, #308]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4b4b      	ldr	r3, [pc, #300]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a4a      	ldr	r2, [pc, #296]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004530:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	4b48      	ldr	r3, [pc, #288]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a47      	ldr	r2, [pc, #284]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 800453c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004540:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d014      	beq.n	8004574 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800454a:	f7ff f859 	bl	8003600 <HAL_GetTick>
 800454e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004550:	e009      	b.n	8004566 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004552:	f7ff f855 	bl	8003600 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b64      	cmp	r3, #100	@ 0x64
 800455e:	d902      	bls.n	8004566 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	f000 bcd4 	b.w	8004f0e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004566:	4b3c      	ldr	r3, [pc, #240]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0ef      	beq.n	8004552 <HAL_RCC_OscConfig+0x3ee>
 8004572:	e013      	b.n	800459c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004574:	f7ff f844 	bl	8003600 <HAL_GetTick>
 8004578:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800457a:	e009      	b.n	8004590 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800457c:	f7ff f840 	bl	8003600 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	@ 0x64
 8004588:	d902      	bls.n	8004590 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	f000 bcbf 	b.w	8004f0e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004590:	4b31      	ldr	r3, [pc, #196]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1ef      	bne.n	800457c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d05f      	beq.n	8004668 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80045a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d005      	beq.n	80045ba <HAL_RCC_OscConfig+0x456>
 80045ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b0:	2b0c      	cmp	r3, #12
 80045b2:	d114      	bne.n	80045de <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d111      	bne.n	80045de <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	f000 bca3 	b.w	8004f0e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b23      	ldr	r3, [pc, #140]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	041b      	lsls	r3, r3, #16
 80045d6:	4920      	ldr	r1, [pc, #128]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045dc:	e044      	b.n	8004668 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d024      	beq.n	8004630 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80045e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 80045ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045f0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045f2:	f7ff f805 	bl	8003600 <HAL_GetTick>
 80045f6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f8:	e009      	b.n	800460e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fa:	f7ff f801 	bl	8003600 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d902      	bls.n	800460e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	f000 bc80 	b.w	8004f0e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800460e:	4b12      	ldr	r3, [pc, #72]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0ef      	beq.n	80045fa <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800461a:	4b0f      	ldr	r3, [pc, #60]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	041b      	lsls	r3, r3, #16
 8004628:	490b      	ldr	r1, [pc, #44]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 800462a:	4313      	orrs	r3, r2
 800462c:	610b      	str	r3, [r1, #16]
 800462e:	e01b      	b.n	8004668 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004630:	4b09      	ldr	r3, [pc, #36]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a08      	ldr	r2, [pc, #32]	@ (8004658 <HAL_RCC_OscConfig+0x4f4>)
 8004636:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800463a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800463c:	f7fe ffe0 	bl	8003600 <HAL_GetTick>
 8004640:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004642:	e00b      	b.n	800465c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004644:	f7fe ffdc 	bl	8003600 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d904      	bls.n	800465c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	f000 bc5b 	b.w	8004f0e <HAL_RCC_OscConfig+0xdaa>
 8004658:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800465c:	4baf      	ldr	r3, [pc, #700]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ed      	bne.n	8004644 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80c8 	beq.w	8004806 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800467c:	4ba7      	ldr	r3, [pc, #668]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 800467e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d111      	bne.n	80046ae <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800468a:	4ba4      	ldr	r3, [pc, #656]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 800468c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004690:	4aa2      	ldr	r2, [pc, #648]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 8004692:	f043 0304 	orr.w	r3, r3, #4
 8004696:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800469a:	4ba0      	ldr	r3, [pc, #640]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 800469c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80046a8:	2301      	movs	r3, #1
 80046aa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80046ae:	4b9c      	ldr	r3, [pc, #624]	@ (8004920 <HAL_RCC_OscConfig+0x7bc>)
 80046b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d119      	bne.n	80046ee <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80046ba:	4b99      	ldr	r3, [pc, #612]	@ (8004920 <HAL_RCC_OscConfig+0x7bc>)
 80046bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046be:	4a98      	ldr	r2, [pc, #608]	@ (8004920 <HAL_RCC_OscConfig+0x7bc>)
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c6:	f7fe ff9b 	bl	8003600 <HAL_GetTick>
 80046ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80046cc:	e009      	b.n	80046e2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ce:	f7fe ff97 	bl	8003600 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d902      	bls.n	80046e2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	f000 bc16 	b.w	8004f0e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80046e2:	4b8f      	ldr	r3, [pc, #572]	@ (8004920 <HAL_RCC_OscConfig+0x7bc>)
 80046e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0ef      	beq.n	80046ce <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d05f      	beq.n	80047b6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80046f6:	4b89      	ldr	r3, [pc, #548]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80046f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046fc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004708:	429a      	cmp	r2, r3
 800470a:	d037      	beq.n	800477c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d006      	beq.n	8004724 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e3f4      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d01b      	beq.n	8004766 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800472e:	4b7b      	ldr	r3, [pc, #492]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 8004730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004734:	4a79      	ldr	r2, [pc, #484]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 8004736:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800473a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800473e:	f7fe ff5f 	bl	8003600 <HAL_GetTick>
 8004742:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004746:	f7fe ff5b 	bl	8003600 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b05      	cmp	r3, #5
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e3da      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004758:	4b70      	ldr	r3, [pc, #448]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 800475a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800475e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1ef      	bne.n	8004746 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004766:	4b6d      	ldr	r3, [pc, #436]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 8004768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800476c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	4969      	ldr	r1, [pc, #420]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800477c:	4b67      	ldr	r3, [pc, #412]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 800477e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004782:	4a66      	ldr	r2, [pc, #408]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 8004784:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004788:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800478c:	f7fe ff38 	bl	8003600 <HAL_GetTick>
 8004790:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004794:	f7fe ff34 	bl	8003600 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b05      	cmp	r3, #5
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e3b3      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80047a6:	4b5d      	ldr	r3, [pc, #372]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80047a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0ef      	beq.n	8004794 <HAL_RCC_OscConfig+0x630>
 80047b4:	e01b      	b.n	80047ee <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80047b6:	4b59      	ldr	r3, [pc, #356]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80047b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047bc:	4a57      	ldr	r2, [pc, #348]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80047be:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80047c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80047c6:	f7fe ff1b 	bl	8003600 <HAL_GetTick>
 80047ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ce:	f7fe ff17 	bl	8003600 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b05      	cmp	r3, #5
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e396      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80047e0:	4b4e      	ldr	r3, [pc, #312]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80047e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1ef      	bne.n	80047ce <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047ee:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f6:	4b49      	ldr	r3, [pc, #292]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80047f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047fc:	4a47      	ldr	r2, [pc, #284]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80047fe:	f023 0304 	bic.w	r3, r3, #4
 8004802:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 8111 	beq.w	8004a36 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004814:	2300      	movs	r3, #0
 8004816:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481a:	4b40      	ldr	r3, [pc, #256]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 800481c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d111      	bne.n	800484c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004828:	4b3c      	ldr	r3, [pc, #240]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 800482a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800482e:	4a3b      	ldr	r2, [pc, #236]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 8004830:	f043 0304 	orr.w	r3, r3, #4
 8004834:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004838:	4b38      	ldr	r3, [pc, #224]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 800483a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	613b      	str	r3, [r7, #16]
 8004844:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800484c:	4b34      	ldr	r3, [pc, #208]	@ (8004920 <HAL_RCC_OscConfig+0x7bc>)
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d118      	bne.n	800488a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004858:	4b31      	ldr	r3, [pc, #196]	@ (8004920 <HAL_RCC_OscConfig+0x7bc>)
 800485a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485c:	4a30      	ldr	r2, [pc, #192]	@ (8004920 <HAL_RCC_OscConfig+0x7bc>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004864:	f7fe fecc 	bl	8003600 <HAL_GetTick>
 8004868:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486c:	f7fe fec8 	bl	8003600 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e347      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800487e:	4b28      	ldr	r3, [pc, #160]	@ (8004920 <HAL_RCC_OscConfig+0x7bc>)
 8004880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01f      	beq.n	80048d6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d010      	beq.n	80048c4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80048a2:	4b1e      	ldr	r3, [pc, #120]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80048a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048a8:	4a1c      	ldr	r2, [pc, #112]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80048aa:	f043 0304 	orr.w	r3, r3, #4
 80048ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048b2:	4b1a      	ldr	r3, [pc, #104]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80048b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048b8:	4a18      	ldr	r2, [pc, #96]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80048c2:	e018      	b.n	80048f6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048c4:	4b15      	ldr	r3, [pc, #84]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80048c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048ca:	4a14      	ldr	r2, [pc, #80]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80048d4:	e00f      	b.n	80048f6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048d6:	4b11      	ldr	r3, [pc, #68]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80048d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048dc:	4a0f      	ldr	r2, [pc, #60]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80048e6:	4b0d      	ldr	r3, [pc, #52]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80048e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048ec:	4a0b      	ldr	r2, [pc, #44]	@ (800491c <HAL_RCC_OscConfig+0x7b8>)
 80048ee:	f023 0304 	bic.w	r3, r3, #4
 80048f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d057      	beq.n	80049ae <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80048fe:	f7fe fe7f 	bl	8003600 <HAL_GetTick>
 8004902:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004904:	e00e      	b.n	8004924 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004906:	f7fe fe7b 	bl	8003600 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004914:	4293      	cmp	r3, r2
 8004916:	d905      	bls.n	8004924 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e2f8      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
 800491c:	46020c00 	.word	0x46020c00
 8004920:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004924:	4b9c      	ldr	r3, [pc, #624]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0e9      	beq.n	8004906 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01b      	beq.n	8004976 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800493e:	4b96      	ldr	r3, [pc, #600]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004944:	4a94      	ldr	r2, [pc, #592]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800494a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800494e:	e00a      	b.n	8004966 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004950:	f7fe fe56 	bl	8003600 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e2d3      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004966:	4b8c      	ldr	r3, [pc, #560]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800496c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0ed      	beq.n	8004950 <HAL_RCC_OscConfig+0x7ec>
 8004974:	e053      	b.n	8004a1e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004976:	4b88      	ldr	r3, [pc, #544]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800497c:	4a86      	ldr	r2, [pc, #536]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 800497e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004982:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004986:	e00a      	b.n	800499e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004988:	f7fe fe3a 	bl	8003600 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e2b7      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800499e:	4b7e      	ldr	r3, [pc, #504]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 80049a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1ed      	bne.n	8004988 <HAL_RCC_OscConfig+0x824>
 80049ac:	e037      	b.n	8004a1e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80049ae:	f7fe fe27 	bl	8003600 <HAL_GetTick>
 80049b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049b4:	e00a      	b.n	80049cc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fe fe23 	bl	8003600 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e2a0      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049cc:	4b72      	ldr	r3, [pc, #456]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 80049ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1ed      	bne.n	80049b6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80049da:	4b6f      	ldr	r3, [pc, #444]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 80049dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01a      	beq.n	8004a1e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049e8:	4b6b      	ldr	r3, [pc, #428]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 80049ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049ee:	4a6a      	ldr	r2, [pc, #424]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 80049f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049f8:	e00a      	b.n	8004a10 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fa:	f7fe fe01 	bl	8003600 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e27e      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a10:	4b61      	ldr	r3, [pc, #388]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1ed      	bne.n	80049fa <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a1e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d107      	bne.n	8004a36 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a26:	4b5c      	ldr	r3, [pc, #368]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a2c:	4a5a      	ldr	r2, [pc, #360]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004a2e:	f023 0304 	bic.w	r3, r3, #4
 8004a32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d036      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d019      	beq.n	8004a7e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004a4a:	4b53      	ldr	r3, [pc, #332]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a52      	ldr	r2, [pc, #328]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004a50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a54:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a56:	f7fe fdd3 	bl	8003600 <HAL_GetTick>
 8004a5a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a5e:	f7fe fdcf 	bl	8003600 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e24e      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a70:	4b49      	ldr	r3, [pc, #292]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCC_OscConfig+0x8fa>
 8004a7c:	e018      	b.n	8004ab0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004a7e:	4b46      	ldr	r3, [pc, #280]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a45      	ldr	r2, [pc, #276]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004a84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a88:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a8a:	f7fe fdb9 	bl	8003600 <HAL_GetTick>
 8004a8e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a92:	f7fe fdb5 	bl	8003600 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e234      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f0      	bne.n	8004a92 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d036      	beq.n	8004b2a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d019      	beq.n	8004af8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004ac4:	4b34      	ldr	r3, [pc, #208]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a33      	ldr	r2, [pc, #204]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004aca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ace:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004ad0:	f7fe fd96 	bl	8003600 <HAL_GetTick>
 8004ad4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004ad8:	f7fe fd92 	bl	8003600 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e211      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004aea:	4b2b      	ldr	r3, [pc, #172]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x974>
 8004af6:	e018      	b.n	8004b2a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004af8:	4b27      	ldr	r3, [pc, #156]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a26      	ldr	r2, [pc, #152]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b02:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b04:	f7fe fd7c 	bl	8003600 <HAL_GetTick>
 8004b08:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004b0c:	f7fe fd78 	bl	8003600 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e1f7      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d07f      	beq.n	8004c36 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d062      	beq.n	8004c04 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004b3e:	4b16      	ldr	r3, [pc, #88]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	4a15      	ldr	r2, [pc, #84]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004b44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b48:	6093      	str	r3, [r2, #8]
 8004b4a:	4b13      	ldr	r3, [pc, #76]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b56:	4910      	ldr	r1, [pc, #64]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004b64:	d309      	bcc.n	8004b7a <HAL_RCC_OscConfig+0xa16>
 8004b66:	4b0c      	ldr	r3, [pc, #48]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f023 021f 	bic.w	r2, r3, #31
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	4909      	ldr	r1, [pc, #36]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60cb      	str	r3, [r1, #12]
 8004b78:	e02a      	b.n	8004bd0 <HAL_RCC_OscConfig+0xa6c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	da0c      	bge.n	8004b9c <HAL_RCC_OscConfig+0xa38>
 8004b82:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	015b      	lsls	r3, r3, #5
 8004b90:	4901      	ldr	r1, [pc, #4]	@ (8004b98 <HAL_RCC_OscConfig+0xa34>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60cb      	str	r3, [r1, #12]
 8004b96:	e01b      	b.n	8004bd0 <HAL_RCC_OscConfig+0xa6c>
 8004b98:	46020c00 	.word	0x46020c00
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba4:	d30a      	bcc.n	8004bbc <HAL_RCC_OscConfig+0xa58>
 8004ba6:	4ba1      	ldr	r3, [pc, #644]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	029b      	lsls	r3, r3, #10
 8004bb4:	499d      	ldr	r1, [pc, #628]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60cb      	str	r3, [r1, #12]
 8004bba:	e009      	b.n	8004bd0 <HAL_RCC_OscConfig+0xa6c>
 8004bbc:	4b9b      	ldr	r3, [pc, #620]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	03db      	lsls	r3, r3, #15
 8004bca:	4998      	ldr	r1, [pc, #608]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004bd0:	4b96      	ldr	r3, [pc, #600]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a95      	ldr	r2, [pc, #596]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004bd6:	f043 0310 	orr.w	r3, r3, #16
 8004bda:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004bdc:	f7fe fd10 	bl	8003600 <HAL_GetTick>
 8004be0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004be4:	f7fe fd0c 	bl	8003600 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e18b      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004bf6:	4b8d      	ldr	r3, [pc, #564]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0xa80>
 8004c02:	e018      	b.n	8004c36 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004c04:	4b89      	ldr	r3, [pc, #548]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a88      	ldr	r2, [pc, #544]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004c0a:	f023 0310 	bic.w	r3, r3, #16
 8004c0e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004c10:	f7fe fcf6 	bl	8003600 <HAL_GetTick>
 8004c14:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004c18:	f7fe fcf2 	bl	8003600 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e171      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004c2a:	4b80      	ldr	r3, [pc, #512]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f0      	bne.n	8004c18 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 8166 	beq.w	8004f0c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c46:	4b79      	ldr	r3, [pc, #484]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b0c      	cmp	r3, #12
 8004c50:	f000 80f2 	beq.w	8004e38 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	f040 80c5 	bne.w	8004de8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004c5e:	4b73      	ldr	r3, [pc, #460]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a72      	ldr	r2, [pc, #456]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004c64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c68:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c6a:	f7fe fcc9 	bl	8003600 <HAL_GetTick>
 8004c6e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c72:	f7fe fcc5 	bl	8003600 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e144      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c84:	4b69      	ldr	r3, [pc, #420]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f0      	bne.n	8004c72 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c90:	4b66      	ldr	r3, [pc, #408]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d111      	bne.n	8004cc2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004c9e:	4b63      	ldr	r3, [pc, #396]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ca4:	4a61      	ldr	r2, [pc, #388]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004ca6:	f043 0304 	orr.w	r3, r3, #4
 8004caa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004cae:	4b5f      	ldr	r3, [pc, #380]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004cc2:	4b5b      	ldr	r3, [pc, #364]	@ (8004e30 <HAL_RCC_OscConfig+0xccc>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cce:	d102      	bne.n	8004cd6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004cd6:	4b56      	ldr	r3, [pc, #344]	@ (8004e30 <HAL_RCC_OscConfig+0xccc>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	4a55      	ldr	r2, [pc, #340]	@ (8004e30 <HAL_RCC_OscConfig+0xccc>)
 8004cdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ce0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004ce2:	4b52      	ldr	r3, [pc, #328]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cea:	f023 0303 	bic.w	r3, r3, #3
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004cf6:	3a01      	subs	r2, #1
 8004cf8:	0212      	lsls	r2, r2, #8
 8004cfa:	4311      	orrs	r1, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004d00:	430a      	orrs	r2, r1
 8004d02:	494a      	ldr	r1, [pc, #296]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d08:	4b48      	ldr	r3, [pc, #288]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004d0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d0c:	4b49      	ldr	r3, [pc, #292]	@ (8004e34 <HAL_RCC_OscConfig+0xcd0>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d14:	3a01      	subs	r2, #1
 8004d16:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004d1e:	3a01      	subs	r2, #1
 8004d20:	0252      	lsls	r2, r2, #9
 8004d22:	b292      	uxth	r2, r2
 8004d24:	4311      	orrs	r1, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d2a:	3a01      	subs	r2, #1
 8004d2c:	0412      	lsls	r2, r2, #16
 8004d2e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004d32:	4311      	orrs	r1, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004d38:	3a01      	subs	r2, #1
 8004d3a:	0612      	lsls	r2, r2, #24
 8004d3c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004d40:	430a      	orrs	r2, r1
 8004d42:	493a      	ldr	r1, [pc, #232]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004d48:	4b38      	ldr	r3, [pc, #224]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4c:	4a37      	ldr	r2, [pc, #220]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004d4e:	f023 0310 	bic.w	r3, r3, #16
 8004d52:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d58:	4a34      	ldr	r2, [pc, #208]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004d5e:	4b33      	ldr	r3, [pc, #204]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d62:	4a32      	ldr	r2, [pc, #200]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004d64:	f043 0310 	orr.w	r3, r3, #16
 8004d68:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004d6a:	4b30      	ldr	r3, [pc, #192]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6e:	f023 020c 	bic.w	r2, r3, #12
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d76:	492d      	ldr	r1, [pc, #180]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004d7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d105      	bne.n	8004d90 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004d84:	4b2a      	ldr	r3, [pc, #168]	@ (8004e30 <HAL_RCC_OscConfig+0xccc>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4a29      	ldr	r2, [pc, #164]	@ (8004e30 <HAL_RCC_OscConfig+0xccc>)
 8004d8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d8e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004d90:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d107      	bne.n	8004da8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004d98:	4b24      	ldr	r3, [pc, #144]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d9e:	4a23      	ldr	r2, [pc, #140]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004da0:	f023 0304 	bic.w	r3, r3, #4
 8004da4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004da8:	4b20      	ldr	r3, [pc, #128]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a1f      	ldr	r2, [pc, #124]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004dae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004db2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004db4:	f7fe fc24 	bl	8003600 <HAL_GetTick>
 8004db8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dbc:	f7fe fc20 	bl	8003600 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e09f      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004dce:	4b17      	ldr	r3, [pc, #92]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f0      	beq.n	8004dbc <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004dda:	4b14      	ldr	r3, [pc, #80]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dde:	4a13      	ldr	r2, [pc, #76]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004de0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004de4:	6293      	str	r3, [r2, #40]	@ 0x28
 8004de6:	e091      	b.n	8004f0c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004de8:	4b10      	ldr	r3, [pc, #64]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a0f      	ldr	r2, [pc, #60]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004dee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004df2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004df4:	f7fe fc04 	bl	8003600 <HAL_GetTick>
 8004df8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfc:	f7fe fc00 	bl	8003600 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e07f      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004e0e:	4b07      	ldr	r3, [pc, #28]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004e1a:	4b04      	ldr	r3, [pc, #16]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1e:	4a03      	ldr	r2, [pc, #12]	@ (8004e2c <HAL_RCC_OscConfig+0xcc8>)
 8004e20:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004e24:	f023 0303 	bic.w	r3, r3, #3
 8004e28:	6293      	str	r3, [r2, #40]	@ 0x28
 8004e2a:	e06f      	b.n	8004f0c <HAL_RCC_OscConfig+0xda8>
 8004e2c:	46020c00 	.word	0x46020c00
 8004e30:	46020800 	.word	0x46020800
 8004e34:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004e38:	4b37      	ldr	r3, [pc, #220]	@ (8004f18 <HAL_RCC_OscConfig+0xdb4>)
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e3e:	4b36      	ldr	r3, [pc, #216]	@ (8004f18 <HAL_RCC_OscConfig+0xdb4>)
 8004e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e42:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d039      	beq.n	8004ec0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f003 0203 	and.w	r2, r3, #3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d132      	bne.n	8004ec0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	0a1b      	lsrs	r3, r3, #8
 8004e5e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d129      	bne.n	8004ec0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d122      	bne.n	8004ec0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e84:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d11a      	bne.n	8004ec0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	0a5b      	lsrs	r3, r3, #9
 8004e8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e96:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d111      	bne.n	8004ec0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	0c1b      	lsrs	r3, r3, #16
 8004ea0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ea8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d108      	bne.n	8004ec0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	0e1b      	lsrs	r3, r3, #24
 8004eb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eba:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e024      	b.n	8004f0e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004ec4:	4b14      	ldr	r3, [pc, #80]	@ (8004f18 <HAL_RCC_OscConfig+0xdb4>)
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec8:	08db      	lsrs	r3, r3, #3
 8004eca:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d01a      	beq.n	8004f0c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004ed6:	4b10      	ldr	r3, [pc, #64]	@ (8004f18 <HAL_RCC_OscConfig+0xdb4>)
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eda:	4a0f      	ldr	r2, [pc, #60]	@ (8004f18 <HAL_RCC_OscConfig+0xdb4>)
 8004edc:	f023 0310 	bic.w	r3, r3, #16
 8004ee0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee2:	f7fe fb8d 	bl	8003600 <HAL_GetTick>
 8004ee6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004ee8:	bf00      	nop
 8004eea:	f7fe fb89 	bl	8003600 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d0f9      	beq.n	8004eea <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efa:	4a07      	ldr	r2, [pc, #28]	@ (8004f18 <HAL_RCC_OscConfig+0xdb4>)
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004f00:	4b05      	ldr	r3, [pc, #20]	@ (8004f18 <HAL_RCC_OscConfig+0xdb4>)
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	4a04      	ldr	r2, [pc, #16]	@ (8004f18 <HAL_RCC_OscConfig+0xdb4>)
 8004f06:	f043 0310 	orr.w	r3, r3, #16
 8004f0a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3738      	adds	r7, #56	@ 0x38
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	46020c00 	.word	0x46020c00

08004f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e1d9      	b.n	80052e4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f30:	4b9b      	ldr	r3, [pc, #620]	@ (80051a0 <HAL_RCC_ClockConfig+0x284>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d910      	bls.n	8004f60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3e:	4b98      	ldr	r3, [pc, #608]	@ (80051a0 <HAL_RCC_ClockConfig+0x284>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f023 020f 	bic.w	r2, r3, #15
 8004f46:	4996      	ldr	r1, [pc, #600]	@ (80051a0 <HAL_RCC_ClockConfig+0x284>)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4e:	4b94      	ldr	r3, [pc, #592]	@ (80051a0 <HAL_RCC_ClockConfig+0x284>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e1c1      	b.n	80052e4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d010      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695a      	ldr	r2, [r3, #20]
 8004f70:	4b8c      	ldr	r3, [pc, #560]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d908      	bls.n	8004f8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004f7c:	4b89      	ldr	r3, [pc, #548]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	4986      	ldr	r1, [pc, #536]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d012      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	4b81      	ldr	r3, [pc, #516]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	091b      	lsrs	r3, r3, #4
 8004fa4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d909      	bls.n	8004fc0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004fac:	4b7d      	ldr	r3, [pc, #500]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	497a      	ldr	r1, [pc, #488]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d010      	beq.n	8004fee <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	4b74      	ldr	r3, [pc, #464]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d908      	bls.n	8004fee <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004fdc:	4b71      	ldr	r3, [pc, #452]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	496e      	ldr	r1, [pc, #440]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d010      	beq.n	800501c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	4b69      	ldr	r3, [pc, #420]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	429a      	cmp	r2, r3
 8005008:	d908      	bls.n	800501c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800500a:	4b66      	ldr	r3, [pc, #408]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	f023 020f 	bic.w	r2, r3, #15
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	4963      	ldr	r1, [pc, #396]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8005018:	4313      	orrs	r3, r2
 800501a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80d2 	beq.w	80051ce <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800502a:	2300      	movs	r3, #0
 800502c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b03      	cmp	r3, #3
 8005034:	d143      	bne.n	80050be <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005036:	4b5b      	ldr	r3, [pc, #364]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8005038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d110      	bne.n	8005066 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005044:	4b57      	ldr	r3, [pc, #348]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8005046:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800504a:	4a56      	ldr	r2, [pc, #344]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 800504c:	f043 0304 	orr.w	r3, r3, #4
 8005050:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005054:	4b53      	ldr	r3, [pc, #332]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8005056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	60bb      	str	r3, [r7, #8]
 8005060:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005062:	2301      	movs	r3, #1
 8005064:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005066:	f7fe facb 	bl	8003600 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800506c:	4b4e      	ldr	r3, [pc, #312]	@ (80051a8 <HAL_RCC_ClockConfig+0x28c>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00f      	beq.n	8005098 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005078:	e008      	b.n	800508c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800507a:	f7fe fac1 	bl	8003600 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e12b      	b.n	80052e4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800508c:	4b46      	ldr	r3, [pc, #280]	@ (80051a8 <HAL_RCC_ClockConfig+0x28c>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005098:	7dfb      	ldrb	r3, [r7, #23]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d107      	bne.n	80050ae <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800509e:	4b41      	ldr	r3, [pc, #260]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 80050a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050a4:	4a3f      	ldr	r2, [pc, #252]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 80050a6:	f023 0304 	bic.w	r3, r3, #4
 80050aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80050ae:	4b3d      	ldr	r3, [pc, #244]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d121      	bne.n	80050fe <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e112      	b.n	80052e4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d107      	bne.n	80050d6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c6:	4b37      	ldr	r3, [pc, #220]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d115      	bne.n	80050fe <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e106      	b.n	80052e4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d107      	bne.n	80050ee <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80050de:	4b31      	ldr	r3, [pc, #196]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e0fa      	b.n	80052e4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050ee:	4b2d      	ldr	r3, [pc, #180]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e0f2      	b.n	80052e4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80050fe:	4b29      	ldr	r3, [pc, #164]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f023 0203 	bic.w	r2, r3, #3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	4926      	ldr	r1, [pc, #152]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 800510c:	4313      	orrs	r3, r2
 800510e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005110:	f7fe fa76 	bl	8003600 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b03      	cmp	r3, #3
 800511c:	d112      	bne.n	8005144 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800511e:	e00a      	b.n	8005136 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005120:	f7fe fa6e 	bl	8003600 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512e:	4293      	cmp	r3, r2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e0d6      	b.n	80052e4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005136:	4b1b      	ldr	r3, [pc, #108]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f003 030c 	and.w	r3, r3, #12
 800513e:	2b0c      	cmp	r3, #12
 8005140:	d1ee      	bne.n	8005120 <HAL_RCC_ClockConfig+0x204>
 8005142:	e044      	b.n	80051ce <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d112      	bne.n	8005172 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800514c:	e00a      	b.n	8005164 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800514e:	f7fe fa57 	bl	8003600 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515c:	4293      	cmp	r3, r2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e0bf      	b.n	80052e4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005164:	4b0f      	ldr	r3, [pc, #60]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	f003 030c 	and.w	r3, r3, #12
 800516c:	2b08      	cmp	r3, #8
 800516e:	d1ee      	bne.n	800514e <HAL_RCC_ClockConfig+0x232>
 8005170:	e02d      	b.n	80051ce <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d123      	bne.n	80051c2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800517a:	e00a      	b.n	8005192 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800517c:	f7fe fa40 	bl	8003600 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e0a8      	b.n	80052e4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005192:	4b04      	ldr	r3, [pc, #16]	@ (80051a4 <HAL_RCC_ClockConfig+0x288>)
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	f003 030c 	and.w	r3, r3, #12
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1ee      	bne.n	800517c <HAL_RCC_ClockConfig+0x260>
 800519e:	e016      	b.n	80051ce <HAL_RCC_ClockConfig+0x2b2>
 80051a0:	40022000 	.word	0x40022000
 80051a4:	46020c00 	.word	0x46020c00
 80051a8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ac:	f7fe fa28 	bl	8003600 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e090      	b.n	80052e4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051c2:	4b4a      	ldr	r3, [pc, #296]	@ (80052ec <HAL_RCC_ClockConfig+0x3d0>)
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f003 030c 	and.w	r3, r3, #12
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d1ee      	bne.n	80051ac <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d010      	beq.n	80051fc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	4b43      	ldr	r3, [pc, #268]	@ (80052ec <HAL_RCC_ClockConfig+0x3d0>)
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d208      	bcs.n	80051fc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80051ea:	4b40      	ldr	r3, [pc, #256]	@ (80052ec <HAL_RCC_ClockConfig+0x3d0>)
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f023 020f 	bic.w	r2, r3, #15
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	493d      	ldr	r1, [pc, #244]	@ (80052ec <HAL_RCC_ClockConfig+0x3d0>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051fc:	4b3c      	ldr	r3, [pc, #240]	@ (80052f0 <HAL_RCC_ClockConfig+0x3d4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 030f 	and.w	r3, r3, #15
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d210      	bcs.n	800522c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520a:	4b39      	ldr	r3, [pc, #228]	@ (80052f0 <HAL_RCC_ClockConfig+0x3d4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 020f 	bic.w	r2, r3, #15
 8005212:	4937      	ldr	r1, [pc, #220]	@ (80052f0 <HAL_RCC_ClockConfig+0x3d4>)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	4313      	orrs	r3, r2
 8005218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800521a:	4b35      	ldr	r3, [pc, #212]	@ (80052f0 <HAL_RCC_ClockConfig+0x3d4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d001      	beq.n	800522c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e05b      	b.n	80052e4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d010      	beq.n	800525a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	4b2b      	ldr	r3, [pc, #172]	@ (80052ec <HAL_RCC_ClockConfig+0x3d0>)
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005244:	429a      	cmp	r2, r3
 8005246:	d208      	bcs.n	800525a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005248:	4b28      	ldr	r3, [pc, #160]	@ (80052ec <HAL_RCC_ClockConfig+0x3d0>)
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4925      	ldr	r1, [pc, #148]	@ (80052ec <HAL_RCC_ClockConfig+0x3d0>)
 8005256:	4313      	orrs	r3, r2
 8005258:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d012      	beq.n	800528c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	4b20      	ldr	r3, [pc, #128]	@ (80052ec <HAL_RCC_ClockConfig+0x3d0>)
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	091b      	lsrs	r3, r3, #4
 8005270:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005274:	429a      	cmp	r2, r3
 8005276:	d209      	bcs.n	800528c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005278:	4b1c      	ldr	r3, [pc, #112]	@ (80052ec <HAL_RCC_ClockConfig+0x3d0>)
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	4919      	ldr	r1, [pc, #100]	@ (80052ec <HAL_RCC_ClockConfig+0x3d0>)
 8005288:	4313      	orrs	r3, r2
 800528a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b00      	cmp	r3, #0
 8005296:	d010      	beq.n	80052ba <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	695a      	ldr	r2, [r3, #20]
 800529c:	4b13      	ldr	r3, [pc, #76]	@ (80052ec <HAL_RCC_ClockConfig+0x3d0>)
 800529e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d208      	bcs.n	80052ba <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80052a8:	4b10      	ldr	r3, [pc, #64]	@ (80052ec <HAL_RCC_ClockConfig+0x3d0>)
 80052aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	490d      	ldr	r1, [pc, #52]	@ (80052ec <HAL_RCC_ClockConfig+0x3d0>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80052ba:	f000 f821 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 80052be:	4602      	mov	r2, r0
 80052c0:	4b0a      	ldr	r3, [pc, #40]	@ (80052ec <HAL_RCC_ClockConfig+0x3d0>)
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	f003 030f 	and.w	r3, r3, #15
 80052c8:	490a      	ldr	r1, [pc, #40]	@ (80052f4 <HAL_RCC_ClockConfig+0x3d8>)
 80052ca:	5ccb      	ldrb	r3, [r1, r3]
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
 80052d0:	4a09      	ldr	r2, [pc, #36]	@ (80052f8 <HAL_RCC_ClockConfig+0x3dc>)
 80052d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052d4:	4b09      	ldr	r3, [pc, #36]	@ (80052fc <HAL_RCC_ClockConfig+0x3e0>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fe f907 	bl	80034ec <HAL_InitTick>
 80052de:	4603      	mov	r3, r0
 80052e0:	73fb      	strb	r3, [r7, #15]

  return status;
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	46020c00 	.word	0x46020c00
 80052f0:	40022000 	.word	0x40022000
 80052f4:	0800ecd8 	.word	0x0800ecd8
 80052f8:	2000002c 	.word	0x2000002c
 80052fc:	2000004c 	.word	0x2000004c

08005300 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005300:	b480      	push	{r7}
 8005302:	b08b      	sub	sp, #44	@ 0x2c
 8005304:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800530e:	4b78      	ldr	r3, [pc, #480]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f003 030c 	and.w	r3, r3, #12
 8005316:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005318:	4b75      	ldr	r3, [pc, #468]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800531a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <HAL_RCC_GetSysClockFreq+0x34>
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	2b0c      	cmp	r3, #12
 800532c:	d121      	bne.n	8005372 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d11e      	bne.n	8005372 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005334:	4b6e      	ldr	r3, [pc, #440]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d107      	bne.n	8005350 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005340:	4b6b      	ldr	r3, [pc, #428]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005342:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005346:	0b1b      	lsrs	r3, r3, #12
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	627b      	str	r3, [r7, #36]	@ 0x24
 800534e:	e005      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005350:	4b67      	ldr	r3, [pc, #412]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	0f1b      	lsrs	r3, r3, #28
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800535c:	4a65      	ldr	r2, [pc, #404]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005364:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d110      	bne.n	800538e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005370:	e00d      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005372:	4b5f      	ldr	r3, [pc, #380]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f003 030c 	and.w	r3, r3, #12
 800537a:	2b04      	cmp	r3, #4
 800537c:	d102      	bne.n	8005384 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800537e:	4b5e      	ldr	r3, [pc, #376]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005380:	623b      	str	r3, [r7, #32]
 8005382:	e004      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b08      	cmp	r3, #8
 8005388:	d101      	bne.n	800538e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800538a:	4b5c      	ldr	r3, [pc, #368]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800538c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	2b0c      	cmp	r3, #12
 8005392:	f040 80a5 	bne.w	80054e0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005396:	4b56      	ldr	r3, [pc, #344]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80053a0:	4b53      	ldr	r3, [pc, #332]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a4:	0a1b      	lsrs	r3, r3, #8
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	3301      	adds	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80053ae:	4b50      	ldr	r3, [pc, #320]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b2:	091b      	lsrs	r3, r3, #4
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80053ba:	4b4d      	ldr	r3, [pc, #308]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053be:	08db      	lsrs	r3, r3, #3
 80053c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	fb02 f303 	mul.w	r3, r2, r3
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d003      	beq.n	80053e4 <HAL_RCC_GetSysClockFreq+0xe4>
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d022      	beq.n	8005428 <HAL_RCC_GetSysClockFreq+0x128>
 80053e2:	e043      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ee:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8005500 <HAL_RCC_GetSysClockFreq+0x200>
 80053f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f6:	4b3e      	ldr	r3, [pc, #248]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005406:	ed97 6a01 	vldr	s12, [r7, #4]
 800540a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005504 <HAL_RCC_GetSysClockFreq+0x204>
 800540e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005412:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800541a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800541e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005426:	e046      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005432:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8005508 <HAL_RCC_GetSysClockFreq+0x208>
 8005436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543a:	4b2d      	ldr	r3, [pc, #180]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800543c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800543e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800544a:	ed97 6a01 	vldr	s12, [r7, #4]
 800544e:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005504 <HAL_RCC_GetSysClockFreq+0x204>
 8005452:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005456:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800545a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800545e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800546a:	e024      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800546c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	ee07 3a90 	vmov	s15, r3
 800547c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005484:	4b1a      	ldr	r3, [pc, #104]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548c:	ee07 3a90 	vmov	s15, r3
 8005490:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005494:	ed97 6a01 	vldr	s12, [r7, #4]
 8005498:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8005504 <HAL_RCC_GetSysClockFreq+0x204>
 800549c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80054a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054b4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80054b6:	4b0e      	ldr	r3, [pc, #56]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80054b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ba:	0e1b      	lsrs	r3, r3, #24
 80054bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054c0:	3301      	adds	r3, #1
 80054c2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80054d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054da:	ee17 3a90 	vmov	r3, s15
 80054de:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80054e0:	6a3b      	ldr	r3, [r7, #32]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	372c      	adds	r7, #44	@ 0x2c
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	46020c00 	.word	0x46020c00
 80054f4:	0800ecf0 	.word	0x0800ecf0
 80054f8:	00f42400 	.word	0x00f42400
 80054fc:	007a1200 	.word	0x007a1200
 8005500:	4b742400 	.word	0x4b742400
 8005504:	46000000 	.word	0x46000000
 8005508:	4af42400 	.word	0x4af42400

0800550c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005510:	f7ff fef6 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 8005514:	4602      	mov	r2, r0
 8005516:	4b07      	ldr	r3, [pc, #28]	@ (8005534 <HAL_RCC_GetHCLKFreq+0x28>)
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	4906      	ldr	r1, [pc, #24]	@ (8005538 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005520:	5ccb      	ldrb	r3, [r1, r3]
 8005522:	fa22 f303 	lsr.w	r3, r2, r3
 8005526:	4a05      	ldr	r2, [pc, #20]	@ (800553c <HAL_RCC_GetHCLKFreq+0x30>)
 8005528:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800552a:	4b04      	ldr	r3, [pc, #16]	@ (800553c <HAL_RCC_GetHCLKFreq+0x30>)
 800552c:	681b      	ldr	r3, [r3, #0]
}
 800552e:	4618      	mov	r0, r3
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	46020c00 	.word	0x46020c00
 8005538:	0800ecd8 	.word	0x0800ecd8
 800553c:	2000002c 	.word	0x2000002c

08005540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005544:	f7ff ffe2 	bl	800550c <HAL_RCC_GetHCLKFreq>
 8005548:	4602      	mov	r2, r0
 800554a:	4b05      	ldr	r3, [pc, #20]	@ (8005560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	091b      	lsrs	r3, r3, #4
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	4903      	ldr	r1, [pc, #12]	@ (8005564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005556:	5ccb      	ldrb	r3, [r1, r3]
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800555c:	4618      	mov	r0, r3
 800555e:	bd80      	pop	{r7, pc}
 8005560:	46020c00 	.word	0x46020c00
 8005564:	0800ece8 	.word	0x0800ece8

08005568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800556c:	f7ff ffce 	bl	800550c <HAL_RCC_GetHCLKFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b05      	ldr	r3, [pc, #20]	@ (8005588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	0a1b      	lsrs	r3, r3, #8
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4903      	ldr	r1, [pc, #12]	@ (800558c <HAL_RCC_GetPCLK2Freq+0x24>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	46020c00 	.word	0x46020c00
 800558c:	0800ece8 	.word	0x0800ece8

08005590 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005594:	f7ff ffba 	bl	800550c <HAL_RCC_GetHCLKFreq>
 8005598:	4602      	mov	r2, r0
 800559a:	4b05      	ldr	r3, [pc, #20]	@ (80055b0 <HAL_RCC_GetPCLK3Freq+0x20>)
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	091b      	lsrs	r3, r3, #4
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	4903      	ldr	r1, [pc, #12]	@ (80055b4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80055a6:	5ccb      	ldrb	r3, [r1, r3]
 80055a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	46020c00 	.word	0x46020c00
 80055b4:	0800ece8 	.word	0x0800ece8

080055b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055c0:	4b3e      	ldr	r3, [pc, #248]	@ (80056bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80055c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055ce:	f7fe fd4b 	bl	8004068 <HAL_PWREx_GetVoltageRange>
 80055d2:	6178      	str	r0, [r7, #20]
 80055d4:	e019      	b.n	800560a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055d6:	4b39      	ldr	r3, [pc, #228]	@ (80056bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80055d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055dc:	4a37      	ldr	r2, [pc, #220]	@ (80056bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80055de:	f043 0304 	orr.w	r3, r3, #4
 80055e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80055e6:	4b35      	ldr	r3, [pc, #212]	@ (80056bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80055e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055f4:	f7fe fd38 	bl	8004068 <HAL_PWREx_GetVoltageRange>
 80055f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055fa:	4b30      	ldr	r3, [pc, #192]	@ (80056bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80055fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005600:	4a2e      	ldr	r2, [pc, #184]	@ (80056bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005602:	f023 0304 	bic.w	r3, r3, #4
 8005606:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005610:	d003      	beq.n	800561a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005618:	d109      	bne.n	800562e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005620:	d202      	bcs.n	8005628 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005622:	2301      	movs	r3, #1
 8005624:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005626:	e033      	b.n	8005690 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800562c:	e030      	b.n	8005690 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005634:	d208      	bcs.n	8005648 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800563c:	d102      	bne.n	8005644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800563e:	2303      	movs	r3, #3
 8005640:	613b      	str	r3, [r7, #16]
 8005642:	e025      	b.n	8005690 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e035      	b.n	80056b4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800564e:	d90f      	bls.n	8005670 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d109      	bne.n	800566a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800565c:	d902      	bls.n	8005664 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800565e:	2300      	movs	r3, #0
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	e015      	b.n	8005690 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005664:	2301      	movs	r3, #1
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	e012      	b.n	8005690 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800566a:	2300      	movs	r3, #0
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	e00f      	b.n	8005690 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005676:	d109      	bne.n	800568c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800567e:	d102      	bne.n	8005686 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005680:	2301      	movs	r3, #1
 8005682:	613b      	str	r3, [r7, #16]
 8005684:	e004      	b.n	8005690 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005686:	2302      	movs	r3, #2
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	e001      	b.n	8005690 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800568c:	2301      	movs	r3, #1
 800568e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005690:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f023 020f 	bic.w	r2, r3, #15
 8005698:	4909      	ldr	r1, [pc, #36]	@ (80056c0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80056a0:	4b07      	ldr	r3, [pc, #28]	@ (80056c0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d001      	beq.n	80056b2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	46020c00 	.word	0x46020c00
 80056c0:	40022000 	.word	0x40022000

080056c4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80056c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056c8:	b0c4      	sub	sp, #272	@ 0x110
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056d6:	2300      	movs	r3, #0
 80056d8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f002 0401 	and.w	r4, r2, #1
 80056e8:	2500      	movs	r5, #0
 80056ea:	ea54 0305 	orrs.w	r3, r4, r5
 80056ee:	d00b      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80056f0:	4bd5      	ldr	r3, [pc, #852]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80056f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056f6:	f023 0103 	bic.w	r1, r3, #3
 80056fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005700:	4ad1      	ldr	r2, [pc, #836]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005702:	430b      	orrs	r3, r1
 8005704:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f002 0802 	and.w	r8, r2, #2
 8005714:	f04f 0900 	mov.w	r9, #0
 8005718:	ea58 0309 	orrs.w	r3, r8, r9
 800571c:	d00b      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800571e:	4bca      	ldr	r3, [pc, #808]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005724:	f023 010c 	bic.w	r1, r3, #12
 8005728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800572c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572e:	4ac6      	ldr	r2, [pc, #792]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005730:	430b      	orrs	r3, r1
 8005732:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f002 0a04 	and.w	sl, r2, #4
 8005742:	f04f 0b00 	mov.w	fp, #0
 8005746:	ea5a 030b 	orrs.w	r3, sl, fp
 800574a:	d00b      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800574c:	4bbe      	ldr	r3, [pc, #760]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800574e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005752:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800575a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800575c:	4aba      	ldr	r2, [pc, #744]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800575e:	430b      	orrs	r3, r1
 8005760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	f002 0308 	and.w	r3, r2, #8
 8005770:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005774:	2300      	movs	r3, #0
 8005776:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800577a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800577e:	460b      	mov	r3, r1
 8005780:	4313      	orrs	r3, r2
 8005782:	d00b      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005784:	4bb0      	ldr	r3, [pc, #704]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800578a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800578e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005794:	4aac      	ldr	r2, [pc, #688]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005796:	430b      	orrs	r3, r1
 8005798:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800579c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	f002 0310 	and.w	r3, r2, #16
 80057a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057ac:	2300      	movs	r3, #0
 80057ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057b2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80057b6:	460b      	mov	r3, r1
 80057b8:	4313      	orrs	r3, r2
 80057ba:	d00b      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80057bc:	4ba2      	ldr	r3, [pc, #648]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80057be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80057c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057cc:	4a9e      	ldr	r2, [pc, #632]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80057ce:	430b      	orrs	r3, r1
 80057d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80057d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80057e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057e4:	2300      	movs	r3, #0
 80057e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057ea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4313      	orrs	r3, r2
 80057f2:	d00b      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80057f4:	4b94      	ldr	r3, [pc, #592]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80057f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80057fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005804:	4a90      	ldr	r2, [pc, #576]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005806:	430b      	orrs	r3, r1
 8005808:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800580c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005814:	f002 0320 	and.w	r3, r2, #32
 8005818:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800581c:	2300      	movs	r3, #0
 800581e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005822:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005826:	460b      	mov	r3, r1
 8005828:	4313      	orrs	r3, r2
 800582a:	d00b      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800582c:	4b86      	ldr	r3, [pc, #536]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800582e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005832:	f023 0107 	bic.w	r1, r3, #7
 8005836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800583a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800583c:	4a82      	ldr	r2, [pc, #520]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800583e:	430b      	orrs	r3, r1
 8005840:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005850:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005854:	2300      	movs	r3, #0
 8005856:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800585a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800585e:	460b      	mov	r3, r1
 8005860:	4313      	orrs	r3, r2
 8005862:	d00b      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005864:	4b78      	ldr	r3, [pc, #480]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800586a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800586e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005874:	4a74      	ldr	r2, [pc, #464]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005876:	430b      	orrs	r3, r1
 8005878:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800587c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005888:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800588c:	2300      	movs	r3, #0
 800588e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005892:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005896:	460b      	mov	r3, r1
 8005898:	4313      	orrs	r3, r2
 800589a:	d00b      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800589c:	4b6a      	ldr	r3, [pc, #424]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800589e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ac:	4a66      	ldr	r2, [pc, #408]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80058ae:	430b      	orrs	r3, r1
 80058b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80058c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058c4:	2300      	movs	r3, #0
 80058c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4313      	orrs	r3, r2
 80058d2:	d00b      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80058d4:	4b5c      	ldr	r3, [pc, #368]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80058d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80058de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058e4:	4a58      	ldr	r2, [pc, #352]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80058e6:	430b      	orrs	r3, r1
 80058e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80058f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058fc:	2300      	movs	r3, #0
 80058fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005902:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005906:	460b      	mov	r3, r1
 8005908:	4313      	orrs	r3, r2
 800590a:	d00b      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800590c:	4b4e      	ldr	r3, [pc, #312]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800590e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005912:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800591a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800591c:	4a4a      	ldr	r2, [pc, #296]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800591e:	430b      	orrs	r3, r1
 8005920:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8005924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005930:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005934:	2300      	movs	r3, #0
 8005936:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800593a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800593e:	460b      	mov	r3, r1
 8005940:	4313      	orrs	r3, r2
 8005942:	d00b      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8005944:	4b40      	ldr	r3, [pc, #256]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005946:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800594a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800594e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005952:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005954:	4a3c      	ldr	r2, [pc, #240]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005956:	430b      	orrs	r3, r1
 8005958:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800595c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005964:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005968:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800596c:	2300      	movs	r3, #0
 800596e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005972:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005976:	460b      	mov	r3, r1
 8005978:	4313      	orrs	r3, r2
 800597a:	d00c      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800597c:	4b32      	ldr	r3, [pc, #200]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800597e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005982:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800598a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800598e:	4a2e      	ldr	r2, [pc, #184]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005990:	430b      	orrs	r3, r1
 8005992:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80059a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059a6:	2300      	movs	r3, #0
 80059a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80059ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4313      	orrs	r3, r2
 80059b4:	d00c      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80059b6:	4b24      	ldr	r3, [pc, #144]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80059b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059bc:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80059c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80059ca:	430b      	orrs	r3, r1
 80059cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80059dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059e0:	2300      	movs	r3, #0
 80059e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80059ea:	460b      	mov	r3, r1
 80059ec:	4313      	orrs	r3, r2
 80059ee:	d00c      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80059f0:	4b15      	ldr	r3, [pc, #84]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80059f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059f6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80059fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a02:	4a11      	ldr	r2, [pc, #68]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005a04:	430b      	orrs	r3, r1
 8005a06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a12:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005a16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a20:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005a24:	460b      	mov	r3, r1
 8005a26:	4313      	orrs	r3, r2
 8005a28:	d010      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005a2a:	4b07      	ldr	r3, [pc, #28]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a30:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a3c:	4a02      	ldr	r2, [pc, #8]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005a44:	e002      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8005a46:	bf00      	nop
 8005a48:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005a58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a62:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005a66:	460b      	mov	r3, r1
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	d04c      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a74:	2b80      	cmp	r3, #128	@ 0x80
 8005a76:	d02d      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005a78:	2b80      	cmp	r3, #128	@ 0x80
 8005a7a:	d827      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005a7c:	2b60      	cmp	r3, #96	@ 0x60
 8005a7e:	d02b      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005a80:	2b60      	cmp	r3, #96	@ 0x60
 8005a82:	d823      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005a84:	2b40      	cmp	r3, #64	@ 0x40
 8005a86:	d006      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8005a88:	2b40      	cmp	r3, #64	@ 0x40
 8005a8a:	d81f      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d009      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d011      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005a94:	e01a      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a96:	4bbe      	ldr	r3, [pc, #760]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9a:	4abd      	ldr	r2, [pc, #756]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aa0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005aa2:	e01a      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f002 fc3c 	bl	8008328 <RCCEx_PLL2_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ab6:	e010      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005abc:	332c      	adds	r3, #44	@ 0x2c
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f002 fcca 	bl	8008458 <RCCEx_PLL3_Config>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005aca:	e006      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005ad2:	e002      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8005ad4:	bf00      	nop
 8005ad6:	e000      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8005ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ada:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10d      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005ae2:	4bab      	ldr	r3, [pc, #684]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ae8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005af0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005af4:	4aa6      	ldr	r2, [pc, #664]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005af6:	430b      	orrs	r3, r1
 8005af8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005afc:	e003      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afe:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005b02:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005b12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b16:	2300      	movs	r3, #0
 8005b18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b1c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005b20:	460b      	mov	r3, r1
 8005b22:	4313      	orrs	r3, r2
 8005b24:	d053      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b32:	d033      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8005b34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b38:	d82c      	bhi.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005b3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b3e:	d02f      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8005b40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b44:	d826      	bhi.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005b46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b4a:	d008      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8005b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b50:	d820      	bhi.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b5a:	d011      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005b5c:	e01a      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b5e:	4b8c      	ldr	r3, [pc, #560]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b62:	4a8b      	ldr	r2, [pc, #556]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b68:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005b6a:	e01a      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b70:	3308      	adds	r3, #8
 8005b72:	4618      	mov	r0, r3
 8005b74:	f002 fbd8 	bl	8008328 <RCCEx_PLL2_Config>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005b7e:	e010      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b84:	332c      	adds	r3, #44	@ 0x2c
 8005b86:	4618      	mov	r0, r3
 8005b88:	f002 fc66 	bl	8008458 <RCCEx_PLL3_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005b92:	e006      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005b9a:	e002      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005b9c:	bf00      	nop
 8005b9e:	e000      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10d      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005baa:	4b79      	ldr	r3, [pc, #484]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005bb0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005bbc:	4a74      	ldr	r2, [pc, #464]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005bc4:	e003      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005bca:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005bda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bdc:	2300      	movs	r3, #0
 8005bde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005be0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005be4:	460b      	mov	r3, r1
 8005be6:	4313      	orrs	r3, r2
 8005be8:	d046      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bf2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005bf6:	d028      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005bf8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005bfc:	d821      	bhi.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005bfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c02:	d022      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005c04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c08:	d81b      	bhi.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005c0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c0e:	d01c      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005c10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c14:	d815      	bhi.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c1a:	d008      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8005c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c20:	d80f      	bhi.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d011      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c2a:	d00e      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005c2c:	e009      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c32:	3308      	adds	r3, #8
 8005c34:	4618      	mov	r0, r3
 8005c36:	f002 fb77 	bl	8008328 <RCCEx_PLL2_Config>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005c40:	e004      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005c48:	e000      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8005c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10d      	bne.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005c54:	4b4e      	ldr	r3, [pc, #312]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c5a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c66:	4a4a      	ldr	r2, [pc, #296]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005c6e:	e003      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c70:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005c74:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005c84:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c86:	2300      	movs	r3, #0
 8005c88:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c8a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4313      	orrs	r3, r2
 8005c92:	d03f      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d81e      	bhi.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8005ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005ce7 	.word	0x08005ce7
 8005cac:	08005cbd 	.word	0x08005cbd
 8005cb0:	08005ccb 	.word	0x08005ccb
 8005cb4:	08005ce7 	.word	0x08005ce7
 8005cb8:	08005ce7 	.word	0x08005ce7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005cbc:	4b34      	ldr	r3, [pc, #208]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc0:	4a33      	ldr	r2, [pc, #204]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cc6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005cc8:	e00e      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cce:	332c      	adds	r3, #44	@ 0x2c
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f002 fbc1 	bl	8008458 <RCCEx_PLL3_Config>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005cdc:	e004      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005ce4:	e000      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8005ce6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005ce8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10d      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005cf0:	4b27      	ldr	r3, [pc, #156]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cf2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cf6:	f023 0107 	bic.w	r1, r3, #7
 8005cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d02:	4a23      	ldr	r2, [pc, #140]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d04:	430b      	orrs	r3, r1
 8005d06:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005d0a:	e003      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005d10:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005d20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d22:	2300      	movs	r3, #0
 8005d24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d26:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	d04c      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d3c:	d02a      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8005d3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d42:	d821      	bhi.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005d44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d48:	d026      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8005d4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d4e:	d81b      	bhi.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005d50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d54:	d00e      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005d56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d5a:	d815      	bhi.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01d      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8005d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d64:	d110      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d66:	4b0a      	ldr	r3, [pc, #40]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6a:	4a09      	ldr	r2, [pc, #36]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d70:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005d72:	e014      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d78:	332c      	adds	r3, #44	@ 0x2c
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f002 fb6c 	bl	8008458 <RCCEx_PLL3_Config>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005d86:	e00a      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005d8e:	e006      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8005d90:	46020c00 	.word	0x46020c00
        break;
 8005d94:	bf00      	nop
 8005d96:	e002      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8005d98:	bf00      	nop
 8005d9a:	e000      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8005d9c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005d9e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10d      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005da6:	4baf      	ldr	r3, [pc, #700]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005dac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005db8:	4aaa      	ldr	r2, [pc, #680]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005dba:	430b      	orrs	r3, r1
 8005dbc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005dc0:	e003      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005dc6:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005dd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dd8:	2300      	movs	r3, #0
 8005dda:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ddc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005de0:	460b      	mov	r3, r1
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f000 80b5 	beq.w	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005de8:	2300      	movs	r3, #0
 8005dea:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dee:	4b9d      	ldr	r3, [pc, #628]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d113      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dfc:	4b99      	ldr	r3, [pc, #612]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e02:	4a98      	ldr	r2, [pc, #608]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e04:	f043 0304 	orr.w	r3, r3, #4
 8005e08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005e0c:	4b95      	ldr	r3, [pc, #596]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005e1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005e24:	4b90      	ldr	r3, [pc, #576]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e28:	4a8f      	ldr	r2, [pc, #572]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005e2a:	f043 0301 	orr.w	r3, r3, #1
 8005e2e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e30:	f7fd fbe6 	bl	8003600 <HAL_GetTick>
 8005e34:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005e38:	e00b      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e3a:	f7fd fbe1 	bl	8003600 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d903      	bls.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005e50:	e005      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005e52:	4b85      	ldr	r3, [pc, #532]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0ed      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8005e5e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d165      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e66:	4b7f      	ldr	r3, [pc, #508]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e70:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d023      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8005e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e80:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d01b      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e8c:	4b75      	ldr	r3, [pc, #468]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e96:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e9a:	4b72      	ldr	r3, [pc, #456]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ea0:	4a70      	ldr	r2, [pc, #448]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005eaa:	4b6e      	ldr	r3, [pc, #440]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005eb0:	4a6c      	ldr	r2, [pc, #432]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005eba:	4a6a      	ldr	r2, [pc, #424]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ec0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d019      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed0:	f7fd fb96 	bl	8003600 <HAL_GetTick>
 8005ed4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ed8:	e00d      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eda:	f7fd fb91 	bl	8003600 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee4:	1ad2      	subs	r2, r2, r3
 8005ee6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d903      	bls.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8005ef4:	e006      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0ea      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8005f04:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10d      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005f0c:	4b55      	ldr	r3, [pc, #340]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f1a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005f1e:	4a51      	ldr	r2, [pc, #324]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005f20:	430b      	orrs	r3, r1
 8005f22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005f26:	e008      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f28:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005f2c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8005f30:	e003      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f32:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005f36:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f3a:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d107      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f42:	4b48      	ldr	r3, [pc, #288]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f48:	4a46      	ldr	r2, [pc, #280]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005f4a:	f023 0304 	bic.w	r3, r3, #4
 8005f4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005f5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f60:	2300      	movs	r3, #0
 8005f62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f64:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	d042      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f76:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005f7a:	d022      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8005f7c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005f80:	d81b      	bhi.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8005f82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f86:	d011      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8005f88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f8c:	d815      	bhi.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d019      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8005f92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f96:	d110      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f002 f9c2 	bl	8008328 <RCCEx_PLL2_Config>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005faa:	e00d      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fac:	4b2d      	ldr	r3, [pc, #180]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fb6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005fb8:	e006      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005fc0:	e002      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005fc2:	bf00      	nop
 8005fc4:	e000      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005fc6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005fc8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10d      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005fd0:	4b24      	ldr	r3, [pc, #144]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fd6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005fe2:	4a20      	ldr	r2, [pc, #128]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005fea:	e003      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fec:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005ff0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006000:	653b      	str	r3, [r7, #80]	@ 0x50
 8006002:	2300      	movs	r3, #0
 8006004:	657b      	str	r3, [r7, #84]	@ 0x54
 8006006:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800600a:	460b      	mov	r3, r1
 800600c:	4313      	orrs	r3, r2
 800600e:	d031      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006014:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800601c:	d00b      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800601e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006022:	d804      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800602c:	d007      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006034:	e004      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8006036:	bf00      	nop
 8006038:	e002      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800603a:	bf00      	nop
 800603c:	e000      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800603e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006040:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006044:	2b00      	cmp	r3, #0
 8006046:	d111      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006048:	4b06      	ldr	r3, [pc, #24]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800604a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800604e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006056:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800605a:	4a02      	ldr	r2, [pc, #8]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800605c:	430b      	orrs	r3, r1
 800605e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006062:	e007      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8006064:	46020c00 	.word	0x46020c00
 8006068:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006070:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006080:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006082:	2300      	movs	r3, #0
 8006084:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006086:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800608a:	460b      	mov	r3, r1
 800608c:	4313      	orrs	r3, r2
 800608e:	d00c      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006090:	4bb2      	ldr	r3, [pc, #712]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006092:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006096:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800609a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800609e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80060a2:	4aae      	ldr	r2, [pc, #696]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80060a4:	430b      	orrs	r3, r1
 80060a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80060aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80060b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80060b8:	2300      	movs	r3, #0
 80060ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80060bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80060c0:	460b      	mov	r3, r1
 80060c2:	4313      	orrs	r3, r2
 80060c4:	d019      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80060c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060d2:	d105      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80060d4:	4ba1      	ldr	r3, [pc, #644]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80060d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d8:	4aa0      	ldr	r2, [pc, #640]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80060da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060de:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80060e0:	4b9e      	ldr	r3, [pc, #632]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80060e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060e6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80060ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060f2:	4a9a      	ldr	r2, [pc, #616]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80060f4:	430b      	orrs	r3, r1
 80060f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80060fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006102:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006106:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006108:	2300      	movs	r3, #0
 800610a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800610c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006110:	460b      	mov	r3, r1
 8006112:	4313      	orrs	r3, r2
 8006114:	d00c      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006116:	4b91      	ldr	r3, [pc, #580]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800611c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006124:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006128:	4a8c      	ldr	r2, [pc, #560]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800612a:	430b      	orrs	r3, r1
 800612c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800613c:	633b      	str	r3, [r7, #48]	@ 0x30
 800613e:	2300      	movs	r3, #0
 8006140:	637b      	str	r3, [r7, #52]	@ 0x34
 8006142:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006146:	460b      	mov	r3, r1
 8006148:	4313      	orrs	r3, r2
 800614a:	d00c      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800614c:	4b83      	ldr	r3, [pc, #524]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800614e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006152:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800615a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800615e:	4a7f      	ldr	r2, [pc, #508]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006160:	430b      	orrs	r3, r1
 8006162:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006172:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006174:	2300      	movs	r3, #0
 8006176:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006178:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800617c:	460b      	mov	r3, r1
 800617e:	4313      	orrs	r3, r2
 8006180:	d00c      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006182:	4b76      	ldr	r3, [pc, #472]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006188:	f023 0218 	bic.w	r2, r3, #24
 800618c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006190:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006194:	4971      	ldr	r1, [pc, #452]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800619c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80061a8:	623b      	str	r3, [r7, #32]
 80061aa:	2300      	movs	r3, #0
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80061b2:	460b      	mov	r3, r1
 80061b4:	4313      	orrs	r3, r2
 80061b6:	d032      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80061b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80061c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061c4:	d105      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061c6:	4b65      	ldr	r3, [pc, #404]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80061c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ca:	4a64      	ldr	r2, [pc, #400]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80061cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061d0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80061d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80061da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061de:	d108      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061e4:	3308      	adds	r3, #8
 80061e6:	4618      	mov	r0, r3
 80061e8:	f002 f89e 	bl	8008328 <RCCEx_PLL2_Config>
 80061ec:	4603      	mov	r3, r0
 80061ee:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 80061f2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10d      	bne.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80061fa:	4b58      	ldr	r3, [pc, #352]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80061fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006200:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006208:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800620c:	4953      	ldr	r1, [pc, #332]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006214:	e003      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006216:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800621a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800621e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006226:	2100      	movs	r1, #0
 8006228:	61b9      	str	r1, [r7, #24]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	61fb      	str	r3, [r7, #28]
 8006230:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006234:	460b      	mov	r3, r1
 8006236:	4313      	orrs	r3, r2
 8006238:	d04a      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800623a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800623e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006242:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006246:	d01e      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8006248:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800624c:	d825      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800624e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006252:	d00e      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8006254:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006258:	d81f      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d021      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800625e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006262:	d11a      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006264:	4b3d      	ldr	r3, [pc, #244]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006268:	4a3c      	ldr	r2, [pc, #240]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800626a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800626e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8006270:	e018      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006276:	3308      	adds	r3, #8
 8006278:	4618      	mov	r0, r3
 800627a:	f002 f855 	bl	8008328 <RCCEx_PLL2_Config>
 800627e:	4603      	mov	r3, r0
 8006280:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8006284:	e00e      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800628a:	332c      	adds	r3, #44	@ 0x2c
 800628c:	4618      	mov	r0, r3
 800628e:	f002 f8e3 	bl	8008458 <RCCEx_PLL3_Config>
 8006292:	4603      	mov	r3, r0
 8006294:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8006298:	e004      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80062a0:	e000      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 80062a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10d      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80062ac:	4b2b      	ldr	r3, [pc, #172]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80062ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80062b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80062be:	4927      	ldr	r1, [pc, #156]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80062c6:	e003      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80062cc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80062d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	2300      	movs	r3, #0
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80062e6:	460b      	mov	r3, r1
 80062e8:	4313      	orrs	r3, r2
 80062ea:	d03d      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80062ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062f8:	d00e      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80062fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062fe:	d815      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006300:	2b00      	cmp	r3, #0
 8006302:	d017      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006308:	d110      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800630a:	4b14      	ldr	r3, [pc, #80]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800630c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630e:	4a13      	ldr	r2, [pc, #76]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006314:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006316:	e00e      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800631c:	3308      	adds	r3, #8
 800631e:	4618      	mov	r0, r3
 8006320:	f002 f802 	bl	8008328 <RCCEx_PLL2_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800632a:	e004      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006332:	e000      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8006334:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006336:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800633a:	2b00      	cmp	r3, #0
 800633c:	d110      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800633e:	4b07      	ldr	r3, [pc, #28]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006344:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800634c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006350:	4902      	ldr	r1, [pc, #8]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006358:	e006      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 800635a:	bf00      	nop
 800635c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006360:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006364:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006374:	60bb      	str	r3, [r7, #8]
 8006376:	2300      	movs	r3, #0
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800637e:	460b      	mov	r3, r1
 8006380:	4313      	orrs	r3, r2
 8006382:	d00c      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006384:	4b2c      	ldr	r3, [pc, #176]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006386:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800638a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800638e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006392:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006396:	4928      	ldr	r1, [pc, #160]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800639e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	2100      	movs	r1, #0
 80063a8:	6039      	str	r1, [r7, #0]
 80063aa:	f003 0308 	and.w	r3, r3, #8
 80063ae:	607b      	str	r3, [r7, #4]
 80063b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80063b4:	460b      	mov	r3, r1
 80063b6:	4313      	orrs	r3, r2
 80063b8:	d036      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80063ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80063c2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80063c6:	d00d      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80063c8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80063cc:	d811      	bhi.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80063ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063d2:	d012      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80063d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063d8:	d80b      	bhi.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00d      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80063de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063e2:	d106      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063e4:	4b14      	ldr	r3, [pc, #80]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80063e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e8:	4a13      	ldr	r2, [pc, #76]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80063ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ee:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80063f0:	e004      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80063f8:	e000      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 80063fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063fc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10d      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8006404:	4b0c      	ldr	r3, [pc, #48]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006406:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800640a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800640e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006412:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006416:	4908      	ldr	r1, [pc, #32]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006418:	4313      	orrs	r3, r2
 800641a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800641e:	e003      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006420:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006424:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006428:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 800642c:	4618      	mov	r0, r3
 800642e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8006432:	46bd      	mov	sp, r7
 8006434:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006438:	46020c00 	.word	0x46020c00

0800643c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800643c:	b480      	push	{r7}
 800643e:	b089      	sub	sp, #36	@ 0x24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006444:	4ba6      	ldr	r3, [pc, #664]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800644e:	4ba4      	ldr	r3, [pc, #656]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006458:	4ba1      	ldr	r3, [pc, #644]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800645a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645c:	0a1b      	lsrs	r3, r3, #8
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	3301      	adds	r3, #1
 8006464:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006466:	4b9e      	ldr	r3, [pc, #632]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646a:	091b      	lsrs	r3, r3, #4
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006472:	4b9b      	ldr	r3, [pc, #620]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006476:	08db      	lsrs	r3, r3, #3
 8006478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	fb02 f303 	mul.w	r3, r2, r3
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2b03      	cmp	r3, #3
 8006492:	d062      	beq.n	800655a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2b03      	cmp	r3, #3
 8006498:	f200 8081 	bhi.w	800659e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d024      	beq.n	80064ec <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d17a      	bne.n	800659e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80066e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80064b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ba:	4b89      	ldr	r3, [pc, #548]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80064bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80064ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80064ce:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80066e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80064d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80064da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064de:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064ea:	e08f      	b.n	800660c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80064ec:	4b7c      	ldr	r3, [pc, #496]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80064f8:	4b79      	ldr	r3, [pc, #484]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	0f1b      	lsrs	r3, r3, #28
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	e006      	b.n	8006512 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006504:	4b76      	ldr	r3, [pc, #472]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006506:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800650a:	041b      	lsls	r3, r3, #16
 800650c:	0f1b      	lsrs	r3, r3, #28
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	4a76      	ldr	r2, [pc, #472]	@ (80066ec <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006518:	ee07 3a90 	vmov	s15, r3
 800651c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	ee07 3a90 	vmov	s15, r3
 8006534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006538:	ed97 6a02 	vldr	s12, [r7, #8]
 800653c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80066e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006548:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800654c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006554:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006558:	e058      	b.n	800660c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	ee07 3a90 	vmov	s15, r3
 8006560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006564:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80066f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 8006568:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800656c:	4b5c      	ldr	r3, [pc, #368]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800656e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006574:	ee07 3a90 	vmov	s15, r3
 8006578:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800657c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006580:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80066e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006584:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006588:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800658c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006590:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006598:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800659c:	e036      	b.n	800660c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800659e:	4b50      	ldr	r3, [pc, #320]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d005      	beq.n	80065b6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80065aa:	4b4d      	ldr	r3, [pc, #308]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	0f1b      	lsrs	r3, r3, #28
 80065b0:	f003 030f 	and.w	r3, r3, #15
 80065b4:	e006      	b.n	80065c4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80065b6:	4b4a      	ldr	r3, [pc, #296]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80065b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065bc:	041b      	lsls	r3, r3, #16
 80065be:	0f1b      	lsrs	r3, r3, #28
 80065c0:	f003 030f 	and.w	r3, r3, #15
 80065c4:	4a49      	ldr	r2, [pc, #292]	@ (80066ec <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80065c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	ee07 3a90 	vmov	s15, r3
 80065d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ee:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80066e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80065f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006606:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800660a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800660c:	4b34      	ldr	r3, [pc, #208]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800660e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d017      	beq.n	8006648 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006618:	4b31      	ldr	r3, [pc, #196]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800661a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800661c:	0a5b      	lsrs	r3, r3, #9
 800661e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800662a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800662e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006632:	edd7 6a07 	vldr	s13, [r7, #28]
 8006636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800663a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800663e:	ee17 2a90 	vmov	r2, s15
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	e002      	b.n	800664e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800664e:	4b24      	ldr	r3, [pc, #144]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d017      	beq.n	800668a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800665a:	4b21      	ldr	r3, [pc, #132]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800665c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800665e:	0c1b      	lsrs	r3, r3, #16
 8006660:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006664:	ee07 3a90 	vmov	s15, r3
 8006668:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800666c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006670:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006674:	edd7 6a07 	vldr	s13, [r7, #28]
 8006678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800667c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006680:	ee17 2a90 	vmov	r2, s15
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	605a      	str	r2, [r3, #4]
 8006688:	e002      	b.n	8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006690:	4b13      	ldr	r3, [pc, #76]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006694:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d017      	beq.n	80066cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800669c:	4b10      	ldr	r3, [pc, #64]	@ (80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800669e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a0:	0e1b      	lsrs	r3, r3, #24
 80066a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80066ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066b2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80066b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80066ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066c2:	ee17 2a90 	vmov	r2, s15
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80066ca:	e002      	b.n	80066d2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	609a      	str	r2, [r3, #8]
}
 80066d2:	bf00      	nop
 80066d4:	3724      	adds	r7, #36	@ 0x24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	46020c00 	.word	0x46020c00
 80066e4:	4b742400 	.word	0x4b742400
 80066e8:	46000000 	.word	0x46000000
 80066ec:	0800ecf0 	.word	0x0800ecf0
 80066f0:	4af42400 	.word	0x4af42400

080066f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b089      	sub	sp, #36	@ 0x24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80066fc:	4ba6      	ldr	r3, [pc, #664]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80066fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006704:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006706:	4ba4      	ldr	r3, [pc, #656]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006710:	4ba1      	ldr	r3, [pc, #644]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006714:	0a1b      	lsrs	r3, r3, #8
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	3301      	adds	r3, #1
 800671c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800671e:	4b9e      	ldr	r3, [pc, #632]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006722:	091b      	lsrs	r3, r3, #4
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800672a:	4b9b      	ldr	r3, [pc, #620]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800672c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672e:	08db      	lsrs	r3, r3, #3
 8006730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	fb02 f303 	mul.w	r3, r2, r3
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006742:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2b03      	cmp	r3, #3
 800674a:	d062      	beq.n	8006812 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2b03      	cmp	r3, #3
 8006750:	f200 8081 	bhi.w	8006856 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d024      	beq.n	80067a4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d17a      	bne.n	8006856 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	ee07 3a90 	vmov	s15, r3
 8006766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800699c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800676e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006772:	4b89      	ldr	r3, [pc, #548]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800677a:	ee07 3a90 	vmov	s15, r3
 800677e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006782:	ed97 6a02 	vldr	s12, [r7, #8]
 8006786:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80069a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800678a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800678e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006796:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800679a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067a2:	e08f      	b.n	80068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80067a4:	4b7c      	ldr	r3, [pc, #496]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80067b0:	4b79      	ldr	r3, [pc, #484]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	0f1b      	lsrs	r3, r3, #28
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	e006      	b.n	80067ca <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80067bc:	4b76      	ldr	r3, [pc, #472]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80067be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067c2:	041b      	lsls	r3, r3, #16
 80067c4:	0f1b      	lsrs	r3, r3, #28
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	4a76      	ldr	r2, [pc, #472]	@ (80069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80067cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	ee07 3a90 	vmov	s15, r3
 80067ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80067f4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80069a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80067f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006800:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006804:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800680c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006810:	e058      	b.n	80068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	ee07 3a90 	vmov	s15, r3
 8006818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681c:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 8006820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006824:	4b5c      	ldr	r3, [pc, #368]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682c:	ee07 3a90 	vmov	s15, r3
 8006830:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006834:	ed97 6a02 	vldr	s12, [r7, #8]
 8006838:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80069a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800683c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006840:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006844:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006848:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800684c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006850:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006854:	e036      	b.n	80068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006856:	4b50      	ldr	r3, [pc, #320]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006862:	4b4d      	ldr	r3, [pc, #308]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	0f1b      	lsrs	r3, r3, #28
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	e006      	b.n	800687c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800686e:	4b4a      	ldr	r3, [pc, #296]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006874:	041b      	lsls	r3, r3, #16
 8006876:	0f1b      	lsrs	r3, r3, #28
 8006878:	f003 030f 	and.w	r3, r3, #15
 800687c:	4a49      	ldr	r2, [pc, #292]	@ (80069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800687e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	ee07 3a90 	vmov	s15, r3
 8006890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80068a6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80069a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80068aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80068ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068c2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80068c4:	4b34      	ldr	r3, [pc, #208]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80068c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d017      	beq.n	8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80068d0:	4b31      	ldr	r3, [pc, #196]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80068d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d4:	0a5b      	lsrs	r3, r3, #9
 80068d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068da:	ee07 3a90 	vmov	s15, r3
 80068de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80068e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80068ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80068ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068f6:	ee17 2a90 	vmov	r2, s15
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	e002      	b.n	8006906 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006906:	4b24      	ldr	r3, [pc, #144]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d017      	beq.n	8006942 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006912:	4b21      	ldr	r3, [pc, #132]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006916:	0c1b      	lsrs	r3, r3, #16
 8006918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800691c:	ee07 3a90 	vmov	s15, r3
 8006920:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006924:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006928:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800692c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006938:	ee17 2a90 	vmov	r2, s15
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	605a      	str	r2, [r3, #4]
 8006940:	e002      	b.n	8006948 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006948:	4b13      	ldr	r3, [pc, #76]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800694a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d017      	beq.n	8006984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006954:	4b10      	ldr	r3, [pc, #64]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006958:	0e1b      	lsrs	r3, r3, #24
 800695a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006966:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800696a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800696e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800697a:	ee17 2a90 	vmov	r2, s15
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006982:	e002      	b.n	800698a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	609a      	str	r2, [r3, #8]
}
 800698a:	bf00      	nop
 800698c:	3724      	adds	r7, #36	@ 0x24
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	46020c00 	.word	0x46020c00
 800699c:	4b742400 	.word	0x4b742400
 80069a0:	46000000 	.word	0x46000000
 80069a4:	0800ecf0 	.word	0x0800ecf0
 80069a8:	4af42400 	.word	0x4af42400

080069ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b089      	sub	sp, #36	@ 0x24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80069b4:	4ba6      	ldr	r3, [pc, #664]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069bc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80069be:	4ba4      	ldr	r3, [pc, #656]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80069c8:	4ba1      	ldr	r3, [pc, #644]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069cc:	0a1b      	lsrs	r3, r3, #8
 80069ce:	f003 030f 	and.w	r3, r3, #15
 80069d2:	3301      	adds	r3, #1
 80069d4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80069d6:	4b9e      	ldr	r3, [pc, #632]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069da:	091b      	lsrs	r3, r3, #4
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80069e2:	4b9b      	ldr	r3, [pc, #620]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069e6:	08db      	lsrs	r3, r3, #3
 80069e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	fb02 f303 	mul.w	r3, r2, r3
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d062      	beq.n	8006aca <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	f200 8081 	bhi.w	8006b0e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d024      	beq.n	8006a5c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d17a      	bne.n	8006b0e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a22:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a2a:	4b89      	ldr	r3, [pc, #548]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a32:	ee07 3a90 	vmov	s15, r3
 8006a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a3e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a56:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006a5a:	e08f      	b.n	8006b7c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006a5c:	4b7c      	ldr	r3, [pc, #496]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d005      	beq.n	8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006a68:	4b79      	ldr	r3, [pc, #484]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	0f1b      	lsrs	r3, r3, #28
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	e006      	b.n	8006a82 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006a74:	4b76      	ldr	r3, [pc, #472]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006a76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a7a:	041b      	lsls	r3, r3, #16
 8006a7c:	0f1b      	lsrs	r3, r3, #28
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	4a76      	ldr	r2, [pc, #472]	@ (8006c5c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a88:	ee07 3a90 	vmov	s15, r3
 8006a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	ee07 3a90 	vmov	s15, r3
 8006aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aac:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006ab0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006abc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ac8:	e058      	b.n	8006b7c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	ee07 3a90 	vmov	s15, r3
 8006ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad4:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006c60 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 8006ad8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006adc:	4b5c      	ldr	r3, [pc, #368]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae4:	ee07 3a90 	vmov	s15, r3
 8006ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006aec:	ed97 6a02 	vldr	s12, [r7, #8]
 8006af0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006af4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006af8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006afc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b00:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b0c:	e036      	b.n	8006b7c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006b0e:	4b50      	ldr	r3, [pc, #320]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d005      	beq.n	8006b26 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006b1a:	4b4d      	ldr	r3, [pc, #308]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	0f1b      	lsrs	r3, r3, #28
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	e006      	b.n	8006b34 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006b26:	4b4a      	ldr	r3, [pc, #296]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b2c:	041b      	lsls	r3, r3, #16
 8006b2e:	0f1b      	lsrs	r3, r3, #28
 8006b30:	f003 030f 	and.w	r3, r3, #15
 8006b34:	4a49      	ldr	r2, [pc, #292]	@ (8006c5c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b3a:	ee07 3a90 	vmov	s15, r3
 8006b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	ee07 3a90 	vmov	s15, r3
 8006b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b5e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b7a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006b7c:	4b34      	ldr	r3, [pc, #208]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d017      	beq.n	8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b88:	4b31      	ldr	r3, [pc, #196]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8c:	0a5b      	lsrs	r3, r3, #9
 8006b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006b9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bae:	ee17 2a90 	vmov	r2, s15
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	e002      	b.n	8006bbe <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006bbe:	4b24      	ldr	r3, [pc, #144]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d017      	beq.n	8006bfa <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006bca:	4b21      	ldr	r3, [pc, #132]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bce:	0c1b      	lsrs	r3, r3, #16
 8006bd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bd4:	ee07 3a90 	vmov	s15, r3
 8006bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006bdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006be0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006be4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bf0:	ee17 2a90 	vmov	r2, s15
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	605a      	str	r2, [r3, #4]
 8006bf8:	e002      	b.n	8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006c00:	4b13      	ldr	r3, [pc, #76]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d017      	beq.n	8006c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006c0c:	4b10      	ldr	r3, [pc, #64]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c10:	0e1b      	lsrs	r3, r3, #24
 8006c12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006c1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c22:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006c26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c32:	ee17 2a90 	vmov	r2, s15
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c3a:	e002      	b.n	8006c42 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	609a      	str	r2, [r3, #8]
}
 8006c42:	bf00      	nop
 8006c44:	3724      	adds	r7, #36	@ 0x24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	46020c00 	.word	0x46020c00
 8006c54:	4b742400 	.word	0x4b742400
 8006c58:	46000000 	.word	0x46000000
 8006c5c:	0800ecf0 	.word	0x0800ecf0
 8006c60:	4af42400 	.word	0x4af42400

08006c64 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08e      	sub	sp, #56	@ 0x38
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c72:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006c76:	430b      	orrs	r3, r1
 8006c78:	d145      	bne.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006c7a:	4ba7      	ldr	r3, [pc, #668]	@ (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c84:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006c86:	4ba4      	ldr	r3, [pc, #656]	@ (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d108      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c9a:	d104      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006c9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca2:	f001 bb35 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006ca6:	4b9c      	ldr	r3, [pc, #624]	@ (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cb4:	d114      	bne.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cbc:	d110      	bne.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006cbe:	4b96      	ldr	r3, [pc, #600]	@ (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ccc:	d103      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006cce:	23fa      	movs	r3, #250	@ 0xfa
 8006cd0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006cd2:	f001 bb1d 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8006cd6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006cda:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006cdc:	f001 bb18 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006ce0:	4b8d      	ldr	r3, [pc, #564]	@ (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ce8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cec:	d107      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cf4:	d103      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006cf6:	4b89      	ldr	r3, [pc, #548]	@ (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cfa:	f001 bb09 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d02:	f001 bb05 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006d06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d0a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006d0e:	430b      	orrs	r3, r1
 8006d10:	d151      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006d12:	4b81      	ldr	r3, [pc, #516]	@ (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006d14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d18:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006d1c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d20:	2b80      	cmp	r3, #128	@ 0x80
 8006d22:	d035      	beq.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d26:	2b80      	cmp	r3, #128	@ 0x80
 8006d28:	d841      	bhi.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	2b60      	cmp	r3, #96	@ 0x60
 8006d2e:	d02a      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	2b60      	cmp	r3, #96	@ 0x60
 8006d34:	d83b      	bhi.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d38:	2b40      	cmp	r3, #64	@ 0x40
 8006d3a:	d009      	beq.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3e:	2b40      	cmp	r3, #64	@ 0x40
 8006d40:	d835      	bhi.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00c      	beq.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4a:	2b20      	cmp	r3, #32
 8006d4c:	d012      	beq.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006d4e:	e02e      	b.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff fb71 	bl	800643c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d5e:	f001 bad7 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d62:	f107 0318 	add.w	r3, r7, #24
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7ff fcc4 	bl	80066f4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d70:	f001 bace 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d74:	f107 030c 	add.w	r3, r7, #12
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff fe17 	bl	80069ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d82:	f001 bac5 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d86:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006d8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d8c:	f001 bac0 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d90:	4b61      	ldr	r3, [pc, #388]	@ (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d9c:	d103      	bne.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006d9e:	4b60      	ldr	r3, [pc, #384]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006da0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006da2:	f001 bab5 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006daa:	f001 bab1 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :
      {
        frequency = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006db2:	f001 baad 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dba:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	d158      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006dc2:	4b55      	ldr	r3, [pc, #340]	@ (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006dc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006dc8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006dcc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dd4:	d03b      	beq.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ddc:	d846      	bhi.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006de4:	d02e      	beq.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dec:	d83e      	bhi.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df4:	d00b      	beq.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dfc:	d836      	bhi.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00d      	beq.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e0a:	d012      	beq.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006e0c:	e02e      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff fb12 	bl	800643c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e1c:	f001 ba78 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e20:	f107 0318 	add.w	r3, r7, #24
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff fc65 	bl	80066f4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e2e:	f001 ba6f 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e32:	f107 030c 	add.w	r3, r7, #12
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff fdb8 	bl	80069ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e40:	f001 ba66 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006e44:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006e48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e4a:	f001 ba61 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e4e:	4b32      	ldr	r3, [pc, #200]	@ (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e5a:	d103      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006e5c:	4b30      	ldr	r3, [pc, #192]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006e5e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e60:	f001 ba56 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e68:	f001 ba52 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e70:	f001 ba4e 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e78:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	d126      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006e80:	4b25      	ldr	r3, [pc, #148]	@ (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006e82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e8a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006e8c:	4b22      	ldr	r3, [pc, #136]	@ (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e98:	d106      	bne.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d103      	bne.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ea4:	f001 ba34 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eb4:	d107      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ebc:	d103      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006ebe:	4b19      	ldr	r3, [pc, #100]	@ (8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec2:	f001 ba25 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eca:	f001 ba21 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ed2:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	d16e      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006eda:	4b0f      	ldr	r3, [pc, #60]	@ (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ee0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006ee4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006eec:	d03d      	beq.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006ef4:	d85c      	bhi.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006efc:	d014      	beq.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f04:	d854      	bhi.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d01f      	beq.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f12:	d012      	beq.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006f14:	e04c      	b.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006f16:	bf00      	nop
 8006f18:	46020c00 	.word	0x46020c00
 8006f1c:	0003d090 	.word	0x0003d090
 8006f20:	00f42400 	.word	0x00f42400
 8006f24:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff fa85 	bl	800643c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f36:	f001 b9eb 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f3a:	f107 0318 	add.w	r3, r7, #24
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7ff fbd8 	bl	80066f4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f48:	f001 b9e2 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006f4c:	4ba7      	ldr	r3, [pc, #668]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f58:	d103      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006f5a:	4ba5      	ldr	r3, [pc, #660]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006f5c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f5e:	f001 b9d7 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f66:	f001 b9d3 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f6a:	4ba0      	ldr	r3, [pc, #640]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	d118      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f76:	4b9d      	ldr	r3, [pc, #628]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006f82:	4b9a      	ldr	r3, [pc, #616]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	0e1b      	lsrs	r3, r3, #24
 8006f88:	f003 030f 	and.w	r3, r3, #15
 8006f8c:	e006      	b.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006f8e:	4b97      	ldr	r3, [pc, #604]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f94:	041b      	lsls	r3, r3, #16
 8006f96:	0e1b      	lsrs	r3, r3, #24
 8006f98:	f003 030f 	and.w	r3, r3, #15
 8006f9c:	4a95      	ldr	r2, [pc, #596]	@ (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fa4:	f001 b9b4 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fac:	f001 b9b0 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fb4:	f001 b9ac 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fbc:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006fc0:	430b      	orrs	r3, r1
 8006fc2:	d17f      	bne.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006fc4:	4b89      	ldr	r3, [pc, #548]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006fc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fce:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d165      	bne.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006fd6:	4b85      	ldr	r3, [pc, #532]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fdc:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006fe0:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006fe8:	d034      	beq.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fec:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006ff0:	d853      	bhi.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ff8:	d00b      	beq.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007000:	d84b      	bhi.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007004:	2b00      	cmp	r3, #0
 8007006:	d016      	beq.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8007008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800700e:	d009      	beq.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007010:	e043      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff fa10 	bl	800643c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800701c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007020:	f001 b976 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007024:	f107 0318 	add.w	r3, r7, #24
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff fb63 	bl	80066f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007032:	f001 b96d 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007036:	4b6d      	ldr	r3, [pc, #436]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800703e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007042:	d103      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8007044:	4b6a      	ldr	r3, [pc, #424]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007046:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007048:	f001 b962 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007050:	f001 b95e 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007054:	4b65      	ldr	r3, [pc, #404]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0320 	and.w	r3, r3, #32
 800705c:	2b20      	cmp	r3, #32
 800705e:	d118      	bne.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007060:	4b62      	ldr	r3, [pc, #392]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800706c:	4b5f      	ldr	r3, [pc, #380]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	0e1b      	lsrs	r3, r3, #24
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	e006      	b.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007078:	4b5c      	ldr	r3, [pc, #368]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800707a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800707e:	041b      	lsls	r3, r3, #16
 8007080:	0e1b      	lsrs	r3, r3, #24
 8007082:	f003 030f 	and.w	r3, r3, #15
 8007086:	4a5b      	ldr	r2, [pc, #364]	@ (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800708c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800708e:	f001 b93f 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007096:	f001 b93b 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        default :
        {
          frequency = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800709e:	f001 b937 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80070a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070a8:	d108      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7ff f9c4 	bl	800643c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070b8:	f001 b92a 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else
    {
      frequency = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c0:	f001 b926 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80070c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070c8:	1e51      	subs	r1, r2, #1
 80070ca:	430b      	orrs	r3, r1
 80070cc:	d136      	bne.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80070ce:	4b47      	ldr	r3, [pc, #284]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80070d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070d4:	f003 0303 	and.w	r3, r3, #3
 80070d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d104      	bne.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80070e0:	f7fe fa42 	bl	8005568 <HAL_RCC_GetPCLK2Freq>
 80070e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80070e6:	f001 b913 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d104      	bne.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070f0:	f7fe f906 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 80070f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80070f6:	f001 b90b 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80070fa:	4b3c      	ldr	r3, [pc, #240]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007106:	d106      	bne.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	2b02      	cmp	r3, #2
 800710c:	d103      	bne.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800710e:	4b3a      	ldr	r3, [pc, #232]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007110:	637b      	str	r3, [r7, #52]	@ 0x34
 8007112:	f001 b8fd 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007116:	4b35      	ldr	r3, [pc, #212]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b02      	cmp	r3, #2
 8007122:	d107      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007126:	2b03      	cmp	r3, #3
 8007128:	d104      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800712a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800712e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007130:	f001 b8ee 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	637b      	str	r3, [r7, #52]	@ 0x34
 8007138:	f001 b8ea 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800713c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007140:	1e91      	subs	r1, r2, #2
 8007142:	430b      	orrs	r3, r1
 8007144:	d136      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007146:	4b29      	ldr	r3, [pc, #164]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800714c:	f003 030c 	and.w	r3, r3, #12
 8007150:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007154:	2b00      	cmp	r3, #0
 8007156:	d104      	bne.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007158:	f7fe f9f2 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 800715c:	6378      	str	r0, [r7, #52]	@ 0x34
 800715e:	f001 b8d7 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007164:	2b04      	cmp	r3, #4
 8007166:	d104      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007168:	f7fe f8ca 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 800716c:	6378      	str	r0, [r7, #52]	@ 0x34
 800716e:	f001 b8cf 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007172:	4b1e      	ldr	r3, [pc, #120]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800717a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800717e:	d106      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007182:	2b08      	cmp	r3, #8
 8007184:	d103      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8007186:	4b1c      	ldr	r3, [pc, #112]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007188:	637b      	str	r3, [r7, #52]	@ 0x34
 800718a:	f001 b8c1 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800718e:	4b17      	ldr	r3, [pc, #92]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b02      	cmp	r3, #2
 800719a:	d107      	bne.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800719c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719e:	2b0c      	cmp	r3, #12
 80071a0:	d104      	bne.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80071a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071a8:	f001 b8b2 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80071b0:	f001 b8ae 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80071b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b8:	1f11      	subs	r1, r2, #4
 80071ba:	430b      	orrs	r3, r1
 80071bc:	d13f      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80071be:	4b0b      	ldr	r3, [pc, #44]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80071c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80071c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80071ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d104      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80071d0:	f7fe f9b6 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 80071d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80071d6:	f001 b89b 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80071da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071dc:	2b10      	cmp	r3, #16
 80071de:	d10d      	bne.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80071e0:	f7fe f88e 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 80071e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80071e6:	f001 b893 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80071ea:	bf00      	nop
 80071ec:	46020c00 	.word	0x46020c00
 80071f0:	02dc6c00 	.word	0x02dc6c00
 80071f4:	0800ecf0 	.word	0x0800ecf0
 80071f8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80071fc:	4ba8      	ldr	r3, [pc, #672]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007208:	d106      	bne.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720c:	2b20      	cmp	r3, #32
 800720e:	d103      	bne.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8007210:	4ba4      	ldr	r3, [pc, #656]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007212:	637b      	str	r3, [r7, #52]	@ 0x34
 8007214:	f001 b87c 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007218:	4ba1      	ldr	r3, [pc, #644]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800721a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b02      	cmp	r3, #2
 8007224:	d107      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	2b30      	cmp	r3, #48	@ 0x30
 800722a:	d104      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800722c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007230:	637b      	str	r3, [r7, #52]	@ 0x34
 8007232:	f001 b86d 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	637b      	str	r3, [r7, #52]	@ 0x34
 800723a:	f001 b869 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800723e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007242:	f1a2 0108 	sub.w	r1, r2, #8
 8007246:	430b      	orrs	r3, r1
 8007248:	d136      	bne.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800724a:	4b95      	ldr	r3, [pc, #596]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800724c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007250:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007254:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007258:	2b00      	cmp	r3, #0
 800725a:	d104      	bne.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800725c:	f7fe f970 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 8007260:	6378      	str	r0, [r7, #52]	@ 0x34
 8007262:	f001 b855 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007268:	2b40      	cmp	r3, #64	@ 0x40
 800726a:	d104      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800726c:	f7fe f848 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 8007270:	6378      	str	r0, [r7, #52]	@ 0x34
 8007272:	f001 b84d 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007276:	4b8a      	ldr	r3, [pc, #552]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800727e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007282:	d106      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8007284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007286:	2b80      	cmp	r3, #128	@ 0x80
 8007288:	d103      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800728a:	4b86      	ldr	r3, [pc, #536]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800728c:	637b      	str	r3, [r7, #52]	@ 0x34
 800728e:	f001 b83f 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007292:	4b83      	ldr	r3, [pc, #524]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b02      	cmp	r3, #2
 800729e:	d107      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80072a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80072a4:	d104      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80072a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ac:	f001 b830 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072b4:	f001 b82c 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80072b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072bc:	f1a2 0110 	sub.w	r1, r2, #16
 80072c0:	430b      	orrs	r3, r1
 80072c2:	d139      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80072c4:	4b76      	ldr	r3, [pc, #472]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80072c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80072d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d104      	bne.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80072d6:	f7fe f933 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 80072da:	6378      	str	r0, [r7, #52]	@ 0x34
 80072dc:	f001 b818 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072e6:	d104      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80072e8:	f7fe f80a 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 80072ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80072ee:	f001 b80f 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80072f2:	4b6b      	ldr	r3, [pc, #428]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072fe:	d107      	bne.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8007300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007306:	d103      	bne.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8007308:	4b66      	ldr	r3, [pc, #408]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800730a:	637b      	str	r3, [r7, #52]	@ 0x34
 800730c:	f001 b800 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007310:	4b63      	ldr	r3, [pc, #396]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b02      	cmp	r3, #2
 800731c:	d108      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007320:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007324:	d104      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800732a:	637b      	str	r3, [r7, #52]	@ 0x34
 800732c:	f000 bff0 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	637b      	str	r3, [r7, #52]	@ 0x34
 8007334:	f000 bfec 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8007338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800733c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8007340:	430b      	orrs	r3, r1
 8007342:	d139      	bne.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007344:	4b56      	ldr	r3, [pc, #344]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007346:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800734a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800734e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007352:	2b00      	cmp	r3, #0
 8007354:	d104      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007356:	f7fe f8f3 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 800735a:	6378      	str	r0, [r7, #52]	@ 0x34
 800735c:	f000 bfd8 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8007360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007366:	d104      	bne.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007368:	f7fd ffca 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 800736c:	6378      	str	r0, [r7, #52]	@ 0x34
 800736e:	f000 bfcf 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007372:	4b4b      	ldr	r3, [pc, #300]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800737a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800737e:	d107      	bne.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007382:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007386:	d103      	bne.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8007388:	4b46      	ldr	r3, [pc, #280]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800738a:	637b      	str	r3, [r7, #52]	@ 0x34
 800738c:	f000 bfc0 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007390:	4b43      	ldr	r3, [pc, #268]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007396:	f003 0302 	and.w	r3, r3, #2
 800739a:	2b02      	cmp	r3, #2
 800739c:	d108      	bne.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800739e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80073a4:	d104      	bne.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 80073a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ac:	f000 bfb0 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b4:	f000 bfac 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80073b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073bc:	f1a2 0120 	sub.w	r1, r2, #32
 80073c0:	430b      	orrs	r3, r1
 80073c2:	d158      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80073c4:	4b36      	ldr	r3, [pc, #216]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80073c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80073d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d104      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80073d6:	f7fe f8db 	bl	8005590 <HAL_RCC_GetPCLK3Freq>
 80073da:	6378      	str	r0, [r7, #52]	@ 0x34
 80073dc:	f000 bf98 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80073e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d104      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80073e6:	f7fd ff8b 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 80073ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80073ec:	f000 bf90 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80073f0:	4b2b      	ldr	r3, [pc, #172]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073fc:	d106      	bne.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	2b02      	cmp	r3, #2
 8007402:	d103      	bne.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8007404:	4b27      	ldr	r3, [pc, #156]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007406:	637b      	str	r3, [r7, #52]	@ 0x34
 8007408:	f000 bf82 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800740c:	4b24      	ldr	r3, [pc, #144]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800740e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b02      	cmp	r3, #2
 8007418:	d107      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	2b03      	cmp	r3, #3
 800741e:	d104      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8007420:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007424:	637b      	str	r3, [r7, #52]	@ 0x34
 8007426:	f000 bf73 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800742a:	4b1d      	ldr	r3, [pc, #116]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b20      	cmp	r3, #32
 8007434:	d11b      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8007436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007438:	2b04      	cmp	r3, #4
 800743a:	d118      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800743c:	4b18      	ldr	r3, [pc, #96]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d005      	beq.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8007448:	4b15      	ldr	r3, [pc, #84]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	0e1b      	lsrs	r3, r3, #24
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	e006      	b.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8007454:	4b12      	ldr	r3, [pc, #72]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007456:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800745a:	041b      	lsls	r3, r3, #16
 800745c:	0e1b      	lsrs	r3, r3, #24
 800745e:	f003 030f 	and.w	r3, r3, #15
 8007462:	4a11      	ldr	r2, [pc, #68]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007468:	637b      	str	r3, [r7, #52]	@ 0x34
 800746a:	f000 bf51 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	637b      	str	r3, [r7, #52]	@ 0x34
 8007472:	f000 bf4d 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800747a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800747e:	430b      	orrs	r3, r1
 8007480:	d172      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007482:	4b07      	ldr	r3, [pc, #28]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007488:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800748c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800748e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007494:	d10a      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007496:	f7fd ff33 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 800749a:	6378      	str	r0, [r7, #52]	@ 0x34
 800749c:	f000 bf38 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80074a0:	46020c00 	.word	0x46020c00
 80074a4:	00f42400 	.word	0x00f42400
 80074a8:	0800ecf0 	.word	0x0800ecf0
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80074ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074b2:	d108      	bne.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074b4:	f107 0318 	add.w	r3, r7, #24
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff f91b 	bl	80066f4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c2:	f000 bf25 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80074c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d104      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80074cc:	f7fe f81e 	bl	800550c <HAL_RCC_GetHCLKFreq>
 80074d0:	6378      	str	r0, [r7, #52]	@ 0x34
 80074d2:	f000 bf1d 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80074d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80074dc:	d122      	bne.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80074de:	4bb0      	ldr	r3, [pc, #704]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	d118      	bne.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074ea:	4bad      	ldr	r3, [pc, #692]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d005      	beq.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 80074f6:	4baa      	ldr	r3, [pc, #680]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	0e1b      	lsrs	r3, r3, #24
 80074fc:	f003 030f 	and.w	r3, r3, #15
 8007500:	e006      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8007502:	4ba7      	ldr	r3, [pc, #668]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007508:	041b      	lsls	r3, r3, #16
 800750a:	0e1b      	lsrs	r3, r3, #24
 800750c:	f003 030f 	and.w	r3, r3, #15
 8007510:	4aa4      	ldr	r2, [pc, #656]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007516:	637b      	str	r3, [r7, #52]	@ 0x34
 8007518:	f000 befa 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007520:	f000 bef6 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007524:	4b9e      	ldr	r3, [pc, #632]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800752c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007530:	d107      	bne.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007538:	d103      	bne.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800753a:	4b9b      	ldr	r3, [pc, #620]	@ (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800753c:	637b      	str	r3, [r7, #52]	@ 0x34
 800753e:	f000 bee7 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007542:	4b97      	ldr	r3, [pc, #604]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800754a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800754e:	d107      	bne.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8007550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007552:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007556:	d103      	bne.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8007558:	4b94      	ldr	r3, [pc, #592]	@ (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 800755a:	637b      	str	r3, [r7, #52]	@ 0x34
 800755c:	f000 bed8 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	637b      	str	r3, [r7, #52]	@ 0x34
 8007564:	f000 bed4 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800756c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007570:	430b      	orrs	r3, r1
 8007572:	d158      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007574:	4b8a      	ldr	r3, [pc, #552]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007576:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	2b04      	cmp	r3, #4
 8007584:	d84b      	bhi.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8007586:	a201      	add	r2, pc, #4	@ (adr r2, 800758c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8007588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758c:	080075c5 	.word	0x080075c5
 8007590:	080075a1 	.word	0x080075a1
 8007594:	080075b3 	.word	0x080075b3
 8007598:	080075cf 	.word	0x080075cf
 800759c:	080075d9 	.word	0x080075d9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fe ff49 	bl	800643c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075ae:	f000 beaf 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075b2:	f107 030c 	add.w	r3, r7, #12
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7ff f9f8 	bl	80069ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075c0:	f000 bea6 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80075c4:	f7fd ffa2 	bl	800550c <HAL_RCC_GetHCLKFreq>
 80075c8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80075ca:	f000 bea1 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80075ce:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80075d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075d4:	f000 be9c 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80075d8:	4b71      	ldr	r3, [pc, #452]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	d118      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075e4:	4b6e      	ldr	r3, [pc, #440]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d005      	beq.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80075f0:	4b6b      	ldr	r3, [pc, #428]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	0e1b      	lsrs	r3, r3, #24
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	e006      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80075fc:	4b68      	ldr	r3, [pc, #416]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80075fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007602:	041b      	lsls	r3, r3, #16
 8007604:	0e1b      	lsrs	r3, r3, #24
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	4a66      	ldr	r2, [pc, #408]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800760c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007610:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007612:	f000 be7d 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800761a:	f000 be79 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007622:	f000 be75 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800762a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800762e:	430b      	orrs	r3, r1
 8007630:	d167      	bne.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007632:	4b5b      	ldr	r3, [pc, #364]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007638:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800763c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007640:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007644:	d036      	beq.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8007646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007648:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800764c:	d855      	bhi.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007650:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007654:	d029      	beq.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800765c:	d84d      	bhi.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800765e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007660:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007664:	d013      	beq.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8007666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007668:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800766c:	d845      	bhi.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800766e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007670:	2b00      	cmp	r3, #0
 8007672:	d015      	beq.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8007674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800767a:	d13e      	bne.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800767c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007680:	4618      	mov	r0, r3
 8007682:	f7fe fedb 	bl	800643c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800768a:	f000 be41 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800768e:	f107 030c 	add.w	r3, r7, #12
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff f98a 	bl	80069ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800769c:	f000 be38 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80076a0:	f7fd ff34 	bl	800550c <HAL_RCC_GetHCLKFreq>
 80076a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80076a6:	f000 be33 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80076aa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80076ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076b0:	f000 be2e 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076b4:	4b3a      	ldr	r3, [pc, #232]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0320 	and.w	r3, r3, #32
 80076bc:	2b20      	cmp	r3, #32
 80076be:	d118      	bne.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076c0:	4b37      	ldr	r3, [pc, #220]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d005      	beq.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80076cc:	4b34      	ldr	r3, [pc, #208]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	0e1b      	lsrs	r3, r3, #24
 80076d2:	f003 030f 	and.w	r3, r3, #15
 80076d6:	e006      	b.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80076d8:	4b31      	ldr	r3, [pc, #196]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80076da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076de:	041b      	lsls	r3, r3, #16
 80076e0:	0e1b      	lsrs	r3, r3, #24
 80076e2:	f003 030f 	and.w	r3, r3, #15
 80076e6:	4a2f      	ldr	r2, [pc, #188]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80076e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076ee:	f000 be0f 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076f6:	f000 be0b 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076fe:	f000 be07 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007706:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800770a:	430b      	orrs	r3, r1
 800770c:	d154      	bne.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800770e:	4b24      	ldr	r3, [pc, #144]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007714:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007718:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800771a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771c:	2b00      	cmp	r3, #0
 800771e:	d104      	bne.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007720:	f7fd ff0e 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 8007724:	6378      	str	r0, [r7, #52]	@ 0x34
 8007726:	f000 bdf3 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007730:	d104      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007732:	f7fd fde5 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 8007736:	6378      	str	r0, [r7, #52]	@ 0x34
 8007738:	f000 bdea 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800773c:	4b18      	ldr	r3, [pc, #96]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007748:	d107      	bne.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800774a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007750:	d103      	bne.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8007752:	4b16      	ldr	r3, [pc, #88]	@ (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 8007754:	637b      	str	r3, [r7, #52]	@ 0x34
 8007756:	f000 bddb 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800775a:	4b11      	ldr	r3, [pc, #68]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0320 	and.w	r3, r3, #32
 8007762:	2b20      	cmp	r3, #32
 8007764:	d124      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007768:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800776c:	d120      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800776e:	4b0c      	ldr	r3, [pc, #48]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d005      	beq.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800777a:	4b09      	ldr	r3, [pc, #36]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	0e1b      	lsrs	r3, r3, #24
 8007780:	f003 030f 	and.w	r3, r3, #15
 8007784:	e006      	b.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8007786:	4b06      	ldr	r3, [pc, #24]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007788:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800778c:	041b      	lsls	r3, r3, #16
 800778e:	0e1b      	lsrs	r3, r3, #24
 8007790:	f003 030f 	and.w	r3, r3, #15
 8007794:	4a03      	ldr	r2, [pc, #12]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800779a:	637b      	str	r3, [r7, #52]	@ 0x34
 800779c:	f000 bdb8 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80077a0:	46020c00 	.word	0x46020c00
 80077a4:	0800ecf0 	.word	0x0800ecf0
 80077a8:	007a1200 	.word	0x007a1200
 80077ac:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077b4:	f000 bdac 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80077b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077bc:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80077c0:	430b      	orrs	r3, r1
 80077c2:	d14c      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80077c4:	4ba8      	ldr	r3, [pc, #672]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80077c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077ca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80077ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80077d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d104      	bne.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80077d6:	f7fd feb3 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 80077da:	6378      	str	r0, [r7, #52]	@ 0x34
 80077dc:	f000 bd98 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077e6:	d104      	bne.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80077e8:	f7fd fd8a 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 80077ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80077ee:	f000 bd8f 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80077f2:	4b9d      	ldr	r3, [pc, #628]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077fe:	d107      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8007800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007806:	d103      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
    {
      frequency = HSI_VALUE;
 8007808:	4b98      	ldr	r3, [pc, #608]	@ (8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800780a:	637b      	str	r3, [r7, #52]	@ 0x34
 800780c:	f000 bd80 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007810:	4b95      	ldr	r3, [pc, #596]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0320 	and.w	r3, r3, #32
 8007818:	2b20      	cmp	r3, #32
 800781a:	d11c      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 800781c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007822:	d118      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007824:	4b90      	ldr	r3, [pc, #576]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8007830:	4b8d      	ldr	r3, [pc, #564]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	0e1b      	lsrs	r3, r3, #24
 8007836:	f003 030f 	and.w	r3, r3, #15
 800783a:	e006      	b.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800783c:	4b8a      	ldr	r3, [pc, #552]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800783e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007842:	041b      	lsls	r3, r3, #16
 8007844:	0e1b      	lsrs	r3, r3, #24
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	4a89      	ldr	r2, [pc, #548]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 800784c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007850:	637b      	str	r3, [r7, #52]	@ 0x34
 8007852:	f000 bd5d 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	637b      	str	r3, [r7, #52]	@ 0x34
 800785a:	f000 bd59 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800785e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007862:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007866:	430b      	orrs	r3, r1
 8007868:	d158      	bne.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800786a:	4b7f      	ldr	r3, [pc, #508]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800786c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007870:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007874:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007878:	2bc0      	cmp	r3, #192	@ 0xc0
 800787a:	d028      	beq.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
 800787c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007880:	d848      	bhi.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	2b80      	cmp	r3, #128	@ 0x80
 8007886:	d00e      	beq.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8007888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788a:	2b80      	cmp	r3, #128	@ 0x80
 800788c:	d842      	bhi.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 800788e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8007894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007896:	2b40      	cmp	r3, #64	@ 0x40
 8007898:	d014      	beq.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
 800789a:	e03b      	b.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800789c:	f7fd fe78 	bl	8005590 <HAL_RCC_GetPCLK3Freq>
 80078a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80078a2:	f000 bd35 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078a6:	4b70      	ldr	r3, [pc, #448]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078b2:	d103      	bne.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
        {
          frequency = HSI_VALUE;
 80078b4:	4b6d      	ldr	r3, [pc, #436]	@ (8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80078b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80078b8:	f000 bd2a 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078c0:	f000 bd26 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80078c4:	f7fd fd1c 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 80078c8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80078ca:	f000 bd21 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80078ce:	4b66      	ldr	r3, [pc, #408]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0320 	and.w	r3, r3, #32
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d118      	bne.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80078da:	4b63      	ldr	r3, [pc, #396]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d005      	beq.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 80078e6:	4b60      	ldr	r3, [pc, #384]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	0e1b      	lsrs	r3, r3, #24
 80078ec:	f003 030f 	and.w	r3, r3, #15
 80078f0:	e006      	b.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0xc9c>
 80078f2:	4b5d      	ldr	r3, [pc, #372]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80078f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80078f8:	041b      	lsls	r3, r3, #16
 80078fa:	0e1b      	lsrs	r3, r3, #24
 80078fc:	f003 030f 	and.w	r3, r3, #15
 8007900:	4a5b      	ldr	r2, [pc, #364]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8007902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007906:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007908:	f000 bd02 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007910:	f000 bcfe 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      default:
      {
        frequency = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007918:	f000 bcfa 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800791c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007920:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007924:	430b      	orrs	r3, r1
 8007926:	d14c      	bne.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007928:	4b4f      	ldr	r3, [pc, #316]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800792a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800792e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007932:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007936:	2b00      	cmp	r3, #0
 8007938:	d104      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800793a:	f7fd fe01 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 800793e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007940:	f000 bce6 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007946:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800794a:	d104      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800794c:	f7fd fcd8 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 8007950:	6378      	str	r0, [r7, #52]	@ 0x34
 8007952:	f000 bcdd 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007956:	4b44      	ldr	r3, [pc, #272]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800795e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007962:	d107      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 8007964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007966:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800796a:	d103      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
    {
      frequency = HSI_VALUE;
 800796c:	4b3f      	ldr	r3, [pc, #252]	@ (8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800796e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007970:	f000 bcce 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007974:	4b3c      	ldr	r3, [pc, #240]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0320 	and.w	r3, r3, #32
 800797c:	2b20      	cmp	r3, #32
 800797e:	d11c      	bne.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 8007980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007982:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007986:	d118      	bne.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007988:	4b37      	ldr	r3, [pc, #220]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d005      	beq.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
 8007994:	4b34      	ldr	r3, [pc, #208]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	0e1b      	lsrs	r3, r3, #24
 800799a:	f003 030f 	and.w	r3, r3, #15
 800799e:	e006      	b.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
 80079a0:	4b31      	ldr	r3, [pc, #196]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80079a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079a6:	041b      	lsls	r3, r3, #16
 80079a8:	0e1b      	lsrs	r3, r3, #24
 80079aa:	f003 030f 	and.w	r3, r3, #15
 80079ae:	4a30      	ldr	r2, [pc, #192]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 80079b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079b6:	f000 bcab 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80079be:	f000 bca7 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 80079c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079c6:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 80079ca:	430b      	orrs	r3, r1
 80079cc:	d152      	bne.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 80079ce:	4b26      	ldr	r3, [pc, #152]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80079d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079d4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80079d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 80079da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0xd86>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80079e0:	f7fd fdae 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 80079e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80079e6:	f000 bc93 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 80079ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079f0:	d104      	bne.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0xd98>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80079f2:	f7fd fc85 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 80079f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80079f8:	f000 bc8a 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 80079fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a08:	d107      	bne.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a10:	d103      	bne.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
    {
      frequency = HSI_VALUE;
 8007a12:	4b16      	ldr	r3, [pc, #88]	@ (8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a16:	f000 bc7b 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8007a1a:	4b13      	ldr	r3, [pc, #76]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b20      	cmp	r3, #32
 8007a24:	d11c      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8007a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a28:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a2c:	d118      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8007a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	0e1b      	lsrs	r3, r3, #24
 8007a40:	f003 030f 	and.w	r3, r3, #15
 8007a44:	e006      	b.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
 8007a46:	4b08      	ldr	r3, [pc, #32]	@ (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a4c:	041b      	lsls	r3, r3, #16
 8007a4e:	0e1b      	lsrs	r3, r3, #24
 8007a50:	f003 030f 	and.w	r3, r3, #15
 8007a54:	4a06      	ldr	r2, [pc, #24]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8007a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a5c:	f000 bc58 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a64:	f000 bc54 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8007a68:	46020c00 	.word	0x46020c00
 8007a6c:	00f42400 	.word	0x00f42400
 8007a70:	0800ecf0 	.word	0x0800ecf0
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8007a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a78:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8007a7c:	430b      	orrs	r3, r1
 8007a7e:	d14a      	bne.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8007a80:	4ba5      	ldr	r3, [pc, #660]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007a82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a86:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007a8a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d104      	bne.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a92:	f7fd fd55 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 8007a96:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a98:	f000 bc3a 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007aa2:	d104      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007aa4:	f7fd fc2c 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 8007aa8:	6378      	str	r0, [r7, #52]	@ 0x34
 8007aaa:	f000 bc31 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8007aae:	4b9a      	ldr	r3, [pc, #616]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aba:	d107      	bne.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
 8007abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ac2:	d103      	bne.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
    {
      frequency = HSI_VALUE;
 8007ac4:	4b95      	ldr	r3, [pc, #596]	@ (8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac8:	f000 bc22 	b.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8007acc:	4b92      	ldr	r3, [pc, #584]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0320 	and.w	r3, r3, #32
 8007ad4:	2b20      	cmp	r3, #32
 8007ad6:	d11b      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ada:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007ade:	d117      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ae0:	4b8d      	ldr	r3, [pc, #564]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8007aec:	4b8a      	ldr	r3, [pc, #552]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	0e1b      	lsrs	r3, r3, #24
 8007af2:	f003 030f 	and.w	r3, r3, #15
 8007af6:	e006      	b.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8007af8:	4b87      	ldr	r3, [pc, #540]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007afa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007afe:	041b      	lsls	r3, r3, #16
 8007b00:	0e1b      	lsrs	r3, r3, #24
 8007b02:	f003 030f 	and.w	r3, r3, #15
 8007b06:	4a86      	ldr	r2, [pc, #536]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8007b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b0e:	e3ff      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b14:	e3fc      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b1a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007b1e:	430b      	orrs	r3, r1
 8007b20:	d164      	bne.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007b22:	4b7d      	ldr	r3, [pc, #500]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007b24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b2c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d120      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b34:	4b78      	ldr	r3, [pc, #480]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	d117      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b40:	4b75      	ldr	r3, [pc, #468]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d005      	beq.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8007b4c:	4b72      	ldr	r3, [pc, #456]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	0e1b      	lsrs	r3, r3, #24
 8007b52:	f003 030f 	and.w	r3, r3, #15
 8007b56:	e006      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8007b58:	4b6f      	ldr	r3, [pc, #444]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007b5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b5e:	041b      	lsls	r3, r3, #16
 8007b60:	0e1b      	lsrs	r3, r3, #24
 8007b62:	f003 030f 	and.w	r3, r3, #15
 8007b66:	4a6e      	ldr	r2, [pc, #440]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8007b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b6e:	e3cf      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b74:	e3cc      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007b76:	4b68      	ldr	r3, [pc, #416]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b84:	d112      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b8c:	d10e      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b8e:	4b62      	ldr	r3, [pc, #392]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b9c:	d102      	bne.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 8007b9e:	23fa      	movs	r3, #250	@ 0xfa
 8007ba0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ba2:	e3b5      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8007ba4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007ba8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007baa:	e3b1      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007bac:	4b5a      	ldr	r3, [pc, #360]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bb8:	d106      	bne.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 8007bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bc0:	d102      	bne.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 8007bc2:	4b56      	ldr	r3, [pc, #344]	@ (8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bc6:	e3a3      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007bc8:	4b53      	ldr	r3, [pc, #332]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007bca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d107      	bne.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bdc:	d103      	bne.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 8007bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007be4:	e394      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bea:	e391      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bf0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	d164      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007bf8:	4b47      	ldr	r3, [pc, #284]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007bfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007bfe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007c02:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d120      	bne.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c0a:	4b43      	ldr	r3, [pc, #268]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0320 	and.w	r3, r3, #32
 8007c12:	2b20      	cmp	r3, #32
 8007c14:	d117      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c16:	4b40      	ldr	r3, [pc, #256]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d005      	beq.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 8007c22:	4b3d      	ldr	r3, [pc, #244]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	0e1b      	lsrs	r3, r3, #24
 8007c28:	f003 030f 	and.w	r3, r3, #15
 8007c2c:	e006      	b.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c34:	041b      	lsls	r3, r3, #16
 8007c36:	0e1b      	lsrs	r3, r3, #24
 8007c38:	f003 030f 	and.w	r3, r3, #15
 8007c3c:	4a38      	ldr	r2, [pc, #224]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8007c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c44:	e364      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c4a:	e361      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007c4c:	4b32      	ldr	r3, [pc, #200]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c5a:	d112      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c62:	d10e      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c64:	4b2c      	ldr	r3, [pc, #176]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c72:	d102      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 8007c74:	23fa      	movs	r3, #250	@ 0xfa
 8007c76:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c78:	e34a      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8007c7a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007c7e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c80:	e346      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007c82:	4b25      	ldr	r3, [pc, #148]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c8e:	d106      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 8007c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c96:	d102      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 8007c98:	4b20      	ldr	r3, [pc, #128]	@ (8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c9c:	e338      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ca4:	f003 0302 	and.w	r3, r3, #2
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d107      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 8007cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cb2:	d103      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 8007cb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cba:	e329      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cc0:	e326      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc6:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007cca:	430b      	orrs	r3, r1
 8007ccc:	d14e      	bne.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007cce:	4b12      	ldr	r3, [pc, #72]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cd4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007cd8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d103      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007ce0:	f7fd fc2e 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 8007ce4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ce6:	e313      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cf2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cf6:	d119      	bne.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007cfe:	d115      	bne.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d00:	4b05      	ldr	r3, [pc, #20]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d0e:	d109      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 8007d10:	23fa      	movs	r3, #250	@ 0xfa
 8007d12:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d14:	e2fc      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8007d16:	bf00      	nop
 8007d18:	46020c00 	.word	0x46020c00
 8007d1c:	00f42400 	.word	0x00f42400
 8007d20:	0800ecf0 	.word	0x0800ecf0
      }
      else
      {
        frequency = LSI_VALUE;
 8007d24:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007d28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d2a:	e2f1      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007d2c:	4ba8      	ldr	r3, [pc, #672]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d38:	d106      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007d40:	d102      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 8007d42:	4ba4      	ldr	r3, [pc, #656]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d46:	e2e3      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007d48:	4ba1      	ldr	r3, [pc, #644]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d4e:	f003 0302 	and.w	r3, r3, #2
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d107      	bne.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8007d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d58:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007d5c:	d103      	bne.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 8007d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d64:	e2d4      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d6a:	e2d1      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d70:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007d74:	430b      	orrs	r3, r1
 8007d76:	d12d      	bne.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007d78:	4b95      	ldr	r3, [pc, #596]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d7e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007d82:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007d84:	4b92      	ldr	r3, [pc, #584]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d90:	d105      	bne.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d102      	bne.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 8007d98:	4b8f      	ldr	r3, [pc, #572]	@ (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 8007d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d9c:	e2b8      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007da4:	d107      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fb46 	bl	800643c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007db4:	e2ac      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dbc:	d107      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dbe:	f107 0318 	add.w	r3, r7, #24
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe fc96 	bl	80066f4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dcc:	e2a0      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd2:	e29d      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dd8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007ddc:	430b      	orrs	r3, r1
 8007dde:	d156      	bne.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007de0:	4b7b      	ldr	r3, [pc, #492]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007de6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007dea:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007df2:	d028      	beq.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8007df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dfa:	d845      	bhi.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e02:	d013      	beq.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8007e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e0a:	d83d      	bhi.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d004      	beq.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 8007e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e18:	d004      	beq.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007e1a:	e035      	b.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007e1c:	f7fd fba4 	bl	8005568 <HAL_RCC_GetPCLK2Freq>
 8007e20:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007e22:	e275      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007e24:	f7fd fa6c 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 8007e28:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007e2a:	e271      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e2c:	4b68      	ldr	r3, [pc, #416]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e38:	d102      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 8007e3a:	4b66      	ldr	r3, [pc, #408]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007e3c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e3e:	e267      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e44:	e264      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e46:	4b62      	ldr	r3, [pc, #392]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0320 	and.w	r3, r3, #32
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	d117      	bne.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e52:	4b5f      	ldr	r3, [pc, #380]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d005      	beq.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 8007e5e:	4b5c      	ldr	r3, [pc, #368]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	0e1b      	lsrs	r3, r3, #24
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	e006      	b.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 8007e6a:	4b59      	ldr	r3, [pc, #356]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e70:	041b      	lsls	r3, r3, #16
 8007e72:	0e1b      	lsrs	r3, r3, #24
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	4a58      	ldr	r2, [pc, #352]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 8007e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e7e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e80:	e246      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e86:	e243      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e8c:	e240      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e92:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007e96:	430b      	orrs	r3, r1
 8007e98:	d156      	bne.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007e9a:	4b4d      	ldr	r3, [pc, #308]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ea0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007ea4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007eac:	d028      	beq.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 8007eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007eb4:	d845      	bhi.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ebc:	d013      	beq.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ec4:	d83d      	bhi.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d004      	beq.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ed2:	d004      	beq.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 8007ed4:	e035      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007ed6:	f7fd fb33 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 8007eda:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007edc:	e218      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007ede:	f7fd fa0f 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 8007ee2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007ee4:	e214      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ef2:	d102      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 8007ef4:	4b37      	ldr	r3, [pc, #220]	@ (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007ef6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ef8:	e20a      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007efe:	e207      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007f00:	4b33      	ldr	r3, [pc, #204]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0320 	and.w	r3, r3, #32
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d117      	bne.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f0c:	4b30      	ldr	r3, [pc, #192]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d005      	beq.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8007f18:	4b2d      	ldr	r3, [pc, #180]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	0e1b      	lsrs	r3, r3, #24
 8007f1e:	f003 030f 	and.w	r3, r3, #15
 8007f22:	e006      	b.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8007f24:	4b2a      	ldr	r3, [pc, #168]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007f26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f2a:	041b      	lsls	r3, r3, #16
 8007f2c:	0e1b      	lsrs	r3, r3, #24
 8007f2e:	f003 030f 	and.w	r3, r3, #15
 8007f32:	4a2a      	ldr	r2, [pc, #168]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 8007f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f38:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f3a:	e1e9      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f40:	e1e6      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f46:	e1e3      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f4c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007f50:	430b      	orrs	r3, r1
 8007f52:	d17e      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007f54:	4b1e      	ldr	r3, [pc, #120]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007f56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f5a:	f003 0318 	and.w	r3, r3, #24
 8007f5e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f62:	2b18      	cmp	r3, #24
 8007f64:	d872      	bhi.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 8007f66:	a201      	add	r2, pc, #4	@ (adr r2, 8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 8007f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6c:	08007fe1 	.word	0x08007fe1
 8007f70:	0800804d 	.word	0x0800804d
 8007f74:	0800804d 	.word	0x0800804d
 8007f78:	0800804d 	.word	0x0800804d
 8007f7c:	0800804d 	.word	0x0800804d
 8007f80:	0800804d 	.word	0x0800804d
 8007f84:	0800804d 	.word	0x0800804d
 8007f88:	0800804d 	.word	0x0800804d
 8007f8c:	08007fe9 	.word	0x08007fe9
 8007f90:	0800804d 	.word	0x0800804d
 8007f94:	0800804d 	.word	0x0800804d
 8007f98:	0800804d 	.word	0x0800804d
 8007f9c:	0800804d 	.word	0x0800804d
 8007fa0:	0800804d 	.word	0x0800804d
 8007fa4:	0800804d 	.word	0x0800804d
 8007fa8:	0800804d 	.word	0x0800804d
 8007fac:	08007ff1 	.word	0x08007ff1
 8007fb0:	0800804d 	.word	0x0800804d
 8007fb4:	0800804d 	.word	0x0800804d
 8007fb8:	0800804d 	.word	0x0800804d
 8007fbc:	0800804d 	.word	0x0800804d
 8007fc0:	0800804d 	.word	0x0800804d
 8007fc4:	0800804d 	.word	0x0800804d
 8007fc8:	0800804d 	.word	0x0800804d
 8007fcc:	0800800b 	.word	0x0800800b
 8007fd0:	46020c00 	.word	0x46020c00
 8007fd4:	00f42400 	.word	0x00f42400
 8007fd8:	007a1200 	.word	0x007a1200
 8007fdc:	0800ecf0 	.word	0x0800ecf0
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007fe0:	f7fd fad6 	bl	8005590 <HAL_RCC_GetPCLK3Freq>
 8007fe4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007fe6:	e193      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007fe8:	f7fd f98a 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 8007fec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007fee:	e18f      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ff0:	4b9f      	ldr	r3, [pc, #636]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ffc:	d102      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 8007ffe:	4b9d      	ldr	r3, [pc, #628]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8008000:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008002:	e185      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008008:	e182      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800800a:	4b99      	ldr	r3, [pc, #612]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0320 	and.w	r3, r3, #32
 8008012:	2b20      	cmp	r3, #32
 8008014:	d117      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008016:	4b96      	ldr	r3, [pc, #600]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d005      	beq.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 8008022:	4b93      	ldr	r3, [pc, #588]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	0e1b      	lsrs	r3, r3, #24
 8008028:	f003 030f 	and.w	r3, r3, #15
 800802c:	e006      	b.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 800802e:	4b90      	ldr	r3, [pc, #576]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008034:	041b      	lsls	r3, r3, #16
 8008036:	0e1b      	lsrs	r3, r3, #24
 8008038:	f003 030f 	and.w	r3, r3, #15
 800803c:	4a8e      	ldr	r2, [pc, #568]	@ (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800803e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008042:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008044:	e164      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800804a:	e161      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008050:	e15e      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008056:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800805a:	430b      	orrs	r3, r1
 800805c:	d155      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800805e:	4b84      	ldr	r3, [pc, #528]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008060:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008064:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008068:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008070:	d013      	beq.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 8008072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008074:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008078:	d844      	bhi.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800807a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008080:	d013      	beq.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 8008082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008084:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008088:	d83c      	bhi.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800808a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808c:	2b00      	cmp	r3, #0
 800808e:	d014      	beq.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8008090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008092:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008096:	d014      	beq.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 8008098:	e034      	b.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800809a:	f107 0318 	add.w	r3, r7, #24
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fe fb28 	bl	80066f4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080a8:	e132      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe f9c4 	bl	800643c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80080b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080b8:	e12a      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80080ba:	f7fd f921 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 80080be:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80080c0:	e126      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80080c2:	4b6b      	ldr	r3, [pc, #428]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0320 	and.w	r3, r3, #32
 80080ca:	2b20      	cmp	r3, #32
 80080cc:	d117      	bne.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080ce:	4b68      	ldr	r3, [pc, #416]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d005      	beq.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 80080da:	4b65      	ldr	r3, [pc, #404]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	0e1b      	lsrs	r3, r3, #24
 80080e0:	f003 030f 	and.w	r3, r3, #15
 80080e4:	e006      	b.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 80080e6:	4b62      	ldr	r3, [pc, #392]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80080e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080ec:	041b      	lsls	r3, r3, #16
 80080ee:	0e1b      	lsrs	r3, r3, #24
 80080f0:	f003 030f 	and.w	r3, r3, #15
 80080f4:	4a60      	ldr	r2, [pc, #384]	@ (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 80080f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80080fc:	e108      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008102:	e105      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008108:	e102      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800810a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800810e:	1e59      	subs	r1, r3, #1
 8008110:	ea52 0301 	orrs.w	r3, r2, r1
 8008114:	d13c      	bne.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8008116:	4b56      	ldr	r3, [pc, #344]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008118:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800811c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008120:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008124:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008128:	d027      	beq.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008130:	d82b      	bhi.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008138:	d017      	beq.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008140:	d823      	bhi.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	2b00      	cmp	r3, #0
 8008146:	d004      	beq.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8008148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800814e:	d004      	beq.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 8008150:	e01b      	b.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008152:	f7fd f8d5 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 8008156:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008158:	e0da      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800815a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800815e:	4618      	mov	r0, r3
 8008160:	f7fe f96c 	bl	800643c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008166:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008168:	e0d2      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800816a:	f107 0318 	add.w	r3, r7, #24
 800816e:	4618      	mov	r0, r3
 8008170:	f7fe fac0 	bl	80066f4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008178:	e0ca      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800817a:	f107 030c 	add.w	r3, r7, #12
 800817e:	4618      	mov	r0, r3
 8008180:	f7fe fc14 	bl	80069ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008188:	e0c2      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800818e:	e0bf      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008194:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8008198:	430b      	orrs	r3, r1
 800819a:	d131      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800819c:	4b34      	ldr	r3, [pc, #208]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800819e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081a6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80081a8:	4b31      	ldr	r3, [pc, #196]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80081aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d106      	bne.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 80081b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d103      	bne.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 80081bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c2:	e0a5      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80081c4:	4b2a      	ldr	r3, [pc, #168]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80081c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081d2:	d112      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 80081d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081da:	d10e      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80081dc:	4b24      	ldr	r3, [pc, #144]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80081de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081ea:	d102      	bne.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 80081ec:	23fa      	movs	r3, #250	@ 0xfa
 80081ee:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80081f0:	e08e      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 80081f2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80081f6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80081f8:	e08a      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081fe:	e087      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008204:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008208:	430b      	orrs	r3, r1
 800820a:	d13b      	bne.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800820c:	4b18      	ldr	r3, [pc, #96]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800820e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008212:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008216:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008218:	4b15      	ldr	r3, [pc, #84]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008224:	d105      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
 8008226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
    {
      frequency = HSI48_VALUE;
 800822c:	4b13      	ldr	r3, [pc, #76]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800822e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008230:	e06e      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008232:	4b0f      	ldr	r3, [pc, #60]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800823a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800823e:	d106      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
 8008240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008246:	d102      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008248:	4b0d      	ldr	r3, [pc, #52]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>)
 800824a:	637b      	str	r3, [r7, #52]	@ 0x34
 800824c:	e060      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800824e:	4b08      	ldr	r3, [pc, #32]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800825a:	d106      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 800825c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008262:	d102      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
    {
      frequency = HSI_VALUE;
 8008264:	4b03      	ldr	r3, [pc, #12]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8008266:	637b      	str	r3, [r7, #52]	@ 0x34
 8008268:	e052      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	637b      	str	r3, [r7, #52]	@ 0x34
 800826e:	e04f      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8008270:	46020c00 	.word	0x46020c00
 8008274:	00f42400 	.word	0x00f42400
 8008278:	0800ecf0 	.word	0x0800ecf0
 800827c:	02dc6c00 	.word	0x02dc6c00
 8008280:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8008284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008288:	f1a3 0108 	sub.w	r1, r3, #8
 800828c:	ea52 0301 	orrs.w	r3, r2, r1
 8008290:	d13c      	bne.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x16a8>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8008292:	4b22      	ldr	r3, [pc, #136]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8008294:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008298:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800829c:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800829e:	4b1f      	ldr	r3, [pc, #124]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082aa:	d105      	bne.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 80082ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d102      	bne.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
    {
      frequency = HSE_VALUE;
 80082b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80082b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082b6:	e02b      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 80082b8:	4b18      	ldr	r3, [pc, #96]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082c4:	d106      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
 80082c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082cc:	d102      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
    {
      frequency = HSE_VALUE >> 1U ;
 80082ce:	4b15      	ldr	r3, [pc, #84]	@ (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 80082d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d2:	e01d      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 80082d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082da:	d107      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x1688>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe f8ab 	bl	800643c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80082e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ea:	e011      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 80082ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ee:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80082f2:	d108      	bne.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe f89f 	bl	800643c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 80082fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008300:	085b      	lsrs	r3, r3, #1
 8008302:	637b      	str	r3, [r7, #52]	@ 0x34
 8008304:	e004      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	637b      	str	r3, [r7, #52]	@ 0x34
 800830a:	e001      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800830c:	2300      	movs	r3, #0
 800830e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8008310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008312:	4618      	mov	r0, r3
 8008314:	3738      	adds	r7, #56	@ 0x38
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	46020c00 	.word	0x46020c00
 8008320:	007a1200 	.word	0x007a1200
 8008324:	003d0900 	.word	0x003d0900

08008328 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008330:	4b47      	ldr	r3, [pc, #284]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a46      	ldr	r2, [pc, #280]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 8008336:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800833a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800833c:	f7fb f960 	bl	8003600 <HAL_GetTick>
 8008340:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008342:	e008      	b.n	8008356 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008344:	f7fb f95c 	bl	8003600 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	2b02      	cmp	r3, #2
 8008350:	d901      	bls.n	8008356 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e077      	b.n	8008446 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008356:	4b3e      	ldr	r3, [pc, #248]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1f0      	bne.n	8008344 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008362:	4b3b      	ldr	r3, [pc, #236]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 8008364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008366:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800836a:	f023 0303 	bic.w	r3, r3, #3
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6811      	ldr	r1, [r2, #0]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	6852      	ldr	r2, [r2, #4]
 8008376:	3a01      	subs	r2, #1
 8008378:	0212      	lsls	r2, r2, #8
 800837a:	430a      	orrs	r2, r1
 800837c:	4934      	ldr	r1, [pc, #208]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 800837e:	4313      	orrs	r3, r2
 8008380:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008382:	4b33      	ldr	r3, [pc, #204]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 8008384:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008386:	4b33      	ldr	r3, [pc, #204]	@ (8008454 <RCCEx_PLL2_Config+0x12c>)
 8008388:	4013      	ands	r3, r2
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	6892      	ldr	r2, [r2, #8]
 800838e:	3a01      	subs	r2, #1
 8008390:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	68d2      	ldr	r2, [r2, #12]
 8008398:	3a01      	subs	r2, #1
 800839a:	0252      	lsls	r2, r2, #9
 800839c:	b292      	uxth	r2, r2
 800839e:	4311      	orrs	r1, r2
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	6912      	ldr	r2, [r2, #16]
 80083a4:	3a01      	subs	r2, #1
 80083a6:	0412      	lsls	r2, r2, #16
 80083a8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80083ac:	4311      	orrs	r1, r2
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	6952      	ldr	r2, [r2, #20]
 80083b2:	3a01      	subs	r2, #1
 80083b4:	0612      	lsls	r2, r2, #24
 80083b6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80083ba:	430a      	orrs	r2, r1
 80083bc:	4924      	ldr	r1, [pc, #144]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80083c2:	4b23      	ldr	r3, [pc, #140]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 80083c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c6:	f023 020c 	bic.w	r2, r3, #12
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	4920      	ldr	r1, [pc, #128]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80083d4:	4b1e      	ldr	r3, [pc, #120]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 80083d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a1b      	ldr	r3, [r3, #32]
 80083dc:	491c      	ldr	r1, [pc, #112]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80083e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 80083e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e6:	4a1a      	ldr	r2, [pc, #104]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 80083e8:	f023 0310 	bic.w	r3, r3, #16
 80083ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80083ee:	4b18      	ldr	r3, [pc, #96]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 80083f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083f6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	69d2      	ldr	r2, [r2, #28]
 80083fe:	00d2      	lsls	r2, r2, #3
 8008400:	4913      	ldr	r1, [pc, #76]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 8008402:	4313      	orrs	r3, r2
 8008404:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008406:	4b12      	ldr	r3, [pc, #72]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 8008408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840a:	4a11      	ldr	r2, [pc, #68]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 800840c:	f043 0310 	orr.w	r3, r3, #16
 8008410:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008412:	4b0f      	ldr	r3, [pc, #60]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a0e      	ldr	r2, [pc, #56]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 8008418:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800841c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800841e:	f7fb f8ef 	bl	8003600 <HAL_GetTick>
 8008422:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008424:	e008      	b.n	8008438 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008426:	f7fb f8eb 	bl	8003600 <HAL_GetTick>
 800842a:	4602      	mov	r2, r0
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	2b02      	cmp	r3, #2
 8008432:	d901      	bls.n	8008438 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e006      	b.n	8008446 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008438:	4b05      	ldr	r3, [pc, #20]	@ (8008450 <RCCEx_PLL2_Config+0x128>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d0f0      	beq.n	8008426 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008444:	2300      	movs	r3, #0

}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	46020c00 	.word	0x46020c00
 8008454:	80800000 	.word	0x80800000

08008458 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008460:	4b47      	ldr	r3, [pc, #284]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a46      	ldr	r2, [pc, #280]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 8008466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800846a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800846c:	f7fb f8c8 	bl	8003600 <HAL_GetTick>
 8008470:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008472:	e008      	b.n	8008486 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008474:	f7fb f8c4 	bl	8003600 <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	2b02      	cmp	r3, #2
 8008480:	d901      	bls.n	8008486 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e077      	b.n	8008576 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008486:	4b3e      	ldr	r3, [pc, #248]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1f0      	bne.n	8008474 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008492:	4b3b      	ldr	r3, [pc, #236]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 8008494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008496:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800849a:	f023 0303 	bic.w	r3, r3, #3
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	6811      	ldr	r1, [r2, #0]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	6852      	ldr	r2, [r2, #4]
 80084a6:	3a01      	subs	r2, #1
 80084a8:	0212      	lsls	r2, r2, #8
 80084aa:	430a      	orrs	r2, r1
 80084ac:	4934      	ldr	r1, [pc, #208]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	630b      	str	r3, [r1, #48]	@ 0x30
 80084b2:	4b33      	ldr	r3, [pc, #204]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 80084b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084b6:	4b33      	ldr	r3, [pc, #204]	@ (8008584 <RCCEx_PLL3_Config+0x12c>)
 80084b8:	4013      	ands	r3, r2
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6892      	ldr	r2, [r2, #8]
 80084be:	3a01      	subs	r2, #1
 80084c0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	68d2      	ldr	r2, [r2, #12]
 80084c8:	3a01      	subs	r2, #1
 80084ca:	0252      	lsls	r2, r2, #9
 80084cc:	b292      	uxth	r2, r2
 80084ce:	4311      	orrs	r1, r2
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	6912      	ldr	r2, [r2, #16]
 80084d4:	3a01      	subs	r2, #1
 80084d6:	0412      	lsls	r2, r2, #16
 80084d8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80084dc:	4311      	orrs	r1, r2
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	6952      	ldr	r2, [r2, #20]
 80084e2:	3a01      	subs	r2, #1
 80084e4:	0612      	lsls	r2, r2, #24
 80084e6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80084ea:	430a      	orrs	r2, r1
 80084ec:	4924      	ldr	r1, [pc, #144]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80084f2:	4b23      	ldr	r3, [pc, #140]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 80084f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084f6:	f023 020c 	bic.w	r2, r3, #12
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	4920      	ldr	r1, [pc, #128]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 8008500:	4313      	orrs	r3, r2
 8008502:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008504:	4b1e      	ldr	r3, [pc, #120]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 8008506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	491c      	ldr	r1, [pc, #112]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 800850e:	4313      	orrs	r3, r2
 8008510:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008512:	4b1b      	ldr	r3, [pc, #108]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 8008514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008516:	4a1a      	ldr	r2, [pc, #104]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 8008518:	f023 0310 	bic.w	r3, r3, #16
 800851c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800851e:	4b18      	ldr	r3, [pc, #96]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 8008520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008526:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	69d2      	ldr	r2, [r2, #28]
 800852e:	00d2      	lsls	r2, r2, #3
 8008530:	4913      	ldr	r1, [pc, #76]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 8008532:	4313      	orrs	r3, r2
 8008534:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008536:	4b12      	ldr	r3, [pc, #72]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 8008538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800853a:	4a11      	ldr	r2, [pc, #68]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 800853c:	f043 0310 	orr.w	r3, r3, #16
 8008540:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008542:	4b0f      	ldr	r3, [pc, #60]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a0e      	ldr	r2, [pc, #56]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 8008548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800854c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800854e:	f7fb f857 	bl	8003600 <HAL_GetTick>
 8008552:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008554:	e008      	b.n	8008568 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008556:	f7fb f853 	bl	8003600 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d901      	bls.n	8008568 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e006      	b.n	8008576 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008568:	4b05      	ldr	r3, [pc, #20]	@ (8008580 <RCCEx_PLL3_Config+0x128>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0f0      	beq.n	8008556 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	46020c00 	.word	0x46020c00
 8008584:	80800000 	.word	0x80800000

08008588 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e0fb      	b.n	8008792 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a7f      	ldr	r2, [pc, #508]	@ (800879c <HAL_SPI_Init+0x214>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d004      	beq.n	80085ae <HAL_SPI_Init+0x26>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a7d      	ldr	r2, [pc, #500]	@ (80087a0 <HAL_SPI_Init+0x218>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	e000      	b.n	80085b0 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80085ae:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a78      	ldr	r2, [pc, #480]	@ (800879c <HAL_SPI_Init+0x214>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d004      	beq.n	80085ca <HAL_SPI_Init+0x42>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a76      	ldr	r2, [pc, #472]	@ (80087a0 <HAL_SPI_Init+0x218>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d105      	bne.n	80085d6 <HAL_SPI_Init+0x4e>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	2b0f      	cmp	r3, #15
 80085d0:	d901      	bls.n	80085d6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e0dd      	b.n	8008792 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fd6c 	bl	80090b4 <SPI_GetPacketSize>
 80085dc:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a6e      	ldr	r2, [pc, #440]	@ (800879c <HAL_SPI_Init+0x214>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d004      	beq.n	80085f2 <HAL_SPI_Init+0x6a>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a6c      	ldr	r2, [pc, #432]	@ (80087a0 <HAL_SPI_Init+0x218>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d102      	bne.n	80085f8 <HAL_SPI_Init+0x70>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d816      	bhi.n	8008626 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80085fc:	4a69      	ldr	r2, [pc, #420]	@ (80087a4 <HAL_SPI_Init+0x21c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00e      	beq.n	8008620 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a68      	ldr	r2, [pc, #416]	@ (80087a8 <HAL_SPI_Init+0x220>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d009      	beq.n	8008620 <HAL_SPI_Init+0x98>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a66      	ldr	r2, [pc, #408]	@ (80087ac <HAL_SPI_Init+0x224>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d004      	beq.n	8008620 <HAL_SPI_Init+0x98>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a65      	ldr	r2, [pc, #404]	@ (80087b0 <HAL_SPI_Init+0x228>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d104      	bne.n	800862a <HAL_SPI_Init+0xa2>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b10      	cmp	r3, #16
 8008624:	d901      	bls.n	800862a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e0b3      	b.n	8008792 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d106      	bne.n	8008644 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7fa fb2a 	bl	8002c98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f022 0201 	bic.w	r2, r2, #1
 800865a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008666:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008670:	d119      	bne.n	80086a6 <HAL_SPI_Init+0x11e>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800867a:	d103      	bne.n	8008684 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008680:	2b00      	cmp	r3, #0
 8008682:	d008      	beq.n	8008696 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10c      	bne.n	80086a6 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008690:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008694:	d107      	bne.n	80086a6 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00f      	beq.n	80086d2 <HAL_SPI_Init+0x14a>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	2b06      	cmp	r3, #6
 80086b8:	d90b      	bls.n	80086d2 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	430a      	orrs	r2, r1
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	e007      	b.n	80086e2 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80086e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	69da      	ldr	r2, [r3, #28]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ea:	431a      	orrs	r2, r3
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	431a      	orrs	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086f4:	ea42 0103 	orr.w	r1, r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800870c:	431a      	orrs	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008712:	431a      	orrs	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	431a      	orrs	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	431a      	orrs	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	431a      	orrs	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	431a      	orrs	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	431a      	orrs	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008736:	431a      	orrs	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	431a      	orrs	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008742:	431a      	orrs	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008748:	431a      	orrs	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800874e:	ea42 0103 	orr.w	r1, r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	430a      	orrs	r2, r1
 800875c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00a      	beq.n	8008780 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	430a      	orrs	r2, r1
 800877e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	46002000 	.word	0x46002000
 80087a0:	56002000 	.word	0x56002000
 80087a4:	40013000 	.word	0x40013000
 80087a8:	50013000 	.word	0x50013000
 80087ac:	40003800 	.word	0x40003800
 80087b0:	50003800 	.word	0x50003800

080087b4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b088      	sub	sp, #32
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	603b      	str	r3, [r7, #0]
 80087c0:	4613      	mov	r3, r2
 80087c2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3320      	adds	r3, #32
 80087ca:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087cc:	f7fa ff18 	bl	8003600 <HAL_GetTick>
 80087d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d001      	beq.n	80087e2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80087de:	2302      	movs	r3, #2
 80087e0:	e1f3      	b.n	8008bca <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <HAL_SPI_Transmit+0x3a>
 80087e8:	88fb      	ldrh	r3, [r7, #6]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e1eb      	b.n	8008bca <HAL_SPI_Transmit+0x416>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d101      	bne.n	8008800 <HAL_SPI_Transmit+0x4c>
 80087fc:	2302      	movs	r3, #2
 80087fe:	e1e4      	b.n	8008bca <HAL_SPI_Transmit+0x416>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2203      	movs	r2, #3
 800880c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	88fa      	ldrh	r2, [r7, #6]
 8008822:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	88fa      	ldrh	r2, [r7, #6]
 800882a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008858:	d108      	bne.n	800886c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	e009      	b.n	8008880 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800887e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	0c1b      	lsrs	r3, r3, #16
 8008888:	041b      	lsls	r3, r3, #16
 800888a:	88f9      	ldrh	r1, [r7, #6]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	6812      	ldr	r2, [r2, #0]
 8008890:	430b      	orrs	r3, r1
 8008892:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f042 0201 	orr.w	r2, r2, #1
 80088a2:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10c      	bne.n	80088cc <HAL_SPI_Transmit+0x118>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088ba:	d107      	bne.n	80088cc <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	2b0f      	cmp	r3, #15
 80088d2:	d95b      	bls.n	800898c <HAL_SPI_Transmit+0x1d8>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a8f      	ldr	r2, [pc, #572]	@ (8008b18 <HAL_SPI_Transmit+0x364>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d04f      	beq.n	800897e <HAL_SPI_Transmit+0x1ca>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a8e      	ldr	r2, [pc, #568]	@ (8008b1c <HAL_SPI_Transmit+0x368>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d04a      	beq.n	800897e <HAL_SPI_Transmit+0x1ca>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a8c      	ldr	r2, [pc, #560]	@ (8008b20 <HAL_SPI_Transmit+0x36c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d045      	beq.n	800897e <HAL_SPI_Transmit+0x1ca>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a8b      	ldr	r2, [pc, #556]	@ (8008b24 <HAL_SPI_Transmit+0x370>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d147      	bne.n	800898c <HAL_SPI_Transmit+0x1d8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80088fc:	e03f      	b.n	800897e <HAL_SPI_Transmit+0x1ca>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	f003 0302 	and.w	r3, r3, #2
 8008908:	2b02      	cmp	r3, #2
 800890a:	d114      	bne.n	8008936 <HAL_SPI_Transmit+0x182>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6812      	ldr	r2, [r2, #0]
 8008916:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800891c:	1d1a      	adds	r2, r3, #4
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008928:	b29b      	uxth	r3, r3
 800892a:	3b01      	subs	r3, #1
 800892c:	b29a      	uxth	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008934:	e023      	b.n	800897e <HAL_SPI_Transmit+0x1ca>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008936:	f7fa fe63 	bl	8003600 <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	683a      	ldr	r2, [r7, #0]
 8008942:	429a      	cmp	r2, r3
 8008944:	d803      	bhi.n	800894e <HAL_SPI_Transmit+0x19a>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894c:	d102      	bne.n	8008954 <HAL_SPI_Transmit+0x1a0>
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d114      	bne.n	800897e <HAL_SPI_Transmit+0x1ca>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 fadf 	bl	8008f18 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008960:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	e125      	b.n	8008bca <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008984:	b29b      	uxth	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1b9      	bne.n	80088fe <HAL_SPI_Transmit+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800898a:	e0f8      	b.n	8008b7e <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	2b07      	cmp	r3, #7
 8008992:	f240 80ed 	bls.w	8008b70 <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008996:	e05d      	b.n	8008a54 <HAL_SPI_Transmit+0x2a0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d132      	bne.n	8008a0c <HAL_SPI_Transmit+0x258>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d918      	bls.n	80089e4 <HAL_SPI_Transmit+0x230>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d014      	beq.n	80089e4 <HAL_SPI_Transmit+0x230>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	6812      	ldr	r2, [r2, #0]
 80089c4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089ca:	1d1a      	adds	r2, r3, #4
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	3b02      	subs	r3, #2
 80089da:	b29a      	uxth	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80089e2:	e037      	b.n	8008a54 <HAL_SPI_Transmit+0x2a0>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089e8:	881a      	ldrh	r2, [r3, #0]
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089f2:	1c9a      	adds	r2, r3, #2
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	3b01      	subs	r3, #1
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008a0a:	e023      	b.n	8008a54 <HAL_SPI_Transmit+0x2a0>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a0c:	f7fa fdf8 	bl	8003600 <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d803      	bhi.n	8008a24 <HAL_SPI_Transmit+0x270>
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a22:	d102      	bne.n	8008a2a <HAL_SPI_Transmit+0x276>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d114      	bne.n	8008a54 <HAL_SPI_Transmit+0x2a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 fa74 	bl	8008f18 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e0ba      	b.n	8008bca <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d19b      	bne.n	8008998 <HAL_SPI_Transmit+0x1e4>
 8008a60:	e08d      	b.n	8008b7e <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	f003 0302 	and.w	r3, r3, #2
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d15b      	bne.n	8008b28 <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	2b03      	cmp	r3, #3
 8008a7a:	d918      	bls.n	8008aae <HAL_SPI_Transmit+0x2fa>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a80:	2b40      	cmp	r3, #64	@ 0x40
 8008a82:	d914      	bls.n	8008aae <HAL_SPI_Transmit+0x2fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6812      	ldr	r2, [r2, #0]
 8008a8e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a94:	1d1a      	adds	r2, r3, #4
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3b04      	subs	r3, #4
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008aac:	e060      	b.n	8008b70 <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d917      	bls.n	8008aea <HAL_SPI_Transmit+0x336>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d013      	beq.n	8008aea <HAL_SPI_Transmit+0x336>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ac6:	881a      	ldrh	r2, [r3, #0]
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ad0:	1c9a      	adds	r2, r3, #2
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	3b02      	subs	r3, #2
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008ae8:	e042      	b.n	8008b70 <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3320      	adds	r3, #32
 8008af4:	7812      	ldrb	r2, [r2, #0]
 8008af6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008afc:	1c5a      	adds	r2, r3, #1
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008b14:	e02c      	b.n	8008b70 <HAL_SPI_Transmit+0x3bc>
 8008b16:	bf00      	nop
 8008b18:	40013000 	.word	0x40013000
 8008b1c:	50013000 	.word	0x50013000
 8008b20:	40003800 	.word	0x40003800
 8008b24:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b28:	f7fa fd6a 	bl	8003600 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d803      	bhi.n	8008b40 <HAL_SPI_Transmit+0x38c>
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3e:	d102      	bne.n	8008b46 <HAL_SPI_Transmit+0x392>
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d114      	bne.n	8008b70 <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 f9e6 	bl	8008f18 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e02c      	b.n	8008bca <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f47f af72 	bne.w	8008a62 <HAL_SPI_Transmit+0x2ae>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2200      	movs	r2, #0
 8008b86:	2108      	movs	r1, #8
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 fa65 	bl	8009058 <SPI_WaitOnFlagUntilTimeout>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d007      	beq.n	8008ba4 <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b9a:	f043 0220 	orr.w	r2, r3, #32
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 f9b7 	bl	8008f18 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e000      	b.n	8008bca <HAL_SPI_Transmit+0x416>
  }
  else
  {
    return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
  }
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3718      	adds	r7, #24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop

08008bd4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	603b      	str	r3, [r7, #0]
 8008be0:	4613      	mov	r3, r2
 8008be2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3330      	adds	r3, #48	@ 0x30
 8008bea:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bec:	f7fa fd08 	bl	8003600 <HAL_GetTick>
 8008bf0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d001      	beq.n	8008c02 <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 8008bfe:	2302      	movs	r3, #2
 8008c00:	e17e      	b.n	8008f00 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <HAL_SPI_Receive+0x3a>
 8008c08:	88fb      	ldrh	r3, [r7, #6]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e176      	b.n	8008f00 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d101      	bne.n	8008c20 <HAL_SPI_Receive+0x4c>
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	e16f      	b.n	8008f00 <HAL_SPI_Receive+0x32c>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2204      	movs	r2, #4
 8008c2c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	88fa      	ldrh	r2, [r7, #6]
 8008c42:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	88fa      	ldrh	r2, [r7, #6]
 8008c4a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008c78:	d108      	bne.n	8008c8c <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c88:	601a      	str	r2, [r3, #0]
 8008c8a:	e009      	b.n	8008ca0 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008c9e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	0c1b      	lsrs	r3, r3, #16
 8008ca8:	041b      	lsls	r3, r3, #16
 8008caa:	88f9      	ldrh	r1, [r7, #6]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	6812      	ldr	r2, [r2, #0]
 8008cb0:	430b      	orrs	r3, r1
 8008cb2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0201 	orr.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10c      	bne.n	8008cec <HAL_SPI_Receive+0x118>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cda:	d107      	bne.n	8008cec <HAL_SPI_Receive+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	2b0f      	cmp	r3, #15
 8008cf2:	d95c      	bls.n	8008dae <HAL_SPI_Receive+0x1da>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a83      	ldr	r2, [pc, #524]	@ (8008f08 <HAL_SPI_Receive+0x334>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d050      	beq.n	8008da0 <HAL_SPI_Receive+0x1cc>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a82      	ldr	r2, [pc, #520]	@ (8008f0c <HAL_SPI_Receive+0x338>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d04b      	beq.n	8008da0 <HAL_SPI_Receive+0x1cc>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a80      	ldr	r2, [pc, #512]	@ (8008f10 <HAL_SPI_Receive+0x33c>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d046      	beq.n	8008da0 <HAL_SPI_Receive+0x1cc>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a7f      	ldr	r2, [pc, #508]	@ (8008f14 <HAL_SPI_Receive+0x340>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d148      	bne.n	8008dae <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008d1c:	e040      	b.n	8008da0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	695a      	ldr	r2, [r3, #20]
 8008d24:	f248 0308 	movw	r3, #32776	@ 0x8008
 8008d28:	4013      	ands	r3, r2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d014      	beq.n	8008d58 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008d38:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d3e:	1d1a      	adds	r2, r3, #4
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008d56:	e023      	b.n	8008da0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d58:	f7fa fc52 	bl	8003600 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d803      	bhi.n	8008d70 <HAL_SPI_Receive+0x19c>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6e:	d102      	bne.n	8008d76 <HAL_SPI_Receive+0x1a2>
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d114      	bne.n	8008da0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f000 f8ce 	bl	8008f18 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e0af      	b.n	8008f00 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1b8      	bne.n	8008d1e <HAL_SPI_Receive+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008dac:	e095      	b.n	8008eda <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	2b07      	cmp	r3, #7
 8008db4:	f240 808b 	bls.w	8008ece <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008db8:	e03f      	b.n	8008e3a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d114      	bne.n	8008df2 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	8812      	ldrh	r2, [r2, #0]
 8008dd0:	b292      	uxth	r2, r2
 8008dd2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dd8:	1c9a      	adds	r2, r3, #2
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	3b01      	subs	r3, #1
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008df0:	e023      	b.n	8008e3a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008df2:	f7fa fc05 	bl	8003600 <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	683a      	ldr	r2, [r7, #0]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d803      	bhi.n	8008e0a <HAL_SPI_Receive+0x236>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e08:	d102      	bne.n	8008e10 <HAL_SPI_Receive+0x23c>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d114      	bne.n	8008e3a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f000 f881 	bl	8008f18 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e062      	b.n	8008f00 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1b9      	bne.n	8008dba <HAL_SPI_Receive+0x1e6>
 8008e46:	e048      	b.n	8008eda <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d117      	bne.n	8008e86 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e62:	7812      	ldrb	r2, [r2, #0]
 8008e64:	b2d2      	uxtb	r2, r2
 8008e66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008e84:	e023      	b.n	8008ece <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e86:	f7fa fbbb 	bl	8003600 <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d803      	bhi.n	8008e9e <HAL_SPI_Receive+0x2ca>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9c:	d102      	bne.n	8008ea4 <HAL_SPI_Receive+0x2d0>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d114      	bne.n	8008ece <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f837 	bl	8008f18 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eb0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e018      	b.n	8008f00 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1b6      	bne.n	8008e48 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f000 f81c 	bl	8008f18 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e000      	b.n	8008f00 <HAL_SPI_Receive+0x32c>
  }
  else
  {
    return HAL_OK;
 8008efe:	2300      	movs	r3, #0
  }
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	40013000 	.word	0x40013000
 8008f0c:	50013000 	.word	0x50013000
 8008f10:	40003800 	.word	0x40003800
 8008f14:	50003800 	.word	0x50003800

08008f18 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	699a      	ldr	r2, [r3, #24]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f042 0208 	orr.w	r2, r2, #8
 8008f36:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	699a      	ldr	r2, [r3, #24]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f042 0210 	orr.w	r2, r2, #16
 8008f46:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 0201 	bic.w	r2, r2, #1
 8008f56:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6812      	ldr	r2, [r2, #0]
 8008f62:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008f66:	f023 0303 	bic.w	r3, r3, #3
 8008f6a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	689a      	ldr	r2, [r3, #8]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008f7a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b04      	cmp	r3, #4
 8008f86:	d014      	beq.n	8008fb2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f003 0320 	and.w	r3, r3, #32
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00f      	beq.n	8008fb2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	699a      	ldr	r2, [r3, #24]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f042 0220 	orr.w	r2, r2, #32
 8008fb0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d014      	beq.n	8008fe8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00f      	beq.n	8008fe8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fce:	f043 0204 	orr.w	r2, r3, #4
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	699a      	ldr	r2, [r3, #24]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fe6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00f      	beq.n	8009012 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ff8:	f043 0201 	orr.w	r2, r3, #1
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	699a      	ldr	r2, [r3, #24]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009010:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00f      	beq.n	800903c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009022:	f043 0208 	orr.w	r2, r3, #8
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	699a      	ldr	r2, [r3, #24]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800903a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800904c:	bf00      	nop
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	603b      	str	r3, [r7, #0]
 8009064:	4613      	mov	r3, r2
 8009066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009068:	e010      	b.n	800908c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800906a:	f7fa fac9 	bl	8003600 <HAL_GetTick>
 800906e:	4602      	mov	r2, r0
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	429a      	cmp	r2, r3
 8009078:	d803      	bhi.n	8009082 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009080:	d102      	bne.n	8009088 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e00f      	b.n	80090ac <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	695a      	ldr	r2, [r3, #20]
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	4013      	ands	r3, r2
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	429a      	cmp	r2, r3
 800909a:	bf0c      	ite	eq
 800909c:	2301      	moveq	r3, #1
 800909e:	2300      	movne	r3, #0
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	461a      	mov	r2, r3
 80090a4:	79fb      	ldrb	r3, [r7, #7]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d0df      	beq.n	800906a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090c0:	095b      	lsrs	r3, r3, #5
 80090c2:	3301      	adds	r3, #1
 80090c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	3301      	adds	r3, #1
 80090cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	3307      	adds	r3, #7
 80090d2:	08db      	lsrs	r3, r3, #3
 80090d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	fb02 f303 	mul.w	r3, r2, r3
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d12e      	bne.n	800915e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009106:	2b01      	cmp	r3, #1
 8009108:	d101      	bne.n	800910e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800910a:	2302      	movs	r3, #2
 800910c:	e028      	b.n	8009160 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2202      	movs	r2, #2
 800911a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f022 0201 	bic.w	r2, r2, #1
 800912c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800913a:	ea42 0103 	orr.w	r1, r2, r3
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	689a      	ldr	r2, [r3, #8]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	430a      	orrs	r2, r1
 8009148:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	e000      	b.n	8009160 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800915e:	2301      	movs	r3, #1
  }
}
 8009160:	4618      	mov	r0, r3
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e049      	b.n	8009212 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	d106      	bne.n	8009198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7f9 fdea 	bl	8002d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	3304      	adds	r3, #4
 80091a8:	4619      	mov	r1, r3
 80091aa:	4610      	mov	r0, r2
 80091ac:	f000 f938 	bl	8009420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
	...

0800921c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009230:	2b01      	cmp	r3, #1
 8009232:	d101      	bne.n	8009238 <HAL_TIM_ConfigClockSource+0x1c>
 8009234:	2302      	movs	r3, #2
 8009236:	e0e6      	b.n	8009406 <HAL_TIM_ConfigClockSource+0x1ea>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2202      	movs	r2, #2
 8009244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009256:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800925a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a67      	ldr	r2, [pc, #412]	@ (8009410 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009272:	4293      	cmp	r3, r2
 8009274:	f000 80b1 	beq.w	80093da <HAL_TIM_ConfigClockSource+0x1be>
 8009278:	4a65      	ldr	r2, [pc, #404]	@ (8009410 <HAL_TIM_ConfigClockSource+0x1f4>)
 800927a:	4293      	cmp	r3, r2
 800927c:	f200 80b6 	bhi.w	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 8009280:	4a64      	ldr	r2, [pc, #400]	@ (8009414 <HAL_TIM_ConfigClockSource+0x1f8>)
 8009282:	4293      	cmp	r3, r2
 8009284:	f000 80a9 	beq.w	80093da <HAL_TIM_ConfigClockSource+0x1be>
 8009288:	4a62      	ldr	r2, [pc, #392]	@ (8009414 <HAL_TIM_ConfigClockSource+0x1f8>)
 800928a:	4293      	cmp	r3, r2
 800928c:	f200 80ae 	bhi.w	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 8009290:	4a61      	ldr	r2, [pc, #388]	@ (8009418 <HAL_TIM_ConfigClockSource+0x1fc>)
 8009292:	4293      	cmp	r3, r2
 8009294:	f000 80a1 	beq.w	80093da <HAL_TIM_ConfigClockSource+0x1be>
 8009298:	4a5f      	ldr	r2, [pc, #380]	@ (8009418 <HAL_TIM_ConfigClockSource+0x1fc>)
 800929a:	4293      	cmp	r3, r2
 800929c:	f200 80a6 	bhi.w	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092a0:	4a5e      	ldr	r2, [pc, #376]	@ (800941c <HAL_TIM_ConfigClockSource+0x200>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	f000 8099 	beq.w	80093da <HAL_TIM_ConfigClockSource+0x1be>
 80092a8:	4a5c      	ldr	r2, [pc, #368]	@ (800941c <HAL_TIM_ConfigClockSource+0x200>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	f200 809e 	bhi.w	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092b4:	f000 8091 	beq.w	80093da <HAL_TIM_ConfigClockSource+0x1be>
 80092b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092bc:	f200 8096 	bhi.w	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092c4:	f000 8089 	beq.w	80093da <HAL_TIM_ConfigClockSource+0x1be>
 80092c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092cc:	f200 808e 	bhi.w	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092d4:	d03e      	beq.n	8009354 <HAL_TIM_ConfigClockSource+0x138>
 80092d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092da:	f200 8087 	bhi.w	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092e2:	f000 8086 	beq.w	80093f2 <HAL_TIM_ConfigClockSource+0x1d6>
 80092e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ea:	d87f      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092ec:	2b70      	cmp	r3, #112	@ 0x70
 80092ee:	d01a      	beq.n	8009326 <HAL_TIM_ConfigClockSource+0x10a>
 80092f0:	2b70      	cmp	r3, #112	@ 0x70
 80092f2:	d87b      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092f4:	2b60      	cmp	r3, #96	@ 0x60
 80092f6:	d050      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x17e>
 80092f8:	2b60      	cmp	r3, #96	@ 0x60
 80092fa:	d877      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 80092fc:	2b50      	cmp	r3, #80	@ 0x50
 80092fe:	d03c      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x15e>
 8009300:	2b50      	cmp	r3, #80	@ 0x50
 8009302:	d873      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 8009304:	2b40      	cmp	r3, #64	@ 0x40
 8009306:	d058      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x19e>
 8009308:	2b40      	cmp	r3, #64	@ 0x40
 800930a:	d86f      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 800930c:	2b30      	cmp	r3, #48	@ 0x30
 800930e:	d064      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x1be>
 8009310:	2b30      	cmp	r3, #48	@ 0x30
 8009312:	d86b      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 8009314:	2b20      	cmp	r3, #32
 8009316:	d060      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x1be>
 8009318:	2b20      	cmp	r3, #32
 800931a:	d867      	bhi.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
 800931c:	2b00      	cmp	r3, #0
 800931e:	d05c      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x1be>
 8009320:	2b10      	cmp	r3, #16
 8009322:	d05a      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x1be>
 8009324:	e062      	b.n	80093ec <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009336:	f000 f9f5 	bl	8009724 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009348:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	609a      	str	r2, [r3, #8]
      break;
 8009352:	e04f      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009364:	f000 f9de 	bl	8009724 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689a      	ldr	r2, [r3, #8]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009376:	609a      	str	r2, [r3, #8]
      break;
 8009378:	e03c      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009386:	461a      	mov	r2, r3
 8009388:	f000 f950 	bl	800962c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2150      	movs	r1, #80	@ 0x50
 8009392:	4618      	mov	r0, r3
 8009394:	f000 f9a9 	bl	80096ea <TIM_ITRx_SetConfig>
      break;
 8009398:	e02c      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093a6:	461a      	mov	r2, r3
 80093a8:	f000 f96f 	bl	800968a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2160      	movs	r1, #96	@ 0x60
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 f999 	bl	80096ea <TIM_ITRx_SetConfig>
      break;
 80093b8:	e01c      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093c6:	461a      	mov	r2, r3
 80093c8:	f000 f930 	bl	800962c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2140      	movs	r1, #64	@ 0x40
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 f989 	bl	80096ea <TIM_ITRx_SetConfig>
      break;
 80093d8:	e00c      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4619      	mov	r1, r3
 80093e4:	4610      	mov	r0, r2
 80093e6:	f000 f980 	bl	80096ea <TIM_ITRx_SetConfig>
      break;
 80093ea:	e003      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	73fb      	strb	r3, [r7, #15]
      break;
 80093f0:	e000      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80093f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009404:	7bfb      	ldrb	r3, [r7, #15]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	00100070 	.word	0x00100070
 8009414:	00100040 	.word	0x00100040
 8009418:	00100030 	.word	0x00100030
 800941c:	00100020 	.word	0x00100020

08009420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a6e      	ldr	r2, [pc, #440]	@ (80095ec <TIM_Base_SetConfig+0x1cc>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d02b      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a6d      	ldr	r2, [pc, #436]	@ (80095f0 <TIM_Base_SetConfig+0x1d0>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d027      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009446:	d023      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800944e:	d01f      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a68      	ldr	r2, [pc, #416]	@ (80095f4 <TIM_Base_SetConfig+0x1d4>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d01b      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a67      	ldr	r2, [pc, #412]	@ (80095f8 <TIM_Base_SetConfig+0x1d8>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d017      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a66      	ldr	r2, [pc, #408]	@ (80095fc <TIM_Base_SetConfig+0x1dc>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d013      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a65      	ldr	r2, [pc, #404]	@ (8009600 <TIM_Base_SetConfig+0x1e0>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d00f      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a64      	ldr	r2, [pc, #400]	@ (8009604 <TIM_Base_SetConfig+0x1e4>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d00b      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a63      	ldr	r2, [pc, #396]	@ (8009608 <TIM_Base_SetConfig+0x1e8>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d007      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a62      	ldr	r2, [pc, #392]	@ (800960c <TIM_Base_SetConfig+0x1ec>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d003      	beq.n	8009490 <TIM_Base_SetConfig+0x70>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a61      	ldr	r2, [pc, #388]	@ (8009610 <TIM_Base_SetConfig+0x1f0>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d108      	bne.n	80094a2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	4313      	orrs	r3, r2
 80094a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a51      	ldr	r2, [pc, #324]	@ (80095ec <TIM_Base_SetConfig+0x1cc>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d043      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a50      	ldr	r2, [pc, #320]	@ (80095f0 <TIM_Base_SetConfig+0x1d0>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d03f      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094b8:	d03b      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094c0:	d037      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a4b      	ldr	r2, [pc, #300]	@ (80095f4 <TIM_Base_SetConfig+0x1d4>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d033      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a4a      	ldr	r2, [pc, #296]	@ (80095f8 <TIM_Base_SetConfig+0x1d8>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d02f      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a49      	ldr	r2, [pc, #292]	@ (80095fc <TIM_Base_SetConfig+0x1dc>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d02b      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a48      	ldr	r2, [pc, #288]	@ (8009600 <TIM_Base_SetConfig+0x1e0>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d027      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a47      	ldr	r2, [pc, #284]	@ (8009604 <TIM_Base_SetConfig+0x1e4>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d023      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a46      	ldr	r2, [pc, #280]	@ (8009608 <TIM_Base_SetConfig+0x1e8>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d01f      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a45      	ldr	r2, [pc, #276]	@ (800960c <TIM_Base_SetConfig+0x1ec>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d01b      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a44      	ldr	r2, [pc, #272]	@ (8009610 <TIM_Base_SetConfig+0x1f0>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d017      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a43      	ldr	r2, [pc, #268]	@ (8009614 <TIM_Base_SetConfig+0x1f4>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d013      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a42      	ldr	r2, [pc, #264]	@ (8009618 <TIM_Base_SetConfig+0x1f8>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d00f      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a41      	ldr	r2, [pc, #260]	@ (800961c <TIM_Base_SetConfig+0x1fc>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d00b      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a40      	ldr	r2, [pc, #256]	@ (8009620 <TIM_Base_SetConfig+0x200>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d007      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a3f      	ldr	r2, [pc, #252]	@ (8009624 <TIM_Base_SetConfig+0x204>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d003      	beq.n	8009532 <TIM_Base_SetConfig+0x112>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a3e      	ldr	r2, [pc, #248]	@ (8009628 <TIM_Base_SetConfig+0x208>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d108      	bne.n	8009544 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	4313      	orrs	r3, r2
 8009542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	4313      	orrs	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a20      	ldr	r2, [pc, #128]	@ (80095ec <TIM_Base_SetConfig+0x1cc>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d023      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a1f      	ldr	r2, [pc, #124]	@ (80095f0 <TIM_Base_SetConfig+0x1d0>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d01f      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a24      	ldr	r2, [pc, #144]	@ (800960c <TIM_Base_SetConfig+0x1ec>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d01b      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a23      	ldr	r2, [pc, #140]	@ (8009610 <TIM_Base_SetConfig+0x1f0>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d017      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a22      	ldr	r2, [pc, #136]	@ (8009614 <TIM_Base_SetConfig+0x1f4>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d013      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a21      	ldr	r2, [pc, #132]	@ (8009618 <TIM_Base_SetConfig+0x1f8>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d00f      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a20      	ldr	r2, [pc, #128]	@ (800961c <TIM_Base_SetConfig+0x1fc>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d00b      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a1f      	ldr	r2, [pc, #124]	@ (8009620 <TIM_Base_SetConfig+0x200>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d007      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a1e      	ldr	r2, [pc, #120]	@ (8009624 <TIM_Base_SetConfig+0x204>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d003      	beq.n	80095b8 <TIM_Base_SetConfig+0x198>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a1d      	ldr	r2, [pc, #116]	@ (8009628 <TIM_Base_SetConfig+0x208>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d103      	bne.n	80095c0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	691a      	ldr	r2, [r3, #16]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d105      	bne.n	80095de <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	f023 0201 	bic.w	r2, r3, #1
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	611a      	str	r2, [r3, #16]
  }
}
 80095de:	bf00      	nop
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	40012c00 	.word	0x40012c00
 80095f0:	50012c00 	.word	0x50012c00
 80095f4:	40000400 	.word	0x40000400
 80095f8:	50000400 	.word	0x50000400
 80095fc:	40000800 	.word	0x40000800
 8009600:	50000800 	.word	0x50000800
 8009604:	40000c00 	.word	0x40000c00
 8009608:	50000c00 	.word	0x50000c00
 800960c:	40013400 	.word	0x40013400
 8009610:	50013400 	.word	0x50013400
 8009614:	40014000 	.word	0x40014000
 8009618:	50014000 	.word	0x50014000
 800961c:	40014400 	.word	0x40014400
 8009620:	50014400 	.word	0x50014400
 8009624:	40014800 	.word	0x40014800
 8009628:	50014800 	.word	0x50014800

0800962c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800962c:	b480      	push	{r7}
 800962e:	b087      	sub	sp, #28
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6a1b      	ldr	r3, [r3, #32]
 800963c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	f023 0201 	bic.w	r2, r3, #1
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	011b      	lsls	r3, r3, #4
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	4313      	orrs	r3, r2
 8009660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f023 030a 	bic.w	r3, r3, #10
 8009668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	4313      	orrs	r3, r2
 8009670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	621a      	str	r2, [r3, #32]
}
 800967e:	bf00      	nop
 8009680:	371c      	adds	r7, #28
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800968a:	b480      	push	{r7}
 800968c:	b087      	sub	sp, #28
 800968e:	af00      	add	r7, sp, #0
 8009690:	60f8      	str	r0, [r7, #12]
 8009692:	60b9      	str	r1, [r7, #8]
 8009694:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	f023 0210 	bic.w	r2, r3, #16
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80096b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	031b      	lsls	r3, r3, #12
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	4313      	orrs	r3, r2
 80096be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80096c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	011b      	lsls	r3, r3, #4
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	621a      	str	r2, [r3, #32]
}
 80096de:	bf00      	nop
 80096e0:	371c      	adds	r7, #28
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b085      	sub	sp, #20
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009704:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4313      	orrs	r3, r2
 800970c:	f043 0307 	orr.w	r3, r3, #7
 8009710:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	609a      	str	r2, [r3, #8]
}
 8009718:	bf00      	nop
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009724:	b480      	push	{r7}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
 8009730:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800973e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	021a      	lsls	r2, r3, #8
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	431a      	orrs	r2, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	4313      	orrs	r3, r2
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	4313      	orrs	r3, r2
 8009750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	609a      	str	r2, [r3, #8]
}
 8009758:	bf00      	nop
 800975a:	371c      	adds	r7, #28
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009774:	2b01      	cmp	r3, #1
 8009776:	d101      	bne.n	800977c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009778:	2302      	movs	r3, #2
 800977a:	e097      	b.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2202      	movs	r2, #2
 8009788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a45      	ldr	r2, [pc, #276]	@ (80098b8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d00e      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a44      	ldr	r2, [pc, #272]	@ (80098bc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d009      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a42      	ldr	r2, [pc, #264]	@ (80098c0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d004      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a41      	ldr	r2, [pc, #260]	@ (80098c4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d108      	bne.n	80097d6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80097ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80097dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a2f      	ldr	r2, [pc, #188]	@ (80098b8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d040      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a2e      	ldr	r2, [pc, #184]	@ (80098bc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d03b      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009810:	d036      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800981a:	d031      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a29      	ldr	r2, [pc, #164]	@ (80098c8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d02c      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a28      	ldr	r2, [pc, #160]	@ (80098cc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d027      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a26      	ldr	r2, [pc, #152]	@ (80098d0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d022      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a25      	ldr	r2, [pc, #148]	@ (80098d4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d01d      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a23      	ldr	r2, [pc, #140]	@ (80098d8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d018      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a22      	ldr	r2, [pc, #136]	@ (80098dc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d013      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a18      	ldr	r2, [pc, #96]	@ (80098c0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d00e      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a17      	ldr	r2, [pc, #92]	@ (80098c4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d009      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a1b      	ldr	r2, [pc, #108]	@ (80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d004      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a1a      	ldr	r2, [pc, #104]	@ (80098e4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d10c      	bne.n	800989a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009886:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	4313      	orrs	r3, r2
 8009890:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	40012c00 	.word	0x40012c00
 80098bc:	50012c00 	.word	0x50012c00
 80098c0:	40013400 	.word	0x40013400
 80098c4:	50013400 	.word	0x50013400
 80098c8:	40000400 	.word	0x40000400
 80098cc:	50000400 	.word	0x50000400
 80098d0:	40000800 	.word	0x40000800
 80098d4:	50000800 	.word	0x50000800
 80098d8:	40000c00 	.word	0x40000c00
 80098dc:	50000c00 	.word	0x50000c00
 80098e0:	40014000 	.word	0x40014000
 80098e4:	50014000 	.word	0x50014000

080098e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d101      	bne.n	80098fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e042      	b.n	8009980 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009900:	2b00      	cmp	r3, #0
 8009902:	d106      	bne.n	8009912 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f83b 	bl	8009988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2224      	movs	r2, #36	@ 0x24
 8009916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f022 0201 	bic.w	r2, r2, #1
 8009928:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800992e:	2b00      	cmp	r3, #0
 8009930:	d002      	beq.n	8009938 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fa6e 	bl	8009e14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f8bd 	bl	8009ab8 <UART_SetConfig>
 800993e:	4603      	mov	r3, r0
 8009940:	2b01      	cmp	r3, #1
 8009942:	d101      	bne.n	8009948 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e01b      	b.n	8009980 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	689a      	ldr	r2, [r3, #8]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f042 0201 	orr.w	r2, r2, #1
 8009976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 faed 	bl	8009f58 <UART_CheckIdleState>
 800997e:	4603      	mov	r3, r0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b08a      	sub	sp, #40	@ 0x28
 80099a0:	af02      	add	r7, sp, #8
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	603b      	str	r3, [r7, #0]
 80099a8:	4613      	mov	r3, r2
 80099aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099b2:	2b20      	cmp	r3, #32
 80099b4:	d17b      	bne.n	8009aae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d002      	beq.n	80099c2 <HAL_UART_Transmit+0x26>
 80099bc:	88fb      	ldrh	r3, [r7, #6]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d101      	bne.n	80099c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e074      	b.n	8009ab0 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2221      	movs	r2, #33	@ 0x21
 80099d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099d6:	f7f9 fe13 	bl	8003600 <HAL_GetTick>
 80099da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	88fa      	ldrh	r2, [r7, #6]
 80099e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	88fa      	ldrh	r2, [r7, #6]
 80099e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099f4:	d108      	bne.n	8009a08 <HAL_UART_Transmit+0x6c>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d104      	bne.n	8009a08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80099fe:	2300      	movs	r3, #0
 8009a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	61bb      	str	r3, [r7, #24]
 8009a06:	e003      	b.n	8009a10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009a10:	e030      	b.n	8009a74 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	2180      	movs	r1, #128	@ 0x80
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f000 fb45 	bl	800a0ac <UART_WaitOnFlagUntilTimeout>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d005      	beq.n	8009a34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2220      	movs	r2, #32
 8009a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e03d      	b.n	8009ab0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10b      	bne.n	8009a52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	3302      	adds	r3, #2
 8009a4e:	61bb      	str	r3, [r7, #24]
 8009a50:	e007      	b.n	8009a62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	781a      	ldrb	r2, [r3, #0]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1c8      	bne.n	8009a12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2200      	movs	r2, #0
 8009a88:	2140      	movs	r1, #64	@ 0x40
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 fb0e 	bl	800a0ac <UART_WaitOnFlagUntilTimeout>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d005      	beq.n	8009aa2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2220      	movs	r2, #32
 8009a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e006      	b.n	8009ab0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2220      	movs	r2, #32
 8009aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	e000      	b.n	8009ab0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009aae:	2302      	movs	r3, #2
  }
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3720      	adds	r7, #32
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009abc:	b094      	sub	sp, #80	@ 0x50
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	4b83      	ldr	r3, [pc, #524]	@ (8009cdc <UART_SetConfig+0x224>)
 8009ace:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	431a      	orrs	r2, r3
 8009ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	431a      	orrs	r2, r3
 8009ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae2:	69db      	ldr	r3, [r3, #28]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	497c      	ldr	r1, [pc, #496]	@ (8009ce0 <UART_SetConfig+0x228>)
 8009af0:	4019      	ands	r1, r3
 8009af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009af8:	430b      	orrs	r3, r1
 8009afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b08:	68d9      	ldr	r1, [r3, #12]
 8009b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	ea40 0301 	orr.w	r3, r0, r1
 8009b12:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	4b6f      	ldr	r3, [pc, #444]	@ (8009cdc <UART_SetConfig+0x224>)
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d009      	beq.n	8009b38 <UART_SetConfig+0x80>
 8009b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	4b6e      	ldr	r3, [pc, #440]	@ (8009ce4 <UART_SetConfig+0x22c>)
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d004      	beq.n	8009b38 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b30:	6a1a      	ldr	r2, [r3, #32]
 8009b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b34:	4313      	orrs	r3, r2
 8009b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009b42:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b56:	f023 000f 	bic.w	r0, r3, #15
 8009b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b5c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	ea40 0301 	orr.w	r3, r0, r1
 8009b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	4b5e      	ldr	r3, [pc, #376]	@ (8009ce8 <UART_SetConfig+0x230>)
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d102      	bne.n	8009b78 <UART_SetConfig+0xc0>
 8009b72:	2301      	movs	r3, #1
 8009b74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b76:	e032      	b.n	8009bde <UART_SetConfig+0x126>
 8009b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	4b5b      	ldr	r3, [pc, #364]	@ (8009cec <UART_SetConfig+0x234>)
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d102      	bne.n	8009b88 <UART_SetConfig+0xd0>
 8009b82:	2302      	movs	r3, #2
 8009b84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b86:	e02a      	b.n	8009bde <UART_SetConfig+0x126>
 8009b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	4b58      	ldr	r3, [pc, #352]	@ (8009cf0 <UART_SetConfig+0x238>)
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d102      	bne.n	8009b98 <UART_SetConfig+0xe0>
 8009b92:	2304      	movs	r3, #4
 8009b94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b96:	e022      	b.n	8009bde <UART_SetConfig+0x126>
 8009b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	4b55      	ldr	r3, [pc, #340]	@ (8009cf4 <UART_SetConfig+0x23c>)
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d102      	bne.n	8009ba8 <UART_SetConfig+0xf0>
 8009ba2:	2308      	movs	r3, #8
 8009ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ba6:	e01a      	b.n	8009bde <UART_SetConfig+0x126>
 8009ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	4b52      	ldr	r3, [pc, #328]	@ (8009cf8 <UART_SetConfig+0x240>)
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d102      	bne.n	8009bb8 <UART_SetConfig+0x100>
 8009bb2:	2310      	movs	r3, #16
 8009bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bb6:	e012      	b.n	8009bde <UART_SetConfig+0x126>
 8009bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8009cfc <UART_SetConfig+0x244>)
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d103      	bne.n	8009bca <UART_SetConfig+0x112>
 8009bc2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8009bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bc8:	e009      	b.n	8009bde <UART_SetConfig+0x126>
 8009bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	4b43      	ldr	r3, [pc, #268]	@ (8009cdc <UART_SetConfig+0x224>)
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d102      	bne.n	8009bda <UART_SetConfig+0x122>
 8009bd4:	2320      	movs	r3, #32
 8009bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bd8:	e001      	b.n	8009bde <UART_SetConfig+0x126>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	4b3e      	ldr	r3, [pc, #248]	@ (8009cdc <UART_SetConfig+0x224>)
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d005      	beq.n	8009bf4 <UART_SetConfig+0x13c>
 8009be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	4b3d      	ldr	r3, [pc, #244]	@ (8009ce4 <UART_SetConfig+0x22c>)
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	f040 8088 	bne.w	8009d04 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009bf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	623b      	str	r3, [r7, #32]
 8009bfa:	627a      	str	r2, [r7, #36]	@ 0x24
 8009bfc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009c00:	f7fd f830 	bl	8006c64 <HAL_RCCEx_GetPeriphCLKFreq>
 8009c04:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 80eb 	beq.w	8009de4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c12:	4a3b      	ldr	r2, [pc, #236]	@ (8009d00 <UART_SetConfig+0x248>)
 8009c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c20:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	4613      	mov	r3, r2
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	4413      	add	r3, r2
 8009c2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d305      	bcc.n	8009c3e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d903      	bls.n	8009c46 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009c44:	e048      	b.n	8009cd8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c48:	2200      	movs	r2, #0
 8009c4a:	61bb      	str	r3, [r7, #24]
 8009c4c:	61fa      	str	r2, [r7, #28]
 8009c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c52:	4a2b      	ldr	r2, [pc, #172]	@ (8009d00 <UART_SetConfig+0x248>)
 8009c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	613b      	str	r3, [r7, #16]
 8009c5e:	617a      	str	r2, [r7, #20]
 8009c60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009c64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c68:	f7f7 f81e 	bl	8000ca8 <__aeabi_uldivmod>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	460b      	mov	r3, r1
 8009c70:	4610      	mov	r0, r2
 8009c72:	4619      	mov	r1, r3
 8009c74:	f04f 0200 	mov.w	r2, #0
 8009c78:	f04f 0300 	mov.w	r3, #0
 8009c7c:	020b      	lsls	r3, r1, #8
 8009c7e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c82:	0202      	lsls	r2, r0, #8
 8009c84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c86:	6849      	ldr	r1, [r1, #4]
 8009c88:	0849      	lsrs	r1, r1, #1
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	4605      	mov	r5, r0
 8009c90:	eb12 0804 	adds.w	r8, r2, r4
 8009c94:	eb43 0905 	adc.w	r9, r3, r5
 8009c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	60bb      	str	r3, [r7, #8]
 8009ca0:	60fa      	str	r2, [r7, #12]
 8009ca2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	4649      	mov	r1, r9
 8009caa:	f7f6 fffd 	bl	8000ca8 <__aeabi_uldivmod>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cbc:	d308      	bcc.n	8009cd0 <UART_SetConfig+0x218>
 8009cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cc4:	d204      	bcs.n	8009cd0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8009cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009ccc:	60da      	str	r2, [r3, #12]
 8009cce:	e003      	b.n	8009cd8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009cd6:	e085      	b.n	8009de4 <UART_SetConfig+0x32c>
 8009cd8:	e084      	b.n	8009de4 <UART_SetConfig+0x32c>
 8009cda:	bf00      	nop
 8009cdc:	46002400 	.word	0x46002400
 8009ce0:	cfff69f3 	.word	0xcfff69f3
 8009ce4:	56002400 	.word	0x56002400
 8009ce8:	40013800 	.word	0x40013800
 8009cec:	40004400 	.word	0x40004400
 8009cf0:	40004800 	.word	0x40004800
 8009cf4:	40004c00 	.word	0x40004c00
 8009cf8:	40005000 	.word	0x40005000
 8009cfc:	40006400 	.word	0x40006400
 8009d00:	0800edbc 	.word	0x0800edbc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d0c:	d13c      	bne.n	8009d88 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d10:	2200      	movs	r2, #0
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	607a      	str	r2, [r7, #4]
 8009d16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d1a:	f7fc ffa3 	bl	8006c64 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d1e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d05e      	beq.n	8009de4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d2a:	4a39      	ldr	r2, [pc, #228]	@ (8009e10 <UART_SetConfig+0x358>)
 8009d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d30:	461a      	mov	r2, r3
 8009d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d34:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d38:	005a      	lsls	r2, r3, #1
 8009d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	085b      	lsrs	r3, r3, #1
 8009d40:	441a      	add	r2, r3
 8009d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d4e:	2b0f      	cmp	r3, #15
 8009d50:	d916      	bls.n	8009d80 <UART_SetConfig+0x2c8>
 8009d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d58:	d212      	bcs.n	8009d80 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	f023 030f 	bic.w	r3, r3, #15
 8009d62:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d66:	085b      	lsrs	r3, r3, #1
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	f003 0307 	and.w	r3, r3, #7
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009d72:	4313      	orrs	r3, r2
 8009d74:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009d7c:	60da      	str	r2, [r3, #12]
 8009d7e:	e031      	b.n	8009de4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009d86:	e02d      	b.n	8009de4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	469a      	mov	sl, r3
 8009d8e:	4693      	mov	fp, r2
 8009d90:	4650      	mov	r0, sl
 8009d92:	4659      	mov	r1, fp
 8009d94:	f7fc ff66 	bl	8006c64 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d98:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d021      	beq.n	8009de4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da4:	4a1a      	ldr	r2, [pc, #104]	@ (8009e10 <UART_SetConfig+0x358>)
 8009da6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009daa:	461a      	mov	r2, r3
 8009dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dae:	fbb3 f2f2 	udiv	r2, r3, r2
 8009db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	085b      	lsrs	r3, r3, #1
 8009db8:	441a      	add	r2, r3
 8009dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc6:	2b0f      	cmp	r3, #15
 8009dc8:	d909      	bls.n	8009dde <UART_SetConfig+0x326>
 8009dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dd0:	d205      	bcs.n	8009dde <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60da      	str	r2, [r3, #12]
 8009ddc:	e002      	b.n	8009de4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de6:	2201      	movs	r2, #1
 8009de8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dee:	2201      	movs	r2, #1
 8009df0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df6:	2200      	movs	r2, #0
 8009df8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e00:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3750      	adds	r7, #80	@ 0x50
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e0e:	bf00      	nop
 8009e10:	0800edbc 	.word	0x0800edbc

08009e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e20:	f003 0308 	and.w	r3, r3, #8
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00a      	beq.n	8009e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00a      	beq.n	8009e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e64:	f003 0302 	and.w	r3, r3, #2
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00a      	beq.n	8009e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e86:	f003 0304 	and.w	r3, r3, #4
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00a      	beq.n	8009ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	430a      	orrs	r2, r1
 8009ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea8:	f003 0310 	and.w	r3, r3, #16
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00a      	beq.n	8009ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eca:	f003 0320 	and.w	r3, r3, #32
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00a      	beq.n	8009ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	430a      	orrs	r2, r1
 8009ee6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d01a      	beq.n	8009f2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	430a      	orrs	r2, r1
 8009f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f12:	d10a      	bne.n	8009f2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	430a      	orrs	r2, r1
 8009f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00a      	beq.n	8009f4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	430a      	orrs	r2, r1
 8009f4a:	605a      	str	r2, [r3, #4]
  }
}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b098      	sub	sp, #96	@ 0x60
 8009f5c:	af02      	add	r7, sp, #8
 8009f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f68:	f7f9 fb4a 	bl	8003600 <HAL_GetTick>
 8009f6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 0308 	and.w	r3, r3, #8
 8009f78:	2b08      	cmp	r3, #8
 8009f7a:	d12f      	bne.n	8009fdc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f84:	2200      	movs	r2, #0
 8009f86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f88e 	bl	800a0ac <UART_WaitOnFlagUntilTimeout>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d022      	beq.n	8009fdc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f9e:	e853 3f00 	ldrex	r3, [r3]
 8009fa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009faa:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fb6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fbc:	e841 2300 	strex	r3, r2, [r1]
 8009fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1e6      	bne.n	8009f96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2220      	movs	r2, #32
 8009fcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	e063      	b.n	800a0a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 0304 	and.w	r3, r3, #4
 8009fe6:	2b04      	cmp	r3, #4
 8009fe8:	d149      	bne.n	800a07e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f857 	bl	800a0ac <UART_WaitOnFlagUntilTimeout>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d03c      	beq.n	800a07e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00c:	e853 3f00 	ldrex	r3, [r3]
 800a010:	623b      	str	r3, [r7, #32]
   return(result);
 800a012:	6a3b      	ldr	r3, [r7, #32]
 800a014:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a018:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a022:	633b      	str	r3, [r7, #48]	@ 0x30
 800a024:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a02a:	e841 2300 	strex	r3, r2, [r1]
 800a02e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1e6      	bne.n	800a004 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	3308      	adds	r3, #8
 800a03c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	e853 3f00 	ldrex	r3, [r3]
 800a044:	60fb      	str	r3, [r7, #12]
   return(result);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f023 0301 	bic.w	r3, r3, #1
 800a04c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3308      	adds	r3, #8
 800a054:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a056:	61fa      	str	r2, [r7, #28]
 800a058:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05a:	69b9      	ldr	r1, [r7, #24]
 800a05c:	69fa      	ldr	r2, [r7, #28]
 800a05e:	e841 2300 	strex	r3, r2, [r1]
 800a062:	617b      	str	r3, [r7, #20]
   return(result);
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1e5      	bne.n	800a036 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2220      	movs	r2, #32
 800a06e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a07a:	2303      	movs	r3, #3
 800a07c:	e012      	b.n	800a0a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2220      	movs	r2, #32
 800a082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2220      	movs	r2, #32
 800a08a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3758      	adds	r7, #88	@ 0x58
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	603b      	str	r3, [r7, #0]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0bc:	e04f      	b.n	800a15e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c4:	d04b      	beq.n	800a15e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0c6:	f7f9 fa9b 	bl	8003600 <HAL_GetTick>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	69ba      	ldr	r2, [r7, #24]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d302      	bcc.n	800a0dc <UART_WaitOnFlagUntilTimeout+0x30>
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d101      	bne.n	800a0e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e04e      	b.n	800a17e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0304 	and.w	r3, r3, #4
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d037      	beq.n	800a15e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2b80      	cmp	r3, #128	@ 0x80
 800a0f2:	d034      	beq.n	800a15e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	2b40      	cmp	r3, #64	@ 0x40
 800a0f8:	d031      	beq.n	800a15e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	69db      	ldr	r3, [r3, #28]
 800a100:	f003 0308 	and.w	r3, r3, #8
 800a104:	2b08      	cmp	r3, #8
 800a106:	d110      	bne.n	800a12a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2208      	movs	r2, #8
 800a10e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f000 f838 	bl	800a186 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2208      	movs	r2, #8
 800a11a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e029      	b.n	800a17e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	69db      	ldr	r3, [r3, #28]
 800a130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a134:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a138:	d111      	bne.n	800a15e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a142:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 f81e 	bl	800a186 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2220      	movs	r2, #32
 800a14e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a15a:	2303      	movs	r3, #3
 800a15c:	e00f      	b.n	800a17e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	69da      	ldr	r2, [r3, #28]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	4013      	ands	r3, r2
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	bf0c      	ite	eq
 800a16e:	2301      	moveq	r3, #1
 800a170:	2300      	movne	r3, #0
 800a172:	b2db      	uxtb	r3, r3
 800a174:	461a      	mov	r2, r3
 800a176:	79fb      	ldrb	r3, [r7, #7]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d0a0      	beq.n	800a0be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a186:	b480      	push	{r7}
 800a188:	b095      	sub	sp, #84	@ 0x54
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a196:	e853 3f00 	ldrex	r3, [r3]
 800a19a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e6      	bne.n	800a18e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	e853 3f00 	ldrex	r3, [r3]
 800a1ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1d6:	f023 0301 	bic.w	r3, r3, #1
 800a1da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a1e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1ec:	e841 2300 	strex	r3, r2, [r1]
 800a1f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1e3      	bne.n	800a1c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d118      	bne.n	800a232 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	e853 3f00 	ldrex	r3, [r3]
 800a20c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	f023 0310 	bic.w	r3, r3, #16
 800a214:	647b      	str	r3, [r7, #68]	@ 0x44
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a21e:	61bb      	str	r3, [r7, #24]
 800a220:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a222:	6979      	ldr	r1, [r7, #20]
 800a224:	69ba      	ldr	r2, [r7, #24]
 800a226:	e841 2300 	strex	r3, r2, [r1]
 800a22a:	613b      	str	r3, [r7, #16]
   return(result);
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1e6      	bne.n	800a200 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2220      	movs	r2, #32
 800a236:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a246:	bf00      	nop
 800a248:	3754      	adds	r7, #84	@ 0x54
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <_ZdlPvj>:
 800a252:	f000 b800 	b.w	800a256 <_ZdlPv>

0800a256 <_ZdlPv>:
 800a256:	f000 b809 	b.w	800a26c <free>
	...

0800a25c <malloc>:
 800a25c:	4b02      	ldr	r3, [pc, #8]	@ (800a268 <malloc+0xc>)
 800a25e:	4601      	mov	r1, r0
 800a260:	6818      	ldr	r0, [r3, #0]
 800a262:	f000 b82d 	b.w	800a2c0 <_malloc_r>
 800a266:	bf00      	nop
 800a268:	20000060 	.word	0x20000060

0800a26c <free>:
 800a26c:	4b02      	ldr	r3, [pc, #8]	@ (800a278 <free+0xc>)
 800a26e:	4601      	mov	r1, r0
 800a270:	6818      	ldr	r0, [r3, #0]
 800a272:	f002 b83d 	b.w	800c2f0 <_free_r>
 800a276:	bf00      	nop
 800a278:	20000060 	.word	0x20000060

0800a27c <sbrk_aligned>:
 800a27c:	b570      	push	{r4, r5, r6, lr}
 800a27e:	4e0f      	ldr	r6, [pc, #60]	@ (800a2bc <sbrk_aligned+0x40>)
 800a280:	460c      	mov	r4, r1
 800a282:	4605      	mov	r5, r0
 800a284:	6831      	ldr	r1, [r6, #0]
 800a286:	b911      	cbnz	r1, 800a28e <sbrk_aligned+0x12>
 800a288:	f001 f97c 	bl	800b584 <_sbrk_r>
 800a28c:	6030      	str	r0, [r6, #0]
 800a28e:	4621      	mov	r1, r4
 800a290:	4628      	mov	r0, r5
 800a292:	f001 f977 	bl	800b584 <_sbrk_r>
 800a296:	1c43      	adds	r3, r0, #1
 800a298:	d103      	bne.n	800a2a2 <sbrk_aligned+0x26>
 800a29a:	f04f 34ff 	mov.w	r4, #4294967295
 800a29e:	4620      	mov	r0, r4
 800a2a0:	bd70      	pop	{r4, r5, r6, pc}
 800a2a2:	1cc4      	adds	r4, r0, #3
 800a2a4:	f024 0403 	bic.w	r4, r4, #3
 800a2a8:	42a0      	cmp	r0, r4
 800a2aa:	d0f8      	beq.n	800a29e <sbrk_aligned+0x22>
 800a2ac:	1a21      	subs	r1, r4, r0
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f001 f968 	bl	800b584 <_sbrk_r>
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	d1f2      	bne.n	800a29e <sbrk_aligned+0x22>
 800a2b8:	e7ef      	b.n	800a29a <sbrk_aligned+0x1e>
 800a2ba:	bf00      	nop
 800a2bc:	200004a0 	.word	0x200004a0

0800a2c0 <_malloc_r>:
 800a2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c4:	1ccd      	adds	r5, r1, #3
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	f025 0503 	bic.w	r5, r5, #3
 800a2cc:	3508      	adds	r5, #8
 800a2ce:	2d0c      	cmp	r5, #12
 800a2d0:	bf38      	it	cc
 800a2d2:	250c      	movcc	r5, #12
 800a2d4:	2d00      	cmp	r5, #0
 800a2d6:	db01      	blt.n	800a2dc <_malloc_r+0x1c>
 800a2d8:	42a9      	cmp	r1, r5
 800a2da:	d904      	bls.n	800a2e6 <_malloc_r+0x26>
 800a2dc:	230c      	movs	r3, #12
 800a2de:	6033      	str	r3, [r6, #0]
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3bc <_malloc_r+0xfc>
 800a2ea:	f000 f869 	bl	800a3c0 <__malloc_lock>
 800a2ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a2f2:	461c      	mov	r4, r3
 800a2f4:	bb44      	cbnz	r4, 800a348 <_malloc_r+0x88>
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f7ff ffbf 	bl	800a27c <sbrk_aligned>
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	4604      	mov	r4, r0
 800a302:	d158      	bne.n	800a3b6 <_malloc_r+0xf6>
 800a304:	f8d8 4000 	ldr.w	r4, [r8]
 800a308:	4627      	mov	r7, r4
 800a30a:	2f00      	cmp	r7, #0
 800a30c:	d143      	bne.n	800a396 <_malloc_r+0xd6>
 800a30e:	2c00      	cmp	r4, #0
 800a310:	d04b      	beq.n	800a3aa <_malloc_r+0xea>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	4639      	mov	r1, r7
 800a316:	4630      	mov	r0, r6
 800a318:	eb04 0903 	add.w	r9, r4, r3
 800a31c:	f001 f932 	bl	800b584 <_sbrk_r>
 800a320:	4581      	cmp	r9, r0
 800a322:	d142      	bne.n	800a3aa <_malloc_r+0xea>
 800a324:	6821      	ldr	r1, [r4, #0]
 800a326:	4630      	mov	r0, r6
 800a328:	1a6d      	subs	r5, r5, r1
 800a32a:	4629      	mov	r1, r5
 800a32c:	f7ff ffa6 	bl	800a27c <sbrk_aligned>
 800a330:	3001      	adds	r0, #1
 800a332:	d03a      	beq.n	800a3aa <_malloc_r+0xea>
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	442b      	add	r3, r5
 800a338:	6023      	str	r3, [r4, #0]
 800a33a:	f8d8 3000 	ldr.w	r3, [r8]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	bb62      	cbnz	r2, 800a39c <_malloc_r+0xdc>
 800a342:	f8c8 7000 	str.w	r7, [r8]
 800a346:	e00f      	b.n	800a368 <_malloc_r+0xa8>
 800a348:	6822      	ldr	r2, [r4, #0]
 800a34a:	1b52      	subs	r2, r2, r5
 800a34c:	d420      	bmi.n	800a390 <_malloc_r+0xd0>
 800a34e:	2a0b      	cmp	r2, #11
 800a350:	d917      	bls.n	800a382 <_malloc_r+0xc2>
 800a352:	1961      	adds	r1, r4, r5
 800a354:	42a3      	cmp	r3, r4
 800a356:	6025      	str	r5, [r4, #0]
 800a358:	bf18      	it	ne
 800a35a:	6059      	strne	r1, [r3, #4]
 800a35c:	6863      	ldr	r3, [r4, #4]
 800a35e:	bf08      	it	eq
 800a360:	f8c8 1000 	streq.w	r1, [r8]
 800a364:	5162      	str	r2, [r4, r5]
 800a366:	604b      	str	r3, [r1, #4]
 800a368:	4630      	mov	r0, r6
 800a36a:	f000 f82f 	bl	800a3cc <__malloc_unlock>
 800a36e:	f104 000b 	add.w	r0, r4, #11
 800a372:	1d23      	adds	r3, r4, #4
 800a374:	f020 0007 	bic.w	r0, r0, #7
 800a378:	1ac2      	subs	r2, r0, r3
 800a37a:	bf1c      	itt	ne
 800a37c:	1a1b      	subne	r3, r3, r0
 800a37e:	50a3      	strne	r3, [r4, r2]
 800a380:	e7af      	b.n	800a2e2 <_malloc_r+0x22>
 800a382:	6862      	ldr	r2, [r4, #4]
 800a384:	42a3      	cmp	r3, r4
 800a386:	bf0c      	ite	eq
 800a388:	f8c8 2000 	streq.w	r2, [r8]
 800a38c:	605a      	strne	r2, [r3, #4]
 800a38e:	e7eb      	b.n	800a368 <_malloc_r+0xa8>
 800a390:	4623      	mov	r3, r4
 800a392:	6864      	ldr	r4, [r4, #4]
 800a394:	e7ae      	b.n	800a2f4 <_malloc_r+0x34>
 800a396:	463c      	mov	r4, r7
 800a398:	687f      	ldr	r7, [r7, #4]
 800a39a:	e7b6      	b.n	800a30a <_malloc_r+0x4a>
 800a39c:	461a      	mov	r2, r3
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	42a3      	cmp	r3, r4
 800a3a2:	d1fb      	bne.n	800a39c <_malloc_r+0xdc>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	6053      	str	r3, [r2, #4]
 800a3a8:	e7de      	b.n	800a368 <_malloc_r+0xa8>
 800a3aa:	230c      	movs	r3, #12
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	6033      	str	r3, [r6, #0]
 800a3b0:	f000 f80c 	bl	800a3cc <__malloc_unlock>
 800a3b4:	e794      	b.n	800a2e0 <_malloc_r+0x20>
 800a3b6:	6005      	str	r5, [r0, #0]
 800a3b8:	e7d6      	b.n	800a368 <_malloc_r+0xa8>
 800a3ba:	bf00      	nop
 800a3bc:	200004a4 	.word	0x200004a4

0800a3c0 <__malloc_lock>:
 800a3c0:	4801      	ldr	r0, [pc, #4]	@ (800a3c8 <__malloc_lock+0x8>)
 800a3c2:	f001 b92c 	b.w	800b61e <__retarget_lock_acquire_recursive>
 800a3c6:	bf00      	nop
 800a3c8:	200005e8 	.word	0x200005e8

0800a3cc <__malloc_unlock>:
 800a3cc:	4801      	ldr	r0, [pc, #4]	@ (800a3d4 <__malloc_unlock+0x8>)
 800a3ce:	f001 b927 	b.w	800b620 <__retarget_lock_release_recursive>
 800a3d2:	bf00      	nop
 800a3d4:	200005e8 	.word	0x200005e8

0800a3d8 <__cvt>:
 800a3d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3dc:	ec57 6b10 	vmov	r6, r7, d0
 800a3e0:	2f00      	cmp	r7, #0
 800a3e2:	460c      	mov	r4, r1
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	463b      	mov	r3, r7
 800a3e8:	bfb4      	ite	lt
 800a3ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a3ee:	2300      	movge	r3, #0
 800a3f0:	4691      	mov	r9, r2
 800a3f2:	bfbf      	itttt	lt
 800a3f4:	4632      	movlt	r2, r6
 800a3f6:	461f      	movlt	r7, r3
 800a3f8:	232d      	movlt	r3, #45	@ 0x2d
 800a3fa:	4616      	movlt	r6, r2
 800a3fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a400:	700b      	strb	r3, [r1, #0]
 800a402:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a404:	f023 0820 	bic.w	r8, r3, #32
 800a408:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a40c:	d005      	beq.n	800a41a <__cvt+0x42>
 800a40e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a412:	d100      	bne.n	800a416 <__cvt+0x3e>
 800a414:	3401      	adds	r4, #1
 800a416:	2102      	movs	r1, #2
 800a418:	e000      	b.n	800a41c <__cvt+0x44>
 800a41a:	2103      	movs	r1, #3
 800a41c:	ab03      	add	r3, sp, #12
 800a41e:	4622      	mov	r2, r4
 800a420:	9301      	str	r3, [sp, #4]
 800a422:	ab02      	add	r3, sp, #8
 800a424:	ec47 6b10 	vmov	d0, r6, r7
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	4653      	mov	r3, sl
 800a42c:	f001 f99c 	bl	800b768 <_dtoa_r>
 800a430:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a434:	4605      	mov	r5, r0
 800a436:	d119      	bne.n	800a46c <__cvt+0x94>
 800a438:	f019 0f01 	tst.w	r9, #1
 800a43c:	d00e      	beq.n	800a45c <__cvt+0x84>
 800a43e:	eb00 0904 	add.w	r9, r0, r4
 800a442:	2200      	movs	r2, #0
 800a444:	2300      	movs	r3, #0
 800a446:	4630      	mov	r0, r6
 800a448:	4639      	mov	r1, r7
 800a44a:	f7f6 fb4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800a44e:	b108      	cbz	r0, 800a454 <__cvt+0x7c>
 800a450:	f8cd 900c 	str.w	r9, [sp, #12]
 800a454:	2230      	movs	r2, #48	@ 0x30
 800a456:	9b03      	ldr	r3, [sp, #12]
 800a458:	454b      	cmp	r3, r9
 800a45a:	d31e      	bcc.n	800a49a <__cvt+0xc2>
 800a45c:	9b03      	ldr	r3, [sp, #12]
 800a45e:	4628      	mov	r0, r5
 800a460:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a462:	1b5b      	subs	r3, r3, r5
 800a464:	6013      	str	r3, [r2, #0]
 800a466:	b004      	add	sp, #16
 800a468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a46c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a470:	eb00 0904 	add.w	r9, r0, r4
 800a474:	d1e5      	bne.n	800a442 <__cvt+0x6a>
 800a476:	7803      	ldrb	r3, [r0, #0]
 800a478:	2b30      	cmp	r3, #48	@ 0x30
 800a47a:	d10a      	bne.n	800a492 <__cvt+0xba>
 800a47c:	2200      	movs	r2, #0
 800a47e:	2300      	movs	r3, #0
 800a480:	4630      	mov	r0, r6
 800a482:	4639      	mov	r1, r7
 800a484:	f7f6 fb30 	bl	8000ae8 <__aeabi_dcmpeq>
 800a488:	b918      	cbnz	r0, 800a492 <__cvt+0xba>
 800a48a:	f1c4 0401 	rsb	r4, r4, #1
 800a48e:	f8ca 4000 	str.w	r4, [sl]
 800a492:	f8da 3000 	ldr.w	r3, [sl]
 800a496:	4499      	add	r9, r3
 800a498:	e7d3      	b.n	800a442 <__cvt+0x6a>
 800a49a:	1c59      	adds	r1, r3, #1
 800a49c:	9103      	str	r1, [sp, #12]
 800a49e:	701a      	strb	r2, [r3, #0]
 800a4a0:	e7d9      	b.n	800a456 <__cvt+0x7e>

0800a4a2 <__exponent>:
 800a4a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	7002      	strb	r2, [r0, #0]
 800a4a8:	bfba      	itte	lt
 800a4aa:	4249      	neglt	r1, r1
 800a4ac:	232d      	movlt	r3, #45	@ 0x2d
 800a4ae:	232b      	movge	r3, #43	@ 0x2b
 800a4b0:	2909      	cmp	r1, #9
 800a4b2:	7043      	strb	r3, [r0, #1]
 800a4b4:	dd28      	ble.n	800a508 <__exponent+0x66>
 800a4b6:	f10d 0307 	add.w	r3, sp, #7
 800a4ba:	270a      	movs	r7, #10
 800a4bc:	461d      	mov	r5, r3
 800a4be:	461a      	mov	r2, r3
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	fbb1 f6f7 	udiv	r6, r1, r7
 800a4c6:	fb07 1416 	mls	r4, r7, r6, r1
 800a4ca:	3430      	adds	r4, #48	@ 0x30
 800a4cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	2c63      	cmp	r4, #99	@ 0x63
 800a4d6:	dcf2      	bgt.n	800a4be <__exponent+0x1c>
 800a4d8:	3130      	adds	r1, #48	@ 0x30
 800a4da:	1e94      	subs	r4, r2, #2
 800a4dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a4e0:	1c41      	adds	r1, r0, #1
 800a4e2:	4623      	mov	r3, r4
 800a4e4:	42ab      	cmp	r3, r5
 800a4e6:	d30a      	bcc.n	800a4fe <__exponent+0x5c>
 800a4e8:	f10d 0309 	add.w	r3, sp, #9
 800a4ec:	1a9b      	subs	r3, r3, r2
 800a4ee:	42ac      	cmp	r4, r5
 800a4f0:	bf88      	it	hi
 800a4f2:	2300      	movhi	r3, #0
 800a4f4:	3302      	adds	r3, #2
 800a4f6:	4403      	add	r3, r0
 800a4f8:	1a18      	subs	r0, r3, r0
 800a4fa:	b003      	add	sp, #12
 800a4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4fe:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a502:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a506:	e7ed      	b.n	800a4e4 <__exponent+0x42>
 800a508:	2330      	movs	r3, #48	@ 0x30
 800a50a:	3130      	adds	r1, #48	@ 0x30
 800a50c:	7083      	strb	r3, [r0, #2]
 800a50e:	1d03      	adds	r3, r0, #4
 800a510:	70c1      	strb	r1, [r0, #3]
 800a512:	e7f1      	b.n	800a4f8 <__exponent+0x56>

0800a514 <_printf_float>:
 800a514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a518:	b08d      	sub	sp, #52	@ 0x34
 800a51a:	460c      	mov	r4, r1
 800a51c:	4616      	mov	r6, r2
 800a51e:	461f      	mov	r7, r3
 800a520:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a524:	4605      	mov	r5, r0
 800a526:	f000 fff5 	bl	800b514 <_localeconv_r>
 800a52a:	6803      	ldr	r3, [r0, #0]
 800a52c:	4618      	mov	r0, r3
 800a52e:	9304      	str	r3, [sp, #16]
 800a530:	f7f5 feae 	bl	8000290 <strlen>
 800a534:	2300      	movs	r3, #0
 800a536:	9005      	str	r0, [sp, #20]
 800a538:	930a      	str	r3, [sp, #40]	@ 0x28
 800a53a:	f8d8 3000 	ldr.w	r3, [r8]
 800a53e:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a542:	3307      	adds	r3, #7
 800a544:	f8d4 b000 	ldr.w	fp, [r4]
 800a548:	f023 0307 	bic.w	r3, r3, #7
 800a54c:	f103 0208 	add.w	r2, r3, #8
 800a550:	f8c8 2000 	str.w	r2, [r8]
 800a554:	f04f 32ff 	mov.w	r2, #4294967295
 800a558:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a55c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a560:	f8cd 8018 	str.w	r8, [sp, #24]
 800a564:	9307      	str	r3, [sp, #28]
 800a566:	4b9d      	ldr	r3, [pc, #628]	@ (800a7dc <_printf_float+0x2c8>)
 800a568:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a56c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a570:	f7f6 faec 	bl	8000b4c <__aeabi_dcmpun>
 800a574:	bb70      	cbnz	r0, 800a5d4 <_printf_float+0xc0>
 800a576:	f04f 32ff 	mov.w	r2, #4294967295
 800a57a:	4b98      	ldr	r3, [pc, #608]	@ (800a7dc <_printf_float+0x2c8>)
 800a57c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a580:	f7f6 fac6 	bl	8000b10 <__aeabi_dcmple>
 800a584:	bb30      	cbnz	r0, 800a5d4 <_printf_float+0xc0>
 800a586:	2200      	movs	r2, #0
 800a588:	2300      	movs	r3, #0
 800a58a:	4640      	mov	r0, r8
 800a58c:	4649      	mov	r1, r9
 800a58e:	f7f6 fab5 	bl	8000afc <__aeabi_dcmplt>
 800a592:	b110      	cbz	r0, 800a59a <_printf_float+0x86>
 800a594:	232d      	movs	r3, #45	@ 0x2d
 800a596:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a59a:	4a91      	ldr	r2, [pc, #580]	@ (800a7e0 <_printf_float+0x2cc>)
 800a59c:	4b91      	ldr	r3, [pc, #580]	@ (800a7e4 <_printf_float+0x2d0>)
 800a59e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a5a2:	bf94      	ite	ls
 800a5a4:	4690      	movls	r8, r2
 800a5a6:	4698      	movhi	r8, r3
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	f04f 0900 	mov.w	r9, #0
 800a5ae:	6123      	str	r3, [r4, #16]
 800a5b0:	f02b 0304 	bic.w	r3, fp, #4
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	4633      	mov	r3, r6
 800a5b8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a5ba:	4621      	mov	r1, r4
 800a5bc:	4628      	mov	r0, r5
 800a5be:	9700      	str	r7, [sp, #0]
 800a5c0:	f000 f9d2 	bl	800a968 <_printf_common>
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	f040 808d 	bne.w	800a6e4 <_printf_float+0x1d0>
 800a5ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ce:	b00d      	add	sp, #52	@ 0x34
 800a5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d4:	4642      	mov	r2, r8
 800a5d6:	464b      	mov	r3, r9
 800a5d8:	4640      	mov	r0, r8
 800a5da:	4649      	mov	r1, r9
 800a5dc:	f7f6 fab6 	bl	8000b4c <__aeabi_dcmpun>
 800a5e0:	b140      	cbz	r0, 800a5f4 <_printf_float+0xe0>
 800a5e2:	464b      	mov	r3, r9
 800a5e4:	4a80      	ldr	r2, [pc, #512]	@ (800a7e8 <_printf_float+0x2d4>)
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	bfbc      	itt	lt
 800a5ea:	232d      	movlt	r3, #45	@ 0x2d
 800a5ec:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a5f0:	4b7e      	ldr	r3, [pc, #504]	@ (800a7ec <_printf_float+0x2d8>)
 800a5f2:	e7d4      	b.n	800a59e <_printf_float+0x8a>
 800a5f4:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a5f8:	6863      	ldr	r3, [r4, #4]
 800a5fa:	9206      	str	r2, [sp, #24]
 800a5fc:	1c5a      	adds	r2, r3, #1
 800a5fe:	d13b      	bne.n	800a678 <_printf_float+0x164>
 800a600:	2306      	movs	r3, #6
 800a602:	6063      	str	r3, [r4, #4]
 800a604:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a608:	2300      	movs	r3, #0
 800a60a:	4628      	mov	r0, r5
 800a60c:	6022      	str	r2, [r4, #0]
 800a60e:	9303      	str	r3, [sp, #12]
 800a610:	ab0a      	add	r3, sp, #40	@ 0x28
 800a612:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a616:	ab09      	add	r3, sp, #36	@ 0x24
 800a618:	ec49 8b10 	vmov	d0, r8, r9
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a622:	6861      	ldr	r1, [r4, #4]
 800a624:	f7ff fed8 	bl	800a3d8 <__cvt>
 800a628:	9b06      	ldr	r3, [sp, #24]
 800a62a:	4680      	mov	r8, r0
 800a62c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a62e:	2b47      	cmp	r3, #71	@ 0x47
 800a630:	d129      	bne.n	800a686 <_printf_float+0x172>
 800a632:	1cc8      	adds	r0, r1, #3
 800a634:	db02      	blt.n	800a63c <_printf_float+0x128>
 800a636:	6863      	ldr	r3, [r4, #4]
 800a638:	4299      	cmp	r1, r3
 800a63a:	dd41      	ble.n	800a6c0 <_printf_float+0x1ac>
 800a63c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a640:	fa5f fa8a 	uxtb.w	sl, sl
 800a644:	3901      	subs	r1, #1
 800a646:	4652      	mov	r2, sl
 800a648:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a64c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a64e:	f7ff ff28 	bl	800a4a2 <__exponent>
 800a652:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a654:	4681      	mov	r9, r0
 800a656:	1813      	adds	r3, r2, r0
 800a658:	2a01      	cmp	r2, #1
 800a65a:	6123      	str	r3, [r4, #16]
 800a65c:	dc02      	bgt.n	800a664 <_printf_float+0x150>
 800a65e:	6822      	ldr	r2, [r4, #0]
 800a660:	07d2      	lsls	r2, r2, #31
 800a662:	d501      	bpl.n	800a668 <_printf_float+0x154>
 800a664:	3301      	adds	r3, #1
 800a666:	6123      	str	r3, [r4, #16]
 800a668:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d0a2      	beq.n	800a5b6 <_printf_float+0xa2>
 800a670:	232d      	movs	r3, #45	@ 0x2d
 800a672:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a676:	e79e      	b.n	800a5b6 <_printf_float+0xa2>
 800a678:	9a06      	ldr	r2, [sp, #24]
 800a67a:	2a47      	cmp	r2, #71	@ 0x47
 800a67c:	d1c2      	bne.n	800a604 <_printf_float+0xf0>
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1c0      	bne.n	800a604 <_printf_float+0xf0>
 800a682:	2301      	movs	r3, #1
 800a684:	e7bd      	b.n	800a602 <_printf_float+0xee>
 800a686:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a68a:	d9db      	bls.n	800a644 <_printf_float+0x130>
 800a68c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a690:	d118      	bne.n	800a6c4 <_printf_float+0x1b0>
 800a692:	2900      	cmp	r1, #0
 800a694:	6863      	ldr	r3, [r4, #4]
 800a696:	dd0b      	ble.n	800a6b0 <_printf_float+0x19c>
 800a698:	6121      	str	r1, [r4, #16]
 800a69a:	b913      	cbnz	r3, 800a6a2 <_printf_float+0x18e>
 800a69c:	6822      	ldr	r2, [r4, #0]
 800a69e:	07d0      	lsls	r0, r2, #31
 800a6a0:	d502      	bpl.n	800a6a8 <_printf_float+0x194>
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	440b      	add	r3, r1
 800a6a6:	6123      	str	r3, [r4, #16]
 800a6a8:	f04f 0900 	mov.w	r9, #0
 800a6ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a6ae:	e7db      	b.n	800a668 <_printf_float+0x154>
 800a6b0:	b913      	cbnz	r3, 800a6b8 <_printf_float+0x1a4>
 800a6b2:	6822      	ldr	r2, [r4, #0]
 800a6b4:	07d2      	lsls	r2, r2, #31
 800a6b6:	d501      	bpl.n	800a6bc <_printf_float+0x1a8>
 800a6b8:	3302      	adds	r3, #2
 800a6ba:	e7f4      	b.n	800a6a6 <_printf_float+0x192>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e7f2      	b.n	800a6a6 <_printf_float+0x192>
 800a6c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a6c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6c6:	4299      	cmp	r1, r3
 800a6c8:	db05      	blt.n	800a6d6 <_printf_float+0x1c2>
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	6121      	str	r1, [r4, #16]
 800a6ce:	07d8      	lsls	r0, r3, #31
 800a6d0:	d5ea      	bpl.n	800a6a8 <_printf_float+0x194>
 800a6d2:	1c4b      	adds	r3, r1, #1
 800a6d4:	e7e7      	b.n	800a6a6 <_printf_float+0x192>
 800a6d6:	2900      	cmp	r1, #0
 800a6d8:	bfd4      	ite	le
 800a6da:	f1c1 0202 	rsble	r2, r1, #2
 800a6de:	2201      	movgt	r2, #1
 800a6e0:	4413      	add	r3, r2
 800a6e2:	e7e0      	b.n	800a6a6 <_printf_float+0x192>
 800a6e4:	6823      	ldr	r3, [r4, #0]
 800a6e6:	055a      	lsls	r2, r3, #21
 800a6e8:	d407      	bmi.n	800a6fa <_printf_float+0x1e6>
 800a6ea:	6923      	ldr	r3, [r4, #16]
 800a6ec:	4642      	mov	r2, r8
 800a6ee:	4631      	mov	r1, r6
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	47b8      	blx	r7
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	d12b      	bne.n	800a750 <_printf_float+0x23c>
 800a6f8:	e767      	b.n	800a5ca <_printf_float+0xb6>
 800a6fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a6fe:	f240 80dd 	bls.w	800a8bc <_printf_float+0x3a8>
 800a702:	2200      	movs	r2, #0
 800a704:	2300      	movs	r3, #0
 800a706:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a70a:	f7f6 f9ed 	bl	8000ae8 <__aeabi_dcmpeq>
 800a70e:	2800      	cmp	r0, #0
 800a710:	d033      	beq.n	800a77a <_printf_float+0x266>
 800a712:	2301      	movs	r3, #1
 800a714:	4a36      	ldr	r2, [pc, #216]	@ (800a7f0 <_printf_float+0x2dc>)
 800a716:	4631      	mov	r1, r6
 800a718:	4628      	mov	r0, r5
 800a71a:	47b8      	blx	r7
 800a71c:	3001      	adds	r0, #1
 800a71e:	f43f af54 	beq.w	800a5ca <_printf_float+0xb6>
 800a722:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a726:	4543      	cmp	r3, r8
 800a728:	db02      	blt.n	800a730 <_printf_float+0x21c>
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	07d8      	lsls	r0, r3, #31
 800a72e:	d50f      	bpl.n	800a750 <_printf_float+0x23c>
 800a730:	4631      	mov	r1, r6
 800a732:	4628      	mov	r0, r5
 800a734:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a738:	47b8      	blx	r7
 800a73a:	3001      	adds	r0, #1
 800a73c:	f43f af45 	beq.w	800a5ca <_printf_float+0xb6>
 800a740:	f04f 0900 	mov.w	r9, #0
 800a744:	f108 38ff 	add.w	r8, r8, #4294967295
 800a748:	f104 0a1a 	add.w	sl, r4, #26
 800a74c:	45c8      	cmp	r8, r9
 800a74e:	dc09      	bgt.n	800a764 <_printf_float+0x250>
 800a750:	6823      	ldr	r3, [r4, #0]
 800a752:	079b      	lsls	r3, r3, #30
 800a754:	f100 8103 	bmi.w	800a95e <_printf_float+0x44a>
 800a758:	68e0      	ldr	r0, [r4, #12]
 800a75a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a75c:	4298      	cmp	r0, r3
 800a75e:	bfb8      	it	lt
 800a760:	4618      	movlt	r0, r3
 800a762:	e734      	b.n	800a5ce <_printf_float+0xba>
 800a764:	2301      	movs	r3, #1
 800a766:	4652      	mov	r2, sl
 800a768:	4631      	mov	r1, r6
 800a76a:	4628      	mov	r0, r5
 800a76c:	47b8      	blx	r7
 800a76e:	3001      	adds	r0, #1
 800a770:	f43f af2b 	beq.w	800a5ca <_printf_float+0xb6>
 800a774:	f109 0901 	add.w	r9, r9, #1
 800a778:	e7e8      	b.n	800a74c <_printf_float+0x238>
 800a77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	dc39      	bgt.n	800a7f4 <_printf_float+0x2e0>
 800a780:	2301      	movs	r3, #1
 800a782:	4a1b      	ldr	r2, [pc, #108]	@ (800a7f0 <_printf_float+0x2dc>)
 800a784:	4631      	mov	r1, r6
 800a786:	4628      	mov	r0, r5
 800a788:	47b8      	blx	r7
 800a78a:	3001      	adds	r0, #1
 800a78c:	f43f af1d 	beq.w	800a5ca <_printf_float+0xb6>
 800a790:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a794:	ea59 0303 	orrs.w	r3, r9, r3
 800a798:	d102      	bne.n	800a7a0 <_printf_float+0x28c>
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	07d9      	lsls	r1, r3, #31
 800a79e:	d5d7      	bpl.n	800a750 <_printf_float+0x23c>
 800a7a0:	4631      	mov	r1, r6
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7a8:	47b8      	blx	r7
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	f43f af0d 	beq.w	800a5ca <_printf_float+0xb6>
 800a7b0:	f04f 0a00 	mov.w	sl, #0
 800a7b4:	f104 0b1a 	add.w	fp, r4, #26
 800a7b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ba:	425b      	negs	r3, r3
 800a7bc:	4553      	cmp	r3, sl
 800a7be:	dc01      	bgt.n	800a7c4 <_printf_float+0x2b0>
 800a7c0:	464b      	mov	r3, r9
 800a7c2:	e793      	b.n	800a6ec <_printf_float+0x1d8>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	465a      	mov	r2, fp
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	47b8      	blx	r7
 800a7ce:	3001      	adds	r0, #1
 800a7d0:	f43f aefb 	beq.w	800a5ca <_printf_float+0xb6>
 800a7d4:	f10a 0a01 	add.w	sl, sl, #1
 800a7d8:	e7ee      	b.n	800a7b8 <_printf_float+0x2a4>
 800a7da:	bf00      	nop
 800a7dc:	7fefffff 	.word	0x7fefffff
 800a7e0:	0800edd4 	.word	0x0800edd4
 800a7e4:	0800edd8 	.word	0x0800edd8
 800a7e8:	0800eddc 	.word	0x0800eddc
 800a7ec:	0800ede0 	.word	0x0800ede0
 800a7f0:	0800ede4 	.word	0x0800ede4
 800a7f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a7f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a7fa:	4553      	cmp	r3, sl
 800a7fc:	bfa8      	it	ge
 800a7fe:	4653      	movge	r3, sl
 800a800:	2b00      	cmp	r3, #0
 800a802:	4699      	mov	r9, r3
 800a804:	dc36      	bgt.n	800a874 <_printf_float+0x360>
 800a806:	f04f 0b00 	mov.w	fp, #0
 800a80a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a80e:	f104 021a 	add.w	r2, r4, #26
 800a812:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a814:	9306      	str	r3, [sp, #24]
 800a816:	eba3 0309 	sub.w	r3, r3, r9
 800a81a:	455b      	cmp	r3, fp
 800a81c:	dc31      	bgt.n	800a882 <_printf_float+0x36e>
 800a81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a820:	459a      	cmp	sl, r3
 800a822:	dc3a      	bgt.n	800a89a <_printf_float+0x386>
 800a824:	6823      	ldr	r3, [r4, #0]
 800a826:	07da      	lsls	r2, r3, #31
 800a828:	d437      	bmi.n	800a89a <_printf_float+0x386>
 800a82a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a82c:	ebaa 0903 	sub.w	r9, sl, r3
 800a830:	9b06      	ldr	r3, [sp, #24]
 800a832:	ebaa 0303 	sub.w	r3, sl, r3
 800a836:	4599      	cmp	r9, r3
 800a838:	bfa8      	it	ge
 800a83a:	4699      	movge	r9, r3
 800a83c:	f1b9 0f00 	cmp.w	r9, #0
 800a840:	dc33      	bgt.n	800a8aa <_printf_float+0x396>
 800a842:	f04f 0800 	mov.w	r8, #0
 800a846:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a84a:	f104 0b1a 	add.w	fp, r4, #26
 800a84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a850:	ebaa 0303 	sub.w	r3, sl, r3
 800a854:	eba3 0309 	sub.w	r3, r3, r9
 800a858:	4543      	cmp	r3, r8
 800a85a:	f77f af79 	ble.w	800a750 <_printf_float+0x23c>
 800a85e:	2301      	movs	r3, #1
 800a860:	465a      	mov	r2, fp
 800a862:	4631      	mov	r1, r6
 800a864:	4628      	mov	r0, r5
 800a866:	47b8      	blx	r7
 800a868:	3001      	adds	r0, #1
 800a86a:	f43f aeae 	beq.w	800a5ca <_printf_float+0xb6>
 800a86e:	f108 0801 	add.w	r8, r8, #1
 800a872:	e7ec      	b.n	800a84e <_printf_float+0x33a>
 800a874:	4642      	mov	r2, r8
 800a876:	4631      	mov	r1, r6
 800a878:	4628      	mov	r0, r5
 800a87a:	47b8      	blx	r7
 800a87c:	3001      	adds	r0, #1
 800a87e:	d1c2      	bne.n	800a806 <_printf_float+0x2f2>
 800a880:	e6a3      	b.n	800a5ca <_printf_float+0xb6>
 800a882:	2301      	movs	r3, #1
 800a884:	4631      	mov	r1, r6
 800a886:	4628      	mov	r0, r5
 800a888:	9206      	str	r2, [sp, #24]
 800a88a:	47b8      	blx	r7
 800a88c:	3001      	adds	r0, #1
 800a88e:	f43f ae9c 	beq.w	800a5ca <_printf_float+0xb6>
 800a892:	f10b 0b01 	add.w	fp, fp, #1
 800a896:	9a06      	ldr	r2, [sp, #24]
 800a898:	e7bb      	b.n	800a812 <_printf_float+0x2fe>
 800a89a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a89e:	4631      	mov	r1, r6
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	47b8      	blx	r7
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	d1c0      	bne.n	800a82a <_printf_float+0x316>
 800a8a8:	e68f      	b.n	800a5ca <_printf_float+0xb6>
 800a8aa:	9a06      	ldr	r2, [sp, #24]
 800a8ac:	464b      	mov	r3, r9
 800a8ae:	4631      	mov	r1, r6
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	4442      	add	r2, r8
 800a8b4:	47b8      	blx	r7
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	d1c3      	bne.n	800a842 <_printf_float+0x32e>
 800a8ba:	e686      	b.n	800a5ca <_printf_float+0xb6>
 800a8bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a8c0:	f1ba 0f01 	cmp.w	sl, #1
 800a8c4:	dc01      	bgt.n	800a8ca <_printf_float+0x3b6>
 800a8c6:	07db      	lsls	r3, r3, #31
 800a8c8:	d536      	bpl.n	800a938 <_printf_float+0x424>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	4642      	mov	r2, r8
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	47b8      	blx	r7
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	f43f ae78 	beq.w	800a5ca <_printf_float+0xb6>
 800a8da:	4631      	mov	r1, r6
 800a8dc:	4628      	mov	r0, r5
 800a8de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8e2:	47b8      	blx	r7
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	f43f ae70 	beq.w	800a5ca <_printf_float+0xb6>
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a8f6:	f7f6 f8f7 	bl	8000ae8 <__aeabi_dcmpeq>
 800a8fa:	b9c0      	cbnz	r0, 800a92e <_printf_float+0x41a>
 800a8fc:	4653      	mov	r3, sl
 800a8fe:	f108 0201 	add.w	r2, r8, #1
 800a902:	4631      	mov	r1, r6
 800a904:	4628      	mov	r0, r5
 800a906:	47b8      	blx	r7
 800a908:	3001      	adds	r0, #1
 800a90a:	d10c      	bne.n	800a926 <_printf_float+0x412>
 800a90c:	e65d      	b.n	800a5ca <_printf_float+0xb6>
 800a90e:	2301      	movs	r3, #1
 800a910:	465a      	mov	r2, fp
 800a912:	4631      	mov	r1, r6
 800a914:	4628      	mov	r0, r5
 800a916:	47b8      	blx	r7
 800a918:	3001      	adds	r0, #1
 800a91a:	f43f ae56 	beq.w	800a5ca <_printf_float+0xb6>
 800a91e:	f108 0801 	add.w	r8, r8, #1
 800a922:	45d0      	cmp	r8, sl
 800a924:	dbf3      	blt.n	800a90e <_printf_float+0x3fa>
 800a926:	464b      	mov	r3, r9
 800a928:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a92c:	e6df      	b.n	800a6ee <_printf_float+0x1da>
 800a92e:	f04f 0800 	mov.w	r8, #0
 800a932:	f104 0b1a 	add.w	fp, r4, #26
 800a936:	e7f4      	b.n	800a922 <_printf_float+0x40e>
 800a938:	2301      	movs	r3, #1
 800a93a:	4642      	mov	r2, r8
 800a93c:	e7e1      	b.n	800a902 <_printf_float+0x3ee>
 800a93e:	2301      	movs	r3, #1
 800a940:	464a      	mov	r2, r9
 800a942:	4631      	mov	r1, r6
 800a944:	4628      	mov	r0, r5
 800a946:	47b8      	blx	r7
 800a948:	3001      	adds	r0, #1
 800a94a:	f43f ae3e 	beq.w	800a5ca <_printf_float+0xb6>
 800a94e:	f108 0801 	add.w	r8, r8, #1
 800a952:	68e3      	ldr	r3, [r4, #12]
 800a954:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a956:	1a5b      	subs	r3, r3, r1
 800a958:	4543      	cmp	r3, r8
 800a95a:	dcf0      	bgt.n	800a93e <_printf_float+0x42a>
 800a95c:	e6fc      	b.n	800a758 <_printf_float+0x244>
 800a95e:	f04f 0800 	mov.w	r8, #0
 800a962:	f104 0919 	add.w	r9, r4, #25
 800a966:	e7f4      	b.n	800a952 <_printf_float+0x43e>

0800a968 <_printf_common>:
 800a968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a96c:	4616      	mov	r6, r2
 800a96e:	4698      	mov	r8, r3
 800a970:	688a      	ldr	r2, [r1, #8]
 800a972:	4607      	mov	r7, r0
 800a974:	690b      	ldr	r3, [r1, #16]
 800a976:	460c      	mov	r4, r1
 800a978:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a97c:	4293      	cmp	r3, r2
 800a97e:	bfb8      	it	lt
 800a980:	4613      	movlt	r3, r2
 800a982:	6033      	str	r3, [r6, #0]
 800a984:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a988:	b10a      	cbz	r2, 800a98e <_printf_common+0x26>
 800a98a:	3301      	adds	r3, #1
 800a98c:	6033      	str	r3, [r6, #0]
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	0699      	lsls	r1, r3, #26
 800a992:	bf42      	ittt	mi
 800a994:	6833      	ldrmi	r3, [r6, #0]
 800a996:	3302      	addmi	r3, #2
 800a998:	6033      	strmi	r3, [r6, #0]
 800a99a:	6825      	ldr	r5, [r4, #0]
 800a99c:	f015 0506 	ands.w	r5, r5, #6
 800a9a0:	d106      	bne.n	800a9b0 <_printf_common+0x48>
 800a9a2:	f104 0a19 	add.w	sl, r4, #25
 800a9a6:	68e3      	ldr	r3, [r4, #12]
 800a9a8:	6832      	ldr	r2, [r6, #0]
 800a9aa:	1a9b      	subs	r3, r3, r2
 800a9ac:	42ab      	cmp	r3, r5
 800a9ae:	dc2b      	bgt.n	800aa08 <_printf_common+0xa0>
 800a9b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a9b4:	6822      	ldr	r2, [r4, #0]
 800a9b6:	3b00      	subs	r3, #0
 800a9b8:	bf18      	it	ne
 800a9ba:	2301      	movne	r3, #1
 800a9bc:	0692      	lsls	r2, r2, #26
 800a9be:	d430      	bmi.n	800aa22 <_printf_common+0xba>
 800a9c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a9c4:	4641      	mov	r1, r8
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	47c8      	blx	r9
 800a9ca:	3001      	adds	r0, #1
 800a9cc:	d023      	beq.n	800aa16 <_printf_common+0xae>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	341a      	adds	r4, #26
 800a9d2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a9d6:	f003 0306 	and.w	r3, r3, #6
 800a9da:	2b04      	cmp	r3, #4
 800a9dc:	bf0a      	itet	eq
 800a9de:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a9e2:	2500      	movne	r5, #0
 800a9e4:	6833      	ldreq	r3, [r6, #0]
 800a9e6:	f04f 0600 	mov.w	r6, #0
 800a9ea:	bf08      	it	eq
 800a9ec:	1aed      	subeq	r5, r5, r3
 800a9ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a9f2:	bf08      	it	eq
 800a9f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	bfc4      	itt	gt
 800a9fc:	1a9b      	subgt	r3, r3, r2
 800a9fe:	18ed      	addgt	r5, r5, r3
 800aa00:	42b5      	cmp	r5, r6
 800aa02:	d11a      	bne.n	800aa3a <_printf_common+0xd2>
 800aa04:	2000      	movs	r0, #0
 800aa06:	e008      	b.n	800aa1a <_printf_common+0xb2>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	4652      	mov	r2, sl
 800aa0c:	4641      	mov	r1, r8
 800aa0e:	4638      	mov	r0, r7
 800aa10:	47c8      	blx	r9
 800aa12:	3001      	adds	r0, #1
 800aa14:	d103      	bne.n	800aa1e <_printf_common+0xb6>
 800aa16:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa1e:	3501      	adds	r5, #1
 800aa20:	e7c1      	b.n	800a9a6 <_printf_common+0x3e>
 800aa22:	18e1      	adds	r1, r4, r3
 800aa24:	1c5a      	adds	r2, r3, #1
 800aa26:	2030      	movs	r0, #48	@ 0x30
 800aa28:	3302      	adds	r3, #2
 800aa2a:	4422      	add	r2, r4
 800aa2c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa38:	e7c2      	b.n	800a9c0 <_printf_common+0x58>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	4622      	mov	r2, r4
 800aa3e:	4641      	mov	r1, r8
 800aa40:	4638      	mov	r0, r7
 800aa42:	47c8      	blx	r9
 800aa44:	3001      	adds	r0, #1
 800aa46:	d0e6      	beq.n	800aa16 <_printf_common+0xae>
 800aa48:	3601      	adds	r6, #1
 800aa4a:	e7d9      	b.n	800aa00 <_printf_common+0x98>

0800aa4c <_printf_i>:
 800aa4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa50:	7e0f      	ldrb	r7, [r1, #24]
 800aa52:	4691      	mov	r9, r2
 800aa54:	4680      	mov	r8, r0
 800aa56:	460c      	mov	r4, r1
 800aa58:	2f78      	cmp	r7, #120	@ 0x78
 800aa5a:	469a      	mov	sl, r3
 800aa5c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa62:	d807      	bhi.n	800aa74 <_printf_i+0x28>
 800aa64:	2f62      	cmp	r7, #98	@ 0x62
 800aa66:	d80a      	bhi.n	800aa7e <_printf_i+0x32>
 800aa68:	2f00      	cmp	r7, #0
 800aa6a:	f000 80d2 	beq.w	800ac12 <_printf_i+0x1c6>
 800aa6e:	2f58      	cmp	r7, #88	@ 0x58
 800aa70:	f000 80b9 	beq.w	800abe6 <_printf_i+0x19a>
 800aa74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa7c:	e03a      	b.n	800aaf4 <_printf_i+0xa8>
 800aa7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa82:	2b15      	cmp	r3, #21
 800aa84:	d8f6      	bhi.n	800aa74 <_printf_i+0x28>
 800aa86:	a101      	add	r1, pc, #4	@ (adr r1, 800aa8c <_printf_i+0x40>)
 800aa88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa8c:	0800aae5 	.word	0x0800aae5
 800aa90:	0800aaf9 	.word	0x0800aaf9
 800aa94:	0800aa75 	.word	0x0800aa75
 800aa98:	0800aa75 	.word	0x0800aa75
 800aa9c:	0800aa75 	.word	0x0800aa75
 800aaa0:	0800aa75 	.word	0x0800aa75
 800aaa4:	0800aaf9 	.word	0x0800aaf9
 800aaa8:	0800aa75 	.word	0x0800aa75
 800aaac:	0800aa75 	.word	0x0800aa75
 800aab0:	0800aa75 	.word	0x0800aa75
 800aab4:	0800aa75 	.word	0x0800aa75
 800aab8:	0800abf9 	.word	0x0800abf9
 800aabc:	0800ab23 	.word	0x0800ab23
 800aac0:	0800abb3 	.word	0x0800abb3
 800aac4:	0800aa75 	.word	0x0800aa75
 800aac8:	0800aa75 	.word	0x0800aa75
 800aacc:	0800ac1b 	.word	0x0800ac1b
 800aad0:	0800aa75 	.word	0x0800aa75
 800aad4:	0800ab23 	.word	0x0800ab23
 800aad8:	0800aa75 	.word	0x0800aa75
 800aadc:	0800aa75 	.word	0x0800aa75
 800aae0:	0800abbb 	.word	0x0800abbb
 800aae4:	6833      	ldr	r3, [r6, #0]
 800aae6:	1d1a      	adds	r2, r3, #4
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	6032      	str	r2, [r6, #0]
 800aaec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aaf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e09d      	b.n	800ac34 <_printf_i+0x1e8>
 800aaf8:	6833      	ldr	r3, [r6, #0]
 800aafa:	6820      	ldr	r0, [r4, #0]
 800aafc:	1d19      	adds	r1, r3, #4
 800aafe:	6031      	str	r1, [r6, #0]
 800ab00:	0606      	lsls	r6, r0, #24
 800ab02:	d501      	bpl.n	800ab08 <_printf_i+0xbc>
 800ab04:	681d      	ldr	r5, [r3, #0]
 800ab06:	e003      	b.n	800ab10 <_printf_i+0xc4>
 800ab08:	0645      	lsls	r5, r0, #25
 800ab0a:	d5fb      	bpl.n	800ab04 <_printf_i+0xb8>
 800ab0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab10:	2d00      	cmp	r5, #0
 800ab12:	da03      	bge.n	800ab1c <_printf_i+0xd0>
 800ab14:	232d      	movs	r3, #45	@ 0x2d
 800ab16:	426d      	negs	r5, r5
 800ab18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab1c:	4859      	ldr	r0, [pc, #356]	@ (800ac84 <_printf_i+0x238>)
 800ab1e:	230a      	movs	r3, #10
 800ab20:	e011      	b.n	800ab46 <_printf_i+0xfa>
 800ab22:	6821      	ldr	r1, [r4, #0]
 800ab24:	6833      	ldr	r3, [r6, #0]
 800ab26:	0608      	lsls	r0, r1, #24
 800ab28:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab2c:	d402      	bmi.n	800ab34 <_printf_i+0xe8>
 800ab2e:	0649      	lsls	r1, r1, #25
 800ab30:	bf48      	it	mi
 800ab32:	b2ad      	uxthmi	r5, r5
 800ab34:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab36:	6033      	str	r3, [r6, #0]
 800ab38:	4852      	ldr	r0, [pc, #328]	@ (800ac84 <_printf_i+0x238>)
 800ab3a:	bf14      	ite	ne
 800ab3c:	230a      	movne	r3, #10
 800ab3e:	2308      	moveq	r3, #8
 800ab40:	2100      	movs	r1, #0
 800ab42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab46:	6866      	ldr	r6, [r4, #4]
 800ab48:	2e00      	cmp	r6, #0
 800ab4a:	60a6      	str	r6, [r4, #8]
 800ab4c:	bfa2      	ittt	ge
 800ab4e:	6821      	ldrge	r1, [r4, #0]
 800ab50:	f021 0104 	bicge.w	r1, r1, #4
 800ab54:	6021      	strge	r1, [r4, #0]
 800ab56:	b90d      	cbnz	r5, 800ab5c <_printf_i+0x110>
 800ab58:	2e00      	cmp	r6, #0
 800ab5a:	d04b      	beq.n	800abf4 <_printf_i+0x1a8>
 800ab5c:	4616      	mov	r6, r2
 800ab5e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab62:	fb03 5711 	mls	r7, r3, r1, r5
 800ab66:	5dc7      	ldrb	r7, [r0, r7]
 800ab68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab6c:	462f      	mov	r7, r5
 800ab6e:	460d      	mov	r5, r1
 800ab70:	42bb      	cmp	r3, r7
 800ab72:	d9f4      	bls.n	800ab5e <_printf_i+0x112>
 800ab74:	2b08      	cmp	r3, #8
 800ab76:	d10b      	bne.n	800ab90 <_printf_i+0x144>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	07df      	lsls	r7, r3, #31
 800ab7c:	d508      	bpl.n	800ab90 <_printf_i+0x144>
 800ab7e:	6923      	ldr	r3, [r4, #16]
 800ab80:	6861      	ldr	r1, [r4, #4]
 800ab82:	4299      	cmp	r1, r3
 800ab84:	bfde      	ittt	le
 800ab86:	2330      	movle	r3, #48	@ 0x30
 800ab88:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab90:	1b92      	subs	r2, r2, r6
 800ab92:	6122      	str	r2, [r4, #16]
 800ab94:	464b      	mov	r3, r9
 800ab96:	aa03      	add	r2, sp, #12
 800ab98:	4621      	mov	r1, r4
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	f8cd a000 	str.w	sl, [sp]
 800aba0:	f7ff fee2 	bl	800a968 <_printf_common>
 800aba4:	3001      	adds	r0, #1
 800aba6:	d14a      	bne.n	800ac3e <_printf_i+0x1f2>
 800aba8:	f04f 30ff 	mov.w	r0, #4294967295
 800abac:	b004      	add	sp, #16
 800abae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	f043 0320 	orr.w	r3, r3, #32
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	2778      	movs	r7, #120	@ 0x78
 800abbc:	4832      	ldr	r0, [pc, #200]	@ (800ac88 <_printf_i+0x23c>)
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800abc4:	061f      	lsls	r7, r3, #24
 800abc6:	6831      	ldr	r1, [r6, #0]
 800abc8:	f851 5b04 	ldr.w	r5, [r1], #4
 800abcc:	d402      	bmi.n	800abd4 <_printf_i+0x188>
 800abce:	065f      	lsls	r7, r3, #25
 800abd0:	bf48      	it	mi
 800abd2:	b2ad      	uxthmi	r5, r5
 800abd4:	6031      	str	r1, [r6, #0]
 800abd6:	07d9      	lsls	r1, r3, #31
 800abd8:	bf44      	itt	mi
 800abda:	f043 0320 	orrmi.w	r3, r3, #32
 800abde:	6023      	strmi	r3, [r4, #0]
 800abe0:	b11d      	cbz	r5, 800abea <_printf_i+0x19e>
 800abe2:	2310      	movs	r3, #16
 800abe4:	e7ac      	b.n	800ab40 <_printf_i+0xf4>
 800abe6:	4827      	ldr	r0, [pc, #156]	@ (800ac84 <_printf_i+0x238>)
 800abe8:	e7e9      	b.n	800abbe <_printf_i+0x172>
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	f023 0320 	bic.w	r3, r3, #32
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	e7f6      	b.n	800abe2 <_printf_i+0x196>
 800abf4:	4616      	mov	r6, r2
 800abf6:	e7bd      	b.n	800ab74 <_printf_i+0x128>
 800abf8:	6833      	ldr	r3, [r6, #0]
 800abfa:	6825      	ldr	r5, [r4, #0]
 800abfc:	1d18      	adds	r0, r3, #4
 800abfe:	6961      	ldr	r1, [r4, #20]
 800ac00:	6030      	str	r0, [r6, #0]
 800ac02:	062e      	lsls	r6, r5, #24
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	d501      	bpl.n	800ac0c <_printf_i+0x1c0>
 800ac08:	6019      	str	r1, [r3, #0]
 800ac0a:	e002      	b.n	800ac12 <_printf_i+0x1c6>
 800ac0c:	0668      	lsls	r0, r5, #25
 800ac0e:	d5fb      	bpl.n	800ac08 <_printf_i+0x1bc>
 800ac10:	8019      	strh	r1, [r3, #0]
 800ac12:	2300      	movs	r3, #0
 800ac14:	4616      	mov	r6, r2
 800ac16:	6123      	str	r3, [r4, #16]
 800ac18:	e7bc      	b.n	800ab94 <_printf_i+0x148>
 800ac1a:	6833      	ldr	r3, [r6, #0]
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	1d1a      	adds	r2, r3, #4
 800ac20:	6032      	str	r2, [r6, #0]
 800ac22:	681e      	ldr	r6, [r3, #0]
 800ac24:	6862      	ldr	r2, [r4, #4]
 800ac26:	4630      	mov	r0, r6
 800ac28:	f000 fcfb 	bl	800b622 <memchr>
 800ac2c:	b108      	cbz	r0, 800ac32 <_printf_i+0x1e6>
 800ac2e:	1b80      	subs	r0, r0, r6
 800ac30:	6060      	str	r0, [r4, #4]
 800ac32:	6863      	ldr	r3, [r4, #4]
 800ac34:	6123      	str	r3, [r4, #16]
 800ac36:	2300      	movs	r3, #0
 800ac38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac3c:	e7aa      	b.n	800ab94 <_printf_i+0x148>
 800ac3e:	6923      	ldr	r3, [r4, #16]
 800ac40:	4632      	mov	r2, r6
 800ac42:	4649      	mov	r1, r9
 800ac44:	4640      	mov	r0, r8
 800ac46:	47d0      	blx	sl
 800ac48:	3001      	adds	r0, #1
 800ac4a:	d0ad      	beq.n	800aba8 <_printf_i+0x15c>
 800ac4c:	6823      	ldr	r3, [r4, #0]
 800ac4e:	079b      	lsls	r3, r3, #30
 800ac50:	d413      	bmi.n	800ac7a <_printf_i+0x22e>
 800ac52:	68e0      	ldr	r0, [r4, #12]
 800ac54:	9b03      	ldr	r3, [sp, #12]
 800ac56:	4298      	cmp	r0, r3
 800ac58:	bfb8      	it	lt
 800ac5a:	4618      	movlt	r0, r3
 800ac5c:	e7a6      	b.n	800abac <_printf_i+0x160>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	4632      	mov	r2, r6
 800ac62:	4649      	mov	r1, r9
 800ac64:	4640      	mov	r0, r8
 800ac66:	47d0      	blx	sl
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d09d      	beq.n	800aba8 <_printf_i+0x15c>
 800ac6c:	3501      	adds	r5, #1
 800ac6e:	68e3      	ldr	r3, [r4, #12]
 800ac70:	9903      	ldr	r1, [sp, #12]
 800ac72:	1a5b      	subs	r3, r3, r1
 800ac74:	42ab      	cmp	r3, r5
 800ac76:	dcf2      	bgt.n	800ac5e <_printf_i+0x212>
 800ac78:	e7eb      	b.n	800ac52 <_printf_i+0x206>
 800ac7a:	2500      	movs	r5, #0
 800ac7c:	f104 0619 	add.w	r6, r4, #25
 800ac80:	e7f5      	b.n	800ac6e <_printf_i+0x222>
 800ac82:	bf00      	nop
 800ac84:	0800ede6 	.word	0x0800ede6
 800ac88:	0800edf7 	.word	0x0800edf7

0800ac8c <_scanf_float>:
 800ac8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac90:	b087      	sub	sp, #28
 800ac92:	4617      	mov	r7, r2
 800ac94:	4680      	mov	r8, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	9303      	str	r3, [sp, #12]
 800ac9a:	688b      	ldr	r3, [r1, #8]
 800ac9c:	1e5a      	subs	r2, r3, #1
 800ac9e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aca2:	460a      	mov	r2, r1
 800aca4:	bf89      	itett	hi
 800aca6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800acaa:	f04f 0b00 	movls.w	fp, #0
 800acae:	eb03 0b05 	addhi.w	fp, r3, r5
 800acb2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800acb6:	f04f 0500 	mov.w	r5, #0
 800acba:	bf88      	it	hi
 800acbc:	608b      	strhi	r3, [r1, #8]
 800acbe:	680b      	ldr	r3, [r1, #0]
 800acc0:	46aa      	mov	sl, r5
 800acc2:	46a9      	mov	r9, r5
 800acc4:	9502      	str	r5, [sp, #8]
 800acc6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800acca:	f842 3b1c 	str.w	r3, [r2], #28
 800acce:	4616      	mov	r6, r2
 800acd0:	9201      	str	r2, [sp, #4]
 800acd2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800acd6:	68a2      	ldr	r2, [r4, #8]
 800acd8:	b152      	cbz	r2, 800acf0 <_scanf_float+0x64>
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b4e      	cmp	r3, #78	@ 0x4e
 800ace0:	d864      	bhi.n	800adac <_scanf_float+0x120>
 800ace2:	2b40      	cmp	r3, #64	@ 0x40
 800ace4:	d83c      	bhi.n	800ad60 <_scanf_float+0xd4>
 800ace6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800acea:	b2c8      	uxtb	r0, r1
 800acec:	280e      	cmp	r0, #14
 800acee:	d93a      	bls.n	800ad66 <_scanf_float+0xda>
 800acf0:	f1b9 0f00 	cmp.w	r9, #0
 800acf4:	d003      	beq.n	800acfe <_scanf_float+0x72>
 800acf6:	6823      	ldr	r3, [r4, #0]
 800acf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad02:	f1ba 0f01 	cmp.w	sl, #1
 800ad06:	f200 8117 	bhi.w	800af38 <_scanf_float+0x2ac>
 800ad0a:	9b01      	ldr	r3, [sp, #4]
 800ad0c:	429e      	cmp	r6, r3
 800ad0e:	f200 8108 	bhi.w	800af22 <_scanf_float+0x296>
 800ad12:	2001      	movs	r0, #1
 800ad14:	b007      	add	sp, #28
 800ad16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad1a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ad1e:	2a0d      	cmp	r2, #13
 800ad20:	d8e6      	bhi.n	800acf0 <_scanf_float+0x64>
 800ad22:	a101      	add	r1, pc, #4	@ (adr r1, 800ad28 <_scanf_float+0x9c>)
 800ad24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ad28:	0800ae6f 	.word	0x0800ae6f
 800ad2c:	0800acf1 	.word	0x0800acf1
 800ad30:	0800acf1 	.word	0x0800acf1
 800ad34:	0800acf1 	.word	0x0800acf1
 800ad38:	0800aecf 	.word	0x0800aecf
 800ad3c:	0800aea7 	.word	0x0800aea7
 800ad40:	0800acf1 	.word	0x0800acf1
 800ad44:	0800acf1 	.word	0x0800acf1
 800ad48:	0800ae7d 	.word	0x0800ae7d
 800ad4c:	0800acf1 	.word	0x0800acf1
 800ad50:	0800acf1 	.word	0x0800acf1
 800ad54:	0800acf1 	.word	0x0800acf1
 800ad58:	0800acf1 	.word	0x0800acf1
 800ad5c:	0800ae35 	.word	0x0800ae35
 800ad60:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ad64:	e7db      	b.n	800ad1e <_scanf_float+0x92>
 800ad66:	290e      	cmp	r1, #14
 800ad68:	d8c2      	bhi.n	800acf0 <_scanf_float+0x64>
 800ad6a:	a001      	add	r0, pc, #4	@ (adr r0, 800ad70 <_scanf_float+0xe4>)
 800ad6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ad70:	0800ae25 	.word	0x0800ae25
 800ad74:	0800acf1 	.word	0x0800acf1
 800ad78:	0800ae25 	.word	0x0800ae25
 800ad7c:	0800aebb 	.word	0x0800aebb
 800ad80:	0800acf1 	.word	0x0800acf1
 800ad84:	0800adcd 	.word	0x0800adcd
 800ad88:	0800ae0b 	.word	0x0800ae0b
 800ad8c:	0800ae0b 	.word	0x0800ae0b
 800ad90:	0800ae0b 	.word	0x0800ae0b
 800ad94:	0800ae0b 	.word	0x0800ae0b
 800ad98:	0800ae0b 	.word	0x0800ae0b
 800ad9c:	0800ae0b 	.word	0x0800ae0b
 800ada0:	0800ae0b 	.word	0x0800ae0b
 800ada4:	0800ae0b 	.word	0x0800ae0b
 800ada8:	0800ae0b 	.word	0x0800ae0b
 800adac:	2b6e      	cmp	r3, #110	@ 0x6e
 800adae:	d809      	bhi.n	800adc4 <_scanf_float+0x138>
 800adb0:	2b60      	cmp	r3, #96	@ 0x60
 800adb2:	d8b2      	bhi.n	800ad1a <_scanf_float+0x8e>
 800adb4:	2b54      	cmp	r3, #84	@ 0x54
 800adb6:	d07b      	beq.n	800aeb0 <_scanf_float+0x224>
 800adb8:	2b59      	cmp	r3, #89	@ 0x59
 800adba:	d199      	bne.n	800acf0 <_scanf_float+0x64>
 800adbc:	2d07      	cmp	r5, #7
 800adbe:	d197      	bne.n	800acf0 <_scanf_float+0x64>
 800adc0:	2508      	movs	r5, #8
 800adc2:	e02c      	b.n	800ae1e <_scanf_float+0x192>
 800adc4:	2b74      	cmp	r3, #116	@ 0x74
 800adc6:	d073      	beq.n	800aeb0 <_scanf_float+0x224>
 800adc8:	2b79      	cmp	r3, #121	@ 0x79
 800adca:	e7f6      	b.n	800adba <_scanf_float+0x12e>
 800adcc:	6821      	ldr	r1, [r4, #0]
 800adce:	05c8      	lsls	r0, r1, #23
 800add0:	d51b      	bpl.n	800ae0a <_scanf_float+0x17e>
 800add2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800add6:	f109 0901 	add.w	r9, r9, #1
 800adda:	6021      	str	r1, [r4, #0]
 800addc:	f1bb 0f00 	cmp.w	fp, #0
 800ade0:	d003      	beq.n	800adea <_scanf_float+0x15e>
 800ade2:	3201      	adds	r2, #1
 800ade4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ade8:	60a2      	str	r2, [r4, #8]
 800adea:	68a3      	ldr	r3, [r4, #8]
 800adec:	3b01      	subs	r3, #1
 800adee:	60a3      	str	r3, [r4, #8]
 800adf0:	6923      	ldr	r3, [r4, #16]
 800adf2:	3301      	adds	r3, #1
 800adf4:	6123      	str	r3, [r4, #16]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	607b      	str	r3, [r7, #4]
 800adfe:	f340 8087 	ble.w	800af10 <_scanf_float+0x284>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	3301      	adds	r3, #1
 800ae06:	603b      	str	r3, [r7, #0]
 800ae08:	e765      	b.n	800acd6 <_scanf_float+0x4a>
 800ae0a:	eb1a 0105 	adds.w	r1, sl, r5
 800ae0e:	f47f af6f 	bne.w	800acf0 <_scanf_float+0x64>
 800ae12:	6822      	ldr	r2, [r4, #0]
 800ae14:	460d      	mov	r5, r1
 800ae16:	468a      	mov	sl, r1
 800ae18:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ae1c:	6022      	str	r2, [r4, #0]
 800ae1e:	f806 3b01 	strb.w	r3, [r6], #1
 800ae22:	e7e2      	b.n	800adea <_scanf_float+0x15e>
 800ae24:	6822      	ldr	r2, [r4, #0]
 800ae26:	0610      	lsls	r0, r2, #24
 800ae28:	f57f af62 	bpl.w	800acf0 <_scanf_float+0x64>
 800ae2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ae30:	6022      	str	r2, [r4, #0]
 800ae32:	e7f4      	b.n	800ae1e <_scanf_float+0x192>
 800ae34:	f1ba 0f00 	cmp.w	sl, #0
 800ae38:	d10e      	bne.n	800ae58 <_scanf_float+0x1cc>
 800ae3a:	f1b9 0f00 	cmp.w	r9, #0
 800ae3e:	d10e      	bne.n	800ae5e <_scanf_float+0x1d2>
 800ae40:	6822      	ldr	r2, [r4, #0]
 800ae42:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ae46:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ae4a:	d108      	bne.n	800ae5e <_scanf_float+0x1d2>
 800ae4c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ae50:	f04f 0a01 	mov.w	sl, #1
 800ae54:	6022      	str	r2, [r4, #0]
 800ae56:	e7e2      	b.n	800ae1e <_scanf_float+0x192>
 800ae58:	f1ba 0f02 	cmp.w	sl, #2
 800ae5c:	d055      	beq.n	800af0a <_scanf_float+0x27e>
 800ae5e:	2d01      	cmp	r5, #1
 800ae60:	d002      	beq.n	800ae68 <_scanf_float+0x1dc>
 800ae62:	2d04      	cmp	r5, #4
 800ae64:	f47f af44 	bne.w	800acf0 <_scanf_float+0x64>
 800ae68:	3501      	adds	r5, #1
 800ae6a:	b2ed      	uxtb	r5, r5
 800ae6c:	e7d7      	b.n	800ae1e <_scanf_float+0x192>
 800ae6e:	f1ba 0f01 	cmp.w	sl, #1
 800ae72:	f47f af3d 	bne.w	800acf0 <_scanf_float+0x64>
 800ae76:	f04f 0a02 	mov.w	sl, #2
 800ae7a:	e7d0      	b.n	800ae1e <_scanf_float+0x192>
 800ae7c:	b97d      	cbnz	r5, 800ae9e <_scanf_float+0x212>
 800ae7e:	f1b9 0f00 	cmp.w	r9, #0
 800ae82:	f47f af38 	bne.w	800acf6 <_scanf_float+0x6a>
 800ae86:	6822      	ldr	r2, [r4, #0]
 800ae88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ae8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ae90:	f040 8107 	bne.w	800b0a2 <_scanf_float+0x416>
 800ae94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ae98:	2501      	movs	r5, #1
 800ae9a:	6022      	str	r2, [r4, #0]
 800ae9c:	e7bf      	b.n	800ae1e <_scanf_float+0x192>
 800ae9e:	2d03      	cmp	r5, #3
 800aea0:	d0e2      	beq.n	800ae68 <_scanf_float+0x1dc>
 800aea2:	2d05      	cmp	r5, #5
 800aea4:	e7de      	b.n	800ae64 <_scanf_float+0x1d8>
 800aea6:	2d02      	cmp	r5, #2
 800aea8:	f47f af22 	bne.w	800acf0 <_scanf_float+0x64>
 800aeac:	2503      	movs	r5, #3
 800aeae:	e7b6      	b.n	800ae1e <_scanf_float+0x192>
 800aeb0:	2d06      	cmp	r5, #6
 800aeb2:	f47f af1d 	bne.w	800acf0 <_scanf_float+0x64>
 800aeb6:	2507      	movs	r5, #7
 800aeb8:	e7b1      	b.n	800ae1e <_scanf_float+0x192>
 800aeba:	6822      	ldr	r2, [r4, #0]
 800aebc:	0591      	lsls	r1, r2, #22
 800aebe:	f57f af17 	bpl.w	800acf0 <_scanf_float+0x64>
 800aec2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800aec6:	f8cd 9008 	str.w	r9, [sp, #8]
 800aeca:	6022      	str	r2, [r4, #0]
 800aecc:	e7a7      	b.n	800ae1e <_scanf_float+0x192>
 800aece:	6822      	ldr	r2, [r4, #0]
 800aed0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800aed4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800aed8:	d006      	beq.n	800aee8 <_scanf_float+0x25c>
 800aeda:	0550      	lsls	r0, r2, #21
 800aedc:	f57f af08 	bpl.w	800acf0 <_scanf_float+0x64>
 800aee0:	f1b9 0f00 	cmp.w	r9, #0
 800aee4:	f000 80dd 	beq.w	800b0a2 <_scanf_float+0x416>
 800aee8:	0591      	lsls	r1, r2, #22
 800aeea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aeee:	bf58      	it	pl
 800aef0:	9902      	ldrpl	r1, [sp, #8]
 800aef2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800aef6:	bf58      	it	pl
 800aef8:	eba9 0101 	subpl.w	r1, r9, r1
 800aefc:	6022      	str	r2, [r4, #0]
 800aefe:	f04f 0900 	mov.w	r9, #0
 800af02:	bf58      	it	pl
 800af04:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800af08:	e789      	b.n	800ae1e <_scanf_float+0x192>
 800af0a:	f04f 0a03 	mov.w	sl, #3
 800af0e:	e786      	b.n	800ae1e <_scanf_float+0x192>
 800af10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800af14:	4639      	mov	r1, r7
 800af16:	4640      	mov	r0, r8
 800af18:	4798      	blx	r3
 800af1a:	2800      	cmp	r0, #0
 800af1c:	f43f aedb 	beq.w	800acd6 <_scanf_float+0x4a>
 800af20:	e6e6      	b.n	800acf0 <_scanf_float+0x64>
 800af22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800af26:	463a      	mov	r2, r7
 800af28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af2c:	4640      	mov	r0, r8
 800af2e:	4798      	blx	r3
 800af30:	6923      	ldr	r3, [r4, #16]
 800af32:	3b01      	subs	r3, #1
 800af34:	6123      	str	r3, [r4, #16]
 800af36:	e6e8      	b.n	800ad0a <_scanf_float+0x7e>
 800af38:	1e6b      	subs	r3, r5, #1
 800af3a:	2b06      	cmp	r3, #6
 800af3c:	d824      	bhi.n	800af88 <_scanf_float+0x2fc>
 800af3e:	2d02      	cmp	r5, #2
 800af40:	d836      	bhi.n	800afb0 <_scanf_float+0x324>
 800af42:	9b01      	ldr	r3, [sp, #4]
 800af44:	429e      	cmp	r6, r3
 800af46:	f67f aee4 	bls.w	800ad12 <_scanf_float+0x86>
 800af4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800af4e:	463a      	mov	r2, r7
 800af50:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af54:	4640      	mov	r0, r8
 800af56:	4798      	blx	r3
 800af58:	6923      	ldr	r3, [r4, #16]
 800af5a:	3b01      	subs	r3, #1
 800af5c:	6123      	str	r3, [r4, #16]
 800af5e:	e7f0      	b.n	800af42 <_scanf_float+0x2b6>
 800af60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800af64:	463a      	mov	r2, r7
 800af66:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800af6a:	4640      	mov	r0, r8
 800af6c:	4798      	blx	r3
 800af6e:	6923      	ldr	r3, [r4, #16]
 800af70:	3b01      	subs	r3, #1
 800af72:	6123      	str	r3, [r4, #16]
 800af74:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af78:	fa5f fa8a 	uxtb.w	sl, sl
 800af7c:	f1ba 0f02 	cmp.w	sl, #2
 800af80:	d1ee      	bne.n	800af60 <_scanf_float+0x2d4>
 800af82:	3d03      	subs	r5, #3
 800af84:	b2ed      	uxtb	r5, r5
 800af86:	1b76      	subs	r6, r6, r5
 800af88:	6823      	ldr	r3, [r4, #0]
 800af8a:	05da      	lsls	r2, r3, #23
 800af8c:	d52f      	bpl.n	800afee <_scanf_float+0x362>
 800af8e:	055b      	lsls	r3, r3, #21
 800af90:	d511      	bpl.n	800afb6 <_scanf_float+0x32a>
 800af92:	9b01      	ldr	r3, [sp, #4]
 800af94:	429e      	cmp	r6, r3
 800af96:	f67f aebc 	bls.w	800ad12 <_scanf_float+0x86>
 800af9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800af9e:	463a      	mov	r2, r7
 800afa0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800afa4:	4640      	mov	r0, r8
 800afa6:	4798      	blx	r3
 800afa8:	6923      	ldr	r3, [r4, #16]
 800afaa:	3b01      	subs	r3, #1
 800afac:	6123      	str	r3, [r4, #16]
 800afae:	e7f0      	b.n	800af92 <_scanf_float+0x306>
 800afb0:	46aa      	mov	sl, r5
 800afb2:	46b3      	mov	fp, r6
 800afb4:	e7de      	b.n	800af74 <_scanf_float+0x2e8>
 800afb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800afba:	1e75      	subs	r5, r6, #1
 800afbc:	6923      	ldr	r3, [r4, #16]
 800afbe:	2965      	cmp	r1, #101	@ 0x65
 800afc0:	f103 33ff 	add.w	r3, r3, #4294967295
 800afc4:	6123      	str	r3, [r4, #16]
 800afc6:	d00c      	beq.n	800afe2 <_scanf_float+0x356>
 800afc8:	2945      	cmp	r1, #69	@ 0x45
 800afca:	d00a      	beq.n	800afe2 <_scanf_float+0x356>
 800afcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800afd0:	463a      	mov	r2, r7
 800afd2:	4640      	mov	r0, r8
 800afd4:	1eb5      	subs	r5, r6, #2
 800afd6:	4798      	blx	r3
 800afd8:	6923      	ldr	r3, [r4, #16]
 800afda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800afde:	3b01      	subs	r3, #1
 800afe0:	6123      	str	r3, [r4, #16]
 800afe2:	462e      	mov	r6, r5
 800afe4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800afe8:	463a      	mov	r2, r7
 800afea:	4640      	mov	r0, r8
 800afec:	4798      	blx	r3
 800afee:	6822      	ldr	r2, [r4, #0]
 800aff0:	f012 0210 	ands.w	r2, r2, #16
 800aff4:	d001      	beq.n	800affa <_scanf_float+0x36e>
 800aff6:	2000      	movs	r0, #0
 800aff8:	e68c      	b.n	800ad14 <_scanf_float+0x88>
 800affa:	7032      	strb	r2, [r6, #0]
 800affc:	6823      	ldr	r3, [r4, #0]
 800affe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b006:	d11c      	bne.n	800b042 <_scanf_float+0x3b6>
 800b008:	9b02      	ldr	r3, [sp, #8]
 800b00a:	454b      	cmp	r3, r9
 800b00c:	eba3 0209 	sub.w	r2, r3, r9
 800b010:	d123      	bne.n	800b05a <_scanf_float+0x3ce>
 800b012:	2200      	movs	r2, #0
 800b014:	9901      	ldr	r1, [sp, #4]
 800b016:	4640      	mov	r0, r8
 800b018:	f002 fc72 	bl	800d900 <_strtod_r>
 800b01c:	6821      	ldr	r1, [r4, #0]
 800b01e:	9b03      	ldr	r3, [sp, #12]
 800b020:	f011 0f02 	tst.w	r1, #2
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	ec57 6b10 	vmov	r6, r7, d0
 800b02a:	f103 0204 	add.w	r2, r3, #4
 800b02e:	d01f      	beq.n	800b070 <_scanf_float+0x3e4>
 800b030:	9903      	ldr	r1, [sp, #12]
 800b032:	600a      	str	r2, [r1, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	e9c3 6700 	strd	r6, r7, [r3]
 800b03a:	68e3      	ldr	r3, [r4, #12]
 800b03c:	3301      	adds	r3, #1
 800b03e:	60e3      	str	r3, [r4, #12]
 800b040:	e7d9      	b.n	800aff6 <_scanf_float+0x36a>
 800b042:	9b04      	ldr	r3, [sp, #16]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d0e4      	beq.n	800b012 <_scanf_float+0x386>
 800b048:	9905      	ldr	r1, [sp, #20]
 800b04a:	230a      	movs	r3, #10
 800b04c:	4640      	mov	r0, r8
 800b04e:	3101      	adds	r1, #1
 800b050:	f002 fcd6 	bl	800da00 <_strtol_r>
 800b054:	9b04      	ldr	r3, [sp, #16]
 800b056:	9e05      	ldr	r6, [sp, #20]
 800b058:	1ac2      	subs	r2, r0, r3
 800b05a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b05e:	4912      	ldr	r1, [pc, #72]	@ (800b0a8 <_scanf_float+0x41c>)
 800b060:	429e      	cmp	r6, r3
 800b062:	bf28      	it	cs
 800b064:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b068:	4630      	mov	r0, r6
 800b06a:	f000 f953 	bl	800b314 <siprintf>
 800b06e:	e7d0      	b.n	800b012 <_scanf_float+0x386>
 800b070:	f011 0f04 	tst.w	r1, #4
 800b074:	9903      	ldr	r1, [sp, #12]
 800b076:	600a      	str	r2, [r1, #0]
 800b078:	d1dc      	bne.n	800b034 <_scanf_float+0x3a8>
 800b07a:	681d      	ldr	r5, [r3, #0]
 800b07c:	4632      	mov	r2, r6
 800b07e:	463b      	mov	r3, r7
 800b080:	4630      	mov	r0, r6
 800b082:	4639      	mov	r1, r7
 800b084:	f7f5 fd62 	bl	8000b4c <__aeabi_dcmpun>
 800b088:	b128      	cbz	r0, 800b096 <_scanf_float+0x40a>
 800b08a:	4808      	ldr	r0, [pc, #32]	@ (800b0ac <_scanf_float+0x420>)
 800b08c:	f000 fad8 	bl	800b640 <nanf>
 800b090:	ed85 0a00 	vstr	s0, [r5]
 800b094:	e7d1      	b.n	800b03a <_scanf_float+0x3ae>
 800b096:	4630      	mov	r0, r6
 800b098:	4639      	mov	r1, r7
 800b09a:	f7f5 fdb5 	bl	8000c08 <__aeabi_d2f>
 800b09e:	6028      	str	r0, [r5, #0]
 800b0a0:	e7cb      	b.n	800b03a <_scanf_float+0x3ae>
 800b0a2:	f04f 0900 	mov.w	r9, #0
 800b0a6:	e62a      	b.n	800acfe <_scanf_float+0x72>
 800b0a8:	0800ee08 	.word	0x0800ee08
 800b0ac:	0800f19d 	.word	0x0800f19d

0800b0b0 <std>:
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	b510      	push	{r4, lr}
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	6083      	str	r3, [r0, #8]
 800b0b8:	8181      	strh	r1, [r0, #12]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6643      	str	r3, [r0, #100]	@ 0x64
 800b0be:	81c2      	strh	r2, [r0, #14]
 800b0c0:	2208      	movs	r2, #8
 800b0c2:	6183      	str	r3, [r0, #24]
 800b0c4:	e9c0 3300 	strd	r3, r3, [r0]
 800b0c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0cc:	305c      	adds	r0, #92	@ 0x5c
 800b0ce:	f000 fa19 	bl	800b504 <memset>
 800b0d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b108 <std+0x58>)
 800b0d4:	6224      	str	r4, [r4, #32]
 800b0d6:	6263      	str	r3, [r4, #36]	@ 0x24
 800b0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b10c <std+0x5c>)
 800b0da:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b0dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b110 <std+0x60>)
 800b0de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b0e0:	4b0c      	ldr	r3, [pc, #48]	@ (800b114 <std+0x64>)
 800b0e2:	6323      	str	r3, [r4, #48]	@ 0x30
 800b0e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b118 <std+0x68>)
 800b0e6:	429c      	cmp	r4, r3
 800b0e8:	d006      	beq.n	800b0f8 <std+0x48>
 800b0ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b0ee:	4294      	cmp	r4, r2
 800b0f0:	d002      	beq.n	800b0f8 <std+0x48>
 800b0f2:	33d0      	adds	r3, #208	@ 0xd0
 800b0f4:	429c      	cmp	r4, r3
 800b0f6:	d105      	bne.n	800b104 <std+0x54>
 800b0f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b100:	f000 ba8c 	b.w	800b61c <__retarget_lock_init_recursive>
 800b104:	bd10      	pop	{r4, pc}
 800b106:	bf00      	nop
 800b108:	0800b355 	.word	0x0800b355
 800b10c:	0800b377 	.word	0x0800b377
 800b110:	0800b3af 	.word	0x0800b3af
 800b114:	0800b3d3 	.word	0x0800b3d3
 800b118:	200004a8 	.word	0x200004a8

0800b11c <stdio_exit_handler>:
 800b11c:	4a02      	ldr	r2, [pc, #8]	@ (800b128 <stdio_exit_handler+0xc>)
 800b11e:	4903      	ldr	r1, [pc, #12]	@ (800b12c <stdio_exit_handler+0x10>)
 800b120:	4803      	ldr	r0, [pc, #12]	@ (800b130 <stdio_exit_handler+0x14>)
 800b122:	f000 b869 	b.w	800b1f8 <_fwalk_sglue>
 800b126:	bf00      	nop
 800b128:	20000054 	.word	0x20000054
 800b12c:	0800e041 	.word	0x0800e041
 800b130:	20000064 	.word	0x20000064

0800b134 <cleanup_stdio>:
 800b134:	6841      	ldr	r1, [r0, #4]
 800b136:	4b0c      	ldr	r3, [pc, #48]	@ (800b168 <cleanup_stdio+0x34>)
 800b138:	4299      	cmp	r1, r3
 800b13a:	b510      	push	{r4, lr}
 800b13c:	4604      	mov	r4, r0
 800b13e:	d001      	beq.n	800b144 <cleanup_stdio+0x10>
 800b140:	f002 ff7e 	bl	800e040 <_fflush_r>
 800b144:	68a1      	ldr	r1, [r4, #8]
 800b146:	4b09      	ldr	r3, [pc, #36]	@ (800b16c <cleanup_stdio+0x38>)
 800b148:	4299      	cmp	r1, r3
 800b14a:	d002      	beq.n	800b152 <cleanup_stdio+0x1e>
 800b14c:	4620      	mov	r0, r4
 800b14e:	f002 ff77 	bl	800e040 <_fflush_r>
 800b152:	68e1      	ldr	r1, [r4, #12]
 800b154:	4b06      	ldr	r3, [pc, #24]	@ (800b170 <cleanup_stdio+0x3c>)
 800b156:	4299      	cmp	r1, r3
 800b158:	d004      	beq.n	800b164 <cleanup_stdio+0x30>
 800b15a:	4620      	mov	r0, r4
 800b15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b160:	f002 bf6e 	b.w	800e040 <_fflush_r>
 800b164:	bd10      	pop	{r4, pc}
 800b166:	bf00      	nop
 800b168:	200004a8 	.word	0x200004a8
 800b16c:	20000510 	.word	0x20000510
 800b170:	20000578 	.word	0x20000578

0800b174 <global_stdio_init.part.0>:
 800b174:	b510      	push	{r4, lr}
 800b176:	4b0b      	ldr	r3, [pc, #44]	@ (800b1a4 <global_stdio_init.part.0+0x30>)
 800b178:	2104      	movs	r1, #4
 800b17a:	4c0b      	ldr	r4, [pc, #44]	@ (800b1a8 <global_stdio_init.part.0+0x34>)
 800b17c:	4a0b      	ldr	r2, [pc, #44]	@ (800b1ac <global_stdio_init.part.0+0x38>)
 800b17e:	4620      	mov	r0, r4
 800b180:	601a      	str	r2, [r3, #0]
 800b182:	2200      	movs	r2, #0
 800b184:	f7ff ff94 	bl	800b0b0 <std>
 800b188:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b18c:	2201      	movs	r2, #1
 800b18e:	2109      	movs	r1, #9
 800b190:	f7ff ff8e 	bl	800b0b0 <std>
 800b194:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b198:	2202      	movs	r2, #2
 800b19a:	2112      	movs	r1, #18
 800b19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1a0:	f7ff bf86 	b.w	800b0b0 <std>
 800b1a4:	200005e0 	.word	0x200005e0
 800b1a8:	200004a8 	.word	0x200004a8
 800b1ac:	0800b11d 	.word	0x0800b11d

0800b1b0 <__sfp_lock_acquire>:
 800b1b0:	4801      	ldr	r0, [pc, #4]	@ (800b1b8 <__sfp_lock_acquire+0x8>)
 800b1b2:	f000 ba34 	b.w	800b61e <__retarget_lock_acquire_recursive>
 800b1b6:	bf00      	nop
 800b1b8:	200005e9 	.word	0x200005e9

0800b1bc <__sfp_lock_release>:
 800b1bc:	4801      	ldr	r0, [pc, #4]	@ (800b1c4 <__sfp_lock_release+0x8>)
 800b1be:	f000 ba2f 	b.w	800b620 <__retarget_lock_release_recursive>
 800b1c2:	bf00      	nop
 800b1c4:	200005e9 	.word	0x200005e9

0800b1c8 <__sinit>:
 800b1c8:	b510      	push	{r4, lr}
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	f7ff fff0 	bl	800b1b0 <__sfp_lock_acquire>
 800b1d0:	6a23      	ldr	r3, [r4, #32]
 800b1d2:	b11b      	cbz	r3, 800b1dc <__sinit+0x14>
 800b1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1d8:	f7ff bff0 	b.w	800b1bc <__sfp_lock_release>
 800b1dc:	4b04      	ldr	r3, [pc, #16]	@ (800b1f0 <__sinit+0x28>)
 800b1de:	6223      	str	r3, [r4, #32]
 800b1e0:	4b04      	ldr	r3, [pc, #16]	@ (800b1f4 <__sinit+0x2c>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1f5      	bne.n	800b1d4 <__sinit+0xc>
 800b1e8:	f7ff ffc4 	bl	800b174 <global_stdio_init.part.0>
 800b1ec:	e7f2      	b.n	800b1d4 <__sinit+0xc>
 800b1ee:	bf00      	nop
 800b1f0:	0800b135 	.word	0x0800b135
 800b1f4:	200005e0 	.word	0x200005e0

0800b1f8 <_fwalk_sglue>:
 800b1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1fc:	4607      	mov	r7, r0
 800b1fe:	4688      	mov	r8, r1
 800b200:	4614      	mov	r4, r2
 800b202:	2600      	movs	r6, #0
 800b204:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b208:	f1b9 0901 	subs.w	r9, r9, #1
 800b20c:	d505      	bpl.n	800b21a <_fwalk_sglue+0x22>
 800b20e:	6824      	ldr	r4, [r4, #0]
 800b210:	2c00      	cmp	r4, #0
 800b212:	d1f7      	bne.n	800b204 <_fwalk_sglue+0xc>
 800b214:	4630      	mov	r0, r6
 800b216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b21a:	89ab      	ldrh	r3, [r5, #12]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d907      	bls.n	800b230 <_fwalk_sglue+0x38>
 800b220:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b224:	3301      	adds	r3, #1
 800b226:	d003      	beq.n	800b230 <_fwalk_sglue+0x38>
 800b228:	4629      	mov	r1, r5
 800b22a:	4638      	mov	r0, r7
 800b22c:	47c0      	blx	r8
 800b22e:	4306      	orrs	r6, r0
 800b230:	3568      	adds	r5, #104	@ 0x68
 800b232:	e7e9      	b.n	800b208 <_fwalk_sglue+0x10>

0800b234 <iprintf>:
 800b234:	b40f      	push	{r0, r1, r2, r3}
 800b236:	b507      	push	{r0, r1, r2, lr}
 800b238:	4906      	ldr	r1, [pc, #24]	@ (800b254 <iprintf+0x20>)
 800b23a:	ab04      	add	r3, sp, #16
 800b23c:	6808      	ldr	r0, [r1, #0]
 800b23e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b242:	6881      	ldr	r1, [r0, #8]
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	f002 fd5f 	bl	800dd08 <_vfiprintf_r>
 800b24a:	b003      	add	sp, #12
 800b24c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b250:	b004      	add	sp, #16
 800b252:	4770      	bx	lr
 800b254:	20000060 	.word	0x20000060

0800b258 <_puts_r>:
 800b258:	6a03      	ldr	r3, [r0, #32]
 800b25a:	b570      	push	{r4, r5, r6, lr}
 800b25c:	4605      	mov	r5, r0
 800b25e:	460e      	mov	r6, r1
 800b260:	6884      	ldr	r4, [r0, #8]
 800b262:	b90b      	cbnz	r3, 800b268 <_puts_r+0x10>
 800b264:	f7ff ffb0 	bl	800b1c8 <__sinit>
 800b268:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b26a:	07db      	lsls	r3, r3, #31
 800b26c:	d405      	bmi.n	800b27a <_puts_r+0x22>
 800b26e:	89a3      	ldrh	r3, [r4, #12]
 800b270:	0598      	lsls	r0, r3, #22
 800b272:	d402      	bmi.n	800b27a <_puts_r+0x22>
 800b274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b276:	f000 f9d2 	bl	800b61e <__retarget_lock_acquire_recursive>
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	0719      	lsls	r1, r3, #28
 800b27e:	d502      	bpl.n	800b286 <_puts_r+0x2e>
 800b280:	6923      	ldr	r3, [r4, #16]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d135      	bne.n	800b2f2 <_puts_r+0x9a>
 800b286:	4621      	mov	r1, r4
 800b288:	4628      	mov	r0, r5
 800b28a:	f000 f8e5 	bl	800b458 <__swsetup_r>
 800b28e:	b380      	cbz	r0, 800b2f2 <_puts_r+0x9a>
 800b290:	f04f 35ff 	mov.w	r5, #4294967295
 800b294:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b296:	07da      	lsls	r2, r3, #31
 800b298:	d405      	bmi.n	800b2a6 <_puts_r+0x4e>
 800b29a:	89a3      	ldrh	r3, [r4, #12]
 800b29c:	059b      	lsls	r3, r3, #22
 800b29e:	d402      	bmi.n	800b2a6 <_puts_r+0x4e>
 800b2a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2a2:	f000 f9bd 	bl	800b620 <__retarget_lock_release_recursive>
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	bd70      	pop	{r4, r5, r6, pc}
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	da04      	bge.n	800b2b8 <_puts_r+0x60>
 800b2ae:	69a2      	ldr	r2, [r4, #24]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	dc17      	bgt.n	800b2e4 <_puts_r+0x8c>
 800b2b4:	290a      	cmp	r1, #10
 800b2b6:	d015      	beq.n	800b2e4 <_puts_r+0x8c>
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	1c5a      	adds	r2, r3, #1
 800b2bc:	6022      	str	r2, [r4, #0]
 800b2be:	7019      	strb	r1, [r3, #0]
 800b2c0:	68a3      	ldr	r3, [r4, #8]
 800b2c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	60a3      	str	r3, [r4, #8]
 800b2ca:	2900      	cmp	r1, #0
 800b2cc:	d1ed      	bne.n	800b2aa <_puts_r+0x52>
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	da11      	bge.n	800b2f6 <_puts_r+0x9e>
 800b2d2:	4622      	mov	r2, r4
 800b2d4:	210a      	movs	r1, #10
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	f000 f87f 	bl	800b3da <__swbuf_r>
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d0d7      	beq.n	800b290 <_puts_r+0x38>
 800b2e0:	250a      	movs	r5, #10
 800b2e2:	e7d7      	b.n	800b294 <_puts_r+0x3c>
 800b2e4:	4622      	mov	r2, r4
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	f000 f877 	bl	800b3da <__swbuf_r>
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	d1e7      	bne.n	800b2c0 <_puts_r+0x68>
 800b2f0:	e7ce      	b.n	800b290 <_puts_r+0x38>
 800b2f2:	3e01      	subs	r6, #1
 800b2f4:	e7e4      	b.n	800b2c0 <_puts_r+0x68>
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	1c5a      	adds	r2, r3, #1
 800b2fa:	6022      	str	r2, [r4, #0]
 800b2fc:	220a      	movs	r2, #10
 800b2fe:	701a      	strb	r2, [r3, #0]
 800b300:	e7ee      	b.n	800b2e0 <_puts_r+0x88>
	...

0800b304 <puts>:
 800b304:	4b02      	ldr	r3, [pc, #8]	@ (800b310 <puts+0xc>)
 800b306:	4601      	mov	r1, r0
 800b308:	6818      	ldr	r0, [r3, #0]
 800b30a:	f7ff bfa5 	b.w	800b258 <_puts_r>
 800b30e:	bf00      	nop
 800b310:	20000060 	.word	0x20000060

0800b314 <siprintf>:
 800b314:	b40e      	push	{r1, r2, r3}
 800b316:	b500      	push	{lr}
 800b318:	b09c      	sub	sp, #112	@ 0x70
 800b31a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b31e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b320:	9002      	str	r0, [sp, #8]
 800b322:	9006      	str	r0, [sp, #24]
 800b324:	9107      	str	r1, [sp, #28]
 800b326:	9104      	str	r1, [sp, #16]
 800b328:	4808      	ldr	r0, [pc, #32]	@ (800b34c <siprintf+0x38>)
 800b32a:	4909      	ldr	r1, [pc, #36]	@ (800b350 <siprintf+0x3c>)
 800b32c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b330:	9105      	str	r1, [sp, #20]
 800b332:	a902      	add	r1, sp, #8
 800b334:	6800      	ldr	r0, [r0, #0]
 800b336:	9301      	str	r3, [sp, #4]
 800b338:	f002 fbc0 	bl	800dabc <_svfiprintf_r>
 800b33c:	9b02      	ldr	r3, [sp, #8]
 800b33e:	2200      	movs	r2, #0
 800b340:	701a      	strb	r2, [r3, #0]
 800b342:	b01c      	add	sp, #112	@ 0x70
 800b344:	f85d eb04 	ldr.w	lr, [sp], #4
 800b348:	b003      	add	sp, #12
 800b34a:	4770      	bx	lr
 800b34c:	20000060 	.word	0x20000060
 800b350:	ffff0208 	.word	0xffff0208

0800b354 <__sread>:
 800b354:	b510      	push	{r4, lr}
 800b356:	460c      	mov	r4, r1
 800b358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b35c:	f000 f900 	bl	800b560 <_read_r>
 800b360:	2800      	cmp	r0, #0
 800b362:	bfab      	itete	ge
 800b364:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b366:	89a3      	ldrhlt	r3, [r4, #12]
 800b368:	181b      	addge	r3, r3, r0
 800b36a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b36e:	bfac      	ite	ge
 800b370:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b372:	81a3      	strhlt	r3, [r4, #12]
 800b374:	bd10      	pop	{r4, pc}

0800b376 <__swrite>:
 800b376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b37a:	461f      	mov	r7, r3
 800b37c:	898b      	ldrh	r3, [r1, #12]
 800b37e:	4605      	mov	r5, r0
 800b380:	460c      	mov	r4, r1
 800b382:	05db      	lsls	r3, r3, #23
 800b384:	4616      	mov	r6, r2
 800b386:	d505      	bpl.n	800b394 <__swrite+0x1e>
 800b388:	2302      	movs	r3, #2
 800b38a:	2200      	movs	r2, #0
 800b38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b390:	f000 f8d4 	bl	800b53c <_lseek_r>
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	4632      	mov	r2, r6
 800b398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b39c:	4628      	mov	r0, r5
 800b39e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3a2:	81a3      	strh	r3, [r4, #12]
 800b3a4:	463b      	mov	r3, r7
 800b3a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3aa:	f000 b8fb 	b.w	800b5a4 <_write_r>

0800b3ae <__sseek>:
 800b3ae:	b510      	push	{r4, lr}
 800b3b0:	460c      	mov	r4, r1
 800b3b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b6:	f000 f8c1 	bl	800b53c <_lseek_r>
 800b3ba:	1c43      	adds	r3, r0, #1
 800b3bc:	89a3      	ldrh	r3, [r4, #12]
 800b3be:	bf15      	itete	ne
 800b3c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b3c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b3c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b3ca:	81a3      	strheq	r3, [r4, #12]
 800b3cc:	bf18      	it	ne
 800b3ce:	81a3      	strhne	r3, [r4, #12]
 800b3d0:	bd10      	pop	{r4, pc}

0800b3d2 <__sclose>:
 800b3d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3d6:	f000 b8a1 	b.w	800b51c <_close_r>

0800b3da <__swbuf_r>:
 800b3da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3dc:	460e      	mov	r6, r1
 800b3de:	4614      	mov	r4, r2
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	b118      	cbz	r0, 800b3ec <__swbuf_r+0x12>
 800b3e4:	6a03      	ldr	r3, [r0, #32]
 800b3e6:	b90b      	cbnz	r3, 800b3ec <__swbuf_r+0x12>
 800b3e8:	f7ff feee 	bl	800b1c8 <__sinit>
 800b3ec:	69a3      	ldr	r3, [r4, #24]
 800b3ee:	60a3      	str	r3, [r4, #8]
 800b3f0:	89a3      	ldrh	r3, [r4, #12]
 800b3f2:	071a      	lsls	r2, r3, #28
 800b3f4:	d501      	bpl.n	800b3fa <__swbuf_r+0x20>
 800b3f6:	6923      	ldr	r3, [r4, #16]
 800b3f8:	b943      	cbnz	r3, 800b40c <__swbuf_r+0x32>
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	f000 f82b 	bl	800b458 <__swsetup_r>
 800b402:	b118      	cbz	r0, 800b40c <__swbuf_r+0x32>
 800b404:	f04f 37ff 	mov.w	r7, #4294967295
 800b408:	4638      	mov	r0, r7
 800b40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	b2f6      	uxtb	r6, r6
 800b410:	6922      	ldr	r2, [r4, #16]
 800b412:	4637      	mov	r7, r6
 800b414:	1a98      	subs	r0, r3, r2
 800b416:	6963      	ldr	r3, [r4, #20]
 800b418:	4283      	cmp	r3, r0
 800b41a:	dc05      	bgt.n	800b428 <__swbuf_r+0x4e>
 800b41c:	4621      	mov	r1, r4
 800b41e:	4628      	mov	r0, r5
 800b420:	f002 fe0e 	bl	800e040 <_fflush_r>
 800b424:	2800      	cmp	r0, #0
 800b426:	d1ed      	bne.n	800b404 <__swbuf_r+0x2a>
 800b428:	68a3      	ldr	r3, [r4, #8]
 800b42a:	3b01      	subs	r3, #1
 800b42c:	60a3      	str	r3, [r4, #8]
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	1c5a      	adds	r2, r3, #1
 800b432:	6022      	str	r2, [r4, #0]
 800b434:	701e      	strb	r6, [r3, #0]
 800b436:	1c43      	adds	r3, r0, #1
 800b438:	6962      	ldr	r2, [r4, #20]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d004      	beq.n	800b448 <__swbuf_r+0x6e>
 800b43e:	89a3      	ldrh	r3, [r4, #12]
 800b440:	07db      	lsls	r3, r3, #31
 800b442:	d5e1      	bpl.n	800b408 <__swbuf_r+0x2e>
 800b444:	2e0a      	cmp	r6, #10
 800b446:	d1df      	bne.n	800b408 <__swbuf_r+0x2e>
 800b448:	4621      	mov	r1, r4
 800b44a:	4628      	mov	r0, r5
 800b44c:	f002 fdf8 	bl	800e040 <_fflush_r>
 800b450:	2800      	cmp	r0, #0
 800b452:	d0d9      	beq.n	800b408 <__swbuf_r+0x2e>
 800b454:	e7d6      	b.n	800b404 <__swbuf_r+0x2a>
	...

0800b458 <__swsetup_r>:
 800b458:	b538      	push	{r3, r4, r5, lr}
 800b45a:	4b29      	ldr	r3, [pc, #164]	@ (800b500 <__swsetup_r+0xa8>)
 800b45c:	4605      	mov	r5, r0
 800b45e:	460c      	mov	r4, r1
 800b460:	6818      	ldr	r0, [r3, #0]
 800b462:	b118      	cbz	r0, 800b46c <__swsetup_r+0x14>
 800b464:	6a03      	ldr	r3, [r0, #32]
 800b466:	b90b      	cbnz	r3, 800b46c <__swsetup_r+0x14>
 800b468:	f7ff feae 	bl	800b1c8 <__sinit>
 800b46c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b470:	0719      	lsls	r1, r3, #28
 800b472:	d422      	bmi.n	800b4ba <__swsetup_r+0x62>
 800b474:	06da      	lsls	r2, r3, #27
 800b476:	d407      	bmi.n	800b488 <__swsetup_r+0x30>
 800b478:	2209      	movs	r2, #9
 800b47a:	602a      	str	r2, [r5, #0]
 800b47c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b480:	f04f 30ff 	mov.w	r0, #4294967295
 800b484:	81a3      	strh	r3, [r4, #12]
 800b486:	e033      	b.n	800b4f0 <__swsetup_r+0x98>
 800b488:	0758      	lsls	r0, r3, #29
 800b48a:	d512      	bpl.n	800b4b2 <__swsetup_r+0x5a>
 800b48c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b48e:	b141      	cbz	r1, 800b4a2 <__swsetup_r+0x4a>
 800b490:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b494:	4299      	cmp	r1, r3
 800b496:	d002      	beq.n	800b49e <__swsetup_r+0x46>
 800b498:	4628      	mov	r0, r5
 800b49a:	f000 ff29 	bl	800c2f0 <_free_r>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b4a8:	81a3      	strh	r3, [r4, #12]
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	6063      	str	r3, [r4, #4]
 800b4ae:	6923      	ldr	r3, [r4, #16]
 800b4b0:	6023      	str	r3, [r4, #0]
 800b4b2:	89a3      	ldrh	r3, [r4, #12]
 800b4b4:	f043 0308 	orr.w	r3, r3, #8
 800b4b8:	81a3      	strh	r3, [r4, #12]
 800b4ba:	6923      	ldr	r3, [r4, #16]
 800b4bc:	b94b      	cbnz	r3, 800b4d2 <__swsetup_r+0x7a>
 800b4be:	89a3      	ldrh	r3, [r4, #12]
 800b4c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b4c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4c8:	d003      	beq.n	800b4d2 <__swsetup_r+0x7a>
 800b4ca:	4621      	mov	r1, r4
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	f002 fe04 	bl	800e0da <__smakebuf_r>
 800b4d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d6:	f013 0201 	ands.w	r2, r3, #1
 800b4da:	d00a      	beq.n	800b4f2 <__swsetup_r+0x9a>
 800b4dc:	2200      	movs	r2, #0
 800b4de:	60a2      	str	r2, [r4, #8]
 800b4e0:	6962      	ldr	r2, [r4, #20]
 800b4e2:	4252      	negs	r2, r2
 800b4e4:	61a2      	str	r2, [r4, #24]
 800b4e6:	6922      	ldr	r2, [r4, #16]
 800b4e8:	b942      	cbnz	r2, 800b4fc <__swsetup_r+0xa4>
 800b4ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b4ee:	d1c5      	bne.n	800b47c <__swsetup_r+0x24>
 800b4f0:	bd38      	pop	{r3, r4, r5, pc}
 800b4f2:	0799      	lsls	r1, r3, #30
 800b4f4:	bf58      	it	pl
 800b4f6:	6962      	ldrpl	r2, [r4, #20]
 800b4f8:	60a2      	str	r2, [r4, #8]
 800b4fa:	e7f4      	b.n	800b4e6 <__swsetup_r+0x8e>
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	e7f7      	b.n	800b4f0 <__swsetup_r+0x98>
 800b500:	20000060 	.word	0x20000060

0800b504 <memset>:
 800b504:	4402      	add	r2, r0
 800b506:	4603      	mov	r3, r0
 800b508:	4293      	cmp	r3, r2
 800b50a:	d100      	bne.n	800b50e <memset+0xa>
 800b50c:	4770      	bx	lr
 800b50e:	f803 1b01 	strb.w	r1, [r3], #1
 800b512:	e7f9      	b.n	800b508 <memset+0x4>

0800b514 <_localeconv_r>:
 800b514:	4800      	ldr	r0, [pc, #0]	@ (800b518 <_localeconv_r+0x4>)
 800b516:	4770      	bx	lr
 800b518:	200001a0 	.word	0x200001a0

0800b51c <_close_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	2300      	movs	r3, #0
 800b520:	4d05      	ldr	r5, [pc, #20]	@ (800b538 <_close_r+0x1c>)
 800b522:	4604      	mov	r4, r0
 800b524:	4608      	mov	r0, r1
 800b526:	602b      	str	r3, [r5, #0]
 800b528:	f7f7 fcda 	bl	8002ee0 <_close>
 800b52c:	1c43      	adds	r3, r0, #1
 800b52e:	d102      	bne.n	800b536 <_close_r+0x1a>
 800b530:	682b      	ldr	r3, [r5, #0]
 800b532:	b103      	cbz	r3, 800b536 <_close_r+0x1a>
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	bd38      	pop	{r3, r4, r5, pc}
 800b538:	200005e4 	.word	0x200005e4

0800b53c <_lseek_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4604      	mov	r4, r0
 800b540:	4d06      	ldr	r5, [pc, #24]	@ (800b55c <_lseek_r+0x20>)
 800b542:	4608      	mov	r0, r1
 800b544:	4611      	mov	r1, r2
 800b546:	2200      	movs	r2, #0
 800b548:	602a      	str	r2, [r5, #0]
 800b54a:	461a      	mov	r2, r3
 800b54c:	f7f7 fcef 	bl	8002f2e <_lseek>
 800b550:	1c43      	adds	r3, r0, #1
 800b552:	d102      	bne.n	800b55a <_lseek_r+0x1e>
 800b554:	682b      	ldr	r3, [r5, #0]
 800b556:	b103      	cbz	r3, 800b55a <_lseek_r+0x1e>
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	bd38      	pop	{r3, r4, r5, pc}
 800b55c:	200005e4 	.word	0x200005e4

0800b560 <_read_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	4604      	mov	r4, r0
 800b564:	4d06      	ldr	r5, [pc, #24]	@ (800b580 <_read_r+0x20>)
 800b566:	4608      	mov	r0, r1
 800b568:	4611      	mov	r1, r2
 800b56a:	2200      	movs	r2, #0
 800b56c:	602a      	str	r2, [r5, #0]
 800b56e:	461a      	mov	r2, r3
 800b570:	f7f7 fc7d 	bl	8002e6e <_read>
 800b574:	1c43      	adds	r3, r0, #1
 800b576:	d102      	bne.n	800b57e <_read_r+0x1e>
 800b578:	682b      	ldr	r3, [r5, #0]
 800b57a:	b103      	cbz	r3, 800b57e <_read_r+0x1e>
 800b57c:	6023      	str	r3, [r4, #0]
 800b57e:	bd38      	pop	{r3, r4, r5, pc}
 800b580:	200005e4 	.word	0x200005e4

0800b584 <_sbrk_r>:
 800b584:	b538      	push	{r3, r4, r5, lr}
 800b586:	2300      	movs	r3, #0
 800b588:	4d05      	ldr	r5, [pc, #20]	@ (800b5a0 <_sbrk_r+0x1c>)
 800b58a:	4604      	mov	r4, r0
 800b58c:	4608      	mov	r0, r1
 800b58e:	602b      	str	r3, [r5, #0]
 800b590:	f7f7 fcda 	bl	8002f48 <_sbrk>
 800b594:	1c43      	adds	r3, r0, #1
 800b596:	d102      	bne.n	800b59e <_sbrk_r+0x1a>
 800b598:	682b      	ldr	r3, [r5, #0]
 800b59a:	b103      	cbz	r3, 800b59e <_sbrk_r+0x1a>
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	bd38      	pop	{r3, r4, r5, pc}
 800b5a0:	200005e4 	.word	0x200005e4

0800b5a4 <_write_r>:
 800b5a4:	b538      	push	{r3, r4, r5, lr}
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	4d06      	ldr	r5, [pc, #24]	@ (800b5c4 <_write_r+0x20>)
 800b5aa:	4608      	mov	r0, r1
 800b5ac:	4611      	mov	r1, r2
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	602a      	str	r2, [r5, #0]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	f7f7 fc78 	bl	8002ea8 <_write>
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d102      	bne.n	800b5c2 <_write_r+0x1e>
 800b5bc:	682b      	ldr	r3, [r5, #0]
 800b5be:	b103      	cbz	r3, 800b5c2 <_write_r+0x1e>
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	200005e4 	.word	0x200005e4

0800b5c8 <__errno>:
 800b5c8:	4b01      	ldr	r3, [pc, #4]	@ (800b5d0 <__errno+0x8>)
 800b5ca:	6818      	ldr	r0, [r3, #0]
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	20000060 	.word	0x20000060

0800b5d4 <__libc_init_array>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	4d0d      	ldr	r5, [pc, #52]	@ (800b60c <__libc_init_array+0x38>)
 800b5d8:	2600      	movs	r6, #0
 800b5da:	4c0d      	ldr	r4, [pc, #52]	@ (800b610 <__libc_init_array+0x3c>)
 800b5dc:	1b64      	subs	r4, r4, r5
 800b5de:	10a4      	asrs	r4, r4, #2
 800b5e0:	42a6      	cmp	r6, r4
 800b5e2:	d109      	bne.n	800b5f8 <__libc_init_array+0x24>
 800b5e4:	4d0b      	ldr	r5, [pc, #44]	@ (800b614 <__libc_init_array+0x40>)
 800b5e6:	2600      	movs	r6, #0
 800b5e8:	4c0b      	ldr	r4, [pc, #44]	@ (800b618 <__libc_init_array+0x44>)
 800b5ea:	f003 fa33 	bl	800ea54 <_init>
 800b5ee:	1b64      	subs	r4, r4, r5
 800b5f0:	10a4      	asrs	r4, r4, #2
 800b5f2:	42a6      	cmp	r6, r4
 800b5f4:	d105      	bne.n	800b602 <__libc_init_array+0x2e>
 800b5f6:	bd70      	pop	{r4, r5, r6, pc}
 800b5f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5fc:	3601      	adds	r6, #1
 800b5fe:	4798      	blx	r3
 800b600:	e7ee      	b.n	800b5e0 <__libc_init_array+0xc>
 800b602:	f855 3b04 	ldr.w	r3, [r5], #4
 800b606:	3601      	adds	r6, #1
 800b608:	4798      	blx	r3
 800b60a:	e7f2      	b.n	800b5f2 <__libc_init_array+0x1e>
 800b60c:	0800f208 	.word	0x0800f208
 800b610:	0800f208 	.word	0x0800f208
 800b614:	0800f208 	.word	0x0800f208
 800b618:	0800f210 	.word	0x0800f210

0800b61c <__retarget_lock_init_recursive>:
 800b61c:	4770      	bx	lr

0800b61e <__retarget_lock_acquire_recursive>:
 800b61e:	4770      	bx	lr

0800b620 <__retarget_lock_release_recursive>:
 800b620:	4770      	bx	lr

0800b622 <memchr>:
 800b622:	b2c9      	uxtb	r1, r1
 800b624:	4603      	mov	r3, r0
 800b626:	4402      	add	r2, r0
 800b628:	b510      	push	{r4, lr}
 800b62a:	4293      	cmp	r3, r2
 800b62c:	4618      	mov	r0, r3
 800b62e:	d101      	bne.n	800b634 <memchr+0x12>
 800b630:	2000      	movs	r0, #0
 800b632:	e003      	b.n	800b63c <memchr+0x1a>
 800b634:	7804      	ldrb	r4, [r0, #0]
 800b636:	3301      	adds	r3, #1
 800b638:	428c      	cmp	r4, r1
 800b63a:	d1f6      	bne.n	800b62a <memchr+0x8>
 800b63c:	bd10      	pop	{r4, pc}
	...

0800b640 <nanf>:
 800b640:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b648 <nanf+0x8>
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	7fc00000 	.word	0x7fc00000

0800b64c <quorem>:
 800b64c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b650:	6903      	ldr	r3, [r0, #16]
 800b652:	4607      	mov	r7, r0
 800b654:	690c      	ldr	r4, [r1, #16]
 800b656:	42a3      	cmp	r3, r4
 800b658:	f2c0 8083 	blt.w	800b762 <quorem+0x116>
 800b65c:	3c01      	subs	r4, #1
 800b65e:	f100 0514 	add.w	r5, r0, #20
 800b662:	f101 0814 	add.w	r8, r1, #20
 800b666:	00a3      	lsls	r3, r4, #2
 800b668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b66c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b676:	9301      	str	r3, [sp, #4]
 800b678:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b67c:	3301      	adds	r3, #1
 800b67e:	429a      	cmp	r2, r3
 800b680:	fbb2 f6f3 	udiv	r6, r2, r3
 800b684:	d331      	bcc.n	800b6ea <quorem+0x9e>
 800b686:	f04f 0a00 	mov.w	sl, #0
 800b68a:	46c4      	mov	ip, r8
 800b68c:	46ae      	mov	lr, r5
 800b68e:	46d3      	mov	fp, sl
 800b690:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b694:	b298      	uxth	r0, r3
 800b696:	45e1      	cmp	r9, ip
 800b698:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b69c:	fb06 a000 	mla	r0, r6, r0, sl
 800b6a0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800b6a4:	b280      	uxth	r0, r0
 800b6a6:	fb06 2303 	mla	r3, r6, r3, r2
 800b6aa:	f8de 2000 	ldr.w	r2, [lr]
 800b6ae:	b292      	uxth	r2, r2
 800b6b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6b4:	eba2 0200 	sub.w	r2, r2, r0
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	f8de 0000 	ldr.w	r0, [lr]
 800b6be:	445a      	add	r2, fp
 800b6c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b6c4:	b292      	uxth	r2, r2
 800b6c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b6ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b6ce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b6d2:	f84e 2b04 	str.w	r2, [lr], #4
 800b6d6:	d2db      	bcs.n	800b690 <quorem+0x44>
 800b6d8:	9b00      	ldr	r3, [sp, #0]
 800b6da:	58eb      	ldr	r3, [r5, r3]
 800b6dc:	b92b      	cbnz	r3, 800b6ea <quorem+0x9e>
 800b6de:	9b01      	ldr	r3, [sp, #4]
 800b6e0:	3b04      	subs	r3, #4
 800b6e2:	429d      	cmp	r5, r3
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	d330      	bcc.n	800b74a <quorem+0xfe>
 800b6e8:	613c      	str	r4, [r7, #16]
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	f001 f910 	bl	800c910 <__mcmp>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	db26      	blt.n	800b742 <quorem+0xf6>
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b6fc:	f8d1 c000 	ldr.w	ip, [r1]
 800b700:	fa1f fe82 	uxth.w	lr, r2
 800b704:	45c1      	cmp	r9, r8
 800b706:	fa1f f38c 	uxth.w	r3, ip
 800b70a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b70e:	eba3 030e 	sub.w	r3, r3, lr
 800b712:	4403      	add	r3, r0
 800b714:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b718:	b29b      	uxth	r3, r3
 800b71a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b71e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b722:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b726:	f841 3b04 	str.w	r3, [r1], #4
 800b72a:	d2e5      	bcs.n	800b6f8 <quorem+0xac>
 800b72c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b730:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b734:	b922      	cbnz	r2, 800b740 <quorem+0xf4>
 800b736:	3b04      	subs	r3, #4
 800b738:	429d      	cmp	r5, r3
 800b73a:	461a      	mov	r2, r3
 800b73c:	d30b      	bcc.n	800b756 <quorem+0x10a>
 800b73e:	613c      	str	r4, [r7, #16]
 800b740:	3601      	adds	r6, #1
 800b742:	4630      	mov	r0, r6
 800b744:	b003      	add	sp, #12
 800b746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74a:	6812      	ldr	r2, [r2, #0]
 800b74c:	3b04      	subs	r3, #4
 800b74e:	2a00      	cmp	r2, #0
 800b750:	d1ca      	bne.n	800b6e8 <quorem+0x9c>
 800b752:	3c01      	subs	r4, #1
 800b754:	e7c5      	b.n	800b6e2 <quorem+0x96>
 800b756:	6812      	ldr	r2, [r2, #0]
 800b758:	3b04      	subs	r3, #4
 800b75a:	2a00      	cmp	r2, #0
 800b75c:	d1ef      	bne.n	800b73e <quorem+0xf2>
 800b75e:	3c01      	subs	r4, #1
 800b760:	e7ea      	b.n	800b738 <quorem+0xec>
 800b762:	2000      	movs	r0, #0
 800b764:	e7ee      	b.n	800b744 <quorem+0xf8>
	...

0800b768 <_dtoa_r>:
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	69c7      	ldr	r7, [r0, #28]
 800b76e:	b099      	sub	sp, #100	@ 0x64
 800b770:	4683      	mov	fp, r0
 800b772:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b774:	9109      	str	r1, [sp, #36]	@ 0x24
 800b776:	920e      	str	r2, [sp, #56]	@ 0x38
 800b778:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b77a:	ec55 4b10 	vmov	r4, r5, d0
 800b77e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b782:	b97f      	cbnz	r7, 800b7a4 <_dtoa_r+0x3c>
 800b784:	2010      	movs	r0, #16
 800b786:	f7fe fd69 	bl	800a25c <malloc>
 800b78a:	4602      	mov	r2, r0
 800b78c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b790:	b920      	cbnz	r0, 800b79c <_dtoa_r+0x34>
 800b792:	4ba7      	ldr	r3, [pc, #668]	@ (800ba30 <_dtoa_r+0x2c8>)
 800b794:	21ef      	movs	r1, #239	@ 0xef
 800b796:	48a7      	ldr	r0, [pc, #668]	@ (800ba34 <_dtoa_r+0x2cc>)
 800b798:	f002 fd42 	bl	800e220 <__assert_func>
 800b79c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b7a0:	6007      	str	r7, [r0, #0]
 800b7a2:	60c7      	str	r7, [r0, #12]
 800b7a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b7a8:	6819      	ldr	r1, [r3, #0]
 800b7aa:	b159      	cbz	r1, 800b7c4 <_dtoa_r+0x5c>
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	4658      	mov	r0, fp
 800b7b2:	4093      	lsls	r3, r2
 800b7b4:	604a      	str	r2, [r1, #4]
 800b7b6:	608b      	str	r3, [r1, #8]
 800b7b8:	f000 fe24 	bl	800c404 <_Bfree>
 800b7bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	1e2b      	subs	r3, r5, #0
 800b7c6:	bfb7      	itett	lt
 800b7c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b7cc:	2300      	movge	r3, #0
 800b7ce:	2201      	movlt	r2, #1
 800b7d0:	9303      	strlt	r3, [sp, #12]
 800b7d2:	bfa8      	it	ge
 800b7d4:	6033      	strge	r3, [r6, #0]
 800b7d6:	9f03      	ldr	r7, [sp, #12]
 800b7d8:	4b97      	ldr	r3, [pc, #604]	@ (800ba38 <_dtoa_r+0x2d0>)
 800b7da:	bfb8      	it	lt
 800b7dc:	6032      	strlt	r2, [r6, #0]
 800b7de:	43bb      	bics	r3, r7
 800b7e0:	d112      	bne.n	800b808 <_dtoa_r+0xa0>
 800b7e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b7e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b7e8:	6013      	str	r3, [r2, #0]
 800b7ea:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7ee:	4323      	orrs	r3, r4
 800b7f0:	f000 854c 	beq.w	800c28c <_dtoa_r+0xb24>
 800b7f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7f6:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ba4c <_dtoa_r+0x2e4>
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f000 854e 	beq.w	800c29c <_dtoa_r+0xb34>
 800b800:	f10a 0303 	add.w	r3, sl, #3
 800b804:	f000 bd48 	b.w	800c298 <_dtoa_r+0xb30>
 800b808:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b80c:	2200      	movs	r2, #0
 800b80e:	2300      	movs	r3, #0
 800b810:	ec51 0b17 	vmov	r0, r1, d7
 800b814:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b818:	f7f5 f966 	bl	8000ae8 <__aeabi_dcmpeq>
 800b81c:	4680      	mov	r8, r0
 800b81e:	b158      	cbz	r0, 800b838 <_dtoa_r+0xd0>
 800b820:	2301      	movs	r3, #1
 800b822:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b824:	6013      	str	r3, [r2, #0]
 800b826:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b828:	b113      	cbz	r3, 800b830 <_dtoa_r+0xc8>
 800b82a:	4b84      	ldr	r3, [pc, #528]	@ (800ba3c <_dtoa_r+0x2d4>)
 800b82c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b82e:	6013      	str	r3, [r2, #0]
 800b830:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800ba50 <_dtoa_r+0x2e8>
 800b834:	f000 bd32 	b.w	800c29c <_dtoa_r+0xb34>
 800b838:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b83c:	aa16      	add	r2, sp, #88	@ 0x58
 800b83e:	a917      	add	r1, sp, #92	@ 0x5c
 800b840:	4658      	mov	r0, fp
 800b842:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b846:	f001 f98b 	bl	800cb60 <__d2b>
 800b84a:	4681      	mov	r9, r0
 800b84c:	2e00      	cmp	r6, #0
 800b84e:	d075      	beq.n	800b93c <_dtoa_r+0x1d4>
 800b850:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b852:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b856:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b85a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b85e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b862:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b866:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b86a:	4619      	mov	r1, r3
 800b86c:	2200      	movs	r2, #0
 800b86e:	4b74      	ldr	r3, [pc, #464]	@ (800ba40 <_dtoa_r+0x2d8>)
 800b870:	f7f4 fd1a 	bl	80002a8 <__aeabi_dsub>
 800b874:	a368      	add	r3, pc, #416	@ (adr r3, 800ba18 <_dtoa_r+0x2b0>)
 800b876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87a:	f7f4 fecd 	bl	8000618 <__aeabi_dmul>
 800b87e:	a368      	add	r3, pc, #416	@ (adr r3, 800ba20 <_dtoa_r+0x2b8>)
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b884:	f7f4 fd12 	bl	80002ac <__adddf3>
 800b888:	4604      	mov	r4, r0
 800b88a:	460d      	mov	r5, r1
 800b88c:	4630      	mov	r0, r6
 800b88e:	f7f4 fe59 	bl	8000544 <__aeabi_i2d>
 800b892:	a365      	add	r3, pc, #404	@ (adr r3, 800ba28 <_dtoa_r+0x2c0>)
 800b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b898:	f7f4 febe 	bl	8000618 <__aeabi_dmul>
 800b89c:	4602      	mov	r2, r0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	f7f4 fd02 	bl	80002ac <__adddf3>
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	460d      	mov	r5, r1
 800b8ac:	f7f5 f964 	bl	8000b78 <__aeabi_d2iz>
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	4607      	mov	r7, r0
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	f7f5 f91f 	bl	8000afc <__aeabi_dcmplt>
 800b8be:	b140      	cbz	r0, 800b8d2 <_dtoa_r+0x16a>
 800b8c0:	4638      	mov	r0, r7
 800b8c2:	f7f4 fe3f 	bl	8000544 <__aeabi_i2d>
 800b8c6:	4622      	mov	r2, r4
 800b8c8:	462b      	mov	r3, r5
 800b8ca:	f7f5 f90d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b8ce:	b900      	cbnz	r0, 800b8d2 <_dtoa_r+0x16a>
 800b8d0:	3f01      	subs	r7, #1
 800b8d2:	2f16      	cmp	r7, #22
 800b8d4:	d851      	bhi.n	800b97a <_dtoa_r+0x212>
 800b8d6:	4b5b      	ldr	r3, [pc, #364]	@ (800ba44 <_dtoa_r+0x2dc>)
 800b8d8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b8dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	f7f5 f90a 	bl	8000afc <__aeabi_dcmplt>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	d048      	beq.n	800b97e <_dtoa_r+0x216>
 800b8ec:	3f01      	subs	r7, #1
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	9312      	str	r3, [sp, #72]	@ 0x48
 800b8f2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b8f4:	1b9b      	subs	r3, r3, r6
 800b8f6:	1e5a      	subs	r2, r3, #1
 800b8f8:	bf46      	itte	mi
 800b8fa:	f1c3 0801 	rsbmi	r8, r3, #1
 800b8fe:	2300      	movmi	r3, #0
 800b900:	f04f 0800 	movpl.w	r8, #0
 800b904:	9208      	str	r2, [sp, #32]
 800b906:	bf48      	it	mi
 800b908:	9308      	strmi	r3, [sp, #32]
 800b90a:	2f00      	cmp	r7, #0
 800b90c:	db39      	blt.n	800b982 <_dtoa_r+0x21a>
 800b90e:	9b08      	ldr	r3, [sp, #32]
 800b910:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b912:	443b      	add	r3, r7
 800b914:	9308      	str	r3, [sp, #32]
 800b916:	2300      	movs	r3, #0
 800b918:	930a      	str	r3, [sp, #40]	@ 0x28
 800b91a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b91c:	2b09      	cmp	r3, #9
 800b91e:	d864      	bhi.n	800b9ea <_dtoa_r+0x282>
 800b920:	2b05      	cmp	r3, #5
 800b922:	bfc5      	ittet	gt
 800b924:	3b04      	subgt	r3, #4
 800b926:	2400      	movgt	r4, #0
 800b928:	2401      	movle	r4, #1
 800b92a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b92e:	3b02      	subs	r3, #2
 800b930:	2b03      	cmp	r3, #3
 800b932:	d865      	bhi.n	800ba00 <_dtoa_r+0x298>
 800b934:	e8df f003 	tbb	[pc, r3]
 800b938:	5737392c 	.word	0x5737392c
 800b93c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b940:	441e      	add	r6, r3
 800b942:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b946:	2b20      	cmp	r3, #32
 800b948:	bfc9      	itett	gt
 800b94a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b94e:	f1c3 0320 	rsble	r3, r3, #32
 800b952:	409f      	lslgt	r7, r3
 800b954:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b958:	bfd8      	it	le
 800b95a:	fa04 f003 	lslle.w	r0, r4, r3
 800b95e:	f106 36ff 	add.w	r6, r6, #4294967295
 800b962:	bfc4      	itt	gt
 800b964:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b968:	ea47 0003 	orrgt.w	r0, r7, r3
 800b96c:	f7f4 fdda 	bl	8000524 <__aeabi_ui2d>
 800b970:	2201      	movs	r2, #1
 800b972:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b976:	9214      	str	r2, [sp, #80]	@ 0x50
 800b978:	e777      	b.n	800b86a <_dtoa_r+0x102>
 800b97a:	2301      	movs	r3, #1
 800b97c:	e7b8      	b.n	800b8f0 <_dtoa_r+0x188>
 800b97e:	9012      	str	r0, [sp, #72]	@ 0x48
 800b980:	e7b7      	b.n	800b8f2 <_dtoa_r+0x18a>
 800b982:	427b      	negs	r3, r7
 800b984:	eba8 0807 	sub.w	r8, r8, r7
 800b988:	930a      	str	r3, [sp, #40]	@ 0x28
 800b98a:	2300      	movs	r3, #0
 800b98c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b98e:	e7c4      	b.n	800b91a <_dtoa_r+0x1b2>
 800b990:	2300      	movs	r3, #0
 800b992:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b994:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b996:	2b00      	cmp	r3, #0
 800b998:	dc35      	bgt.n	800ba06 <_dtoa_r+0x29e>
 800b99a:	2301      	movs	r3, #1
 800b99c:	461a      	mov	r2, r3
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	9307      	str	r3, [sp, #28]
 800b9a2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9a4:	e00b      	b.n	800b9be <_dtoa_r+0x256>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e7f3      	b.n	800b992 <_dtoa_r+0x22a>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9b0:	18fb      	adds	r3, r7, r3
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	9307      	str	r3, [sp, #28]
 800b9ba:	bfb8      	it	lt
 800b9bc:	2301      	movlt	r3, #1
 800b9be:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	2204      	movs	r2, #4
 800b9c6:	f102 0514 	add.w	r5, r2, #20
 800b9ca:	429d      	cmp	r5, r3
 800b9cc:	d91f      	bls.n	800ba0e <_dtoa_r+0x2a6>
 800b9ce:	6041      	str	r1, [r0, #4]
 800b9d0:	4658      	mov	r0, fp
 800b9d2:	f000 fcd7 	bl	800c384 <_Balloc>
 800b9d6:	4682      	mov	sl, r0
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d13b      	bne.n	800ba54 <_dtoa_r+0x2ec>
 800b9dc:	4b1a      	ldr	r3, [pc, #104]	@ (800ba48 <_dtoa_r+0x2e0>)
 800b9de:	4602      	mov	r2, r0
 800b9e0:	f240 11af 	movw	r1, #431	@ 0x1af
 800b9e4:	e6d7      	b.n	800b796 <_dtoa_r+0x2e>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e7e0      	b.n	800b9ac <_dtoa_r+0x244>
 800b9ea:	2401      	movs	r4, #1
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b9f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	9307      	str	r3, [sp, #28]
 800b9fc:	2312      	movs	r3, #18
 800b9fe:	e7d0      	b.n	800b9a2 <_dtoa_r+0x23a>
 800ba00:	2301      	movs	r3, #1
 800ba02:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba04:	e7f5      	b.n	800b9f2 <_dtoa_r+0x28a>
 800ba06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	9307      	str	r3, [sp, #28]
 800ba0c:	e7d7      	b.n	800b9be <_dtoa_r+0x256>
 800ba0e:	3101      	adds	r1, #1
 800ba10:	0052      	lsls	r2, r2, #1
 800ba12:	e7d8      	b.n	800b9c6 <_dtoa_r+0x25e>
 800ba14:	f3af 8000 	nop.w
 800ba18:	636f4361 	.word	0x636f4361
 800ba1c:	3fd287a7 	.word	0x3fd287a7
 800ba20:	8b60c8b3 	.word	0x8b60c8b3
 800ba24:	3fc68a28 	.word	0x3fc68a28
 800ba28:	509f79fb 	.word	0x509f79fb
 800ba2c:	3fd34413 	.word	0x3fd34413
 800ba30:	0800ee1a 	.word	0x0800ee1a
 800ba34:	0800ee31 	.word	0x0800ee31
 800ba38:	7ff00000 	.word	0x7ff00000
 800ba3c:	0800ede5 	.word	0x0800ede5
 800ba40:	3ff80000 	.word	0x3ff80000
 800ba44:	0800ef28 	.word	0x0800ef28
 800ba48:	0800ee89 	.word	0x0800ee89
 800ba4c:	0800ee16 	.word	0x0800ee16
 800ba50:	0800ede4 	.word	0x0800ede4
 800ba54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ba58:	6018      	str	r0, [r3, #0]
 800ba5a:	9b07      	ldr	r3, [sp, #28]
 800ba5c:	2b0e      	cmp	r3, #14
 800ba5e:	f200 80a4 	bhi.w	800bbaa <_dtoa_r+0x442>
 800ba62:	2c00      	cmp	r4, #0
 800ba64:	f000 80a1 	beq.w	800bbaa <_dtoa_r+0x442>
 800ba68:	2f00      	cmp	r7, #0
 800ba6a:	dd33      	ble.n	800bad4 <_dtoa_r+0x36c>
 800ba6c:	f007 020f 	and.w	r2, r7, #15
 800ba70:	4bac      	ldr	r3, [pc, #688]	@ (800bd24 <_dtoa_r+0x5bc>)
 800ba72:	05f8      	lsls	r0, r7, #23
 800ba74:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ba78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba7c:	ed93 7b00 	vldr	d7, [r3]
 800ba80:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ba84:	d516      	bpl.n	800bab4 <_dtoa_r+0x34c>
 800ba86:	4ba8      	ldr	r3, [pc, #672]	@ (800bd28 <_dtoa_r+0x5c0>)
 800ba88:	f004 040f 	and.w	r4, r4, #15
 800ba8c:	2603      	movs	r6, #3
 800ba8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba96:	f7f4 fee9 	bl	800086c <__aeabi_ddiv>
 800ba9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba9e:	4da2      	ldr	r5, [pc, #648]	@ (800bd28 <_dtoa_r+0x5c0>)
 800baa0:	b954      	cbnz	r4, 800bab8 <_dtoa_r+0x350>
 800baa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800baa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baaa:	f7f4 fedf 	bl	800086c <__aeabi_ddiv>
 800baae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bab2:	e028      	b.n	800bb06 <_dtoa_r+0x39e>
 800bab4:	2602      	movs	r6, #2
 800bab6:	e7f2      	b.n	800ba9e <_dtoa_r+0x336>
 800bab8:	07e1      	lsls	r1, r4, #31
 800baba:	d508      	bpl.n	800bace <_dtoa_r+0x366>
 800babc:	3601      	adds	r6, #1
 800babe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bac2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bac6:	f7f4 fda7 	bl	8000618 <__aeabi_dmul>
 800baca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bace:	1064      	asrs	r4, r4, #1
 800bad0:	3508      	adds	r5, #8
 800bad2:	e7e5      	b.n	800baa0 <_dtoa_r+0x338>
 800bad4:	f000 80d2 	beq.w	800bc7c <_dtoa_r+0x514>
 800bad8:	427c      	negs	r4, r7
 800bada:	4b92      	ldr	r3, [pc, #584]	@ (800bd24 <_dtoa_r+0x5bc>)
 800badc:	4d92      	ldr	r5, [pc, #584]	@ (800bd28 <_dtoa_r+0x5c0>)
 800bade:	2602      	movs	r6, #2
 800bae0:	f004 020f 	and.w	r2, r4, #15
 800bae4:	1124      	asrs	r4, r4, #4
 800bae6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800baea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800baee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf2:	f7f4 fd91 	bl	8000618 <__aeabi_dmul>
 800baf6:	2300      	movs	r3, #0
 800baf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bafc:	2c00      	cmp	r4, #0
 800bafe:	f040 80b2 	bne.w	800bc66 <_dtoa_r+0x4fe>
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1d3      	bne.n	800baae <_dtoa_r+0x346>
 800bb06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f000 80b7 	beq.w	800bc80 <_dtoa_r+0x518>
 800bb12:	2200      	movs	r2, #0
 800bb14:	4b85      	ldr	r3, [pc, #532]	@ (800bd2c <_dtoa_r+0x5c4>)
 800bb16:	4620      	mov	r0, r4
 800bb18:	4629      	mov	r1, r5
 800bb1a:	f7f4 ffef 	bl	8000afc <__aeabi_dcmplt>
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	f000 80ae 	beq.w	800bc80 <_dtoa_r+0x518>
 800bb24:	9b07      	ldr	r3, [sp, #28]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f000 80aa 	beq.w	800bc80 <_dtoa_r+0x518>
 800bb2c:	9b00      	ldr	r3, [sp, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	dd37      	ble.n	800bba2 <_dtoa_r+0x43a>
 800bb32:	1e7b      	subs	r3, r7, #1
 800bb34:	4620      	mov	r0, r4
 800bb36:	2200      	movs	r2, #0
 800bb38:	4629      	mov	r1, r5
 800bb3a:	9304      	str	r3, [sp, #16]
 800bb3c:	3601      	adds	r6, #1
 800bb3e:	4b7c      	ldr	r3, [pc, #496]	@ (800bd30 <_dtoa_r+0x5c8>)
 800bb40:	f7f4 fd6a 	bl	8000618 <__aeabi_dmul>
 800bb44:	9c00      	ldr	r4, [sp, #0]
 800bb46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	f7f4 fcfa 	bl	8000544 <__aeabi_i2d>
 800bb50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb54:	f7f4 fd60 	bl	8000618 <__aeabi_dmul>
 800bb58:	2200      	movs	r2, #0
 800bb5a:	4b76      	ldr	r3, [pc, #472]	@ (800bd34 <_dtoa_r+0x5cc>)
 800bb5c:	f7f4 fba6 	bl	80002ac <__adddf3>
 800bb60:	4605      	mov	r5, r0
 800bb62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bb66:	2c00      	cmp	r4, #0
 800bb68:	f040 808d 	bne.w	800bc86 <_dtoa_r+0x51e>
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	4b72      	ldr	r3, [pc, #456]	@ (800bd38 <_dtoa_r+0x5d0>)
 800bb70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb74:	f7f4 fb98 	bl	80002a8 <__aeabi_dsub>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb80:	462a      	mov	r2, r5
 800bb82:	4633      	mov	r3, r6
 800bb84:	f7f4 ffd8 	bl	8000b38 <__aeabi_dcmpgt>
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	f040 828b 	bne.w	800c0a4 <_dtoa_r+0x93c>
 800bb8e:	462a      	mov	r2, r5
 800bb90:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bb94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb98:	f7f4 ffb0 	bl	8000afc <__aeabi_dcmplt>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	f040 8128 	bne.w	800bdf2 <_dtoa_r+0x68a>
 800bba2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bba6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bbaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f2c0 815a 	blt.w	800be66 <_dtoa_r+0x6fe>
 800bbb2:	2f0e      	cmp	r7, #14
 800bbb4:	f300 8157 	bgt.w	800be66 <_dtoa_r+0x6fe>
 800bbb8:	4b5a      	ldr	r3, [pc, #360]	@ (800bd24 <_dtoa_r+0x5bc>)
 800bbba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bbbe:	ed93 7b00 	vldr	d7, [r3]
 800bbc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	ed8d 7b00 	vstr	d7, [sp]
 800bbca:	da03      	bge.n	800bbd4 <_dtoa_r+0x46c>
 800bbcc:	9b07      	ldr	r3, [sp, #28]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f340 8101 	ble.w	800bdd6 <_dtoa_r+0x66e>
 800bbd4:	4656      	mov	r6, sl
 800bbd6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bbda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbde:	4620      	mov	r0, r4
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	f7f4 fe43 	bl	800086c <__aeabi_ddiv>
 800bbe6:	f7f4 ffc7 	bl	8000b78 <__aeabi_d2iz>
 800bbea:	4680      	mov	r8, r0
 800bbec:	f7f4 fcaa 	bl	8000544 <__aeabi_i2d>
 800bbf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbf4:	f7f4 fd10 	bl	8000618 <__aeabi_dmul>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bc00:	460b      	mov	r3, r1
 800bc02:	4629      	mov	r1, r5
 800bc04:	f7f4 fb50 	bl	80002a8 <__aeabi_dsub>
 800bc08:	9d07      	ldr	r5, [sp, #28]
 800bc0a:	f806 4b01 	strb.w	r4, [r6], #1
 800bc0e:	eba6 040a 	sub.w	r4, r6, sl
 800bc12:	4602      	mov	r2, r0
 800bc14:	460b      	mov	r3, r1
 800bc16:	42a5      	cmp	r5, r4
 800bc18:	f040 8117 	bne.w	800be4a <_dtoa_r+0x6e2>
 800bc1c:	f7f4 fb46 	bl	80002ac <__adddf3>
 800bc20:	4604      	mov	r4, r0
 800bc22:	460d      	mov	r5, r1
 800bc24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc28:	f7f4 ff86 	bl	8000b38 <__aeabi_dcmpgt>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	f040 80f9 	bne.w	800be24 <_dtoa_r+0x6bc>
 800bc32:	4620      	mov	r0, r4
 800bc34:	4629      	mov	r1, r5
 800bc36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc3a:	f7f4 ff55 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc3e:	b118      	cbz	r0, 800bc48 <_dtoa_r+0x4e0>
 800bc40:	f018 0f01 	tst.w	r8, #1
 800bc44:	f040 80ee 	bne.w	800be24 <_dtoa_r+0x6bc>
 800bc48:	4649      	mov	r1, r9
 800bc4a:	4658      	mov	r0, fp
 800bc4c:	f000 fbda 	bl	800c404 <_Bfree>
 800bc50:	2300      	movs	r3, #0
 800bc52:	3701      	adds	r7, #1
 800bc54:	7033      	strb	r3, [r6, #0]
 800bc56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc58:	601f      	str	r7, [r3, #0]
 800bc5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f000 831d 	beq.w	800c29c <_dtoa_r+0xb34>
 800bc62:	601e      	str	r6, [r3, #0]
 800bc64:	e31a      	b.n	800c29c <_dtoa_r+0xb34>
 800bc66:	07e2      	lsls	r2, r4, #31
 800bc68:	d505      	bpl.n	800bc76 <_dtoa_r+0x50e>
 800bc6a:	3601      	adds	r6, #1
 800bc6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc70:	f7f4 fcd2 	bl	8000618 <__aeabi_dmul>
 800bc74:	2301      	movs	r3, #1
 800bc76:	1064      	asrs	r4, r4, #1
 800bc78:	3508      	adds	r5, #8
 800bc7a:	e73f      	b.n	800bafc <_dtoa_r+0x394>
 800bc7c:	2602      	movs	r6, #2
 800bc7e:	e742      	b.n	800bb06 <_dtoa_r+0x39e>
 800bc80:	9c07      	ldr	r4, [sp, #28]
 800bc82:	9704      	str	r7, [sp, #16]
 800bc84:	e761      	b.n	800bb4a <_dtoa_r+0x3e2>
 800bc86:	4b27      	ldr	r3, [pc, #156]	@ (800bd24 <_dtoa_r+0x5bc>)
 800bc88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc8e:	4454      	add	r4, sl
 800bc90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc94:	2900      	cmp	r1, #0
 800bc96:	d053      	beq.n	800bd40 <_dtoa_r+0x5d8>
 800bc98:	2000      	movs	r0, #0
 800bc9a:	4928      	ldr	r1, [pc, #160]	@ (800bd3c <_dtoa_r+0x5d4>)
 800bc9c:	f7f4 fde6 	bl	800086c <__aeabi_ddiv>
 800bca0:	4633      	mov	r3, r6
 800bca2:	4656      	mov	r6, sl
 800bca4:	462a      	mov	r2, r5
 800bca6:	f7f4 faff 	bl	80002a8 <__aeabi_dsub>
 800bcaa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bcae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcb2:	f7f4 ff61 	bl	8000b78 <__aeabi_d2iz>
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	f7f4 fc44 	bl	8000544 <__aeabi_i2d>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	3530      	adds	r5, #48	@ 0x30
 800bcc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcc6:	f7f4 faef 	bl	80002a8 <__aeabi_dsub>
 800bcca:	4602      	mov	r2, r0
 800bccc:	460b      	mov	r3, r1
 800bcce:	f806 5b01 	strb.w	r5, [r6], #1
 800bcd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bcda:	f7f4 ff0f 	bl	8000afc <__aeabi_dcmplt>
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d171      	bne.n	800bdc6 <_dtoa_r+0x65e>
 800bce2:	2000      	movs	r0, #0
 800bce4:	4911      	ldr	r1, [pc, #68]	@ (800bd2c <_dtoa_r+0x5c4>)
 800bce6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcea:	f7f4 fadd 	bl	80002a8 <__aeabi_dsub>
 800bcee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bcf2:	f7f4 ff03 	bl	8000afc <__aeabi_dcmplt>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	f040 8095 	bne.w	800be26 <_dtoa_r+0x6be>
 800bcfc:	42a6      	cmp	r6, r4
 800bcfe:	f43f af50 	beq.w	800bba2 <_dtoa_r+0x43a>
 800bd02:	2200      	movs	r2, #0
 800bd04:	4b0a      	ldr	r3, [pc, #40]	@ (800bd30 <_dtoa_r+0x5c8>)
 800bd06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bd0a:	f7f4 fc85 	bl	8000618 <__aeabi_dmul>
 800bd0e:	2200      	movs	r2, #0
 800bd10:	4b07      	ldr	r3, [pc, #28]	@ (800bd30 <_dtoa_r+0x5c8>)
 800bd12:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd1a:	f7f4 fc7d 	bl	8000618 <__aeabi_dmul>
 800bd1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd22:	e7c4      	b.n	800bcae <_dtoa_r+0x546>
 800bd24:	0800ef28 	.word	0x0800ef28
 800bd28:	0800ef00 	.word	0x0800ef00
 800bd2c:	3ff00000 	.word	0x3ff00000
 800bd30:	40240000 	.word	0x40240000
 800bd34:	401c0000 	.word	0x401c0000
 800bd38:	40140000 	.word	0x40140000
 800bd3c:	3fe00000 	.word	0x3fe00000
 800bd40:	4631      	mov	r1, r6
 800bd42:	4656      	mov	r6, sl
 800bd44:	4628      	mov	r0, r5
 800bd46:	f7f4 fc67 	bl	8000618 <__aeabi_dmul>
 800bd4a:	9415      	str	r4, [sp, #84]	@ 0x54
 800bd4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd54:	f7f4 ff10 	bl	8000b78 <__aeabi_d2iz>
 800bd58:	4605      	mov	r5, r0
 800bd5a:	f7f4 fbf3 	bl	8000544 <__aeabi_i2d>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	3530      	adds	r5, #48	@ 0x30
 800bd62:	460b      	mov	r3, r1
 800bd64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd68:	f7f4 fa9e 	bl	80002a8 <__aeabi_dsub>
 800bd6c:	f806 5b01 	strb.w	r5, [r6], #1
 800bd70:	4602      	mov	r2, r0
 800bd72:	460b      	mov	r3, r1
 800bd74:	42a6      	cmp	r6, r4
 800bd76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd7a:	f04f 0200 	mov.w	r2, #0
 800bd7e:	d124      	bne.n	800bdca <_dtoa_r+0x662>
 800bd80:	4bac      	ldr	r3, [pc, #688]	@ (800c034 <_dtoa_r+0x8cc>)
 800bd82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bd86:	f7f4 fa91 	bl	80002ac <__adddf3>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd92:	f7f4 fed1 	bl	8000b38 <__aeabi_dcmpgt>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d145      	bne.n	800be26 <_dtoa_r+0x6be>
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	49a5      	ldr	r1, [pc, #660]	@ (800c034 <_dtoa_r+0x8cc>)
 800bd9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bda2:	f7f4 fa81 	bl	80002a8 <__aeabi_dsub>
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdae:	f7f4 fea5 	bl	8000afc <__aeabi_dcmplt>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	f43f aef5 	beq.w	800bba2 <_dtoa_r+0x43a>
 800bdb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bdba:	1e73      	subs	r3, r6, #1
 800bdbc:	9315      	str	r3, [sp, #84]	@ 0x54
 800bdbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bdc2:	2b30      	cmp	r3, #48	@ 0x30
 800bdc4:	d0f8      	beq.n	800bdb8 <_dtoa_r+0x650>
 800bdc6:	9f04      	ldr	r7, [sp, #16]
 800bdc8:	e73e      	b.n	800bc48 <_dtoa_r+0x4e0>
 800bdca:	4b9b      	ldr	r3, [pc, #620]	@ (800c038 <_dtoa_r+0x8d0>)
 800bdcc:	f7f4 fc24 	bl	8000618 <__aeabi_dmul>
 800bdd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdd4:	e7bc      	b.n	800bd50 <_dtoa_r+0x5e8>
 800bdd6:	d10c      	bne.n	800bdf2 <_dtoa_r+0x68a>
 800bdd8:	2200      	movs	r2, #0
 800bdda:	4b98      	ldr	r3, [pc, #608]	@ (800c03c <_dtoa_r+0x8d4>)
 800bddc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bde0:	f7f4 fc1a 	bl	8000618 <__aeabi_dmul>
 800bde4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bde8:	f7f4 fe9c 	bl	8000b24 <__aeabi_dcmpge>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	f000 8157 	beq.w	800c0a0 <_dtoa_r+0x938>
 800bdf2:	2400      	movs	r4, #0
 800bdf4:	4625      	mov	r5, r4
 800bdf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdf8:	4656      	mov	r6, sl
 800bdfa:	43db      	mvns	r3, r3
 800bdfc:	9304      	str	r3, [sp, #16]
 800bdfe:	2700      	movs	r7, #0
 800be00:	4621      	mov	r1, r4
 800be02:	4658      	mov	r0, fp
 800be04:	f000 fafe 	bl	800c404 <_Bfree>
 800be08:	2d00      	cmp	r5, #0
 800be0a:	d0dc      	beq.n	800bdc6 <_dtoa_r+0x65e>
 800be0c:	b12f      	cbz	r7, 800be1a <_dtoa_r+0x6b2>
 800be0e:	42af      	cmp	r7, r5
 800be10:	d003      	beq.n	800be1a <_dtoa_r+0x6b2>
 800be12:	4639      	mov	r1, r7
 800be14:	4658      	mov	r0, fp
 800be16:	f000 faf5 	bl	800c404 <_Bfree>
 800be1a:	4629      	mov	r1, r5
 800be1c:	4658      	mov	r0, fp
 800be1e:	f000 faf1 	bl	800c404 <_Bfree>
 800be22:	e7d0      	b.n	800bdc6 <_dtoa_r+0x65e>
 800be24:	9704      	str	r7, [sp, #16]
 800be26:	4633      	mov	r3, r6
 800be28:	461e      	mov	r6, r3
 800be2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be2e:	2a39      	cmp	r2, #57	@ 0x39
 800be30:	d107      	bne.n	800be42 <_dtoa_r+0x6da>
 800be32:	459a      	cmp	sl, r3
 800be34:	d1f8      	bne.n	800be28 <_dtoa_r+0x6c0>
 800be36:	9a04      	ldr	r2, [sp, #16]
 800be38:	3201      	adds	r2, #1
 800be3a:	9204      	str	r2, [sp, #16]
 800be3c:	2230      	movs	r2, #48	@ 0x30
 800be3e:	f88a 2000 	strb.w	r2, [sl]
 800be42:	781a      	ldrb	r2, [r3, #0]
 800be44:	3201      	adds	r2, #1
 800be46:	701a      	strb	r2, [r3, #0]
 800be48:	e7bd      	b.n	800bdc6 <_dtoa_r+0x65e>
 800be4a:	2200      	movs	r2, #0
 800be4c:	4b7a      	ldr	r3, [pc, #488]	@ (800c038 <_dtoa_r+0x8d0>)
 800be4e:	f7f4 fbe3 	bl	8000618 <__aeabi_dmul>
 800be52:	2200      	movs	r2, #0
 800be54:	2300      	movs	r3, #0
 800be56:	4604      	mov	r4, r0
 800be58:	460d      	mov	r5, r1
 800be5a:	f7f4 fe45 	bl	8000ae8 <__aeabi_dcmpeq>
 800be5e:	2800      	cmp	r0, #0
 800be60:	f43f aebb 	beq.w	800bbda <_dtoa_r+0x472>
 800be64:	e6f0      	b.n	800bc48 <_dtoa_r+0x4e0>
 800be66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800be68:	2a00      	cmp	r2, #0
 800be6a:	f000 80db 	beq.w	800c024 <_dtoa_r+0x8bc>
 800be6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be70:	2a01      	cmp	r2, #1
 800be72:	f300 80bf 	bgt.w	800bff4 <_dtoa_r+0x88c>
 800be76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800be78:	2a00      	cmp	r2, #0
 800be7a:	f000 80b7 	beq.w	800bfec <_dtoa_r+0x884>
 800be7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800be82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800be84:	4646      	mov	r6, r8
 800be86:	9a08      	ldr	r2, [sp, #32]
 800be88:	2101      	movs	r1, #1
 800be8a:	4658      	mov	r0, fp
 800be8c:	4498      	add	r8, r3
 800be8e:	441a      	add	r2, r3
 800be90:	9208      	str	r2, [sp, #32]
 800be92:	f000 fbb7 	bl	800c604 <__i2b>
 800be96:	4605      	mov	r5, r0
 800be98:	b15e      	cbz	r6, 800beb2 <_dtoa_r+0x74a>
 800be9a:	9b08      	ldr	r3, [sp, #32]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	dd08      	ble.n	800beb2 <_dtoa_r+0x74a>
 800bea0:	42b3      	cmp	r3, r6
 800bea2:	9a08      	ldr	r2, [sp, #32]
 800bea4:	bfa8      	it	ge
 800bea6:	4633      	movge	r3, r6
 800bea8:	eba8 0803 	sub.w	r8, r8, r3
 800beac:	1af6      	subs	r6, r6, r3
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	9308      	str	r3, [sp, #32]
 800beb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beb4:	b1f3      	cbz	r3, 800bef4 <_dtoa_r+0x78c>
 800beb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f000 80b7 	beq.w	800c02c <_dtoa_r+0x8c4>
 800bebe:	b18c      	cbz	r4, 800bee4 <_dtoa_r+0x77c>
 800bec0:	4629      	mov	r1, r5
 800bec2:	4622      	mov	r2, r4
 800bec4:	4658      	mov	r0, fp
 800bec6:	f000 fc5d 	bl	800c784 <__pow5mult>
 800beca:	464a      	mov	r2, r9
 800becc:	4601      	mov	r1, r0
 800bece:	4605      	mov	r5, r0
 800bed0:	4658      	mov	r0, fp
 800bed2:	f000 fbad 	bl	800c630 <__multiply>
 800bed6:	4649      	mov	r1, r9
 800bed8:	9004      	str	r0, [sp, #16]
 800beda:	4658      	mov	r0, fp
 800bedc:	f000 fa92 	bl	800c404 <_Bfree>
 800bee0:	9b04      	ldr	r3, [sp, #16]
 800bee2:	4699      	mov	r9, r3
 800bee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bee6:	1b1a      	subs	r2, r3, r4
 800bee8:	d004      	beq.n	800bef4 <_dtoa_r+0x78c>
 800beea:	4649      	mov	r1, r9
 800beec:	4658      	mov	r0, fp
 800beee:	f000 fc49 	bl	800c784 <__pow5mult>
 800bef2:	4681      	mov	r9, r0
 800bef4:	2101      	movs	r1, #1
 800bef6:	4658      	mov	r0, fp
 800bef8:	f000 fb84 	bl	800c604 <__i2b>
 800befc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800befe:	4604      	mov	r4, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f000 81cf 	beq.w	800c2a4 <_dtoa_r+0xb3c>
 800bf06:	461a      	mov	r2, r3
 800bf08:	4601      	mov	r1, r0
 800bf0a:	4658      	mov	r0, fp
 800bf0c:	f000 fc3a 	bl	800c784 <__pow5mult>
 800bf10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf12:	4604      	mov	r4, r0
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	f300 8095 	bgt.w	800c044 <_dtoa_r+0x8dc>
 800bf1a:	9b02      	ldr	r3, [sp, #8]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f040 8087 	bne.w	800c030 <_dtoa_r+0x8c8>
 800bf22:	9b03      	ldr	r3, [sp, #12]
 800bf24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f040 8089 	bne.w	800c040 <_dtoa_r+0x8d8>
 800bf2e:	9b03      	ldr	r3, [sp, #12]
 800bf30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf34:	0d1b      	lsrs	r3, r3, #20
 800bf36:	051b      	lsls	r3, r3, #20
 800bf38:	b12b      	cbz	r3, 800bf46 <_dtoa_r+0x7de>
 800bf3a:	9b08      	ldr	r3, [sp, #32]
 800bf3c:	f108 0801 	add.w	r8, r8, #1
 800bf40:	3301      	adds	r3, #1
 800bf42:	9308      	str	r3, [sp, #32]
 800bf44:	2301      	movs	r3, #1
 800bf46:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f000 81b0 	beq.w	800c2b0 <_dtoa_r+0xb48>
 800bf50:	6923      	ldr	r3, [r4, #16]
 800bf52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf56:	6918      	ldr	r0, [r3, #16]
 800bf58:	f000 fb08 	bl	800c56c <__hi0bits>
 800bf5c:	f1c0 0020 	rsb	r0, r0, #32
 800bf60:	9b08      	ldr	r3, [sp, #32]
 800bf62:	4418      	add	r0, r3
 800bf64:	f010 001f 	ands.w	r0, r0, #31
 800bf68:	d077      	beq.n	800c05a <_dtoa_r+0x8f2>
 800bf6a:	f1c0 0320 	rsb	r3, r0, #32
 800bf6e:	2b04      	cmp	r3, #4
 800bf70:	dd6b      	ble.n	800c04a <_dtoa_r+0x8e2>
 800bf72:	f1c0 001c 	rsb	r0, r0, #28
 800bf76:	9b08      	ldr	r3, [sp, #32]
 800bf78:	4480      	add	r8, r0
 800bf7a:	4403      	add	r3, r0
 800bf7c:	4406      	add	r6, r0
 800bf7e:	9308      	str	r3, [sp, #32]
 800bf80:	f1b8 0f00 	cmp.w	r8, #0
 800bf84:	dd05      	ble.n	800bf92 <_dtoa_r+0x82a>
 800bf86:	4649      	mov	r1, r9
 800bf88:	4642      	mov	r2, r8
 800bf8a:	4658      	mov	r0, fp
 800bf8c:	f000 fc54 	bl	800c838 <__lshift>
 800bf90:	4681      	mov	r9, r0
 800bf92:	9b08      	ldr	r3, [sp, #32]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	dd05      	ble.n	800bfa4 <_dtoa_r+0x83c>
 800bf98:	4621      	mov	r1, r4
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	4658      	mov	r0, fp
 800bf9e:	f000 fc4b 	bl	800c838 <__lshift>
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d059      	beq.n	800c05e <_dtoa_r+0x8f6>
 800bfaa:	4621      	mov	r1, r4
 800bfac:	4648      	mov	r0, r9
 800bfae:	f000 fcaf 	bl	800c910 <__mcmp>
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	da53      	bge.n	800c05e <_dtoa_r+0x8f6>
 800bfb6:	1e7b      	subs	r3, r7, #1
 800bfb8:	4649      	mov	r1, r9
 800bfba:	220a      	movs	r2, #10
 800bfbc:	4658      	mov	r0, fp
 800bfbe:	9304      	str	r3, [sp, #16]
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	f000 fa41 	bl	800c448 <__multadd>
 800bfc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfc8:	4681      	mov	r9, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f000 8172 	beq.w	800c2b4 <_dtoa_r+0xb4c>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	220a      	movs	r2, #10
 800bfd6:	4658      	mov	r0, fp
 800bfd8:	f000 fa36 	bl	800c448 <__multadd>
 800bfdc:	9b00      	ldr	r3, [sp, #0]
 800bfde:	4605      	mov	r5, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	dc67      	bgt.n	800c0b4 <_dtoa_r+0x94c>
 800bfe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	dc41      	bgt.n	800c06e <_dtoa_r+0x906>
 800bfea:	e063      	b.n	800c0b4 <_dtoa_r+0x94c>
 800bfec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bfee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bff2:	e746      	b.n	800be82 <_dtoa_r+0x71a>
 800bff4:	9b07      	ldr	r3, [sp, #28]
 800bff6:	1e5c      	subs	r4, r3, #1
 800bff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bffa:	42a3      	cmp	r3, r4
 800bffc:	bfb7      	itett	lt
 800bffe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c000:	1b1c      	subge	r4, r3, r4
 800c002:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c004:	1ae3      	sublt	r3, r4, r3
 800c006:	bfbe      	ittt	lt
 800c008:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c00a:	2400      	movlt	r4, #0
 800c00c:	18d2      	addlt	r2, r2, r3
 800c00e:	9b07      	ldr	r3, [sp, #28]
 800c010:	bfb8      	it	lt
 800c012:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c014:	2b00      	cmp	r3, #0
 800c016:	bfb5      	itete	lt
 800c018:	eba8 0603 	sublt.w	r6, r8, r3
 800c01c:	4646      	movge	r6, r8
 800c01e:	2300      	movlt	r3, #0
 800c020:	9b07      	ldrge	r3, [sp, #28]
 800c022:	e730      	b.n	800be86 <_dtoa_r+0x71e>
 800c024:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c026:	4646      	mov	r6, r8
 800c028:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c02a:	e735      	b.n	800be98 <_dtoa_r+0x730>
 800c02c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c02e:	e75c      	b.n	800beea <_dtoa_r+0x782>
 800c030:	2300      	movs	r3, #0
 800c032:	e788      	b.n	800bf46 <_dtoa_r+0x7de>
 800c034:	3fe00000 	.word	0x3fe00000
 800c038:	40240000 	.word	0x40240000
 800c03c:	40140000 	.word	0x40140000
 800c040:	9b02      	ldr	r3, [sp, #8]
 800c042:	e780      	b.n	800bf46 <_dtoa_r+0x7de>
 800c044:	2300      	movs	r3, #0
 800c046:	930a      	str	r3, [sp, #40]	@ 0x28
 800c048:	e782      	b.n	800bf50 <_dtoa_r+0x7e8>
 800c04a:	d099      	beq.n	800bf80 <_dtoa_r+0x818>
 800c04c:	331c      	adds	r3, #28
 800c04e:	9a08      	ldr	r2, [sp, #32]
 800c050:	441a      	add	r2, r3
 800c052:	4498      	add	r8, r3
 800c054:	441e      	add	r6, r3
 800c056:	9208      	str	r2, [sp, #32]
 800c058:	e792      	b.n	800bf80 <_dtoa_r+0x818>
 800c05a:	4603      	mov	r3, r0
 800c05c:	e7f6      	b.n	800c04c <_dtoa_r+0x8e4>
 800c05e:	9b07      	ldr	r3, [sp, #28]
 800c060:	9704      	str	r7, [sp, #16]
 800c062:	2b00      	cmp	r3, #0
 800c064:	dc20      	bgt.n	800c0a8 <_dtoa_r+0x940>
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	dd1e      	ble.n	800c0ac <_dtoa_r+0x944>
 800c06e:	9b00      	ldr	r3, [sp, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	f47f aec0 	bne.w	800bdf6 <_dtoa_r+0x68e>
 800c076:	4621      	mov	r1, r4
 800c078:	2205      	movs	r2, #5
 800c07a:	4658      	mov	r0, fp
 800c07c:	f000 f9e4 	bl	800c448 <__multadd>
 800c080:	4601      	mov	r1, r0
 800c082:	4604      	mov	r4, r0
 800c084:	4648      	mov	r0, r9
 800c086:	f000 fc43 	bl	800c910 <__mcmp>
 800c08a:	2800      	cmp	r0, #0
 800c08c:	f77f aeb3 	ble.w	800bdf6 <_dtoa_r+0x68e>
 800c090:	2331      	movs	r3, #49	@ 0x31
 800c092:	4656      	mov	r6, sl
 800c094:	f806 3b01 	strb.w	r3, [r6], #1
 800c098:	9b04      	ldr	r3, [sp, #16]
 800c09a:	3301      	adds	r3, #1
 800c09c:	9304      	str	r3, [sp, #16]
 800c09e:	e6ae      	b.n	800bdfe <_dtoa_r+0x696>
 800c0a0:	9c07      	ldr	r4, [sp, #28]
 800c0a2:	9704      	str	r7, [sp, #16]
 800c0a4:	4625      	mov	r5, r4
 800c0a6:	e7f3      	b.n	800c090 <_dtoa_r+0x928>
 800c0a8:	9b07      	ldr	r3, [sp, #28]
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	f000 8104 	beq.w	800c2bc <_dtoa_r+0xb54>
 800c0b4:	2e00      	cmp	r6, #0
 800c0b6:	dd05      	ble.n	800c0c4 <_dtoa_r+0x95c>
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	4632      	mov	r2, r6
 800c0bc:	4658      	mov	r0, fp
 800c0be:	f000 fbbb 	bl	800c838 <__lshift>
 800c0c2:	4605      	mov	r5, r0
 800c0c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d05a      	beq.n	800c180 <_dtoa_r+0xa18>
 800c0ca:	6869      	ldr	r1, [r5, #4]
 800c0cc:	4658      	mov	r0, fp
 800c0ce:	f000 f959 	bl	800c384 <_Balloc>
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	b928      	cbnz	r0, 800c0e2 <_dtoa_r+0x97a>
 800c0d6:	4b84      	ldr	r3, [pc, #528]	@ (800c2e8 <_dtoa_r+0xb80>)
 800c0d8:	4602      	mov	r2, r0
 800c0da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c0de:	f7ff bb5a 	b.w	800b796 <_dtoa_r+0x2e>
 800c0e2:	692a      	ldr	r2, [r5, #16]
 800c0e4:	f105 010c 	add.w	r1, r5, #12
 800c0e8:	300c      	adds	r0, #12
 800c0ea:	3202      	adds	r2, #2
 800c0ec:	0092      	lsls	r2, r2, #2
 800c0ee:	f002 f87f 	bl	800e1f0 <memcpy>
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	4631      	mov	r1, r6
 800c0f6:	4658      	mov	r0, fp
 800c0f8:	f000 fb9e 	bl	800c838 <__lshift>
 800c0fc:	f10a 0301 	add.w	r3, sl, #1
 800c100:	462f      	mov	r7, r5
 800c102:	4605      	mov	r5, r0
 800c104:	9307      	str	r3, [sp, #28]
 800c106:	9b00      	ldr	r3, [sp, #0]
 800c108:	4453      	add	r3, sl
 800c10a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c10c:	9b02      	ldr	r3, [sp, #8]
 800c10e:	f003 0301 	and.w	r3, r3, #1
 800c112:	930a      	str	r3, [sp, #40]	@ 0x28
 800c114:	9b07      	ldr	r3, [sp, #28]
 800c116:	4621      	mov	r1, r4
 800c118:	4648      	mov	r0, r9
 800c11a:	3b01      	subs	r3, #1
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	f7ff fa95 	bl	800b64c <quorem>
 800c122:	4639      	mov	r1, r7
 800c124:	9002      	str	r0, [sp, #8]
 800c126:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c12a:	4648      	mov	r0, r9
 800c12c:	f000 fbf0 	bl	800c910 <__mcmp>
 800c130:	462a      	mov	r2, r5
 800c132:	9008      	str	r0, [sp, #32]
 800c134:	4621      	mov	r1, r4
 800c136:	4658      	mov	r0, fp
 800c138:	f000 fc06 	bl	800c948 <__mdiff>
 800c13c:	68c2      	ldr	r2, [r0, #12]
 800c13e:	4606      	mov	r6, r0
 800c140:	bb02      	cbnz	r2, 800c184 <_dtoa_r+0xa1c>
 800c142:	4601      	mov	r1, r0
 800c144:	4648      	mov	r0, r9
 800c146:	f000 fbe3 	bl	800c910 <__mcmp>
 800c14a:	4602      	mov	r2, r0
 800c14c:	4631      	mov	r1, r6
 800c14e:	4658      	mov	r0, fp
 800c150:	920e      	str	r2, [sp, #56]	@ 0x38
 800c152:	f000 f957 	bl	800c404 <_Bfree>
 800c156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c158:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c15a:	9e07      	ldr	r6, [sp, #28]
 800c15c:	ea43 0102 	orr.w	r1, r3, r2
 800c160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c162:	4319      	orrs	r1, r3
 800c164:	d110      	bne.n	800c188 <_dtoa_r+0xa20>
 800c166:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c16a:	d029      	beq.n	800c1c0 <_dtoa_r+0xa58>
 800c16c:	9b08      	ldr	r3, [sp, #32]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	dd02      	ble.n	800c178 <_dtoa_r+0xa10>
 800c172:	9b02      	ldr	r3, [sp, #8]
 800c174:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c178:	9b00      	ldr	r3, [sp, #0]
 800c17a:	f883 8000 	strb.w	r8, [r3]
 800c17e:	e63f      	b.n	800be00 <_dtoa_r+0x698>
 800c180:	4628      	mov	r0, r5
 800c182:	e7bb      	b.n	800c0fc <_dtoa_r+0x994>
 800c184:	2201      	movs	r2, #1
 800c186:	e7e1      	b.n	800c14c <_dtoa_r+0x9e4>
 800c188:	9b08      	ldr	r3, [sp, #32]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	db04      	blt.n	800c198 <_dtoa_r+0xa30>
 800c18e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c190:	430b      	orrs	r3, r1
 800c192:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c194:	430b      	orrs	r3, r1
 800c196:	d120      	bne.n	800c1da <_dtoa_r+0xa72>
 800c198:	2a00      	cmp	r2, #0
 800c19a:	dded      	ble.n	800c178 <_dtoa_r+0xa10>
 800c19c:	4649      	mov	r1, r9
 800c19e:	2201      	movs	r2, #1
 800c1a0:	4658      	mov	r0, fp
 800c1a2:	f000 fb49 	bl	800c838 <__lshift>
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	4681      	mov	r9, r0
 800c1aa:	f000 fbb1 	bl	800c910 <__mcmp>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	dc03      	bgt.n	800c1ba <_dtoa_r+0xa52>
 800c1b2:	d1e1      	bne.n	800c178 <_dtoa_r+0xa10>
 800c1b4:	f018 0f01 	tst.w	r8, #1
 800c1b8:	d0de      	beq.n	800c178 <_dtoa_r+0xa10>
 800c1ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c1be:	d1d8      	bne.n	800c172 <_dtoa_r+0xa0a>
 800c1c0:	2339      	movs	r3, #57	@ 0x39
 800c1c2:	9a00      	ldr	r2, [sp, #0]
 800c1c4:	7013      	strb	r3, [r2, #0]
 800c1c6:	4633      	mov	r3, r6
 800c1c8:	461e      	mov	r6, r3
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c1d0:	2a39      	cmp	r2, #57	@ 0x39
 800c1d2:	d052      	beq.n	800c27a <_dtoa_r+0xb12>
 800c1d4:	3201      	adds	r2, #1
 800c1d6:	701a      	strb	r2, [r3, #0]
 800c1d8:	e612      	b.n	800be00 <_dtoa_r+0x698>
 800c1da:	2a00      	cmp	r2, #0
 800c1dc:	dd07      	ble.n	800c1ee <_dtoa_r+0xa86>
 800c1de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c1e2:	d0ed      	beq.n	800c1c0 <_dtoa_r+0xa58>
 800c1e4:	f108 0301 	add.w	r3, r8, #1
 800c1e8:	9a00      	ldr	r2, [sp, #0]
 800c1ea:	7013      	strb	r3, [r2, #0]
 800c1ec:	e608      	b.n	800be00 <_dtoa_r+0x698>
 800c1ee:	9b07      	ldr	r3, [sp, #28]
 800c1f0:	9a07      	ldr	r2, [sp, #28]
 800c1f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c1f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d028      	beq.n	800c24e <_dtoa_r+0xae6>
 800c1fc:	4649      	mov	r1, r9
 800c1fe:	2300      	movs	r3, #0
 800c200:	220a      	movs	r2, #10
 800c202:	4658      	mov	r0, fp
 800c204:	f000 f920 	bl	800c448 <__multadd>
 800c208:	42af      	cmp	r7, r5
 800c20a:	4681      	mov	r9, r0
 800c20c:	f04f 0300 	mov.w	r3, #0
 800c210:	f04f 020a 	mov.w	r2, #10
 800c214:	4639      	mov	r1, r7
 800c216:	4658      	mov	r0, fp
 800c218:	d107      	bne.n	800c22a <_dtoa_r+0xac2>
 800c21a:	f000 f915 	bl	800c448 <__multadd>
 800c21e:	4607      	mov	r7, r0
 800c220:	4605      	mov	r5, r0
 800c222:	9b07      	ldr	r3, [sp, #28]
 800c224:	3301      	adds	r3, #1
 800c226:	9307      	str	r3, [sp, #28]
 800c228:	e774      	b.n	800c114 <_dtoa_r+0x9ac>
 800c22a:	f000 f90d 	bl	800c448 <__multadd>
 800c22e:	4629      	mov	r1, r5
 800c230:	4607      	mov	r7, r0
 800c232:	2300      	movs	r3, #0
 800c234:	220a      	movs	r2, #10
 800c236:	4658      	mov	r0, fp
 800c238:	f000 f906 	bl	800c448 <__multadd>
 800c23c:	4605      	mov	r5, r0
 800c23e:	e7f0      	b.n	800c222 <_dtoa_r+0xaba>
 800c240:	9b00      	ldr	r3, [sp, #0]
 800c242:	2700      	movs	r7, #0
 800c244:	2b00      	cmp	r3, #0
 800c246:	bfcc      	ite	gt
 800c248:	461e      	movgt	r6, r3
 800c24a:	2601      	movle	r6, #1
 800c24c:	4456      	add	r6, sl
 800c24e:	4649      	mov	r1, r9
 800c250:	2201      	movs	r2, #1
 800c252:	4658      	mov	r0, fp
 800c254:	f000 faf0 	bl	800c838 <__lshift>
 800c258:	4621      	mov	r1, r4
 800c25a:	4681      	mov	r9, r0
 800c25c:	f000 fb58 	bl	800c910 <__mcmp>
 800c260:	2800      	cmp	r0, #0
 800c262:	dcb0      	bgt.n	800c1c6 <_dtoa_r+0xa5e>
 800c264:	d102      	bne.n	800c26c <_dtoa_r+0xb04>
 800c266:	f018 0f01 	tst.w	r8, #1
 800c26a:	d1ac      	bne.n	800c1c6 <_dtoa_r+0xa5e>
 800c26c:	4633      	mov	r3, r6
 800c26e:	461e      	mov	r6, r3
 800c270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c274:	2a30      	cmp	r2, #48	@ 0x30
 800c276:	d0fa      	beq.n	800c26e <_dtoa_r+0xb06>
 800c278:	e5c2      	b.n	800be00 <_dtoa_r+0x698>
 800c27a:	459a      	cmp	sl, r3
 800c27c:	d1a4      	bne.n	800c1c8 <_dtoa_r+0xa60>
 800c27e:	9b04      	ldr	r3, [sp, #16]
 800c280:	3301      	adds	r3, #1
 800c282:	9304      	str	r3, [sp, #16]
 800c284:	2331      	movs	r3, #49	@ 0x31
 800c286:	f88a 3000 	strb.w	r3, [sl]
 800c28a:	e5b9      	b.n	800be00 <_dtoa_r+0x698>
 800c28c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c28e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c2ec <_dtoa_r+0xb84>
 800c292:	b11b      	cbz	r3, 800c29c <_dtoa_r+0xb34>
 800c294:	f10a 0308 	add.w	r3, sl, #8
 800c298:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c29a:	6013      	str	r3, [r2, #0]
 800c29c:	4650      	mov	r0, sl
 800c29e:	b019      	add	sp, #100	@ 0x64
 800c2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	f77f ae37 	ble.w	800bf1a <_dtoa_r+0x7b2>
 800c2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2b0:	2001      	movs	r0, #1
 800c2b2:	e655      	b.n	800bf60 <_dtoa_r+0x7f8>
 800c2b4:	9b00      	ldr	r3, [sp, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f77f aed6 	ble.w	800c068 <_dtoa_r+0x900>
 800c2bc:	4656      	mov	r6, sl
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4648      	mov	r0, r9
 800c2c2:	f7ff f9c3 	bl	800b64c <quorem>
 800c2c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c2ca:	9b00      	ldr	r3, [sp, #0]
 800c2cc:	f806 8b01 	strb.w	r8, [r6], #1
 800c2d0:	eba6 020a 	sub.w	r2, r6, sl
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	ddb3      	ble.n	800c240 <_dtoa_r+0xad8>
 800c2d8:	4649      	mov	r1, r9
 800c2da:	2300      	movs	r3, #0
 800c2dc:	220a      	movs	r2, #10
 800c2de:	4658      	mov	r0, fp
 800c2e0:	f000 f8b2 	bl	800c448 <__multadd>
 800c2e4:	4681      	mov	r9, r0
 800c2e6:	e7ea      	b.n	800c2be <_dtoa_r+0xb56>
 800c2e8:	0800ee89 	.word	0x0800ee89
 800c2ec:	0800ee0d 	.word	0x0800ee0d

0800c2f0 <_free_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4605      	mov	r5, r0
 800c2f4:	2900      	cmp	r1, #0
 800c2f6:	d041      	beq.n	800c37c <_free_r+0x8c>
 800c2f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2fc:	1f0c      	subs	r4, r1, #4
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	bfb8      	it	lt
 800c302:	18e4      	addlt	r4, r4, r3
 800c304:	f7fe f85c 	bl	800a3c0 <__malloc_lock>
 800c308:	4a1d      	ldr	r2, [pc, #116]	@ (800c380 <_free_r+0x90>)
 800c30a:	6813      	ldr	r3, [r2, #0]
 800c30c:	b933      	cbnz	r3, 800c31c <_free_r+0x2c>
 800c30e:	6063      	str	r3, [r4, #4]
 800c310:	6014      	str	r4, [r2, #0]
 800c312:	4628      	mov	r0, r5
 800c314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c318:	f7fe b858 	b.w	800a3cc <__malloc_unlock>
 800c31c:	42a3      	cmp	r3, r4
 800c31e:	d908      	bls.n	800c332 <_free_r+0x42>
 800c320:	6820      	ldr	r0, [r4, #0]
 800c322:	1821      	adds	r1, r4, r0
 800c324:	428b      	cmp	r3, r1
 800c326:	bf01      	itttt	eq
 800c328:	6819      	ldreq	r1, [r3, #0]
 800c32a:	685b      	ldreq	r3, [r3, #4]
 800c32c:	1809      	addeq	r1, r1, r0
 800c32e:	6021      	streq	r1, [r4, #0]
 800c330:	e7ed      	b.n	800c30e <_free_r+0x1e>
 800c332:	461a      	mov	r2, r3
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	b10b      	cbz	r3, 800c33c <_free_r+0x4c>
 800c338:	42a3      	cmp	r3, r4
 800c33a:	d9fa      	bls.n	800c332 <_free_r+0x42>
 800c33c:	6811      	ldr	r1, [r2, #0]
 800c33e:	1850      	adds	r0, r2, r1
 800c340:	42a0      	cmp	r0, r4
 800c342:	d10b      	bne.n	800c35c <_free_r+0x6c>
 800c344:	6820      	ldr	r0, [r4, #0]
 800c346:	4401      	add	r1, r0
 800c348:	1850      	adds	r0, r2, r1
 800c34a:	6011      	str	r1, [r2, #0]
 800c34c:	4283      	cmp	r3, r0
 800c34e:	d1e0      	bne.n	800c312 <_free_r+0x22>
 800c350:	6818      	ldr	r0, [r3, #0]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	4408      	add	r0, r1
 800c356:	6053      	str	r3, [r2, #4]
 800c358:	6010      	str	r0, [r2, #0]
 800c35a:	e7da      	b.n	800c312 <_free_r+0x22>
 800c35c:	d902      	bls.n	800c364 <_free_r+0x74>
 800c35e:	230c      	movs	r3, #12
 800c360:	602b      	str	r3, [r5, #0]
 800c362:	e7d6      	b.n	800c312 <_free_r+0x22>
 800c364:	6820      	ldr	r0, [r4, #0]
 800c366:	1821      	adds	r1, r4, r0
 800c368:	428b      	cmp	r3, r1
 800c36a:	bf02      	ittt	eq
 800c36c:	6819      	ldreq	r1, [r3, #0]
 800c36e:	685b      	ldreq	r3, [r3, #4]
 800c370:	1809      	addeq	r1, r1, r0
 800c372:	6063      	str	r3, [r4, #4]
 800c374:	bf08      	it	eq
 800c376:	6021      	streq	r1, [r4, #0]
 800c378:	6054      	str	r4, [r2, #4]
 800c37a:	e7ca      	b.n	800c312 <_free_r+0x22>
 800c37c:	bd38      	pop	{r3, r4, r5, pc}
 800c37e:	bf00      	nop
 800c380:	200004a4 	.word	0x200004a4

0800c384 <_Balloc>:
 800c384:	b570      	push	{r4, r5, r6, lr}
 800c386:	69c6      	ldr	r6, [r0, #28]
 800c388:	4604      	mov	r4, r0
 800c38a:	460d      	mov	r5, r1
 800c38c:	b976      	cbnz	r6, 800c3ac <_Balloc+0x28>
 800c38e:	2010      	movs	r0, #16
 800c390:	f7fd ff64 	bl	800a25c <malloc>
 800c394:	4602      	mov	r2, r0
 800c396:	61e0      	str	r0, [r4, #28]
 800c398:	b920      	cbnz	r0, 800c3a4 <_Balloc+0x20>
 800c39a:	4b18      	ldr	r3, [pc, #96]	@ (800c3fc <_Balloc+0x78>)
 800c39c:	216b      	movs	r1, #107	@ 0x6b
 800c39e:	4818      	ldr	r0, [pc, #96]	@ (800c400 <_Balloc+0x7c>)
 800c3a0:	f001 ff3e 	bl	800e220 <__assert_func>
 800c3a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3a8:	6006      	str	r6, [r0, #0]
 800c3aa:	60c6      	str	r6, [r0, #12]
 800c3ac:	69e6      	ldr	r6, [r4, #28]
 800c3ae:	68f3      	ldr	r3, [r6, #12]
 800c3b0:	b183      	cbz	r3, 800c3d4 <_Balloc+0x50>
 800c3b2:	69e3      	ldr	r3, [r4, #28]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3ba:	b9b8      	cbnz	r0, 800c3ec <_Balloc+0x68>
 800c3bc:	2101      	movs	r1, #1
 800c3be:	4620      	mov	r0, r4
 800c3c0:	fa01 f605 	lsl.w	r6, r1, r5
 800c3c4:	1d72      	adds	r2, r6, #5
 800c3c6:	0092      	lsls	r2, r2, #2
 800c3c8:	f001 ff48 	bl	800e25c <_calloc_r>
 800c3cc:	b160      	cbz	r0, 800c3e8 <_Balloc+0x64>
 800c3ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c3d2:	e00e      	b.n	800c3f2 <_Balloc+0x6e>
 800c3d4:	2221      	movs	r2, #33	@ 0x21
 800c3d6:	2104      	movs	r1, #4
 800c3d8:	4620      	mov	r0, r4
 800c3da:	f001 ff3f 	bl	800e25c <_calloc_r>
 800c3de:	69e3      	ldr	r3, [r4, #28]
 800c3e0:	60f0      	str	r0, [r6, #12]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1e4      	bne.n	800c3b2 <_Balloc+0x2e>
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	bd70      	pop	{r4, r5, r6, pc}
 800c3ec:	6802      	ldr	r2, [r0, #0]
 800c3ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3f8:	e7f7      	b.n	800c3ea <_Balloc+0x66>
 800c3fa:	bf00      	nop
 800c3fc:	0800ee1a 	.word	0x0800ee1a
 800c400:	0800ee9a 	.word	0x0800ee9a

0800c404 <_Bfree>:
 800c404:	b570      	push	{r4, r5, r6, lr}
 800c406:	69c6      	ldr	r6, [r0, #28]
 800c408:	4605      	mov	r5, r0
 800c40a:	460c      	mov	r4, r1
 800c40c:	b976      	cbnz	r6, 800c42c <_Bfree+0x28>
 800c40e:	2010      	movs	r0, #16
 800c410:	f7fd ff24 	bl	800a25c <malloc>
 800c414:	4602      	mov	r2, r0
 800c416:	61e8      	str	r0, [r5, #28]
 800c418:	b920      	cbnz	r0, 800c424 <_Bfree+0x20>
 800c41a:	4b09      	ldr	r3, [pc, #36]	@ (800c440 <_Bfree+0x3c>)
 800c41c:	218f      	movs	r1, #143	@ 0x8f
 800c41e:	4809      	ldr	r0, [pc, #36]	@ (800c444 <_Bfree+0x40>)
 800c420:	f001 fefe 	bl	800e220 <__assert_func>
 800c424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c428:	6006      	str	r6, [r0, #0]
 800c42a:	60c6      	str	r6, [r0, #12]
 800c42c:	b13c      	cbz	r4, 800c43e <_Bfree+0x3a>
 800c42e:	69eb      	ldr	r3, [r5, #28]
 800c430:	6862      	ldr	r2, [r4, #4]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c438:	6021      	str	r1, [r4, #0]
 800c43a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c43e:	bd70      	pop	{r4, r5, r6, pc}
 800c440:	0800ee1a 	.word	0x0800ee1a
 800c444:	0800ee9a 	.word	0x0800ee9a

0800c448 <__multadd>:
 800c448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c44c:	f101 0c14 	add.w	ip, r1, #20
 800c450:	4607      	mov	r7, r0
 800c452:	460c      	mov	r4, r1
 800c454:	461e      	mov	r6, r3
 800c456:	690d      	ldr	r5, [r1, #16]
 800c458:	2000      	movs	r0, #0
 800c45a:	f8dc 3000 	ldr.w	r3, [ip]
 800c45e:	3001      	adds	r0, #1
 800c460:	b299      	uxth	r1, r3
 800c462:	4285      	cmp	r5, r0
 800c464:	fb02 6101 	mla	r1, r2, r1, r6
 800c468:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c46c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800c470:	b289      	uxth	r1, r1
 800c472:	fb02 3306 	mla	r3, r2, r6, r3
 800c476:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c47a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c47e:	f84c 1b04 	str.w	r1, [ip], #4
 800c482:	dcea      	bgt.n	800c45a <__multadd+0x12>
 800c484:	b30e      	cbz	r6, 800c4ca <__multadd+0x82>
 800c486:	68a3      	ldr	r3, [r4, #8]
 800c488:	42ab      	cmp	r3, r5
 800c48a:	dc19      	bgt.n	800c4c0 <__multadd+0x78>
 800c48c:	6861      	ldr	r1, [r4, #4]
 800c48e:	4638      	mov	r0, r7
 800c490:	3101      	adds	r1, #1
 800c492:	f7ff ff77 	bl	800c384 <_Balloc>
 800c496:	4680      	mov	r8, r0
 800c498:	b928      	cbnz	r0, 800c4a6 <__multadd+0x5e>
 800c49a:	4602      	mov	r2, r0
 800c49c:	4b0c      	ldr	r3, [pc, #48]	@ (800c4d0 <__multadd+0x88>)
 800c49e:	21ba      	movs	r1, #186	@ 0xba
 800c4a0:	480c      	ldr	r0, [pc, #48]	@ (800c4d4 <__multadd+0x8c>)
 800c4a2:	f001 febd 	bl	800e220 <__assert_func>
 800c4a6:	6922      	ldr	r2, [r4, #16]
 800c4a8:	f104 010c 	add.w	r1, r4, #12
 800c4ac:	300c      	adds	r0, #12
 800c4ae:	3202      	adds	r2, #2
 800c4b0:	0092      	lsls	r2, r2, #2
 800c4b2:	f001 fe9d 	bl	800e1f0 <memcpy>
 800c4b6:	4621      	mov	r1, r4
 800c4b8:	4644      	mov	r4, r8
 800c4ba:	4638      	mov	r0, r7
 800c4bc:	f7ff ffa2 	bl	800c404 <_Bfree>
 800c4c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4c4:	3501      	adds	r5, #1
 800c4c6:	615e      	str	r6, [r3, #20]
 800c4c8:	6125      	str	r5, [r4, #16]
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4d0:	0800ee89 	.word	0x0800ee89
 800c4d4:	0800ee9a 	.word	0x0800ee9a

0800c4d8 <__s2b>:
 800c4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4dc:	4615      	mov	r5, r2
 800c4de:	461f      	mov	r7, r3
 800c4e0:	2209      	movs	r2, #9
 800c4e2:	3308      	adds	r3, #8
 800c4e4:	460c      	mov	r4, r1
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	db09      	blt.n	800c508 <__s2b+0x30>
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	f7ff ff45 	bl	800c384 <_Balloc>
 800c4fa:	b940      	cbnz	r0, 800c50e <__s2b+0x36>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	4b19      	ldr	r3, [pc, #100]	@ (800c564 <__s2b+0x8c>)
 800c500:	21d3      	movs	r1, #211	@ 0xd3
 800c502:	4819      	ldr	r0, [pc, #100]	@ (800c568 <__s2b+0x90>)
 800c504:	f001 fe8c 	bl	800e220 <__assert_func>
 800c508:	0052      	lsls	r2, r2, #1
 800c50a:	3101      	adds	r1, #1
 800c50c:	e7f0      	b.n	800c4f0 <__s2b+0x18>
 800c50e:	9b08      	ldr	r3, [sp, #32]
 800c510:	2d09      	cmp	r5, #9
 800c512:	6143      	str	r3, [r0, #20]
 800c514:	f04f 0301 	mov.w	r3, #1
 800c518:	6103      	str	r3, [r0, #16]
 800c51a:	dd16      	ble.n	800c54a <__s2b+0x72>
 800c51c:	f104 0909 	add.w	r9, r4, #9
 800c520:	442c      	add	r4, r5
 800c522:	46c8      	mov	r8, r9
 800c524:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c528:	4601      	mov	r1, r0
 800c52a:	220a      	movs	r2, #10
 800c52c:	4630      	mov	r0, r6
 800c52e:	3b30      	subs	r3, #48	@ 0x30
 800c530:	f7ff ff8a 	bl	800c448 <__multadd>
 800c534:	45a0      	cmp	r8, r4
 800c536:	d1f5      	bne.n	800c524 <__s2b+0x4c>
 800c538:	f1a5 0408 	sub.w	r4, r5, #8
 800c53c:	444c      	add	r4, r9
 800c53e:	1b2d      	subs	r5, r5, r4
 800c540:	1963      	adds	r3, r4, r5
 800c542:	42bb      	cmp	r3, r7
 800c544:	db04      	blt.n	800c550 <__s2b+0x78>
 800c546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c54a:	340a      	adds	r4, #10
 800c54c:	2509      	movs	r5, #9
 800c54e:	e7f6      	b.n	800c53e <__s2b+0x66>
 800c550:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c554:	4601      	mov	r1, r0
 800c556:	220a      	movs	r2, #10
 800c558:	4630      	mov	r0, r6
 800c55a:	3b30      	subs	r3, #48	@ 0x30
 800c55c:	f7ff ff74 	bl	800c448 <__multadd>
 800c560:	e7ee      	b.n	800c540 <__s2b+0x68>
 800c562:	bf00      	nop
 800c564:	0800ee89 	.word	0x0800ee89
 800c568:	0800ee9a 	.word	0x0800ee9a

0800c56c <__hi0bits>:
 800c56c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c570:	4603      	mov	r3, r0
 800c572:	bf36      	itet	cc
 800c574:	0403      	lslcc	r3, r0, #16
 800c576:	2000      	movcs	r0, #0
 800c578:	2010      	movcc	r0, #16
 800c57a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c57e:	bf3c      	itt	cc
 800c580:	021b      	lslcc	r3, r3, #8
 800c582:	3008      	addcc	r0, #8
 800c584:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c588:	bf3c      	itt	cc
 800c58a:	011b      	lslcc	r3, r3, #4
 800c58c:	3004      	addcc	r0, #4
 800c58e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c592:	bf3c      	itt	cc
 800c594:	009b      	lslcc	r3, r3, #2
 800c596:	3002      	addcc	r0, #2
 800c598:	2b00      	cmp	r3, #0
 800c59a:	db05      	blt.n	800c5a8 <__hi0bits+0x3c>
 800c59c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c5a0:	f100 0001 	add.w	r0, r0, #1
 800c5a4:	bf08      	it	eq
 800c5a6:	2020      	moveq	r0, #32
 800c5a8:	4770      	bx	lr

0800c5aa <__lo0bits>:
 800c5aa:	6803      	ldr	r3, [r0, #0]
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	f013 0007 	ands.w	r0, r3, #7
 800c5b2:	d00b      	beq.n	800c5cc <__lo0bits+0x22>
 800c5b4:	07d9      	lsls	r1, r3, #31
 800c5b6:	d421      	bmi.n	800c5fc <__lo0bits+0x52>
 800c5b8:	0798      	lsls	r0, r3, #30
 800c5ba:	bf47      	ittee	mi
 800c5bc:	085b      	lsrmi	r3, r3, #1
 800c5be:	2001      	movmi	r0, #1
 800c5c0:	089b      	lsrpl	r3, r3, #2
 800c5c2:	2002      	movpl	r0, #2
 800c5c4:	bf4c      	ite	mi
 800c5c6:	6013      	strmi	r3, [r2, #0]
 800c5c8:	6013      	strpl	r3, [r2, #0]
 800c5ca:	4770      	bx	lr
 800c5cc:	b299      	uxth	r1, r3
 800c5ce:	b909      	cbnz	r1, 800c5d4 <__lo0bits+0x2a>
 800c5d0:	0c1b      	lsrs	r3, r3, #16
 800c5d2:	2010      	movs	r0, #16
 800c5d4:	b2d9      	uxtb	r1, r3
 800c5d6:	b909      	cbnz	r1, 800c5dc <__lo0bits+0x32>
 800c5d8:	3008      	adds	r0, #8
 800c5da:	0a1b      	lsrs	r3, r3, #8
 800c5dc:	0719      	lsls	r1, r3, #28
 800c5de:	bf04      	itt	eq
 800c5e0:	091b      	lsreq	r3, r3, #4
 800c5e2:	3004      	addeq	r0, #4
 800c5e4:	0799      	lsls	r1, r3, #30
 800c5e6:	bf04      	itt	eq
 800c5e8:	089b      	lsreq	r3, r3, #2
 800c5ea:	3002      	addeq	r0, #2
 800c5ec:	07d9      	lsls	r1, r3, #31
 800c5ee:	d403      	bmi.n	800c5f8 <__lo0bits+0x4e>
 800c5f0:	085b      	lsrs	r3, r3, #1
 800c5f2:	f100 0001 	add.w	r0, r0, #1
 800c5f6:	d003      	beq.n	800c600 <__lo0bits+0x56>
 800c5f8:	6013      	str	r3, [r2, #0]
 800c5fa:	4770      	bx	lr
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	4770      	bx	lr
 800c600:	2020      	movs	r0, #32
 800c602:	4770      	bx	lr

0800c604 <__i2b>:
 800c604:	b510      	push	{r4, lr}
 800c606:	460c      	mov	r4, r1
 800c608:	2101      	movs	r1, #1
 800c60a:	f7ff febb 	bl	800c384 <_Balloc>
 800c60e:	4602      	mov	r2, r0
 800c610:	b928      	cbnz	r0, 800c61e <__i2b+0x1a>
 800c612:	4b05      	ldr	r3, [pc, #20]	@ (800c628 <__i2b+0x24>)
 800c614:	f240 1145 	movw	r1, #325	@ 0x145
 800c618:	4804      	ldr	r0, [pc, #16]	@ (800c62c <__i2b+0x28>)
 800c61a:	f001 fe01 	bl	800e220 <__assert_func>
 800c61e:	2301      	movs	r3, #1
 800c620:	6144      	str	r4, [r0, #20]
 800c622:	6103      	str	r3, [r0, #16]
 800c624:	bd10      	pop	{r4, pc}
 800c626:	bf00      	nop
 800c628:	0800ee89 	.word	0x0800ee89
 800c62c:	0800ee9a 	.word	0x0800ee9a

0800c630 <__multiply>:
 800c630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c634:	4614      	mov	r4, r2
 800c636:	690a      	ldr	r2, [r1, #16]
 800c638:	460f      	mov	r7, r1
 800c63a:	b085      	sub	sp, #20
 800c63c:	6923      	ldr	r3, [r4, #16]
 800c63e:	429a      	cmp	r2, r3
 800c640:	bfa2      	ittt	ge
 800c642:	4623      	movge	r3, r4
 800c644:	460c      	movge	r4, r1
 800c646:	461f      	movge	r7, r3
 800c648:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c64c:	68a3      	ldr	r3, [r4, #8]
 800c64e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c652:	6861      	ldr	r1, [r4, #4]
 800c654:	eb0a 0609 	add.w	r6, sl, r9
 800c658:	42b3      	cmp	r3, r6
 800c65a:	bfb8      	it	lt
 800c65c:	3101      	addlt	r1, #1
 800c65e:	f7ff fe91 	bl	800c384 <_Balloc>
 800c662:	b930      	cbnz	r0, 800c672 <__multiply+0x42>
 800c664:	4602      	mov	r2, r0
 800c666:	4b45      	ldr	r3, [pc, #276]	@ (800c77c <__multiply+0x14c>)
 800c668:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c66c:	4844      	ldr	r0, [pc, #272]	@ (800c780 <__multiply+0x150>)
 800c66e:	f001 fdd7 	bl	800e220 <__assert_func>
 800c672:	f100 0514 	add.w	r5, r0, #20
 800c676:	2200      	movs	r2, #0
 800c678:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c67c:	462b      	mov	r3, r5
 800c67e:	4543      	cmp	r3, r8
 800c680:	d321      	bcc.n	800c6c6 <__multiply+0x96>
 800c682:	f107 0114 	add.w	r1, r7, #20
 800c686:	f104 0214 	add.w	r2, r4, #20
 800c68a:	f104 0715 	add.w	r7, r4, #21
 800c68e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c692:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c696:	9302      	str	r3, [sp, #8]
 800c698:	1b13      	subs	r3, r2, r4
 800c69a:	3b15      	subs	r3, #21
 800c69c:	f023 0303 	bic.w	r3, r3, #3
 800c6a0:	3304      	adds	r3, #4
 800c6a2:	42ba      	cmp	r2, r7
 800c6a4:	bf38      	it	cc
 800c6a6:	2304      	movcc	r3, #4
 800c6a8:	9301      	str	r3, [sp, #4]
 800c6aa:	9b02      	ldr	r3, [sp, #8]
 800c6ac:	9103      	str	r1, [sp, #12]
 800c6ae:	428b      	cmp	r3, r1
 800c6b0:	d80c      	bhi.n	800c6cc <__multiply+0x9c>
 800c6b2:	2e00      	cmp	r6, #0
 800c6b4:	dd03      	ble.n	800c6be <__multiply+0x8e>
 800c6b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d05b      	beq.n	800c776 <__multiply+0x146>
 800c6be:	6106      	str	r6, [r0, #16]
 800c6c0:	b005      	add	sp, #20
 800c6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c6:	f843 2b04 	str.w	r2, [r3], #4
 800c6ca:	e7d8      	b.n	800c67e <__multiply+0x4e>
 800c6cc:	f8b1 a000 	ldrh.w	sl, [r1]
 800c6d0:	f1ba 0f00 	cmp.w	sl, #0
 800c6d4:	d024      	beq.n	800c720 <__multiply+0xf0>
 800c6d6:	f104 0e14 	add.w	lr, r4, #20
 800c6da:	46a9      	mov	r9, r5
 800c6dc:	f04f 0c00 	mov.w	ip, #0
 800c6e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c6e4:	f8d9 3000 	ldr.w	r3, [r9]
 800c6e8:	fa1f fb87 	uxth.w	fp, r7
 800c6ec:	4572      	cmp	r2, lr
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	fb0a 330b 	mla	r3, sl, fp, r3
 800c6f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c6f8:	f8d9 7000 	ldr.w	r7, [r9]
 800c6fc:	4463      	add	r3, ip
 800c6fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c702:	fb0a c70b 	mla	r7, sl, fp, ip
 800c706:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c710:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c714:	f849 3b04 	str.w	r3, [r9], #4
 800c718:	d8e2      	bhi.n	800c6e0 <__multiply+0xb0>
 800c71a:	9b01      	ldr	r3, [sp, #4]
 800c71c:	f845 c003 	str.w	ip, [r5, r3]
 800c720:	9b03      	ldr	r3, [sp, #12]
 800c722:	3104      	adds	r1, #4
 800c724:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c728:	f1b9 0f00 	cmp.w	r9, #0
 800c72c:	d021      	beq.n	800c772 <__multiply+0x142>
 800c72e:	682b      	ldr	r3, [r5, #0]
 800c730:	f104 0c14 	add.w	ip, r4, #20
 800c734:	46ae      	mov	lr, r5
 800c736:	f04f 0a00 	mov.w	sl, #0
 800c73a:	f8bc b000 	ldrh.w	fp, [ip]
 800c73e:	b29b      	uxth	r3, r3
 800c740:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c744:	fb09 770b 	mla	r7, r9, fp, r7
 800c748:	4457      	add	r7, sl
 800c74a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c74e:	f84e 3b04 	str.w	r3, [lr], #4
 800c752:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c756:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c75a:	f8be 3000 	ldrh.w	r3, [lr]
 800c75e:	4562      	cmp	r2, ip
 800c760:	fb09 330a 	mla	r3, r9, sl, r3
 800c764:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c768:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c76c:	d8e5      	bhi.n	800c73a <__multiply+0x10a>
 800c76e:	9f01      	ldr	r7, [sp, #4]
 800c770:	51eb      	str	r3, [r5, r7]
 800c772:	3504      	adds	r5, #4
 800c774:	e799      	b.n	800c6aa <__multiply+0x7a>
 800c776:	3e01      	subs	r6, #1
 800c778:	e79b      	b.n	800c6b2 <__multiply+0x82>
 800c77a:	bf00      	nop
 800c77c:	0800ee89 	.word	0x0800ee89
 800c780:	0800ee9a 	.word	0x0800ee9a

0800c784 <__pow5mult>:
 800c784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c788:	4615      	mov	r5, r2
 800c78a:	f012 0203 	ands.w	r2, r2, #3
 800c78e:	4607      	mov	r7, r0
 800c790:	460e      	mov	r6, r1
 800c792:	d007      	beq.n	800c7a4 <__pow5mult+0x20>
 800c794:	3a01      	subs	r2, #1
 800c796:	4c25      	ldr	r4, [pc, #148]	@ (800c82c <__pow5mult+0xa8>)
 800c798:	2300      	movs	r3, #0
 800c79a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c79e:	f7ff fe53 	bl	800c448 <__multadd>
 800c7a2:	4606      	mov	r6, r0
 800c7a4:	10ad      	asrs	r5, r5, #2
 800c7a6:	d03d      	beq.n	800c824 <__pow5mult+0xa0>
 800c7a8:	69fc      	ldr	r4, [r7, #28]
 800c7aa:	b97c      	cbnz	r4, 800c7cc <__pow5mult+0x48>
 800c7ac:	2010      	movs	r0, #16
 800c7ae:	f7fd fd55 	bl	800a25c <malloc>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	61f8      	str	r0, [r7, #28]
 800c7b6:	b928      	cbnz	r0, 800c7c4 <__pow5mult+0x40>
 800c7b8:	4b1d      	ldr	r3, [pc, #116]	@ (800c830 <__pow5mult+0xac>)
 800c7ba:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c7be:	481d      	ldr	r0, [pc, #116]	@ (800c834 <__pow5mult+0xb0>)
 800c7c0:	f001 fd2e 	bl	800e220 <__assert_func>
 800c7c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7c8:	6004      	str	r4, [r0, #0]
 800c7ca:	60c4      	str	r4, [r0, #12]
 800c7cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c7d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7d4:	b94c      	cbnz	r4, 800c7ea <__pow5mult+0x66>
 800c7d6:	f240 2171 	movw	r1, #625	@ 0x271
 800c7da:	4638      	mov	r0, r7
 800c7dc:	f7ff ff12 	bl	800c604 <__i2b>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7e8:	6003      	str	r3, [r0, #0]
 800c7ea:	f04f 0900 	mov.w	r9, #0
 800c7ee:	07eb      	lsls	r3, r5, #31
 800c7f0:	d50a      	bpl.n	800c808 <__pow5mult+0x84>
 800c7f2:	4631      	mov	r1, r6
 800c7f4:	4622      	mov	r2, r4
 800c7f6:	4638      	mov	r0, r7
 800c7f8:	f7ff ff1a 	bl	800c630 <__multiply>
 800c7fc:	4680      	mov	r8, r0
 800c7fe:	4631      	mov	r1, r6
 800c800:	4638      	mov	r0, r7
 800c802:	4646      	mov	r6, r8
 800c804:	f7ff fdfe 	bl	800c404 <_Bfree>
 800c808:	106d      	asrs	r5, r5, #1
 800c80a:	d00b      	beq.n	800c824 <__pow5mult+0xa0>
 800c80c:	6820      	ldr	r0, [r4, #0]
 800c80e:	b938      	cbnz	r0, 800c820 <__pow5mult+0x9c>
 800c810:	4622      	mov	r2, r4
 800c812:	4621      	mov	r1, r4
 800c814:	4638      	mov	r0, r7
 800c816:	f7ff ff0b 	bl	800c630 <__multiply>
 800c81a:	6020      	str	r0, [r4, #0]
 800c81c:	f8c0 9000 	str.w	r9, [r0]
 800c820:	4604      	mov	r4, r0
 800c822:	e7e4      	b.n	800c7ee <__pow5mult+0x6a>
 800c824:	4630      	mov	r0, r6
 800c826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c82a:	bf00      	nop
 800c82c:	0800eef4 	.word	0x0800eef4
 800c830:	0800ee1a 	.word	0x0800ee1a
 800c834:	0800ee9a 	.word	0x0800ee9a

0800c838 <__lshift>:
 800c838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c83c:	460c      	mov	r4, r1
 800c83e:	4607      	mov	r7, r0
 800c840:	4691      	mov	r9, r2
 800c842:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c846:	6923      	ldr	r3, [r4, #16]
 800c848:	6849      	ldr	r1, [r1, #4]
 800c84a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c84e:	68a3      	ldr	r3, [r4, #8]
 800c850:	f108 0601 	add.w	r6, r8, #1
 800c854:	42b3      	cmp	r3, r6
 800c856:	db0b      	blt.n	800c870 <__lshift+0x38>
 800c858:	4638      	mov	r0, r7
 800c85a:	f7ff fd93 	bl	800c384 <_Balloc>
 800c85e:	4605      	mov	r5, r0
 800c860:	b948      	cbnz	r0, 800c876 <__lshift+0x3e>
 800c862:	4602      	mov	r2, r0
 800c864:	4b28      	ldr	r3, [pc, #160]	@ (800c908 <__lshift+0xd0>)
 800c866:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c86a:	4828      	ldr	r0, [pc, #160]	@ (800c90c <__lshift+0xd4>)
 800c86c:	f001 fcd8 	bl	800e220 <__assert_func>
 800c870:	3101      	adds	r1, #1
 800c872:	005b      	lsls	r3, r3, #1
 800c874:	e7ee      	b.n	800c854 <__lshift+0x1c>
 800c876:	2300      	movs	r3, #0
 800c878:	f100 0114 	add.w	r1, r0, #20
 800c87c:	f100 0210 	add.w	r2, r0, #16
 800c880:	4618      	mov	r0, r3
 800c882:	4553      	cmp	r3, sl
 800c884:	db33      	blt.n	800c8ee <__lshift+0xb6>
 800c886:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c88a:	f104 0314 	add.w	r3, r4, #20
 800c88e:	6920      	ldr	r0, [r4, #16]
 800c890:	f019 091f 	ands.w	r9, r9, #31
 800c894:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c898:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c89c:	d02b      	beq.n	800c8f6 <__lshift+0xbe>
 800c89e:	f1c9 0e20 	rsb	lr, r9, #32
 800c8a2:	468a      	mov	sl, r1
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	6818      	ldr	r0, [r3, #0]
 800c8a8:	fa00 f009 	lsl.w	r0, r0, r9
 800c8ac:	4310      	orrs	r0, r2
 800c8ae:	f84a 0b04 	str.w	r0, [sl], #4
 800c8b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8b6:	459c      	cmp	ip, r3
 800c8b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c8bc:	d8f3      	bhi.n	800c8a6 <__lshift+0x6e>
 800c8be:	ebac 0304 	sub.w	r3, ip, r4
 800c8c2:	f104 0015 	add.w	r0, r4, #21
 800c8c6:	3b15      	subs	r3, #21
 800c8c8:	f023 0303 	bic.w	r3, r3, #3
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	4584      	cmp	ip, r0
 800c8d0:	bf38      	it	cc
 800c8d2:	2304      	movcc	r3, #4
 800c8d4:	50ca      	str	r2, [r1, r3]
 800c8d6:	b10a      	cbz	r2, 800c8dc <__lshift+0xa4>
 800c8d8:	f108 0602 	add.w	r6, r8, #2
 800c8dc:	3e01      	subs	r6, #1
 800c8de:	4638      	mov	r0, r7
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	612e      	str	r6, [r5, #16]
 800c8e4:	f7ff fd8e 	bl	800c404 <_Bfree>
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8f4:	e7c5      	b.n	800c882 <__lshift+0x4a>
 800c8f6:	3904      	subs	r1, #4
 800c8f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8fc:	459c      	cmp	ip, r3
 800c8fe:	f841 2f04 	str.w	r2, [r1, #4]!
 800c902:	d8f9      	bhi.n	800c8f8 <__lshift+0xc0>
 800c904:	e7ea      	b.n	800c8dc <__lshift+0xa4>
 800c906:	bf00      	nop
 800c908:	0800ee89 	.word	0x0800ee89
 800c90c:	0800ee9a 	.word	0x0800ee9a

0800c910 <__mcmp>:
 800c910:	4603      	mov	r3, r0
 800c912:	690a      	ldr	r2, [r1, #16]
 800c914:	6900      	ldr	r0, [r0, #16]
 800c916:	1a80      	subs	r0, r0, r2
 800c918:	b530      	push	{r4, r5, lr}
 800c91a:	d10e      	bne.n	800c93a <__mcmp+0x2a>
 800c91c:	3314      	adds	r3, #20
 800c91e:	3114      	adds	r1, #20
 800c920:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c924:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c928:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c92c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c930:	4295      	cmp	r5, r2
 800c932:	d003      	beq.n	800c93c <__mcmp+0x2c>
 800c934:	d205      	bcs.n	800c942 <__mcmp+0x32>
 800c936:	f04f 30ff 	mov.w	r0, #4294967295
 800c93a:	bd30      	pop	{r4, r5, pc}
 800c93c:	42a3      	cmp	r3, r4
 800c93e:	d3f3      	bcc.n	800c928 <__mcmp+0x18>
 800c940:	e7fb      	b.n	800c93a <__mcmp+0x2a>
 800c942:	2001      	movs	r0, #1
 800c944:	e7f9      	b.n	800c93a <__mcmp+0x2a>
	...

0800c948 <__mdiff>:
 800c948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94c:	4689      	mov	r9, r1
 800c94e:	4606      	mov	r6, r0
 800c950:	4611      	mov	r1, r2
 800c952:	4614      	mov	r4, r2
 800c954:	4648      	mov	r0, r9
 800c956:	f7ff ffdb 	bl	800c910 <__mcmp>
 800c95a:	1e05      	subs	r5, r0, #0
 800c95c:	d112      	bne.n	800c984 <__mdiff+0x3c>
 800c95e:	4629      	mov	r1, r5
 800c960:	4630      	mov	r0, r6
 800c962:	f7ff fd0f 	bl	800c384 <_Balloc>
 800c966:	4602      	mov	r2, r0
 800c968:	b928      	cbnz	r0, 800c976 <__mdiff+0x2e>
 800c96a:	4b41      	ldr	r3, [pc, #260]	@ (800ca70 <__mdiff+0x128>)
 800c96c:	f240 2137 	movw	r1, #567	@ 0x237
 800c970:	4840      	ldr	r0, [pc, #256]	@ (800ca74 <__mdiff+0x12c>)
 800c972:	f001 fc55 	bl	800e220 <__assert_func>
 800c976:	2301      	movs	r3, #1
 800c978:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c97c:	4610      	mov	r0, r2
 800c97e:	b003      	add	sp, #12
 800c980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c984:	bfbc      	itt	lt
 800c986:	464b      	movlt	r3, r9
 800c988:	46a1      	movlt	r9, r4
 800c98a:	4630      	mov	r0, r6
 800c98c:	bfb8      	it	lt
 800c98e:	2501      	movlt	r5, #1
 800c990:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c994:	bfb4      	ite	lt
 800c996:	461c      	movlt	r4, r3
 800c998:	2500      	movge	r5, #0
 800c99a:	f7ff fcf3 	bl	800c384 <_Balloc>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	b918      	cbnz	r0, 800c9aa <__mdiff+0x62>
 800c9a2:	4b33      	ldr	r3, [pc, #204]	@ (800ca70 <__mdiff+0x128>)
 800c9a4:	f240 2145 	movw	r1, #581	@ 0x245
 800c9a8:	e7e2      	b.n	800c970 <__mdiff+0x28>
 800c9aa:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c9ae:	f104 0e14 	add.w	lr, r4, #20
 800c9b2:	6926      	ldr	r6, [r4, #16]
 800c9b4:	f100 0b14 	add.w	fp, r0, #20
 800c9b8:	60c5      	str	r5, [r0, #12]
 800c9ba:	f109 0514 	add.w	r5, r9, #20
 800c9be:	f109 0310 	add.w	r3, r9, #16
 800c9c2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c9c6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c9ca:	46d9      	mov	r9, fp
 800c9cc:	f04f 0c00 	mov.w	ip, #0
 800c9d0:	9301      	str	r3, [sp, #4]
 800c9d2:	9b01      	ldr	r3, [sp, #4]
 800c9d4:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c9d8:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c9dc:	4576      	cmp	r6, lr
 800c9de:	9301      	str	r3, [sp, #4]
 800c9e0:	fa1f f38a 	uxth.w	r3, sl
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	b283      	uxth	r3, r0
 800c9e8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800c9ec:	eba1 0303 	sub.w	r3, r1, r3
 800c9f0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c9f4:	4463      	add	r3, ip
 800c9f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ca04:	f849 3b04 	str.w	r3, [r9], #4
 800ca08:	d8e3      	bhi.n	800c9d2 <__mdiff+0x8a>
 800ca0a:	1b33      	subs	r3, r6, r4
 800ca0c:	3415      	adds	r4, #21
 800ca0e:	3b15      	subs	r3, #21
 800ca10:	f023 0303 	bic.w	r3, r3, #3
 800ca14:	3304      	adds	r3, #4
 800ca16:	42a6      	cmp	r6, r4
 800ca18:	bf38      	it	cc
 800ca1a:	2304      	movcc	r3, #4
 800ca1c:	441d      	add	r5, r3
 800ca1e:	445b      	add	r3, fp
 800ca20:	462c      	mov	r4, r5
 800ca22:	461e      	mov	r6, r3
 800ca24:	4544      	cmp	r4, r8
 800ca26:	d30e      	bcc.n	800ca46 <__mdiff+0xfe>
 800ca28:	f108 0103 	add.w	r1, r8, #3
 800ca2c:	1b49      	subs	r1, r1, r5
 800ca2e:	3d03      	subs	r5, #3
 800ca30:	f021 0103 	bic.w	r1, r1, #3
 800ca34:	45a8      	cmp	r8, r5
 800ca36:	bf38      	it	cc
 800ca38:	2100      	movcc	r1, #0
 800ca3a:	440b      	add	r3, r1
 800ca3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca40:	b199      	cbz	r1, 800ca6a <__mdiff+0x122>
 800ca42:	6117      	str	r7, [r2, #16]
 800ca44:	e79a      	b.n	800c97c <__mdiff+0x34>
 800ca46:	f854 1b04 	ldr.w	r1, [r4], #4
 800ca4a:	46e6      	mov	lr, ip
 800ca4c:	fa1f fc81 	uxth.w	ip, r1
 800ca50:	0c08      	lsrs	r0, r1, #16
 800ca52:	4471      	add	r1, lr
 800ca54:	44f4      	add	ip, lr
 800ca56:	b289      	uxth	r1, r1
 800ca58:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ca5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ca60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca64:	f846 1b04 	str.w	r1, [r6], #4
 800ca68:	e7dc      	b.n	800ca24 <__mdiff+0xdc>
 800ca6a:	3f01      	subs	r7, #1
 800ca6c:	e7e6      	b.n	800ca3c <__mdiff+0xf4>
 800ca6e:	bf00      	nop
 800ca70:	0800ee89 	.word	0x0800ee89
 800ca74:	0800ee9a 	.word	0x0800ee9a

0800ca78 <__ulp>:
 800ca78:	b082      	sub	sp, #8
 800ca7a:	4b11      	ldr	r3, [pc, #68]	@ (800cac0 <__ulp+0x48>)
 800ca7c:	ed8d 0b00 	vstr	d0, [sp]
 800ca80:	9a01      	ldr	r2, [sp, #4]
 800ca82:	4013      	ands	r3, r2
 800ca84:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	dc08      	bgt.n	800ca9e <__ulp+0x26>
 800ca8c:	425b      	negs	r3, r3
 800ca8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ca92:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ca96:	da04      	bge.n	800caa2 <__ulp+0x2a>
 800ca98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ca9c:	4113      	asrs	r3, r2
 800ca9e:	2200      	movs	r2, #0
 800caa0:	e008      	b.n	800cab4 <__ulp+0x3c>
 800caa2:	f1a2 0314 	sub.w	r3, r2, #20
 800caa6:	2b1e      	cmp	r3, #30
 800caa8:	bfd6      	itet	le
 800caaa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800caae:	2201      	movgt	r2, #1
 800cab0:	40da      	lsrle	r2, r3
 800cab2:	2300      	movs	r3, #0
 800cab4:	4619      	mov	r1, r3
 800cab6:	4610      	mov	r0, r2
 800cab8:	ec41 0b10 	vmov	d0, r0, r1
 800cabc:	b002      	add	sp, #8
 800cabe:	4770      	bx	lr
 800cac0:	7ff00000 	.word	0x7ff00000

0800cac4 <__b2d>:
 800cac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac8:	6906      	ldr	r6, [r0, #16]
 800caca:	f100 0814 	add.w	r8, r0, #20
 800cace:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cad2:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cad6:	1f37      	subs	r7, r6, #4
 800cad8:	4610      	mov	r0, r2
 800cada:	f7ff fd47 	bl	800c56c <__hi0bits>
 800cade:	f1c0 0320 	rsb	r3, r0, #32
 800cae2:	280a      	cmp	r0, #10
 800cae4:	600b      	str	r3, [r1, #0]
 800cae6:	491d      	ldr	r1, [pc, #116]	@ (800cb5c <__b2d+0x98>)
 800cae8:	dc16      	bgt.n	800cb18 <__b2d+0x54>
 800caea:	f1c0 0c0b 	rsb	ip, r0, #11
 800caee:	45b8      	cmp	r8, r7
 800caf0:	f100 0015 	add.w	r0, r0, #21
 800caf4:	fa22 f30c 	lsr.w	r3, r2, ip
 800caf8:	fa02 f000 	lsl.w	r0, r2, r0
 800cafc:	ea43 0501 	orr.w	r5, r3, r1
 800cb00:	bf34      	ite	cc
 800cb02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb06:	2300      	movcs	r3, #0
 800cb08:	fa23 f30c 	lsr.w	r3, r3, ip
 800cb0c:	4303      	orrs	r3, r0
 800cb0e:	461c      	mov	r4, r3
 800cb10:	ec45 4b10 	vmov	d0, r4, r5
 800cb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb18:	45b8      	cmp	r8, r7
 800cb1a:	bf3a      	itte	cc
 800cb1c:	f1a6 0708 	subcc.w	r7, r6, #8
 800cb20:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb24:	2300      	movcs	r3, #0
 800cb26:	380b      	subs	r0, #11
 800cb28:	d014      	beq.n	800cb54 <__b2d+0x90>
 800cb2a:	f1c0 0120 	rsb	r1, r0, #32
 800cb2e:	4082      	lsls	r2, r0
 800cb30:	4547      	cmp	r7, r8
 800cb32:	fa23 f401 	lsr.w	r4, r3, r1
 800cb36:	fa03 f300 	lsl.w	r3, r3, r0
 800cb3a:	ea42 0204 	orr.w	r2, r2, r4
 800cb3e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cb42:	bf8c      	ite	hi
 800cb44:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cb48:	2200      	movls	r2, #0
 800cb4a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cb4e:	40ca      	lsrs	r2, r1
 800cb50:	4313      	orrs	r3, r2
 800cb52:	e7dc      	b.n	800cb0e <__b2d+0x4a>
 800cb54:	ea42 0501 	orr.w	r5, r2, r1
 800cb58:	e7d9      	b.n	800cb0e <__b2d+0x4a>
 800cb5a:	bf00      	nop
 800cb5c:	3ff00000 	.word	0x3ff00000

0800cb60 <__d2b>:
 800cb60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb64:	460f      	mov	r7, r1
 800cb66:	2101      	movs	r1, #1
 800cb68:	4616      	mov	r6, r2
 800cb6a:	ec59 8b10 	vmov	r8, r9, d0
 800cb6e:	f7ff fc09 	bl	800c384 <_Balloc>
 800cb72:	4604      	mov	r4, r0
 800cb74:	b930      	cbnz	r0, 800cb84 <__d2b+0x24>
 800cb76:	4602      	mov	r2, r0
 800cb78:	4b23      	ldr	r3, [pc, #140]	@ (800cc08 <__d2b+0xa8>)
 800cb7a:	f240 310f 	movw	r1, #783	@ 0x30f
 800cb7e:	4823      	ldr	r0, [pc, #140]	@ (800cc0c <__d2b+0xac>)
 800cb80:	f001 fb4e 	bl	800e220 <__assert_func>
 800cb84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb8c:	b10d      	cbz	r5, 800cb92 <__d2b+0x32>
 800cb8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb92:	9301      	str	r3, [sp, #4]
 800cb94:	f1b8 0300 	subs.w	r3, r8, #0
 800cb98:	d023      	beq.n	800cbe2 <__d2b+0x82>
 800cb9a:	4668      	mov	r0, sp
 800cb9c:	9300      	str	r3, [sp, #0]
 800cb9e:	f7ff fd04 	bl	800c5aa <__lo0bits>
 800cba2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cba6:	b1d0      	cbz	r0, 800cbde <__d2b+0x7e>
 800cba8:	f1c0 0320 	rsb	r3, r0, #32
 800cbac:	fa02 f303 	lsl.w	r3, r2, r3
 800cbb0:	40c2      	lsrs	r2, r0
 800cbb2:	430b      	orrs	r3, r1
 800cbb4:	9201      	str	r2, [sp, #4]
 800cbb6:	6163      	str	r3, [r4, #20]
 800cbb8:	9b01      	ldr	r3, [sp, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	61a3      	str	r3, [r4, #24]
 800cbbe:	bf0c      	ite	eq
 800cbc0:	2201      	moveq	r2, #1
 800cbc2:	2202      	movne	r2, #2
 800cbc4:	6122      	str	r2, [r4, #16]
 800cbc6:	b1a5      	cbz	r5, 800cbf2 <__d2b+0x92>
 800cbc8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cbcc:	4405      	add	r5, r0
 800cbce:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cbd2:	603d      	str	r5, [r7, #0]
 800cbd4:	6030      	str	r0, [r6, #0]
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	b003      	add	sp, #12
 800cbda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbde:	6161      	str	r1, [r4, #20]
 800cbe0:	e7ea      	b.n	800cbb8 <__d2b+0x58>
 800cbe2:	a801      	add	r0, sp, #4
 800cbe4:	f7ff fce1 	bl	800c5aa <__lo0bits>
 800cbe8:	9b01      	ldr	r3, [sp, #4]
 800cbea:	3020      	adds	r0, #32
 800cbec:	2201      	movs	r2, #1
 800cbee:	6163      	str	r3, [r4, #20]
 800cbf0:	e7e8      	b.n	800cbc4 <__d2b+0x64>
 800cbf2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cbf6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cbfa:	6038      	str	r0, [r7, #0]
 800cbfc:	6918      	ldr	r0, [r3, #16]
 800cbfe:	f7ff fcb5 	bl	800c56c <__hi0bits>
 800cc02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc06:	e7e5      	b.n	800cbd4 <__d2b+0x74>
 800cc08:	0800ee89 	.word	0x0800ee89
 800cc0c:	0800ee9a 	.word	0x0800ee9a

0800cc10 <__ratio>:
 800cc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc14:	b085      	sub	sp, #20
 800cc16:	e9cd 1000 	strd	r1, r0, [sp]
 800cc1a:	a902      	add	r1, sp, #8
 800cc1c:	f7ff ff52 	bl	800cac4 <__b2d>
 800cc20:	a903      	add	r1, sp, #12
 800cc22:	9800      	ldr	r0, [sp, #0]
 800cc24:	ec55 4b10 	vmov	r4, r5, d0
 800cc28:	f7ff ff4c 	bl	800cac4 <__b2d>
 800cc2c:	9b01      	ldr	r3, [sp, #4]
 800cc2e:	462f      	mov	r7, r5
 800cc30:	4620      	mov	r0, r4
 800cc32:	6919      	ldr	r1, [r3, #16]
 800cc34:	9b00      	ldr	r3, [sp, #0]
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	1ac9      	subs	r1, r1, r3
 800cc3a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cc3e:	ec5b ab10 	vmov	sl, fp, d0
 800cc42:	1a9b      	subs	r3, r3, r2
 800cc44:	46d9      	mov	r9, fp
 800cc46:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	bfcd      	iteet	gt
 800cc4e:	462a      	movgt	r2, r5
 800cc50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cc54:	465a      	movle	r2, fp
 800cc56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cc5a:	bfd8      	it	le
 800cc5c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cc60:	4652      	mov	r2, sl
 800cc62:	4639      	mov	r1, r7
 800cc64:	464b      	mov	r3, r9
 800cc66:	f7f3 fe01 	bl	800086c <__aeabi_ddiv>
 800cc6a:	ec41 0b10 	vmov	d0, r0, r1
 800cc6e:	b005      	add	sp, #20
 800cc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc74 <__copybits>:
 800cc74:	3901      	subs	r1, #1
 800cc76:	f102 0314 	add.w	r3, r2, #20
 800cc7a:	1149      	asrs	r1, r1, #5
 800cc7c:	b570      	push	{r4, r5, r6, lr}
 800cc7e:	3101      	adds	r1, #1
 800cc80:	6914      	ldr	r4, [r2, #16]
 800cc82:	1f05      	subs	r5, r0, #4
 800cc84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc8c:	42a3      	cmp	r3, r4
 800cc8e:	d30c      	bcc.n	800ccaa <__copybits+0x36>
 800cc90:	1aa3      	subs	r3, r4, r2
 800cc92:	3211      	adds	r2, #17
 800cc94:	3b11      	subs	r3, #17
 800cc96:	f023 0303 	bic.w	r3, r3, #3
 800cc9a:	42a2      	cmp	r2, r4
 800cc9c:	bf88      	it	hi
 800cc9e:	2300      	movhi	r3, #0
 800cca0:	4418      	add	r0, r3
 800cca2:	2300      	movs	r3, #0
 800cca4:	4288      	cmp	r0, r1
 800cca6:	d305      	bcc.n	800ccb4 <__copybits+0x40>
 800cca8:	bd70      	pop	{r4, r5, r6, pc}
 800ccaa:	f853 6b04 	ldr.w	r6, [r3], #4
 800ccae:	f845 6f04 	str.w	r6, [r5, #4]!
 800ccb2:	e7eb      	b.n	800cc8c <__copybits+0x18>
 800ccb4:	f840 3b04 	str.w	r3, [r0], #4
 800ccb8:	e7f4      	b.n	800cca4 <__copybits+0x30>

0800ccba <__any_on>:
 800ccba:	f100 0214 	add.w	r2, r0, #20
 800ccbe:	114b      	asrs	r3, r1, #5
 800ccc0:	6900      	ldr	r0, [r0, #16]
 800ccc2:	4298      	cmp	r0, r3
 800ccc4:	b510      	push	{r4, lr}
 800ccc6:	db11      	blt.n	800ccec <__any_on+0x32>
 800ccc8:	dd0a      	ble.n	800cce0 <__any_on+0x26>
 800ccca:	f011 011f 	ands.w	r1, r1, #31
 800ccce:	d007      	beq.n	800cce0 <__any_on+0x26>
 800ccd0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ccd4:	fa24 f001 	lsr.w	r0, r4, r1
 800ccd8:	fa00 f101 	lsl.w	r1, r0, r1
 800ccdc:	428c      	cmp	r4, r1
 800ccde:	d10b      	bne.n	800ccf8 <__any_on+0x3e>
 800cce0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d803      	bhi.n	800ccf0 <__any_on+0x36>
 800cce8:	2000      	movs	r0, #0
 800ccea:	bd10      	pop	{r4, pc}
 800ccec:	4603      	mov	r3, r0
 800ccee:	e7f7      	b.n	800cce0 <__any_on+0x26>
 800ccf0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ccf4:	2900      	cmp	r1, #0
 800ccf6:	d0f5      	beq.n	800cce4 <__any_on+0x2a>
 800ccf8:	2001      	movs	r0, #1
 800ccfa:	e7f6      	b.n	800ccea <__any_on+0x30>

0800ccfc <sulp>:
 800ccfc:	b570      	push	{r4, r5, r6, lr}
 800ccfe:	4604      	mov	r4, r0
 800cd00:	460d      	mov	r5, r1
 800cd02:	4616      	mov	r6, r2
 800cd04:	ec45 4b10 	vmov	d0, r4, r5
 800cd08:	f7ff feb6 	bl	800ca78 <__ulp>
 800cd0c:	ec51 0b10 	vmov	r0, r1, d0
 800cd10:	b17e      	cbz	r6, 800cd32 <sulp+0x36>
 800cd12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cd16:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	dd09      	ble.n	800cd32 <sulp+0x36>
 800cd1e:	051b      	lsls	r3, r3, #20
 800cd20:	2400      	movs	r4, #0
 800cd22:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cd26:	4622      	mov	r2, r4
 800cd28:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cd2c:	462b      	mov	r3, r5
 800cd2e:	f7f3 fc73 	bl	8000618 <__aeabi_dmul>
 800cd32:	ec41 0b10 	vmov	d0, r0, r1
 800cd36:	bd70      	pop	{r4, r5, r6, pc}

0800cd38 <_strtod_l>:
 800cd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3c:	b09f      	sub	sp, #124	@ 0x7c
 800cd3e:	460c      	mov	r4, r1
 800cd40:	f04f 0a00 	mov.w	sl, #0
 800cd44:	f04f 0b00 	mov.w	fp, #0
 800cd48:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	9005      	str	r0, [sp, #20]
 800cd4e:	921a      	str	r2, [sp, #104]	@ 0x68
 800cd50:	460a      	mov	r2, r1
 800cd52:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd54:	7811      	ldrb	r1, [r2, #0]
 800cd56:	292b      	cmp	r1, #43	@ 0x2b
 800cd58:	d04a      	beq.n	800cdf0 <_strtod_l+0xb8>
 800cd5a:	d838      	bhi.n	800cdce <_strtod_l+0x96>
 800cd5c:	290d      	cmp	r1, #13
 800cd5e:	d832      	bhi.n	800cdc6 <_strtod_l+0x8e>
 800cd60:	2908      	cmp	r1, #8
 800cd62:	d832      	bhi.n	800cdca <_strtod_l+0x92>
 800cd64:	2900      	cmp	r1, #0
 800cd66:	d03b      	beq.n	800cde0 <_strtod_l+0xa8>
 800cd68:	2200      	movs	r2, #0
 800cd6a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cd6c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cd6e:	782a      	ldrb	r2, [r5, #0]
 800cd70:	2a30      	cmp	r2, #48	@ 0x30
 800cd72:	f040 80b3 	bne.w	800cedc <_strtod_l+0x1a4>
 800cd76:	786a      	ldrb	r2, [r5, #1]
 800cd78:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cd7c:	2a58      	cmp	r2, #88	@ 0x58
 800cd7e:	d16e      	bne.n	800ce5e <_strtod_l+0x126>
 800cd80:	9302      	str	r3, [sp, #8]
 800cd82:	a919      	add	r1, sp, #100	@ 0x64
 800cd84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd86:	4a90      	ldr	r2, [pc, #576]	@ (800cfc8 <_strtod_l+0x290>)
 800cd88:	9301      	str	r3, [sp, #4]
 800cd8a:	ab1a      	add	r3, sp, #104	@ 0x68
 800cd8c:	9805      	ldr	r0, [sp, #20]
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cd92:	f001 fadd 	bl	800e350 <__gethex>
 800cd96:	f010 060f 	ands.w	r6, r0, #15
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	d005      	beq.n	800cdaa <_strtod_l+0x72>
 800cd9e:	2e06      	cmp	r6, #6
 800cda0:	d128      	bne.n	800cdf4 <_strtod_l+0xbc>
 800cda2:	3501      	adds	r5, #1
 800cda4:	2300      	movs	r3, #0
 800cda6:	9519      	str	r5, [sp, #100]	@ 0x64
 800cda8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f040 858e 	bne.w	800d8ce <_strtod_l+0xb96>
 800cdb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cdb4:	b1cb      	cbz	r3, 800cdea <_strtod_l+0xb2>
 800cdb6:	4652      	mov	r2, sl
 800cdb8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cdbc:	ec43 2b10 	vmov	d0, r2, r3
 800cdc0:	b01f      	add	sp, #124	@ 0x7c
 800cdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc6:	2920      	cmp	r1, #32
 800cdc8:	d1ce      	bne.n	800cd68 <_strtod_l+0x30>
 800cdca:	3201      	adds	r2, #1
 800cdcc:	e7c1      	b.n	800cd52 <_strtod_l+0x1a>
 800cdce:	292d      	cmp	r1, #45	@ 0x2d
 800cdd0:	d1ca      	bne.n	800cd68 <_strtod_l+0x30>
 800cdd2:	2101      	movs	r1, #1
 800cdd4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cdd6:	1c51      	adds	r1, r2, #1
 800cdd8:	9119      	str	r1, [sp, #100]	@ 0x64
 800cdda:	7852      	ldrb	r2, [r2, #1]
 800cddc:	2a00      	cmp	r2, #0
 800cdde:	d1c5      	bne.n	800cd6c <_strtod_l+0x34>
 800cde0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cde2:	9419      	str	r4, [sp, #100]	@ 0x64
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f040 8570 	bne.w	800d8ca <_strtod_l+0xb92>
 800cdea:	4652      	mov	r2, sl
 800cdec:	465b      	mov	r3, fp
 800cdee:	e7e5      	b.n	800cdbc <_strtod_l+0x84>
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	e7ef      	b.n	800cdd4 <_strtod_l+0x9c>
 800cdf4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cdf6:	b13a      	cbz	r2, 800ce08 <_strtod_l+0xd0>
 800cdf8:	2135      	movs	r1, #53	@ 0x35
 800cdfa:	a81c      	add	r0, sp, #112	@ 0x70
 800cdfc:	f7ff ff3a 	bl	800cc74 <__copybits>
 800ce00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce02:	9805      	ldr	r0, [sp, #20]
 800ce04:	f7ff fafe 	bl	800c404 <_Bfree>
 800ce08:	3e01      	subs	r6, #1
 800ce0a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ce0c:	2e04      	cmp	r6, #4
 800ce0e:	d806      	bhi.n	800ce1e <_strtod_l+0xe6>
 800ce10:	e8df f006 	tbb	[pc, r6]
 800ce14:	201d0314 	.word	0x201d0314
 800ce18:	14          	.byte	0x14
 800ce19:	00          	.byte	0x00
 800ce1a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ce1e:	05e1      	lsls	r1, r4, #23
 800ce20:	bf48      	it	mi
 800ce22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ce26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce2a:	0d1b      	lsrs	r3, r3, #20
 800ce2c:	051b      	lsls	r3, r3, #20
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d1bb      	bne.n	800cdaa <_strtod_l+0x72>
 800ce32:	f7fe fbc9 	bl	800b5c8 <__errno>
 800ce36:	2322      	movs	r3, #34	@ 0x22
 800ce38:	6003      	str	r3, [r0, #0]
 800ce3a:	e7b6      	b.n	800cdaa <_strtod_l+0x72>
 800ce3c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ce40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ce44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ce48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ce4c:	e7e7      	b.n	800ce1e <_strtod_l+0xe6>
 800ce4e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800cfd0 <_strtod_l+0x298>
 800ce52:	e7e4      	b.n	800ce1e <_strtod_l+0xe6>
 800ce54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ce58:	f04f 3aff 	mov.w	sl, #4294967295
 800ce5c:	e7df      	b.n	800ce1e <_strtod_l+0xe6>
 800ce5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce60:	1c5a      	adds	r2, r3, #1
 800ce62:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce64:	785b      	ldrb	r3, [r3, #1]
 800ce66:	2b30      	cmp	r3, #48	@ 0x30
 800ce68:	d0f9      	beq.n	800ce5e <_strtod_l+0x126>
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d09d      	beq.n	800cdaa <_strtod_l+0x72>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce72:	220a      	movs	r2, #10
 800ce74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce76:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce78:	2300      	movs	r3, #0
 800ce7a:	461f      	mov	r7, r3
 800ce7c:	9308      	str	r3, [sp, #32]
 800ce7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce80:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ce82:	7805      	ldrb	r5, [r0, #0]
 800ce84:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ce88:	b2d9      	uxtb	r1, r3
 800ce8a:	2909      	cmp	r1, #9
 800ce8c:	d928      	bls.n	800cee0 <_strtod_l+0x1a8>
 800ce8e:	2201      	movs	r2, #1
 800ce90:	494e      	ldr	r1, [pc, #312]	@ (800cfcc <_strtod_l+0x294>)
 800ce92:	f001 f978 	bl	800e186 <strncmp>
 800ce96:	2800      	cmp	r0, #0
 800ce98:	d033      	beq.n	800cf02 <_strtod_l+0x1ca>
 800ce9a:	2000      	movs	r0, #0
 800ce9c:	462a      	mov	r2, r5
 800ce9e:	463d      	mov	r5, r7
 800cea0:	4681      	mov	r9, r0
 800cea2:	4603      	mov	r3, r0
 800cea4:	2a65      	cmp	r2, #101	@ 0x65
 800cea6:	d001      	beq.n	800ceac <_strtod_l+0x174>
 800cea8:	2a45      	cmp	r2, #69	@ 0x45
 800ceaa:	d114      	bne.n	800ced6 <_strtod_l+0x19e>
 800ceac:	b91d      	cbnz	r5, 800ceb6 <_strtod_l+0x17e>
 800ceae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ceb0:	4302      	orrs	r2, r0
 800ceb2:	d095      	beq.n	800cde0 <_strtod_l+0xa8>
 800ceb4:	2500      	movs	r5, #0
 800ceb6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ceb8:	1c62      	adds	r2, r4, #1
 800ceba:	9219      	str	r2, [sp, #100]	@ 0x64
 800cebc:	7862      	ldrb	r2, [r4, #1]
 800cebe:	2a2b      	cmp	r2, #43	@ 0x2b
 800cec0:	d078      	beq.n	800cfb4 <_strtod_l+0x27c>
 800cec2:	2a2d      	cmp	r2, #45	@ 0x2d
 800cec4:	d07c      	beq.n	800cfc0 <_strtod_l+0x288>
 800cec6:	f04f 0c00 	mov.w	ip, #0
 800ceca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cece:	2909      	cmp	r1, #9
 800ced0:	f240 8084 	bls.w	800cfdc <_strtod_l+0x2a4>
 800ced4:	9419      	str	r4, [sp, #100]	@ 0x64
 800ced6:	f04f 0800 	mov.w	r8, #0
 800ceda:	e0a4      	b.n	800d026 <_strtod_l+0x2ee>
 800cedc:	2300      	movs	r3, #0
 800cede:	e7c7      	b.n	800ce70 <_strtod_l+0x138>
 800cee0:	2f08      	cmp	r7, #8
 800cee2:	f100 0001 	add.w	r0, r0, #1
 800cee6:	f107 0701 	add.w	r7, r7, #1
 800ceea:	bfd5      	itete	le
 800ceec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ceee:	9908      	ldrgt	r1, [sp, #32]
 800cef0:	fb02 3301 	mlale	r3, r2, r1, r3
 800cef4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cef8:	bfd4      	ite	le
 800cefa:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cefc:	9308      	strgt	r3, [sp, #32]
 800cefe:	9019      	str	r0, [sp, #100]	@ 0x64
 800cf00:	e7be      	b.n	800ce80 <_strtod_l+0x148>
 800cf02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf04:	1c5a      	adds	r2, r3, #1
 800cf06:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf08:	785a      	ldrb	r2, [r3, #1]
 800cf0a:	b37f      	cbz	r7, 800cf6c <_strtod_l+0x234>
 800cf0c:	4681      	mov	r9, r0
 800cf0e:	463d      	mov	r5, r7
 800cf10:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cf14:	2b09      	cmp	r3, #9
 800cf16:	d912      	bls.n	800cf3e <_strtod_l+0x206>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	e7c3      	b.n	800cea4 <_strtod_l+0x16c>
 800cf1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf1e:	3001      	adds	r0, #1
 800cf20:	1c5a      	adds	r2, r3, #1
 800cf22:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf24:	785a      	ldrb	r2, [r3, #1]
 800cf26:	2a30      	cmp	r2, #48	@ 0x30
 800cf28:	d0f8      	beq.n	800cf1c <_strtod_l+0x1e4>
 800cf2a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cf2e:	2b08      	cmp	r3, #8
 800cf30:	f200 84d2 	bhi.w	800d8d8 <_strtod_l+0xba0>
 800cf34:	4681      	mov	r9, r0
 800cf36:	2000      	movs	r0, #0
 800cf38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf3a:	4605      	mov	r5, r0
 800cf3c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cf3e:	3a30      	subs	r2, #48	@ 0x30
 800cf40:	f100 0301 	add.w	r3, r0, #1
 800cf44:	d02a      	beq.n	800cf9c <_strtod_l+0x264>
 800cf46:	4499      	add	r9, r3
 800cf48:	eb00 0c05 	add.w	ip, r0, r5
 800cf4c:	462b      	mov	r3, r5
 800cf4e:	210a      	movs	r1, #10
 800cf50:	4563      	cmp	r3, ip
 800cf52:	d10d      	bne.n	800cf70 <_strtod_l+0x238>
 800cf54:	1c69      	adds	r1, r5, #1
 800cf56:	4401      	add	r1, r0
 800cf58:	4428      	add	r0, r5
 800cf5a:	2808      	cmp	r0, #8
 800cf5c:	dc16      	bgt.n	800cf8c <_strtod_l+0x254>
 800cf5e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cf60:	230a      	movs	r3, #10
 800cf62:	fb03 2300 	mla	r3, r3, r0, r2
 800cf66:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf68:	2300      	movs	r3, #0
 800cf6a:	e018      	b.n	800cf9e <_strtod_l+0x266>
 800cf6c:	4638      	mov	r0, r7
 800cf6e:	e7da      	b.n	800cf26 <_strtod_l+0x1ee>
 800cf70:	2b08      	cmp	r3, #8
 800cf72:	f103 0301 	add.w	r3, r3, #1
 800cf76:	dc03      	bgt.n	800cf80 <_strtod_l+0x248>
 800cf78:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cf7a:	434e      	muls	r6, r1
 800cf7c:	960a      	str	r6, [sp, #40]	@ 0x28
 800cf7e:	e7e7      	b.n	800cf50 <_strtod_l+0x218>
 800cf80:	2b10      	cmp	r3, #16
 800cf82:	bfde      	ittt	le
 800cf84:	9e08      	ldrle	r6, [sp, #32]
 800cf86:	434e      	mulle	r6, r1
 800cf88:	9608      	strle	r6, [sp, #32]
 800cf8a:	e7e1      	b.n	800cf50 <_strtod_l+0x218>
 800cf8c:	280f      	cmp	r0, #15
 800cf8e:	dceb      	bgt.n	800cf68 <_strtod_l+0x230>
 800cf90:	9808      	ldr	r0, [sp, #32]
 800cf92:	230a      	movs	r3, #10
 800cf94:	fb03 2300 	mla	r3, r3, r0, r2
 800cf98:	9308      	str	r3, [sp, #32]
 800cf9a:	e7e5      	b.n	800cf68 <_strtod_l+0x230>
 800cf9c:	4629      	mov	r1, r5
 800cf9e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cfa0:	460d      	mov	r5, r1
 800cfa2:	1c50      	adds	r0, r2, #1
 800cfa4:	9019      	str	r0, [sp, #100]	@ 0x64
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	7852      	ldrb	r2, [r2, #1]
 800cfaa:	e7b1      	b.n	800cf10 <_strtod_l+0x1d8>
 800cfac:	f04f 0900 	mov.w	r9, #0
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	e77c      	b.n	800ceae <_strtod_l+0x176>
 800cfb4:	f04f 0c00 	mov.w	ip, #0
 800cfb8:	1ca2      	adds	r2, r4, #2
 800cfba:	9219      	str	r2, [sp, #100]	@ 0x64
 800cfbc:	78a2      	ldrb	r2, [r4, #2]
 800cfbe:	e784      	b.n	800ceca <_strtod_l+0x192>
 800cfc0:	f04f 0c01 	mov.w	ip, #1
 800cfc4:	e7f8      	b.n	800cfb8 <_strtod_l+0x280>
 800cfc6:	bf00      	nop
 800cfc8:	0800f008 	.word	0x0800f008
 800cfcc:	0800eff0 	.word	0x0800eff0
 800cfd0:	7ff00000 	.word	0x7ff00000
 800cfd4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cfd6:	1c51      	adds	r1, r2, #1
 800cfd8:	9119      	str	r1, [sp, #100]	@ 0x64
 800cfda:	7852      	ldrb	r2, [r2, #1]
 800cfdc:	2a30      	cmp	r2, #48	@ 0x30
 800cfde:	d0f9      	beq.n	800cfd4 <_strtod_l+0x29c>
 800cfe0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cfe4:	2908      	cmp	r1, #8
 800cfe6:	f63f af76 	bhi.w	800ced6 <_strtod_l+0x19e>
 800cfea:	3a30      	subs	r2, #48	@ 0x30
 800cfec:	f04f 080a 	mov.w	r8, #10
 800cff0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cff2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cff4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cff6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cff8:	1c56      	adds	r6, r2, #1
 800cffa:	9619      	str	r6, [sp, #100]	@ 0x64
 800cffc:	7852      	ldrb	r2, [r2, #1]
 800cffe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d002:	f1be 0f09 	cmp.w	lr, #9
 800d006:	d939      	bls.n	800d07c <_strtod_l+0x344>
 800d008:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d00a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d00e:	1a76      	subs	r6, r6, r1
 800d010:	2e08      	cmp	r6, #8
 800d012:	dc03      	bgt.n	800d01c <_strtod_l+0x2e4>
 800d014:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d016:	4588      	cmp	r8, r1
 800d018:	bfa8      	it	ge
 800d01a:	4688      	movge	r8, r1
 800d01c:	f1bc 0f00 	cmp.w	ip, #0
 800d020:	d001      	beq.n	800d026 <_strtod_l+0x2ee>
 800d022:	f1c8 0800 	rsb	r8, r8, #0
 800d026:	2d00      	cmp	r5, #0
 800d028:	d14e      	bne.n	800d0c8 <_strtod_l+0x390>
 800d02a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d02c:	4308      	orrs	r0, r1
 800d02e:	f47f aebc 	bne.w	800cdaa <_strtod_l+0x72>
 800d032:	2b00      	cmp	r3, #0
 800d034:	f47f aed4 	bne.w	800cde0 <_strtod_l+0xa8>
 800d038:	2a69      	cmp	r2, #105	@ 0x69
 800d03a:	d028      	beq.n	800d08e <_strtod_l+0x356>
 800d03c:	dc25      	bgt.n	800d08a <_strtod_l+0x352>
 800d03e:	2a49      	cmp	r2, #73	@ 0x49
 800d040:	d025      	beq.n	800d08e <_strtod_l+0x356>
 800d042:	2a4e      	cmp	r2, #78	@ 0x4e
 800d044:	f47f aecc 	bne.w	800cde0 <_strtod_l+0xa8>
 800d048:	499b      	ldr	r1, [pc, #620]	@ (800d2b8 <_strtod_l+0x580>)
 800d04a:	a819      	add	r0, sp, #100	@ 0x64
 800d04c:	f001 fba0 	bl	800e790 <__match>
 800d050:	2800      	cmp	r0, #0
 800d052:	f43f aec5 	beq.w	800cde0 <_strtod_l+0xa8>
 800d056:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	2b28      	cmp	r3, #40	@ 0x28
 800d05c:	d12e      	bne.n	800d0bc <_strtod_l+0x384>
 800d05e:	aa1c      	add	r2, sp, #112	@ 0x70
 800d060:	4996      	ldr	r1, [pc, #600]	@ (800d2bc <_strtod_l+0x584>)
 800d062:	a819      	add	r0, sp, #100	@ 0x64
 800d064:	f001 fba8 	bl	800e7b8 <__hexnan>
 800d068:	2805      	cmp	r0, #5
 800d06a:	d127      	bne.n	800d0bc <_strtod_l+0x384>
 800d06c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d06e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d072:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d076:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d07a:	e696      	b.n	800cdaa <_strtod_l+0x72>
 800d07c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d07e:	fb08 2101 	mla	r1, r8, r1, r2
 800d082:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d086:	920e      	str	r2, [sp, #56]	@ 0x38
 800d088:	e7b5      	b.n	800cff6 <_strtod_l+0x2be>
 800d08a:	2a6e      	cmp	r2, #110	@ 0x6e
 800d08c:	e7da      	b.n	800d044 <_strtod_l+0x30c>
 800d08e:	498c      	ldr	r1, [pc, #560]	@ (800d2c0 <_strtod_l+0x588>)
 800d090:	a819      	add	r0, sp, #100	@ 0x64
 800d092:	f001 fb7d 	bl	800e790 <__match>
 800d096:	2800      	cmp	r0, #0
 800d098:	f43f aea2 	beq.w	800cde0 <_strtod_l+0xa8>
 800d09c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d09e:	a819      	add	r0, sp, #100	@ 0x64
 800d0a0:	4988      	ldr	r1, [pc, #544]	@ (800d2c4 <_strtod_l+0x58c>)
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	9319      	str	r3, [sp, #100]	@ 0x64
 800d0a6:	f001 fb73 	bl	800e790 <__match>
 800d0aa:	b910      	cbnz	r0, 800d0b2 <_strtod_l+0x37a>
 800d0ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d0b2:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d2d4 <_strtod_l+0x59c>
 800d0b6:	f04f 0a00 	mov.w	sl, #0
 800d0ba:	e676      	b.n	800cdaa <_strtod_l+0x72>
 800d0bc:	4882      	ldr	r0, [pc, #520]	@ (800d2c8 <_strtod_l+0x590>)
 800d0be:	f001 f8a7 	bl	800e210 <nan>
 800d0c2:	ec5b ab10 	vmov	sl, fp, d0
 800d0c6:	e670      	b.n	800cdaa <_strtod_l+0x72>
 800d0c8:	eba8 0309 	sub.w	r3, r8, r9
 800d0cc:	2f00      	cmp	r7, #0
 800d0ce:	bf08      	it	eq
 800d0d0:	462f      	moveq	r7, r5
 800d0d2:	2d10      	cmp	r5, #16
 800d0d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d0d6:	462c      	mov	r4, r5
 800d0d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0da:	bfa8      	it	ge
 800d0dc:	2410      	movge	r4, #16
 800d0de:	f7f3 fa21 	bl	8000524 <__aeabi_ui2d>
 800d0e2:	2d09      	cmp	r5, #9
 800d0e4:	4682      	mov	sl, r0
 800d0e6:	468b      	mov	fp, r1
 800d0e8:	dc13      	bgt.n	800d112 <_strtod_l+0x3da>
 800d0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f43f ae5c 	beq.w	800cdaa <_strtod_l+0x72>
 800d0f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0f4:	dd78      	ble.n	800d1e8 <_strtod_l+0x4b0>
 800d0f6:	2b16      	cmp	r3, #22
 800d0f8:	dc5f      	bgt.n	800d1ba <_strtod_l+0x482>
 800d0fa:	4974      	ldr	r1, [pc, #464]	@ (800d2cc <_strtod_l+0x594>)
 800d0fc:	4652      	mov	r2, sl
 800d0fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d102:	465b      	mov	r3, fp
 800d104:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d108:	f7f3 fa86 	bl	8000618 <__aeabi_dmul>
 800d10c:	4682      	mov	sl, r0
 800d10e:	468b      	mov	fp, r1
 800d110:	e64b      	b.n	800cdaa <_strtod_l+0x72>
 800d112:	4b6e      	ldr	r3, [pc, #440]	@ (800d2cc <_strtod_l+0x594>)
 800d114:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d118:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d11c:	f7f3 fa7c 	bl	8000618 <__aeabi_dmul>
 800d120:	4682      	mov	sl, r0
 800d122:	468b      	mov	fp, r1
 800d124:	9808      	ldr	r0, [sp, #32]
 800d126:	f7f3 f9fd 	bl	8000524 <__aeabi_ui2d>
 800d12a:	4602      	mov	r2, r0
 800d12c:	460b      	mov	r3, r1
 800d12e:	4650      	mov	r0, sl
 800d130:	4659      	mov	r1, fp
 800d132:	f7f3 f8bb 	bl	80002ac <__adddf3>
 800d136:	2d0f      	cmp	r5, #15
 800d138:	4682      	mov	sl, r0
 800d13a:	468b      	mov	fp, r1
 800d13c:	ddd5      	ble.n	800d0ea <_strtod_l+0x3b2>
 800d13e:	1b2c      	subs	r4, r5, r4
 800d140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d142:	441c      	add	r4, r3
 800d144:	2c00      	cmp	r4, #0
 800d146:	f340 8096 	ble.w	800d276 <_strtod_l+0x53e>
 800d14a:	f014 030f 	ands.w	r3, r4, #15
 800d14e:	d00a      	beq.n	800d166 <_strtod_l+0x42e>
 800d150:	495e      	ldr	r1, [pc, #376]	@ (800d2cc <_strtod_l+0x594>)
 800d152:	4652      	mov	r2, sl
 800d154:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d158:	465b      	mov	r3, fp
 800d15a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d15e:	f7f3 fa5b 	bl	8000618 <__aeabi_dmul>
 800d162:	4682      	mov	sl, r0
 800d164:	468b      	mov	fp, r1
 800d166:	f034 040f 	bics.w	r4, r4, #15
 800d16a:	d073      	beq.n	800d254 <_strtod_l+0x51c>
 800d16c:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d170:	dd48      	ble.n	800d204 <_strtod_l+0x4cc>
 800d172:	2400      	movs	r4, #0
 800d174:	46a0      	mov	r8, r4
 800d176:	46a1      	mov	r9, r4
 800d178:	940a      	str	r4, [sp, #40]	@ 0x28
 800d17a:	2322      	movs	r3, #34	@ 0x22
 800d17c:	9a05      	ldr	r2, [sp, #20]
 800d17e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d2d4 <_strtod_l+0x59c>
 800d182:	f04f 0a00 	mov.w	sl, #0
 800d186:	6013      	str	r3, [r2, #0]
 800d188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f43f ae0d 	beq.w	800cdaa <_strtod_l+0x72>
 800d190:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d192:	9805      	ldr	r0, [sp, #20]
 800d194:	f7ff f936 	bl	800c404 <_Bfree>
 800d198:	4649      	mov	r1, r9
 800d19a:	9805      	ldr	r0, [sp, #20]
 800d19c:	f7ff f932 	bl	800c404 <_Bfree>
 800d1a0:	4641      	mov	r1, r8
 800d1a2:	9805      	ldr	r0, [sp, #20]
 800d1a4:	f7ff f92e 	bl	800c404 <_Bfree>
 800d1a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d1aa:	9805      	ldr	r0, [sp, #20]
 800d1ac:	f7ff f92a 	bl	800c404 <_Bfree>
 800d1b0:	4621      	mov	r1, r4
 800d1b2:	9805      	ldr	r0, [sp, #20]
 800d1b4:	f7ff f926 	bl	800c404 <_Bfree>
 800d1b8:	e5f7      	b.n	800cdaa <_strtod_l+0x72>
 800d1ba:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d1be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	dbbc      	blt.n	800d13e <_strtod_l+0x406>
 800d1c4:	f1c5 050f 	rsb	r5, r5, #15
 800d1c8:	4c40      	ldr	r4, [pc, #256]	@ (800d2cc <_strtod_l+0x594>)
 800d1ca:	4652      	mov	r2, sl
 800d1cc:	465b      	mov	r3, fp
 800d1ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d1d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1d6:	f7f3 fa1f 	bl	8000618 <__aeabi_dmul>
 800d1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1dc:	1b5d      	subs	r5, r3, r5
 800d1de:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d1e2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d1e6:	e78f      	b.n	800d108 <_strtod_l+0x3d0>
 800d1e8:	3316      	adds	r3, #22
 800d1ea:	dba8      	blt.n	800d13e <_strtod_l+0x406>
 800d1ec:	eba9 0808 	sub.w	r8, r9, r8
 800d1f0:	4b36      	ldr	r3, [pc, #216]	@ (800d2cc <_strtod_l+0x594>)
 800d1f2:	4650      	mov	r0, sl
 800d1f4:	4659      	mov	r1, fp
 800d1f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d1fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d1fe:	f7f3 fb35 	bl	800086c <__aeabi_ddiv>
 800d202:	e783      	b.n	800d10c <_strtod_l+0x3d4>
 800d204:	4b32      	ldr	r3, [pc, #200]	@ (800d2d0 <_strtod_l+0x598>)
 800d206:	1124      	asrs	r4, r4, #4
 800d208:	4650      	mov	r0, sl
 800d20a:	4659      	mov	r1, fp
 800d20c:	9308      	str	r3, [sp, #32]
 800d20e:	2300      	movs	r3, #0
 800d210:	461e      	mov	r6, r3
 800d212:	2c01      	cmp	r4, #1
 800d214:	dc21      	bgt.n	800d25a <_strtod_l+0x522>
 800d216:	b10b      	cbz	r3, 800d21c <_strtod_l+0x4e4>
 800d218:	4682      	mov	sl, r0
 800d21a:	468b      	mov	fp, r1
 800d21c:	492c      	ldr	r1, [pc, #176]	@ (800d2d0 <_strtod_l+0x598>)
 800d21e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d222:	4652      	mov	r2, sl
 800d224:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d228:	465b      	mov	r3, fp
 800d22a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d22e:	f7f3 f9f3 	bl	8000618 <__aeabi_dmul>
 800d232:	4b28      	ldr	r3, [pc, #160]	@ (800d2d4 <_strtod_l+0x59c>)
 800d234:	460a      	mov	r2, r1
 800d236:	4682      	mov	sl, r0
 800d238:	400b      	ands	r3, r1
 800d23a:	4927      	ldr	r1, [pc, #156]	@ (800d2d8 <_strtod_l+0x5a0>)
 800d23c:	428b      	cmp	r3, r1
 800d23e:	d898      	bhi.n	800d172 <_strtod_l+0x43a>
 800d240:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d244:	428b      	cmp	r3, r1
 800d246:	bf86      	itte	hi
 800d248:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d2dc <_strtod_l+0x5a4>
 800d24c:	f04f 3aff 	movhi.w	sl, #4294967295
 800d250:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d254:	2300      	movs	r3, #0
 800d256:	9308      	str	r3, [sp, #32]
 800d258:	e07a      	b.n	800d350 <_strtod_l+0x618>
 800d25a:	07e2      	lsls	r2, r4, #31
 800d25c:	d505      	bpl.n	800d26a <_strtod_l+0x532>
 800d25e:	9b08      	ldr	r3, [sp, #32]
 800d260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d264:	f7f3 f9d8 	bl	8000618 <__aeabi_dmul>
 800d268:	2301      	movs	r3, #1
 800d26a:	9a08      	ldr	r2, [sp, #32]
 800d26c:	3601      	adds	r6, #1
 800d26e:	1064      	asrs	r4, r4, #1
 800d270:	3208      	adds	r2, #8
 800d272:	9208      	str	r2, [sp, #32]
 800d274:	e7cd      	b.n	800d212 <_strtod_l+0x4da>
 800d276:	d0ed      	beq.n	800d254 <_strtod_l+0x51c>
 800d278:	4264      	negs	r4, r4
 800d27a:	f014 020f 	ands.w	r2, r4, #15
 800d27e:	d00a      	beq.n	800d296 <_strtod_l+0x55e>
 800d280:	4b12      	ldr	r3, [pc, #72]	@ (800d2cc <_strtod_l+0x594>)
 800d282:	4650      	mov	r0, sl
 800d284:	4659      	mov	r1, fp
 800d286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28e:	f7f3 faed 	bl	800086c <__aeabi_ddiv>
 800d292:	4682      	mov	sl, r0
 800d294:	468b      	mov	fp, r1
 800d296:	1124      	asrs	r4, r4, #4
 800d298:	d0dc      	beq.n	800d254 <_strtod_l+0x51c>
 800d29a:	2c1f      	cmp	r4, #31
 800d29c:	dd20      	ble.n	800d2e0 <_strtod_l+0x5a8>
 800d29e:	2400      	movs	r4, #0
 800d2a0:	46a0      	mov	r8, r4
 800d2a2:	46a1      	mov	r9, r4
 800d2a4:	940a      	str	r4, [sp, #40]	@ 0x28
 800d2a6:	2322      	movs	r3, #34	@ 0x22
 800d2a8:	9a05      	ldr	r2, [sp, #20]
 800d2aa:	f04f 0a00 	mov.w	sl, #0
 800d2ae:	f04f 0b00 	mov.w	fp, #0
 800d2b2:	6013      	str	r3, [r2, #0]
 800d2b4:	e768      	b.n	800d188 <_strtod_l+0x450>
 800d2b6:	bf00      	nop
 800d2b8:	0800ede1 	.word	0x0800ede1
 800d2bc:	0800eff4 	.word	0x0800eff4
 800d2c0:	0800edd9 	.word	0x0800edd9
 800d2c4:	0800ee10 	.word	0x0800ee10
 800d2c8:	0800f19d 	.word	0x0800f19d
 800d2cc:	0800ef28 	.word	0x0800ef28
 800d2d0:	0800ef00 	.word	0x0800ef00
 800d2d4:	7ff00000 	.word	0x7ff00000
 800d2d8:	7ca00000 	.word	0x7ca00000
 800d2dc:	7fefffff 	.word	0x7fefffff
 800d2e0:	f014 0310 	ands.w	r3, r4, #16
 800d2e4:	4650      	mov	r0, sl
 800d2e6:	4659      	mov	r1, fp
 800d2e8:	4ea9      	ldr	r6, [pc, #676]	@ (800d590 <_strtod_l+0x858>)
 800d2ea:	bf18      	it	ne
 800d2ec:	236a      	movne	r3, #106	@ 0x6a
 800d2ee:	9308      	str	r3, [sp, #32]
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	07e2      	lsls	r2, r4, #31
 800d2f4:	d504      	bpl.n	800d300 <_strtod_l+0x5c8>
 800d2f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d2fa:	f7f3 f98d 	bl	8000618 <__aeabi_dmul>
 800d2fe:	2301      	movs	r3, #1
 800d300:	1064      	asrs	r4, r4, #1
 800d302:	f106 0608 	add.w	r6, r6, #8
 800d306:	d1f4      	bne.n	800d2f2 <_strtod_l+0x5ba>
 800d308:	b10b      	cbz	r3, 800d30e <_strtod_l+0x5d6>
 800d30a:	4682      	mov	sl, r0
 800d30c:	468b      	mov	fp, r1
 800d30e:	9b08      	ldr	r3, [sp, #32]
 800d310:	b1b3      	cbz	r3, 800d340 <_strtod_l+0x608>
 800d312:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d316:	4659      	mov	r1, fp
 800d318:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	dd0f      	ble.n	800d340 <_strtod_l+0x608>
 800d320:	2b1f      	cmp	r3, #31
 800d322:	dd55      	ble.n	800d3d0 <_strtod_l+0x698>
 800d324:	2b34      	cmp	r3, #52	@ 0x34
 800d326:	f04f 0a00 	mov.w	sl, #0
 800d32a:	bfdb      	ittet	le
 800d32c:	f04f 33ff 	movle.w	r3, #4294967295
 800d330:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d334:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d338:	4093      	lslle	r3, r2
 800d33a:	bfd8      	it	le
 800d33c:	ea03 0b01 	andle.w	fp, r3, r1
 800d340:	2200      	movs	r2, #0
 800d342:	2300      	movs	r3, #0
 800d344:	4650      	mov	r0, sl
 800d346:	4659      	mov	r1, fp
 800d348:	f7f3 fbce 	bl	8000ae8 <__aeabi_dcmpeq>
 800d34c:	2800      	cmp	r0, #0
 800d34e:	d1a6      	bne.n	800d29e <_strtod_l+0x566>
 800d350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d352:	463a      	mov	r2, r7
 800d354:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d356:	9300      	str	r3, [sp, #0]
 800d358:	462b      	mov	r3, r5
 800d35a:	9805      	ldr	r0, [sp, #20]
 800d35c:	f7ff f8bc 	bl	800c4d8 <__s2b>
 800d360:	900a      	str	r0, [sp, #40]	@ 0x28
 800d362:	2800      	cmp	r0, #0
 800d364:	f43f af05 	beq.w	800d172 <_strtod_l+0x43a>
 800d368:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d36a:	eba9 0308 	sub.w	r3, r9, r8
 800d36e:	2400      	movs	r4, #0
 800d370:	2a00      	cmp	r2, #0
 800d372:	46a0      	mov	r8, r4
 800d374:	bfa8      	it	ge
 800d376:	2300      	movge	r3, #0
 800d378:	9312      	str	r3, [sp, #72]	@ 0x48
 800d37a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d37e:	9316      	str	r3, [sp, #88]	@ 0x58
 800d380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d382:	9805      	ldr	r0, [sp, #20]
 800d384:	6859      	ldr	r1, [r3, #4]
 800d386:	f7fe fffd 	bl	800c384 <_Balloc>
 800d38a:	4681      	mov	r9, r0
 800d38c:	2800      	cmp	r0, #0
 800d38e:	f43f aef4 	beq.w	800d17a <_strtod_l+0x442>
 800d392:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d394:	300c      	adds	r0, #12
 800d396:	691a      	ldr	r2, [r3, #16]
 800d398:	f103 010c 	add.w	r1, r3, #12
 800d39c:	3202      	adds	r2, #2
 800d39e:	0092      	lsls	r2, r2, #2
 800d3a0:	f000 ff26 	bl	800e1f0 <memcpy>
 800d3a4:	aa1c      	add	r2, sp, #112	@ 0x70
 800d3a6:	a91b      	add	r1, sp, #108	@ 0x6c
 800d3a8:	9805      	ldr	r0, [sp, #20]
 800d3aa:	ec4b ab10 	vmov	d0, sl, fp
 800d3ae:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d3b2:	f7ff fbd5 	bl	800cb60 <__d2b>
 800d3b6:	901a      	str	r0, [sp, #104]	@ 0x68
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	f43f aede 	beq.w	800d17a <_strtod_l+0x442>
 800d3be:	2101      	movs	r1, #1
 800d3c0:	9805      	ldr	r0, [sp, #20]
 800d3c2:	f7ff f91f 	bl	800c604 <__i2b>
 800d3c6:	4680      	mov	r8, r0
 800d3c8:	b948      	cbnz	r0, 800d3de <_strtod_l+0x6a6>
 800d3ca:	f04f 0800 	mov.w	r8, #0
 800d3ce:	e6d4      	b.n	800d17a <_strtod_l+0x442>
 800d3d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d3d8:	ea03 0a0a 	and.w	sl, r3, sl
 800d3dc:	e7b0      	b.n	800d340 <_strtod_l+0x608>
 800d3de:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d3e0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d3e2:	2d00      	cmp	r5, #0
 800d3e4:	bfa9      	itett	ge
 800d3e6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d3e8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d3ea:	18ef      	addge	r7, r5, r3
 800d3ec:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d3ee:	bfb8      	it	lt
 800d3f0:	1b5e      	sublt	r6, r3, r5
 800d3f2:	9b08      	ldr	r3, [sp, #32]
 800d3f4:	bfb8      	it	lt
 800d3f6:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d3f8:	1aed      	subs	r5, r5, r3
 800d3fa:	4b66      	ldr	r3, [pc, #408]	@ (800d594 <_strtod_l+0x85c>)
 800d3fc:	4415      	add	r5, r2
 800d3fe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d402:	3d01      	subs	r5, #1
 800d404:	429d      	cmp	r5, r3
 800d406:	da4f      	bge.n	800d4a8 <_strtod_l+0x770>
 800d408:	1b5b      	subs	r3, r3, r5
 800d40a:	2101      	movs	r1, #1
 800d40c:	2b1f      	cmp	r3, #31
 800d40e:	eba2 0203 	sub.w	r2, r2, r3
 800d412:	dc3d      	bgt.n	800d490 <_strtod_l+0x758>
 800d414:	fa01 f303 	lsl.w	r3, r1, r3
 800d418:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d41a:	2300      	movs	r3, #0
 800d41c:	9310      	str	r3, [sp, #64]	@ 0x40
 800d41e:	18bd      	adds	r5, r7, r2
 800d420:	9b08      	ldr	r3, [sp, #32]
 800d422:	4416      	add	r6, r2
 800d424:	42af      	cmp	r7, r5
 800d426:	441e      	add	r6, r3
 800d428:	463b      	mov	r3, r7
 800d42a:	bfa8      	it	ge
 800d42c:	462b      	movge	r3, r5
 800d42e:	42b3      	cmp	r3, r6
 800d430:	bfa8      	it	ge
 800d432:	4633      	movge	r3, r6
 800d434:	2b00      	cmp	r3, #0
 800d436:	bfc2      	ittt	gt
 800d438:	1aed      	subgt	r5, r5, r3
 800d43a:	1af6      	subgt	r6, r6, r3
 800d43c:	1aff      	subgt	r7, r7, r3
 800d43e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d440:	2b00      	cmp	r3, #0
 800d442:	dd16      	ble.n	800d472 <_strtod_l+0x73a>
 800d444:	4641      	mov	r1, r8
 800d446:	461a      	mov	r2, r3
 800d448:	9805      	ldr	r0, [sp, #20]
 800d44a:	f7ff f99b 	bl	800c784 <__pow5mult>
 800d44e:	4680      	mov	r8, r0
 800d450:	2800      	cmp	r0, #0
 800d452:	d0ba      	beq.n	800d3ca <_strtod_l+0x692>
 800d454:	4601      	mov	r1, r0
 800d456:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d458:	9805      	ldr	r0, [sp, #20]
 800d45a:	f7ff f8e9 	bl	800c630 <__multiply>
 800d45e:	900e      	str	r0, [sp, #56]	@ 0x38
 800d460:	2800      	cmp	r0, #0
 800d462:	f43f ae8a 	beq.w	800d17a <_strtod_l+0x442>
 800d466:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d468:	9805      	ldr	r0, [sp, #20]
 800d46a:	f7fe ffcb 	bl	800c404 <_Bfree>
 800d46e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d470:	931a      	str	r3, [sp, #104]	@ 0x68
 800d472:	2d00      	cmp	r5, #0
 800d474:	dc1d      	bgt.n	800d4b2 <_strtod_l+0x77a>
 800d476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d478:	2b00      	cmp	r3, #0
 800d47a:	dd23      	ble.n	800d4c4 <_strtod_l+0x78c>
 800d47c:	4649      	mov	r1, r9
 800d47e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d480:	9805      	ldr	r0, [sp, #20]
 800d482:	f7ff f97f 	bl	800c784 <__pow5mult>
 800d486:	4681      	mov	r9, r0
 800d488:	b9e0      	cbnz	r0, 800d4c4 <_strtod_l+0x78c>
 800d48a:	f04f 0900 	mov.w	r9, #0
 800d48e:	e674      	b.n	800d17a <_strtod_l+0x442>
 800d490:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d494:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d496:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d49a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d49e:	35e2      	adds	r5, #226	@ 0xe2
 800d4a0:	fa01 f305 	lsl.w	r3, r1, r5
 800d4a4:	9310      	str	r3, [sp, #64]	@ 0x40
 800d4a6:	e7ba      	b.n	800d41e <_strtod_l+0x6e6>
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	9310      	str	r3, [sp, #64]	@ 0x40
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d4b0:	e7b5      	b.n	800d41e <_strtod_l+0x6e6>
 800d4b2:	462a      	mov	r2, r5
 800d4b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d4b6:	9805      	ldr	r0, [sp, #20]
 800d4b8:	f7ff f9be 	bl	800c838 <__lshift>
 800d4bc:	901a      	str	r0, [sp, #104]	@ 0x68
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d1d9      	bne.n	800d476 <_strtod_l+0x73e>
 800d4c2:	e65a      	b.n	800d17a <_strtod_l+0x442>
 800d4c4:	2e00      	cmp	r6, #0
 800d4c6:	dd07      	ble.n	800d4d8 <_strtod_l+0x7a0>
 800d4c8:	4649      	mov	r1, r9
 800d4ca:	4632      	mov	r2, r6
 800d4cc:	9805      	ldr	r0, [sp, #20]
 800d4ce:	f7ff f9b3 	bl	800c838 <__lshift>
 800d4d2:	4681      	mov	r9, r0
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	d0d8      	beq.n	800d48a <_strtod_l+0x752>
 800d4d8:	2f00      	cmp	r7, #0
 800d4da:	dd08      	ble.n	800d4ee <_strtod_l+0x7b6>
 800d4dc:	4641      	mov	r1, r8
 800d4de:	463a      	mov	r2, r7
 800d4e0:	9805      	ldr	r0, [sp, #20]
 800d4e2:	f7ff f9a9 	bl	800c838 <__lshift>
 800d4e6:	4680      	mov	r8, r0
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	f43f ae46 	beq.w	800d17a <_strtod_l+0x442>
 800d4ee:	464a      	mov	r2, r9
 800d4f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d4f2:	9805      	ldr	r0, [sp, #20]
 800d4f4:	f7ff fa28 	bl	800c948 <__mdiff>
 800d4f8:	4604      	mov	r4, r0
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	f43f ae3d 	beq.w	800d17a <_strtod_l+0x442>
 800d500:	68c3      	ldr	r3, [r0, #12]
 800d502:	4641      	mov	r1, r8
 800d504:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d506:	2300      	movs	r3, #0
 800d508:	60c3      	str	r3, [r0, #12]
 800d50a:	f7ff fa01 	bl	800c910 <__mcmp>
 800d50e:	2800      	cmp	r0, #0
 800d510:	da46      	bge.n	800d5a0 <_strtod_l+0x868>
 800d512:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d514:	ea53 030a 	orrs.w	r3, r3, sl
 800d518:	d16c      	bne.n	800d5f4 <_strtod_l+0x8bc>
 800d51a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d168      	bne.n	800d5f4 <_strtod_l+0x8bc>
 800d522:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d526:	0d1b      	lsrs	r3, r3, #20
 800d528:	051b      	lsls	r3, r3, #20
 800d52a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d52e:	d961      	bls.n	800d5f4 <_strtod_l+0x8bc>
 800d530:	6963      	ldr	r3, [r4, #20]
 800d532:	b913      	cbnz	r3, 800d53a <_strtod_l+0x802>
 800d534:	6923      	ldr	r3, [r4, #16]
 800d536:	2b01      	cmp	r3, #1
 800d538:	dd5c      	ble.n	800d5f4 <_strtod_l+0x8bc>
 800d53a:	4621      	mov	r1, r4
 800d53c:	2201      	movs	r2, #1
 800d53e:	9805      	ldr	r0, [sp, #20]
 800d540:	f7ff f97a 	bl	800c838 <__lshift>
 800d544:	4641      	mov	r1, r8
 800d546:	4604      	mov	r4, r0
 800d548:	f7ff f9e2 	bl	800c910 <__mcmp>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	dd51      	ble.n	800d5f4 <_strtod_l+0x8bc>
 800d550:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d554:	9a08      	ldr	r2, [sp, #32]
 800d556:	0d1b      	lsrs	r3, r3, #20
 800d558:	051b      	lsls	r3, r3, #20
 800d55a:	2a00      	cmp	r2, #0
 800d55c:	d06b      	beq.n	800d636 <_strtod_l+0x8fe>
 800d55e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d562:	d868      	bhi.n	800d636 <_strtod_l+0x8fe>
 800d564:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d568:	f67f ae9d 	bls.w	800d2a6 <_strtod_l+0x56e>
 800d56c:	4b0a      	ldr	r3, [pc, #40]	@ (800d598 <_strtod_l+0x860>)
 800d56e:	4650      	mov	r0, sl
 800d570:	4659      	mov	r1, fp
 800d572:	2200      	movs	r2, #0
 800d574:	f7f3 f850 	bl	8000618 <__aeabi_dmul>
 800d578:	4b08      	ldr	r3, [pc, #32]	@ (800d59c <_strtod_l+0x864>)
 800d57a:	4682      	mov	sl, r0
 800d57c:	468b      	mov	fp, r1
 800d57e:	400b      	ands	r3, r1
 800d580:	2b00      	cmp	r3, #0
 800d582:	f47f ae05 	bne.w	800d190 <_strtod_l+0x458>
 800d586:	2322      	movs	r3, #34	@ 0x22
 800d588:	9a05      	ldr	r2, [sp, #20]
 800d58a:	6013      	str	r3, [r2, #0]
 800d58c:	e600      	b.n	800d190 <_strtod_l+0x458>
 800d58e:	bf00      	nop
 800d590:	0800f020 	.word	0x0800f020
 800d594:	fffffc02 	.word	0xfffffc02
 800d598:	39500000 	.word	0x39500000
 800d59c:	7ff00000 	.word	0x7ff00000
 800d5a0:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d5a4:	d165      	bne.n	800d672 <_strtod_l+0x93a>
 800d5a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d5a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5ac:	b35a      	cbz	r2, 800d606 <_strtod_l+0x8ce>
 800d5ae:	4a9e      	ldr	r2, [pc, #632]	@ (800d828 <_strtod_l+0xaf0>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d12b      	bne.n	800d60c <_strtod_l+0x8d4>
 800d5b4:	9b08      	ldr	r3, [sp, #32]
 800d5b6:	4651      	mov	r1, sl
 800d5b8:	b303      	cbz	r3, 800d5fc <_strtod_l+0x8c4>
 800d5ba:	465a      	mov	r2, fp
 800d5bc:	4b9b      	ldr	r3, [pc, #620]	@ (800d82c <_strtod_l+0xaf4>)
 800d5be:	4013      	ands	r3, r2
 800d5c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d5c8:	d81b      	bhi.n	800d602 <_strtod_l+0x8ca>
 800d5ca:	0d1b      	lsrs	r3, r3, #20
 800d5cc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d5d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5d4:	4299      	cmp	r1, r3
 800d5d6:	d119      	bne.n	800d60c <_strtod_l+0x8d4>
 800d5d8:	4b95      	ldr	r3, [pc, #596]	@ (800d830 <_strtod_l+0xaf8>)
 800d5da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d102      	bne.n	800d5e6 <_strtod_l+0x8ae>
 800d5e0:	3101      	adds	r1, #1
 800d5e2:	f43f adca 	beq.w	800d17a <_strtod_l+0x442>
 800d5e6:	4b91      	ldr	r3, [pc, #580]	@ (800d82c <_strtod_l+0xaf4>)
 800d5e8:	f04f 0a00 	mov.w	sl, #0
 800d5ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5ee:	401a      	ands	r2, r3
 800d5f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d5f4:	9b08      	ldr	r3, [sp, #32]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d1b8      	bne.n	800d56c <_strtod_l+0x834>
 800d5fa:	e5c9      	b.n	800d190 <_strtod_l+0x458>
 800d5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d600:	e7e8      	b.n	800d5d4 <_strtod_l+0x89c>
 800d602:	4613      	mov	r3, r2
 800d604:	e7e6      	b.n	800d5d4 <_strtod_l+0x89c>
 800d606:	ea53 030a 	orrs.w	r3, r3, sl
 800d60a:	d0a1      	beq.n	800d550 <_strtod_l+0x818>
 800d60c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d60e:	b1db      	cbz	r3, 800d648 <_strtod_l+0x910>
 800d610:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d612:	4213      	tst	r3, r2
 800d614:	d0ee      	beq.n	800d5f4 <_strtod_l+0x8bc>
 800d616:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d618:	4650      	mov	r0, sl
 800d61a:	9a08      	ldr	r2, [sp, #32]
 800d61c:	4659      	mov	r1, fp
 800d61e:	b1bb      	cbz	r3, 800d650 <_strtod_l+0x918>
 800d620:	f7ff fb6c 	bl	800ccfc <sulp>
 800d624:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d628:	ec53 2b10 	vmov	r2, r3, d0
 800d62c:	f7f2 fe3e 	bl	80002ac <__adddf3>
 800d630:	4682      	mov	sl, r0
 800d632:	468b      	mov	fp, r1
 800d634:	e7de      	b.n	800d5f4 <_strtod_l+0x8bc>
 800d636:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d63a:	f04f 3aff 	mov.w	sl, #4294967295
 800d63e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d642:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d646:	e7d5      	b.n	800d5f4 <_strtod_l+0x8bc>
 800d648:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d64a:	ea13 0f0a 	tst.w	r3, sl
 800d64e:	e7e1      	b.n	800d614 <_strtod_l+0x8dc>
 800d650:	f7ff fb54 	bl	800ccfc <sulp>
 800d654:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d658:	ec53 2b10 	vmov	r2, r3, d0
 800d65c:	f7f2 fe24 	bl	80002a8 <__aeabi_dsub>
 800d660:	2200      	movs	r2, #0
 800d662:	2300      	movs	r3, #0
 800d664:	4682      	mov	sl, r0
 800d666:	468b      	mov	fp, r1
 800d668:	f7f3 fa3e 	bl	8000ae8 <__aeabi_dcmpeq>
 800d66c:	2800      	cmp	r0, #0
 800d66e:	d0c1      	beq.n	800d5f4 <_strtod_l+0x8bc>
 800d670:	e619      	b.n	800d2a6 <_strtod_l+0x56e>
 800d672:	4641      	mov	r1, r8
 800d674:	4620      	mov	r0, r4
 800d676:	f7ff facb 	bl	800cc10 <__ratio>
 800d67a:	2200      	movs	r2, #0
 800d67c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d680:	ec57 6b10 	vmov	r6, r7, d0
 800d684:	4630      	mov	r0, r6
 800d686:	4639      	mov	r1, r7
 800d688:	f7f3 fa42 	bl	8000b10 <__aeabi_dcmple>
 800d68c:	2800      	cmp	r0, #0
 800d68e:	d06f      	beq.n	800d770 <_strtod_l+0xa38>
 800d690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d692:	2b00      	cmp	r3, #0
 800d694:	d17a      	bne.n	800d78c <_strtod_l+0xa54>
 800d696:	f1ba 0f00 	cmp.w	sl, #0
 800d69a:	d158      	bne.n	800d74e <_strtod_l+0xa16>
 800d69c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d69e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d15a      	bne.n	800d75c <_strtod_l+0xa24>
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	4b62      	ldr	r3, [pc, #392]	@ (800d834 <_strtod_l+0xafc>)
 800d6aa:	4630      	mov	r0, r6
 800d6ac:	4639      	mov	r1, r7
 800d6ae:	f7f3 fa25 	bl	8000afc <__aeabi_dcmplt>
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	d159      	bne.n	800d76a <_strtod_l+0xa32>
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	4639      	mov	r1, r7
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	4b5e      	ldr	r3, [pc, #376]	@ (800d838 <_strtod_l+0xb00>)
 800d6be:	f7f2 ffab 	bl	8000618 <__aeabi_dmul>
 800d6c2:	4606      	mov	r6, r0
 800d6c4:	460f      	mov	r7, r1
 800d6c6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d6ca:	9606      	str	r6, [sp, #24]
 800d6cc:	9307      	str	r3, [sp, #28]
 800d6ce:	4d57      	ldr	r5, [pc, #348]	@ (800d82c <_strtod_l+0xaf4>)
 800d6d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d6d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d6d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6da:	401d      	ands	r5, r3
 800d6dc:	4b57      	ldr	r3, [pc, #348]	@ (800d83c <_strtod_l+0xb04>)
 800d6de:	429d      	cmp	r5, r3
 800d6e0:	f040 80b0 	bne.w	800d844 <_strtod_l+0xb0c>
 800d6e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6e6:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d6ea:	ec4b ab10 	vmov	d0, sl, fp
 800d6ee:	f7ff f9c3 	bl	800ca78 <__ulp>
 800d6f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d6f6:	ec51 0b10 	vmov	r0, r1, d0
 800d6fa:	f7f2 ff8d 	bl	8000618 <__aeabi_dmul>
 800d6fe:	4652      	mov	r2, sl
 800d700:	465b      	mov	r3, fp
 800d702:	f7f2 fdd3 	bl	80002ac <__adddf3>
 800d706:	460b      	mov	r3, r1
 800d708:	4948      	ldr	r1, [pc, #288]	@ (800d82c <_strtod_l+0xaf4>)
 800d70a:	4682      	mov	sl, r0
 800d70c:	4a4c      	ldr	r2, [pc, #304]	@ (800d840 <_strtod_l+0xb08>)
 800d70e:	4019      	ands	r1, r3
 800d710:	4291      	cmp	r1, r2
 800d712:	d942      	bls.n	800d79a <_strtod_l+0xa62>
 800d714:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d716:	4b46      	ldr	r3, [pc, #280]	@ (800d830 <_strtod_l+0xaf8>)
 800d718:	429a      	cmp	r2, r3
 800d71a:	d103      	bne.n	800d724 <_strtod_l+0x9ec>
 800d71c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d71e:	3301      	adds	r3, #1
 800d720:	f43f ad2b 	beq.w	800d17a <_strtod_l+0x442>
 800d724:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800d830 <_strtod_l+0xaf8>
 800d728:	f04f 3aff 	mov.w	sl, #4294967295
 800d72c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d72e:	9805      	ldr	r0, [sp, #20]
 800d730:	f7fe fe68 	bl	800c404 <_Bfree>
 800d734:	4649      	mov	r1, r9
 800d736:	9805      	ldr	r0, [sp, #20]
 800d738:	f7fe fe64 	bl	800c404 <_Bfree>
 800d73c:	4641      	mov	r1, r8
 800d73e:	9805      	ldr	r0, [sp, #20]
 800d740:	f7fe fe60 	bl	800c404 <_Bfree>
 800d744:	4621      	mov	r1, r4
 800d746:	9805      	ldr	r0, [sp, #20]
 800d748:	f7fe fe5c 	bl	800c404 <_Bfree>
 800d74c:	e618      	b.n	800d380 <_strtod_l+0x648>
 800d74e:	f1ba 0f01 	cmp.w	sl, #1
 800d752:	d103      	bne.n	800d75c <_strtod_l+0xa24>
 800d754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d756:	2b00      	cmp	r3, #0
 800d758:	f43f ada5 	beq.w	800d2a6 <_strtod_l+0x56e>
 800d75c:	2600      	movs	r6, #0
 800d75e:	4f35      	ldr	r7, [pc, #212]	@ (800d834 <_strtod_l+0xafc>)
 800d760:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800d808 <_strtod_l+0xad0>
 800d764:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d768:	e7b1      	b.n	800d6ce <_strtod_l+0x996>
 800d76a:	2600      	movs	r6, #0
 800d76c:	4f32      	ldr	r7, [pc, #200]	@ (800d838 <_strtod_l+0xb00>)
 800d76e:	e7aa      	b.n	800d6c6 <_strtod_l+0x98e>
 800d770:	4b31      	ldr	r3, [pc, #196]	@ (800d838 <_strtod_l+0xb00>)
 800d772:	4630      	mov	r0, r6
 800d774:	4639      	mov	r1, r7
 800d776:	2200      	movs	r2, #0
 800d778:	f7f2 ff4e 	bl	8000618 <__aeabi_dmul>
 800d77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d77e:	4606      	mov	r6, r0
 800d780:	460f      	mov	r7, r1
 800d782:	2b00      	cmp	r3, #0
 800d784:	d09f      	beq.n	800d6c6 <_strtod_l+0x98e>
 800d786:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d78a:	e7a0      	b.n	800d6ce <_strtod_l+0x996>
 800d78c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800d810 <_strtod_l+0xad8>
 800d790:	ec57 6b17 	vmov	r6, r7, d7
 800d794:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d798:	e799      	b.n	800d6ce <_strtod_l+0x996>
 800d79a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d79e:	9b08      	ldr	r3, [sp, #32]
 800d7a0:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d1c1      	bne.n	800d72c <_strtod_l+0x9f4>
 800d7a8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d7ac:	0d1b      	lsrs	r3, r3, #20
 800d7ae:	051b      	lsls	r3, r3, #20
 800d7b0:	429d      	cmp	r5, r3
 800d7b2:	d1bb      	bne.n	800d72c <_strtod_l+0x9f4>
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	4639      	mov	r1, r7
 800d7b8:	f7f3 fa8e 	bl	8000cd8 <__aeabi_d2lz>
 800d7bc:	f7f2 fefe 	bl	80005bc <__aeabi_l2d>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	4639      	mov	r1, r7
 800d7c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d7cc:	f7f2 fd6c 	bl	80002a8 <__aeabi_dsub>
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	4602      	mov	r2, r0
 800d7d4:	ea46 060a 	orr.w	r6, r6, sl
 800d7d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d7dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7de:	431e      	orrs	r6, r3
 800d7e0:	d06d      	beq.n	800d8be <_strtod_l+0xb86>
 800d7e2:	a30d      	add	r3, pc, #52	@ (adr r3, 800d818 <_strtod_l+0xae0>)
 800d7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e8:	f7f3 f988 	bl	8000afc <__aeabi_dcmplt>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	f47f accf 	bne.w	800d190 <_strtod_l+0x458>
 800d7f2:	a30b      	add	r3, pc, #44	@ (adr r3, 800d820 <_strtod_l+0xae8>)
 800d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7fc:	f7f3 f99c 	bl	8000b38 <__aeabi_dcmpgt>
 800d800:	2800      	cmp	r0, #0
 800d802:	d093      	beq.n	800d72c <_strtod_l+0x9f4>
 800d804:	e4c4      	b.n	800d190 <_strtod_l+0x458>
 800d806:	bf00      	nop
 800d808:	00000000 	.word	0x00000000
 800d80c:	bff00000 	.word	0xbff00000
 800d810:	00000000 	.word	0x00000000
 800d814:	3ff00000 	.word	0x3ff00000
 800d818:	94a03595 	.word	0x94a03595
 800d81c:	3fdfffff 	.word	0x3fdfffff
 800d820:	35afe535 	.word	0x35afe535
 800d824:	3fe00000 	.word	0x3fe00000
 800d828:	000fffff 	.word	0x000fffff
 800d82c:	7ff00000 	.word	0x7ff00000
 800d830:	7fefffff 	.word	0x7fefffff
 800d834:	3ff00000 	.word	0x3ff00000
 800d838:	3fe00000 	.word	0x3fe00000
 800d83c:	7fe00000 	.word	0x7fe00000
 800d840:	7c9fffff 	.word	0x7c9fffff
 800d844:	9b08      	ldr	r3, [sp, #32]
 800d846:	b323      	cbz	r3, 800d892 <_strtod_l+0xb5a>
 800d848:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d84c:	d821      	bhi.n	800d892 <_strtod_l+0xb5a>
 800d84e:	4630      	mov	r0, r6
 800d850:	4639      	mov	r1, r7
 800d852:	a327      	add	r3, pc, #156	@ (adr r3, 800d8f0 <_strtod_l+0xbb8>)
 800d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d858:	f7f3 f95a 	bl	8000b10 <__aeabi_dcmple>
 800d85c:	b1a0      	cbz	r0, 800d888 <_strtod_l+0xb50>
 800d85e:	4639      	mov	r1, r7
 800d860:	4630      	mov	r0, r6
 800d862:	f7f3 f9b1 	bl	8000bc8 <__aeabi_d2uiz>
 800d866:	2801      	cmp	r0, #1
 800d868:	bf38      	it	cc
 800d86a:	2001      	movcc	r0, #1
 800d86c:	f7f2 fe5a 	bl	8000524 <__aeabi_ui2d>
 800d870:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d872:	4606      	mov	r6, r0
 800d874:	460f      	mov	r7, r1
 800d876:	b9fb      	cbnz	r3, 800d8b8 <_strtod_l+0xb80>
 800d878:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d87c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d87e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d880:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d884:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d888:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d88a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d88e:	1b5b      	subs	r3, r3, r5
 800d890:	9311      	str	r3, [sp, #68]	@ 0x44
 800d892:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d896:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d89a:	f7ff f8ed 	bl	800ca78 <__ulp>
 800d89e:	4650      	mov	r0, sl
 800d8a0:	4659      	mov	r1, fp
 800d8a2:	ec53 2b10 	vmov	r2, r3, d0
 800d8a6:	f7f2 feb7 	bl	8000618 <__aeabi_dmul>
 800d8aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d8ae:	f7f2 fcfd 	bl	80002ac <__adddf3>
 800d8b2:	4682      	mov	sl, r0
 800d8b4:	468b      	mov	fp, r1
 800d8b6:	e772      	b.n	800d79e <_strtod_l+0xa66>
 800d8b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d8bc:	e7e0      	b.n	800d880 <_strtod_l+0xb48>
 800d8be:	a30e      	add	r3, pc, #56	@ (adr r3, 800d8f8 <_strtod_l+0xbc0>)
 800d8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c4:	f7f3 f91a 	bl	8000afc <__aeabi_dcmplt>
 800d8c8:	e79a      	b.n	800d800 <_strtod_l+0xac8>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8d0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d8d2:	6013      	str	r3, [r2, #0]
 800d8d4:	f7ff ba6d 	b.w	800cdb2 <_strtod_l+0x7a>
 800d8d8:	2a65      	cmp	r2, #101	@ 0x65
 800d8da:	f43f ab67 	beq.w	800cfac <_strtod_l+0x274>
 800d8de:	2a45      	cmp	r2, #69	@ 0x45
 800d8e0:	f43f ab64 	beq.w	800cfac <_strtod_l+0x274>
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	f7ff bba0 	b.w	800d02a <_strtod_l+0x2f2>
 800d8ea:	bf00      	nop
 800d8ec:	f3af 8000 	nop.w
 800d8f0:	ffc00000 	.word	0xffc00000
 800d8f4:	41dfffff 	.word	0x41dfffff
 800d8f8:	94a03595 	.word	0x94a03595
 800d8fc:	3fcfffff 	.word	0x3fcfffff

0800d900 <_strtod_r>:
 800d900:	4b01      	ldr	r3, [pc, #4]	@ (800d908 <_strtod_r+0x8>)
 800d902:	f7ff ba19 	b.w	800cd38 <_strtod_l>
 800d906:	bf00      	nop
 800d908:	200000b0 	.word	0x200000b0

0800d90c <_strtol_l.constprop.0>:
 800d90c:	2b24      	cmp	r3, #36	@ 0x24
 800d90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d912:	4686      	mov	lr, r0
 800d914:	4690      	mov	r8, r2
 800d916:	d801      	bhi.n	800d91c <_strtol_l.constprop.0+0x10>
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d106      	bne.n	800d92a <_strtol_l.constprop.0+0x1e>
 800d91c:	f7fd fe54 	bl	800b5c8 <__errno>
 800d920:	2316      	movs	r3, #22
 800d922:	6003      	str	r3, [r0, #0]
 800d924:	2000      	movs	r0, #0
 800d926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d92a:	460d      	mov	r5, r1
 800d92c:	4833      	ldr	r0, [pc, #204]	@ (800d9fc <_strtol_l.constprop.0+0xf0>)
 800d92e:	462a      	mov	r2, r5
 800d930:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d934:	5d06      	ldrb	r6, [r0, r4]
 800d936:	f016 0608 	ands.w	r6, r6, #8
 800d93a:	d1f8      	bne.n	800d92e <_strtol_l.constprop.0+0x22>
 800d93c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d93e:	d12d      	bne.n	800d99c <_strtol_l.constprop.0+0x90>
 800d940:	782c      	ldrb	r4, [r5, #0]
 800d942:	2601      	movs	r6, #1
 800d944:	1c95      	adds	r5, r2, #2
 800d946:	f033 0210 	bics.w	r2, r3, #16
 800d94a:	d109      	bne.n	800d960 <_strtol_l.constprop.0+0x54>
 800d94c:	2c30      	cmp	r4, #48	@ 0x30
 800d94e:	d12a      	bne.n	800d9a6 <_strtol_l.constprop.0+0x9a>
 800d950:	782a      	ldrb	r2, [r5, #0]
 800d952:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d956:	2a58      	cmp	r2, #88	@ 0x58
 800d958:	d125      	bne.n	800d9a6 <_strtol_l.constprop.0+0x9a>
 800d95a:	786c      	ldrb	r4, [r5, #1]
 800d95c:	2310      	movs	r3, #16
 800d95e:	3502      	adds	r5, #2
 800d960:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d964:	2200      	movs	r2, #0
 800d966:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d96a:	4610      	mov	r0, r2
 800d96c:	fbbc f9f3 	udiv	r9, ip, r3
 800d970:	fb03 ca19 	mls	sl, r3, r9, ip
 800d974:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d978:	2f09      	cmp	r7, #9
 800d97a:	d81b      	bhi.n	800d9b4 <_strtol_l.constprop.0+0xa8>
 800d97c:	463c      	mov	r4, r7
 800d97e:	42a3      	cmp	r3, r4
 800d980:	dd27      	ble.n	800d9d2 <_strtol_l.constprop.0+0xc6>
 800d982:	1c57      	adds	r7, r2, #1
 800d984:	d007      	beq.n	800d996 <_strtol_l.constprop.0+0x8a>
 800d986:	4581      	cmp	r9, r0
 800d988:	d320      	bcc.n	800d9cc <_strtol_l.constprop.0+0xc0>
 800d98a:	d101      	bne.n	800d990 <_strtol_l.constprop.0+0x84>
 800d98c:	45a2      	cmp	sl, r4
 800d98e:	db1d      	blt.n	800d9cc <_strtol_l.constprop.0+0xc0>
 800d990:	fb00 4003 	mla	r0, r0, r3, r4
 800d994:	2201      	movs	r2, #1
 800d996:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d99a:	e7eb      	b.n	800d974 <_strtol_l.constprop.0+0x68>
 800d99c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d99e:	bf04      	itt	eq
 800d9a0:	782c      	ldrbeq	r4, [r5, #0]
 800d9a2:	1c95      	addeq	r5, r2, #2
 800d9a4:	e7cf      	b.n	800d946 <_strtol_l.constprop.0+0x3a>
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d1da      	bne.n	800d960 <_strtol_l.constprop.0+0x54>
 800d9aa:	2c30      	cmp	r4, #48	@ 0x30
 800d9ac:	bf0c      	ite	eq
 800d9ae:	2308      	moveq	r3, #8
 800d9b0:	230a      	movne	r3, #10
 800d9b2:	e7d5      	b.n	800d960 <_strtol_l.constprop.0+0x54>
 800d9b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d9b8:	2f19      	cmp	r7, #25
 800d9ba:	d801      	bhi.n	800d9c0 <_strtol_l.constprop.0+0xb4>
 800d9bc:	3c37      	subs	r4, #55	@ 0x37
 800d9be:	e7de      	b.n	800d97e <_strtol_l.constprop.0+0x72>
 800d9c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d9c4:	2f19      	cmp	r7, #25
 800d9c6:	d804      	bhi.n	800d9d2 <_strtol_l.constprop.0+0xc6>
 800d9c8:	3c57      	subs	r4, #87	@ 0x57
 800d9ca:	e7d8      	b.n	800d97e <_strtol_l.constprop.0+0x72>
 800d9cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d9d0:	e7e1      	b.n	800d996 <_strtol_l.constprop.0+0x8a>
 800d9d2:	1c53      	adds	r3, r2, #1
 800d9d4:	d108      	bne.n	800d9e8 <_strtol_l.constprop.0+0xdc>
 800d9d6:	2322      	movs	r3, #34	@ 0x22
 800d9d8:	4660      	mov	r0, ip
 800d9da:	f8ce 3000 	str.w	r3, [lr]
 800d9de:	f1b8 0f00 	cmp.w	r8, #0
 800d9e2:	d0a0      	beq.n	800d926 <_strtol_l.constprop.0+0x1a>
 800d9e4:	1e69      	subs	r1, r5, #1
 800d9e6:	e006      	b.n	800d9f6 <_strtol_l.constprop.0+0xea>
 800d9e8:	b106      	cbz	r6, 800d9ec <_strtol_l.constprop.0+0xe0>
 800d9ea:	4240      	negs	r0, r0
 800d9ec:	f1b8 0f00 	cmp.w	r8, #0
 800d9f0:	d099      	beq.n	800d926 <_strtol_l.constprop.0+0x1a>
 800d9f2:	2a00      	cmp	r2, #0
 800d9f4:	d1f6      	bne.n	800d9e4 <_strtol_l.constprop.0+0xd8>
 800d9f6:	f8c8 1000 	str.w	r1, [r8]
 800d9fa:	e794      	b.n	800d926 <_strtol_l.constprop.0+0x1a>
 800d9fc:	0800f049 	.word	0x0800f049

0800da00 <_strtol_r>:
 800da00:	f7ff bf84 	b.w	800d90c <_strtol_l.constprop.0>

0800da04 <__ssputs_r>:
 800da04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da08:	461f      	mov	r7, r3
 800da0a:	688e      	ldr	r6, [r1, #8]
 800da0c:	4682      	mov	sl, r0
 800da0e:	460c      	mov	r4, r1
 800da10:	42be      	cmp	r6, r7
 800da12:	4690      	mov	r8, r2
 800da14:	680b      	ldr	r3, [r1, #0]
 800da16:	d82d      	bhi.n	800da74 <__ssputs_r+0x70>
 800da18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da20:	d026      	beq.n	800da70 <__ssputs_r+0x6c>
 800da22:	6965      	ldr	r5, [r4, #20]
 800da24:	6909      	ldr	r1, [r1, #16]
 800da26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da2a:	eba3 0901 	sub.w	r9, r3, r1
 800da2e:	1c7b      	adds	r3, r7, #1
 800da30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da34:	444b      	add	r3, r9
 800da36:	106d      	asrs	r5, r5, #1
 800da38:	429d      	cmp	r5, r3
 800da3a:	bf38      	it	cc
 800da3c:	461d      	movcc	r5, r3
 800da3e:	0553      	lsls	r3, r2, #21
 800da40:	d527      	bpl.n	800da92 <__ssputs_r+0x8e>
 800da42:	4629      	mov	r1, r5
 800da44:	f7fc fc3c 	bl	800a2c0 <_malloc_r>
 800da48:	4606      	mov	r6, r0
 800da4a:	b360      	cbz	r0, 800daa6 <__ssputs_r+0xa2>
 800da4c:	464a      	mov	r2, r9
 800da4e:	6921      	ldr	r1, [r4, #16]
 800da50:	f000 fbce 	bl	800e1f0 <memcpy>
 800da54:	89a3      	ldrh	r3, [r4, #12]
 800da56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da5e:	81a3      	strh	r3, [r4, #12]
 800da60:	6126      	str	r6, [r4, #16]
 800da62:	444e      	add	r6, r9
 800da64:	6165      	str	r5, [r4, #20]
 800da66:	eba5 0509 	sub.w	r5, r5, r9
 800da6a:	6026      	str	r6, [r4, #0]
 800da6c:	463e      	mov	r6, r7
 800da6e:	60a5      	str	r5, [r4, #8]
 800da70:	42be      	cmp	r6, r7
 800da72:	d900      	bls.n	800da76 <__ssputs_r+0x72>
 800da74:	463e      	mov	r6, r7
 800da76:	4632      	mov	r2, r6
 800da78:	4641      	mov	r1, r8
 800da7a:	6820      	ldr	r0, [r4, #0]
 800da7c:	f000 fb69 	bl	800e152 <memmove>
 800da80:	68a3      	ldr	r3, [r4, #8]
 800da82:	2000      	movs	r0, #0
 800da84:	1b9b      	subs	r3, r3, r6
 800da86:	60a3      	str	r3, [r4, #8]
 800da88:	6823      	ldr	r3, [r4, #0]
 800da8a:	4433      	add	r3, r6
 800da8c:	6023      	str	r3, [r4, #0]
 800da8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da92:	462a      	mov	r2, r5
 800da94:	f000 ff3d 	bl	800e912 <_realloc_r>
 800da98:	4606      	mov	r6, r0
 800da9a:	2800      	cmp	r0, #0
 800da9c:	d1e0      	bne.n	800da60 <__ssputs_r+0x5c>
 800da9e:	6921      	ldr	r1, [r4, #16]
 800daa0:	4650      	mov	r0, sl
 800daa2:	f7fe fc25 	bl	800c2f0 <_free_r>
 800daa6:	230c      	movs	r3, #12
 800daa8:	f04f 30ff 	mov.w	r0, #4294967295
 800daac:	f8ca 3000 	str.w	r3, [sl]
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dab6:	81a3      	strh	r3, [r4, #12]
 800dab8:	e7e9      	b.n	800da8e <__ssputs_r+0x8a>
	...

0800dabc <_svfiprintf_r>:
 800dabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac0:	4698      	mov	r8, r3
 800dac2:	898b      	ldrh	r3, [r1, #12]
 800dac4:	b09d      	sub	sp, #116	@ 0x74
 800dac6:	4607      	mov	r7, r0
 800dac8:	061b      	lsls	r3, r3, #24
 800daca:	460d      	mov	r5, r1
 800dacc:	4614      	mov	r4, r2
 800dace:	d510      	bpl.n	800daf2 <_svfiprintf_r+0x36>
 800dad0:	690b      	ldr	r3, [r1, #16]
 800dad2:	b973      	cbnz	r3, 800daf2 <_svfiprintf_r+0x36>
 800dad4:	2140      	movs	r1, #64	@ 0x40
 800dad6:	f7fc fbf3 	bl	800a2c0 <_malloc_r>
 800dada:	6028      	str	r0, [r5, #0]
 800dadc:	6128      	str	r0, [r5, #16]
 800dade:	b930      	cbnz	r0, 800daee <_svfiprintf_r+0x32>
 800dae0:	230c      	movs	r3, #12
 800dae2:	603b      	str	r3, [r7, #0]
 800dae4:	f04f 30ff 	mov.w	r0, #4294967295
 800dae8:	b01d      	add	sp, #116	@ 0x74
 800daea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daee:	2340      	movs	r3, #64	@ 0x40
 800daf0:	616b      	str	r3, [r5, #20]
 800daf2:	2300      	movs	r3, #0
 800daf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800daf8:	f04f 0901 	mov.w	r9, #1
 800dafc:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800dca0 <_svfiprintf_r+0x1e4>
 800db00:	9309      	str	r3, [sp, #36]	@ 0x24
 800db02:	2320      	movs	r3, #32
 800db04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db08:	2330      	movs	r3, #48	@ 0x30
 800db0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db0e:	4623      	mov	r3, r4
 800db10:	469a      	mov	sl, r3
 800db12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db16:	b10a      	cbz	r2, 800db1c <_svfiprintf_r+0x60>
 800db18:	2a25      	cmp	r2, #37	@ 0x25
 800db1a:	d1f9      	bne.n	800db10 <_svfiprintf_r+0x54>
 800db1c:	ebba 0b04 	subs.w	fp, sl, r4
 800db20:	d00b      	beq.n	800db3a <_svfiprintf_r+0x7e>
 800db22:	465b      	mov	r3, fp
 800db24:	4622      	mov	r2, r4
 800db26:	4629      	mov	r1, r5
 800db28:	4638      	mov	r0, r7
 800db2a:	f7ff ff6b 	bl	800da04 <__ssputs_r>
 800db2e:	3001      	adds	r0, #1
 800db30:	f000 80a7 	beq.w	800dc82 <_svfiprintf_r+0x1c6>
 800db34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db36:	445a      	add	r2, fp
 800db38:	9209      	str	r2, [sp, #36]	@ 0x24
 800db3a:	f89a 3000 	ldrb.w	r3, [sl]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	f000 809f 	beq.w	800dc82 <_svfiprintf_r+0x1c6>
 800db44:	2300      	movs	r3, #0
 800db46:	f04f 32ff 	mov.w	r2, #4294967295
 800db4a:	f10a 0a01 	add.w	sl, sl, #1
 800db4e:	9304      	str	r3, [sp, #16]
 800db50:	9307      	str	r3, [sp, #28]
 800db52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db56:	931a      	str	r3, [sp, #104]	@ 0x68
 800db58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db5c:	4654      	mov	r4, sl
 800db5e:	2205      	movs	r2, #5
 800db60:	484f      	ldr	r0, [pc, #316]	@ (800dca0 <_svfiprintf_r+0x1e4>)
 800db62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db66:	f7fd fd5c 	bl	800b622 <memchr>
 800db6a:	9a04      	ldr	r2, [sp, #16]
 800db6c:	b9d8      	cbnz	r0, 800dba6 <_svfiprintf_r+0xea>
 800db6e:	06d0      	lsls	r0, r2, #27
 800db70:	bf44      	itt	mi
 800db72:	2320      	movmi	r3, #32
 800db74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db78:	0711      	lsls	r1, r2, #28
 800db7a:	bf44      	itt	mi
 800db7c:	232b      	movmi	r3, #43	@ 0x2b
 800db7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db82:	f89a 3000 	ldrb.w	r3, [sl]
 800db86:	2b2a      	cmp	r3, #42	@ 0x2a
 800db88:	d015      	beq.n	800dbb6 <_svfiprintf_r+0xfa>
 800db8a:	9a07      	ldr	r2, [sp, #28]
 800db8c:	4654      	mov	r4, sl
 800db8e:	2000      	movs	r0, #0
 800db90:	f04f 0c0a 	mov.w	ip, #10
 800db94:	4621      	mov	r1, r4
 800db96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db9a:	3b30      	subs	r3, #48	@ 0x30
 800db9c:	2b09      	cmp	r3, #9
 800db9e:	d94b      	bls.n	800dc38 <_svfiprintf_r+0x17c>
 800dba0:	b1b0      	cbz	r0, 800dbd0 <_svfiprintf_r+0x114>
 800dba2:	9207      	str	r2, [sp, #28]
 800dba4:	e014      	b.n	800dbd0 <_svfiprintf_r+0x114>
 800dba6:	eba0 0308 	sub.w	r3, r0, r8
 800dbaa:	46a2      	mov	sl, r4
 800dbac:	fa09 f303 	lsl.w	r3, r9, r3
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	9304      	str	r3, [sp, #16]
 800dbb4:	e7d2      	b.n	800db5c <_svfiprintf_r+0xa0>
 800dbb6:	9b03      	ldr	r3, [sp, #12]
 800dbb8:	1d19      	adds	r1, r3, #4
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	9103      	str	r1, [sp, #12]
 800dbc0:	bfbb      	ittet	lt
 800dbc2:	425b      	neglt	r3, r3
 800dbc4:	f042 0202 	orrlt.w	r2, r2, #2
 800dbc8:	9307      	strge	r3, [sp, #28]
 800dbca:	9307      	strlt	r3, [sp, #28]
 800dbcc:	bfb8      	it	lt
 800dbce:	9204      	strlt	r2, [sp, #16]
 800dbd0:	7823      	ldrb	r3, [r4, #0]
 800dbd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbd4:	d10a      	bne.n	800dbec <_svfiprintf_r+0x130>
 800dbd6:	7863      	ldrb	r3, [r4, #1]
 800dbd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbda:	d132      	bne.n	800dc42 <_svfiprintf_r+0x186>
 800dbdc:	9b03      	ldr	r3, [sp, #12]
 800dbde:	3402      	adds	r4, #2
 800dbe0:	1d1a      	adds	r2, r3, #4
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbe8:	9203      	str	r2, [sp, #12]
 800dbea:	9305      	str	r3, [sp, #20]
 800dbec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dcb0 <_svfiprintf_r+0x1f4>
 800dbf0:	2203      	movs	r2, #3
 800dbf2:	7821      	ldrb	r1, [r4, #0]
 800dbf4:	4650      	mov	r0, sl
 800dbf6:	f7fd fd14 	bl	800b622 <memchr>
 800dbfa:	b138      	cbz	r0, 800dc0c <_svfiprintf_r+0x150>
 800dbfc:	eba0 000a 	sub.w	r0, r0, sl
 800dc00:	2240      	movs	r2, #64	@ 0x40
 800dc02:	9b04      	ldr	r3, [sp, #16]
 800dc04:	3401      	adds	r4, #1
 800dc06:	4082      	lsls	r2, r0
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	9304      	str	r3, [sp, #16]
 800dc0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc10:	2206      	movs	r2, #6
 800dc12:	4824      	ldr	r0, [pc, #144]	@ (800dca4 <_svfiprintf_r+0x1e8>)
 800dc14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc18:	f7fd fd03 	bl	800b622 <memchr>
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	d036      	beq.n	800dc8e <_svfiprintf_r+0x1d2>
 800dc20:	4b21      	ldr	r3, [pc, #132]	@ (800dca8 <_svfiprintf_r+0x1ec>)
 800dc22:	bb1b      	cbnz	r3, 800dc6c <_svfiprintf_r+0x1b0>
 800dc24:	9b03      	ldr	r3, [sp, #12]
 800dc26:	3307      	adds	r3, #7
 800dc28:	f023 0307 	bic.w	r3, r3, #7
 800dc2c:	3308      	adds	r3, #8
 800dc2e:	9303      	str	r3, [sp, #12]
 800dc30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc32:	4433      	add	r3, r6
 800dc34:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc36:	e76a      	b.n	800db0e <_svfiprintf_r+0x52>
 800dc38:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	2001      	movs	r0, #1
 800dc40:	e7a8      	b.n	800db94 <_svfiprintf_r+0xd8>
 800dc42:	2300      	movs	r3, #0
 800dc44:	3401      	adds	r4, #1
 800dc46:	f04f 0c0a 	mov.w	ip, #10
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	9305      	str	r3, [sp, #20]
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc54:	3a30      	subs	r2, #48	@ 0x30
 800dc56:	2a09      	cmp	r2, #9
 800dc58:	d903      	bls.n	800dc62 <_svfiprintf_r+0x1a6>
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d0c6      	beq.n	800dbec <_svfiprintf_r+0x130>
 800dc5e:	9105      	str	r1, [sp, #20]
 800dc60:	e7c4      	b.n	800dbec <_svfiprintf_r+0x130>
 800dc62:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc66:	4604      	mov	r4, r0
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e7f0      	b.n	800dc4e <_svfiprintf_r+0x192>
 800dc6c:	ab03      	add	r3, sp, #12
 800dc6e:	462a      	mov	r2, r5
 800dc70:	a904      	add	r1, sp, #16
 800dc72:	4638      	mov	r0, r7
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	4b0d      	ldr	r3, [pc, #52]	@ (800dcac <_svfiprintf_r+0x1f0>)
 800dc78:	f7fc fc4c 	bl	800a514 <_printf_float>
 800dc7c:	1c42      	adds	r2, r0, #1
 800dc7e:	4606      	mov	r6, r0
 800dc80:	d1d6      	bne.n	800dc30 <_svfiprintf_r+0x174>
 800dc82:	89ab      	ldrh	r3, [r5, #12]
 800dc84:	065b      	lsls	r3, r3, #25
 800dc86:	f53f af2d 	bmi.w	800dae4 <_svfiprintf_r+0x28>
 800dc8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc8c:	e72c      	b.n	800dae8 <_svfiprintf_r+0x2c>
 800dc8e:	ab03      	add	r3, sp, #12
 800dc90:	462a      	mov	r2, r5
 800dc92:	a904      	add	r1, sp, #16
 800dc94:	4638      	mov	r0, r7
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	4b04      	ldr	r3, [pc, #16]	@ (800dcac <_svfiprintf_r+0x1f0>)
 800dc9a:	f7fc fed7 	bl	800aa4c <_printf_i>
 800dc9e:	e7ed      	b.n	800dc7c <_svfiprintf_r+0x1c0>
 800dca0:	0800f149 	.word	0x0800f149
 800dca4:	0800f153 	.word	0x0800f153
 800dca8:	0800a515 	.word	0x0800a515
 800dcac:	0800da05 	.word	0x0800da05
 800dcb0:	0800f14f 	.word	0x0800f14f

0800dcb4 <__sfputc_r>:
 800dcb4:	6893      	ldr	r3, [r2, #8]
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	6093      	str	r3, [r2, #8]
 800dcbc:	b410      	push	{r4}
 800dcbe:	da08      	bge.n	800dcd2 <__sfputc_r+0x1e>
 800dcc0:	6994      	ldr	r4, [r2, #24]
 800dcc2:	42a3      	cmp	r3, r4
 800dcc4:	db01      	blt.n	800dcca <__sfputc_r+0x16>
 800dcc6:	290a      	cmp	r1, #10
 800dcc8:	d103      	bne.n	800dcd2 <__sfputc_r+0x1e>
 800dcca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcce:	f7fd bb84 	b.w	800b3da <__swbuf_r>
 800dcd2:	6813      	ldr	r3, [r2, #0]
 800dcd4:	1c58      	adds	r0, r3, #1
 800dcd6:	6010      	str	r0, [r2, #0]
 800dcd8:	4608      	mov	r0, r1
 800dcda:	7019      	strb	r1, [r3, #0]
 800dcdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dce0:	4770      	bx	lr

0800dce2 <__sfputs_r>:
 800dce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce4:	4606      	mov	r6, r0
 800dce6:	460f      	mov	r7, r1
 800dce8:	4614      	mov	r4, r2
 800dcea:	18d5      	adds	r5, r2, r3
 800dcec:	42ac      	cmp	r4, r5
 800dcee:	d101      	bne.n	800dcf4 <__sfputs_r+0x12>
 800dcf0:	2000      	movs	r0, #0
 800dcf2:	e007      	b.n	800dd04 <__sfputs_r+0x22>
 800dcf4:	463a      	mov	r2, r7
 800dcf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcfa:	4630      	mov	r0, r6
 800dcfc:	f7ff ffda 	bl	800dcb4 <__sfputc_r>
 800dd00:	1c43      	adds	r3, r0, #1
 800dd02:	d1f3      	bne.n	800dcec <__sfputs_r+0xa>
 800dd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd08 <_vfiprintf_r>:
 800dd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd0c:	460d      	mov	r5, r1
 800dd0e:	b09d      	sub	sp, #116	@ 0x74
 800dd10:	4614      	mov	r4, r2
 800dd12:	4698      	mov	r8, r3
 800dd14:	4606      	mov	r6, r0
 800dd16:	b118      	cbz	r0, 800dd20 <_vfiprintf_r+0x18>
 800dd18:	6a03      	ldr	r3, [r0, #32]
 800dd1a:	b90b      	cbnz	r3, 800dd20 <_vfiprintf_r+0x18>
 800dd1c:	f7fd fa54 	bl	800b1c8 <__sinit>
 800dd20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd22:	07d9      	lsls	r1, r3, #31
 800dd24:	d405      	bmi.n	800dd32 <_vfiprintf_r+0x2a>
 800dd26:	89ab      	ldrh	r3, [r5, #12]
 800dd28:	059a      	lsls	r2, r3, #22
 800dd2a:	d402      	bmi.n	800dd32 <_vfiprintf_r+0x2a>
 800dd2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd2e:	f7fd fc76 	bl	800b61e <__retarget_lock_acquire_recursive>
 800dd32:	89ab      	ldrh	r3, [r5, #12]
 800dd34:	071b      	lsls	r3, r3, #28
 800dd36:	d501      	bpl.n	800dd3c <_vfiprintf_r+0x34>
 800dd38:	692b      	ldr	r3, [r5, #16]
 800dd3a:	b99b      	cbnz	r3, 800dd64 <_vfiprintf_r+0x5c>
 800dd3c:	4629      	mov	r1, r5
 800dd3e:	4630      	mov	r0, r6
 800dd40:	f7fd fb8a 	bl	800b458 <__swsetup_r>
 800dd44:	b170      	cbz	r0, 800dd64 <_vfiprintf_r+0x5c>
 800dd46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd48:	07dc      	lsls	r4, r3, #31
 800dd4a:	d504      	bpl.n	800dd56 <_vfiprintf_r+0x4e>
 800dd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd50:	b01d      	add	sp, #116	@ 0x74
 800dd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd56:	89ab      	ldrh	r3, [r5, #12]
 800dd58:	0598      	lsls	r0, r3, #22
 800dd5a:	d4f7      	bmi.n	800dd4c <_vfiprintf_r+0x44>
 800dd5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd5e:	f7fd fc5f 	bl	800b620 <__retarget_lock_release_recursive>
 800dd62:	e7f3      	b.n	800dd4c <_vfiprintf_r+0x44>
 800dd64:	2300      	movs	r3, #0
 800dd66:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd6a:	f04f 0901 	mov.w	r9, #1
 800dd6e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800df24 <_vfiprintf_r+0x21c>
 800dd72:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd74:	2320      	movs	r3, #32
 800dd76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd7a:	2330      	movs	r3, #48	@ 0x30
 800dd7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd80:	4623      	mov	r3, r4
 800dd82:	469a      	mov	sl, r3
 800dd84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd88:	b10a      	cbz	r2, 800dd8e <_vfiprintf_r+0x86>
 800dd8a:	2a25      	cmp	r2, #37	@ 0x25
 800dd8c:	d1f9      	bne.n	800dd82 <_vfiprintf_r+0x7a>
 800dd8e:	ebba 0b04 	subs.w	fp, sl, r4
 800dd92:	d00b      	beq.n	800ddac <_vfiprintf_r+0xa4>
 800dd94:	465b      	mov	r3, fp
 800dd96:	4622      	mov	r2, r4
 800dd98:	4629      	mov	r1, r5
 800dd9a:	4630      	mov	r0, r6
 800dd9c:	f7ff ffa1 	bl	800dce2 <__sfputs_r>
 800dda0:	3001      	adds	r0, #1
 800dda2:	f000 80a7 	beq.w	800def4 <_vfiprintf_r+0x1ec>
 800dda6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dda8:	445a      	add	r2, fp
 800ddaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800ddac:	f89a 3000 	ldrb.w	r3, [sl]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	f000 809f 	beq.w	800def4 <_vfiprintf_r+0x1ec>
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	f04f 32ff 	mov.w	r2, #4294967295
 800ddbc:	f10a 0a01 	add.w	sl, sl, #1
 800ddc0:	9304      	str	r3, [sp, #16]
 800ddc2:	9307      	str	r3, [sp, #28]
 800ddc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ddc8:	931a      	str	r3, [sp, #104]	@ 0x68
 800ddca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddce:	4654      	mov	r4, sl
 800ddd0:	2205      	movs	r2, #5
 800ddd2:	4854      	ldr	r0, [pc, #336]	@ (800df24 <_vfiprintf_r+0x21c>)
 800ddd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddd8:	f7fd fc23 	bl	800b622 <memchr>
 800dddc:	9a04      	ldr	r2, [sp, #16]
 800ddde:	b9d8      	cbnz	r0, 800de18 <_vfiprintf_r+0x110>
 800dde0:	06d1      	lsls	r1, r2, #27
 800dde2:	bf44      	itt	mi
 800dde4:	2320      	movmi	r3, #32
 800dde6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ddea:	0713      	lsls	r3, r2, #28
 800ddec:	bf44      	itt	mi
 800ddee:	232b      	movmi	r3, #43	@ 0x2b
 800ddf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ddf4:	f89a 3000 	ldrb.w	r3, [sl]
 800ddf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddfa:	d015      	beq.n	800de28 <_vfiprintf_r+0x120>
 800ddfc:	9a07      	ldr	r2, [sp, #28]
 800ddfe:	4654      	mov	r4, sl
 800de00:	2000      	movs	r0, #0
 800de02:	f04f 0c0a 	mov.w	ip, #10
 800de06:	4621      	mov	r1, r4
 800de08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de0c:	3b30      	subs	r3, #48	@ 0x30
 800de0e:	2b09      	cmp	r3, #9
 800de10:	d94b      	bls.n	800deaa <_vfiprintf_r+0x1a2>
 800de12:	b1b0      	cbz	r0, 800de42 <_vfiprintf_r+0x13a>
 800de14:	9207      	str	r2, [sp, #28]
 800de16:	e014      	b.n	800de42 <_vfiprintf_r+0x13a>
 800de18:	eba0 0308 	sub.w	r3, r0, r8
 800de1c:	46a2      	mov	sl, r4
 800de1e:	fa09 f303 	lsl.w	r3, r9, r3
 800de22:	4313      	orrs	r3, r2
 800de24:	9304      	str	r3, [sp, #16]
 800de26:	e7d2      	b.n	800ddce <_vfiprintf_r+0xc6>
 800de28:	9b03      	ldr	r3, [sp, #12]
 800de2a:	1d19      	adds	r1, r3, #4
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	9103      	str	r1, [sp, #12]
 800de32:	bfbb      	ittet	lt
 800de34:	425b      	neglt	r3, r3
 800de36:	f042 0202 	orrlt.w	r2, r2, #2
 800de3a:	9307      	strge	r3, [sp, #28]
 800de3c:	9307      	strlt	r3, [sp, #28]
 800de3e:	bfb8      	it	lt
 800de40:	9204      	strlt	r2, [sp, #16]
 800de42:	7823      	ldrb	r3, [r4, #0]
 800de44:	2b2e      	cmp	r3, #46	@ 0x2e
 800de46:	d10a      	bne.n	800de5e <_vfiprintf_r+0x156>
 800de48:	7863      	ldrb	r3, [r4, #1]
 800de4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800de4c:	d132      	bne.n	800deb4 <_vfiprintf_r+0x1ac>
 800de4e:	9b03      	ldr	r3, [sp, #12]
 800de50:	3402      	adds	r4, #2
 800de52:	1d1a      	adds	r2, r3, #4
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de5a:	9203      	str	r2, [sp, #12]
 800de5c:	9305      	str	r3, [sp, #20]
 800de5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800df34 <_vfiprintf_r+0x22c>
 800de62:	2203      	movs	r2, #3
 800de64:	7821      	ldrb	r1, [r4, #0]
 800de66:	4650      	mov	r0, sl
 800de68:	f7fd fbdb 	bl	800b622 <memchr>
 800de6c:	b138      	cbz	r0, 800de7e <_vfiprintf_r+0x176>
 800de6e:	eba0 000a 	sub.w	r0, r0, sl
 800de72:	2240      	movs	r2, #64	@ 0x40
 800de74:	9b04      	ldr	r3, [sp, #16]
 800de76:	3401      	adds	r4, #1
 800de78:	4082      	lsls	r2, r0
 800de7a:	4313      	orrs	r3, r2
 800de7c:	9304      	str	r3, [sp, #16]
 800de7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de82:	2206      	movs	r2, #6
 800de84:	4828      	ldr	r0, [pc, #160]	@ (800df28 <_vfiprintf_r+0x220>)
 800de86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de8a:	f7fd fbca 	bl	800b622 <memchr>
 800de8e:	2800      	cmp	r0, #0
 800de90:	d03f      	beq.n	800df12 <_vfiprintf_r+0x20a>
 800de92:	4b26      	ldr	r3, [pc, #152]	@ (800df2c <_vfiprintf_r+0x224>)
 800de94:	bb1b      	cbnz	r3, 800dede <_vfiprintf_r+0x1d6>
 800de96:	9b03      	ldr	r3, [sp, #12]
 800de98:	3307      	adds	r3, #7
 800de9a:	f023 0307 	bic.w	r3, r3, #7
 800de9e:	3308      	adds	r3, #8
 800dea0:	9303      	str	r3, [sp, #12]
 800dea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dea4:	443b      	add	r3, r7
 800dea6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dea8:	e76a      	b.n	800dd80 <_vfiprintf_r+0x78>
 800deaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800deae:	460c      	mov	r4, r1
 800deb0:	2001      	movs	r0, #1
 800deb2:	e7a8      	b.n	800de06 <_vfiprintf_r+0xfe>
 800deb4:	2300      	movs	r3, #0
 800deb6:	3401      	adds	r4, #1
 800deb8:	f04f 0c0a 	mov.w	ip, #10
 800debc:	4619      	mov	r1, r3
 800debe:	9305      	str	r3, [sp, #20]
 800dec0:	4620      	mov	r0, r4
 800dec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dec6:	3a30      	subs	r2, #48	@ 0x30
 800dec8:	2a09      	cmp	r2, #9
 800deca:	d903      	bls.n	800ded4 <_vfiprintf_r+0x1cc>
 800decc:	2b00      	cmp	r3, #0
 800dece:	d0c6      	beq.n	800de5e <_vfiprintf_r+0x156>
 800ded0:	9105      	str	r1, [sp, #20]
 800ded2:	e7c4      	b.n	800de5e <_vfiprintf_r+0x156>
 800ded4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ded8:	4604      	mov	r4, r0
 800deda:	2301      	movs	r3, #1
 800dedc:	e7f0      	b.n	800dec0 <_vfiprintf_r+0x1b8>
 800dede:	ab03      	add	r3, sp, #12
 800dee0:	462a      	mov	r2, r5
 800dee2:	a904      	add	r1, sp, #16
 800dee4:	4630      	mov	r0, r6
 800dee6:	9300      	str	r3, [sp, #0]
 800dee8:	4b11      	ldr	r3, [pc, #68]	@ (800df30 <_vfiprintf_r+0x228>)
 800deea:	f7fc fb13 	bl	800a514 <_printf_float>
 800deee:	4607      	mov	r7, r0
 800def0:	1c78      	adds	r0, r7, #1
 800def2:	d1d6      	bne.n	800dea2 <_vfiprintf_r+0x19a>
 800def4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800def6:	07d9      	lsls	r1, r3, #31
 800def8:	d405      	bmi.n	800df06 <_vfiprintf_r+0x1fe>
 800defa:	89ab      	ldrh	r3, [r5, #12]
 800defc:	059a      	lsls	r2, r3, #22
 800defe:	d402      	bmi.n	800df06 <_vfiprintf_r+0x1fe>
 800df00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df02:	f7fd fb8d 	bl	800b620 <__retarget_lock_release_recursive>
 800df06:	89ab      	ldrh	r3, [r5, #12]
 800df08:	065b      	lsls	r3, r3, #25
 800df0a:	f53f af1f 	bmi.w	800dd4c <_vfiprintf_r+0x44>
 800df0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df10:	e71e      	b.n	800dd50 <_vfiprintf_r+0x48>
 800df12:	ab03      	add	r3, sp, #12
 800df14:	462a      	mov	r2, r5
 800df16:	a904      	add	r1, sp, #16
 800df18:	4630      	mov	r0, r6
 800df1a:	9300      	str	r3, [sp, #0]
 800df1c:	4b04      	ldr	r3, [pc, #16]	@ (800df30 <_vfiprintf_r+0x228>)
 800df1e:	f7fc fd95 	bl	800aa4c <_printf_i>
 800df22:	e7e4      	b.n	800deee <_vfiprintf_r+0x1e6>
 800df24:	0800f149 	.word	0x0800f149
 800df28:	0800f153 	.word	0x0800f153
 800df2c:	0800a515 	.word	0x0800a515
 800df30:	0800dce3 	.word	0x0800dce3
 800df34:	0800f14f 	.word	0x0800f14f

0800df38 <__sflush_r>:
 800df38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df40:	0716      	lsls	r6, r2, #28
 800df42:	4605      	mov	r5, r0
 800df44:	460c      	mov	r4, r1
 800df46:	d454      	bmi.n	800dff2 <__sflush_r+0xba>
 800df48:	684b      	ldr	r3, [r1, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	dc02      	bgt.n	800df54 <__sflush_r+0x1c>
 800df4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800df50:	2b00      	cmp	r3, #0
 800df52:	dd48      	ble.n	800dfe6 <__sflush_r+0xae>
 800df54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df56:	2e00      	cmp	r6, #0
 800df58:	d045      	beq.n	800dfe6 <__sflush_r+0xae>
 800df5a:	2300      	movs	r3, #0
 800df5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800df60:	682f      	ldr	r7, [r5, #0]
 800df62:	6a21      	ldr	r1, [r4, #32]
 800df64:	602b      	str	r3, [r5, #0]
 800df66:	d030      	beq.n	800dfca <__sflush_r+0x92>
 800df68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800df6a:	89a3      	ldrh	r3, [r4, #12]
 800df6c:	0759      	lsls	r1, r3, #29
 800df6e:	d505      	bpl.n	800df7c <__sflush_r+0x44>
 800df70:	6863      	ldr	r3, [r4, #4]
 800df72:	1ad2      	subs	r2, r2, r3
 800df74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800df76:	b10b      	cbz	r3, 800df7c <__sflush_r+0x44>
 800df78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800df7a:	1ad2      	subs	r2, r2, r3
 800df7c:	2300      	movs	r3, #0
 800df7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df80:	6a21      	ldr	r1, [r4, #32]
 800df82:	4628      	mov	r0, r5
 800df84:	47b0      	blx	r6
 800df86:	1c43      	adds	r3, r0, #1
 800df88:	89a3      	ldrh	r3, [r4, #12]
 800df8a:	d106      	bne.n	800df9a <__sflush_r+0x62>
 800df8c:	6829      	ldr	r1, [r5, #0]
 800df8e:	291d      	cmp	r1, #29
 800df90:	d82b      	bhi.n	800dfea <__sflush_r+0xb2>
 800df92:	4a2a      	ldr	r2, [pc, #168]	@ (800e03c <__sflush_r+0x104>)
 800df94:	410a      	asrs	r2, r1
 800df96:	07d6      	lsls	r6, r2, #31
 800df98:	d427      	bmi.n	800dfea <__sflush_r+0xb2>
 800df9a:	2200      	movs	r2, #0
 800df9c:	04d9      	lsls	r1, r3, #19
 800df9e:	6062      	str	r2, [r4, #4]
 800dfa0:	6922      	ldr	r2, [r4, #16]
 800dfa2:	6022      	str	r2, [r4, #0]
 800dfa4:	d504      	bpl.n	800dfb0 <__sflush_r+0x78>
 800dfa6:	1c42      	adds	r2, r0, #1
 800dfa8:	d101      	bne.n	800dfae <__sflush_r+0x76>
 800dfaa:	682b      	ldr	r3, [r5, #0]
 800dfac:	b903      	cbnz	r3, 800dfb0 <__sflush_r+0x78>
 800dfae:	6560      	str	r0, [r4, #84]	@ 0x54
 800dfb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dfb2:	602f      	str	r7, [r5, #0]
 800dfb4:	b1b9      	cbz	r1, 800dfe6 <__sflush_r+0xae>
 800dfb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfba:	4299      	cmp	r1, r3
 800dfbc:	d002      	beq.n	800dfc4 <__sflush_r+0x8c>
 800dfbe:	4628      	mov	r0, r5
 800dfc0:	f7fe f996 	bl	800c2f0 <_free_r>
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	6363      	str	r3, [r4, #52]	@ 0x34
 800dfc8:	e00d      	b.n	800dfe6 <__sflush_r+0xae>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	4628      	mov	r0, r5
 800dfce:	47b0      	blx	r6
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	1c50      	adds	r0, r2, #1
 800dfd4:	d1c9      	bne.n	800df6a <__sflush_r+0x32>
 800dfd6:	682b      	ldr	r3, [r5, #0]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d0c6      	beq.n	800df6a <__sflush_r+0x32>
 800dfdc:	2b1d      	cmp	r3, #29
 800dfde:	d001      	beq.n	800dfe4 <__sflush_r+0xac>
 800dfe0:	2b16      	cmp	r3, #22
 800dfe2:	d11d      	bne.n	800e020 <__sflush_r+0xe8>
 800dfe4:	602f      	str	r7, [r5, #0]
 800dfe6:	2000      	movs	r0, #0
 800dfe8:	e021      	b.n	800e02e <__sflush_r+0xf6>
 800dfea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfee:	b21b      	sxth	r3, r3
 800dff0:	e01a      	b.n	800e028 <__sflush_r+0xf0>
 800dff2:	690f      	ldr	r7, [r1, #16]
 800dff4:	2f00      	cmp	r7, #0
 800dff6:	d0f6      	beq.n	800dfe6 <__sflush_r+0xae>
 800dff8:	0793      	lsls	r3, r2, #30
 800dffa:	680e      	ldr	r6, [r1, #0]
 800dffc:	600f      	str	r7, [r1, #0]
 800dffe:	bf0c      	ite	eq
 800e000:	694b      	ldreq	r3, [r1, #20]
 800e002:	2300      	movne	r3, #0
 800e004:	eba6 0807 	sub.w	r8, r6, r7
 800e008:	608b      	str	r3, [r1, #8]
 800e00a:	f1b8 0f00 	cmp.w	r8, #0
 800e00e:	ddea      	ble.n	800dfe6 <__sflush_r+0xae>
 800e010:	4643      	mov	r3, r8
 800e012:	463a      	mov	r2, r7
 800e014:	6a21      	ldr	r1, [r4, #32]
 800e016:	4628      	mov	r0, r5
 800e018:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e01a:	47b0      	blx	r6
 800e01c:	2800      	cmp	r0, #0
 800e01e:	dc08      	bgt.n	800e032 <__sflush_r+0xfa>
 800e020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e028:	f04f 30ff 	mov.w	r0, #4294967295
 800e02c:	81a3      	strh	r3, [r4, #12]
 800e02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e032:	4407      	add	r7, r0
 800e034:	eba8 0800 	sub.w	r8, r8, r0
 800e038:	e7e7      	b.n	800e00a <__sflush_r+0xd2>
 800e03a:	bf00      	nop
 800e03c:	dfbffffe 	.word	0xdfbffffe

0800e040 <_fflush_r>:
 800e040:	b538      	push	{r3, r4, r5, lr}
 800e042:	690b      	ldr	r3, [r1, #16]
 800e044:	4605      	mov	r5, r0
 800e046:	460c      	mov	r4, r1
 800e048:	b913      	cbnz	r3, 800e050 <_fflush_r+0x10>
 800e04a:	2500      	movs	r5, #0
 800e04c:	4628      	mov	r0, r5
 800e04e:	bd38      	pop	{r3, r4, r5, pc}
 800e050:	b118      	cbz	r0, 800e05a <_fflush_r+0x1a>
 800e052:	6a03      	ldr	r3, [r0, #32]
 800e054:	b90b      	cbnz	r3, 800e05a <_fflush_r+0x1a>
 800e056:	f7fd f8b7 	bl	800b1c8 <__sinit>
 800e05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d0f3      	beq.n	800e04a <_fflush_r+0xa>
 800e062:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e064:	07d0      	lsls	r0, r2, #31
 800e066:	d404      	bmi.n	800e072 <_fflush_r+0x32>
 800e068:	0599      	lsls	r1, r3, #22
 800e06a:	d402      	bmi.n	800e072 <_fflush_r+0x32>
 800e06c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e06e:	f7fd fad6 	bl	800b61e <__retarget_lock_acquire_recursive>
 800e072:	4628      	mov	r0, r5
 800e074:	4621      	mov	r1, r4
 800e076:	f7ff ff5f 	bl	800df38 <__sflush_r>
 800e07a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e07c:	4605      	mov	r5, r0
 800e07e:	07da      	lsls	r2, r3, #31
 800e080:	d4e4      	bmi.n	800e04c <_fflush_r+0xc>
 800e082:	89a3      	ldrh	r3, [r4, #12]
 800e084:	059b      	lsls	r3, r3, #22
 800e086:	d4e1      	bmi.n	800e04c <_fflush_r+0xc>
 800e088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e08a:	f7fd fac9 	bl	800b620 <__retarget_lock_release_recursive>
 800e08e:	e7dd      	b.n	800e04c <_fflush_r+0xc>

0800e090 <__swhatbuf_r>:
 800e090:	b570      	push	{r4, r5, r6, lr}
 800e092:	460c      	mov	r4, r1
 800e094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e098:	b096      	sub	sp, #88	@ 0x58
 800e09a:	4615      	mov	r5, r2
 800e09c:	2900      	cmp	r1, #0
 800e09e:	461e      	mov	r6, r3
 800e0a0:	da0c      	bge.n	800e0bc <__swhatbuf_r+0x2c>
 800e0a2:	89a3      	ldrh	r3, [r4, #12]
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e0aa:	bf14      	ite	ne
 800e0ac:	2340      	movne	r3, #64	@ 0x40
 800e0ae:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e0b2:	2000      	movs	r0, #0
 800e0b4:	6031      	str	r1, [r6, #0]
 800e0b6:	602b      	str	r3, [r5, #0]
 800e0b8:	b016      	add	sp, #88	@ 0x58
 800e0ba:	bd70      	pop	{r4, r5, r6, pc}
 800e0bc:	466a      	mov	r2, sp
 800e0be:	f000 f875 	bl	800e1ac <_fstat_r>
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	dbed      	blt.n	800e0a2 <__swhatbuf_r+0x12>
 800e0c6:	9901      	ldr	r1, [sp, #4]
 800e0c8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e0cc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e0d0:	4259      	negs	r1, r3
 800e0d2:	4159      	adcs	r1, r3
 800e0d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e0d8:	e7eb      	b.n	800e0b2 <__swhatbuf_r+0x22>

0800e0da <__smakebuf_r>:
 800e0da:	898b      	ldrh	r3, [r1, #12]
 800e0dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0de:	079d      	lsls	r5, r3, #30
 800e0e0:	4606      	mov	r6, r0
 800e0e2:	460c      	mov	r4, r1
 800e0e4:	d507      	bpl.n	800e0f6 <__smakebuf_r+0x1c>
 800e0e6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e0ea:	6023      	str	r3, [r4, #0]
 800e0ec:	6123      	str	r3, [r4, #16]
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	6163      	str	r3, [r4, #20]
 800e0f2:	b003      	add	sp, #12
 800e0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0f6:	ab01      	add	r3, sp, #4
 800e0f8:	466a      	mov	r2, sp
 800e0fa:	f7ff ffc9 	bl	800e090 <__swhatbuf_r>
 800e0fe:	9f00      	ldr	r7, [sp, #0]
 800e100:	4605      	mov	r5, r0
 800e102:	4630      	mov	r0, r6
 800e104:	4639      	mov	r1, r7
 800e106:	f7fc f8db 	bl	800a2c0 <_malloc_r>
 800e10a:	b948      	cbnz	r0, 800e120 <__smakebuf_r+0x46>
 800e10c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e110:	059a      	lsls	r2, r3, #22
 800e112:	d4ee      	bmi.n	800e0f2 <__smakebuf_r+0x18>
 800e114:	f023 0303 	bic.w	r3, r3, #3
 800e118:	f043 0302 	orr.w	r3, r3, #2
 800e11c:	81a3      	strh	r3, [r4, #12]
 800e11e:	e7e2      	b.n	800e0e6 <__smakebuf_r+0xc>
 800e120:	89a3      	ldrh	r3, [r4, #12]
 800e122:	6020      	str	r0, [r4, #0]
 800e124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e128:	81a3      	strh	r3, [r4, #12]
 800e12a:	9b01      	ldr	r3, [sp, #4]
 800e12c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e130:	b15b      	cbz	r3, 800e14a <__smakebuf_r+0x70>
 800e132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e136:	4630      	mov	r0, r6
 800e138:	f000 f84a 	bl	800e1d0 <_isatty_r>
 800e13c:	b128      	cbz	r0, 800e14a <__smakebuf_r+0x70>
 800e13e:	89a3      	ldrh	r3, [r4, #12]
 800e140:	f023 0303 	bic.w	r3, r3, #3
 800e144:	f043 0301 	orr.w	r3, r3, #1
 800e148:	81a3      	strh	r3, [r4, #12]
 800e14a:	89a3      	ldrh	r3, [r4, #12]
 800e14c:	431d      	orrs	r5, r3
 800e14e:	81a5      	strh	r5, [r4, #12]
 800e150:	e7cf      	b.n	800e0f2 <__smakebuf_r+0x18>

0800e152 <memmove>:
 800e152:	4288      	cmp	r0, r1
 800e154:	b510      	push	{r4, lr}
 800e156:	eb01 0402 	add.w	r4, r1, r2
 800e15a:	d902      	bls.n	800e162 <memmove+0x10>
 800e15c:	4284      	cmp	r4, r0
 800e15e:	4623      	mov	r3, r4
 800e160:	d807      	bhi.n	800e172 <memmove+0x20>
 800e162:	1e43      	subs	r3, r0, #1
 800e164:	42a1      	cmp	r1, r4
 800e166:	d008      	beq.n	800e17a <memmove+0x28>
 800e168:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e16c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e170:	e7f8      	b.n	800e164 <memmove+0x12>
 800e172:	4402      	add	r2, r0
 800e174:	4601      	mov	r1, r0
 800e176:	428a      	cmp	r2, r1
 800e178:	d100      	bne.n	800e17c <memmove+0x2a>
 800e17a:	bd10      	pop	{r4, pc}
 800e17c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e180:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e184:	e7f7      	b.n	800e176 <memmove+0x24>

0800e186 <strncmp>:
 800e186:	b510      	push	{r4, lr}
 800e188:	b16a      	cbz	r2, 800e1a6 <strncmp+0x20>
 800e18a:	3901      	subs	r1, #1
 800e18c:	1884      	adds	r4, r0, r2
 800e18e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e192:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e196:	429a      	cmp	r2, r3
 800e198:	d103      	bne.n	800e1a2 <strncmp+0x1c>
 800e19a:	42a0      	cmp	r0, r4
 800e19c:	d001      	beq.n	800e1a2 <strncmp+0x1c>
 800e19e:	2a00      	cmp	r2, #0
 800e1a0:	d1f5      	bne.n	800e18e <strncmp+0x8>
 800e1a2:	1ad0      	subs	r0, r2, r3
 800e1a4:	bd10      	pop	{r4, pc}
 800e1a6:	4610      	mov	r0, r2
 800e1a8:	e7fc      	b.n	800e1a4 <strncmp+0x1e>
	...

0800e1ac <_fstat_r>:
 800e1ac:	b538      	push	{r3, r4, r5, lr}
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	4d06      	ldr	r5, [pc, #24]	@ (800e1cc <_fstat_r+0x20>)
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	4608      	mov	r0, r1
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	602b      	str	r3, [r5, #0]
 800e1ba:	f7f4 fe9d 	bl	8002ef8 <_fstat>
 800e1be:	1c43      	adds	r3, r0, #1
 800e1c0:	d102      	bne.n	800e1c8 <_fstat_r+0x1c>
 800e1c2:	682b      	ldr	r3, [r5, #0]
 800e1c4:	b103      	cbz	r3, 800e1c8 <_fstat_r+0x1c>
 800e1c6:	6023      	str	r3, [r4, #0]
 800e1c8:	bd38      	pop	{r3, r4, r5, pc}
 800e1ca:	bf00      	nop
 800e1cc:	200005e4 	.word	0x200005e4

0800e1d0 <_isatty_r>:
 800e1d0:	b538      	push	{r3, r4, r5, lr}
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	4d05      	ldr	r5, [pc, #20]	@ (800e1ec <_isatty_r+0x1c>)
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	4608      	mov	r0, r1
 800e1da:	602b      	str	r3, [r5, #0]
 800e1dc:	f7f4 fe9c 	bl	8002f18 <_isatty>
 800e1e0:	1c43      	adds	r3, r0, #1
 800e1e2:	d102      	bne.n	800e1ea <_isatty_r+0x1a>
 800e1e4:	682b      	ldr	r3, [r5, #0]
 800e1e6:	b103      	cbz	r3, 800e1ea <_isatty_r+0x1a>
 800e1e8:	6023      	str	r3, [r4, #0]
 800e1ea:	bd38      	pop	{r3, r4, r5, pc}
 800e1ec:	200005e4 	.word	0x200005e4

0800e1f0 <memcpy>:
 800e1f0:	440a      	add	r2, r1
 800e1f2:	1e43      	subs	r3, r0, #1
 800e1f4:	4291      	cmp	r1, r2
 800e1f6:	d100      	bne.n	800e1fa <memcpy+0xa>
 800e1f8:	4770      	bx	lr
 800e1fa:	b510      	push	{r4, lr}
 800e1fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e200:	4291      	cmp	r1, r2
 800e202:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e206:	d1f9      	bne.n	800e1fc <memcpy+0xc>
 800e208:	bd10      	pop	{r4, pc}
 800e20a:	0000      	movs	r0, r0
 800e20c:	0000      	movs	r0, r0
	...

0800e210 <nan>:
 800e210:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e218 <nan+0x8>
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop
 800e218:	00000000 	.word	0x00000000
 800e21c:	7ff80000 	.word	0x7ff80000

0800e220 <__assert_func>:
 800e220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e222:	4614      	mov	r4, r2
 800e224:	461a      	mov	r2, r3
 800e226:	4b09      	ldr	r3, [pc, #36]	@ (800e24c <__assert_func+0x2c>)
 800e228:	4605      	mov	r5, r0
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	68d8      	ldr	r0, [r3, #12]
 800e22e:	b954      	cbnz	r4, 800e246 <__assert_func+0x26>
 800e230:	4b07      	ldr	r3, [pc, #28]	@ (800e250 <__assert_func+0x30>)
 800e232:	461c      	mov	r4, r3
 800e234:	9100      	str	r1, [sp, #0]
 800e236:	4907      	ldr	r1, [pc, #28]	@ (800e254 <__assert_func+0x34>)
 800e238:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e23c:	462b      	mov	r3, r5
 800e23e:	f000 fba3 	bl	800e988 <fiprintf>
 800e242:	f000 fbb3 	bl	800e9ac <abort>
 800e246:	4b04      	ldr	r3, [pc, #16]	@ (800e258 <__assert_func+0x38>)
 800e248:	e7f4      	b.n	800e234 <__assert_func+0x14>
 800e24a:	bf00      	nop
 800e24c:	20000060 	.word	0x20000060
 800e250:	0800f19d 	.word	0x0800f19d
 800e254:	0800f16f 	.word	0x0800f16f
 800e258:	0800f162 	.word	0x0800f162

0800e25c <_calloc_r>:
 800e25c:	b570      	push	{r4, r5, r6, lr}
 800e25e:	fba1 5402 	umull	r5, r4, r1, r2
 800e262:	b93c      	cbnz	r4, 800e274 <_calloc_r+0x18>
 800e264:	4629      	mov	r1, r5
 800e266:	f7fc f82b 	bl	800a2c0 <_malloc_r>
 800e26a:	4606      	mov	r6, r0
 800e26c:	b928      	cbnz	r0, 800e27a <_calloc_r+0x1e>
 800e26e:	2600      	movs	r6, #0
 800e270:	4630      	mov	r0, r6
 800e272:	bd70      	pop	{r4, r5, r6, pc}
 800e274:	220c      	movs	r2, #12
 800e276:	6002      	str	r2, [r0, #0]
 800e278:	e7f9      	b.n	800e26e <_calloc_r+0x12>
 800e27a:	462a      	mov	r2, r5
 800e27c:	4621      	mov	r1, r4
 800e27e:	f7fd f941 	bl	800b504 <memset>
 800e282:	e7f5      	b.n	800e270 <_calloc_r+0x14>

0800e284 <rshift>:
 800e284:	6903      	ldr	r3, [r0, #16]
 800e286:	114a      	asrs	r2, r1, #5
 800e288:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e28c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e290:	f100 0414 	add.w	r4, r0, #20
 800e294:	dd45      	ble.n	800e322 <rshift+0x9e>
 800e296:	f011 011f 	ands.w	r1, r1, #31
 800e29a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e29e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e2a2:	d10c      	bne.n	800e2be <rshift+0x3a>
 800e2a4:	f100 0710 	add.w	r7, r0, #16
 800e2a8:	4629      	mov	r1, r5
 800e2aa:	42b1      	cmp	r1, r6
 800e2ac:	d334      	bcc.n	800e318 <rshift+0x94>
 800e2ae:	1a9b      	subs	r3, r3, r2
 800e2b0:	1eea      	subs	r2, r5, #3
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	4296      	cmp	r6, r2
 800e2b6:	bf38      	it	cc
 800e2b8:	2300      	movcc	r3, #0
 800e2ba:	4423      	add	r3, r4
 800e2bc:	e015      	b.n	800e2ea <rshift+0x66>
 800e2be:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e2c2:	f1c1 0820 	rsb	r8, r1, #32
 800e2c6:	f105 0e04 	add.w	lr, r5, #4
 800e2ca:	46a1      	mov	r9, r4
 800e2cc:	40cf      	lsrs	r7, r1
 800e2ce:	4576      	cmp	r6, lr
 800e2d0:	46f4      	mov	ip, lr
 800e2d2:	d815      	bhi.n	800e300 <rshift+0x7c>
 800e2d4:	1a9a      	subs	r2, r3, r2
 800e2d6:	3501      	adds	r5, #1
 800e2d8:	0092      	lsls	r2, r2, #2
 800e2da:	3a04      	subs	r2, #4
 800e2dc:	42ae      	cmp	r6, r5
 800e2de:	bf38      	it	cc
 800e2e0:	2200      	movcc	r2, #0
 800e2e2:	18a3      	adds	r3, r4, r2
 800e2e4:	50a7      	str	r7, [r4, r2]
 800e2e6:	b107      	cbz	r7, 800e2ea <rshift+0x66>
 800e2e8:	3304      	adds	r3, #4
 800e2ea:	1b1a      	subs	r2, r3, r4
 800e2ec:	42a3      	cmp	r3, r4
 800e2ee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e2f2:	bf08      	it	eq
 800e2f4:	2300      	moveq	r3, #0
 800e2f6:	6102      	str	r2, [r0, #16]
 800e2f8:	bf08      	it	eq
 800e2fa:	6143      	streq	r3, [r0, #20]
 800e2fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e300:	f8dc c000 	ldr.w	ip, [ip]
 800e304:	fa0c fc08 	lsl.w	ip, ip, r8
 800e308:	ea4c 0707 	orr.w	r7, ip, r7
 800e30c:	f849 7b04 	str.w	r7, [r9], #4
 800e310:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e314:	40cf      	lsrs	r7, r1
 800e316:	e7da      	b.n	800e2ce <rshift+0x4a>
 800e318:	f851 cb04 	ldr.w	ip, [r1], #4
 800e31c:	f847 cf04 	str.w	ip, [r7, #4]!
 800e320:	e7c3      	b.n	800e2aa <rshift+0x26>
 800e322:	4623      	mov	r3, r4
 800e324:	e7e1      	b.n	800e2ea <rshift+0x66>

0800e326 <__hexdig_fun>:
 800e326:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e32a:	2b09      	cmp	r3, #9
 800e32c:	d802      	bhi.n	800e334 <__hexdig_fun+0xe>
 800e32e:	3820      	subs	r0, #32
 800e330:	b2c0      	uxtb	r0, r0
 800e332:	4770      	bx	lr
 800e334:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e338:	2b05      	cmp	r3, #5
 800e33a:	d801      	bhi.n	800e340 <__hexdig_fun+0x1a>
 800e33c:	3847      	subs	r0, #71	@ 0x47
 800e33e:	e7f7      	b.n	800e330 <__hexdig_fun+0xa>
 800e340:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e344:	2b05      	cmp	r3, #5
 800e346:	d801      	bhi.n	800e34c <__hexdig_fun+0x26>
 800e348:	3827      	subs	r0, #39	@ 0x27
 800e34a:	e7f1      	b.n	800e330 <__hexdig_fun+0xa>
 800e34c:	2000      	movs	r0, #0
 800e34e:	4770      	bx	lr

0800e350 <__gethex>:
 800e350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e354:	b085      	sub	sp, #20
 800e356:	468a      	mov	sl, r1
 800e358:	4690      	mov	r8, r2
 800e35a:	9302      	str	r3, [sp, #8]
 800e35c:	680b      	ldr	r3, [r1, #0]
 800e35e:	9001      	str	r0, [sp, #4]
 800e360:	1c9c      	adds	r4, r3, #2
 800e362:	46a1      	mov	r9, r4
 800e364:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e368:	2830      	cmp	r0, #48	@ 0x30
 800e36a:	d0fa      	beq.n	800e362 <__gethex+0x12>
 800e36c:	eba9 0303 	sub.w	r3, r9, r3
 800e370:	f1a3 0b02 	sub.w	fp, r3, #2
 800e374:	f7ff ffd7 	bl	800e326 <__hexdig_fun>
 800e378:	4605      	mov	r5, r0
 800e37a:	2800      	cmp	r0, #0
 800e37c:	d166      	bne.n	800e44c <__gethex+0xfc>
 800e37e:	2201      	movs	r2, #1
 800e380:	499e      	ldr	r1, [pc, #632]	@ (800e5fc <__gethex+0x2ac>)
 800e382:	4648      	mov	r0, r9
 800e384:	f7ff feff 	bl	800e186 <strncmp>
 800e388:	4607      	mov	r7, r0
 800e38a:	2800      	cmp	r0, #0
 800e38c:	d165      	bne.n	800e45a <__gethex+0x10a>
 800e38e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e392:	4626      	mov	r6, r4
 800e394:	f7ff ffc7 	bl	800e326 <__hexdig_fun>
 800e398:	2800      	cmp	r0, #0
 800e39a:	d060      	beq.n	800e45e <__gethex+0x10e>
 800e39c:	4623      	mov	r3, r4
 800e39e:	7818      	ldrb	r0, [r3, #0]
 800e3a0:	4699      	mov	r9, r3
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	2830      	cmp	r0, #48	@ 0x30
 800e3a6:	d0fa      	beq.n	800e39e <__gethex+0x4e>
 800e3a8:	f7ff ffbd 	bl	800e326 <__hexdig_fun>
 800e3ac:	fab0 f580 	clz	r5, r0
 800e3b0:	f04f 0b01 	mov.w	fp, #1
 800e3b4:	096d      	lsrs	r5, r5, #5
 800e3b6:	464a      	mov	r2, r9
 800e3b8:	4616      	mov	r6, r2
 800e3ba:	3201      	adds	r2, #1
 800e3bc:	7830      	ldrb	r0, [r6, #0]
 800e3be:	f7ff ffb2 	bl	800e326 <__hexdig_fun>
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	d1f8      	bne.n	800e3b8 <__gethex+0x68>
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	498c      	ldr	r1, [pc, #560]	@ (800e5fc <__gethex+0x2ac>)
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	f7ff fedb 	bl	800e186 <strncmp>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	d13e      	bne.n	800e452 <__gethex+0x102>
 800e3d4:	b944      	cbnz	r4, 800e3e8 <__gethex+0x98>
 800e3d6:	1c74      	adds	r4, r6, #1
 800e3d8:	4622      	mov	r2, r4
 800e3da:	4616      	mov	r6, r2
 800e3dc:	3201      	adds	r2, #1
 800e3de:	7830      	ldrb	r0, [r6, #0]
 800e3e0:	f7ff ffa1 	bl	800e326 <__hexdig_fun>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	d1f8      	bne.n	800e3da <__gethex+0x8a>
 800e3e8:	1ba4      	subs	r4, r4, r6
 800e3ea:	00a7      	lsls	r7, r4, #2
 800e3ec:	7833      	ldrb	r3, [r6, #0]
 800e3ee:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e3f2:	2b50      	cmp	r3, #80	@ 0x50
 800e3f4:	d13d      	bne.n	800e472 <__gethex+0x122>
 800e3f6:	7873      	ldrb	r3, [r6, #1]
 800e3f8:	2b2b      	cmp	r3, #43	@ 0x2b
 800e3fa:	d032      	beq.n	800e462 <__gethex+0x112>
 800e3fc:	2b2d      	cmp	r3, #45	@ 0x2d
 800e3fe:	d033      	beq.n	800e468 <__gethex+0x118>
 800e400:	1c71      	adds	r1, r6, #1
 800e402:	2400      	movs	r4, #0
 800e404:	7808      	ldrb	r0, [r1, #0]
 800e406:	f7ff ff8e 	bl	800e326 <__hexdig_fun>
 800e40a:	1e43      	subs	r3, r0, #1
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	2b18      	cmp	r3, #24
 800e410:	d82f      	bhi.n	800e472 <__gethex+0x122>
 800e412:	f1a0 0210 	sub.w	r2, r0, #16
 800e416:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e41a:	f7ff ff84 	bl	800e326 <__hexdig_fun>
 800e41e:	f100 3cff 	add.w	ip, r0, #4294967295
 800e422:	230a      	movs	r3, #10
 800e424:	fa5f fc8c 	uxtb.w	ip, ip
 800e428:	f1bc 0f18 	cmp.w	ip, #24
 800e42c:	d91e      	bls.n	800e46c <__gethex+0x11c>
 800e42e:	b104      	cbz	r4, 800e432 <__gethex+0xe2>
 800e430:	4252      	negs	r2, r2
 800e432:	4417      	add	r7, r2
 800e434:	f8ca 1000 	str.w	r1, [sl]
 800e438:	b1ed      	cbz	r5, 800e476 <__gethex+0x126>
 800e43a:	f1bb 0f00 	cmp.w	fp, #0
 800e43e:	bf0c      	ite	eq
 800e440:	2506      	moveq	r5, #6
 800e442:	2500      	movne	r5, #0
 800e444:	4628      	mov	r0, r5
 800e446:	b005      	add	sp, #20
 800e448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e44c:	2500      	movs	r5, #0
 800e44e:	462c      	mov	r4, r5
 800e450:	e7b1      	b.n	800e3b6 <__gethex+0x66>
 800e452:	2c00      	cmp	r4, #0
 800e454:	d1c8      	bne.n	800e3e8 <__gethex+0x98>
 800e456:	4627      	mov	r7, r4
 800e458:	e7c8      	b.n	800e3ec <__gethex+0x9c>
 800e45a:	464e      	mov	r6, r9
 800e45c:	462f      	mov	r7, r5
 800e45e:	2501      	movs	r5, #1
 800e460:	e7c4      	b.n	800e3ec <__gethex+0x9c>
 800e462:	2400      	movs	r4, #0
 800e464:	1cb1      	adds	r1, r6, #2
 800e466:	e7cd      	b.n	800e404 <__gethex+0xb4>
 800e468:	2401      	movs	r4, #1
 800e46a:	e7fb      	b.n	800e464 <__gethex+0x114>
 800e46c:	fb03 0002 	mla	r0, r3, r2, r0
 800e470:	e7cf      	b.n	800e412 <__gethex+0xc2>
 800e472:	4631      	mov	r1, r6
 800e474:	e7de      	b.n	800e434 <__gethex+0xe4>
 800e476:	eba6 0309 	sub.w	r3, r6, r9
 800e47a:	4629      	mov	r1, r5
 800e47c:	3b01      	subs	r3, #1
 800e47e:	2b07      	cmp	r3, #7
 800e480:	dc0a      	bgt.n	800e498 <__gethex+0x148>
 800e482:	9801      	ldr	r0, [sp, #4]
 800e484:	f7fd ff7e 	bl	800c384 <_Balloc>
 800e488:	4604      	mov	r4, r0
 800e48a:	b940      	cbnz	r0, 800e49e <__gethex+0x14e>
 800e48c:	4b5c      	ldr	r3, [pc, #368]	@ (800e600 <__gethex+0x2b0>)
 800e48e:	4602      	mov	r2, r0
 800e490:	21e4      	movs	r1, #228	@ 0xe4
 800e492:	485c      	ldr	r0, [pc, #368]	@ (800e604 <__gethex+0x2b4>)
 800e494:	f7ff fec4 	bl	800e220 <__assert_func>
 800e498:	3101      	adds	r1, #1
 800e49a:	105b      	asrs	r3, r3, #1
 800e49c:	e7ef      	b.n	800e47e <__gethex+0x12e>
 800e49e:	f100 0a14 	add.w	sl, r0, #20
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	4655      	mov	r5, sl
 800e4a6:	469b      	mov	fp, r3
 800e4a8:	45b1      	cmp	r9, r6
 800e4aa:	d337      	bcc.n	800e51c <__gethex+0x1cc>
 800e4ac:	f845 bb04 	str.w	fp, [r5], #4
 800e4b0:	eba5 050a 	sub.w	r5, r5, sl
 800e4b4:	4658      	mov	r0, fp
 800e4b6:	10ad      	asrs	r5, r5, #2
 800e4b8:	6125      	str	r5, [r4, #16]
 800e4ba:	016d      	lsls	r5, r5, #5
 800e4bc:	f7fe f856 	bl	800c56c <__hi0bits>
 800e4c0:	f8d8 6000 	ldr.w	r6, [r8]
 800e4c4:	1a2d      	subs	r5, r5, r0
 800e4c6:	42b5      	cmp	r5, r6
 800e4c8:	dd54      	ble.n	800e574 <__gethex+0x224>
 800e4ca:	1bad      	subs	r5, r5, r6
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	4629      	mov	r1, r5
 800e4d0:	f7fe fbf3 	bl	800ccba <__any_on>
 800e4d4:	4681      	mov	r9, r0
 800e4d6:	b178      	cbz	r0, 800e4f8 <__gethex+0x1a8>
 800e4d8:	1e6b      	subs	r3, r5, #1
 800e4da:	f04f 0901 	mov.w	r9, #1
 800e4de:	1159      	asrs	r1, r3, #5
 800e4e0:	f003 021f 	and.w	r2, r3, #31
 800e4e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e4e8:	fa09 f202 	lsl.w	r2, r9, r2
 800e4ec:	420a      	tst	r2, r1
 800e4ee:	d003      	beq.n	800e4f8 <__gethex+0x1a8>
 800e4f0:	454b      	cmp	r3, r9
 800e4f2:	dc36      	bgt.n	800e562 <__gethex+0x212>
 800e4f4:	f04f 0902 	mov.w	r9, #2
 800e4f8:	442f      	add	r7, r5
 800e4fa:	4629      	mov	r1, r5
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f7ff fec1 	bl	800e284 <rshift>
 800e502:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e506:	42bb      	cmp	r3, r7
 800e508:	da42      	bge.n	800e590 <__gethex+0x240>
 800e50a:	4621      	mov	r1, r4
 800e50c:	9801      	ldr	r0, [sp, #4]
 800e50e:	f7fd ff79 	bl	800c404 <_Bfree>
 800e512:	2300      	movs	r3, #0
 800e514:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e516:	25a3      	movs	r5, #163	@ 0xa3
 800e518:	6013      	str	r3, [r2, #0]
 800e51a:	e793      	b.n	800e444 <__gethex+0xf4>
 800e51c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e520:	2a2e      	cmp	r2, #46	@ 0x2e
 800e522:	d012      	beq.n	800e54a <__gethex+0x1fa>
 800e524:	2b20      	cmp	r3, #32
 800e526:	d104      	bne.n	800e532 <__gethex+0x1e2>
 800e528:	f845 bb04 	str.w	fp, [r5], #4
 800e52c:	f04f 0b00 	mov.w	fp, #0
 800e530:	465b      	mov	r3, fp
 800e532:	7830      	ldrb	r0, [r6, #0]
 800e534:	9303      	str	r3, [sp, #12]
 800e536:	f7ff fef6 	bl	800e326 <__hexdig_fun>
 800e53a:	9b03      	ldr	r3, [sp, #12]
 800e53c:	f000 000f 	and.w	r0, r0, #15
 800e540:	4098      	lsls	r0, r3
 800e542:	3304      	adds	r3, #4
 800e544:	ea4b 0b00 	orr.w	fp, fp, r0
 800e548:	e7ae      	b.n	800e4a8 <__gethex+0x158>
 800e54a:	45b1      	cmp	r9, r6
 800e54c:	d8ea      	bhi.n	800e524 <__gethex+0x1d4>
 800e54e:	2201      	movs	r2, #1
 800e550:	492a      	ldr	r1, [pc, #168]	@ (800e5fc <__gethex+0x2ac>)
 800e552:	4630      	mov	r0, r6
 800e554:	9303      	str	r3, [sp, #12]
 800e556:	f7ff fe16 	bl	800e186 <strncmp>
 800e55a:	9b03      	ldr	r3, [sp, #12]
 800e55c:	2800      	cmp	r0, #0
 800e55e:	d1e1      	bne.n	800e524 <__gethex+0x1d4>
 800e560:	e7a2      	b.n	800e4a8 <__gethex+0x158>
 800e562:	1ea9      	subs	r1, r5, #2
 800e564:	4620      	mov	r0, r4
 800e566:	f7fe fba8 	bl	800ccba <__any_on>
 800e56a:	2800      	cmp	r0, #0
 800e56c:	d0c2      	beq.n	800e4f4 <__gethex+0x1a4>
 800e56e:	f04f 0903 	mov.w	r9, #3
 800e572:	e7c1      	b.n	800e4f8 <__gethex+0x1a8>
 800e574:	da09      	bge.n	800e58a <__gethex+0x23a>
 800e576:	1b75      	subs	r5, r6, r5
 800e578:	4621      	mov	r1, r4
 800e57a:	9801      	ldr	r0, [sp, #4]
 800e57c:	462a      	mov	r2, r5
 800e57e:	1b7f      	subs	r7, r7, r5
 800e580:	f7fe f95a 	bl	800c838 <__lshift>
 800e584:	4604      	mov	r4, r0
 800e586:	f100 0a14 	add.w	sl, r0, #20
 800e58a:	f04f 0900 	mov.w	r9, #0
 800e58e:	e7b8      	b.n	800e502 <__gethex+0x1b2>
 800e590:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e594:	42bd      	cmp	r5, r7
 800e596:	dd6f      	ble.n	800e678 <__gethex+0x328>
 800e598:	1bed      	subs	r5, r5, r7
 800e59a:	42ae      	cmp	r6, r5
 800e59c:	dc34      	bgt.n	800e608 <__gethex+0x2b8>
 800e59e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e5a2:	2b02      	cmp	r3, #2
 800e5a4:	d022      	beq.n	800e5ec <__gethex+0x29c>
 800e5a6:	2b03      	cmp	r3, #3
 800e5a8:	d024      	beq.n	800e5f4 <__gethex+0x2a4>
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d115      	bne.n	800e5da <__gethex+0x28a>
 800e5ae:	42ae      	cmp	r6, r5
 800e5b0:	d113      	bne.n	800e5da <__gethex+0x28a>
 800e5b2:	2e01      	cmp	r6, #1
 800e5b4:	d10b      	bne.n	800e5ce <__gethex+0x27e>
 800e5b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e5ba:	2562      	movs	r5, #98	@ 0x62
 800e5bc:	9a02      	ldr	r2, [sp, #8]
 800e5be:	6013      	str	r3, [r2, #0]
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	6123      	str	r3, [r4, #16]
 800e5c4:	f8ca 3000 	str.w	r3, [sl]
 800e5c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5ca:	601c      	str	r4, [r3, #0]
 800e5cc:	e73a      	b.n	800e444 <__gethex+0xf4>
 800e5ce:	1e71      	subs	r1, r6, #1
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f7fe fb72 	bl	800ccba <__any_on>
 800e5d6:	2800      	cmp	r0, #0
 800e5d8:	d1ed      	bne.n	800e5b6 <__gethex+0x266>
 800e5da:	4621      	mov	r1, r4
 800e5dc:	9801      	ldr	r0, [sp, #4]
 800e5de:	f7fd ff11 	bl	800c404 <_Bfree>
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5e6:	2550      	movs	r5, #80	@ 0x50
 800e5e8:	6013      	str	r3, [r2, #0]
 800e5ea:	e72b      	b.n	800e444 <__gethex+0xf4>
 800e5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d1f3      	bne.n	800e5da <__gethex+0x28a>
 800e5f2:	e7e0      	b.n	800e5b6 <__gethex+0x266>
 800e5f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d1dd      	bne.n	800e5b6 <__gethex+0x266>
 800e5fa:	e7ee      	b.n	800e5da <__gethex+0x28a>
 800e5fc:	0800eff0 	.word	0x0800eff0
 800e600:	0800ee89 	.word	0x0800ee89
 800e604:	0800f19e 	.word	0x0800f19e
 800e608:	1e6f      	subs	r7, r5, #1
 800e60a:	f1b9 0f00 	cmp.w	r9, #0
 800e60e:	d130      	bne.n	800e672 <__gethex+0x322>
 800e610:	b127      	cbz	r7, 800e61c <__gethex+0x2cc>
 800e612:	4639      	mov	r1, r7
 800e614:	4620      	mov	r0, r4
 800e616:	f7fe fb50 	bl	800ccba <__any_on>
 800e61a:	4681      	mov	r9, r0
 800e61c:	117a      	asrs	r2, r7, #5
 800e61e:	2301      	movs	r3, #1
 800e620:	f007 071f 	and.w	r7, r7, #31
 800e624:	4629      	mov	r1, r5
 800e626:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e62a:	4620      	mov	r0, r4
 800e62c:	40bb      	lsls	r3, r7
 800e62e:	1b76      	subs	r6, r6, r5
 800e630:	2502      	movs	r5, #2
 800e632:	4213      	tst	r3, r2
 800e634:	bf18      	it	ne
 800e636:	f049 0902 	orrne.w	r9, r9, #2
 800e63a:	f7ff fe23 	bl	800e284 <rshift>
 800e63e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e642:	f1b9 0f00 	cmp.w	r9, #0
 800e646:	d047      	beq.n	800e6d8 <__gethex+0x388>
 800e648:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e64c:	2b02      	cmp	r3, #2
 800e64e:	d015      	beq.n	800e67c <__gethex+0x32c>
 800e650:	2b03      	cmp	r3, #3
 800e652:	d017      	beq.n	800e684 <__gethex+0x334>
 800e654:	2b01      	cmp	r3, #1
 800e656:	d109      	bne.n	800e66c <__gethex+0x31c>
 800e658:	f019 0f02 	tst.w	r9, #2
 800e65c:	d006      	beq.n	800e66c <__gethex+0x31c>
 800e65e:	f8da 3000 	ldr.w	r3, [sl]
 800e662:	ea49 0903 	orr.w	r9, r9, r3
 800e666:	f019 0f01 	tst.w	r9, #1
 800e66a:	d10e      	bne.n	800e68a <__gethex+0x33a>
 800e66c:	f045 0510 	orr.w	r5, r5, #16
 800e670:	e032      	b.n	800e6d8 <__gethex+0x388>
 800e672:	f04f 0901 	mov.w	r9, #1
 800e676:	e7d1      	b.n	800e61c <__gethex+0x2cc>
 800e678:	2501      	movs	r5, #1
 800e67a:	e7e2      	b.n	800e642 <__gethex+0x2f2>
 800e67c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e67e:	f1c3 0301 	rsb	r3, r3, #1
 800e682:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e686:	2b00      	cmp	r3, #0
 800e688:	d0f0      	beq.n	800e66c <__gethex+0x31c>
 800e68a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e68e:	f104 0314 	add.w	r3, r4, #20
 800e692:	f04f 0c00 	mov.w	ip, #0
 800e696:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e69a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e6a8:	d01b      	beq.n	800e6e2 <__gethex+0x392>
 800e6aa:	3201      	adds	r2, #1
 800e6ac:	6002      	str	r2, [r0, #0]
 800e6ae:	2d02      	cmp	r5, #2
 800e6b0:	f104 0314 	add.w	r3, r4, #20
 800e6b4:	d13c      	bne.n	800e730 <__gethex+0x3e0>
 800e6b6:	f8d8 2000 	ldr.w	r2, [r8]
 800e6ba:	3a01      	subs	r2, #1
 800e6bc:	42b2      	cmp	r2, r6
 800e6be:	d109      	bne.n	800e6d4 <__gethex+0x384>
 800e6c0:	1171      	asrs	r1, r6, #5
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	f006 061f 	and.w	r6, r6, #31
 800e6c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e6cc:	fa02 f606 	lsl.w	r6, r2, r6
 800e6d0:	421e      	tst	r6, r3
 800e6d2:	d13a      	bne.n	800e74a <__gethex+0x3fa>
 800e6d4:	f045 0520 	orr.w	r5, r5, #32
 800e6d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6da:	601c      	str	r4, [r3, #0]
 800e6dc:	9b02      	ldr	r3, [sp, #8]
 800e6de:	601f      	str	r7, [r3, #0]
 800e6e0:	e6b0      	b.n	800e444 <__gethex+0xf4>
 800e6e2:	4299      	cmp	r1, r3
 800e6e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e6e8:	d8d9      	bhi.n	800e69e <__gethex+0x34e>
 800e6ea:	68a3      	ldr	r3, [r4, #8]
 800e6ec:	459b      	cmp	fp, r3
 800e6ee:	db17      	blt.n	800e720 <__gethex+0x3d0>
 800e6f0:	6861      	ldr	r1, [r4, #4]
 800e6f2:	9801      	ldr	r0, [sp, #4]
 800e6f4:	3101      	adds	r1, #1
 800e6f6:	f7fd fe45 	bl	800c384 <_Balloc>
 800e6fa:	4681      	mov	r9, r0
 800e6fc:	b918      	cbnz	r0, 800e706 <__gethex+0x3b6>
 800e6fe:	4b1a      	ldr	r3, [pc, #104]	@ (800e768 <__gethex+0x418>)
 800e700:	4602      	mov	r2, r0
 800e702:	2184      	movs	r1, #132	@ 0x84
 800e704:	e6c5      	b.n	800e492 <__gethex+0x142>
 800e706:	6922      	ldr	r2, [r4, #16]
 800e708:	f104 010c 	add.w	r1, r4, #12
 800e70c:	300c      	adds	r0, #12
 800e70e:	3202      	adds	r2, #2
 800e710:	0092      	lsls	r2, r2, #2
 800e712:	f7ff fd6d 	bl	800e1f0 <memcpy>
 800e716:	4621      	mov	r1, r4
 800e718:	464c      	mov	r4, r9
 800e71a:	9801      	ldr	r0, [sp, #4]
 800e71c:	f7fd fe72 	bl	800c404 <_Bfree>
 800e720:	6923      	ldr	r3, [r4, #16]
 800e722:	1c5a      	adds	r2, r3, #1
 800e724:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e728:	6122      	str	r2, [r4, #16]
 800e72a:	2201      	movs	r2, #1
 800e72c:	615a      	str	r2, [r3, #20]
 800e72e:	e7be      	b.n	800e6ae <__gethex+0x35e>
 800e730:	6922      	ldr	r2, [r4, #16]
 800e732:	455a      	cmp	r2, fp
 800e734:	dd0b      	ble.n	800e74e <__gethex+0x3fe>
 800e736:	2101      	movs	r1, #1
 800e738:	4620      	mov	r0, r4
 800e73a:	f7ff fda3 	bl	800e284 <rshift>
 800e73e:	3701      	adds	r7, #1
 800e740:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e744:	42bb      	cmp	r3, r7
 800e746:	f6ff aee0 	blt.w	800e50a <__gethex+0x1ba>
 800e74a:	2501      	movs	r5, #1
 800e74c:	e7c2      	b.n	800e6d4 <__gethex+0x384>
 800e74e:	f016 061f 	ands.w	r6, r6, #31
 800e752:	d0fa      	beq.n	800e74a <__gethex+0x3fa>
 800e754:	4453      	add	r3, sl
 800e756:	f1c6 0620 	rsb	r6, r6, #32
 800e75a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e75e:	f7fd ff05 	bl	800c56c <__hi0bits>
 800e762:	42b0      	cmp	r0, r6
 800e764:	dbe7      	blt.n	800e736 <__gethex+0x3e6>
 800e766:	e7f0      	b.n	800e74a <__gethex+0x3fa>
 800e768:	0800ee89 	.word	0x0800ee89

0800e76c <L_shift>:
 800e76c:	f1c2 0208 	rsb	r2, r2, #8
 800e770:	0092      	lsls	r2, r2, #2
 800e772:	b570      	push	{r4, r5, r6, lr}
 800e774:	f1c2 0620 	rsb	r6, r2, #32
 800e778:	6843      	ldr	r3, [r0, #4]
 800e77a:	6804      	ldr	r4, [r0, #0]
 800e77c:	fa03 f506 	lsl.w	r5, r3, r6
 800e780:	40d3      	lsrs	r3, r2
 800e782:	432c      	orrs	r4, r5
 800e784:	6004      	str	r4, [r0, #0]
 800e786:	f840 3f04 	str.w	r3, [r0, #4]!
 800e78a:	4288      	cmp	r0, r1
 800e78c:	d3f4      	bcc.n	800e778 <L_shift+0xc>
 800e78e:	bd70      	pop	{r4, r5, r6, pc}

0800e790 <__match>:
 800e790:	6803      	ldr	r3, [r0, #0]
 800e792:	3301      	adds	r3, #1
 800e794:	b530      	push	{r4, r5, lr}
 800e796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e79a:	b914      	cbnz	r4, 800e7a2 <__match+0x12>
 800e79c:	6003      	str	r3, [r0, #0]
 800e79e:	2001      	movs	r0, #1
 800e7a0:	bd30      	pop	{r4, r5, pc}
 800e7a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e7aa:	2d19      	cmp	r5, #25
 800e7ac:	bf98      	it	ls
 800e7ae:	3220      	addls	r2, #32
 800e7b0:	42a2      	cmp	r2, r4
 800e7b2:	d0f0      	beq.n	800e796 <__match+0x6>
 800e7b4:	2000      	movs	r0, #0
 800e7b6:	e7f3      	b.n	800e7a0 <__match+0x10>

0800e7b8 <__hexnan>:
 800e7b8:	680b      	ldr	r3, [r1, #0]
 800e7ba:	6801      	ldr	r1, [r0, #0]
 800e7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c0:	115e      	asrs	r6, r3, #5
 800e7c2:	f013 031f 	ands.w	r3, r3, #31
 800e7c6:	f04f 0500 	mov.w	r5, #0
 800e7ca:	b087      	sub	sp, #28
 800e7cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e7d0:	4682      	mov	sl, r0
 800e7d2:	4690      	mov	r8, r2
 800e7d4:	46ab      	mov	fp, r5
 800e7d6:	bf18      	it	ne
 800e7d8:	3604      	addne	r6, #4
 800e7da:	9301      	str	r3, [sp, #4]
 800e7dc:	9502      	str	r5, [sp, #8]
 800e7de:	1f37      	subs	r7, r6, #4
 800e7e0:	f846 5c04 	str.w	r5, [r6, #-4]
 800e7e4:	46b9      	mov	r9, r7
 800e7e6:	463c      	mov	r4, r7
 800e7e8:	1c4b      	adds	r3, r1, #1
 800e7ea:	784a      	ldrb	r2, [r1, #1]
 800e7ec:	9303      	str	r3, [sp, #12]
 800e7ee:	b342      	cbz	r2, 800e842 <__hexnan+0x8a>
 800e7f0:	4610      	mov	r0, r2
 800e7f2:	9105      	str	r1, [sp, #20]
 800e7f4:	9204      	str	r2, [sp, #16]
 800e7f6:	f7ff fd96 	bl	800e326 <__hexdig_fun>
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	d151      	bne.n	800e8a2 <__hexnan+0xea>
 800e7fe:	9a04      	ldr	r2, [sp, #16]
 800e800:	9905      	ldr	r1, [sp, #20]
 800e802:	2a20      	cmp	r2, #32
 800e804:	d818      	bhi.n	800e838 <__hexnan+0x80>
 800e806:	9b02      	ldr	r3, [sp, #8]
 800e808:	459b      	cmp	fp, r3
 800e80a:	dd13      	ble.n	800e834 <__hexnan+0x7c>
 800e80c:	454c      	cmp	r4, r9
 800e80e:	d206      	bcs.n	800e81e <__hexnan+0x66>
 800e810:	2d07      	cmp	r5, #7
 800e812:	dc04      	bgt.n	800e81e <__hexnan+0x66>
 800e814:	462a      	mov	r2, r5
 800e816:	4649      	mov	r1, r9
 800e818:	4620      	mov	r0, r4
 800e81a:	f7ff ffa7 	bl	800e76c <L_shift>
 800e81e:	4544      	cmp	r4, r8
 800e820:	d951      	bls.n	800e8c6 <__hexnan+0x10e>
 800e822:	2300      	movs	r3, #0
 800e824:	f1a4 0904 	sub.w	r9, r4, #4
 800e828:	f8cd b008 	str.w	fp, [sp, #8]
 800e82c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e830:	461d      	mov	r5, r3
 800e832:	464c      	mov	r4, r9
 800e834:	9903      	ldr	r1, [sp, #12]
 800e836:	e7d7      	b.n	800e7e8 <__hexnan+0x30>
 800e838:	2a29      	cmp	r2, #41	@ 0x29
 800e83a:	d156      	bne.n	800e8ea <__hexnan+0x132>
 800e83c:	3102      	adds	r1, #2
 800e83e:	f8ca 1000 	str.w	r1, [sl]
 800e842:	f1bb 0f00 	cmp.w	fp, #0
 800e846:	d050      	beq.n	800e8ea <__hexnan+0x132>
 800e848:	454c      	cmp	r4, r9
 800e84a:	d206      	bcs.n	800e85a <__hexnan+0xa2>
 800e84c:	2d07      	cmp	r5, #7
 800e84e:	dc04      	bgt.n	800e85a <__hexnan+0xa2>
 800e850:	462a      	mov	r2, r5
 800e852:	4649      	mov	r1, r9
 800e854:	4620      	mov	r0, r4
 800e856:	f7ff ff89 	bl	800e76c <L_shift>
 800e85a:	4544      	cmp	r4, r8
 800e85c:	d935      	bls.n	800e8ca <__hexnan+0x112>
 800e85e:	f1a8 0204 	sub.w	r2, r8, #4
 800e862:	4623      	mov	r3, r4
 800e864:	f853 1b04 	ldr.w	r1, [r3], #4
 800e868:	429f      	cmp	r7, r3
 800e86a:	f842 1f04 	str.w	r1, [r2, #4]!
 800e86e:	d2f9      	bcs.n	800e864 <__hexnan+0xac>
 800e870:	1b3b      	subs	r3, r7, r4
 800e872:	3e03      	subs	r6, #3
 800e874:	3401      	adds	r4, #1
 800e876:	2200      	movs	r2, #0
 800e878:	f023 0303 	bic.w	r3, r3, #3
 800e87c:	3304      	adds	r3, #4
 800e87e:	42b4      	cmp	r4, r6
 800e880:	bf88      	it	hi
 800e882:	2304      	movhi	r3, #4
 800e884:	4443      	add	r3, r8
 800e886:	f843 2b04 	str.w	r2, [r3], #4
 800e88a:	429f      	cmp	r7, r3
 800e88c:	d2fb      	bcs.n	800e886 <__hexnan+0xce>
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	b91b      	cbnz	r3, 800e89a <__hexnan+0xe2>
 800e892:	4547      	cmp	r7, r8
 800e894:	d127      	bne.n	800e8e6 <__hexnan+0x12e>
 800e896:	2301      	movs	r3, #1
 800e898:	603b      	str	r3, [r7, #0]
 800e89a:	2005      	movs	r0, #5
 800e89c:	b007      	add	sp, #28
 800e89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8a2:	3501      	adds	r5, #1
 800e8a4:	f10b 0b01 	add.w	fp, fp, #1
 800e8a8:	2d08      	cmp	r5, #8
 800e8aa:	dd05      	ble.n	800e8b8 <__hexnan+0x100>
 800e8ac:	4544      	cmp	r4, r8
 800e8ae:	d9c1      	bls.n	800e834 <__hexnan+0x7c>
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	3c04      	subs	r4, #4
 800e8b4:	2501      	movs	r5, #1
 800e8b6:	6023      	str	r3, [r4, #0]
 800e8b8:	6822      	ldr	r2, [r4, #0]
 800e8ba:	f000 000f 	and.w	r0, r0, #15
 800e8be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e8c2:	6020      	str	r0, [r4, #0]
 800e8c4:	e7b6      	b.n	800e834 <__hexnan+0x7c>
 800e8c6:	2508      	movs	r5, #8
 800e8c8:	e7b4      	b.n	800e834 <__hexnan+0x7c>
 800e8ca:	9b01      	ldr	r3, [sp, #4]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d0de      	beq.n	800e88e <__hexnan+0xd6>
 800e8d0:	f1c3 0320 	rsb	r3, r3, #32
 800e8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e8d8:	40da      	lsrs	r2, r3
 800e8da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e8de:	4013      	ands	r3, r2
 800e8e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e8e4:	e7d3      	b.n	800e88e <__hexnan+0xd6>
 800e8e6:	3f04      	subs	r7, #4
 800e8e8:	e7d1      	b.n	800e88e <__hexnan+0xd6>
 800e8ea:	2004      	movs	r0, #4
 800e8ec:	e7d6      	b.n	800e89c <__hexnan+0xe4>

0800e8ee <__ascii_mbtowc>:
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	b901      	cbnz	r1, 800e8f4 <__ascii_mbtowc+0x6>
 800e8f2:	a901      	add	r1, sp, #4
 800e8f4:	b142      	cbz	r2, 800e908 <__ascii_mbtowc+0x1a>
 800e8f6:	b14b      	cbz	r3, 800e90c <__ascii_mbtowc+0x1e>
 800e8f8:	7813      	ldrb	r3, [r2, #0]
 800e8fa:	600b      	str	r3, [r1, #0]
 800e8fc:	7812      	ldrb	r2, [r2, #0]
 800e8fe:	1e10      	subs	r0, r2, #0
 800e900:	bf18      	it	ne
 800e902:	2001      	movne	r0, #1
 800e904:	b002      	add	sp, #8
 800e906:	4770      	bx	lr
 800e908:	4610      	mov	r0, r2
 800e90a:	e7fb      	b.n	800e904 <__ascii_mbtowc+0x16>
 800e90c:	f06f 0001 	mvn.w	r0, #1
 800e910:	e7f8      	b.n	800e904 <__ascii_mbtowc+0x16>

0800e912 <_realloc_r>:
 800e912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e916:	4680      	mov	r8, r0
 800e918:	4615      	mov	r5, r2
 800e91a:	460c      	mov	r4, r1
 800e91c:	b921      	cbnz	r1, 800e928 <_realloc_r+0x16>
 800e91e:	4611      	mov	r1, r2
 800e920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e924:	f7fb bccc 	b.w	800a2c0 <_malloc_r>
 800e928:	b92a      	cbnz	r2, 800e936 <_realloc_r+0x24>
 800e92a:	f7fd fce1 	bl	800c2f0 <_free_r>
 800e92e:	2400      	movs	r4, #0
 800e930:	4620      	mov	r0, r4
 800e932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e936:	f000 f840 	bl	800e9ba <_malloc_usable_size_r>
 800e93a:	4285      	cmp	r5, r0
 800e93c:	4606      	mov	r6, r0
 800e93e:	d802      	bhi.n	800e946 <_realloc_r+0x34>
 800e940:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e944:	d8f4      	bhi.n	800e930 <_realloc_r+0x1e>
 800e946:	4629      	mov	r1, r5
 800e948:	4640      	mov	r0, r8
 800e94a:	f7fb fcb9 	bl	800a2c0 <_malloc_r>
 800e94e:	4607      	mov	r7, r0
 800e950:	2800      	cmp	r0, #0
 800e952:	d0ec      	beq.n	800e92e <_realloc_r+0x1c>
 800e954:	42b5      	cmp	r5, r6
 800e956:	462a      	mov	r2, r5
 800e958:	4621      	mov	r1, r4
 800e95a:	bf28      	it	cs
 800e95c:	4632      	movcs	r2, r6
 800e95e:	f7ff fc47 	bl	800e1f0 <memcpy>
 800e962:	4621      	mov	r1, r4
 800e964:	4640      	mov	r0, r8
 800e966:	463c      	mov	r4, r7
 800e968:	f7fd fcc2 	bl	800c2f0 <_free_r>
 800e96c:	e7e0      	b.n	800e930 <_realloc_r+0x1e>

0800e96e <__ascii_wctomb>:
 800e96e:	4603      	mov	r3, r0
 800e970:	4608      	mov	r0, r1
 800e972:	b141      	cbz	r1, 800e986 <__ascii_wctomb+0x18>
 800e974:	2aff      	cmp	r2, #255	@ 0xff
 800e976:	d904      	bls.n	800e982 <__ascii_wctomb+0x14>
 800e978:	228a      	movs	r2, #138	@ 0x8a
 800e97a:	f04f 30ff 	mov.w	r0, #4294967295
 800e97e:	601a      	str	r2, [r3, #0]
 800e980:	4770      	bx	lr
 800e982:	2001      	movs	r0, #1
 800e984:	700a      	strb	r2, [r1, #0]
 800e986:	4770      	bx	lr

0800e988 <fiprintf>:
 800e988:	b40e      	push	{r1, r2, r3}
 800e98a:	b503      	push	{r0, r1, lr}
 800e98c:	ab03      	add	r3, sp, #12
 800e98e:	4601      	mov	r1, r0
 800e990:	4805      	ldr	r0, [pc, #20]	@ (800e9a8 <fiprintf+0x20>)
 800e992:	f853 2b04 	ldr.w	r2, [r3], #4
 800e996:	6800      	ldr	r0, [r0, #0]
 800e998:	9301      	str	r3, [sp, #4]
 800e99a:	f7ff f9b5 	bl	800dd08 <_vfiprintf_r>
 800e99e:	b002      	add	sp, #8
 800e9a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9a4:	b003      	add	sp, #12
 800e9a6:	4770      	bx	lr
 800e9a8:	20000060 	.word	0x20000060

0800e9ac <abort>:
 800e9ac:	2006      	movs	r0, #6
 800e9ae:	b508      	push	{r3, lr}
 800e9b0:	f000 f834 	bl	800ea1c <raise>
 800e9b4:	2001      	movs	r0, #1
 800e9b6:	f7f4 fa4f 	bl	8002e58 <_exit>

0800e9ba <_malloc_usable_size_r>:
 800e9ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9be:	1f18      	subs	r0, r3, #4
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	bfbc      	itt	lt
 800e9c4:	580b      	ldrlt	r3, [r1, r0]
 800e9c6:	18c0      	addlt	r0, r0, r3
 800e9c8:	4770      	bx	lr

0800e9ca <_raise_r>:
 800e9ca:	291f      	cmp	r1, #31
 800e9cc:	b538      	push	{r3, r4, r5, lr}
 800e9ce:	4605      	mov	r5, r0
 800e9d0:	460c      	mov	r4, r1
 800e9d2:	d904      	bls.n	800e9de <_raise_r+0x14>
 800e9d4:	2316      	movs	r3, #22
 800e9d6:	6003      	str	r3, [r0, #0]
 800e9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9dc:	bd38      	pop	{r3, r4, r5, pc}
 800e9de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e9e0:	b112      	cbz	r2, 800e9e8 <_raise_r+0x1e>
 800e9e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9e6:	b94b      	cbnz	r3, 800e9fc <_raise_r+0x32>
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	f000 f831 	bl	800ea50 <_getpid_r>
 800e9ee:	4622      	mov	r2, r4
 800e9f0:	4601      	mov	r1, r0
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9f8:	f000 b818 	b.w	800ea2c <_kill_r>
 800e9fc:	2b01      	cmp	r3, #1
 800e9fe:	d00a      	beq.n	800ea16 <_raise_r+0x4c>
 800ea00:	1c59      	adds	r1, r3, #1
 800ea02:	d103      	bne.n	800ea0c <_raise_r+0x42>
 800ea04:	2316      	movs	r3, #22
 800ea06:	6003      	str	r3, [r0, #0]
 800ea08:	2001      	movs	r0, #1
 800ea0a:	e7e7      	b.n	800e9dc <_raise_r+0x12>
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	4620      	mov	r0, r4
 800ea10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ea14:	4798      	blx	r3
 800ea16:	2000      	movs	r0, #0
 800ea18:	e7e0      	b.n	800e9dc <_raise_r+0x12>
	...

0800ea1c <raise>:
 800ea1c:	4b02      	ldr	r3, [pc, #8]	@ (800ea28 <raise+0xc>)
 800ea1e:	4601      	mov	r1, r0
 800ea20:	6818      	ldr	r0, [r3, #0]
 800ea22:	f7ff bfd2 	b.w	800e9ca <_raise_r>
 800ea26:	bf00      	nop
 800ea28:	20000060 	.word	0x20000060

0800ea2c <_kill_r>:
 800ea2c:	b538      	push	{r3, r4, r5, lr}
 800ea2e:	2300      	movs	r3, #0
 800ea30:	4d06      	ldr	r5, [pc, #24]	@ (800ea4c <_kill_r+0x20>)
 800ea32:	4604      	mov	r4, r0
 800ea34:	4608      	mov	r0, r1
 800ea36:	4611      	mov	r1, r2
 800ea38:	602b      	str	r3, [r5, #0]
 800ea3a:	f7f4 f9fd 	bl	8002e38 <_kill>
 800ea3e:	1c43      	adds	r3, r0, #1
 800ea40:	d102      	bne.n	800ea48 <_kill_r+0x1c>
 800ea42:	682b      	ldr	r3, [r5, #0]
 800ea44:	b103      	cbz	r3, 800ea48 <_kill_r+0x1c>
 800ea46:	6023      	str	r3, [r4, #0]
 800ea48:	bd38      	pop	{r3, r4, r5, pc}
 800ea4a:	bf00      	nop
 800ea4c:	200005e4 	.word	0x200005e4

0800ea50 <_getpid_r>:
 800ea50:	f7f4 b9ea 	b.w	8002e28 <_getpid>

0800ea54 <_init>:
 800ea54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea56:	bf00      	nop
 800ea58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea5a:	bc08      	pop	{r3}
 800ea5c:	469e      	mov	lr, r3
 800ea5e:	4770      	bx	lr

0800ea60 <_fini>:
 800ea60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea62:	bf00      	nop
 800ea64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea66:	bc08      	pop	{r3}
 800ea68:	469e      	mov	lr, r3
 800ea6a:	4770      	bx	lr
