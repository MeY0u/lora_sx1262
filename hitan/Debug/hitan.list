
hitan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e794  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065e  0800e9e8  0800e9e8  0000f9e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f048  0800f048  00010048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f050  0800f050  00010050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  0800f058  0800f058  00010058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000218  20000000  0800f060  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003ce  20000218  0800f278  00011218  2**2
                  ALLOC
  8 ._user_heap_stack 00000602  200005e6  0800f278  000115e6  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00011218  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002485c  00000000  00000000  0001124e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003dec  00000000  00000000  00035aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001950  00000000  00000000  00039898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000138d  00000000  00000000  0003b1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c563  00000000  00000000  0003c575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f272  00000000  00000000  00078ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167100  00000000  00000000  00097d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fee4a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000082d0  00000000  00000000  001fee90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  00207160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000218 	.word	0x20000218
 800026c:	00000000 	.word	0x00000000
 8000270:	0800e9cc 	.word	0x0800e9cc

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000021c 	.word	0x2000021c
 800028c:	0800e9cc 	.word	0x0800e9cc

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9b4 	b.w	8001028 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	2200      	movs	r2, #0
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d48:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14d      	bne.n	8000dec <__udivmoddi4+0xa8>
 8000d50:	428a      	cmp	r2, r1
 8000d52:	460f      	mov	r7, r1
 8000d54:	4684      	mov	ip, r0
 8000d56:	4696      	mov	lr, r2
 8000d58:	fab2 f382 	clz	r3, r2
 8000d5c:	d960      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5e:	b14b      	cbz	r3, 8000d74 <__udivmoddi4+0x30>
 8000d60:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d72:	4317      	orrs	r7, r2
 8000d74:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d78:	fa1f f48e 	uxth.w	r4, lr
 8000d7c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d80:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d84:	fb06 7711 	mls	r7, r6, r1, r7
 8000d88:	fb01 f004 	mul.w	r0, r1, r4
 8000d8c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d90:	4290      	cmp	r0, r2
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d94:	eb1e 0202 	adds.w	r2, lr, r2
 8000d98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x60>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f200 812d 	bhi.w	8000ffe <__udivmoddi4+0x2ba>
 8000da4:	4639      	mov	r1, r7
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	fa1f fc8c 	uxth.w	ip, ip
 8000dac:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db0:	fb06 2210 	mls	r2, r6, r0, r2
 8000db4:	fb00 f404 	mul.w	r4, r0, r4
 8000db8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dbc:	4564      	cmp	r4, ip
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dc0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x8c>
 8000dca:	4564      	cmp	r4, ip
 8000dcc:	f200 811a 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	ebac 0c04 	sub.w	ip, ip, r4
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b125      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000dde:	fa2c f303 	lsr.w	r3, ip, r3
 8000de2:	2200      	movs	r2, #0
 8000de4:	e9c5 3200 	strd	r3, r2, [r5]
 8000de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d905      	bls.n	8000dfc <__udivmoddi4+0xb8>
 8000df0:	b10d      	cbz	r5, 8000df6 <__udivmoddi4+0xb2>
 8000df2:	e9c5 0100 	strd	r0, r1, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	4608      	mov	r0, r1
 8000dfa:	e7f5      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000dfc:	fab3 f183 	clz	r1, r3
 8000e00:	2900      	cmp	r1, #0
 8000e02:	d14d      	bne.n	8000ea0 <__udivmoddi4+0x15c>
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	f0c0 80f2 	bcc.w	8000fee <__udivmoddi4+0x2aa>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f080 80ef 	bcs.w	8000fee <__udivmoddi4+0x2aa>
 8000e10:	4606      	mov	r6, r0
 8000e12:	4623      	mov	r3, r4
 8000e14:	4608      	mov	r0, r1
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e6      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e1a:	e9c5 6300 	strd	r6, r3, [r5]
 8000e1e:	e7e3      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f040 80a2 	bne.w	8000f6a <__udivmoddi4+0x226>
 8000e26:	1a8a      	subs	r2, r1, r2
 8000e28:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e2c:	fa1f f68e 	uxth.w	r6, lr
 8000e30:	2101      	movs	r1, #1
 8000e32:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e36:	fb07 2014 	mls	r0, r7, r4, r2
 8000e3a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e42:	fb06 f004 	mul.w	r0, r6, r4
 8000e46:	4290      	cmp	r0, r2
 8000e48:	d90f      	bls.n	8000e6a <__udivmoddi4+0x126>
 8000e4a:	eb1e 0202 	adds.w	r2, lr, r2
 8000e4e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e52:	bf2c      	ite	cs
 8000e54:	f04f 0901 	movcs.w	r9, #1
 8000e58:	f04f 0900 	movcc.w	r9, #0
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d903      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e60:	f1b9 0f00 	cmp.w	r9, #0
 8000e64:	f000 80c8 	beq.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e68:	4644      	mov	r4, r8
 8000e6a:	1a12      	subs	r2, r2, r0
 8000e6c:	fa1f fc8c 	uxth.w	ip, ip
 8000e70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e74:	fb07 2210 	mls	r2, r7, r0, r2
 8000e78:	fb00 f606 	mul.w	r6, r0, r6
 8000e7c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e80:	4566      	cmp	r6, ip
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x152>
 8000e84:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e8c:	d202      	bcs.n	8000e94 <__udivmoddi4+0x150>
 8000e8e:	4566      	cmp	r6, ip
 8000e90:	f200 80bb 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e94:	4610      	mov	r0, r2
 8000e96:	ebac 0c06 	sub.w	ip, ip, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	e79d      	b.n	8000ddc <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb2:	40f4      	lsrs	r4, r6
 8000eb4:	408a      	lsls	r2, r1
 8000eb6:	431f      	orrs	r7, r3
 8000eb8:	ea4e 030c 	orr.w	r3, lr, ip
 8000ebc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fa1f fc87 	uxth.w	ip, r7
 8000ecc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb00 f90c 	mul.w	r9, r0, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	d90e      	bls.n	8000efe <__udivmoddi4+0x1ba>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	bf2c      	ite	cs
 8000ee8:	f04f 0b01 	movcs.w	fp, #1
 8000eec:	f04f 0b00 	movcc.w	fp, #0
 8000ef0:	45a1      	cmp	r9, r4
 8000ef2:	d903      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ef4:	f1bb 0f00 	cmp.w	fp, #0
 8000ef8:	f000 8093 	beq.w	8001022 <__udivmoddi4+0x2de>
 8000efc:	4650      	mov	r0, sl
 8000efe:	eba4 0409 	sub.w	r4, r4, r9
 8000f02:	fa1f f983 	uxth.w	r9, r3
 8000f06:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f0a:	fb08 4413 	mls	r4, r8, r3, r4
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	d906      	bls.n	8000f28 <__udivmoddi4+0x1e4>
 8000f1a:	193c      	adds	r4, r7, r4
 8000f1c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f20:	d201      	bcs.n	8000f26 <__udivmoddi4+0x1e2>
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d87a      	bhi.n	800101c <__udivmoddi4+0x2d8>
 8000f26:	4643      	mov	r3, r8
 8000f28:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f2c:	eba4 040c 	sub.w	r4, r4, ip
 8000f30:	fba0 9802 	umull	r9, r8, r0, r2
 8000f34:	4544      	cmp	r4, r8
 8000f36:	46cc      	mov	ip, r9
 8000f38:	4643      	mov	r3, r8
 8000f3a:	d302      	bcc.n	8000f42 <__udivmoddi4+0x1fe>
 8000f3c:	d106      	bne.n	8000f4c <__udivmoddi4+0x208>
 8000f3e:	45ce      	cmp	lr, r9
 8000f40:	d204      	bcs.n	8000f4c <__udivmoddi4+0x208>
 8000f42:	3801      	subs	r0, #1
 8000f44:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f48:	eb68 0307 	sbc.w	r3, r8, r7
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x222>
 8000f4e:	ebbe 020c 	subs.w	r2, lr, ip
 8000f52:	eb64 0403 	sbc.w	r4, r4, r3
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	431e      	orrs	r6, r3
 8000f62:	e9c5 6400 	strd	r6, r4, [r5]
 8000f66:	2100      	movs	r1, #0
 8000f68:	e73e      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000f6a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f6e:	f1c3 0120 	rsb	r1, r3, #32
 8000f72:	fa04 f203 	lsl.w	r2, r4, r3
 8000f76:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f7a:	40cc      	lsrs	r4, r1
 8000f7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f80:	fa20 f101 	lsr.w	r1, r0, r1
 8000f84:	fa1f f68e 	uxth.w	r6, lr
 8000f88:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fb07 4410 	mls	r4, r7, r0, r4
 8000f92:	0c11      	lsrs	r1, r2, #16
 8000f94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f98:	fb00 f406 	mul.w	r4, r0, r6
 8000f9c:	428c      	cmp	r4, r1
 8000f9e:	d90e      	bls.n	8000fbe <__udivmoddi4+0x27a>
 8000fa0:	eb1e 0101 	adds.w	r1, lr, r1
 8000fa4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa8:	bf2c      	ite	cs
 8000faa:	f04f 0901 	movcs.w	r9, #1
 8000fae:	f04f 0900 	movcc.w	r9, #0
 8000fb2:	428c      	cmp	r4, r1
 8000fb4:	d902      	bls.n	8000fbc <__udivmoddi4+0x278>
 8000fb6:	f1b9 0f00 	cmp.w	r9, #0
 8000fba:	d02c      	beq.n	8001016 <__udivmoddi4+0x2d2>
 8000fbc:	4640      	mov	r0, r8
 8000fbe:	1b09      	subs	r1, r1, r4
 8000fc0:	b292      	uxth	r2, r2
 8000fc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000fca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fce:	fb04 f106 	mul.w	r1, r4, r6
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x2a2>
 8000fd6:	eb1e 0202 	adds.w	r2, lr, r2
 8000fda:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fde:	d201      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d815      	bhi.n	8001010 <__udivmoddi4+0x2cc>
 8000fe4:	4644      	mov	r4, r8
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000fec:	e721      	b.n	8000e32 <__udivmoddi4+0xee>
 8000fee:	1a86      	subs	r6, r0, r2
 8000ff0:	eb64 0303 	sbc.w	r3, r4, r3
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	e70e      	b.n	8000e16 <__udivmoddi4+0xd2>
 8000ff8:	3c02      	subs	r4, #2
 8000ffa:	4472      	add	r2, lr
 8000ffc:	e735      	b.n	8000e6a <__udivmoddi4+0x126>
 8000ffe:	3902      	subs	r1, #2
 8001000:	4472      	add	r2, lr
 8001002:	e6d0      	b.n	8000da6 <__udivmoddi4+0x62>
 8001004:	44f4      	add	ip, lr
 8001006:	3802      	subs	r0, #2
 8001008:	e6e3      	b.n	8000dd2 <__udivmoddi4+0x8e>
 800100a:	44f4      	add	ip, lr
 800100c:	3802      	subs	r0, #2
 800100e:	e742      	b.n	8000e96 <__udivmoddi4+0x152>
 8001010:	3c02      	subs	r4, #2
 8001012:	4472      	add	r2, lr
 8001014:	e7e7      	b.n	8000fe6 <__udivmoddi4+0x2a2>
 8001016:	3802      	subs	r0, #2
 8001018:	4471      	add	r1, lr
 800101a:	e7d0      	b.n	8000fbe <__udivmoddi4+0x27a>
 800101c:	3b02      	subs	r3, #2
 800101e:	443c      	add	r4, r7
 8001020:	e782      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8001022:	3802      	subs	r0, #2
 8001024:	443c      	add	r4, r7
 8001026:	e76a      	b.n	8000efe <__udivmoddi4+0x1ba>

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <_ZN5RadioC1EP16RadioCallbacks_t>:
     *
     * \param [in]  callbacks     The structure of callbacks function pointers
     *                            to be called on radio interrupts
     *
     */
    Radio( RadioCallbacks_t *callbacks )
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
    {
 8001036:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <_ZN5RadioC1EP16RadioCallbacks_t+0x68>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	601a      	str	r2, [r3, #0]
        this->txDone = callbacks->txDone;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	605a      	str	r2, [r3, #4]
        this->rxDone = callbacks->rxDone;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]
        this->rxPreambleDetect = callbacks->rxPreambleDetect;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60da      	str	r2, [r3, #12]
        this->rxSyncWordDone = callbacks->rxSyncWordDone;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	611a      	str	r2, [r3, #16]
        this->rxHeaderDone = callbacks->rxHeaderDone;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	615a      	str	r2, [r3, #20]
        this->txTimeout = callbacks->txTimeout;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
        this->rxTimeout = callbacks->rxTimeout;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	699a      	ldr	r2, [r3, #24]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	61da      	str	r2, [r3, #28]
        this->rxError = callbacks->rxError;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	69da      	ldr	r2, [r3, #28]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	621a      	str	r2, [r3, #32]
        this->cadDone = callbacks->cadDone;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	6a1a      	ldr	r2, [r3, #32]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	625a      	str	r2, [r3, #36]	@ 0x24
    }
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	0800ea8c 	.word	0x0800ea8c

08001098 <_ZN5RadioD1Ev>:
    virtual ~Radio( void ){ };
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <_ZN5RadioD1Ev+0x1c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	0800ea8c 	.word	0x0800ea8c

080010b8 <_ZN5RadioD0Ev>:
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ffe9 	bl	8001098 <_ZN5RadioD1Ev>
 80010c6:	2128      	movs	r1, #40	@ 0x28
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f009 f87e 	bl	800a1ca <_ZdlPvj>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_ZN6SX126xC1EP16RadioCallbacks_t>:
    /*!
     * \brief Instantiates a SX126x object and provides API functions to communicates with the radio
     * \param [in]  callbacks      Pointer to the callbacks structure defining
     *                             all callbacks function pointers
     */
    SX126x( RadioCallbacks_t *callbacks ):
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
        Radio( callbacks )
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6839      	ldr	r1, [r7, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffa0 	bl	800102c <_ZN5RadioC1EP16RadioCallbacks_t>
 80010ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001120 <_ZN6SX126xC1EP16RadioCallbacks_t+0x48>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	601a      	str	r2, [r3, #0]
    {
        this->dioIrq      = &SX126x::OnDioIrq;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001124 <_ZN6SX126xC1EP16RadioCallbacks_t+0x4c>)
 80010f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	631a      	str	r2, [r3, #48]	@ 0x30
        this->PacketType  = PACKET_TYPE_NONE;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	220f      	movs	r2, #15
 8001102:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        this->PollingMode = false;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        this->IrqState    = false;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    }
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	0800eac4 	.word	0x0800eac4
 8001124:	080020df 	.word	0x080020df

08001128 <_ZN6SX126xD1Ev>:

    virtual ~SX126x( )
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    {
 8001130:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <_ZN6SX126xD1Ev+0x20>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
    }
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffad 	bl	8001098 <_ZN5RadioD1Ev>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	0800eac4 	.word	0x0800eac4

0800114c <_ZN6SX126xD0Ev>:
    virtual ~SX126x( )
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    }
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffe7 	bl	8001128 <_ZN6SX126xD1Ev>
 800115a:	2138      	movs	r1, #56	@ 0x38
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f009 f834 	bl	800a1ca <_ZdlPvj>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_ZN9SX126xHalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tmmS3_tP16RadioCallbacks_t>:
#define __SX126x_HAL_CPP__

#include "sx126x-hal.hpp"
#include <cstring>

SX126xHal::SX126xHal(SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *nssPort, uint16_t nssPin,
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	807b      	strh	r3, [r7, #2]
					 uint32_t deviceChannel, GPIO_TypeDef *antSwPort, uint16_t antSwPin,
                     RadioCallbacks_t *callbacks)
    : SX126x(callbacks), hspi(spiHandle), nssPort(nssPort), nssPin(nssPin), busyPort(busyPort), busyPin(busyPin),
      dio1Port(dio1Port), dio1Pin(dio1Pin), dio2Port(dio2Port), dio2Pin(dio2Pin), dio3Port(dio3Port), dio3Pin(dio3Pin),
      rstPort(rstPort), rstPin(rstPin), freqChannel(freqChannel), deviceChannel(deviceChannel),
      antSwPort(antSwPort), antSwPin(antSwPin) {}
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffaa 	bl	80010d8 <_ZN6SX126xC1EP16RadioCallbacks_t>
 8001184:	4a21      	ldr	r2, [pc, #132]	@ (800120c <_ZN9SX126xHalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tmmS3_tP16RadioCallbacks_t+0xa0>)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]
    : SX126x(callbacks), hspi(spiHandle), nssPort(nssPort), nssPin(nssPin), busyPort(busyPort), busyPin(busyPin),
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	645a      	str	r2, [r3, #68]	@ 0x44
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	887a      	ldrh	r2, [r7, #2]
 800119a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	8bba      	ldrh	r2, [r7, #28]
 80011a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
      dio1Port(dio1Port), dio1Pin(dio1Pin), dio2Port(dio2Port), dio2Pin(dio2Pin), dio3Port(dio3Port), dio3Pin(dio3Pin),
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6a3a      	ldr	r2, [r7, #32]
 80011b0:	655a      	str	r2, [r3, #84]	@ 0x54
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80011b6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80011c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011cc:	665a      	str	r2, [r3, #100]	@ 0x64
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80011d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
      rstPort(rstPort), rstPin(rstPin), freqChannel(freqChannel), deviceChannel(deviceChannel),
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011da:	66da      	str	r2, [r3, #108]	@ 0x6c
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80011e0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80011e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011ee:	679a      	str	r2, [r3, #120]	@ 0x78
      antSwPort(antSwPort), antSwPin(antSwPin) {}
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80011f4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80011fc:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	0800ea2c 	.word	0x0800ea2c

08001210 <_ZN9SX126xHalD1Ev>:

SX126xHal::~SX126xHal(void) {}
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	4a05      	ldr	r2, [pc, #20]	@ (8001230 <_ZN9SX126xHalD1Ev+0x20>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff81 	bl	8001128 <_ZN6SX126xD1Ev>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	0800ea2c 	.word	0x0800ea2c

08001234 <_ZN9SX126xHalD0Ev>:
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffe7 	bl	8001210 <_ZN9SX126xHalD1Ev>
 8001242:	2184      	movs	r1, #132	@ 0x84
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f008 ffc0 	bl	800a1ca <_ZdlPvj>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN9SX126xHal7SpiInitEv>:

void SX126xHal::SpiInit(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001266:	2201      	movs	r2, #1
 8001268:	4619      	mov	r1, r3
 800126a:	f002 fdc1 	bl	8003df0 <HAL_GPIO_WritePin>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_ZN9SX126xHal9IoIrqInitEM6SX126xFvvE>:
//  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
    HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0); // Set the priority for EXTI11
    HAL_NVIC_EnableIRQ(EXTI11_IRQn); // Enable interrupt for EXTI line 11
}
*/
void SX126xHal::IoIrqInit(DioIrqHandler irqHandler) {
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	e883 0006 	stmia.w	r3, {r1, r2}
    assert_param(irqHandler != NULL);

    // Configure DIO1 pin with interrupt
    // Enable interrupt for the pin and set the priority
     HAL_NVIC_SetPriority(EXTI11_IRQn, 2, 0); // Set the priority for EXTI11
 8001284:	2200      	movs	r2, #0
 8001286:	2102      	movs	r1, #2
 8001288:	2016      	movs	r0, #22
 800128a:	f002 fa5d 	bl	8003748 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(EXTI11_IRQn); // Enable interrupt for EXTI line 11
 800128e:	2016      	movs	r0, #22
 8001290:	f002 fa74 	bl	800377c <HAL_NVIC_EnableIRQ>
     this->dio1IrqHandler = irqHandler;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3338      	adds	r3, #56	@ 0x38
 8001298:	1d3a      	adds	r2, r7, #4
 800129a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800129e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <_ZN9SX126xHal5ResetEv>:

void SX126xHal::Reset(void) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_RESET);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	f002 fd96 	bl	8003df0 <HAL_GPIO_WritePin>
    	HAL_Delay(50);
 80012c4:	2032      	movs	r0, #50	@ 0x32
 80012c6:	f002 f963 	bl	8003590 <HAL_Delay>
    	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_SET);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80012d4:	2201      	movs	r2, #1
 80012d6:	4619      	mov	r1, r3
 80012d8:	f002 fd8a 	bl	8003df0 <HAL_GPIO_WritePin>
    	HAL_Delay(20);
 80012dc:	2014      	movs	r0, #20
 80012de:	f002 f957 	bl	8003590 <HAL_Delay>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <_ZN9SX126xHal6WakeupEv>:

void SX126xHal::Wakeup(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80012fe:	2200      	movs	r2, #0
 8001300:	4619      	mov	r1, r3
 8001302:	f002 fd75 	bl	8003df0 <HAL_GPIO_WritePin>
    uint8_t dummy[2] = {RADIO_GET_STATUS, 0};
 8001306:	23c0      	movs	r3, #192	@ 0xc0
 8001308:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(hspi, dummy, 2, HAL_MAX_DELAY);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800130e:	f107 010c 	add.w	r1, r7, #12
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	2202      	movs	r2, #2
 8001318:	f007 fa08 	bl	800872c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001326:	2201      	movs	r2, #1
 8001328:	4619      	mov	r1, r3
 800132a:	f002 fd61 	bl	8003df0 <HAL_GPIO_WritePin>
    WaitOnBusy();
 800132e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001332:	480b      	ldr	r0, [pc, #44]	@ (8001360 <_ZN9SX126xHal6WakeupEv+0x74>)
 8001334:	f002 fd44 	bl	8003dc0 <HAL_GPIO_ReadPin>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	bf0c      	ite	eq
 800133e:	2301      	moveq	r3, #1
 8001340:	2300      	movne	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f2      	bne.n	800132e <_ZN9SX126xHal6WakeupEv+0x42>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001348:	b662      	cpsie	i
}
 800134a:	bf00      	nop
    __enable_irq();
    AntSwOn();
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	334c      	adds	r3, #76	@ 0x4c
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	4798      	blx	r3
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	42021000 	.word	0x42021000

08001364 <_ZN9SX126xHal12WriteCommandE15RadioCommands_ePht>:

void SX126xHal::WriteCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	461a      	mov	r2, r3
 8001370:	460b      	mov	r3, r1
 8001372:	72fb      	strb	r3, [r7, #11]
 8001374:	4613      	mov	r3, r2
 8001376:	813b      	strh	r3, [r7, #8]
	WaitOnBusy();
 8001378:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800137c:	4818      	ldr	r0, [pc, #96]	@ (80013e0 <_ZN9SX126xHal12WriteCommandE15RadioCommands_ePht+0x7c>)
 800137e:	f002 fd1f 	bl	8003dc0 <HAL_GPIO_ReadPin>
 8001382:	4603      	mov	r3, r0
 8001384:	2b01      	cmp	r3, #1
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f2      	bne.n	8001378 <_ZN9SX126xHal12WriteCommandE15RadioCommands_ePht+0x14>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	f002 fd26 	bl	8003df0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, (uint8_t *)&command, 1, HAL_MAX_DELAY);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80013a8:	f107 010b 	add.w	r1, r7, #11
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	2201      	movs	r2, #1
 80013b2:	f007 f9bb 	bl	800872c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, buffer, size, HAL_MAX_DELAY);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80013ba:	893a      	ldrh	r2, [r7, #8]
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	f007 f9b3 	bl	800872c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013d0:	2201      	movs	r2, #1
 80013d2:	4619      	mov	r1, r3
 80013d4:	f002 fd0c 	bl	8003df0 <HAL_GPIO_WritePin>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	42021000 	.word	0x42021000

080013e4 <_ZN9SX126xHal11ReadCommandE15RadioCommands_ePht>:

void SX126xHal::ReadCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	461a      	mov	r2, r3
 80013f0:	460b      	mov	r3, r1
 80013f2:	72fb      	strb	r3, [r7, #11]
 80013f4:	4613      	mov	r3, r2
 80013f6:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	f002 fcf3 	bl	8003df0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, (uint8_t *)&command, 1, HAL_MAX_DELAY);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800140e:	f107 010b 	add.w	r1, r7, #11
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	2201      	movs	r2, #1
 8001418:	f007 f988 	bl	800872c <HAL_SPI_Transmit>
    uint8_t dummy = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(hspi, &dummy, 1, HAL_MAX_DELAY);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001424:	f107 0117 	add.w	r1, r7, #23
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	2201      	movs	r2, #1
 800142e:	f007 f97d 	bl	800872c <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, size, HAL_MAX_DELAY);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001436:	893a      	ldrh	r2, [r7, #8]
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	f007 fb85 	bl	8008b4c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800144c:	2201      	movs	r2, #1
 800144e:	4619      	mov	r1, r3
 8001450:	f002 fcce 	bl	8003df0 <HAL_GPIO_WritePin>
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_ZN9SX126xHal13WriteRegisterEtPht>:

void SX126xHal::WriteRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	461a      	mov	r2, r3
 8001468:	460b      	mov	r3, r1
 800146a:	817b      	strh	r3, [r7, #10]
 800146c:	4613      	mov	r3, r2
 800146e:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800147a:	2200      	movs	r2, #0
 800147c:	4619      	mov	r1, r3
 800147e:	f002 fcb7 	bl	8003df0 <HAL_GPIO_WritePin>
    uint8_t header[3] = {RADIO_WRITE_REGISTER, (uint8_t)((address >> 8) & 0xFF), (uint8_t)(address & 0xFF)};
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	2100      	movs	r1, #0
 8001488:	460a      	mov	r2, r1
 800148a:	801a      	strh	r2, [r3, #0]
 800148c:	460a      	mov	r2, r1
 800148e:	709a      	strb	r2, [r3, #2]
 8001490:	230d      	movs	r3, #13
 8001492:	753b      	strb	r3, [r7, #20]
 8001494:	897b      	ldrh	r3, [r7, #10]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	757b      	strb	r3, [r7, #21]
 800149e:	897b      	ldrh	r3, [r7, #10]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	75bb      	strb	r3, [r7, #22]
    HAL_SPI_Transmit(hspi, header, 3, HAL_MAX_DELAY);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80014a8:	f107 0114 	add.w	r1, r7, #20
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	2203      	movs	r2, #3
 80014b2:	f007 f93b 	bl	800872c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, buffer, size, HAL_MAX_DELAY);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80014ba:	893a      	ldrh	r2, [r7, #8]
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	f007 f933 	bl	800872c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014d0:	2201      	movs	r2, #1
 80014d2:	4619      	mov	r1, r3
 80014d4:	f002 fc8c 	bl	8003df0 <HAL_GPIO_WritePin>
}
 80014d8:	bf00      	nop
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_ZN9SX126xHal8WriteRegEth>:

void SX126xHal::WriteReg(uint16_t address, uint8_t value) {
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
    WriteRegister(address, &value, 1);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3318      	adds	r3, #24
 80014f6:	681c      	ldr	r4, [r3, #0]
 80014f8:	1c7a      	adds	r2, r7, #1
 80014fa:	8879      	ldrh	r1, [r7, #2]
 80014fc:	2301      	movs	r3, #1
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	47a0      	blx	r4
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bd90      	pop	{r4, r7, pc}

0800150a <_ZN9SX126xHal12ReadRegisterEtPht>:

void SX126xHal::ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	461a      	mov	r2, r3
 8001516:	460b      	mov	r3, r1
 8001518:	817b      	strh	r3, [r7, #10]
 800151a:	4613      	mov	r3, r2
 800151c:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	f002 fc60 	bl	8003df0 <HAL_GPIO_WritePin>
    uint8_t header[3] = {RADIO_READ_REGISTER, (uint8_t)((address >> 8) & 0xFF), (uint8_t)(address & 0xFF)};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2100      	movs	r1, #0
 8001536:	460a      	mov	r2, r1
 8001538:	801a      	strh	r2, [r3, #0]
 800153a:	460a      	mov	r2, r1
 800153c:	709a      	strb	r2, [r3, #2]
 800153e:	231d      	movs	r3, #29
 8001540:	753b      	strb	r3, [r7, #20]
 8001542:	897b      	ldrh	r3, [r7, #10]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	b29b      	uxth	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	757b      	strb	r3, [r7, #21]
 800154c:	897b      	ldrh	r3, [r7, #10]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	75bb      	strb	r3, [r7, #22]
    HAL_SPI_Transmit(hspi, header, 3, HAL_MAX_DELAY);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001556:	f107 0114 	add.w	r1, r7, #20
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	2203      	movs	r2, #3
 8001560:	f007 f8e4 	bl	800872c <HAL_SPI_Transmit>
    uint8_t dummy = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	74fb      	strb	r3, [r7, #19]
    HAL_SPI_Transmit(hspi, &dummy, 1, HAL_MAX_DELAY);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800156c:	f107 0113 	add.w	r1, r7, #19
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	2201      	movs	r2, #1
 8001576:	f007 f8d9 	bl	800872c <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, size, HAL_MAX_DELAY);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800157e:	893a      	ldrh	r2, [r7, #8]
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	f007 fae1 	bl	8008b4c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001594:	2201      	movs	r2, #1
 8001596:	4619      	mov	r1, r3
 8001598:	f002 fc2a 	bl	8003df0 <HAL_GPIO_WritePin>
}
 800159c:	bf00      	nop
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_ZN9SX126xHal7ReadRegEt>:

uint8_t SX126xHal::ReadReg(uint16_t address) {
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
    uint8_t value;
    ReadRegister(address, &value, 1);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3320      	adds	r3, #32
 80015b6:	681c      	ldr	r4, [r3, #0]
 80015b8:	f107 020f 	add.w	r2, r7, #15
 80015bc:	8879      	ldrh	r1, [r7, #2]
 80015be:	2301      	movs	r3, #1
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	47a0      	blx	r4
    return value;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd90      	pop	{r4, r7, pc}

080015ce <_ZN9SX126xHal11WriteBufferEhPhh>:

void SX126xHal::WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	461a      	mov	r2, r3
 80015da:	460b      	mov	r3, r1
 80015dc:	72fb      	strb	r3, [r7, #11]
 80015de:	4613      	mov	r3, r2
 80015e0:	72bb      	strb	r3, [r7, #10]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80015ec:	2200      	movs	r2, #0
 80015ee:	4619      	mov	r1, r3
 80015f0:	f002 fbfe 	bl	8003df0 <HAL_GPIO_WritePin>
    uint8_t header[2] = {RADIO_WRITE_BUFFER, offset};
 80015f4:	2300      	movs	r3, #0
 80015f6:	82bb      	strh	r3, [r7, #20]
 80015f8:	230e      	movs	r3, #14
 80015fa:	753b      	strb	r3, [r7, #20]
 80015fc:	7afb      	ldrb	r3, [r7, #11]
 80015fe:	757b      	strb	r3, [r7, #21]
    HAL_SPI_Transmit(hspi, header, 2, HAL_MAX_DELAY);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001604:	f107 0114 	add.w	r1, r7, #20
 8001608:	f04f 33ff 	mov.w	r3, #4294967295
 800160c:	2202      	movs	r2, #2
 800160e:	f007 f88d 	bl	800872c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, buffer, size, HAL_MAX_DELAY);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001616:	7abb      	ldrb	r3, [r7, #10]
 8001618:	b29a      	uxth	r2, r3
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f007 f884 	bl	800872c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800162e:	2201      	movs	r2, #1
 8001630:	4619      	mov	r1, r3
 8001632:	f002 fbdd 	bl	8003df0 <HAL_GPIO_WritePin>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_ZN9SX126xHal10ReadBufferEhPhh>:

void SX126xHal::ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	461a      	mov	r2, r3
 800164a:	460b      	mov	r3, r1
 800164c:	72fb      	strb	r3, [r7, #11]
 800164e:	4613      	mov	r3, r2
 8001650:	72bb      	strb	r3, [r7, #10]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	f002 fbc6 	bl	8003df0 <HAL_GPIO_WritePin>
    uint8_t header[2] = {RADIO_READ_BUFFER, offset};
 8001664:	2300      	movs	r3, #0
 8001666:	82bb      	strh	r3, [r7, #20]
 8001668:	231e      	movs	r3, #30
 800166a:	753b      	strb	r3, [r7, #20]
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	757b      	strb	r3, [r7, #21]
    HAL_SPI_Transmit(hspi, header, 2, HAL_MAX_DELAY);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001674:	f107 0114 	add.w	r1, r7, #20
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
 800167c:	2202      	movs	r2, #2
 800167e:	f007 f855 	bl	800872c <HAL_SPI_Transmit>
    uint8_t dummy = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	74fb      	strb	r3, [r7, #19]
    HAL_SPI_Transmit(hspi, &dummy, 1, HAL_MAX_DELAY);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800168a:	f107 0113 	add.w	r1, r7, #19
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	2201      	movs	r2, #1
 8001694:	f007 f84a 	bl	800872c <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, size, HAL_MAX_DELAY);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800169c:	7abb      	ldrb	r3, [r7, #10]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	f007 fa51 	bl	8008b4c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80016b4:	2201      	movs	r2, #1
 80016b6:	4619      	mov	r1, r3
 80016b8:	f002 fb9a 	bl	8003df0 <HAL_GPIO_WritePin>
}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_ZN9SX126xHal12GetDioStatusEv>:

uint8_t SX126xHal::GetDioStatus(void) {
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
    return (HAL_GPIO_ReadPin(dio3Port, dio3Pin) << 3) | (HAL_GPIO_ReadPin(dio2Port, dio2Pin) << 2) |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80016d6:	4619      	mov	r1, r3
 80016d8:	4610      	mov	r0, r2
 80016da:	f002 fb71 	bl	8003dc0 <HAL_GPIO_ReadPin>
 80016de:	4603      	mov	r3, r0
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	b25c      	sxtb	r4, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80016ee:	4619      	mov	r1, r3
 80016f0:	4610      	mov	r0, r2
 80016f2:	f002 fb65 	bl	8003dc0 <HAL_GPIO_ReadPin>
 80016f6:	4603      	mov	r3, r0
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	4323      	orrs	r3, r4
 80016fe:	b25c      	sxtb	r4, r3
           (HAL_GPIO_ReadPin(dio1Port, dio1Pin) << 1) | (HAL_GPIO_ReadPin(busyPort, busyPin));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800170a:	4619      	mov	r1, r3
 800170c:	4610      	mov	r0, r2
 800170e:	f002 fb57 	bl	8003dc0 <HAL_GPIO_ReadPin>
 8001712:	4603      	mov	r3, r0
 8001714:	005b      	lsls	r3, r3, #1
    return (HAL_GPIO_ReadPin(dio3Port, dio3Pin) << 3) | (HAL_GPIO_ReadPin(dio2Port, dio2Pin) << 2) |
 8001716:	b25b      	sxtb	r3, r3
 8001718:	4323      	orrs	r3, r4
 800171a:	b25c      	sxtb	r4, r3
           (HAL_GPIO_ReadPin(dio1Port, dio1Pin) << 1) | (HAL_GPIO_ReadPin(busyPort, busyPin));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001726:	4619      	mov	r1, r3
 8001728:	4610      	mov	r0, r2
 800172a:	f002 fb49 	bl	8003dc0 <HAL_GPIO_ReadPin>
 800172e:	4603      	mov	r3, r0
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4323      	orrs	r3, r4
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2db      	uxtb	r3, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bd90      	pop	{r4, r7, pc}

08001740 <_ZN9SX126xHal13GetDeviceTypeEv>:

uint8_t SX126xHal::GetDeviceType(void) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
        return SX1262;
 8001748:	2301      	movs	r3, #1
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_ZN9SX126xHal13GetFreqSelectEv>:

uint8_t SX126xHal::GetFreqSelect(void) {
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
        return MATCHING_FREQ_868;
 800175e:	2306      	movs	r3, #6
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_ZN9SX126xHal7AntSwOnEv>:

void SX126xHal::AntSwOn(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(antSwPort, antSwPin, GPIO_PIN_SET);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800177e:	2201      	movs	r2, #1
 8001780:	4619      	mov	r1, r3
 8001782:	f002 fb35 	bl	8003df0 <HAL_GPIO_WritePin>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <_ZN9SX126xHal8AntSwOffEv>:

void SX126xHal::AntSwOff(void) {
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(antSwPort, antSwPin, GPIO_PIN_RESET);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80017a0:	2200      	movs	r2, #0
 80017a2:	4619      	mov	r1, r3
 80017a4:	f002 fb24 	bl	8003df0 <HAL_GPIO_WritePin>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_ZN9SX126xHal13InvokeHandlerEv>:

// Method to invoke the handler
void SX126xHal::InvokeHandler(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	if (this->dio1IrqHandler) { // Check if the handler is set
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <_ZN9SX126xHal13InvokeHandlerEv+0x20>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <_ZN9SX126xHal13InvokeHandlerEv+0x20>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <_ZN9SX126xHal13InvokeHandlerEv+0x22>
 80017d0:	2300      	movs	r3, #0
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d01a      	beq.n	800180c <_ZN9SX126xHal13InvokeHandlerEv+0x5c>
		(this->*dio1IrqHandler)(); // Call the member function
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017dc:	1052      	asrs	r2, r2, #1
 80017de:	1899      	adds	r1, r3, r2
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <_ZN9SX126xHal13InvokeHandlerEv+0x42>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f0:	e009      	b.n	8001806 <_ZN9SX126xHal13InvokeHandlerEv+0x56>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017f8:	1052      	asrs	r2, r2, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001802:	4413      	add	r3, r2
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4608      	mov	r0, r1
 8001808:	4798      	blx	r3
    } else {
    	printf("No IRQ handler assigned!");
    }
}
 800180a:	e002      	b.n	8001812 <_ZN9SX126xHal13InvokeHandlerEv+0x62>
    	printf("No IRQ handler assigned!");
 800180c:	4803      	ldr	r0, [pc, #12]	@ (800181c <_ZN9SX126xHal13InvokeHandlerEv+0x6c>)
 800180e:	f009 fccd 	bl	800b1ac <iprintf>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	0800e9e8 	.word	0x0800e9e8

08001820 <_ZN6SX126x4InitEv>:
 */
static bool ImageCalibrated = false;


void SX126x::Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
    CalibrationParams_t calibParam;

    Reset();
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3308      	adds	r3, #8
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
    /*
    uint32_t value = ReadReg(0x08D8);
    value = value | 0x1E;
    WriteReg(0x08D8, value);
	*/
    IoIrqInit(dioIrq);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3330      	adds	r3, #48	@ 0x30
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	322c      	adds	r2, #44	@ 0x2c
 8001840:	ca06      	ldmia	r2, {r1, r2}
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3

    Wakeup();
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	333c      	adds	r3, #60	@ 0x3c
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	4798      	blx	r3
    SetStandby(STDBY_RC);
 8001852:	2100      	movs	r1, #0
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f8db 	bl	8001a10 <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t>

    // Configure TCXO or XTAL based on hardware detection logic

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 800185a:	2101      	movs	r1, #1
 800185c:	4820      	ldr	r0, [pc, #128]	@ (80018e0 <_ZN6SX126x4InitEv+0xc0>)
 800185e:	f002 faaf 	bl	8003dc0 <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <_ZN6SX126x4InitEv+0x6a>
    {
        SetDio3AsTcxoCtrl(TCXO_CTRL_1_7V, 320); // 5 ms
 8001872:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001876:	2101      	movs	r1, #1
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f9a5 	bl	8001bc8 <_ZN6SX126x17SetDio3AsTcxoCtrlE22RadioTcxoCtrlVoltage_tm>
        calibParam.Value = 0x7F;
 800187e:	237f      	movs	r3, #127	@ 0x7f
 8001880:	733b      	strb	r3, [r7, #12]
        Calibrate(calibParam);
 8001882:	7b39      	ldrb	r1, [r7, #12]
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f901 	bl	8001a8c <_ZN6SX126x9CalibrateE19CalibrationParams_t>
    }

    SetPollingMode();
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fc0b 	bl	80020a6 <_ZN6SX126x14SetPollingModeEv>

    AntSwOn();
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	334c      	adds	r3, #76	@ 0x4c
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	4798      	blx	r3
    SetDio2AsRfSwitchCtrl(true);
 800189c:	2101      	movs	r1, #1
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f97f 	bl	8001ba2 <_ZN6SX126x21SetDio2AsRfSwitchCtrlEh>

    OperatingMode = MODE_STDBY_RC;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    SetPacketType(PACKET_TYPE_LORA);
 80018ac:	2101      	movs	r1, #1
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f9ea 	bl	8001c88 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>

#ifdef USE_CONFIG_PUBLIC_NETWORK
    WriteReg(REG_LR_SYNCWORD, (LORA_MAC_PUBLIC_SYNCWORD >> 8) & 0xFF);
    WriteReg(REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF);
#else
    WriteReg(REG_LR_SYNCWORD, (LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	331c      	adds	r3, #28
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2214      	movs	r2, #20
 80018be:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
    WriteReg(REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	331c      	adds	r3, #28
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2224      	movs	r2, #36	@ 0x24
 80018d0:	f240 7141 	movw	r1, #1857	@ 0x741
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4798      	blx	r3
#endif
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	42020400 	.word	0x42020400

080018e4 <_ZN6SX126x16CheckDeviceReadyEv>:
{

}

void SX126x::CheckDeviceReady(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    if ((GetOperatingMode() == MODE_SLEEP) || (GetOperatingMode() == MODE_RX_DC))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3334      	adds	r3, #52	@ 0x34
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	4798      	blx	r3
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <_ZN6SX126x16CheckDeviceReadyEv+0x2c>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3334      	adds	r3, #52	@ 0x34
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	4798      	blx	r3
 800190a:	4603      	mov	r3, r0
 800190c:	2b06      	cmp	r3, #6
 800190e:	d101      	bne.n	8001914 <_ZN6SX126x16CheckDeviceReadyEv+0x30>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <_ZN6SX126x16CheckDeviceReadyEv+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <_ZN6SX126x16CheckDeviceReadyEv+0x4e>
    {
        Wakeup();
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	333c      	adds	r3, #60	@ 0x3c
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	4798      	blx	r3
        AntSwOn();
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	334c      	adds	r3, #76	@ 0x4c
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
    }
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_ZN6SX126x16GetOperatingModeEv>:

RadioOperatingModes_t SX126x::GetOperatingMode( void )
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
    return OperatingMode;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_ZN6SX126x10SetPayloadEPhh>:


void SX126x::SetPayload( uint8_t *payload, uint8_t size )
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	4613      	mov	r3, r2
 8001960:	71fb      	strb	r3, [r7, #7]
    WriteBuffer( 0x00, payload, size );
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3328      	adds	r3, #40	@ 0x28
 8001968:	681c      	ldr	r4, [r3, #0]
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	2100      	movs	r1, #0
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	47a0      	blx	r4
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bd90      	pop	{r4, r7, pc}

0800197c <_ZN6SX126x10SetCrcSeedEt>:
    WriteRegister( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SX126x::SetCrcSeed( uint16_t seed )
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	0a1b      	lsrs	r3, r3, #8
 800198c:	b29b      	uxth	r3, r3
 800198e:	b2db      	uxtb	r3, r3
 8001990:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	737b      	strb	r3, [r7, #13]

    switch( GetPacketType( ) )
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f98c 	bl	8001cb6 <_ZN6SX126x13GetPacketTypeEv>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10b      	bne.n	80019bc <_ZN6SX126x10SetCrcSeedEt+0x40>
    {
        case PACKET_TYPE_GFSK:
            WriteRegister( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3318      	adds	r3, #24
 80019aa:	681c      	ldr	r4, [r3, #0]
 80019ac:	f107 020c 	add.w	r2, r7, #12
 80019b0:	2302      	movs	r3, #2
 80019b2:	f240 61bc 	movw	r1, #1724	@ 0x6bc
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	47a0      	blx	r4
            break;
 80019ba:	e000      	b.n	80019be <_ZN6SX126x10SetCrcSeedEt+0x42>

        default:
            break;
 80019bc:	bf00      	nop
    }
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd90      	pop	{r4, r7, pc}

080019c6 <_ZN6SX126x16SetCrcPolynomialEt>:

void SX126x::SetCrcPolynomial( uint16_t polynomial )
{
 80019c6:	b590      	push	{r4, r7, lr}
 80019c8:	b085      	sub	sp, #20
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80019d2:	887b      	ldrh	r3, [r7, #2]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80019dc:	887b      	ldrh	r3, [r7, #2]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	737b      	strb	r3, [r7, #13]

    switch( GetPacketType( ) )
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f967 	bl	8001cb6 <_ZN6SX126x13GetPacketTypeEv>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10b      	bne.n	8001a06 <_ZN6SX126x16SetCrcPolynomialEt+0x40>
    {
        case PACKET_TYPE_GFSK:
            WriteRegister( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	3318      	adds	r3, #24
 80019f4:	681c      	ldr	r4, [r3, #0]
 80019f6:	f107 020c 	add.w	r2, r7, #12
 80019fa:	2302      	movs	r3, #2
 80019fc:	f240 61be 	movw	r1, #1726	@ 0x6be
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	47a0      	blx	r4
            break;
 8001a04:	e000      	b.n	8001a08 <_ZN6SX126x16SetCrcPolynomialEt+0x42>

        default:
            break;
 8001a06:	bf00      	nop
    }
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd90      	pop	{r4, r7, pc}

08001a10 <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t>:
    WriteCommand(RADIO_SET_SLEEP, &sleepConfig.Value, 1);
    OperatingMode = MODE_SLEEP;
}

void SX126x::SetStandby(RadioStandbyModes_t standbyConfig)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	70fb      	strb	r3, [r7, #3]
    WriteCommand(RADIO_SET_STANDBY, (uint8_t *)&standbyConfig, 1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	3310      	adds	r3, #16
 8001a22:	681c      	ldr	r4, [r3, #0]
 8001a24:	1cfa      	adds	r2, r7, #3
 8001a26:	2301      	movs	r3, #1
 8001a28:	2180      	movs	r1, #128	@ 0x80
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	47a0      	blx	r4
    OperatingMode = (standbyConfig == STDBY_RC) ? MODE_STDBY_RC : MODE_STDBY_XOSC;
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t+0x28>
 8001a34:	2201      	movs	r2, #1
 8001a36:	e000      	b.n	8001a3a <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t+0x2a>
 8001a38:	2202      	movs	r2, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd90      	pop	{r4, r7, pc}

08001a48 <_ZN6SX126x5SetTxEm>:

void SX126x::SetTx(uint32_t timeout)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2204      	movs	r2, #4
 8001a56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	0c1b      	lsrs	r3, r3, #16
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t)(timeout & 0xFF);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	73bb      	strb	r3, [r7, #14]
    WriteCommand(RADIO_SET_TX, buf, 3);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	3310      	adds	r3, #16
 8001a76:	681c      	ldr	r4, [r3, #0]
 8001a78:	f107 020c 	add.w	r2, r7, #12
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	2183      	movs	r1, #131	@ 0x83
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	47a0      	blx	r4
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd90      	pop	{r4, r7, pc}

08001a8c <_ZN6SX126x9CalibrateE19CalibrationParams_t>:
#endif
    WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}

void SX126x::Calibrate( CalibrationParams_t calibParam )
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	7039      	strb	r1, [r7, #0]
    WriteCommand( RADIO_CALIBRATE, &calibParam.Value, 1 );
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	3310      	adds	r3, #16
 8001a9c:	681c      	ldr	r4, [r3, #0]
 8001a9e:	463a      	mov	r2, r7
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	2189      	movs	r1, #137	@ 0x89
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	47a0      	blx	r4
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}

08001ab0 <_ZN6SX126x11SetPaConfigEhhhh>:
    }
    WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
}

void SX126x::SetPaConfig( uint8_t paDutyCycle, uint8_t HpMax, uint8_t deviceSel, uint8_t paLUT )
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	70fb      	strb	r3, [r7, #3]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	70bb      	strb	r3, [r7, #2]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	707b      	strb	r3, [r7, #1]

#ifdef ADV_DEBUG
    printf("SetPaConfig ");
#endif

    buf[0] = paDutyCycle;
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	733b      	strb	r3, [r7, #12]
    buf[1] = HpMax;
 8001ace:	78bb      	ldrb	r3, [r7, #2]
 8001ad0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8001ad2:	787b      	ldrb	r3, [r7, #1]
 8001ad4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLUT;
 8001ad6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ada:	73fb      	strb	r3, [r7, #15]
    WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3310      	adds	r3, #16
 8001ae2:	681c      	ldr	r4, [r3, #0]
 8001ae4:	f107 020c 	add.w	r2, r7, #12
 8001ae8:	2304      	movs	r3, #4
 8001aea:	2195      	movs	r1, #149	@ 0x95
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	47a0      	blx	r4
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd90      	pop	{r4, r7, pc}

08001af8 <_ZN6SX126x15SetDioIrqParamsEtttt>:
{
    WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SX126x::SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	4608      	mov	r0, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	817b      	strh	r3, [r7, #10]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	813b      	strh	r3, [r7, #8]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	80fb      	strh	r3, [r7, #6]

#ifdef ADV_DEBUG
    printf("SetDioIrqParams ");
#endif

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8001b12:	897b      	ldrh	r3, [r7, #10]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	743b      	strb	r3, [r7, #16]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8001b1c:	897b      	ldrh	r3, [r7, #10]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8001b22:	893b      	ldrh	r3, [r7, #8]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001b2c:	893b      	ldrh	r3, [r7, #8]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8001b42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	75bb      	strb	r3, [r7, #22]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001b4c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	75fb      	strb	r3, [r7, #23]
    WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	3310      	adds	r3, #16
 8001b58:	681c      	ldr	r4, [r3, #0]
 8001b5a:	f107 0210 	add.w	r2, r7, #16
 8001b5e:	2308      	movs	r3, #8
 8001b60:	2108      	movs	r1, #8
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	47a0      	blx	r4
}
 8001b66:	bf00      	nop
 8001b68:	371c      	adds	r7, #28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}

08001b6e <_ZN6SX126x12GetIrqStatusEv>:

uint16_t SX126x::GetIrqStatus( void )
{
 8001b6e:	b590      	push	{r4, r7, lr}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
    uint8_t irqStatus[2];

    ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3314      	adds	r3, #20
 8001b7c:	681c      	ldr	r4, [r3, #0]
 8001b7e:	f107 020c 	add.w	r2, r7, #12
 8001b82:	2302      	movs	r3, #2
 8001b84:	2112      	movs	r1, #18
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	47a0      	blx	r4
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 8001b8a:	7b3b      	ldrb	r3, [r7, #12]
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	b21a      	sxth	r2, r3
 8001b90:	7b7b      	ldrb	r3, [r7, #13]
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	b29b      	uxth	r3, r3
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}

08001ba2 <_ZN6SX126x21SetDio2AsRfSwitchCtrlEh>:

void SX126x::SetDio2AsRfSwitchCtrl( uint8_t enable )
{
 8001ba2:	b590      	push	{r4, r7, lr}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	70fb      	strb	r3, [r7, #3]
#ifdef ADV_DEBUG
    printf("SetDio2AsRfSwitchCtrl ");
#endif
    WriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3310      	adds	r3, #16
 8001bb4:	681c      	ldr	r4, [r3, #0]
 8001bb6:	1cfa      	adds	r2, r7, #3
 8001bb8:	2301      	movs	r3, #1
 8001bba:	219d      	movs	r1, #157	@ 0x9d
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	47a0      	blx	r4
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd90      	pop	{r4, r7, pc}

08001bc8 <_ZN6SX126x17SetDio3AsTcxoCtrlE22RadioTcxoCtrlVoltage_tm>:

void SX126x::SetDio3AsTcxoCtrl(RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout)
{
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8001bd6:	7afb      	ldrb	r3, [r7, #11]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	753b      	strb	r3, [r7, #20]
    buf[1] = (uint8_t)((timeout >> 16) & 0xFF);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	0c1b      	lsrs	r3, r3, #16
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	757b      	strb	r3, [r7, #21]
    buf[2] = (uint8_t)((timeout >> 8) & 0xFF);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	75bb      	strb	r3, [r7, #22]
    buf[3] = (uint8_t)(timeout & 0xFF);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	75fb      	strb	r3, [r7, #23]
    WriteCommand(RADIO_SET_TCXOMODE, buf, 4);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3310      	adds	r3, #16
 8001bfc:	681c      	ldr	r4, [r3, #0]
 8001bfe:	f107 0214 	add.w	r2, r7, #20
 8001c02:	2304      	movs	r3, #4
 8001c04:	2197      	movs	r1, #151	@ 0x97
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	47a0      	blx	r4
}
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd90      	pop	{r4, r7, pc}
 8001c12:	0000      	movs	r0, r0
 8001c14:	0000      	movs	r0, r0
	...

08001c18 <_ZN6SX126x14SetRfFrequencyEm>:

void SX126x::SetRfFrequency(uint32_t frequency)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
    uint8_t buf[4];
    uint32_t freq = (uint32_t)((double)frequency / (double)FREQ_STEP);
 8001c22:	6838      	ldr	r0, [r7, #0]
 8001c24:	f7fe fc7e 	bl	8000524 <__aeabi_ui2d>
 8001c28:	a315      	add	r3, pc, #84	@ (adr r3, 8001c80 <_ZN6SX126x14SetRfFrequencyEm+0x68>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	f7fe fe1d 	bl	800086c <__aeabi_ddiv>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f7fe ffc5 	bl	8000bc8 <__aeabi_d2uiz>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	60fb      	str	r3, [r7, #12]

    buf[0] = (uint8_t)((freq >> 24) & 0xFF);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	0e1b      	lsrs	r3, r3, #24
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)((freq >> 16) & 0xFF);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0c1b      	lsrs	r3, r3, #16
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	727b      	strb	r3, [r7, #9]
    buf[2] = (uint8_t)((freq >> 8) & 0xFF);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	72bb      	strb	r3, [r7, #10]
    buf[3] = (uint8_t)(freq & 0xFF);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	72fb      	strb	r3, [r7, #11]
    WriteCommand(RADIO_SET_RFFREQUENCY, buf, 4);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3310      	adds	r3, #16
 8001c66:	681c      	ldr	r4, [r3, #0]
 8001c68:	f107 0208 	add.w	r2, r7, #8
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	2186      	movs	r1, #134	@ 0x86
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	47a0      	blx	r4
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd90      	pop	{r4, r7, pc}
 8001c7c:	f3af 8000 	nop.w
 8001c80:	00000000 	.word	0x00000000
 8001c84:	3fee8480 	.word	0x3fee8480

08001c88 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>:

void SX126x::SetPacketType( RadioPacketTypes_t packetType )
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
#ifdef ADV_DEBUG
    printf("SetPacketType ");
#endif

    // Save packet type internally to avoid questioning the radio
    this->PacketType = packetType;
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3310      	adds	r3, #16
 8001ca2:	681c      	ldr	r4, [r3, #0]
 8001ca4:	1cfa      	adds	r2, r7, #3
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	218a      	movs	r1, #138	@ 0x8a
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	47a0      	blx	r4
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd90      	pop	{r4, r7, pc}

08001cb6 <_ZN6SX126x13GetPacketTypeEv>:

RadioPacketTypes_t SX126x::GetPacketType( void )
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
    return this->PacketType;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_ZN6SX126x11SetTxParamsEa16RadioRampTimes_t>:

void SX126x::SetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	70fb      	strb	r3, [r7, #3]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];

	SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	2207      	movs	r2, #7
 8001ce8:	2104      	movs	r1, #4
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fee0 	bl	8001ab0 <_ZN6SX126x11SetPaConfigEhhhh>
	power = 22;
 8001cf0:	2316      	movs	r3, #22
 8001cf2:	70fb      	strb	r3, [r7, #3]
	WriteReg( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	331c      	adds	r3, #28
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2238      	movs	r2, #56	@ 0x38
 8001cfe:	f640 01e7 	movw	r1, #2279	@ 0x8e7
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	4798      	blx	r3
	buf[0] = power;
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	733b      	strb	r3, [r7, #12]
	buf[1] = RADIO_RAMP_200_US;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	737b      	strb	r3, [r7, #13]

	WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3310      	adds	r3, #16
 8001d14:	681c      	ldr	r4, [r3, #0]
 8001d16:	f107 020c 	add.w	r2, r7, #12
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	218e      	movs	r1, #142	@ 0x8e
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	47a0      	blx	r4
}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd90      	pop	{r4, r7, pc}
 8001d2a:	0000      	movs	r0, r0
 8001d2c:	0000      	movs	r0, r0
	...

08001d30 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t>:

void SX126x::SetModulationParams( ModulationParams_t *modulationParams )
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
    uint8_t n;
    uint32_t tempVal = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001d3e:	4a72      	ldr	r2, [pc, #456]	@ (8001f08 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1d8>)
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d48:	e883 0003 	stmia.w	r3, {r0, r1}
    printf("SetModulationParams ");
#endif

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != modulationParams->PacketType )
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d005      	beq.n	8001d66 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x36>
    {
        this->SetPacketType( modulationParams->PacketType );
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ff91 	bl	8001c88 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( modulationParams->PacketType )
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x44>
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d04e      	beq.n	8001e10 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0xe0>
        buf[2] = modulationParams->Params.LoRa.CodingRate;
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
        break;
    default:
    case PACKET_TYPE_NONE:
        return;
 8001d72:	e0be      	b.n	8001ef2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1c2>
        n = 8;
 8001d74:	2308      	movs	r3, #8
 8001d76:	75fb      	strb	r3, [r7, #23]
        tempVal = ( uint32_t )( 32 * ( ( double )XTAL_FREQ / ( double )modulationParams->Params.Gfsk.BitRate ) );
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbd1 	bl	8000524 <__aeabi_ui2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	a15c      	add	r1, pc, #368	@ (adr r1, 8001ef8 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1c8>)
 8001d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d8c:	f7fe fd6e 	bl	800086c <__aeabi_ddiv>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8001f0c <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1dc>)
 8001d9e:	f7fe fc3b 	bl	8000618 <__aeabi_dmul>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	f7fe ff0d 	bl	8000bc8 <__aeabi_d2uiz>
 8001dae:	4603      	mov	r3, r0
 8001db0:	613b      	str	r3, [r7, #16]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	7b1b      	ldrb	r3, [r3, #12]
 8001dcc:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	7b5b      	ldrb	r3, [r3, #13]
 8001dd2:	733b      	strb	r3, [r7, #12]
        tempVal = ( uint32_t )( ( double )modulationParams->Params.Gfsk.Fdev / ( double )FREQ_STEP );
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fba3 	bl	8000524 <__aeabi_ui2d>
 8001dde:	a348      	add	r3, pc, #288	@ (adr r3, 8001f00 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1d0>)
 8001de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de4:	f7fe fd42 	bl	800086c <__aeabi_ddiv>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f7fe feea 	bl	8000bc8 <__aeabi_d2uiz>
 8001df4:	4603      	mov	r3, r0
 8001df6:	613b      	str	r3, [r7, #16]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	0c1b      	lsrs	r3, r3, #16
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	73fb      	strb	r3, [r7, #15]
        break;
 8001e0e:	e065      	b.n	8001edc <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1ac>
        n = 4;
 8001e10:	2304      	movs	r3, #4
 8001e12:	75fb      	strb	r3, [r7, #23]
        switch( modulationParams->Params.LoRa.Bandwidth )
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	7c5b      	ldrb	r3, [r3, #17]
 8001e18:	2b0a      	cmp	r3, #10
 8001e1a:	d851      	bhi.n	8001ec0 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x190>
 8001e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e24 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0xf4>)
 8001e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e22:	bf00      	nop
 8001e24:	08001eb9 	.word	0x08001eb9
 8001e28:	08001eb9 	.word	0x08001eb9
 8001e2c:	08001eb9 	.word	0x08001eb9
 8001e30:	08001e89 	.word	0x08001e89
 8001e34:	08001e71 	.word	0x08001e71
 8001e38:	08001e59 	.word	0x08001e59
 8001e3c:	08001e51 	.word	0x08001e51
 8001e40:	08001ec1 	.word	0x08001ec1
 8001e44:	08001eb9 	.word	0x08001eb9
 8001e48:	08001eb9 	.word	0x08001eb9
 8001e4c:	08001ea1 	.word	0x08001ea1
                 modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2200      	movs	r2, #0
 8001e54:	74da      	strb	r2, [r3, #19]
                break;
 8001e56:	e034      	b.n	8001ec2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                if( modulationParams->Params.LoRa.SpreadingFactor == 12 )
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	7c1b      	ldrb	r3, [r3, #16]
 8001e5c:	2b0c      	cmp	r3, #12
 8001e5e:	d103      	bne.n	8001e68 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x138>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2201      	movs	r2, #1
 8001e64:	74da      	strb	r2, [r3, #19]
                break;
 8001e66:	e02c      	b.n	8001ec2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	74da      	strb	r2, [r3, #19]
                break;
 8001e6e:	e028      	b.n	8001ec2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                if( modulationParams->Params.LoRa.SpreadingFactor >= 11 )
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	7c1b      	ldrb	r3, [r3, #16]
 8001e74:	2b0a      	cmp	r3, #10
 8001e76:	d903      	bls.n	8001e80 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x150>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	74da      	strb	r2, [r3, #19]
                break;
 8001e7e:	e020      	b.n	8001ec2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2200      	movs	r2, #0
 8001e84:	74da      	strb	r2, [r3, #19]
                break;
 8001e86:	e01c      	b.n	8001ec2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                if( modulationParams->Params.LoRa.SpreadingFactor >= 10 )
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	7c1b      	ldrb	r3, [r3, #16]
 8001e8c:	2b09      	cmp	r3, #9
 8001e8e:	d903      	bls.n	8001e98 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x168>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2201      	movs	r2, #1
 8001e94:	74da      	strb	r2, [r3, #19]
                break;
 8001e96:	e014      	b.n	8001ec2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	74da      	strb	r2, [r3, #19]
                break;
 8001e9e:	e010      	b.n	8001ec2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                if( modulationParams->Params.LoRa.SpreadingFactor >= 9 )
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	7c1b      	ldrb	r3, [r3, #16]
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d903      	bls.n	8001eb0 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x180>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	74da      	strb	r2, [r3, #19]
                break;
 8001eae:	e008      	b.n	8001ec2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	74da      	strb	r2, [r3, #19]
                break;
 8001eb6:	e004      	b.n	8001ec2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	74da      	strb	r2, [r3, #19]
                break;
 8001ebe:	e000      	b.n	8001ec2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                break;
 8001ec0:	bf00      	nop
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	7c1b      	ldrb	r3, [r3, #16]
 8001ec6:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	7c5b      	ldrb	r3, [r3, #17]
 8001ecc:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	7c9b      	ldrb	r3, [r3, #18]
 8001ed2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	7cdb      	ldrb	r3, [r3, #19]
 8001ed8:	72fb      	strb	r3, [r7, #11]
        break;
 8001eda:	bf00      	nop
    }
    WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	3310      	adds	r3, #16
 8001ee2:	681c      	ldr	r4, [r3, #0]
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	f107 0208 	add.w	r2, r7, #8
 8001eec:	218b      	movs	r1, #139	@ 0x8b
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	47a0      	blx	r4
}
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd90      	pop	{r4, r7, pc}
 8001ef8:	00000000 	.word	0x00000000
 8001efc:	417e8480 	.word	0x417e8480
 8001f00:	00000000 	.word	0x00000000
 8001f04:	3fee8480 	.word	0x3fee8480
 8001f08:	0800ea04 	.word	0x0800ea04
 8001f0c:	40400000 	.word	0x40400000

08001f10 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t>:

void SX126x::SetPacketParams( PacketParams_t *packetParams )
{
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
    uint8_t n;
    uint8_t crcVal = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001f1e:	4a47      	ldr	r2, [pc, #284]	@ (800203c <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x12c>)
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f26:	c303      	stmia	r3!, {r0, r1}
 8001f28:	701a      	strb	r2, [r3, #0]
    printf("SetPacketParams ");
#endif

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != packetParams->PacketType )
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d005      	beq.n	8001f44 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x34>
    {
        this->SetPacketType( packetParams->PacketType );
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff fea2 	bl	8001c88 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( packetParams->PacketType )
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x42>
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d04e      	beq.n	8001fee <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0xde>
        buf[4] = packetParams->Params.LoRa.CrcMode;
        buf[5] = packetParams->Params.LoRa.InvertIQ;
        break;
    default:
    case PACKET_TYPE_NONE:
        return;
 8001f50:	e071      	b.n	8002036 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x126>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	7a5b      	ldrb	r3, [r3, #9]
 8001f56:	2bf1      	cmp	r3, #241	@ 0xf1
 8001f58:	d10c      	bne.n	8001f74 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x64>
            SetCrcSeed( CRC_IBM_SEED );
 8001f5a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff fd0c 	bl	800197c <_ZN6SX126x10SetCrcSeedEt>
            SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8001f64:	f248 0105 	movw	r1, #32773	@ 0x8005
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff fd2c 	bl	80019c6 <_ZN6SX126x16SetCrcPolynomialEt>
            crcVal = RADIO_CRC_2_BYTES;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	75bb      	strb	r3, [r7, #22]
 8001f72:	e013      	b.n	8001f9c <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x8c>
        else if(  packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	7a5b      	ldrb	r3, [r3, #9]
 8001f78:	2bf2      	cmp	r3, #242	@ 0xf2
 8001f7a:	d10c      	bne.n	8001f96 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x86>
            SetCrcSeed( CRC_CCITT_SEED );
 8001f7c:	f641 510f 	movw	r1, #7439	@ 0x1d0f
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff fcfb 	bl	800197c <_ZN6SX126x10SetCrcSeedEt>
            SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8001f86:	f241 0121 	movw	r1, #4129	@ 0x1021
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff fd1b 	bl	80019c6 <_ZN6SX126x16SetCrcPolynomialEt>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8001f90:	2306      	movs	r3, #6
 8001f92:	75bb      	strb	r3, [r7, #22]
 8001f94:	e002      	b.n	8001f9c <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x8c>
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	7a5b      	ldrb	r3, [r3, #9]
 8001f9a:	75bb      	strb	r3, [r7, #22]
        n = 9;
 8001f9c:	2309      	movs	r3, #9
 8001f9e:	75fb      	strb	r3, [r7, #23]
        packetParams->Params.Gfsk.PreambleLength = packetParams->Params.Gfsk.PreambleLength << 3;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	885b      	ldrh	r3, [r3, #2]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	805a      	strh	r2, [r3, #2]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	885b      	ldrh	r3, [r3, #2]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	885b      	ldrh	r3, [r3, #2]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	791b      	ldrb	r3, [r3, #4]
 8001fc4:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength << 3 ); // convert from byte to bit
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	795b      	ldrb	r3, [r3, #5]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	799b      	ldrb	r3, [r3, #6]
 8001fd4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	79db      	ldrb	r3, [r3, #7]
 8001fda:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	7a1b      	ldrb	r3, [r3, #8]
 8001fe0:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8001fe2:	7dbb      	ldrb	r3, [r7, #22]
 8001fe4:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	7a9b      	ldrb	r3, [r3, #10]
 8001fea:	753b      	strb	r3, [r7, #20]
        break;
 8001fec:	e018      	b.n	8002020 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x110>
        n = 6;
 8001fee:	2306      	movs	r3, #6
 8001ff0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	899b      	ldrh	r3, [r3, #12]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	899b      	ldrh	r3, [r3, #12]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.LoRa.HeaderType;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	7b9b      	ldrb	r3, [r3, #14]
 800200a:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	7bdb      	ldrb	r3, [r3, #15]
 8002010:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	7c1b      	ldrb	r3, [r3, #16]
 8002016:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	7c5b      	ldrb	r3, [r3, #17]
 800201c:	747b      	strb	r3, [r7, #17]
        break;
 800201e:	bf00      	nop
    }
    WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3310      	adds	r3, #16
 8002026:	681c      	ldr	r4, [r3, #0]
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	b29b      	uxth	r3, r3
 800202c:	f107 020c 	add.w	r2, r7, #12
 8002030:	218c      	movs	r1, #140	@ 0x8c
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	47a0      	blx	r4
}
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	bd90      	pop	{r4, r7, pc}
 800203c:	0800ea0c 	.word	0x0800ea0c

08002040 <_ZN6SX126x9GetStatusEv>:
    buf[1] = rxBaseAddress;
    WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
}

RadioStatus_t SX126x::GetStatus( void )
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
    uint8_t stat = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	73fb      	strb	r3, [r7, #15]
    RadioStatus_t status;

    ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	3314      	adds	r3, #20
 8002052:	681c      	ldr	r4, [r3, #0]
 8002054:	f107 020f 	add.w	r2, r7, #15
 8002058:	2301      	movs	r3, #1
 800205a:	21c0      	movs	r1, #192	@ 0xc0
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	47a0      	blx	r4
    status.Value = stat;
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	733b      	strb	r3, [r7, #12]
    return status;
 8002064:	7b3b      	ldrb	r3, [r7, #12]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bd90      	pop	{r4, r7, pc}

0800206e <_ZN6SX126x14ClearIrqStatusEt>:
    ReadCommand( RADIO_GET_ERROR, ( uint8_t * )&error, 2 );
    return error;
}

void SX126x::ClearIrqStatus( uint16_t irq )
{
 800206e:	b590      	push	{r4, r7, lr}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	460b      	mov	r3, r1
 8002078:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];
#ifdef ADV_DEBUG
    printf("ClearIrqStatus ");
#endif
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 800207a:	887b      	ldrh	r3, [r7, #2]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	b29b      	uxth	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 8002084:	887b      	ldrh	r3, [r7, #2]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3310      	adds	r3, #16
 8002090:	681c      	ldr	r4, [r3, #0]
 8002092:	f107 020c 	add.w	r2, r7, #12
 8002096:	2302      	movs	r3, #2
 8002098:	2102      	movs	r1, #2
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	47a0      	blx	r4
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd90      	pop	{r4, r7, pc}

080020a6 <_ZN6SX126x14SetPollingModeEv>:

void SX126x::SetPollingMode( void )
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
    this->PollingMode = true;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_ZN6SX126x16SetInterruptModeEv>:

void SX126x::SetInterruptMode( void )
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
    this->PollingMode = false;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <_ZN6SX126x8OnDioIrqEv>:

void SX126x::OnDioIrq( void )
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
    /*
     * When polling mode is activated, it is up to the application to call
     * ProcessIrqs( ). Otherwise, the driver automatically calls ProcessIrqs( )
     * on radio interrupt.
     */
    if( this->PollingMode == true )
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d104      	bne.n	80020fa <_ZN6SX126x8OnDioIrqEv+0x1c>
    {
        this->IrqState = true;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    }
    else
    {
        this->ProcessIrqs( );
    }
}
 80020f8:	e002      	b.n	8002100 <_ZN6SX126x8OnDioIrqEv+0x22>
        this->ProcessIrqs( );
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f804 	bl	8002108 <_ZN6SX126x11ProcessIrqsEv>
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <_ZN6SX126x11ProcessIrqsEv>:

void SX126x::ProcessIrqs( void )
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    if( this->PollingMode == true )
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002116:	2b01      	cmp	r3, #1
 8002118:	d10d      	bne.n	8002136 <_ZN6SX126x11ProcessIrqsEv+0x2e>
    {
        if( this->IrqState == true )
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002120:	2b01      	cmp	r3, #1
 8002122:	f040 809d 	bne.w	8002260 <_ZN6SX126x11ProcessIrqsEv+0x158>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002126:	b672      	cpsid	i
}
 8002128:	bf00      	nop
        {
            __disable_irq( );
            this->IrqState = false;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002132:	b662      	cpsie	i
}
 8002134:	bf00      	nop
        {
            return;
        }
    }

    uint16_t irqRegs = GetIrqStatus( );
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff fd19 	bl	8001b6e <_ZN6SX126x12GetIrqStatusEv>
 800213c:	4603      	mov	r3, r0
 800213e:	81fb      	strh	r3, [r7, #14]
    ClearIrqStatus( IRQ_RADIO_ALL );
 8002140:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff92 	bl	800206e <_ZN6SX126x14ClearIrqStatusEt>

#ifdef ADV_DEBUG
    printf("0x%04x\n\r", irqRegs );
#endif

    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b00      	cmp	r3, #0
 8002152:	d02b      	beq.n	80021ac <_ZN6SX126x11ProcessIrqsEv+0xa4>
    {
        // LoRa Only
        FrequencyError = 0x000000 | ( ( 0x0F & ReadReg( REG_FREQUENCY_ERRORBASEADDR ) ) << 16 );
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3324      	adds	r3, #36	@ 0x24
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f240 716b 	movw	r1, #1899	@ 0x76b
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	4798      	blx	r3
 8002164:	4603      	mov	r3, r0
 8002166:	041b      	lsls	r3, r3, #16
 8002168:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800216c:	4a3e      	ldr	r2, [pc, #248]	@ (8002268 <_ZN6SX126x11ProcessIrqsEv+0x160>)
 800216e:	6013      	str	r3, [r2, #0]
        FrequencyError = FrequencyError | ( ReadReg( REG_FREQUENCY_ERRORBASEADDR + 1 ) << 8 );
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3324      	adds	r3, #36	@ 0x24
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f240 716c 	movw	r1, #1900	@ 0x76c
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
 8002180:	4603      	mov	r3, r0
 8002182:	021a      	lsls	r2, r3, #8
 8002184:	4b38      	ldr	r3, [pc, #224]	@ (8002268 <_ZN6SX126x11ProcessIrqsEv+0x160>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4313      	orrs	r3, r2
 800218a:	4a37      	ldr	r2, [pc, #220]	@ (8002268 <_ZN6SX126x11ProcessIrqsEv+0x160>)
 800218c:	6013      	str	r3, [r2, #0]
        FrequencyError = FrequencyError | ( ReadReg( REG_FREQUENCY_ERRORBASEADDR + 2 ) );
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3324      	adds	r3, #36	@ 0x24
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f240 716d 	movw	r1, #1901	@ 0x76d
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b31      	ldr	r3, [pc, #196]	@ (8002268 <_ZN6SX126x11ProcessIrqsEv+0x160>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002268 <_ZN6SX126x11ProcessIrqsEv+0x160>)
 80021aa:	6013      	str	r3, [r2, #0]
    }

    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 80021ac:	89fb      	ldrh	r3, [r7, #14]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d006      	beq.n	80021c4 <_ZN6SX126x11ProcessIrqsEv+0xbc>
    {
        if( txDone != NULL )
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <_ZN6SX126x11ProcessIrqsEv+0xbc>
        {
            txDone( );
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4798      	blx	r3
        }
    }

    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 80021c4:	89fb      	ldrh	r3, [r7, #14]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d014      	beq.n	80021f8 <_ZN6SX126x11ProcessIrqsEv+0xf0>
    {
        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 80021ce:	89fb      	ldrh	r3, [r7, #14]
 80021d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <_ZN6SX126x11ProcessIrqsEv+0xe2>
        {
            if( rxError != NULL )
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00b      	beq.n	80021f8 <_ZN6SX126x11ProcessIrqsEv+0xf0>
            {
                rxError( IRQ_CRC_ERROR_CODE );
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	2004      	movs	r0, #4
 80021e6:	4798      	blx	r3
 80021e8:	e006      	b.n	80021f8 <_ZN6SX126x11ProcessIrqsEv+0xf0>
            }
        }
        else
        {
            if( rxDone != NULL )
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <_ZN6SX126x11ProcessIrqsEv+0xf0>
            {
                rxDone( );
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	4798      	blx	r3
            }
        }
    }

    if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 80021f8:	89fb      	ldrh	r3, [r7, #14]
 80021fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00f      	beq.n	8002222 <_ZN6SX126x11ProcessIrqsEv+0x11a>
    {
        if( cadDone != NULL )
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <_ZN6SX126x11ProcessIrqsEv+0x11a>
        {
            cadDone( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED );
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	89fa      	ldrh	r2, [r7, #14]
 8002210:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8002214:	2a00      	cmp	r2, #0
 8002216:	bf14      	ite	ne
 8002218:	2201      	movne	r2, #1
 800221a:	2200      	moveq	r2, #0
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	4610      	mov	r0, r2
 8002220:	4798      	blx	r3
        }
    }

    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8002222:	89fb      	ldrh	r3, [r7, #14]
 8002224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01a      	beq.n	8002262 <_ZN6SX126x11ProcessIrqsEv+0x15a>
    {
        if( ( txTimeout != NULL ) && ( OperatingMode == MODE_TX ) )
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <_ZN6SX126x11ProcessIrqsEv+0x13e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800223a:	2b04      	cmp	r3, #4
 800223c:	d103      	bne.n	8002246 <_ZN6SX126x11ProcessIrqsEv+0x13e>
        {
            txTimeout( );
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	4798      	blx	r3
 8002244:	e00d      	b.n	8002262 <_ZN6SX126x11ProcessIrqsEv+0x15a>
        }
        else if( ( rxTimeout != NULL ) && ( OperatingMode == MODE_RX ) )
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <_ZN6SX126x11ProcessIrqsEv+0x15a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002254:	2b05      	cmp	r3, #5
 8002256:	d104      	bne.n	8002262 <_ZN6SX126x11ProcessIrqsEv+0x15a>
        {
            rxTimeout( );
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	4798      	blx	r3
 800225e:	e000      	b.n	8002262 <_ZN6SX126x11ProcessIrqsEv+0x15a>
            return;
 8002260:	bf00      	nop
        {
            rxError( IRQ_HEADER_ERROR_CODE );
        }
    }  
*/
}
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000234 	.word	0x20000234

0800226c <Lora_init>:
uint8_t RxBuffer[RX_BUFFER_SIZE];
int8_t RssiValue = 0;
int8_t SnrValue = 0;

void Lora_init()
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	Radio.Init();
 8002270:	4805      	ldr	r0, [pc, #20]	@ (8002288 <Lora_init+0x1c>)
 8002272:	f7ff fad5 	bl	8001820 <_ZN6SX126x4InitEv>
	SetConfiguration(&radioConfiguration);
 8002276:	4805      	ldr	r0, [pc, #20]	@ (800228c <Lora_init+0x20>)
 8002278:	f000 f8d0 	bl	800241c <SetConfiguration>
	ConfigureGeneralRadio(&Radio, &radioConfiguration);
 800227c:	4903      	ldr	r1, [pc, #12]	@ (800228c <Lora_init+0x20>)
 800227e:	4802      	ldr	r0, [pc, #8]	@ (8002288 <Lora_init+0x1c>)
 8002280:	f000 f916 	bl	80024b0 <ConfigureGeneralRadio>
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000280 	.word	0x20000280
 800228c:	2000023c 	.word	0x2000023c

08002290 <Lora_Operation_TX>:
	    }
	}
}

void Lora_Operation_TX()
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	Lora_init();
 8002294:	f7ff ffea 	bl	800226c <Lora_init>
	// initialize transmitter
	TxState = SEND_PACKET;
 8002298:	4b02      	ldr	r3, [pc, #8]	@ (80022a4 <Lora_Operation_TX+0x14>)
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
	while(true){
		RunTXStateMachine();
 800229e:	f000 f803 	bl	80022a8 <RunTXStateMachine>
 80022a2:	e7fc      	b.n	800229e <Lora_Operation_TX+0xe>
 80022a4:	20000238 	.word	0x20000238

080022a8 <RunTXStateMachine>:
	}
}

void RunTXStateMachine(){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
    switch(TxState){
 80022ac:	4b1b      	ldr	r3, [pc, #108]	@ (800231c <RunTXStateMachine+0x74>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <RunTXStateMachine+0x14>
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d019      	beq.n	80022ee <RunTXStateMachine+0x46>
                TxState = SEND_PACKET;
            }
            break;
        }
    }
}
 80022ba:	e02d      	b.n	8002318 <RunTXStateMachine+0x70>
        	PrepareBuffer(&Radio, messageToSend);
 80022bc:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <RunTXStateMachine+0x78>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	4818      	ldr	r0, [pc, #96]	@ (8002324 <RunTXStateMachine+0x7c>)
 80022c4:	f000 f849 	bl	800235a <PrepareBuffer>
        	ConfigureRadioTx(&Radio, &radioConfiguration);
 80022c8:	4917      	ldr	r1, [pc, #92]	@ (8002328 <RunTXStateMachine+0x80>)
 80022ca:	4816      	ldr	r0, [pc, #88]	@ (8002324 <RunTXStateMachine+0x7c>)
 80022cc:	f000 f832 	bl	8002334 <ConfigureRadioTx>
        	Radio.SetTx(radioConfiguration.txTimeout);
 80022d0:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <RunTXStateMachine+0x80>)
 80022d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d4:	4619      	mov	r1, r3
 80022d6:	4813      	ldr	r0, [pc, #76]	@ (8002324 <RunTXStateMachine+0x7c>)
 80022d8:	f7ff fbb6 	bl	8001a48 <_ZN6SX126x5SetTxEm>
        	HAL_GPIO_WritePin(SX_LED_TX_GPIO_Port, SX_LED_TX_Pin, GPIO_PIN_SET); // Turn LED On
 80022dc:	2201      	movs	r2, #1
 80022de:	2102      	movs	r1, #2
 80022e0:	4812      	ldr	r0, [pc, #72]	@ (800232c <RunTXStateMachine+0x84>)
 80022e2:	f001 fd85 	bl	8003df0 <HAL_GPIO_WritePin>
        	TxState = WAIT_SEND_DONE;
 80022e6:	4b0d      	ldr	r3, [pc, #52]	@ (800231c <RunTXStateMachine+0x74>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
            break;
 80022ec:	e014      	b.n	8002318 <RunTXStateMachine+0x70>
            if(radioFlags.txDone){
 80022ee:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <RunTXStateMachine+0x88>)
 80022f0:	789b      	ldrb	r3, [r3, #2]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <RunTXStateMachine+0x5a>
                radioFlags.txDone = false;  // reset interrupted flag
 80022f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <RunTXStateMachine+0x88>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	709a      	strb	r2, [r3, #2]
                TxState = SEND_PACKET;
 80022fc:	4b07      	ldr	r3, [pc, #28]	@ (800231c <RunTXStateMachine+0x74>)
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
            if(radioFlags.txTimeout){
 8002302:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <RunTXStateMachine+0x88>)
 8002304:	791b      	ldrb	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <RunTXStateMachine+0x6e>
                radioFlags.txTimeout = false;  // reset interrupted flag
 800230a:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <RunTXStateMachine+0x88>)
 800230c:	2200      	movs	r2, #0
 800230e:	711a      	strb	r2, [r3, #4]
                TxState = SEND_PACKET;
 8002310:	4b02      	ldr	r3, [pc, #8]	@ (800231c <RunTXStateMachine+0x74>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
            break;
 8002316:	bf00      	nop
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000238 	.word	0x20000238
 8002320:	20000024 	.word	0x20000024
 8002324:	20000280 	.word	0x20000280
 8002328:	2000023c 	.word	0x2000023c
 800232c:	42020800 	.word	0x42020800
 8002330:	20000278 	.word	0x20000278

08002334 <ConfigureRadioTx>:

void ConfigureRadioTx(SX126xHal *radio, RadioConfigurations_t *config){
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af02      	add	r7, sp, #8
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
    radio->SetDioIrqParams(config->irqTx, config->irqTx, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8002348:	2300      	movs	r3, #0
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2300      	movs	r3, #0
 800234e:	f7ff fbd3 	bl	8001af8 <_ZN6SX126x15SetDioIrqParamsEtttt>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <PrepareBuffer>:

void ConfigureRadioRx(SX126xHal *radio, RadioConfigurations_t *config){
    radio->SetDioIrqParams(config->irqRx, config->irqRx, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
}

void PrepareBuffer(SX126xHal *radio, const Messages_t *messageToSend){
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
    radio->SetPayload((uint8_t*)messageToSend, MESSAGE_SIZE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2204      	movs	r2, #4
 8002368:	6839      	ldr	r1, [r7, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff faf2 	bl	8001954 <_ZN6SX126x10SetPayloadEPhh>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <OnRxDone>:

void OnRxDone( void )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SX_LED_RX_GPIO_Port, SX_LED_RX_Pin, GPIO_PIN_SET); // Turn LED On
 800237c:	2201      	movs	r2, #1
 800237e:	2101      	movs	r1, #1
 8002380:	4806      	ldr	r0, [pc, #24]	@ (800239c <OnRxDone+0x24>)
 8002382:	f001 fd35 	bl	8003df0 <HAL_GPIO_WritePin>
    radioFlags.rxDone= true;
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <OnRxDone+0x28>)
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SX_LED_RX_GPIO_Port, SX_LED_RX_Pin, GPIO_PIN_RESET); // Turn LED On
 800238c:	2200      	movs	r2, #0
 800238e:	2101      	movs	r1, #1
 8002390:	4802      	ldr	r0, [pc, #8]	@ (800239c <OnRxDone+0x24>)
 8002392:	f001 fd2d 	bl	8003df0 <HAL_GPIO_WritePin>
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	42020800 	.word	0x42020800
 80023a0:	20000278 	.word	0x20000278

080023a4 <OnRxTimeout>:

void OnRxTimeout( void )
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
    radioFlags.rxTimeout = true;
 80023a8:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <OnRxTimeout+0x14>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	70da      	strb	r2, [r3, #3]
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	20000278 	.word	0x20000278

080023bc <OnRxError>:

void OnRxError( IrqErrorCode_t errCode )
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
    radioFlags.rxError = true;
 80023c6:	4b04      	ldr	r3, [pc, #16]	@ (80023d8 <OnRxError+0x1c>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	705a      	strb	r2, [r3, #1]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	20000278 	.word	0x20000278

080023dc <OnTxDone>:

void OnTxDone( void )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
    radioFlags.txDone = true;
 80023e0:	4b04      	ldr	r3, [pc, #16]	@ (80023f4 <OnTxDone+0x18>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	709a      	strb	r2, [r3, #2]
    HAL_GPIO_WritePin(SX_LED_TX_GPIO_Port, SX_LED_TX_Pin, GPIO_PIN_RESET); // Turn LED On
 80023e6:	2200      	movs	r2, #0
 80023e8:	2102      	movs	r1, #2
 80023ea:	4803      	ldr	r0, [pc, #12]	@ (80023f8 <OnTxDone+0x1c>)
 80023ec:	f001 fd00 	bl	8003df0 <HAL_GPIO_WritePin>
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000278 	.word	0x20000278
 80023f8:	42020800 	.word	0x42020800

080023fc <OnTxTimeout>:

void OnTxTimeout( void )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
    radioFlags.txTimeout = true;
 8002400:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <OnTxTimeout+0x18>)
 8002402:	2201      	movs	r2, #1
 8002404:	711a      	strb	r2, [r3, #4]
    HAL_GPIO_WritePin(SX_LED_TX_GPIO_Port, SX_LED_TX_Pin, GPIO_PIN_RESET); // Turn LED On
 8002406:	2200      	movs	r2, #0
 8002408:	2102      	movs	r1, #2
 800240a:	4803      	ldr	r0, [pc, #12]	@ (8002418 <OnTxTimeout+0x1c>)
 800240c:	f001 fcf0 	bl	8003df0 <HAL_GPIO_WritePin>
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000278 	.word	0x20000278
 8002418:	42020800 	.word	0x42020800

0800241c <SetConfiguration>:

void SetConfiguration(RadioConfigurations_t *config){
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
    config->irqRx = IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f240 2202 	movw	r2, #514	@ 0x202
 800242a:	865a      	strh	r2, [r3, #50]	@ 0x32
    config->irqTx = IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f240 2201 	movw	r2, #513	@ 0x201
 8002432:	861a      	strh	r2, [r3, #48]	@ 0x30
    config->rfFrequency = RF_FREQUENCY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a1d      	ldr	r2, [pc, #116]	@ (80024ac <SetConfiguration+0x90>)
 8002438:	62da      	str	r2, [r3, #44]	@ 0x2c
    config->rxTimeout = RX_TIMEOUT_US;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8002440:	639a      	str	r2, [r3, #56]	@ 0x38
    config->txPower = TX_OUTPUT_POWER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2216      	movs	r2, #22
 8002446:	705a      	strb	r2, [r3, #1]
    config->txRampTime = RADIO_RAMP_10_US;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	709a      	strb	r2, [r3, #2]
    config->packetType = PACKET_TYPE_LORA;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
    config->modParams.PacketType = PACKET_TYPE_LORA;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	711a      	strb	r2, [r3, #4]
    config->modParams.Params.LoRa.Bandwidth = LORA_BANDWIDTH;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2206      	movs	r2, #6
 800245e:	755a      	strb	r2, [r3, #21]
    config->modParams.Params.LoRa.CodingRate = LORA_CODINGRATE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	759a      	strb	r2, [r3, #22]
    config->modParams.Params.LoRa.LowDatarateOptimize = LORA_LOWDATARATEOPTIMIZE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	75da      	strb	r2, [r3, #23]
    config->modParams.Params.LoRa.SpreadingFactor = LORA_SPREADING_FACTOR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	220c      	movs	r2, #12
 8002470:	751a      	strb	r2, [r3, #20]
    config->packetParams.PacketType = PACKET_TYPE_LORA;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	761a      	strb	r2, [r3, #24]
    config->packetParams.Params.LoRa.CrcMode = LORA_CRC_MODE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    config->packetParams.Params.LoRa.HeaderType = LORA_HEADER_TYPE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    config->packetParams.Params.LoRa.InvertIQ = LORA_IQ;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    config->packetParams.Params.LoRa.PayloadLength = BUFFER_SIZE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2203      	movs	r2, #3
 8002494:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    config->packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2210      	movs	r2, #16
 800249c:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	33bca100 	.word	0x33bca100

080024b0 <ConfigureGeneralRadio>:

void ConfigureGeneralRadio(SX126xHal *radio, RadioConfigurations_t *config){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
    radio->SetPacketType(config->packetType);
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f7ff fbe0 	bl	8001c88 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>
    radio->SetPacketParams(&config->packetParams);
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	3318      	adds	r3, #24
 80024ce:	4619      	mov	r1, r3
 80024d0:	4610      	mov	r0, r2
 80024d2:	f7ff fd1d 	bl	8001f10 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t>
    radio->SetModulationParams(&config->modParams);
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	3304      	adds	r3, #4
 80024dc:	4619      	mov	r1, r3
 80024de:	4610      	mov	r0, r2
 80024e0:	f7ff fc26 	bl	8001d30 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t>
    radio->SetRfFrequency(config->rfFrequency);
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ea:	4619      	mov	r1, r3
 80024ec:	4610      	mov	r0, r2
 80024ee:	f7ff fb93 	bl	8001c18 <_ZN6SX126x14SetRfFrequencyEm>
    radio->SetTxParams(config->txPower, config->txRampTime);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	f993 1001 	ldrsb.w	r1, [r3, #1]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	789b      	ldrb	r3, [r3, #2]
 80024fe:	461a      	mov	r2, r3
 8002500:	f7ff fbe6 	bl	8001cd0 <_ZN6SX126x11SetTxParamsEa16RadioRampTimes_t>
    radio->SetInterruptMode();
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fddb 	bl	80020c2 <_ZN6SX126x16SetInterruptModeEv>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
  if(GPIO_Pin == SX_DIO1_Pin){
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002524:	d102      	bne.n	800252c <HAL_GPIO_EXTI_Rising_Callback+0x18>
	  Radio.InvokeHandler();
 8002526:	4803      	ldr	r0, [pc, #12]	@ (8002534 <HAL_GPIO_EXTI_Rising_Callback+0x20>)
 8002528:	f7ff f942 	bl	80017b0 <_ZN9SX126xHal13InvokeHandlerEv>
  }
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000280 	.word	0x20000280

08002538 <_Z41__static_initialization_and_destruction_0ii>:
{
    PacketStatus_t pkt_stat;
    Radio.GetPacketStatus(&pkt_stat);
    *rssi = pkt_stat.Params.LoRa.RssiPkt;
    *snr = pkt_stat.Params.LoRa.SnrPkt;
}
 8002538:	b580      	push	{r7, lr}
 800253a:	b092      	sub	sp, #72	@ 0x48
 800253c:	af10      	add	r7, sp, #64	@ 0x40
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d12c      	bne.n	80025a2 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800254e:	4293      	cmp	r3, r2
 8002550:	d127      	bne.n	80025a2 <_Z41__static_initialization_and_destruction_0ii+0x6a>
				SX_ANT_SW_GPIO_Port, SX_ANT_SW_Pin, &RadioEvents);
 8002552:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002554:	930e      	str	r3, [sp, #56]	@ 0x38
 8002556:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800255a:	930d      	str	r3, [sp, #52]	@ 0x34
 800255c:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800255e:	930c      	str	r3, [sp, #48]	@ 0x30
 8002560:	2308      	movs	r3, #8
 8002562:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002564:	2304      	movs	r3, #4
 8002566:	930a      	str	r3, [sp, #40]	@ 0x28
 8002568:	2308      	movs	r3, #8
 800256a:	9309      	str	r3, [sp, #36]	@ 0x24
 800256c:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800256e:	9308      	str	r3, [sp, #32]
 8002570:	2300      	movs	r3, #0
 8002572:	9307      	str	r3, [sp, #28]
 8002574:	2300      	movs	r3, #0
 8002576:	9306      	str	r3, [sp, #24]
 8002578:	2300      	movs	r3, #0
 800257a:	9305      	str	r3, [sp, #20]
 800257c:	2300      	movs	r3, #0
 800257e:	9304      	str	r3, [sp, #16]
 8002580:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002584:	9303      	str	r3, [sp, #12]
 8002586:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002588:	9302      	str	r3, [sp, #8]
 800258a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002598:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800259a:	490d      	ldr	r1, [pc, #52]	@ (80025d0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800259c:	480d      	ldr	r0, [pc, #52]	@ (80025d4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800259e:	f7fe fde5 	bl	800116c <_ZN9SX126xHalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tmmS3_tP16RadioCallbacks_t>
SX126xHal Radio(&hspi1, SX_SPI1_CS_GPIO_Port, SX_SPI1_CS_Pin,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d107      	bne.n	80025b8 <_Z41__static_initialization_and_destruction_0ii+0x80>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d102      	bne.n	80025b8 <_Z41__static_initialization_and_destruction_0ii+0x80>
 80025b2:	4808      	ldr	r0, [pc, #32]	@ (80025d4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80025b4:	f7fe fe2c 	bl	8001210 <_ZN9SX126xHalD1Ev>
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000000 	.word	0x20000000
 80025c4:	42021400 	.word	0x42021400
 80025c8:	42020000 	.word	0x42020000
 80025cc:	42021000 	.word	0x42021000
 80025d0:	20000314 	.word	0x20000314
 80025d4:	20000280 	.word	0x20000280

080025d8 <_GLOBAL__sub_I_TxState>:
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
 80025dc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80025e0:	2001      	movs	r0, #1
 80025e2:	f7ff ffa9 	bl	8002538 <_Z41__static_initialization_and_destruction_0ii>
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <_GLOBAL__sub_D_TxState>:
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7ff ffa1 	bl	8002538 <_Z41__static_initialization_and_destruction_0ii>
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025fc:	f000 ff02 	bl	8003404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002600:	f000 f840 	bl	8002684 <_Z18SystemClock_Configv>

  /* Configure the System Power */
  SystemPower_Config();
 8002604:	f000 f8a9 	bl	800275a <_ZL18SystemPower_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002608:	f000 f9ac 	bl	8002964 <_ZL12MX_GPIO_Initv>
  MX_ICACHE_Init();
 800260c:	f000 f8b8 	bl	8002780 <_ZL14MX_ICACHE_Initv>
  MX_SPI1_Init();
 8002610:	f000 f8d4 	bl	80027bc <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 8002614:	f000 f94a 	bl	80028ac <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8002618:	2000      	movs	r0, #0
 800261a:	f000 fce9 	bl	8002ff0 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800261e:	2001      	movs	r0, #1
 8002620:	f000 fce6 	bl	8002ff0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8002624:	2002      	movs	r0, #2
 8002626:	f000 fce3 	bl	8002ff0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800262a:	2101      	movs	r1, #1
 800262c:	2000      	movs	r0, #0
 800262e:	f000 fd6f 	bl	8003110 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8002632:	4b12      	ldr	r3, [pc, #72]	@ (800267c <main+0x84>)
 8002634:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002638:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800263a:	4b10      	ldr	r3, [pc, #64]	@ (800267c <main+0x84>)
 800263c:	2200      	movs	r2, #0
 800263e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8002640:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <main+0x84>)
 8002642:	2200      	movs	r2, #0
 8002644:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8002646:	4b0d      	ldr	r3, [pc, #52]	@ (800267c <main+0x84>)
 8002648:	2200      	movs	r2, #0
 800264a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800264c:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <main+0x84>)
 800264e:	2200      	movs	r2, #0
 8002650:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8002652:	490a      	ldr	r1, [pc, #40]	@ (800267c <main+0x84>)
 8002654:	2000      	movs	r0, #0
 8002656:	f000 fdf5 	bl	8003244 <BSP_COM_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <main+0x76>
  {
    Error_Handler();
 800266a:	f000 fab1 	bl	8002bd0 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("INIT FINISH\n");
 800266e:	4804      	ldr	r0, [pc, #16]	@ (8002680 <main+0x88>)
 8002670:	f008 fe04 	bl	800b27c <puts>
  Lora_Operation_TX();
 8002674:	f7ff fe0c 	bl	8002290 <Lora_Operation_TX>
  //Lora_Operation_RX();
  while (1)
 8002678:	bf00      	nop
 800267a:	e7fd      	b.n	8002678 <main+0x80>
 800267c:	20000304 	.word	0x20000304
 8002680:	0800ea18 	.word	0x0800ea18

08002684 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b09e      	sub	sp, #120	@ 0x78
 8002688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800268a:	f107 0318 	add.w	r3, r7, #24
 800268e:	2260      	movs	r2, #96	@ 0x60
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f008 fef2 	bl	800b47c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002698:	463b      	mov	r3, r7
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
 80026a4:	611a      	str	r2, [r3, #16]
 80026a6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80026a8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80026ac:	f001 fc1a 	bl	8003ee4 <HAL_PWREx_ControlVoltageScaling>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf14      	ite	ne
 80026b6:	2301      	movne	r3, #1
 80026b8:	2300      	moveq	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <_Z18SystemClock_Configv+0x40>
  {
    Error_Handler();
 80026c0:	f000 fa86 	bl	8002bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80026c4:	2310      	movs	r3, #16
 80026c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80026c8:	2301      	movs	r3, #1
 80026ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80026cc:	2310      	movs	r3, #16
 80026ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026d4:	2302      	movs	r3, #2
 80026d6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80026d8:	2301      	movs	r3, #1
 80026da:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80026dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80026e2:	2303      	movs	r3, #3
 80026e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 80026e6:	2308      	movs	r3, #8
 80026e8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 80026ea:	2308      	movs	r3, #8
 80026ec:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80026ee:	2302      	movs	r3, #2
 80026f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80026f2:	2301      	movs	r3, #1
 80026f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80026f6:	230c      	movs	r3, #12
 80026f8:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026fe:	f107 0318 	add.w	r3, r7, #24
 8002702:	4618      	mov	r0, r3
 8002704:	f001 fcea 	bl	80040dc <HAL_RCC_OscConfig>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	bf14      	ite	ne
 800270e:	2301      	movne	r3, #1
 8002710:	2300      	moveq	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 8002718:	f000 fa5a 	bl	8002bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800271c:	231f      	movs	r3, #31
 800271e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002720:	2303      	movs	r3, #3
 8002722:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800272c:	2350      	movs	r3, #80	@ 0x50
 800272e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002734:	463b      	mov	r3, r7
 8002736:	2103      	movs	r1, #3
 8002738:	4618      	mov	r0, r3
 800273a:	f002 fbab 	bl	8004e94 <HAL_RCC_ClockConfig>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf14      	ite	ne
 8002744:	2301      	movne	r3, #1
 8002746:	2300      	moveq	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 800274e:	f000 fa3f 	bl	8002bd0 <Error_Handler>
  }
}
 8002752:	bf00      	nop
 8002754:	3778      	adds	r7, #120	@ 0x78
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <_ZL18SystemPower_Configv>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800275e:	f001 fcad 	bl	80040bc <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8002762:	2002      	movs	r0, #2
 8002764:	f001 fc4a 	bl	8003ffc <HAL_PWREx_ConfigSupply>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf14      	ite	ne
 800276e:	2301      	movne	r3, #1
 8002770:	2300      	moveq	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <_ZL18SystemPower_Configv+0x22>
  {
    Error_Handler();
 8002778:	f000 fa2a 	bl	8002bd0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}

08002780 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8002784:	2000      	movs	r0, #0
 8002786:	f001 fb7d 	bl	8003e84 <HAL_ICACHE_ConfigAssociativityMode>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf14      	ite	ne
 8002790:	2301      	movne	r3, #1
 8002792:	2300      	moveq	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 800279a:	f000 fa19 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800279e:	f001 fb91 	bl	8003ec4 <HAL_ICACHE_Enable>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bf14      	ite	ne
 80027a8:	2301      	movne	r3, #1
 80027aa:	2300      	moveq	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 80027b2:	f000 fa0d 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027cc:	4b35      	ldr	r3, [pc, #212]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 80027ce:	4a36      	ldr	r2, [pc, #216]	@ (80028a8 <_ZL12MX_SPI1_Initv+0xec>)
 80027d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027d2:	4b34      	ldr	r3, [pc, #208]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 80027d4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80027d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027da:	4b32      	ldr	r3, [pc, #200]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027e0:	4b30      	ldr	r3, [pc, #192]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 80027e2:	2207      	movs	r2, #7
 80027e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027e6:	4b2f      	ldr	r3, [pc, #188]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027ec:	4b2d      	ldr	r3, [pc, #180]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027f2:	4b2c      	ldr	r3, [pc, #176]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 80027f4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80027f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027fa:	4b2a      	ldr	r3, [pc, #168]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002800:	4b28      	ldr	r3, [pc, #160]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 8002802:	2200      	movs	r2, #0
 8002804:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002806:	4b27      	ldr	r3, [pc, #156]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 8002808:	2200      	movs	r2, #0
 800280a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800280c:	4b25      	ldr	r3, [pc, #148]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 800280e:	2200      	movs	r2, #0
 8002810:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8002812:	4b24      	ldr	r3, [pc, #144]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 8002814:	2207      	movs	r2, #7
 8002816:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002818:	4b22      	ldr	r3, [pc, #136]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 800281a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800281e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002820:	4b20      	ldr	r3, [pc, #128]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 8002822:	2200      	movs	r2, #0
 8002824:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002826:	4b1f      	ldr	r3, [pc, #124]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 8002828:	2200      	movs	r2, #0
 800282a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800282c:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 800282e:	2200      	movs	r2, #0
 8002830:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002832:	4b1c      	ldr	r3, [pc, #112]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 8002834:	2200      	movs	r2, #0
 8002836:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002838:	4b1a      	ldr	r3, [pc, #104]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 800283a:	2200      	movs	r2, #0
 800283c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800283e:	4b19      	ldr	r3, [pc, #100]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 8002840:	2200      	movs	r2, #0
 8002842:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002844:	4b17      	ldr	r3, [pc, #92]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 8002846:	2200      	movs	r2, #0
 8002848:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800284a:	4b16      	ldr	r3, [pc, #88]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 800284c:	2200      	movs	r2, #0
 800284e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002850:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 8002852:	2200      	movs	r2, #0
 8002854:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002856:	4813      	ldr	r0, [pc, #76]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 8002858:	f005 fe52 	bl	8008500 <HAL_SPI_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <_ZL12MX_SPI1_Initv+0xb4>
  {
    Error_Handler();
 800286c:	f000 f9b0 	bl	8002bd0 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8002870:	2300      	movs	r3, #0
 8002872:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8002874:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002878:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	4619      	mov	r1, r3
 8002882:	4808      	ldr	r0, [pc, #32]	@ (80028a4 <_ZL12MX_SPI1_Initv+0xe8>)
 8002884:	f006 fbed 	bl	8009062 <HAL_SPIEx_SetConfigAutonomousMode>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	bf14      	ite	ne
 800288e:	2301      	movne	r3, #1
 8002890:	2300      	moveq	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <_ZL12MX_SPI1_Initv+0xe0>
  {
    Error_Handler();
 8002898:	f000 f99a 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000314 	.word	0x20000314
 80028a8:	40013000 	.word	0x40013000

080028ac <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028b2:	f107 0310 	add.w	r3, r7, #16
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028ca:	4b25      	ldr	r3, [pc, #148]	@ (8002960 <_ZL12MX_TIM2_Initv+0xb4>)
 80028cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028d2:	4b23      	ldr	r3, [pc, #140]	@ (8002960 <_ZL12MX_TIM2_Initv+0xb4>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d8:	4b21      	ldr	r3, [pc, #132]	@ (8002960 <_ZL12MX_TIM2_Initv+0xb4>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80028de:	4b20      	ldr	r3, [pc, #128]	@ (8002960 <_ZL12MX_TIM2_Initv+0xb4>)
 80028e0:	f04f 32ff 	mov.w	r2, #4294967295
 80028e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002960 <_ZL12MX_TIM2_Initv+0xb4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002960 <_ZL12MX_TIM2_Initv+0xb4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028f2:	481b      	ldr	r0, [pc, #108]	@ (8002960 <_ZL12MX_TIM2_Initv+0xb4>)
 80028f4:	f006 fbf6 	bl	80090e4 <HAL_TIM_Base_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf14      	ite	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	2300      	moveq	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8002908:	f000 f962 	bl	8002bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800290c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002910:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002912:	f107 0310 	add.w	r3, r7, #16
 8002916:	4619      	mov	r1, r3
 8002918:	4811      	ldr	r0, [pc, #68]	@ (8002960 <_ZL12MX_TIM2_Initv+0xb4>)
 800291a:	f006 fc3b 	bl	8009194 <HAL_TIM_ConfigClockSource>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf14      	ite	ne
 8002924:	2301      	movne	r3, #1
 8002926:	2300      	moveq	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 800292e:	f000 f94f 	bl	8002bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	4619      	mov	r1, r3
 800293e:	4808      	ldr	r0, [pc, #32]	@ (8002960 <_ZL12MX_TIM2_Initv+0xb4>)
 8002940:	f006 fecc 	bl	80096dc <HAL_TIMEx_MasterConfigSynchronization>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	bf14      	ite	ne
 800294a:	2301      	movne	r3, #1
 800294c:	2300      	moveq	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8002954:	f000 f93c 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002958:	bf00      	nop
 800295a:	3720      	adds	r7, #32
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	200003a4 	.word	0x200003a4

08002964 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	@ 0x30
 8002968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296a:	f107 031c 	add.w	r3, r7, #28
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	60da      	str	r2, [r3, #12]
 8002978:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800297a:	4b8e      	ldr	r3, [pc, #568]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 800297c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002980:	4a8c      	ldr	r2, [pc, #560]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800298a:	4b8a      	ldr	r3, [pc, #552]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 800298c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002998:	4b86      	ldr	r3, [pc, #536]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 800299a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800299e:	4a85      	ldr	r2, [pc, #532]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 80029a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029a8:	4b82      	ldr	r3, [pc, #520]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 80029aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	4b7f      	ldr	r3, [pc, #508]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 80029b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029bc:	4a7d      	ldr	r2, [pc, #500]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029c6:	4b7b      	ldr	r3, [pc, #492]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 80029c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d4:	4b77      	ldr	r3, [pc, #476]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 80029d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029da:	4a76      	ldr	r2, [pc, #472]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029e4:	4b73      	ldr	r3, [pc, #460]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 80029e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029f2:	4b70      	ldr	r3, [pc, #448]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 80029f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029f8:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 80029fa:	f043 0320 	orr.w	r3, r3, #32
 80029fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a02:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 8002a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a10:	4b68      	ldr	r3, [pc, #416]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 8002a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a16:	4a67      	ldr	r2, [pc, #412]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 8002a18:	f043 0310 	orr.w	r3, r3, #16
 8002a1c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a20:	4b64      	ldr	r3, [pc, #400]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x250>)
 8002a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	607b      	str	r3, [r7, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SX_LED_RX_Pin|SX_LED_TX_Pin|SX_Mode_SX126X_Pin, GPIO_PIN_RESET);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	210b      	movs	r1, #11
 8002a32:	4861      	ldr	r0, [pc, #388]	@ (8002bb8 <_ZL12MX_GPIO_Initv+0x254>)
 8002a34:	f001 f9dc 	bl	8003df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_RESET_GPIO_Port, SX_RESET_Pin, GPIO_PIN_RESET);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2108      	movs	r1, #8
 8002a3c:	485f      	ldr	r0, [pc, #380]	@ (8002bbc <_ZL12MX_GPIO_Initv+0x258>)
 8002a3e:	f001 f9d7 	bl	8003df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SX_ANT_SW_Pin|SX_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002a42:	2200      	movs	r2, #0
 8002a44:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002a48:	485d      	ldr	r0, [pc, #372]	@ (8002bc0 <_ZL12MX_GPIO_Initv+0x25c>)
 8002a4a:	f001 f9d1 	bl	8003df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2120      	movs	r1, #32
 8002a52:	485c      	ldr	r0, [pc, #368]	@ (8002bc4 <_ZL12MX_GPIO_Initv+0x260>)
 8002a54:	f001 f9cc 	bl	8003df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SX_LED_RX_Pin SX_LED_TX_Pin SX_Mode_SX126X_Pin */
  GPIO_InitStruct.Pin = SX_LED_RX_Pin|SX_LED_TX_Pin|SX_Mode_SX126X_Pin;
 8002a58:	230b      	movs	r3, #11
 8002a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4852      	ldr	r0, [pc, #328]	@ (8002bb8 <_ZL12MX_GPIO_Initv+0x254>)
 8002a70:	f000 ffce 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8002a74:	2304      	movs	r3, #4
 8002a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002a80:	f107 031c 	add.w	r3, r7, #28
 8002a84:	4619      	mov	r1, r3
 8002a86:	484c      	ldr	r0, [pc, #304]	@ (8002bb8 <_ZL12MX_GPIO_Initv+0x254>)
 8002a88:	f000 ffc2 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_Mode_FRx_Pin */
  GPIO_InitStruct.Pin = SX_Mode_FRx_Pin;
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a90:	2300      	movs	r3, #0
 8002a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SX_Mode_FRx_GPIO_Port, &GPIO_InitStruct);
 8002a98:	f107 031c 	add.w	r3, r7, #28
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4847      	ldr	r0, [pc, #284]	@ (8002bbc <_ZL12MX_GPIO_Initv+0x258>)
 8002aa0:	f000 ffb6 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_RESET_Pin */
  GPIO_InitStruct.Pin = SX_RESET_Pin;
 8002aa4:	2308      	movs	r3, #8
 8002aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SX_RESET_GPIO_Port, &GPIO_InitStruct);
 8002ab4:	f107 031c 	add.w	r3, r7, #28
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4840      	ldr	r0, [pc, #256]	@ (8002bbc <_ZL12MX_GPIO_Initv+0x258>)
 8002abc:	f000 ffa8 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX_OPT_Pin UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = SX_OPT_Pin|UCPD_FLT_Pin;
 8002ac0:	f244 0301 	movw	r3, #16385	@ 0x4001
 8002ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 031c 	add.w	r3, r7, #28
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	483b      	ldr	r0, [pc, #236]	@ (8002bc4 <_ZL12MX_GPIO_Initv+0x260>)
 8002ad6:	f000 ff9b 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX_ANT_SW_Pin SX_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SX_ANT_SW_Pin|SX_SPI1_CS_Pin;
 8002ada:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002aec:	f107 031c 	add.w	r3, r7, #28
 8002af0:	4619      	mov	r1, r3
 8002af2:	4833      	ldr	r0, [pc, #204]	@ (8002bc0 <_ZL12MX_GPIO_Initv+0x25c>)
 8002af4:	f000 ff8c 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_DIO1_Pin */
  GPIO_InitStruct.Pin = SX_DIO1_Pin;
 8002af8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002afe:	4b32      	ldr	r3, [pc, #200]	@ (8002bc8 <_ZL12MX_GPIO_Initv+0x264>)
 8002b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SX_DIO1_GPIO_Port, &GPIO_InitStruct);
 8002b06:	f107 031c 	add.w	r3, r7, #28
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	482f      	ldr	r0, [pc, #188]	@ (8002bcc <_ZL12MX_GPIO_Initv+0x268>)
 8002b0e:	f000 ff7f 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BUSY_Pin */
  GPIO_InitStruct.Pin = SX_BUSY_Pin;
 8002b12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SX_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002b20:	f107 031c 	add.w	r3, r7, #28
 8002b24:	4619      	mov	r1, r3
 8002b26:	4829      	ldr	r0, [pc, #164]	@ (8002bcc <_ZL12MX_GPIO_Initv+0x268>)
 8002b28:	f000 ff72 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b32:	2303      	movs	r3, #3
 8002b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3a:	f107 031c 	add.w	r3, r7, #28
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4820      	ldr	r0, [pc, #128]	@ (8002bc4 <_ZL12MX_GPIO_Initv+0x260>)
 8002b42:	f000 ff65 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b46:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b58:	f107 031c 	add.w	r3, r7, #28
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4817      	ldr	r0, [pc, #92]	@ (8002bbc <_ZL12MX_GPIO_Initv+0x258>)
 8002b60:	f000 ff56 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b72:	f107 031c 	add.w	r3, r7, #28
 8002b76:	4619      	mov	r1, r3
 8002b78:	4810      	ldr	r0, [pc, #64]	@ (8002bbc <_ZL12MX_GPIO_Initv+0x258>)
 8002b7a:	f000 ff49 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8002b7e:	2320      	movs	r3, #32
 8002b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b82:	2301      	movs	r3, #1
 8002b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8002b8e:	f107 031c 	add.w	r3, r7, #28
 8002b92:	4619      	mov	r1, r3
 8002b94:	480b      	ldr	r0, [pc, #44]	@ (8002bc4 <_ZL12MX_GPIO_Initv+0x260>)
 8002b96:	f000 ff3b 	bl	8003a10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	2016      	movs	r0, #22
 8002ba0:	f000 fdd2 	bl	8003748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8002ba4:	2016      	movs	r0, #22
 8002ba6:	f000 fde9 	bl	800377c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002baa:	bf00      	nop
 8002bac:	3730      	adds	r7, #48	@ 0x30
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	46020c00 	.word	0x46020c00
 8002bb8:	42020800 	.word	0x42020800
 8002bbc:	42020000 	.word	0x42020000
 8002bc0:	42021400 	.word	0x42021400
 8002bc4:	42020400 	.word	0x42020400
 8002bc8:	10110000 	.word	0x10110000
 8002bcc:	42021000 	.word	0x42021000

08002bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd4:	b672      	cpsid	i
}
 8002bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bd8:	bf00      	nop
 8002bda:	e7fd      	b.n	8002bd8 <Error_Handler+0x8>

08002bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	4b0a      	ldr	r3, [pc, #40]	@ (8002c0c <HAL_MspInit+0x30>)
 8002be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002be8:	4a08      	ldr	r2, [pc, #32]	@ (8002c0c <HAL_MspInit+0x30>)
 8002bea:	f043 0304 	orr.w	r3, r3, #4
 8002bee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002bf2:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <HAL_MspInit+0x30>)
 8002bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	46020c00 	.word	0x46020c00

08002c10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b0c0      	sub	sp, #256	@ 0x100
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c28:	f107 0310 	add.w	r3, r7, #16
 8002c2c:	22d8      	movs	r2, #216	@ 0xd8
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f008 fc23 	bl	800b47c <memset>
  if(hspi->Instance==SPI1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a27      	ldr	r2, [pc, #156]	@ (8002cd8 <HAL_SPI_MspInit+0xc8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d145      	bne.n	8002ccc <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002c40:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c52:	f107 0310 	add.w	r3, r7, #16
 8002c56:	4618      	mov	r0, r3
 8002c58:	f002 fcf0 	bl	800563c <HAL_RCCEx_PeriphCLKConfig>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002c62:	f7ff ffb5 	bl	8002bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c66:	4b1d      	ldr	r3, [pc, #116]	@ (8002cdc <HAL_SPI_MspInit+0xcc>)
 8002c68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002cdc <HAL_SPI_MspInit+0xcc>)
 8002c6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c72:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002c76:	4b19      	ldr	r3, [pc, #100]	@ (8002cdc <HAL_SPI_MspInit+0xcc>)
 8002c78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c84:	4b15      	ldr	r3, [pc, #84]	@ (8002cdc <HAL_SPI_MspInit+0xcc>)
 8002c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c8a:	4a14      	ldr	r2, [pc, #80]	@ (8002cdc <HAL_SPI_MspInit+0xcc>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c94:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <HAL_SPI_MspInit+0xcc>)
 8002c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SX_SPI1_SCK_Pin|SX_SPI1_MISO_Pin|SX_SPI1_MOSI_Pin;
 8002ca2:	23e0      	movs	r3, #224	@ 0xe0
 8002ca4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cba:	2305      	movs	r3, #5
 8002cbc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4806      	ldr	r0, [pc, #24]	@ (8002ce0 <HAL_SPI_MspInit+0xd0>)
 8002cc8:	f000 fea2 	bl	8003a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ccc:	bf00      	nop
 8002cce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40013000 	.word	0x40013000
 8002cdc:	46020c00 	.word	0x46020c00
 8002ce0:	42020000 	.word	0x42020000

08002ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf4:	d10e      	bne.n	8002d14 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d20 <HAL_TIM_Base_MspInit+0x3c>)
 8002cf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cfc:	4a08      	ldr	r2, [pc, #32]	@ (8002d20 <HAL_TIM_Base_MspInit+0x3c>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002d06:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_TIM_Base_MspInit+0x3c>)
 8002d08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	46020c00 	.word	0x46020c00

08002d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <NMI_Handler+0x4>

08002d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <HardFault_Handler+0x4>

08002d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <MemManage_Handler+0x4>

08002d3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d40:	bf00      	nop
 8002d42:	e7fd      	b.n	8002d40 <BusFault_Handler+0x4>

08002d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d48:	bf00      	nop
 8002d4a:	e7fd      	b.n	8002d48 <UsageFault_Handler+0x4>

08002d4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d7a:	f000 fbe9 	bl	8003550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SX_DIO1_Pin);
 8002d86:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002d8a:	f001 f849 	bl	8003e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f000 fa32 	bl	8003200 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002d9c:	bf00      	nop
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return 1;
 8002da4:	2301      	movs	r3, #1
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <_kill>:

int _kill(int pid, int sig)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dba:	f008 fbc1 	bl	800b540 <__errno>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2216      	movs	r2, #22
 8002dc2:	601a      	str	r2, [r3, #0]
  return -1;
 8002dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <_exit>:

void _exit (int status)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ffe7 	bl	8002db0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002de2:	bf00      	nop
 8002de4:	e7fd      	b.n	8002de2 <_exit+0x12>

08002de6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	e00a      	b.n	8002e0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002df8:	f3af 8000 	nop.w
 8002dfc:	4601      	mov	r1, r0
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	60ba      	str	r2, [r7, #8]
 8002e04:	b2ca      	uxtb	r2, r1
 8002e06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	dbf0      	blt.n	8002df8 <_read+0x12>
  }

  return len;
 8002e16:	687b      	ldr	r3, [r7, #4]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	e009      	b.n	8002e46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	60ba      	str	r2, [r7, #8]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fa66 	bl	800330c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	3301      	adds	r3, #1
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	dbf1      	blt.n	8002e32 <_write+0x12>
  }
  return len;
 8002e4e:	687b      	ldr	r3, [r7, #4]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <_close>:

int _close(int file)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e80:	605a      	str	r2, [r3, #4]
  return 0;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <_isatty>:

int _isatty(int file)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e98:	2301      	movs	r3, #1
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec8:	4a14      	ldr	r2, [pc, #80]	@ (8002f1c <_sbrk+0x5c>)
 8002eca:	4b15      	ldr	r3, [pc, #84]	@ (8002f20 <_sbrk+0x60>)
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed4:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002edc:	4b11      	ldr	r3, [pc, #68]	@ (8002f24 <_sbrk+0x64>)
 8002ede:	4a12      	ldr	r2, [pc, #72]	@ (8002f28 <_sbrk+0x68>)
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee2:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <_sbrk+0x64>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d207      	bcs.n	8002f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef0:	f008 fb26 	bl	800b540 <__errno>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
 8002efe:	e009      	b.n	8002f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f00:	4b08      	ldr	r3, [pc, #32]	@ (8002f24 <_sbrk+0x64>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f06:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <_sbrk+0x64>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4a05      	ldr	r2, [pc, #20]	@ (8002f24 <_sbrk+0x64>)
 8002f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20270000 	.word	0x20270000
 8002f20:	00000400 	.word	0x00000400
 8002f24:	200003f0 	.word	0x200003f0
 8002f28:	200005e8 	.word	0x200005e8

08002f2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f30:	4b18      	ldr	r3, [pc, #96]	@ (8002f94 <SystemInit+0x68>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f36:	4a17      	ldr	r2, [pc, #92]	@ (8002f94 <SystemInit+0x68>)
 8002f38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002f40:	4b15      	ldr	r3, [pc, #84]	@ (8002f98 <SystemInit+0x6c>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002f46:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <SystemInit+0x6c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002f4c:	4b12      	ldr	r3, [pc, #72]	@ (8002f98 <SystemInit+0x6c>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002f52:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <SystemInit+0x6c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002f58:	4b0f      	ldr	r3, [pc, #60]	@ (8002f98 <SystemInit+0x6c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8002f98 <SystemInit+0x6c>)
 8002f5e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002f62:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002f66:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002f68:	4b0b      	ldr	r3, [pc, #44]	@ (8002f98 <SystemInit+0x6c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f98 <SystemInit+0x6c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a09      	ldr	r2, [pc, #36]	@ (8002f98 <SystemInit+0x6c>)
 8002f74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002f7a:	4b07      	ldr	r3, [pc, #28]	@ (8002f98 <SystemInit+0x6c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f80:	4b04      	ldr	r3, [pc, #16]	@ (8002f94 <SystemInit+0x68>)
 8002f82:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002f86:	609a      	str	r2, [r3, #8]
  #endif
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000ed00 	.word	0xe000ed00
 8002f98:	46020c00 	.word	0x46020c00

08002f9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002f9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fd4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fa0:	f7ff ffc4 	bl	8002f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002fa4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002fa6:	e003      	b.n	8002fb0 <LoopCopyDataInit>

08002fa8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002faa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002fac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002fae:	3104      	adds	r1, #4

08002fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002fb0:	480a      	ldr	r0, [pc, #40]	@ (8002fdc <LoopForever+0xa>)
	ldr	r3, =_edata
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002fb4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002fb6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002fb8:	d3f6      	bcc.n	8002fa8 <CopyDataInit>
	ldr	r2, =_sbss
 8002fba:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002fbc:	e002      	b.n	8002fc4 <LoopFillZerobss>

08002fbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002fbe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002fc0:	f842 3b04 	str.w	r3, [r2], #4

08002fc4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002fc4:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <LoopForever+0x16>)
	cmp	r2, r3
 8002fc6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002fc8:	d3f9      	bcc.n	8002fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fca:	f008 fabf 	bl	800b54c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fce:	f7ff fb13 	bl	80025f8 <main>

08002fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002fd2:	e7fe      	b.n	8002fd2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002fd4:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8002fd8:	0800f060 	.word	0x0800f060
	ldr	r0, =_sdata
 8002fdc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002fe0:	20000218 	.word	0x20000218
	ldr	r2, =_sbss
 8002fe4:	20000218 	.word	0x20000218
	ldr	r3, = _ebss
 8002fe8:	200005e6 	.word	0x200005e6

08002fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fec:	e7fe      	b.n	8002fec <ADC1_2_IRQHandler>
	...

08002ff0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08e      	sub	sp, #56	@ 0x38
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d009      	beq.n	800301c <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d006      	beq.n	800301c <BSP_LED_Init+0x2c>
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d003      	beq.n	800301c <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003014:	f06f 0301 	mvn.w	r3, #1
 8003018:	637b      	str	r3, [r7, #52]	@ 0x34
 800301a:	e06e      	b.n	80030fa <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d10f      	bne.n	8003042 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 8003022:	4b38      	ldr	r3, [pc, #224]	@ (8003104 <BSP_LED_Init+0x114>)
 8003024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003028:	4a36      	ldr	r2, [pc, #216]	@ (8003104 <BSP_LED_Init+0x114>)
 800302a:	f043 0302 	orr.w	r3, r3, #2
 800302e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003032:	4b34      	ldr	r3, [pc, #208]	@ (8003104 <BSP_LED_Init+0x114>)
 8003034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	e046      	b.n	80030d0 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10f      	bne.n	8003068 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8003048:	4b2e      	ldr	r3, [pc, #184]	@ (8003104 <BSP_LED_Init+0x114>)
 800304a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800304e:	4a2d      	ldr	r2, [pc, #180]	@ (8003104 <BSP_LED_Init+0x114>)
 8003050:	f043 0304 	orr.w	r3, r3, #4
 8003054:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003058:	4b2a      	ldr	r3, [pc, #168]	@ (8003104 <BSP_LED_Init+0x114>)
 800305a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	e033      	b.n	80030d0 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003068:	4b26      	ldr	r3, [pc, #152]	@ (8003104 <BSP_LED_Init+0x114>)
 800306a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	d110      	bne.n	8003098 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003076:	4b23      	ldr	r3, [pc, #140]	@ (8003104 <BSP_LED_Init+0x114>)
 8003078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800307c:	4a21      	ldr	r2, [pc, #132]	@ (8003104 <BSP_LED_Init+0x114>)
 800307e:	f043 0304 	orr.w	r3, r3, #4
 8003082:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003086:	4b1f      	ldr	r3, [pc, #124]	@ (8003104 <BSP_LED_Init+0x114>)
 8003088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8003094:	2301      	movs	r3, #1
 8003096:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8003098:	f001 f800 	bl	800409c <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 800309c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d107      	bne.n	80030b2 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80030a2:	4b18      	ldr	r3, [pc, #96]	@ (8003104 <BSP_LED_Init+0x114>)
 80030a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a8:	4a16      	ldr	r2, [pc, #88]	@ (8003104 <BSP_LED_Init+0x114>)
 80030aa:	f023 0304 	bic.w	r3, r3, #4
 80030ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 80030b2:	4b14      	ldr	r3, [pc, #80]	@ (8003104 <BSP_LED_Init+0x114>)
 80030b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030b8:	4a12      	ldr	r2, [pc, #72]	@ (8003104 <BSP_LED_Init+0x114>)
 80030ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80030c2:	4b10      	ldr	r3, [pc, #64]	@ (8003104 <BSP_LED_Init+0x114>)
 80030c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003108 <BSP_LED_Init+0x118>)
 80030d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030d8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80030da:	2301      	movs	r3, #1
 80030dc:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e2:	2303      	movs	r3, #3
 80030e4:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	4a08      	ldr	r2, [pc, #32]	@ (800310c <BSP_LED_Init+0x11c>)
 80030ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ee:	f107 021c 	add.w	r2, r7, #28
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fc8b 	bl	8003a10 <HAL_GPIO_Init>
  }

  return ret;
 80030fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3738      	adds	r7, #56	@ 0x38
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	46020c00 	.word	0x46020c00
 8003108:	0800eb74 	.word	0x0800eb74
 800310c:	20000030 	.word	0x20000030

08003110 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	460a      	mov	r2, r1
 800311a:	71fb      	strb	r3, [r7, #7]
 800311c:	4613      	mov	r3, r2
 800311e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8003120:	4b30      	ldr	r3, [pc, #192]	@ (80031e4 <BSP_PB_Init+0xd4>)
 8003122:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003126:	4a2f      	ldr	r2, [pc, #188]	@ (80031e4 <BSP_PB_Init+0xd4>)
 8003128:	f043 0304 	orr.w	r3, r3, #4
 800312c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003130:	4b2c      	ldr	r3, [pc, #176]	@ (80031e4 <BSP_PB_Init+0xd4>)
 8003132:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800313e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003142:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8003144:	2302      	movs	r3, #2
 8003146:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003148:	2302      	movs	r3, #2
 800314a:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800314c:	79bb      	ldrb	r3, [r7, #6]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10c      	bne.n	800316c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	4a23      	ldr	r2, [pc, #140]	@ (80031e8 <BSP_PB_Init+0xd8>)
 800315a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315e:	f107 020c 	add.w	r2, r7, #12
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fc53 	bl	8003a10 <HAL_GPIO_Init>
 800316a:	e036      	b.n	80031da <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800316c:	4b1f      	ldr	r3, [pc, #124]	@ (80031ec <BSP_PB_Init+0xdc>)
 800316e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	4a1d      	ldr	r2, [pc, #116]	@ (80031e8 <BSP_PB_Init+0xd8>)
 8003174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003178:	f107 020c 	add.w	r2, r7, #12
 800317c:	4611      	mov	r1, r2
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fc46 	bl	8003a10 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8003184:	79fa      	ldrb	r2, [r7, #7]
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4a18      	ldr	r2, [pc, #96]	@ (80031f0 <BSP_PB_Init+0xe0>)
 8003190:	441a      	add	r2, r3
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	4917      	ldr	r1, [pc, #92]	@ (80031f4 <BSP_PB_Init+0xe4>)
 8003196:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800319a:	4619      	mov	r1, r3
 800319c:	4610      	mov	r0, r2
 800319e:	f000 fbdb 	bl	8003958 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80031a2:	79fa      	ldrb	r2, [r7, #7]
 80031a4:	4613      	mov	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4a10      	ldr	r2, [pc, #64]	@ (80031f0 <BSP_PB_Init+0xe0>)
 80031ae:	1898      	adds	r0, r3, r2
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	4a11      	ldr	r2, [pc, #68]	@ (80031f8 <BSP_PB_Init+0xe8>)
 80031b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b8:	461a      	mov	r2, r3
 80031ba:	2100      	movs	r1, #0
 80031bc:	f000 fba0 	bl	8003900 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80031c0:	2018      	movs	r0, #24
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	4a0d      	ldr	r2, [pc, #52]	@ (80031fc <BSP_PB_Init+0xec>)
 80031c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ca:	2200      	movs	r2, #0
 80031cc:	4619      	mov	r1, r3
 80031ce:	f000 fabb 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80031d2:	2318      	movs	r3, #24
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fad1 	bl	800377c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3720      	adds	r7, #32
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	46020c00 	.word	0x46020c00
 80031e8:	2000003c 	.word	0x2000003c
 80031ec:	10110000 	.word	0x10110000
 80031f0:	200003f4 	.word	0x200003f4
 80031f4:	0800eb7c 	.word	0x0800eb7c
 80031f8:	20000040 	.word	0x20000040
 80031fc:	20000044 	.word	0x20000044

08003200 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800320a:	79fa      	ldrb	r2, [r7, #7]
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4a04      	ldr	r2, [pc, #16]	@ (8003228 <BSP_PB_IRQHandler+0x28>)
 8003216:	4413      	add	r3, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fbb1 	bl	8003980 <HAL_EXTI_IRQHandler>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200003f4 	.word	0x200003f4

0800322c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800325a:	f06f 0301 	mvn.w	r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e018      	b.n	8003294 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	2294      	movs	r2, #148	@ 0x94
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	4a0d      	ldr	r2, [pc, #52]	@ (80032a0 <BSP_COM_Init+0x5c>)
 800326c:	4413      	add	r3, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f000 f870 	bl	8003354 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	2294      	movs	r2, #148	@ 0x94
 8003278:	fb02 f303 	mul.w	r3, r2, r3
 800327c:	4a08      	ldr	r2, [pc, #32]	@ (80032a0 <BSP_COM_Init+0x5c>)
 800327e:	4413      	add	r3, r2
 8003280:	6839      	ldr	r1, [r7, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f80e 	bl	80032a4 <MX_USART1_Init>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800328e:	f06f 0303 	mvn.w	r3, #3
 8003292:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003294:	68fb      	ldr	r3, [r7, #12]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000400 	.word	0x20000400

080032a4 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80032ae:	4b16      	ldr	r3, [pc, #88]	@ (8003308 <MX_USART1_Init+0x64>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	220c      	movs	r2, #12
 80032c2:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	895b      	ldrh	r3, [r3, #10]
 80032c8:	461a      	mov	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	891b      	ldrh	r3, [r3, #8]
 80032da:	461a      	mov	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	899b      	ldrh	r3, [r3, #12]
 80032e4:	461a      	mov	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80032f0:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f006 fab1 	bl	8009860 <HAL_UART_Init>
 80032fe:	4603      	mov	r3, r0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	2000002c 	.word	0x2000002c

0800330c <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8003314:	4b09      	ldr	r3, [pc, #36]	@ (800333c <__io_putchar+0x30>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	2394      	movs	r3, #148	@ 0x94
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	4a07      	ldr	r2, [pc, #28]	@ (8003340 <__io_putchar+0x34>)
 8003322:	1898      	adds	r0, r3, r2
 8003324:	1d39      	adds	r1, r7, #4
 8003326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800332a:	2201      	movs	r2, #1
 800332c:	f006 faf2 	bl	8009914 <HAL_UART_Transmit>
  return ch;
 8003330:	687b      	ldr	r3, [r7, #4]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000494 	.word	0x20000494
 8003340:	20000400 	.word	0x20000400

08003344 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003348:	2000      	movs	r0, #0
 800334a:	f7ff ff6f 	bl	800322c <BSP_PB_Callback>
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	@ 0x28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800335c:	4b27      	ldr	r3, [pc, #156]	@ (80033fc <COM1_MspInit+0xa8>)
 800335e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003362:	4a26      	ldr	r2, [pc, #152]	@ (80033fc <COM1_MspInit+0xa8>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800336c:	4b23      	ldr	r3, [pc, #140]	@ (80033fc <COM1_MspInit+0xa8>)
 800336e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800337a:	4b20      	ldr	r3, [pc, #128]	@ (80033fc <COM1_MspInit+0xa8>)
 800337c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003380:	4a1e      	ldr	r2, [pc, #120]	@ (80033fc <COM1_MspInit+0xa8>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800338a:	4b1c      	ldr	r3, [pc, #112]	@ (80033fc <COM1_MspInit+0xa8>)
 800338c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003398:	4b18      	ldr	r3, [pc, #96]	@ (80033fc <COM1_MspInit+0xa8>)
 800339a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800339e:	4a17      	ldr	r2, [pc, #92]	@ (80033fc <COM1_MspInit+0xa8>)
 80033a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033a4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80033a8:	4b14      	ldr	r3, [pc, #80]	@ (80033fc <COM1_MspInit+0xa8>)
 80033aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80033b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033ba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033bc:	2302      	movs	r3, #2
 80033be:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80033c0:	2302      	movs	r3, #2
 80033c2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80033c4:	2301      	movs	r3, #1
 80033c6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80033c8:	2307      	movs	r3, #7
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	4619      	mov	r1, r3
 80033d2:	480b      	ldr	r0, [pc, #44]	@ (8003400 <COM1_MspInit+0xac>)
 80033d4:	f000 fb1c 	bl	8003a10 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80033d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033dc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033de:	2302      	movs	r3, #2
 80033e0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80033e2:	2307      	movs	r3, #7
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80033e6:	f107 0314 	add.w	r3, r7, #20
 80033ea:	4619      	mov	r1, r3
 80033ec:	4804      	ldr	r0, [pc, #16]	@ (8003400 <COM1_MspInit+0xac>)
 80033ee:	f000 fb0f 	bl	8003a10 <HAL_GPIO_Init>
}
 80033f2:	bf00      	nop
 80033f4:	3728      	adds	r7, #40	@ 0x28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	46020c00 	.word	0x46020c00
 8003400:	42020000 	.word	0x42020000

08003404 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003408:	4b12      	ldr	r3, [pc, #72]	@ (8003454 <HAL_Init+0x50>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a11      	ldr	r2, [pc, #68]	@ (8003454 <HAL_Init+0x50>)
 800340e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003412:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003414:	2003      	movs	r0, #3
 8003416:	f000 f98c 	bl	8003732 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800341a:	f001 ff2d 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 800341e:	4602      	mov	r2, r0
 8003420:	4b0d      	ldr	r3, [pc, #52]	@ (8003458 <HAL_Init+0x54>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	490c      	ldr	r1, [pc, #48]	@ (800345c <HAL_Init+0x58>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
 8003430:	4a0b      	ldr	r2, [pc, #44]	@ (8003460 <HAL_Init+0x5c>)
 8003432:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003434:	2004      	movs	r0, #4
 8003436:	f000 f9d1 	bl	80037dc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800343a:	200f      	movs	r0, #15
 800343c:	f000 f812 	bl	8003464 <HAL_InitTick>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e002      	b.n	8003450 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800344a:	f7ff fbc7 	bl	8002bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40022000 	.word	0x40022000
 8003458:	46020c00 	.word	0x46020c00
 800345c:	0800eb1c 	.word	0x0800eb1c
 8003460:	20000028 	.word	0x20000028

08003464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003470:	4b33      	ldr	r3, [pc, #204]	@ (8003540 <HAL_InitTick+0xdc>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e05c      	b.n	8003536 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800347c:	4b31      	ldr	r3, [pc, #196]	@ (8003544 <HAL_InitTick+0xe0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b04      	cmp	r3, #4
 8003486:	d10c      	bne.n	80034a2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003488:	4b2f      	ldr	r3, [pc, #188]	@ (8003548 <HAL_InitTick+0xe4>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b2c      	ldr	r3, [pc, #176]	@ (8003540 <HAL_InitTick+0xdc>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	4619      	mov	r1, r3
 8003492:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003496:	fbb3 f3f1 	udiv	r3, r3, r1
 800349a:	fbb2 f3f3 	udiv	r3, r2, r3
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e037      	b.n	8003512 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80034a2:	f000 f9f3 	bl	800388c <HAL_SYSTICK_GetCLKSourceConfig>
 80034a6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d023      	beq.n	80034f6 <HAL_InitTick+0x92>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d82d      	bhi.n	8003510 <HAL_InitTick+0xac>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_InitTick+0x5e>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d00d      	beq.n	80034dc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80034c0:	e026      	b.n	8003510 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80034c2:	4b21      	ldr	r3, [pc, #132]	@ (8003548 <HAL_InitTick+0xe4>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003540 <HAL_InitTick+0xdc>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	4619      	mov	r1, r3
 80034cc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80034d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80034d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d8:	60fb      	str	r3, [r7, #12]
        break;
 80034da:	e01a      	b.n	8003512 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80034dc:	4b18      	ldr	r3, [pc, #96]	@ (8003540 <HAL_InitTick+0xdc>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80034ea:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80034ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f2:	60fb      	str	r3, [r7, #12]
        break;
 80034f4:	e00d      	b.n	8003512 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80034f6:	4b12      	ldr	r3, [pc, #72]	@ (8003540 <HAL_InitTick+0xdc>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003500:	fbb3 f3f2 	udiv	r3, r3, r2
 8003504:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003508:	fbb2 f3f3 	udiv	r3, r2, r3
 800350c:	60fb      	str	r3, [r7, #12]
        break;
 800350e:	e000      	b.n	8003512 <HAL_InitTick+0xae>
        break;
 8003510:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f940 	bl	8003798 <HAL_SYSTICK_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e009      	b.n	8003536 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003522:	2200      	movs	r2, #0
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	f04f 30ff 	mov.w	r0, #4294967295
 800352a:	f000 f90d 	bl	8003748 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800352e:	4a07      	ldr	r2, [pc, #28]	@ (800354c <HAL_InitTick+0xe8>)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	2000004c 	.word	0x2000004c
 8003544:	e000e010 	.word	0xe000e010
 8003548:	20000028 	.word	0x20000028
 800354c:	20000048 	.word	0x20000048

08003550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003554:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <HAL_IncTick+0x20>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_IncTick+0x24>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4413      	add	r3, r2
 8003560:	4a04      	ldr	r2, [pc, #16]	@ (8003574 <HAL_IncTick+0x24>)
 8003562:	6013      	str	r3, [r2, #0]
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	2000004c 	.word	0x2000004c
 8003574:	20000498 	.word	0x20000498

08003578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return uwTick;
 800357c:	4b03      	ldr	r3, [pc, #12]	@ (800358c <HAL_GetTick+0x14>)
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000498 	.word	0x20000498

08003590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003598:	f7ff ffee 	bl	8003578 <HAL_GetTick>
 800359c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d005      	beq.n	80035b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <HAL_Delay+0x44>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035b6:	bf00      	nop
 80035b8:	f7ff ffde 	bl	8003578 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d8f7      	bhi.n	80035b8 <HAL_Delay+0x28>
  {
  }
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	2000004c 	.word	0x2000004c

080035d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e8:	4b0c      	ldr	r3, [pc, #48]	@ (800361c <__NVIC_SetPriorityGrouping+0x44>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035f4:	4013      	ands	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003600:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800360a:	4a04      	ldr	r2, [pc, #16]	@ (800361c <__NVIC_SetPriorityGrouping+0x44>)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	60d3      	str	r3, [r2, #12]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003624:	4b04      	ldr	r3, [pc, #16]	@ (8003638 <__NVIC_GetPriorityGrouping+0x18>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	f003 0307 	and.w	r3, r3, #7
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800364a:	2b00      	cmp	r3, #0
 800364c:	db0b      	blt.n	8003666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	f003 021f 	and.w	r2, r3, #31
 8003654:	4907      	ldr	r1, [pc, #28]	@ (8003674 <__NVIC_EnableIRQ+0x38>)
 8003656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	2001      	movs	r0, #1
 800365e:	fa00 f202 	lsl.w	r2, r0, r2
 8003662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000e100 	.word	0xe000e100

08003678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	6039      	str	r1, [r7, #0]
 8003682:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003688:	2b00      	cmp	r3, #0
 800368a:	db0a      	blt.n	80036a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	490c      	ldr	r1, [pc, #48]	@ (80036c4 <__NVIC_SetPriority+0x4c>)
 8003692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003696:	0112      	lsls	r2, r2, #4
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	440b      	add	r3, r1
 800369c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a0:	e00a      	b.n	80036b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	4908      	ldr	r1, [pc, #32]	@ (80036c8 <__NVIC_SetPriority+0x50>)
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	3b04      	subs	r3, #4
 80036b0:	0112      	lsls	r2, r2, #4
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	440b      	add	r3, r1
 80036b6:	761a      	strb	r2, [r3, #24]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000e100 	.word	0xe000e100
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	@ 0x24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f1c3 0307 	rsb	r3, r3, #7
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	bf28      	it	cs
 80036ea:	2304      	movcs	r3, #4
 80036ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d902      	bls.n	80036fc <NVIC_EncodePriority+0x30>
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3b03      	subs	r3, #3
 80036fa:	e000      	b.n	80036fe <NVIC_EncodePriority+0x32>
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003700:	f04f 32ff 	mov.w	r2, #4294967295
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43da      	mvns	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	401a      	ands	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003714:	f04f 31ff 	mov.w	r1, #4294967295
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	43d9      	mvns	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003724:	4313      	orrs	r3, r2
         );
}
 8003726:	4618      	mov	r0, r3
 8003728:	3724      	adds	r7, #36	@ 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ff4c 	bl	80035d8 <__NVIC_SetPriorityGrouping>
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003756:	f7ff ff63 	bl	8003620 <__NVIC_GetPriorityGrouping>
 800375a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	6978      	ldr	r0, [r7, #20]
 8003762:	f7ff ffb3 	bl	80036cc <NVIC_EncodePriority>
 8003766:	4602      	mov	r2, r0
 8003768:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800376c:	4611      	mov	r1, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff ff82 	bl	8003678 <__NVIC_SetPriority>
}
 8003774:	bf00      	nop
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff ff56 	bl	800363c <__NVIC_EnableIRQ>
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037a8:	d301      	bcc.n	80037ae <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80037aa:	2301      	movs	r3, #1
 80037ac:	e00d      	b.n	80037ca <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80037ae:	4a0a      	ldr	r2, [pc, #40]	@ (80037d8 <HAL_SYSTICK_Config+0x40>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80037b6:	4b08      	ldr	r3, [pc, #32]	@ (80037d8 <HAL_SYSTICK_Config+0x40>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80037bc:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <HAL_SYSTICK_Config+0x40>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a05      	ldr	r2, [pc, #20]	@ (80037d8 <HAL_SYSTICK_Config+0x40>)
 80037c2:	f043 0303 	orr.w	r3, r3, #3
 80037c6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	e000e010 	.word	0xe000e010

080037dc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d844      	bhi.n	8003874 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80037ea:	a201      	add	r2, pc, #4	@ (adr r2, 80037f0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003813 	.word	0x08003813
 80037f4:	08003831 	.word	0x08003831
 80037f8:	08003853 	.word	0x08003853
 80037fc:	08003875 	.word	0x08003875
 8003800:	08003805 	.word	0x08003805
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003804:	4b1f      	ldr	r3, [pc, #124]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1e      	ldr	r2, [pc, #120]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800380a:	f043 0304 	orr.w	r3, r3, #4
 800380e:	6013      	str	r3, [r2, #0]
      break;
 8003810:	e031      	b.n	8003876 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003812:	4b1c      	ldr	r3, [pc, #112]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1b      	ldr	r2, [pc, #108]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003818:	f023 0304 	bic.w	r3, r3, #4
 800381c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800381e:	4b1a      	ldr	r3, [pc, #104]	@ (8003888 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003824:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003826:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800382a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800382e:	e022      	b.n	8003876 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003830:	4b14      	ldr	r3, [pc, #80]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a13      	ldr	r2, [pc, #76]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003836:	f023 0304 	bic.w	r3, r3, #4
 800383a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800383c:	4b12      	ldr	r3, [pc, #72]	@ (8003888 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800383e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003842:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003846:	4a10      	ldr	r2, [pc, #64]	@ (8003888 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003848:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800384c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003850:	e011      	b.n	8003876 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003852:	4b0c      	ldr	r3, [pc, #48]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a0b      	ldr	r2, [pc, #44]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003858:	f023 0304 	bic.w	r3, r3, #4
 800385c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800385e:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003864:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003868:	4a07      	ldr	r2, [pc, #28]	@ (8003888 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800386a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800386e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003872:	e000      	b.n	8003876 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003874:	bf00      	nop
  }
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	e000e010 	.word	0xe000e010
 8003888:	46020c00 	.word	0x46020c00

0800388c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003892:	4b19      	ldr	r3, [pc, #100]	@ (80038f8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800389e:	2304      	movs	r3, #4
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	e021      	b.n	80038e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80038a4:	4b15      	ldr	r3, [pc, #84]	@ (80038fc <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80038a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038aa:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80038ae:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038b6:	d011      	beq.n	80038dc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038be:	d810      	bhi.n	80038e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d004      	beq.n	80038d0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038cc:	d003      	beq.n	80038d6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80038ce:	e008      	b.n	80038e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80038d0:	2300      	movs	r3, #0
 80038d2:	607b      	str	r3, [r7, #4]
        break;
 80038d4:	e008      	b.n	80038e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80038d6:	2301      	movs	r3, #1
 80038d8:	607b      	str	r3, [r7, #4]
        break;
 80038da:	e005      	b.n	80038e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80038dc:	2302      	movs	r3, #2
 80038de:	607b      	str	r3, [r7, #4]
        break;
 80038e0:	e002      	b.n	80038e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80038e2:	2300      	movs	r3, #0
 80038e4:	607b      	str	r3, [r7, #4]
        break;
 80038e6:	bf00      	nop
    }
  }
  return systick_source;
 80038e8:	687b      	ldr	r3, [r7, #4]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	e000e010 	.word	0xe000e010
 80038fc:	46020c00 	.word	0x46020c00

08003900 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	460b      	mov	r3, r1
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003912:	7afb      	ldrb	r3, [r7, #11]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d011      	beq.n	800393c <HAL_EXTI_RegisterCallback+0x3c>
 8003918:	2b02      	cmp	r3, #2
 800391a:	dc13      	bgt.n	8003944 <HAL_EXTI_RegisterCallback+0x44>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_EXTI_RegisterCallback+0x26>
 8003920:	2b01      	cmp	r3, #1
 8003922:	d007      	beq.n	8003934 <HAL_EXTI_RegisterCallback+0x34>
 8003924:	e00e      	b.n	8003944 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	609a      	str	r2, [r3, #8]
      break;
 8003932:	e00a      	b.n	800394a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	605a      	str	r2, [r3, #4]
      break;
 800393a:	e006      	b.n	800394a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	609a      	str	r2, [r3, #8]
      break;
 8003942:	e002      	b.n	800394a <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	75fb      	strb	r3, [r7, #23]
      break;
 8003948:	bf00      	nop
  }

  return status;
 800394a:	7dfb      	ldrb	r3, [r7, #23]
}
 800394c:	4618      	mov	r0, r3
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e003      	b.n	8003974 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003972:	2300      	movs	r3, #0
  }
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	2201      	movs	r2, #1
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	4b17      	ldr	r3, [pc, #92]	@ (8003a08 <HAL_EXTI_IRQHandler+0x88>)
 80039aa:	4413      	add	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4013      	ands	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a0c <HAL_EXTI_IRQHandler+0x8c>)
 80039d8:	4413      	add	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4013      	ands	r3, r2
 80039e4:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d009      	beq.n	8003a00 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	4798      	blx	r3
    }
  }
}
 8003a00:	bf00      	nop
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	4602200c 	.word	0x4602200c
 8003a0c:	46022010 	.word	0x46022010

08003a10 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b089      	sub	sp, #36	@ 0x24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003a22:	e1ba      	b.n	8003d9a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	2101      	movs	r1, #1
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	4013      	ands	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 81aa 	beq.w	8003d94 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a55      	ldr	r2, [pc, #340]	@ (8003b98 <HAL_GPIO_Init+0x188>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d15d      	bne.n	8003b04 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003a4e:	2201      	movs	r2, #1
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f003 0201 	and.w	r2, r3, #1
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003a78:	4a48      	ldr	r2, [pc, #288]	@ (8003b9c <HAL_GPIO_Init+0x18c>)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a80:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003a82:	4a46      	ldr	r2, [pc, #280]	@ (8003b9c <HAL_GPIO_Init+0x18c>)
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	08da      	lsrs	r2, r3, #3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	3208      	adds	r2, #8
 8003a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	220f      	movs	r2, #15
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	220b      	movs	r2, #11
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	08da      	lsrs	r2, r3, #3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	3208      	adds	r2, #8
 8003ace:	69f9      	ldr	r1, [r7, #28]
 8003ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	2203      	movs	r2, #3
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	2202      	movs	r2, #2
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	e067      	b.n	8003bd4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d003      	beq.n	8003b14 <HAL_GPIO_Init+0x104>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b12      	cmp	r3, #18
 8003b12:	d145      	bne.n	8003ba0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	08da      	lsrs	r2, r3, #3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3208      	adds	r2, #8
 8003b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	220f      	movs	r2, #15
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f003 020f 	and.w	r2, r3, #15
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	08da      	lsrs	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3208      	adds	r2, #8
 8003b5a:	69f9      	ldr	r1, [r7, #28]
 8003b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0203 	and.w	r2, r3, #3
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e01e      	b.n	8003bd4 <HAL_GPIO_Init+0x1c4>
 8003b96:	bf00      	nop
 8003b98:	46020000 	.word	0x46020000
 8003b9c:	0800eb80 	.word	0x0800eb80
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	2203      	movs	r2, #3
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0203 	and.w	r2, r3, #3
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d00b      	beq.n	8003bf4 <HAL_GPIO_Init+0x1e4>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d007      	beq.n	8003bf4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003be8:	2b11      	cmp	r3, #17
 8003bea:	d003      	beq.n	8003bf4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b12      	cmp	r3, #18
 8003bf2:	d130      	bne.n	8003c56 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	f003 0201 	and.w	r2, r3, #1
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d017      	beq.n	8003c8e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	2203      	movs	r2, #3
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d07c      	beq.n	8003d94 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003c9a:	4a47      	ldr	r2, [pc, #284]	@ (8003db8 <HAL_GPIO_Init+0x3a8>)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	089b      	lsrs	r3, r3, #2
 8003ca0:	3318      	adds	r3, #24
 8003ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	220f      	movs	r2, #15
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	0a9a      	lsrs	r2, r3, #10
 8003cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8003dbc <HAL_GPIO_Init+0x3ac>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	f002 0203 	and.w	r2, r2, #3
 8003ccc:	00d2      	lsls	r2, r2, #3
 8003cce:	4093      	lsls	r3, r2
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003cd6:	4938      	ldr	r1, [pc, #224]	@ (8003db8 <HAL_GPIO_Init+0x3a8>)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	089b      	lsrs	r3, r3, #2
 8003cdc:	3318      	adds	r3, #24
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003ce4:	4b34      	ldr	r3, [pc, #208]	@ (8003db8 <HAL_GPIO_Init+0x3a8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003d08:	4a2b      	ldr	r2, [pc, #172]	@ (8003db8 <HAL_GPIO_Init+0x3a8>)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003db8 <HAL_GPIO_Init+0x3a8>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003d32:	4a21      	ldr	r2, [pc, #132]	@ (8003db8 <HAL_GPIO_Init+0x3a8>)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003d38:	4b1f      	ldr	r3, [pc, #124]	@ (8003db8 <HAL_GPIO_Init+0x3a8>)
 8003d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	43db      	mvns	r3, r3
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	4013      	ands	r3, r2
 8003d48:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003d5e:	4a16      	ldr	r2, [pc, #88]	@ (8003db8 <HAL_GPIO_Init+0x3a8>)
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003d66:	4b14      	ldr	r3, [pc, #80]	@ (8003db8 <HAL_GPIO_Init+0x3a8>)
 8003d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8003db8 <HAL_GPIO_Init+0x3a8>)
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	3301      	adds	r3, #1
 8003d98:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f47f ae3d 	bne.w	8003a24 <HAL_GPIO_Init+0x14>
  }
}
 8003daa:	bf00      	nop
 8003dac:	bf00      	nop
 8003dae:	3724      	adds	r7, #36	@ 0x24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	46022000 	.word	0x46022000
 8003dbc:	002f7f7f 	.word	0x002f7f7f

08003dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	887b      	ldrh	r3, [r7, #2]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
 8003ddc:	e001      	b.n	8003de2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	807b      	strh	r3, [r7, #2]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e00:	787b      	ldrb	r3, [r7, #1]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e06:	887a      	ldrh	r2, [r7, #2]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003e0c:	e002      	b.n	8003e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003e0e:	887a      	ldrh	r2, [r7, #2]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e68 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d006      	beq.n	8003e44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003e36:	4a0c      	ldr	r2, [pc, #48]	@ (8003e68 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fb68 	bl	8002514 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003e44:	4b08      	ldr	r3, [pc, #32]	@ (8003e68 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	88fb      	ldrh	r3, [r7, #6]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d006      	beq.n	8003e5e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003e50:	4a05      	ldr	r2, [pc, #20]	@ (8003e68 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 f807 	bl	8003e6c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	46022000 	.word	0x46022000

08003e6c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
 8003ea0:	e007      	b.n	8003eb2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003ea2:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 0204 	bic.w	r2, r3, #4
 8003eaa:	4905      	ldr	r1, [pc, #20]	@ (8003ec0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	40030400 	.word	0x40030400

08003ec4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003ec8:	4b05      	ldr	r3, [pc, #20]	@ (8003ee0 <HAL_ICACHE_Enable+0x1c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a04      	ldr	r2, [pc, #16]	@ (8003ee0 <HAL_ICACHE_Enable+0x1c>)
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40030400 	.word	0x40030400

08003ee4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003eec:	4b39      	ldr	r3, [pc, #228]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ef4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d10b      	bne.n	8003f16 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f04:	d905      	bls.n	8003f12 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003f06:	4b33      	ldr	r3, [pc, #204]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	4a32      	ldr	r2, [pc, #200]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f10:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	e057      	b.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f1c:	d90a      	bls.n	8003f34 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f30:	60d3      	str	r3, [r2, #12]
 8003f32:	e007      	b.n	8003f44 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003f34:	4b27      	ldr	r3, [pc, #156]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003f3c:	4925      	ldr	r1, [pc, #148]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f44:	4b24      	ldr	r3, [pc, #144]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a24      	ldr	r2, [pc, #144]	@ (8003fdc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	099b      	lsrs	r3, r3, #6
 8003f50:	2232      	movs	r2, #50	@ 0x32
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
 8003f56:	4a21      	ldr	r2, [pc, #132]	@ (8003fdc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	099b      	lsrs	r3, r3, #6
 8003f5e:	3301      	adds	r3, #1
 8003f60:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f62:	e002      	b.n	8003f6a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <HAL_PWREx_ControlVoltageScaling+0x98>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f3      	bne.n	8003f64 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d01b      	beq.n	8003fba <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f82:	4b15      	ldr	r3, [pc, #84]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a15      	ldr	r2, [pc, #84]	@ (8003fdc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f88:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8c:	099b      	lsrs	r3, r3, #6
 8003f8e:	2232      	movs	r2, #50	@ 0x32
 8003f90:	fb02 f303 	mul.w	r3, r2, r3
 8003f94:	4a11      	ldr	r2, [pc, #68]	@ (8003fdc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	099b      	lsrs	r3, r3, #6
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003fa0:	e002      	b.n	8003fa8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f3      	bne.n	8003fa2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e000      	b.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	46020800 	.word	0x46020800
 8003fd8:	20000028 	.word	0x20000028
 8003fdc:	10624dd3 	.word	0x10624dd3

08003fe0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003fe4:	4b04      	ldr	r3, [pc, #16]	@ (8003ff8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	46020800 	.word	0x46020800

08003ffc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004004:	4b22      	ldr	r3, [pc, #136]	@ (8004090 <HAL_PWREx_ConfigSupply+0x94>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a22      	ldr	r2, [pc, #136]	@ (8004094 <HAL_PWREx_ConfigSupply+0x98>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	099b      	lsrs	r3, r3, #6
 8004010:	2232      	movs	r2, #50	@ 0x32
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	4a1f      	ldr	r2, [pc, #124]	@ (8004094 <HAL_PWREx_ConfigSupply+0x98>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	099b      	lsrs	r3, r3, #6
 800401e:	3301      	adds	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d113      	bne.n	8004050 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004028:	4b1b      	ldr	r3, [pc, #108]	@ (8004098 <HAL_PWREx_ConfigSupply+0x9c>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4a1a      	ldr	r2, [pc, #104]	@ (8004098 <HAL_PWREx_ConfigSupply+0x9c>)
 800402e:	f023 0302 	bic.w	r3, r3, #2
 8004032:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004034:	e002      	b.n	800403c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3b01      	subs	r3, #1
 800403a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800403c:	4b16      	ldr	r3, [pc, #88]	@ (8004098 <HAL_PWREx_ConfigSupply+0x9c>)
 800403e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d116      	bne.n	8004076 <HAL_PWREx_ConfigSupply+0x7a>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f3      	bne.n	8004036 <HAL_PWREx_ConfigSupply+0x3a>
 800404e:	e012      	b.n	8004076 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004050:	4b11      	ldr	r3, [pc, #68]	@ (8004098 <HAL_PWREx_ConfigSupply+0x9c>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4a10      	ldr	r2, [pc, #64]	@ (8004098 <HAL_PWREx_ConfigSupply+0x9c>)
 8004056:	f043 0302 	orr.w	r3, r3, #2
 800405a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800405c:	e002      	b.n	8004064 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3b01      	subs	r3, #1
 8004062:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004064:	4b0c      	ldr	r3, [pc, #48]	@ (8004098 <HAL_PWREx_ConfigSupply+0x9c>)
 8004066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <HAL_PWREx_ConfigSupply+0x7a>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f3      	bne.n	800405e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e000      	b.n	8004082 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	20000028 	.word	0x20000028
 8004094:	10624dd3 	.word	0x10624dd3
 8004098:	46020800 	.word	0x46020800

0800409c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	4a04      	ldr	r2, [pc, #16]	@ (80040b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80040a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80040aa:	6113      	str	r3, [r2, #16]
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	46020800 	.word	0x46020800

080040bc <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80040c0:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	4a04      	ldr	r2, [pc, #16]	@ (80040d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	46020800 	.word	0x46020800

080040dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08e      	sub	sp, #56	@ 0x38
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80040e4:	2300      	movs	r3, #0
 80040e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	f000 bec8 	b.w	8004e86 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f6:	4b99      	ldr	r3, [pc, #612]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004100:	4b96      	ldr	r3, [pc, #600]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 816c 	beq.w	80043f0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <HAL_RCC_OscConfig+0x52>
 800411e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004120:	2b0c      	cmp	r3, #12
 8004122:	f040 80de 	bne.w	80042e2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004128:	2b01      	cmp	r3, #1
 800412a:	f040 80da 	bne.w	80042e2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f000 bea5 	b.w	8004e86 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004140:	4b86      	ldr	r3, [pc, #536]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <HAL_RCC_OscConfig+0x7a>
 800414c:	4b83      	ldr	r3, [pc, #524]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004154:	e005      	b.n	8004162 <HAL_RCC_OscConfig+0x86>
 8004156:	4b81      	ldr	r3, [pc, #516]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004158:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004162:	4293      	cmp	r3, r2
 8004164:	d255      	bcs.n	8004212 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	4618      	mov	r0, r3
 8004172:	f001 f9dd 	bl	8005530 <RCC_SetFlashLatencyFromMSIRange>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	f000 be82 	b.w	8004e86 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004182:	4b76      	ldr	r3, [pc, #472]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	4a75      	ldr	r2, [pc, #468]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004188:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800418c:	6093      	str	r3, [r2, #8]
 800418e:	4b73      	ldr	r3, [pc, #460]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	4970      	ldr	r1, [pc, #448]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 800419c:	4313      	orrs	r3, r2
 800419e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80041a8:	d309      	bcc.n	80041be <HAL_RCC_OscConfig+0xe2>
 80041aa:	4b6c      	ldr	r3, [pc, #432]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f023 021f 	bic.w	r2, r3, #31
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	4969      	ldr	r1, [pc, #420]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60cb      	str	r3, [r1, #12]
 80041bc:	e07e      	b.n	80042bc <HAL_RCC_OscConfig+0x1e0>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	da0a      	bge.n	80041dc <HAL_RCC_OscConfig+0x100>
 80041c6:	4b65      	ldr	r3, [pc, #404]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	015b      	lsls	r3, r3, #5
 80041d4:	4961      	ldr	r1, [pc, #388]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60cb      	str	r3, [r1, #12]
 80041da:	e06f      	b.n	80042bc <HAL_RCC_OscConfig+0x1e0>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e4:	d30a      	bcc.n	80041fc <HAL_RCC_OscConfig+0x120>
 80041e6:	4b5d      	ldr	r3, [pc, #372]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	029b      	lsls	r3, r3, #10
 80041f4:	4959      	ldr	r1, [pc, #356]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60cb      	str	r3, [r1, #12]
 80041fa:	e05f      	b.n	80042bc <HAL_RCC_OscConfig+0x1e0>
 80041fc:	4b57      	ldr	r3, [pc, #348]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	03db      	lsls	r3, r3, #15
 800420a:	4954      	ldr	r1, [pc, #336]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 800420c:	4313      	orrs	r3, r2
 800420e:	60cb      	str	r3, [r1, #12]
 8004210:	e054      	b.n	80042bc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004212:	4b52      	ldr	r3, [pc, #328]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	4a51      	ldr	r2, [pc, #324]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004218:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800421c:	6093      	str	r3, [r2, #8]
 800421e:	4b4f      	ldr	r3, [pc, #316]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	494c      	ldr	r1, [pc, #304]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 800422c:	4313      	orrs	r3, r2
 800422e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004234:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004238:	d309      	bcc.n	800424e <HAL_RCC_OscConfig+0x172>
 800423a:	4b48      	ldr	r3, [pc, #288]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f023 021f 	bic.w	r2, r3, #31
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	4945      	ldr	r1, [pc, #276]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004248:	4313      	orrs	r3, r2
 800424a:	60cb      	str	r3, [r1, #12]
 800424c:	e028      	b.n	80042a0 <HAL_RCC_OscConfig+0x1c4>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	2b00      	cmp	r3, #0
 8004254:	da0a      	bge.n	800426c <HAL_RCC_OscConfig+0x190>
 8004256:	4b41      	ldr	r3, [pc, #260]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	015b      	lsls	r3, r3, #5
 8004264:	493d      	ldr	r1, [pc, #244]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004266:	4313      	orrs	r3, r2
 8004268:	60cb      	str	r3, [r1, #12]
 800426a:	e019      	b.n	80042a0 <HAL_RCC_OscConfig+0x1c4>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004274:	d30a      	bcc.n	800428c <HAL_RCC_OscConfig+0x1b0>
 8004276:	4b39      	ldr	r3, [pc, #228]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	029b      	lsls	r3, r3, #10
 8004284:	4935      	ldr	r1, [pc, #212]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004286:	4313      	orrs	r3, r2
 8004288:	60cb      	str	r3, [r1, #12]
 800428a:	e009      	b.n	80042a0 <HAL_RCC_OscConfig+0x1c4>
 800428c:	4b33      	ldr	r3, [pc, #204]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	03db      	lsls	r3, r3, #15
 800429a:	4930      	ldr	r1, [pc, #192]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 800429c:	4313      	orrs	r3, r2
 800429e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80042a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	4618      	mov	r0, r3
 80042ac:	f001 f940 	bl	8005530 <RCC_SetFlashLatencyFromMSIRange>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	f000 bde5 	b.w	8004e86 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80042bc:	f001 f8e2 	bl	8005484 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042c0:	4b27      	ldr	r3, [pc, #156]	@ (8004360 <HAL_RCC_OscConfig+0x284>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff f8cd 	bl	8003464 <HAL_InitTick>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80042d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 808a 	beq.w	80043ee <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80042da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042de:	f000 bdd2 	b.w	8004e86 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d066      	beq.n	80043b8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80042ea:	4b1c      	ldr	r3, [pc, #112]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1b      	ldr	r2, [pc, #108]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042f6:	f7ff f93f 	bl	8003578 <HAL_GetTick>
 80042fa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80042fc:	e009      	b.n	8004312 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042fe:	f7ff f93b 	bl	8003578 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d902      	bls.n	8004312 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	f000 bdba 	b.w	8004e86 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004312:	4b12      	ldr	r3, [pc, #72]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0ef      	beq.n	80042fe <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800431e:	4b0f      	ldr	r3, [pc, #60]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	4a0e      	ldr	r2, [pc, #56]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004324:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004328:	6093      	str	r3, [r2, #8]
 800432a:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004336:	4909      	ldr	r1, [pc, #36]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004338:	4313      	orrs	r3, r2
 800433a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004344:	d30e      	bcc.n	8004364 <HAL_RCC_OscConfig+0x288>
 8004346:	4b05      	ldr	r3, [pc, #20]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f023 021f 	bic.w	r2, r3, #31
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4902      	ldr	r1, [pc, #8]	@ (800435c <HAL_RCC_OscConfig+0x280>)
 8004354:	4313      	orrs	r3, r2
 8004356:	60cb      	str	r3, [r1, #12]
 8004358:	e04a      	b.n	80043f0 <HAL_RCC_OscConfig+0x314>
 800435a:	bf00      	nop
 800435c:	46020c00 	.word	0x46020c00
 8004360:	20000048 	.word	0x20000048
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	2b00      	cmp	r3, #0
 800436a:	da0a      	bge.n	8004382 <HAL_RCC_OscConfig+0x2a6>
 800436c:	4b98      	ldr	r3, [pc, #608]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	015b      	lsls	r3, r3, #5
 800437a:	4995      	ldr	r1, [pc, #596]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	60cb      	str	r3, [r1, #12]
 8004380:	e036      	b.n	80043f0 <HAL_RCC_OscConfig+0x314>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800438a:	d30a      	bcc.n	80043a2 <HAL_RCC_OscConfig+0x2c6>
 800438c:	4b90      	ldr	r3, [pc, #576]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	029b      	lsls	r3, r3, #10
 800439a:	498d      	ldr	r1, [pc, #564]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800439c:	4313      	orrs	r3, r2
 800439e:	60cb      	str	r3, [r1, #12]
 80043a0:	e026      	b.n	80043f0 <HAL_RCC_OscConfig+0x314>
 80043a2:	4b8b      	ldr	r3, [pc, #556]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	03db      	lsls	r3, r3, #15
 80043b0:	4987      	ldr	r1, [pc, #540]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60cb      	str	r3, [r1, #12]
 80043b6:	e01b      	b.n	80043f0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80043b8:	4b85      	ldr	r3, [pc, #532]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a84      	ldr	r2, [pc, #528]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043c4:	f7ff f8d8 	bl	8003578 <HAL_GetTick>
 80043c8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80043ca:	e009      	b.n	80043e0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043cc:	f7ff f8d4 	bl	8003578 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d902      	bls.n	80043e0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	f000 bd53 	b.w	8004e86 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80043e0:	4b7b      	ldr	r3, [pc, #492]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ef      	bne.n	80043cc <HAL_RCC_OscConfig+0x2f0>
 80043ec:	e000      	b.n	80043f0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80043ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 808b 	beq.w	8004514 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80043fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004400:	2b08      	cmp	r3, #8
 8004402:	d005      	beq.n	8004410 <HAL_RCC_OscConfig+0x334>
 8004404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004406:	2b0c      	cmp	r3, #12
 8004408:	d109      	bne.n	800441e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800440a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440c:	2b03      	cmp	r3, #3
 800440e:	d106      	bne.n	800441e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d17d      	bne.n	8004514 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	f000 bd34 	b.w	8004e86 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004426:	d106      	bne.n	8004436 <HAL_RCC_OscConfig+0x35a>
 8004428:	4b69      	ldr	r3, [pc, #420]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a68      	ldr	r2, [pc, #416]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800442e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	e041      	b.n	80044ba <HAL_RCC_OscConfig+0x3de>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800443e:	d112      	bne.n	8004466 <HAL_RCC_OscConfig+0x38a>
 8004440:	4b63      	ldr	r3, [pc, #396]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a62      	ldr	r2, [pc, #392]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004446:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b60      	ldr	r3, [pc, #384]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a5f      	ldr	r2, [pc, #380]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004452:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	4b5d      	ldr	r3, [pc, #372]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a5c      	ldr	r2, [pc, #368]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800445e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	e029      	b.n	80044ba <HAL_RCC_OscConfig+0x3de>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800446e:	d112      	bne.n	8004496 <HAL_RCC_OscConfig+0x3ba>
 8004470:	4b57      	ldr	r3, [pc, #348]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a56      	ldr	r2, [pc, #344]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004476:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	4b54      	ldr	r3, [pc, #336]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a53      	ldr	r2, [pc, #332]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	4b51      	ldr	r3, [pc, #324]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a50      	ldr	r2, [pc, #320]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800448e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	e011      	b.n	80044ba <HAL_RCC_OscConfig+0x3de>
 8004496:	4b4e      	ldr	r3, [pc, #312]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a4d      	ldr	r2, [pc, #308]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800449c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	4b4b      	ldr	r3, [pc, #300]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a4a      	ldr	r2, [pc, #296]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80044a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	4b48      	ldr	r3, [pc, #288]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a47      	ldr	r2, [pc, #284]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80044b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80044b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d014      	beq.n	80044ec <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80044c2:	f7ff f859 	bl	8003578 <HAL_GetTick>
 80044c6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044c8:	e009      	b.n	80044de <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ca:	f7ff f855 	bl	8003578 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b64      	cmp	r3, #100	@ 0x64
 80044d6:	d902      	bls.n	80044de <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	f000 bcd4 	b.w	8004e86 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044de:	4b3c      	ldr	r3, [pc, #240]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0ef      	beq.n	80044ca <HAL_RCC_OscConfig+0x3ee>
 80044ea:	e013      	b.n	8004514 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80044ec:	f7ff f844 	bl	8003578 <HAL_GetTick>
 80044f0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044f2:	e009      	b.n	8004508 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f4:	f7ff f840 	bl	8003578 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	@ 0x64
 8004500:	d902      	bls.n	8004508 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	f000 bcbf 	b.w	8004e86 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004508:	4b31      	ldr	r3, [pc, #196]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ef      	bne.n	80044f4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d05f      	beq.n	80045e0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	2b04      	cmp	r3, #4
 8004524:	d005      	beq.n	8004532 <HAL_RCC_OscConfig+0x456>
 8004526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004528:	2b0c      	cmp	r3, #12
 800452a:	d114      	bne.n	8004556 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800452c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452e:	2b02      	cmp	r3, #2
 8004530:	d111      	bne.n	8004556 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d102      	bne.n	8004540 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f000 bca3 	b.w	8004e86 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004540:	4b23      	ldr	r3, [pc, #140]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	041b      	lsls	r3, r3, #16
 800454e:	4920      	ldr	r1, [pc, #128]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004550:	4313      	orrs	r3, r2
 8004552:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004554:	e044      	b.n	80045e0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d024      	beq.n	80045a8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800455e:	4b1c      	ldr	r3, [pc, #112]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1b      	ldr	r2, [pc, #108]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004568:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800456a:	f7ff f805 	bl	8003578 <HAL_GetTick>
 800456e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004570:	e009      	b.n	8004586 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004572:	f7ff f801 	bl	8003578 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d902      	bls.n	8004586 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	f000 bc80 	b.w	8004e86 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004586:	4b12      	ldr	r3, [pc, #72]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0ef      	beq.n	8004572 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004592:	4b0f      	ldr	r3, [pc, #60]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	490b      	ldr	r1, [pc, #44]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	610b      	str	r3, [r1, #16]
 80045a6:	e01b      	b.n	80045e0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80045a8:	4b09      	ldr	r3, [pc, #36]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a08      	ldr	r2, [pc, #32]	@ (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80045ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045b2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045b4:	f7fe ffe0 	bl	8003578 <HAL_GetTick>
 80045b8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045ba:	e00b      	b.n	80045d4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045bc:	f7fe ffdc 	bl	8003578 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d904      	bls.n	80045d4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	f000 bc5b 	b.w	8004e86 <HAL_RCC_OscConfig+0xdaa>
 80045d0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045d4:	4baf      	ldr	r3, [pc, #700]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ed      	bne.n	80045bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80c8 	beq.w	800477e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f4:	4ba7      	ldr	r3, [pc, #668]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 80045f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d111      	bne.n	8004626 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004602:	4ba4      	ldr	r3, [pc, #656]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004604:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004608:	4aa2      	ldr	r2, [pc, #648]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 800460a:	f043 0304 	orr.w	r3, r3, #4
 800460e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004612:	4ba0      	ldr	r3, [pc, #640]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004620:	2301      	movs	r3, #1
 8004622:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004626:	4b9c      	ldr	r3, [pc, #624]	@ (8004898 <HAL_RCC_OscConfig+0x7bc>)
 8004628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d119      	bne.n	8004666 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004632:	4b99      	ldr	r3, [pc, #612]	@ (8004898 <HAL_RCC_OscConfig+0x7bc>)
 8004634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004636:	4a98      	ldr	r2, [pc, #608]	@ (8004898 <HAL_RCC_OscConfig+0x7bc>)
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463e:	f7fe ff9b 	bl	8003578 <HAL_GetTick>
 8004642:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004644:	e009      	b.n	800465a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004646:	f7fe ff97 	bl	8003578 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d902      	bls.n	800465a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	f000 bc16 	b.w	8004e86 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800465a:	4b8f      	ldr	r3, [pc, #572]	@ (8004898 <HAL_RCC_OscConfig+0x7bc>)
 800465c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0ef      	beq.n	8004646 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d05f      	beq.n	800472e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800466e:	4b89      	ldr	r3, [pc, #548]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004674:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004680:	429a      	cmp	r2, r3
 8004682:	d037      	beq.n	80046f4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d006      	beq.n	800469c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e3f4      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d01b      	beq.n	80046de <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80046a6:	4b7b      	ldr	r3, [pc, #492]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 80046a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046ac:	4a79      	ldr	r2, [pc, #484]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 80046ae:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80046b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80046b6:	f7fe ff5f 	bl	8003578 <HAL_GetTick>
 80046ba:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046be:	f7fe ff5b 	bl	8003578 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b05      	cmp	r3, #5
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e3da      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046d0:	4b70      	ldr	r3, [pc, #448]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 80046d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1ef      	bne.n	80046be <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80046de:	4b6d      	ldr	r3, [pc, #436]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 80046e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046e4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	4969      	ldr	r1, [pc, #420]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80046f4:	4b67      	ldr	r3, [pc, #412]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 80046f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046fa:	4a66      	ldr	r2, [pc, #408]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 80046fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004700:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004704:	f7fe ff38 	bl	8003578 <HAL_GetTick>
 8004708:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470c:	f7fe ff34 	bl	8003578 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b05      	cmp	r3, #5
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e3b3      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800471e:	4b5d      	ldr	r3, [pc, #372]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004724:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0ef      	beq.n	800470c <HAL_RCC_OscConfig+0x630>
 800472c:	e01b      	b.n	8004766 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800472e:	4b59      	ldr	r3, [pc, #356]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004734:	4a57      	ldr	r2, [pc, #348]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004736:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800473a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800473e:	f7fe ff1b 	bl	8003578 <HAL_GetTick>
 8004742:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004746:	f7fe ff17 	bl	8003578 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b05      	cmp	r3, #5
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e396      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004758:	4b4e      	ldr	r3, [pc, #312]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 800475a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800475e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1ef      	bne.n	8004746 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004766:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800476a:	2b01      	cmp	r3, #1
 800476c:	d107      	bne.n	800477e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800476e:	4b49      	ldr	r3, [pc, #292]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004774:	4a47      	ldr	r2, [pc, #284]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004776:	f023 0304 	bic.w	r3, r3, #4
 800477a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 8111 	beq.w	80049ae <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800478c:	2300      	movs	r3, #0
 800478e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004792:	4b40      	ldr	r3, [pc, #256]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d111      	bne.n	80047c4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 80047a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047a6:	4a3b      	ldr	r2, [pc, #236]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 80047a8:	f043 0304 	orr.w	r3, r3, #4
 80047ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80047b0:	4b38      	ldr	r3, [pc, #224]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 80047b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047c4:	4b34      	ldr	r3, [pc, #208]	@ (8004898 <HAL_RCC_OscConfig+0x7bc>)
 80047c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d118      	bne.n	8004802 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80047d0:	4b31      	ldr	r3, [pc, #196]	@ (8004898 <HAL_RCC_OscConfig+0x7bc>)
 80047d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d4:	4a30      	ldr	r2, [pc, #192]	@ (8004898 <HAL_RCC_OscConfig+0x7bc>)
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047dc:	f7fe fecc 	bl	8003578 <HAL_GetTick>
 80047e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e4:	f7fe fec8 	bl	8003578 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e347      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047f6:	4b28      	ldr	r3, [pc, #160]	@ (8004898 <HAL_RCC_OscConfig+0x7bc>)
 80047f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0f0      	beq.n	80047e4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d01f      	beq.n	800484e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	d010      	beq.n	800483c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800481a:	4b1e      	ldr	r3, [pc, #120]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 800481c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004820:	4a1c      	ldr	r2, [pc, #112]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004822:	f043 0304 	orr.w	r3, r3, #4
 8004826:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800482a:	4b1a      	ldr	r3, [pc, #104]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 800482c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004830:	4a18      	ldr	r2, [pc, #96]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800483a:	e018      	b.n	800486e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800483c:	4b15      	ldr	r3, [pc, #84]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 800483e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004842:	4a14      	ldr	r2, [pc, #80]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800484c:	e00f      	b.n	800486e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800484e:	4b11      	ldr	r3, [pc, #68]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004854:	4a0f      	ldr	r2, [pc, #60]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004856:	f023 0301 	bic.w	r3, r3, #1
 800485a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800485e:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004864:	4a0b      	ldr	r2, [pc, #44]	@ (8004894 <HAL_RCC_OscConfig+0x7b8>)
 8004866:	f023 0304 	bic.w	r3, r3, #4
 800486a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d057      	beq.n	8004926 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004876:	f7fe fe7f 	bl	8003578 <HAL_GetTick>
 800487a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800487c:	e00e      	b.n	800489c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487e:	f7fe fe7b 	bl	8003578 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800488c:	4293      	cmp	r3, r2
 800488e:	d905      	bls.n	800489c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e2f8      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
 8004894:	46020c00 	.word	0x46020c00
 8004898:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800489c:	4b9c      	ldr	r3, [pc, #624]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 800489e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0e9      	beq.n	800487e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01b      	beq.n	80048ee <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048b6:	4b96      	ldr	r3, [pc, #600]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 80048b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048bc:	4a94      	ldr	r2, [pc, #592]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 80048be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80048c6:	e00a      	b.n	80048de <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c8:	f7fe fe56 	bl	8003578 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e2d3      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80048de:	4b8c      	ldr	r3, [pc, #560]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 80048e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0ed      	beq.n	80048c8 <HAL_RCC_OscConfig+0x7ec>
 80048ec:	e053      	b.n	8004996 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048ee:	4b88      	ldr	r3, [pc, #544]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 80048f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048f4:	4a86      	ldr	r2, [pc, #536]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 80048f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048fe:	e00a      	b.n	8004916 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004900:	f7fe fe3a 	bl	8003578 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e2b7      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004916:	4b7e      	ldr	r3, [pc, #504]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800491c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1ed      	bne.n	8004900 <HAL_RCC_OscConfig+0x824>
 8004924:	e037      	b.n	8004996 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004926:	f7fe fe27 	bl	8003578 <HAL_GetTick>
 800492a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800492c:	e00a      	b.n	8004944 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800492e:	f7fe fe23 	bl	8003578 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800493c:	4293      	cmp	r3, r2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e2a0      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004944:	4b72      	ldr	r3, [pc, #456]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1ed      	bne.n	800492e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004952:	4b6f      	ldr	r3, [pc, #444]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495c:	2b00      	cmp	r3, #0
 800495e:	d01a      	beq.n	8004996 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004960:	4b6b      	ldr	r3, [pc, #428]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004966:	4a6a      	ldr	r2, [pc, #424]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004968:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800496c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004970:	e00a      	b.n	8004988 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004972:	f7fe fe01 	bl	8003578 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004980:	4293      	cmp	r3, r2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e27e      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004988:	4b61      	ldr	r3, [pc, #388]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 800498a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800498e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1ed      	bne.n	8004972 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004996:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800499a:	2b01      	cmp	r3, #1
 800499c:	d107      	bne.n	80049ae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800499e:	4b5c      	ldr	r3, [pc, #368]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 80049a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049a4:	4a5a      	ldr	r2, [pc, #360]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 80049a6:	f023 0304 	bic.w	r3, r3, #4
 80049aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d036      	beq.n	8004a28 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d019      	beq.n	80049f6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80049c2:	4b53      	ldr	r3, [pc, #332]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a52      	ldr	r2, [pc, #328]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 80049c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049cc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049ce:	f7fe fdd3 	bl	8003578 <HAL_GetTick>
 80049d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80049d4:	e008      	b.n	80049e8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049d6:	f7fe fdcf 	bl	8003578 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e24e      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80049e8:	4b49      	ldr	r3, [pc, #292]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0f0      	beq.n	80049d6 <HAL_RCC_OscConfig+0x8fa>
 80049f4:	e018      	b.n	8004a28 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80049f6:	4b46      	ldr	r3, [pc, #280]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a45      	ldr	r2, [pc, #276]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 80049fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a00:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a02:	f7fe fdb9 	bl	8003578 <HAL_GetTick>
 8004a06:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a0a:	f7fe fdb5 	bl	8003578 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e234      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a1c:	4b3c      	ldr	r3, [pc, #240]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f0      	bne.n	8004a0a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d036      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d019      	beq.n	8004a70 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004a3c:	4b34      	ldr	r3, [pc, #208]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a33      	ldr	r2, [pc, #204]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004a42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a46:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a48:	f7fe fd96 	bl	8003578 <HAL_GetTick>
 8004a4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a50:	f7fe fd92 	bl	8003578 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e211      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a62:	4b2b      	ldr	r3, [pc, #172]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x974>
 8004a6e:	e018      	b.n	8004aa2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004a70:	4b27      	ldr	r3, [pc, #156]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a26      	ldr	r2, [pc, #152]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004a76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a7a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a7c:	f7fe fd7c 	bl	8003578 <HAL_GetTick>
 8004a80:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a84:	f7fe fd78 	bl	8003578 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e1f7      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004a96:	4b1e      	ldr	r3, [pc, #120]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d07f      	beq.n	8004bae <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d062      	beq.n	8004b7c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004ab6:	4b16      	ldr	r3, [pc, #88]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	4a15      	ldr	r2, [pc, #84]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004abc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ac0:	6093      	str	r3, [r2, #8]
 8004ac2:	4b13      	ldr	r3, [pc, #76]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ace:	4910      	ldr	r1, [pc, #64]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004adc:	d309      	bcc.n	8004af2 <HAL_RCC_OscConfig+0xa16>
 8004ade:	4b0c      	ldr	r3, [pc, #48]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f023 021f 	bic.w	r2, r3, #31
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	4909      	ldr	r1, [pc, #36]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60cb      	str	r3, [r1, #12]
 8004af0:	e02a      	b.n	8004b48 <HAL_RCC_OscConfig+0xa6c>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	da0c      	bge.n	8004b14 <HAL_RCC_OscConfig+0xa38>
 8004afa:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	015b      	lsls	r3, r3, #5
 8004b08:	4901      	ldr	r1, [pc, #4]	@ (8004b10 <HAL_RCC_OscConfig+0xa34>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60cb      	str	r3, [r1, #12]
 8004b0e:	e01b      	b.n	8004b48 <HAL_RCC_OscConfig+0xa6c>
 8004b10:	46020c00 	.word	0x46020c00
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b1c:	d30a      	bcc.n	8004b34 <HAL_RCC_OscConfig+0xa58>
 8004b1e:	4ba1      	ldr	r3, [pc, #644]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	029b      	lsls	r3, r3, #10
 8004b2c:	499d      	ldr	r1, [pc, #628]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60cb      	str	r3, [r1, #12]
 8004b32:	e009      	b.n	8004b48 <HAL_RCC_OscConfig+0xa6c>
 8004b34:	4b9b      	ldr	r3, [pc, #620]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	03db      	lsls	r3, r3, #15
 8004b42:	4998      	ldr	r1, [pc, #608]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004b48:	4b96      	ldr	r3, [pc, #600]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a95      	ldr	r2, [pc, #596]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004b4e:	f043 0310 	orr.w	r3, r3, #16
 8004b52:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b54:	f7fe fd10 	bl	8003578 <HAL_GetTick>
 8004b58:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004b5c:	f7fe fd0c 	bl	8003578 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e18b      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b6e:	4b8d      	ldr	r3, [pc, #564]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0xa80>
 8004b7a:	e018      	b.n	8004bae <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004b7c:	4b89      	ldr	r3, [pc, #548]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a88      	ldr	r2, [pc, #544]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004b82:	f023 0310 	bic.w	r3, r3, #16
 8004b86:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b88:	f7fe fcf6 	bl	8003578 <HAL_GetTick>
 8004b8c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004b90:	f7fe fcf2 	bl	8003578 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e171      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004ba2:	4b80      	ldr	r3, [pc, #512]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f0      	bne.n	8004b90 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 8166 	beq.w	8004e84 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bbe:	4b79      	ldr	r3, [pc, #484]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
 8004bc6:	2b0c      	cmp	r3, #12
 8004bc8:	f000 80f2 	beq.w	8004db0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	f040 80c5 	bne.w	8004d60 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004bd6:	4b73      	ldr	r3, [pc, #460]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a72      	ldr	r2, [pc, #456]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004bdc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004be0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004be2:	f7fe fcc9 	bl	8003578 <HAL_GetTick>
 8004be6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bea:	f7fe fcc5 	bl	8003578 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e144      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bfc:	4b69      	ldr	r3, [pc, #420]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f0      	bne.n	8004bea <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c08:	4b66      	ldr	r3, [pc, #408]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d111      	bne.n	8004c3a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004c16:	4b63      	ldr	r3, [pc, #396]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c1c:	4a61      	ldr	r2, [pc, #388]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004c1e:	f043 0304 	orr.w	r3, r3, #4
 8004c22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004c26:	4b5f      	ldr	r3, [pc, #380]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004c3a:	4b5b      	ldr	r3, [pc, #364]	@ (8004da8 <HAL_RCC_OscConfig+0xccc>)
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c46:	d102      	bne.n	8004c4e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004c4e:	4b56      	ldr	r3, [pc, #344]	@ (8004da8 <HAL_RCC_OscConfig+0xccc>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	4a55      	ldr	r2, [pc, #340]	@ (8004da8 <HAL_RCC_OscConfig+0xccc>)
 8004c54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c58:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004c5a:	4b52      	ldr	r3, [pc, #328]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004c6e:	3a01      	subs	r2, #1
 8004c70:	0212      	lsls	r2, r2, #8
 8004c72:	4311      	orrs	r1, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	494a      	ldr	r1, [pc, #296]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c80:	4b48      	ldr	r3, [pc, #288]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c84:	4b49      	ldr	r3, [pc, #292]	@ (8004dac <HAL_RCC_OscConfig+0xcd0>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c8c:	3a01      	subs	r2, #1
 8004c8e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004c96:	3a01      	subs	r2, #1
 8004c98:	0252      	lsls	r2, r2, #9
 8004c9a:	b292      	uxth	r2, r2
 8004c9c:	4311      	orrs	r1, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ca2:	3a01      	subs	r2, #1
 8004ca4:	0412      	lsls	r2, r2, #16
 8004ca6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004caa:	4311      	orrs	r1, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004cb0:	3a01      	subs	r2, #1
 8004cb2:	0612      	lsls	r2, r2, #24
 8004cb4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	493a      	ldr	r1, [pc, #232]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004cc0:	4b38      	ldr	r3, [pc, #224]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc4:	4a37      	ldr	r2, [pc, #220]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004cc6:	f023 0310 	bic.w	r3, r3, #16
 8004cca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd0:	4a34      	ldr	r2, [pc, #208]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004cd6:	4b33      	ldr	r3, [pc, #204]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cda:	4a32      	ldr	r2, [pc, #200]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004cdc:	f043 0310 	orr.w	r3, r3, #16
 8004ce0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004ce2:	4b30      	ldr	r3, [pc, #192]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce6:	f023 020c 	bic.w	r2, r3, #12
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cee:	492d      	ldr	r1, [pc, #180]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004cf4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d105      	bne.n	8004d08 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8004da8 <HAL_RCC_OscConfig+0xccc>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4a29      	ldr	r2, [pc, #164]	@ (8004da8 <HAL_RCC_OscConfig+0xccc>)
 8004d02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d06:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004d08:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d107      	bne.n	8004d20 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004d10:	4b24      	ldr	r3, [pc, #144]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d16:	4a23      	ldr	r2, [pc, #140]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004d18:	f023 0304 	bic.w	r3, r3, #4
 8004d1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004d20:	4b20      	ldr	r3, [pc, #128]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1f      	ldr	r2, [pc, #124]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d2a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d2c:	f7fe fc24 	bl	8003578 <HAL_GetTick>
 8004d30:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d34:	f7fe fc20 	bl	8003578 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e09f      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d46:	4b17      	ldr	r3, [pc, #92]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d52:	4b14      	ldr	r3, [pc, #80]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d56:	4a13      	ldr	r2, [pc, #76]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d5c:	6293      	str	r3, [r2, #40]	@ 0x28
 8004d5e:	e091      	b.n	8004e84 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004d60:	4b10      	ldr	r3, [pc, #64]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a0f      	ldr	r2, [pc, #60]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d6a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d6c:	f7fe fc04 	bl	8003578 <HAL_GetTick>
 8004d70:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d74:	f7fe fc00 	bl	8003578 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e07f      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d86:	4b07      	ldr	r3, [pc, #28]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004d92:	4b04      	ldr	r3, [pc, #16]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d96:	4a03      	ldr	r2, [pc, #12]	@ (8004da4 <HAL_RCC_OscConfig+0xcc8>)
 8004d98:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004d9c:	f023 0303 	bic.w	r3, r3, #3
 8004da0:	6293      	str	r3, [r2, #40]	@ 0x28
 8004da2:	e06f      	b.n	8004e84 <HAL_RCC_OscConfig+0xda8>
 8004da4:	46020c00 	.word	0x46020c00
 8004da8:	46020800 	.word	0x46020800
 8004dac:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004db0:	4b37      	ldr	r3, [pc, #220]	@ (8004e90 <HAL_RCC_OscConfig+0xdb4>)
 8004db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004db6:	4b36      	ldr	r3, [pc, #216]	@ (8004e90 <HAL_RCC_OscConfig+0xdb4>)
 8004db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dba:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d039      	beq.n	8004e38 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f003 0203 	and.w	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d132      	bne.n	8004e38 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	0a1b      	lsrs	r3, r3, #8
 8004dd6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d129      	bne.n	8004e38 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d122      	bne.n	8004e38 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dfc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d11a      	bne.n	8004e38 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	0a5b      	lsrs	r3, r3, #9
 8004e06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e0e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d111      	bne.n	8004e38 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	0c1b      	lsrs	r3, r3, #16
 8004e18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e20:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d108      	bne.n	8004e38 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	0e1b      	lsrs	r3, r3, #24
 8004e2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e32:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d001      	beq.n	8004e3c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e024      	b.n	8004e86 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e3c:	4b14      	ldr	r3, [pc, #80]	@ (8004e90 <HAL_RCC_OscConfig+0xdb4>)
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e40:	08db      	lsrs	r3, r3, #3
 8004e42:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d01a      	beq.n	8004e84 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004e4e:	4b10      	ldr	r3, [pc, #64]	@ (8004e90 <HAL_RCC_OscConfig+0xdb4>)
 8004e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e52:	4a0f      	ldr	r2, [pc, #60]	@ (8004e90 <HAL_RCC_OscConfig+0xdb4>)
 8004e54:	f023 0310 	bic.w	r3, r3, #16
 8004e58:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5a:	f7fe fb8d 	bl	8003578 <HAL_GetTick>
 8004e5e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004e60:	bf00      	nop
 8004e62:	f7fe fb89 	bl	8003578 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d0f9      	beq.n	8004e62 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e72:	4a07      	ldr	r2, [pc, #28]	@ (8004e90 <HAL_RCC_OscConfig+0xdb4>)
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004e78:	4b05      	ldr	r3, [pc, #20]	@ (8004e90 <HAL_RCC_OscConfig+0xdb4>)
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7c:	4a04      	ldr	r2, [pc, #16]	@ (8004e90 <HAL_RCC_OscConfig+0xdb4>)
 8004e7e:	f043 0310 	orr.w	r3, r3, #16
 8004e82:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3738      	adds	r7, #56	@ 0x38
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	46020c00 	.word	0x46020c00

08004e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e1d9      	b.n	800525c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea8:	4b9b      	ldr	r3, [pc, #620]	@ (8005118 <HAL_RCC_ClockConfig+0x284>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d910      	bls.n	8004ed8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb6:	4b98      	ldr	r3, [pc, #608]	@ (8005118 <HAL_RCC_ClockConfig+0x284>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f023 020f 	bic.w	r2, r3, #15
 8004ebe:	4996      	ldr	r1, [pc, #600]	@ (8005118 <HAL_RCC_ClockConfig+0x284>)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec6:	4b94      	ldr	r3, [pc, #592]	@ (8005118 <HAL_RCC_ClockConfig+0x284>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d001      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e1c1      	b.n	800525c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d010      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	695a      	ldr	r2, [r3, #20]
 8004ee8:	4b8c      	ldr	r3, [pc, #560]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d908      	bls.n	8004f06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004ef4:	4b89      	ldr	r3, [pc, #548]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	4986      	ldr	r1, [pc, #536]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d012      	beq.n	8004f38 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691a      	ldr	r2, [r3, #16]
 8004f16:	4b81      	ldr	r3, [pc, #516]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	091b      	lsrs	r3, r3, #4
 8004f1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d909      	bls.n	8004f38 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004f24:	4b7d      	ldr	r3, [pc, #500]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	497a      	ldr	r1, [pc, #488]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d010      	beq.n	8004f66 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	4b74      	ldr	r3, [pc, #464]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d908      	bls.n	8004f66 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004f54:	4b71      	ldr	r3, [pc, #452]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	496e      	ldr	r1, [pc, #440]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d010      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	4b69      	ldr	r3, [pc, #420]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d908      	bls.n	8004f94 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004f82:	4b66      	ldr	r3, [pc, #408]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f023 020f 	bic.w	r2, r3, #15
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	4963      	ldr	r1, [pc, #396]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80d2 	beq.w	8005146 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d143      	bne.n	8005036 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fae:	4b5b      	ldr	r3, [pc, #364]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d110      	bne.n	8004fde <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004fbc:	4b57      	ldr	r3, [pc, #348]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fc2:	4a56      	ldr	r2, [pc, #344]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004fc4:	f043 0304 	orr.w	r3, r3, #4
 8004fc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004fcc:	4b53      	ldr	r3, [pc, #332]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8004fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	60bb      	str	r3, [r7, #8]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004fde:	f7fe facb 	bl	8003578 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004fe4:	4b4e      	ldr	r3, [pc, #312]	@ (8005120 <HAL_RCC_ClockConfig+0x28c>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00f      	beq.n	8005010 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004ff2:	f7fe fac1 	bl	8003578 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e12b      	b.n	800525c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005004:	4b46      	ldr	r3, [pc, #280]	@ (8005120 <HAL_RCC_ClockConfig+0x28c>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005010:	7dfb      	ldrb	r3, [r7, #23]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d107      	bne.n	8005026 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005016:	4b41      	ldr	r3, [pc, #260]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8005018:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800501c:	4a3f      	ldr	r2, [pc, #252]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 800501e:	f023 0304 	bic.w	r3, r3, #4
 8005022:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005026:	4b3d      	ldr	r3, [pc, #244]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d121      	bne.n	8005076 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e112      	b.n	800525c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d107      	bne.n	800504e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800503e:	4b37      	ldr	r3, [pc, #220]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d115      	bne.n	8005076 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e106      	b.n	800525c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d107      	bne.n	8005066 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005056:	4b31      	ldr	r3, [pc, #196]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d109      	bne.n	8005076 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e0fa      	b.n	800525c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005066:	4b2d      	ldr	r3, [pc, #180]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0f2      	b.n	800525c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005076:	4b29      	ldr	r3, [pc, #164]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f023 0203 	bic.w	r2, r3, #3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	4926      	ldr	r1, [pc, #152]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 8005084:	4313      	orrs	r3, r2
 8005086:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005088:	f7fe fa76 	bl	8003578 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b03      	cmp	r3, #3
 8005094:	d112      	bne.n	80050bc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005096:	e00a      	b.n	80050ae <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005098:	f7fe fa6e 	bl	8003578 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e0d6      	b.n	800525c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050ae:	4b1b      	ldr	r3, [pc, #108]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f003 030c 	and.w	r3, r3, #12
 80050b6:	2b0c      	cmp	r3, #12
 80050b8:	d1ee      	bne.n	8005098 <HAL_RCC_ClockConfig+0x204>
 80050ba:	e044      	b.n	8005146 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d112      	bne.n	80050ea <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050c4:	e00a      	b.n	80050dc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c6:	f7fe fa57 	bl	8003578 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e0bf      	b.n	800525c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050dc:	4b0f      	ldr	r3, [pc, #60]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f003 030c 	and.w	r3, r3, #12
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d1ee      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x232>
 80050e8:	e02d      	b.n	8005146 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d123      	bne.n	800513a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80050f2:	e00a      	b.n	800510a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f4:	f7fe fa40 	bl	8003578 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e0a8      	b.n	800525c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800510a:	4b04      	ldr	r3, [pc, #16]	@ (800511c <HAL_RCC_ClockConfig+0x288>)
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f003 030c 	and.w	r3, r3, #12
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1ee      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x260>
 8005116:	e016      	b.n	8005146 <HAL_RCC_ClockConfig+0x2b2>
 8005118:	40022000 	.word	0x40022000
 800511c:	46020c00 	.word	0x46020c00
 8005120:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005124:	f7fe fa28 	bl	8003578 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005132:	4293      	cmp	r3, r2
 8005134:	d901      	bls.n	800513a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e090      	b.n	800525c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800513a:	4b4a      	ldr	r3, [pc, #296]	@ (8005264 <HAL_RCC_ClockConfig+0x3d0>)
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 030c 	and.w	r3, r3, #12
 8005142:	2b04      	cmp	r3, #4
 8005144:	d1ee      	bne.n	8005124 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d010      	beq.n	8005174 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	4b43      	ldr	r3, [pc, #268]	@ (8005264 <HAL_RCC_ClockConfig+0x3d0>)
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	429a      	cmp	r2, r3
 8005160:	d208      	bcs.n	8005174 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005162:	4b40      	ldr	r3, [pc, #256]	@ (8005264 <HAL_RCC_ClockConfig+0x3d0>)
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f023 020f 	bic.w	r2, r3, #15
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	493d      	ldr	r1, [pc, #244]	@ (8005264 <HAL_RCC_ClockConfig+0x3d0>)
 8005170:	4313      	orrs	r3, r2
 8005172:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005174:	4b3c      	ldr	r3, [pc, #240]	@ (8005268 <HAL_RCC_ClockConfig+0x3d4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 030f 	and.w	r3, r3, #15
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d210      	bcs.n	80051a4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005182:	4b39      	ldr	r3, [pc, #228]	@ (8005268 <HAL_RCC_ClockConfig+0x3d4>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f023 020f 	bic.w	r2, r3, #15
 800518a:	4937      	ldr	r1, [pc, #220]	@ (8005268 <HAL_RCC_ClockConfig+0x3d4>)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	4313      	orrs	r3, r2
 8005190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005192:	4b35      	ldr	r3, [pc, #212]	@ (8005268 <HAL_RCC_ClockConfig+0x3d4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d001      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e05b      	b.n	800525c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d010      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005264 <HAL_RCC_ClockConfig+0x3d0>)
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051bc:	429a      	cmp	r2, r3
 80051be:	d208      	bcs.n	80051d2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80051c0:	4b28      	ldr	r3, [pc, #160]	@ (8005264 <HAL_RCC_ClockConfig+0x3d0>)
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4925      	ldr	r1, [pc, #148]	@ (8005264 <HAL_RCC_ClockConfig+0x3d0>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d012      	beq.n	8005204 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	4b20      	ldr	r3, [pc, #128]	@ (8005264 <HAL_RCC_ClockConfig+0x3d0>)
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	091b      	lsrs	r3, r3, #4
 80051e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d209      	bcs.n	8005204 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80051f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005264 <HAL_RCC_ClockConfig+0x3d0>)
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	4919      	ldr	r1, [pc, #100]	@ (8005264 <HAL_RCC_ClockConfig+0x3d0>)
 8005200:	4313      	orrs	r3, r2
 8005202:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	d010      	beq.n	8005232 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	695a      	ldr	r2, [r3, #20]
 8005214:	4b13      	ldr	r3, [pc, #76]	@ (8005264 <HAL_RCC_ClockConfig+0x3d0>)
 8005216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005218:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800521c:	429a      	cmp	r2, r3
 800521e:	d208      	bcs.n	8005232 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005220:	4b10      	ldr	r3, [pc, #64]	@ (8005264 <HAL_RCC_ClockConfig+0x3d0>)
 8005222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005224:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	490d      	ldr	r1, [pc, #52]	@ (8005264 <HAL_RCC_ClockConfig+0x3d0>)
 800522e:	4313      	orrs	r3, r2
 8005230:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005232:	f000 f821 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8005236:	4602      	mov	r2, r0
 8005238:	4b0a      	ldr	r3, [pc, #40]	@ (8005264 <HAL_RCC_ClockConfig+0x3d0>)
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	490a      	ldr	r1, [pc, #40]	@ (800526c <HAL_RCC_ClockConfig+0x3d8>)
 8005242:	5ccb      	ldrb	r3, [r1, r3]
 8005244:	fa22 f303 	lsr.w	r3, r2, r3
 8005248:	4a09      	ldr	r2, [pc, #36]	@ (8005270 <HAL_RCC_ClockConfig+0x3dc>)
 800524a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800524c:	4b09      	ldr	r3, [pc, #36]	@ (8005274 <HAL_RCC_ClockConfig+0x3e0>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	f7fe f907 	bl	8003464 <HAL_InitTick>
 8005256:	4603      	mov	r3, r0
 8005258:	73fb      	strb	r3, [r7, #15]

  return status;
 800525a:	7bfb      	ldrb	r3, [r7, #15]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	46020c00 	.word	0x46020c00
 8005268:	40022000 	.word	0x40022000
 800526c:	0800eb1c 	.word	0x0800eb1c
 8005270:	20000028 	.word	0x20000028
 8005274:	20000048 	.word	0x20000048

08005278 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005278:	b480      	push	{r7}
 800527a:	b08b      	sub	sp, #44	@ 0x2c
 800527c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005286:	4b78      	ldr	r3, [pc, #480]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005290:	4b75      	ldr	r3, [pc, #468]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0x34>
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	2b0c      	cmp	r3, #12
 80052a4:	d121      	bne.n	80052ea <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d11e      	bne.n	80052ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80052ac:	4b6e      	ldr	r3, [pc, #440]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d107      	bne.n	80052c8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80052b8:	4b6b      	ldr	r3, [pc, #428]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052be:	0b1b      	lsrs	r3, r3, #12
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c6:	e005      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80052c8:	4b67      	ldr	r3, [pc, #412]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	0f1b      	lsrs	r3, r3, #28
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052d4:	4a65      	ldr	r2, [pc, #404]	@ (800546c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052dc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d110      	bne.n	8005306 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80052e8:	e00d      	b.n	8005306 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052ea:	4b5f      	ldr	r3, [pc, #380]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d102      	bne.n	80052fc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052f6:	4b5e      	ldr	r3, [pc, #376]	@ (8005470 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80052f8:	623b      	str	r3, [r7, #32]
 80052fa:	e004      	b.n	8005306 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d101      	bne.n	8005306 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005302:	4b5c      	ldr	r3, [pc, #368]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005304:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	2b0c      	cmp	r3, #12
 800530a:	f040 80a5 	bne.w	8005458 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800530e:	4b56      	ldr	r3, [pc, #344]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005318:	4b53      	ldr	r3, [pc, #332]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800531a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531c:	0a1b      	lsrs	r3, r3, #8
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	3301      	adds	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005326:	4b50      	ldr	r3, [pc, #320]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532a:	091b      	lsrs	r3, r3, #4
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005332:	4b4d      	ldr	r3, [pc, #308]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005336:	08db      	lsrs	r3, r3, #3
 8005338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2b02      	cmp	r3, #2
 8005352:	d003      	beq.n	800535c <HAL_RCC_GetSysClockFreq+0xe4>
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b03      	cmp	r3, #3
 8005358:	d022      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0x128>
 800535a:	e043      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005366:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8005478 <HAL_RCC_GetSysClockFreq+0x200>
 800536a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800536e:	4b3e      	ldr	r3, [pc, #248]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800537e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005382:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800547c <HAL_RCC_GetSysClockFreq+0x204>
 8005386:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800538a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800538e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005392:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800539e:	e046      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8005480 <HAL_RCC_GetSysClockFreq+0x208>
 80053ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053c2:	ed97 6a01 	vldr	s12, [r7, #4]
 80053c6:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800547c <HAL_RCC_GetSysClockFreq+0x204>
 80053ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053e2:	e024      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	ee07 3a90 	vmov	s15, r3
 80053f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005404:	ee07 3a90 	vmov	s15, r3
 8005408:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800540c:	ed97 6a01 	vldr	s12, [r7, #4]
 8005410:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800547c <HAL_RCC_GetSysClockFreq+0x204>
 8005414:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005418:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800541c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005420:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005428:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800542c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800542e:	4b0e      	ldr	r3, [pc, #56]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005432:	0e1b      	lsrs	r3, r3, #24
 8005434:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005438:	3301      	adds	r3, #1
 800543a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005446:	edd7 6a07 	vldr	s13, [r7, #28]
 800544a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800544e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005452:	ee17 3a90 	vmov	r3, s15
 8005456:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005458:	6a3b      	ldr	r3, [r7, #32]
}
 800545a:	4618      	mov	r0, r3
 800545c:	372c      	adds	r7, #44	@ 0x2c
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	46020c00 	.word	0x46020c00
 800546c:	0800eb34 	.word	0x0800eb34
 8005470:	00f42400 	.word	0x00f42400
 8005474:	007a1200 	.word	0x007a1200
 8005478:	4b742400 	.word	0x4b742400
 800547c:	46000000 	.word	0x46000000
 8005480:	4af42400 	.word	0x4af42400

08005484 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005488:	f7ff fef6 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 800548c:	4602      	mov	r2, r0
 800548e:	4b07      	ldr	r3, [pc, #28]	@ (80054ac <HAL_RCC_GetHCLKFreq+0x28>)
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	4906      	ldr	r1, [pc, #24]	@ (80054b0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005498:	5ccb      	ldrb	r3, [r1, r3]
 800549a:	fa22 f303 	lsr.w	r3, r2, r3
 800549e:	4a05      	ldr	r2, [pc, #20]	@ (80054b4 <HAL_RCC_GetHCLKFreq+0x30>)
 80054a0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80054a2:	4b04      	ldr	r3, [pc, #16]	@ (80054b4 <HAL_RCC_GetHCLKFreq+0x30>)
 80054a4:	681b      	ldr	r3, [r3, #0]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	46020c00 	.word	0x46020c00
 80054b0:	0800eb1c 	.word	0x0800eb1c
 80054b4:	20000028 	.word	0x20000028

080054b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80054bc:	f7ff ffe2 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054c0:	4602      	mov	r2, r0
 80054c2:	4b05      	ldr	r3, [pc, #20]	@ (80054d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	091b      	lsrs	r3, r3, #4
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	4903      	ldr	r1, [pc, #12]	@ (80054dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ce:	5ccb      	ldrb	r3, [r1, r3]
 80054d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	46020c00 	.word	0x46020c00
 80054dc:	0800eb2c 	.word	0x0800eb2c

080054e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80054e4:	f7ff ffce 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054e8:	4602      	mov	r2, r0
 80054ea:	4b05      	ldr	r3, [pc, #20]	@ (8005500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	0a1b      	lsrs	r3, r3, #8
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	4903      	ldr	r1, [pc, #12]	@ (8005504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054f6:	5ccb      	ldrb	r3, [r1, r3]
 80054f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	46020c00 	.word	0x46020c00
 8005504:	0800eb2c 	.word	0x0800eb2c

08005508 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800550c:	f7ff ffba 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 8005510:	4602      	mov	r2, r0
 8005512:	4b05      	ldr	r3, [pc, #20]	@ (8005528 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005516:	091b      	lsrs	r3, r3, #4
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	4903      	ldr	r1, [pc, #12]	@ (800552c <HAL_RCC_GetPCLK3Freq+0x24>)
 800551e:	5ccb      	ldrb	r3, [r1, r3]
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005524:	4618      	mov	r0, r3
 8005526:	bd80      	pop	{r7, pc}
 8005528:	46020c00 	.word	0x46020c00
 800552c:	0800eb2c 	.word	0x0800eb2c

08005530 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005538:	4b3e      	ldr	r3, [pc, #248]	@ (8005634 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800553a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005546:	f7fe fd4b 	bl	8003fe0 <HAL_PWREx_GetVoltageRange>
 800554a:	6178      	str	r0, [r7, #20]
 800554c:	e019      	b.n	8005582 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800554e:	4b39      	ldr	r3, [pc, #228]	@ (8005634 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005550:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005554:	4a37      	ldr	r2, [pc, #220]	@ (8005634 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005556:	f043 0304 	orr.w	r3, r3, #4
 800555a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800555e:	4b35      	ldr	r3, [pc, #212]	@ (8005634 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800556c:	f7fe fd38 	bl	8003fe0 <HAL_PWREx_GetVoltageRange>
 8005570:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005572:	4b30      	ldr	r3, [pc, #192]	@ (8005634 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005578:	4a2e      	ldr	r2, [pc, #184]	@ (8005634 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800557a:	f023 0304 	bic.w	r3, r3, #4
 800557e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005588:	d003      	beq.n	8005592 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005590:	d109      	bne.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005598:	d202      	bcs.n	80055a0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800559a:	2301      	movs	r3, #1
 800559c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800559e:	e033      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80055a0:	2300      	movs	r3, #0
 80055a2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80055a4:	e030      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055ac:	d208      	bcs.n	80055c0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055b4:	d102      	bne.n	80055bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80055b6:	2303      	movs	r3, #3
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	e025      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e035      	b.n	800562c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055c6:	d90f      	bls.n	80055e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055d4:	d902      	bls.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80055d6:	2300      	movs	r3, #0
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	e015      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80055dc:	2301      	movs	r3, #1
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	e012      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80055e2:	2300      	movs	r3, #0
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	e00f      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055ee:	d109      	bne.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055f6:	d102      	bne.n	80055fe <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80055f8:	2301      	movs	r3, #1
 80055fa:	613b      	str	r3, [r7, #16]
 80055fc:	e004      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80055fe:	2302      	movs	r3, #2
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	e001      	b.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005604:	2301      	movs	r3, #1
 8005606:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005608:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f023 020f 	bic.w	r2, r3, #15
 8005610:	4909      	ldr	r1, [pc, #36]	@ (8005638 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005618:	4b07      	ldr	r3, [pc, #28]	@ (8005638 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	429a      	cmp	r2, r3
 8005624:	d001      	beq.n	800562a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	46020c00 	.word	0x46020c00
 8005638:	40022000 	.word	0x40022000

0800563c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800563c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005640:	b0c4      	sub	sp, #272	@ 0x110
 8005642:	af00      	add	r7, sp, #0
 8005644:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005648:	2300      	movs	r3, #0
 800564a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800564e:	2300      	movs	r3, #0
 8005650:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	f002 0401 	and.w	r4, r2, #1
 8005660:	2500      	movs	r5, #0
 8005662:	ea54 0305 	orrs.w	r3, r4, r5
 8005666:	d00b      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005668:	4bd5      	ldr	r3, [pc, #852]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800566a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800566e:	f023 0103 	bic.w	r1, r3, #3
 8005672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005678:	4ad1      	ldr	r2, [pc, #836]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800567a:	430b      	orrs	r3, r1
 800567c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f002 0802 	and.w	r8, r2, #2
 800568c:	f04f 0900 	mov.w	r9, #0
 8005690:	ea58 0309 	orrs.w	r3, r8, r9
 8005694:	d00b      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005696:	4bca      	ldr	r3, [pc, #808]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800569c:	f023 010c 	bic.w	r1, r3, #12
 80056a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a6:	4ac6      	ldr	r2, [pc, #792]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80056a8:	430b      	orrs	r3, r1
 80056aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	f002 0a04 	and.w	sl, r2, #4
 80056ba:	f04f 0b00 	mov.w	fp, #0
 80056be:	ea5a 030b 	orrs.w	r3, sl, fp
 80056c2:	d00b      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80056c4:	4bbe      	ldr	r3, [pc, #760]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80056c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056ca:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80056ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d4:	4aba      	ldr	r2, [pc, #744]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80056d6:	430b      	orrs	r3, r1
 80056d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f002 0308 	and.w	r3, r2, #8
 80056e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056ec:	2300      	movs	r3, #0
 80056ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056f2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4313      	orrs	r3, r2
 80056fa:	d00b      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80056fc:	4bb0      	ldr	r3, [pc, #704]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80056fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005702:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800570a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800570c:	4aac      	ldr	r2, [pc, #688]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800570e:	430b      	orrs	r3, r1
 8005710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f002 0310 	and.w	r3, r2, #16
 8005720:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005724:	2300      	movs	r3, #0
 8005726:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800572a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	d00b      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005734:	4ba2      	ldr	r3, [pc, #648]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800573a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800573e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005744:	4a9e      	ldr	r2, [pc, #632]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005746:	430b      	orrs	r3, r1
 8005748:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800574c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800575c:	2300      	movs	r3, #0
 800575e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005762:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005766:	460b      	mov	r3, r1
 8005768:	4313      	orrs	r3, r2
 800576a:	d00b      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800576c:	4b94      	ldr	r3, [pc, #592]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800576e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005772:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800577a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800577c:	4a90      	ldr	r2, [pc, #576]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800577e:	430b      	orrs	r3, r1
 8005780:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f002 0320 	and.w	r3, r2, #32
 8005790:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005794:	2300      	movs	r3, #0
 8005796:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800579a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800579e:	460b      	mov	r3, r1
 80057a0:	4313      	orrs	r3, r2
 80057a2:	d00b      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80057a4:	4b86      	ldr	r3, [pc, #536]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80057a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057aa:	f023 0107 	bic.w	r1, r3, #7
 80057ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057b4:	4a82      	ldr	r2, [pc, #520]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80057b6:	430b      	orrs	r3, r1
 80057b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80057c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057cc:	2300      	movs	r3, #0
 80057ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80057d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4313      	orrs	r3, r2
 80057da:	d00b      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80057dc:	4b78      	ldr	r3, [pc, #480]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80057de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057e2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80057e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057ec:	4a74      	ldr	r2, [pc, #464]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80057ee:	430b      	orrs	r3, r1
 80057f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005800:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005804:	2300      	movs	r3, #0
 8005806:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800580a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800580e:	460b      	mov	r3, r1
 8005810:	4313      	orrs	r3, r2
 8005812:	d00b      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005814:	4b6a      	ldr	r3, [pc, #424]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800581a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800581e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005824:	4a66      	ldr	r2, [pc, #408]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005826:	430b      	orrs	r3, r1
 8005828:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800582c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005838:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800583c:	2300      	movs	r3, #0
 800583e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005842:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005846:	460b      	mov	r3, r1
 8005848:	4313      	orrs	r3, r2
 800584a:	d00b      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800584c:	4b5c      	ldr	r3, [pc, #368]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800584e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005852:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800585a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800585c:	4a58      	ldr	r2, [pc, #352]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800585e:	430b      	orrs	r3, r1
 8005860:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005870:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005874:	2300      	movs	r3, #0
 8005876:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800587a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800587e:	460b      	mov	r3, r1
 8005880:	4313      	orrs	r3, r2
 8005882:	d00b      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005884:	4b4e      	ldr	r3, [pc, #312]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800588a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800588e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005892:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005894:	4a4a      	ldr	r2, [pc, #296]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005896:	430b      	orrs	r3, r1
 8005898:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800589c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80058a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058ac:	2300      	movs	r3, #0
 80058ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4313      	orrs	r3, r2
 80058ba:	d00b      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80058bc:	4b40      	ldr	r3, [pc, #256]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80058be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058c2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80058c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058cc:	4a3c      	ldr	r2, [pc, #240]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80058ce:	430b      	orrs	r3, r1
 80058d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 80058d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80058e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058e4:	2300      	movs	r3, #0
 80058e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058ea:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058ee:	460b      	mov	r3, r1
 80058f0:	4313      	orrs	r3, r2
 80058f2:	d00c      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 80058f4:	4b32      	ldr	r3, [pc, #200]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80058f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058fa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80058fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005906:	4a2e      	ldr	r2, [pc, #184]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005908:	430b      	orrs	r3, r1
 800590a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800590e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005916:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800591a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800591e:	2300      	movs	r3, #0
 8005920:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005924:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005928:	460b      	mov	r3, r1
 800592a:	4313      	orrs	r3, r2
 800592c:	d00c      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800592e:	4b24      	ldr	r3, [pc, #144]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005930:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005934:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800593c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005940:	4a1f      	ldr	r2, [pc, #124]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005942:	430b      	orrs	r3, r1
 8005944:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005954:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005958:	2300      	movs	r3, #0
 800595a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800595e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005962:	460b      	mov	r3, r1
 8005964:	4313      	orrs	r3, r2
 8005966:	d00c      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005968:	4b15      	ldr	r3, [pc, #84]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800596a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800596e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597a:	4a11      	ldr	r2, [pc, #68]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800597c:	430b      	orrs	r3, r1
 800597e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800598e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005992:	2300      	movs	r3, #0
 8005994:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005998:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800599c:	460b      	mov	r3, r1
 800599e:	4313      	orrs	r3, r2
 80059a0:	d010      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80059a2:	4b07      	ldr	r3, [pc, #28]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80059a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059b4:	4a02      	ldr	r2, [pc, #8]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80059b6:	430b      	orrs	r3, r1
 80059b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80059bc:	e002      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80059be:	bf00      	nop
 80059c0:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80059c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059cc:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80059d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059d4:	2300      	movs	r3, #0
 80059d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80059da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80059de:	460b      	mov	r3, r1
 80059e0:	4313      	orrs	r3, r2
 80059e2:	d04c      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80059e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059ec:	2b80      	cmp	r3, #128	@ 0x80
 80059ee:	d02d      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80059f0:	2b80      	cmp	r3, #128	@ 0x80
 80059f2:	d827      	bhi.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80059f4:	2b60      	cmp	r3, #96	@ 0x60
 80059f6:	d02b      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80059f8:	2b60      	cmp	r3, #96	@ 0x60
 80059fa:	d823      	bhi.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80059fc:	2b40      	cmp	r3, #64	@ 0x40
 80059fe:	d006      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8005a00:	2b40      	cmp	r3, #64	@ 0x40
 8005a02:	d81f      	bhi.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d009      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d011      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005a0c:	e01a      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a0e:	4bbe      	ldr	r3, [pc, #760]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a12:	4abd      	ldr	r2, [pc, #756]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a18:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a1a:	e01a      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a20:	3308      	adds	r3, #8
 8005a22:	4618      	mov	r0, r3
 8005a24:	f002 fc3c 	bl	80082a0 <RCCEx_PLL2_Config>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a2e:	e010      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a34:	332c      	adds	r3, #44	@ 0x2c
 8005a36:	4618      	mov	r0, r3
 8005a38:	f002 fcca 	bl	80083d0 <RCCEx_PLL3_Config>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a42:	e006      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005a4a:	e002      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8005a4c:	bf00      	nop
 8005a4e:	e000      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8005a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a52:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10d      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005a5a:	4bab      	ldr	r3, [pc, #684]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a60:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a6c:	4aa6      	ldr	r2, [pc, #664]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a6e:	430b      	orrs	r3, r1
 8005a70:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005a74:	e003      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a76:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005a7a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a86:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a94:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	d053      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aa2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aaa:	d033      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8005aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ab0:	d82c      	bhi.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ab6:	d02f      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8005ab8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005abc:	d826      	bhi.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ac2:	d008      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8005ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ac8:	d820      	bhi.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ad2:	d011      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005ad4:	e01a      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ad6:	4b8c      	ldr	r3, [pc, #560]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ada:	4a8b      	ldr	r2, [pc, #556]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ae0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005ae2:	e01a      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ae8:	3308      	adds	r3, #8
 8005aea:	4618      	mov	r0, r3
 8005aec:	f002 fbd8 	bl	80082a0 <RCCEx_PLL2_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005af6:	e010      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005afc:	332c      	adds	r3, #44	@ 0x2c
 8005afe:	4618      	mov	r0, r3
 8005b00:	f002 fc66 	bl	80083d0 <RCCEx_PLL3_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005b0a:	e006      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005b12:	e002      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005b14:	bf00      	nop
 8005b16:	e000      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b1a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10d      	bne.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005b22:	4b79      	ldr	r3, [pc, #484]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b28:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b34:	4a74      	ldr	r2, [pc, #464]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b36:	430b      	orrs	r3, r1
 8005b38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b3c:	e003      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005b42:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b52:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b54:	2300      	movs	r3, #0
 8005b56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b58:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	d046      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b6a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005b6e:	d028      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005b70:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005b74:	d821      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005b76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b7a:	d022      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005b7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b80:	d81b      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005b82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b86:	d01c      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005b88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b8c:	d815      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005b8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b92:	d008      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8005b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b98:	d80f      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d011      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ba2:	d00e      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005ba4:	e009      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005baa:	3308      	adds	r3, #8
 8005bac:	4618      	mov	r0, r3
 8005bae:	f002 fb77 	bl	80082a0 <RCCEx_PLL2_Config>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005bb8:	e004      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005bc0:	e000      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8005bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bc4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10d      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005bcc:	4b4e      	ldr	r3, [pc, #312]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bd2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bde:	4a4a      	ldr	r2, [pc, #296]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005be0:	430b      	orrs	r3, r1
 8005be2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005be6:	e003      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005bec:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005bfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bfe:	2300      	movs	r3, #0
 8005c00:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c02:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005c06:	460b      	mov	r3, r1
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	d03f      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d81e      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8005c18:	a201      	add	r2, pc, #4	@ (adr r2, 8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c5f 	.word	0x08005c5f
 8005c24:	08005c35 	.word	0x08005c35
 8005c28:	08005c43 	.word	0x08005c43
 8005c2c:	08005c5f 	.word	0x08005c5f
 8005c30:	08005c5f 	.word	0x08005c5f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c34:	4b34      	ldr	r3, [pc, #208]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c38:	4a33      	ldr	r2, [pc, #204]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c3e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005c40:	e00e      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c46:	332c      	adds	r3, #44	@ 0x2c
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f002 fbc1 	bl	80083d0 <RCCEx_PLL3_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005c54:	e004      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005c5c:	e000      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8005c5e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c60:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10d      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005c68:	4b27      	ldr	r3, [pc, #156]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c6e:	f023 0107 	bic.w	r1, r3, #7
 8005c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c7a:	4a23      	ldr	r2, [pc, #140]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005c82:	e003      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c84:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005c88:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005c98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c9e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	d04c      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cb4:	d02a      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8005cb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cba:	d821      	bhi.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005cbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005cc0:	d026      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8005cc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005cc6:	d81b      	bhi.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005cc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ccc:	d00e      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005cce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cd2:	d815      	bhi.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01d      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8005cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cdc:	d110      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005cde:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce2:	4a09      	ldr	r2, [pc, #36]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005cea:	e014      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cf0:	332c      	adds	r3, #44	@ 0x2c
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f002 fb6c 	bl	80083d0 <RCCEx_PLL3_Config>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005cfe:	e00a      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005d06:	e006      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8005d08:	46020c00 	.word	0x46020c00
        break;
 8005d0c:	bf00      	nop
 8005d0e:	e002      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8005d10:	bf00      	nop
 8005d12:	e000      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8005d14:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005d16:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10d      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005d1e:	4baf      	ldr	r3, [pc, #700]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d24:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d30:	4aaa      	ldr	r2, [pc, #680]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005d32:	430b      	orrs	r3, r1
 8005d34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005d38:	e003      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005d3e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d50:	2300      	movs	r3, #0
 8005d52:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d54:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f000 80b5 	beq.w	8005eca <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d60:	2300      	movs	r3, #0
 8005d62:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d66:	4b9d      	ldr	r3, [pc, #628]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d113      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d74:	4b99      	ldr	r3, [pc, #612]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d7a:	4a98      	ldr	r2, [pc, #608]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005d7c:	f043 0304 	orr.w	r3, r3, #4
 8005d80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005d84:	4b95      	ldr	r3, [pc, #596]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d92:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005d9c:	4b90      	ldr	r3, [pc, #576]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da0:	4a8f      	ldr	r2, [pc, #572]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005da2:	f043 0301 	orr.w	r3, r3, #1
 8005da6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005da8:	f7fd fbe6 	bl	8003578 <HAL_GetTick>
 8005dac:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005db0:	e00b      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005db2:	f7fd fbe1 	bl	8003578 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d903      	bls.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005dc8:	e005      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005dca:	4b85      	ldr	r3, [pc, #532]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0ed      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8005dd6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d165      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005dde:	4b7f      	ldr	r3, [pc, #508]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005de0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005de8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d023      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x800>
 8005df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005df8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d01b      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e04:	4b75      	ldr	r3, [pc, #468]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e0e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e12:	4b72      	ldr	r3, [pc, #456]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e18:	4a70      	ldr	r2, [pc, #448]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e22:	4b6e      	ldr	r3, [pc, #440]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e28:	4a6c      	ldr	r2, [pc, #432]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e32:	4a6a      	ldr	r2, [pc, #424]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d019      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e48:	f7fd fb96 	bl	8003578 <HAL_GetTick>
 8005e4c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e50:	e00d      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e52:	f7fd fb91 	bl	8003578 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5c:	1ad2      	subs	r2, r2, r3
 8005e5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d903      	bls.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8005e6c:	e006      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e6e:	4b5b      	ldr	r3, [pc, #364]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0ea      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8005e7c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10d      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005e84:	4b55      	ldr	r3, [pc, #340]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e92:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005e96:	4a51      	ldr	r2, [pc, #324]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ea0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005ea4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8005ea8:	e003      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eaa:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005eae:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005eb2:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d107      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eba:	4b48      	ldr	r3, [pc, #288]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ec0:	4a46      	ldr	r2, [pc, #280]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005ec2:	f023 0304 	bic.w	r3, r3, #4
 8005ec6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005ed6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ed8:	2300      	movs	r3, #0
 8005eda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005edc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	d042      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005eee:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005ef2:	d022      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8005ef4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005ef8:	d81b      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8005efa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005efe:	d011      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8005f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f04:	d815      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d019      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x902>
 8005f0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f0e:	d110      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f14:	3308      	adds	r3, #8
 8005f16:	4618      	mov	r0, r3
 8005f18:	f002 f9c2 	bl	80082a0 <RCCEx_PLL2_Config>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005f22:	e00d      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f24:	4b2d      	ldr	r3, [pc, #180]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f28:	4a2c      	ldr	r2, [pc, #176]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f2e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005f30:	e006      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005f38:	e002      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005f3a:	bf00      	nop
 8005f3c:	e000      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005f3e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005f40:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10d      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005f48:	4b24      	ldr	r3, [pc, #144]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f4e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f5a:	4a20      	ldr	r2, [pc, #128]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f62:	e003      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f64:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005f68:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005f78:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005f82:	460b      	mov	r3, r1
 8005f84:	4313      	orrs	r3, r2
 8005f86:	d031      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f94:	d00b      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f9a:	d804      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa4:	d007      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005fac:	e004      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005fae:	bf00      	nop
 8005fb0:	e002      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005fb2:	bf00      	nop
 8005fb4:	e000      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005fb6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005fb8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d111      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005fc0:	4b06      	ldr	r3, [pc, #24]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005fc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005fc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005fd2:	4a02      	ldr	r2, [pc, #8]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005fda:	e007      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8005fdc:	46020c00 	.word	0x46020c00
 8005fe0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005fe8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ffe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006002:	460b      	mov	r3, r1
 8006004:	4313      	orrs	r3, r2
 8006006:	d00c      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006008:	4bb2      	ldr	r3, [pc, #712]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800600a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800600e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8006012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006016:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800601a:	4aae      	ldr	r2, [pc, #696]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800601c:	430b      	orrs	r3, r1
 800601e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800602e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006030:	2300      	movs	r3, #0
 8006032:	647b      	str	r3, [r7, #68]	@ 0x44
 8006034:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006038:	460b      	mov	r3, r1
 800603a:	4313      	orrs	r3, r2
 800603c:	d019      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800603e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006042:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006046:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800604a:	d105      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800604c:	4ba1      	ldr	r3, [pc, #644]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800604e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006050:	4aa0      	ldr	r2, [pc, #640]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006052:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006056:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006058:	4b9e      	ldr	r3, [pc, #632]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800605a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800605e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006066:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800606a:	4a9a      	ldr	r2, [pc, #616]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800606c:	430b      	orrs	r3, r1
 800606e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800607e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006080:	2300      	movs	r3, #0
 8006082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006084:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006088:	460b      	mov	r3, r1
 800608a:	4313      	orrs	r3, r2
 800608c:	d00c      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800608e:	4b91      	ldr	r3, [pc, #580]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006094:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800609c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80060a0:	4a8c      	ldr	r2, [pc, #560]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80060a2:	430b      	orrs	r3, r1
 80060a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80060a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80060b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80060b6:	2300      	movs	r3, #0
 80060b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80060be:	460b      	mov	r3, r1
 80060c0:	4313      	orrs	r3, r2
 80060c2:	d00c      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80060c4:	4b83      	ldr	r3, [pc, #524]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80060c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80060ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80060d6:	4a7f      	ldr	r2, [pc, #508]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80060d8:	430b      	orrs	r3, r1
 80060da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80060de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80060ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060ec:	2300      	movs	r3, #0
 80060ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80060f4:	460b      	mov	r3, r1
 80060f6:	4313      	orrs	r3, r2
 80060f8:	d00c      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80060fa:	4b76      	ldr	r3, [pc, #472]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80060fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006100:	f023 0218 	bic.w	r2, r3, #24
 8006104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006108:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800610c:	4971      	ldr	r1, [pc, #452]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800610e:	4313      	orrs	r3, r2
 8006110:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006120:	623b      	str	r3, [r7, #32]
 8006122:	2300      	movs	r3, #0
 8006124:	627b      	str	r3, [r7, #36]	@ 0x24
 8006126:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800612a:	460b      	mov	r3, r1
 800612c:	4313      	orrs	r3, r2
 800612e:	d032      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006134:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006138:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800613c:	d105      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800613e:	4b65      	ldr	r3, [pc, #404]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006142:	4a64      	ldr	r2, [pc, #400]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006148:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800614a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800614e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006152:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006156:	d108      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800615c:	3308      	adds	r3, #8
 800615e:	4618      	mov	r0, r3
 8006160:	f002 f89e 	bl	80082a0 <RCCEx_PLL2_Config>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 800616a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10d      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006172:	4b58      	ldr	r3, [pc, #352]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006174:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006178:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800617c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006180:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006184:	4953      	ldr	r1, [pc, #332]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006186:	4313      	orrs	r3, r2
 8006188:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800618c:	e003      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006192:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8006196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619e:	2100      	movs	r1, #0
 80061a0:	61b9      	str	r1, [r7, #24]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	61fb      	str	r3, [r7, #28]
 80061a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80061ac:	460b      	mov	r3, r1
 80061ae:	4313      	orrs	r3, r2
 80061b0:	d04a      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80061b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80061ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061be:	d01e      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 80061c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061c4:	d825      	bhi.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80061c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061ca:	d00e      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80061cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061d0:	d81f      	bhi.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d021      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80061d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061da:	d11a      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061dc:	4b3d      	ldr	r3, [pc, #244]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80061de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e0:	4a3c      	ldr	r2, [pc, #240]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80061e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061e6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80061e8:	e018      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ee:	3308      	adds	r3, #8
 80061f0:	4618      	mov	r0, r3
 80061f2:	f002 f855 	bl	80082a0 <RCCEx_PLL2_Config>
 80061f6:	4603      	mov	r3, r0
 80061f8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80061fc:	e00e      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006202:	332c      	adds	r3, #44	@ 0x2c
 8006204:	4618      	mov	r0, r3
 8006206:	f002 f8e3 	bl	80083d0 <RCCEx_PLL3_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8006210:	e004      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006218:	e000      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 800621a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800621c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10d      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8006224:	4b2b      	ldr	r3, [pc, #172]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006226:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800622a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800622e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006232:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006236:	4927      	ldr	r1, [pc, #156]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800623e:	e003      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006240:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006244:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006254:	613b      	str	r3, [r7, #16]
 8006256:	2300      	movs	r3, #0
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800625e:	460b      	mov	r3, r1
 8006260:	4313      	orrs	r3, r2
 8006262:	d03d      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006270:	d00e      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006272:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006276:	d815      	bhi.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d017      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800627c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006280:	d110      	bne.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006282:	4b14      	ldr	r3, [pc, #80]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006286:	4a13      	ldr	r2, [pc, #76]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800628c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800628e:	e00e      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006294:	3308      	adds	r3, #8
 8006296:	4618      	mov	r0, r3
 8006298:	f002 f802 	bl	80082a0 <RCCEx_PLL2_Config>
 800629c:	4603      	mov	r3, r0
 800629e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80062a2:	e004      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80062aa:	e000      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 80062ac:	bf00      	nop
    }
    if (ret == HAL_OK)
 80062ae:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d110      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80062b6:	4b07      	ldr	r3, [pc, #28]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80062b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062bc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80062c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c8:	4902      	ldr	r1, [pc, #8]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80062d0:	e006      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 80062d2:	bf00      	nop
 80062d4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80062dc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80062e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80062f6:	460b      	mov	r3, r1
 80062f8:	4313      	orrs	r3, r2
 80062fa:	d00c      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80062fc:	4b2c      	ldr	r3, [pc, #176]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80062fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006302:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800630a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800630e:	4928      	ldr	r1, [pc, #160]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006310:	4313      	orrs	r3, r2
 8006312:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8006316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631e:	2100      	movs	r1, #0
 8006320:	6039      	str	r1, [r7, #0]
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	607b      	str	r3, [r7, #4]
 8006328:	e9d7 1200 	ldrd	r1, r2, [r7]
 800632c:	460b      	mov	r3, r1
 800632e:	4313      	orrs	r3, r2
 8006330:	d036      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8006332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006336:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800633a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800633e:	d00d      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006340:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006344:	d811      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8006346:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800634a:	d012      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800634c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006350:	d80b      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00d      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800635a:	d106      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800635c:	4b14      	ldr	r3, [pc, #80]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800635e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006360:	4a13      	ldr	r2, [pc, #76]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006366:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8006368:	e004      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006370:	e000      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8006372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006374:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10d      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800637c:	4b0c      	ldr	r3, [pc, #48]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800637e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006382:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800638a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800638e:	4908      	ldr	r1, [pc, #32]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006396:	e003      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006398:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800639c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80063a0:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80063aa:	46bd      	mov	sp, r7
 80063ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063b0:	46020c00 	.word	0x46020c00

080063b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b089      	sub	sp, #36	@ 0x24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80063bc:	4ba6      	ldr	r3, [pc, #664]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80063c6:	4ba4      	ldr	r3, [pc, #656]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80063d0:	4ba1      	ldr	r3, [pc, #644]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d4:	0a1b      	lsrs	r3, r3, #8
 80063d6:	f003 030f 	and.w	r3, r3, #15
 80063da:	3301      	adds	r3, #1
 80063dc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80063de:	4b9e      	ldr	r3, [pc, #632]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e2:	091b      	lsrs	r3, r3, #4
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80063ea:	4b9b      	ldr	r3, [pc, #620]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ee:	08db      	lsrs	r3, r3, #3
 80063f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	fb02 f303 	mul.w	r3, r2, r3
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006402:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b03      	cmp	r3, #3
 800640a:	d062      	beq.n	80064d2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2b03      	cmp	r3, #3
 8006410:	f200 8081 	bhi.w	8006516 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d024      	beq.n	8006464 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b02      	cmp	r3, #2
 800641e:	d17a      	bne.n	8006516 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800665c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800642e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006432:	4b89      	ldr	r3, [pc, #548]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006442:	ed97 6a02 	vldr	s12, [r7, #8]
 8006446:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006660 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800644a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800644e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006456:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800645a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006462:	e08f      	b.n	8006584 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006464:	4b7c      	ldr	r3, [pc, #496]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006470:	4b79      	ldr	r3, [pc, #484]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	0f1b      	lsrs	r3, r3, #28
 8006476:	f003 030f 	and.w	r3, r3, #15
 800647a:	e006      	b.n	800648a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800647c:	4b76      	ldr	r3, [pc, #472]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800647e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006482:	041b      	lsls	r3, r3, #16
 8006484:	0f1b      	lsrs	r3, r3, #28
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	4a76      	ldr	r2, [pc, #472]	@ (8006664 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800648c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006490:	ee07 3a90 	vmov	s15, r3
 8006494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	ee07 3a90 	vmov	s15, r3
 80064ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80064b4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006660 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80064b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80064c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064d0:	e058      	b.n	8006584 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	ee07 3a90 	vmov	s15, r3
 80064d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064dc:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006668 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 80064e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e4:	4b5c      	ldr	r3, [pc, #368]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80064e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ec:	ee07 3a90 	vmov	s15, r3
 80064f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80064f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80064f8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006660 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80064fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006500:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006504:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006508:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800650c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006510:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006514:	e036      	b.n	8006584 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006516:	4b50      	ldr	r3, [pc, #320]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006522:	4b4d      	ldr	r3, [pc, #308]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	0f1b      	lsrs	r3, r3, #28
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	e006      	b.n	800653c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800652e:	4b4a      	ldr	r3, [pc, #296]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006534:	041b      	lsls	r3, r3, #16
 8006536:	0f1b      	lsrs	r3, r3, #28
 8006538:	f003 030f 	and.w	r3, r3, #15
 800653c:	4a49      	ldr	r2, [pc, #292]	@ (8006664 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800653e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	ee07 3a90 	vmov	s15, r3
 8006550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006554:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006562:	ed97 6a02 	vldr	s12, [r7, #8]
 8006566:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006660 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800656a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006576:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800657a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006582:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006584:	4b34      	ldr	r3, [pc, #208]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d017      	beq.n	80065c0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006590:	4b31      	ldr	r3, [pc, #196]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006594:	0a5b      	lsrs	r3, r3, #9
 8006596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80065a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065a6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80065aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80065ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065b6:	ee17 2a90 	vmov	r2, s15
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	e002      	b.n	80065c6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80065c6:	4b24      	ldr	r3, [pc, #144]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80065c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d017      	beq.n	8006602 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80065d2:	4b21      	ldr	r3, [pc, #132]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80065d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065d6:	0c1b      	lsrs	r3, r3, #16
 80065d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065dc:	ee07 3a90 	vmov	s15, r3
 80065e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80065e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065e8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80065ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80065f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065f8:	ee17 2a90 	vmov	r2, s15
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	605a      	str	r2, [r3, #4]
 8006600:	e002      	b.n	8006608 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006608:	4b13      	ldr	r3, [pc, #76]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800660a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d017      	beq.n	8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006614:	4b10      	ldr	r3, [pc, #64]	@ (8006658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006618:	0e1b      	lsrs	r3, r3, #24
 800661a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006626:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800662a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800662e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800663a:	ee17 2a90 	vmov	r2, s15
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006642:	e002      	b.n	800664a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	609a      	str	r2, [r3, #8]
}
 800664a:	bf00      	nop
 800664c:	3724      	adds	r7, #36	@ 0x24
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	46020c00 	.word	0x46020c00
 800665c:	4b742400 	.word	0x4b742400
 8006660:	46000000 	.word	0x46000000
 8006664:	0800eb34 	.word	0x0800eb34
 8006668:	4af42400 	.word	0x4af42400

0800666c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800666c:	b480      	push	{r7}
 800666e:	b089      	sub	sp, #36	@ 0x24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006674:	4ba6      	ldr	r3, [pc, #664]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800667c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800667e:	4ba4      	ldr	r3, [pc, #656]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006682:	f003 0303 	and.w	r3, r3, #3
 8006686:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006688:	4ba1      	ldr	r3, [pc, #644]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800668a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668c:	0a1b      	lsrs	r3, r3, #8
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	3301      	adds	r3, #1
 8006694:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006696:	4b9e      	ldr	r3, [pc, #632]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669a:	091b      	lsrs	r3, r3, #4
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80066a2:	4b9b      	ldr	r3, [pc, #620]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80066a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a6:	08db      	lsrs	r3, r3, #3
 80066a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	fb02 f303 	mul.w	r3, r2, r3
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ba:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d062      	beq.n	800678a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	f200 8081 	bhi.w	80067ce <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d024      	beq.n	800671c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d17a      	bne.n	80067ce <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	ee07 3a90 	vmov	s15, r3
 80066de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006914 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80066e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ea:	4b89      	ldr	r3, [pc, #548]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80066ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f2:	ee07 3a90 	vmov	s15, r3
 80066f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80066fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80066fe:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006702:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006706:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800670a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800670e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006716:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800671a:	e08f      	b.n	800683c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800671c:	4b7c      	ldr	r3, [pc, #496]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d005      	beq.n	8006734 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006728:	4b79      	ldr	r3, [pc, #484]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	0f1b      	lsrs	r3, r3, #28
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	e006      	b.n	8006742 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006734:	4b76      	ldr	r3, [pc, #472]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	0f1b      	lsrs	r3, r3, #28
 800673e:	f003 030f 	and.w	r3, r3, #15
 8006742:	4a76      	ldr	r2, [pc, #472]	@ (800691c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006748:	ee07 3a90 	vmov	s15, r3
 800674c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	ee07 3a90 	vmov	s15, r3
 8006764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006768:	ed97 6a02 	vldr	s12, [r7, #8]
 800676c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006778:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800677c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006784:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006788:	e058      	b.n	800683c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	ee07 3a90 	vmov	s15, r3
 8006790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006794:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006920 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 8006798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800679c:	4b5c      	ldr	r3, [pc, #368]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800679e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a4:	ee07 3a90 	vmov	s15, r3
 80067a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80067ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80067b0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80067b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80067b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80067bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80067c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067cc:	e036      	b.n	800683c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80067ce:	4b50      	ldr	r3, [pc, #320]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d005      	beq.n	80067e6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80067da:	4b4d      	ldr	r3, [pc, #308]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	0f1b      	lsrs	r3, r3, #28
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	e006      	b.n	80067f4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80067e6:	4b4a      	ldr	r3, [pc, #296]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80067e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067ec:	041b      	lsls	r3, r3, #16
 80067ee:	0f1b      	lsrs	r3, r3, #28
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	4a49      	ldr	r2, [pc, #292]	@ (800691c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80067f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	ee07 3a90 	vmov	s15, r3
 8006808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	ee07 3a90 	vmov	s15, r3
 8006816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800681a:	ed97 6a02 	vldr	s12, [r7, #8]
 800681e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800682a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800682e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006836:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800683a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800683c:	4b34      	ldr	r3, [pc, #208]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800683e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d017      	beq.n	8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006848:	4b31      	ldr	r3, [pc, #196]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800684a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684c:	0a5b      	lsrs	r3, r3, #9
 800684e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800685a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800685e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006862:	edd7 6a07 	vldr	s13, [r7, #28]
 8006866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800686a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800686e:	ee17 2a90 	vmov	r2, s15
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	e002      	b.n	800687e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800687e:	4b24      	ldr	r3, [pc, #144]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d017      	beq.n	80068ba <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800688a:	4b21      	ldr	r3, [pc, #132]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800688c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800688e:	0c1b      	lsrs	r3, r3, #16
 8006890:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006894:	ee07 3a90 	vmov	s15, r3
 8006898:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800689c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068a0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80068a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80068a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b0:	ee17 2a90 	vmov	r2, s15
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	605a      	str	r2, [r3, #4]
 80068b8:	e002      	b.n	80068c0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80068c0:	4b13      	ldr	r3, [pc, #76]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80068c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d017      	beq.n	80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80068cc:	4b10      	ldr	r3, [pc, #64]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80068ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d0:	0e1b      	lsrs	r3, r3, #24
 80068d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068d6:	ee07 3a90 	vmov	s15, r3
 80068da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80068de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068e2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80068e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80068ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068f2:	ee17 2a90 	vmov	r2, s15
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80068fa:	e002      	b.n	8006902 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	609a      	str	r2, [r3, #8]
}
 8006902:	bf00      	nop
 8006904:	3724      	adds	r7, #36	@ 0x24
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	46020c00 	.word	0x46020c00
 8006914:	4b742400 	.word	0x4b742400
 8006918:	46000000 	.word	0x46000000
 800691c:	0800eb34 	.word	0x0800eb34
 8006920:	4af42400 	.word	0x4af42400

08006924 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006924:	b480      	push	{r7}
 8006926:	b089      	sub	sp, #36	@ 0x24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800692c:	4ba6      	ldr	r3, [pc, #664]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800692e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006934:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006936:	4ba4      	ldr	r3, [pc, #656]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006940:	4ba1      	ldr	r3, [pc, #644]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006944:	0a1b      	lsrs	r3, r3, #8
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	3301      	adds	r3, #1
 800694c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800694e:	4b9e      	ldr	r3, [pc, #632]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006952:	091b      	lsrs	r3, r3, #4
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800695a:	4b9b      	ldr	r3, [pc, #620]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800695c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800695e:	08db      	lsrs	r3, r3, #3
 8006960:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	fb02 f303 	mul.w	r3, r2, r3
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006972:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b03      	cmp	r3, #3
 800697a:	d062      	beq.n	8006a42 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2b03      	cmp	r3, #3
 8006980:	f200 8081 	bhi.w	8006a86 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d024      	beq.n	80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b02      	cmp	r3, #2
 800698e:	d17a      	bne.n	8006a86 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	ee07 3a90 	vmov	s15, r3
 8006996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800699e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a2:	4b89      	ldr	r3, [pc, #548]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80069b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80069b6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80069ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80069be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80069c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80069ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ce:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80069d2:	e08f      	b.n	8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80069d4:	4b7c      	ldr	r3, [pc, #496]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80069e0:	4b79      	ldr	r3, [pc, #484]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	0f1b      	lsrs	r3, r3, #28
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	e006      	b.n	80069fa <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80069ec:	4b76      	ldr	r3, [pc, #472]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069f2:	041b      	lsls	r3, r3, #16
 80069f4:	0f1b      	lsrs	r3, r3, #28
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	4a76      	ldr	r2, [pc, #472]	@ (8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80069fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a00:	ee07 3a90 	vmov	s15, r3
 8006a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	ee07 3a90 	vmov	s15, r3
 8006a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	ee07 3a90 	vmov	s15, r3
 8006a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a20:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a24:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006a28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a34:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a40:	e058      	b.n	8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	ee07 3a90 	vmov	s15, r3
 8006a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4c:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 8006a50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a54:	4b5c      	ldr	r3, [pc, #368]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5c:	ee07 3a90 	vmov	s15, r3
 8006a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a64:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a68:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006a6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006a70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a84:	e036      	b.n	8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006a86:	4b50      	ldr	r3, [pc, #320]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d005      	beq.n	8006a9e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006a92:	4b4d      	ldr	r3, [pc, #308]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	0f1b      	lsrs	r3, r3, #28
 8006a98:	f003 030f 	and.w	r3, r3, #15
 8006a9c:	e006      	b.n	8006aac <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006aa4:	041b      	lsls	r3, r3, #16
 8006aa6:	0f1b      	lsrs	r3, r3, #28
 8006aa8:	f003 030f 	and.w	r3, r3, #15
 8006aac:	4a49      	ldr	r2, [pc, #292]	@ (8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	ee07 3a90 	vmov	s15, r3
 8006ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ad6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006af2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006af4:	4b34      	ldr	r3, [pc, #208]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d017      	beq.n	8006b30 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b00:	4b31      	ldr	r3, [pc, #196]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b04:	0a5b      	lsrs	r3, r3, #9
 8006b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006b12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b16:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b26:	ee17 2a90 	vmov	r2, s15
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	e002      	b.n	8006b36 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006b36:	4b24      	ldr	r3, [pc, #144]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d017      	beq.n	8006b72 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b42:	4b21      	ldr	r3, [pc, #132]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b46:	0c1b      	lsrs	r3, r3, #16
 8006b48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b4c:	ee07 3a90 	vmov	s15, r3
 8006b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006b54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b58:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b68:	ee17 2a90 	vmov	r2, s15
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	605a      	str	r2, [r3, #4]
 8006b70:	e002      	b.n	8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006b78:	4b13      	ldr	r3, [pc, #76]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d017      	beq.n	8006bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b84:	4b10      	ldr	r3, [pc, #64]	@ (8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b88:	0e1b      	lsrs	r3, r3, #24
 8006b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006b96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006baa:	ee17 2a90 	vmov	r2, s15
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006bb2:	e002      	b.n	8006bba <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	609a      	str	r2, [r3, #8]
}
 8006bba:	bf00      	nop
 8006bbc:	3724      	adds	r7, #36	@ 0x24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	46020c00 	.word	0x46020c00
 8006bcc:	4b742400 	.word	0x4b742400
 8006bd0:	46000000 	.word	0x46000000
 8006bd4:	0800eb34 	.word	0x0800eb34
 8006bd8:	4af42400 	.word	0x4af42400

08006bdc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08e      	sub	sp, #56	@ 0x38
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bea:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006bee:	430b      	orrs	r3, r1
 8006bf0:	d145      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006bf2:	4ba7      	ldr	r3, [pc, #668]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bfc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006bfe:	4ba4      	ldr	r3, [pc, #656]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d108      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c12:	d104      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006c14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c1a:	f001 bb35 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006c1e:	4b9c      	ldr	r3, [pc, #624]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c2c:	d114      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c34:	d110      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c36:	4b96      	ldr	r3, [pc, #600]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c44:	d103      	bne.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006c46:	23fa      	movs	r3, #250	@ 0xfa
 8006c48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c4a:	f001 bb1d 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c4e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c52:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c54:	f001 bb18 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006c58:	4b8d      	ldr	r3, [pc, #564]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c64:	d107      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c6c:	d103      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006c6e:	4b89      	ldr	r3, [pc, #548]	@ (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c72:	f001 bb09 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c7a:	f001 bb05 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c82:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006c86:	430b      	orrs	r3, r1
 8006c88:	d151      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006c8a:	4b81      	ldr	r3, [pc, #516]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c90:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006c94:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c98:	2b80      	cmp	r3, #128	@ 0x80
 8006c9a:	d035      	beq.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9e:	2b80      	cmp	r3, #128	@ 0x80
 8006ca0:	d841      	bhi.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	2b60      	cmp	r3, #96	@ 0x60
 8006ca6:	d02a      	beq.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006caa:	2b60      	cmp	r3, #96	@ 0x60
 8006cac:	d83b      	bhi.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	2b40      	cmp	r3, #64	@ 0x40
 8006cb2:	d009      	beq.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb6:	2b40      	cmp	r3, #64	@ 0x40
 8006cb8:	d835      	bhi.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00c      	beq.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	d012      	beq.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006cc6:	e02e      	b.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff fb71 	bl	80063b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cd6:	f001 bad7 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cda:	f107 0318 	add.w	r3, r7, #24
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7ff fcc4 	bl	800666c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ce8:	f001 bace 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cec:	f107 030c 	add.w	r3, r7, #12
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fe17 	bl	8006924 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cfa:	f001 bac5 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006cfe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006d02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d04:	f001 bac0 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d08:	4b61      	ldr	r3, [pc, #388]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d14:	d103      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006d16:	4b60      	ldr	r3, [pc, #384]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006d18:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d1a:	f001 bab5 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d22:	f001 bab1 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :
      {
        frequency = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d2a:	f001 baad 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006d2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d32:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006d36:	430b      	orrs	r3, r1
 8006d38:	d158      	bne.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006d3a:	4b55      	ldr	r3, [pc, #340]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006d3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d44:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d4c:	d03b      	beq.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d54:	d846      	bhi.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d5c:	d02e      	beq.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d64:	d83e      	bhi.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d6c:	d00b      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d74:	d836      	bhi.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00d      	beq.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d82:	d012      	beq.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006d84:	e02e      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7ff fb12 	bl	80063b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d94:	f001 ba78 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d98:	f107 0318 	add.w	r3, r7, #24
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7ff fc65 	bl	800666c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006da6:	f001 ba6f 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006daa:	f107 030c 	add.w	r3, r7, #12
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff fdb8 	bl	8006924 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006db8:	f001 ba66 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006dbc:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006dc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dc2:	f001 ba61 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006dc6:	4b32      	ldr	r3, [pc, #200]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dd2:	d103      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006dd4:	4b30      	ldr	r3, [pc, #192]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006dd6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006dd8:	f001 ba56 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006de0:	f001 ba52 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006de8:	f001 ba4e 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006df0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006df4:	430b      	orrs	r3, r1
 8006df6:	d126      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006df8:	4b25      	ldr	r3, [pc, #148]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006dfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006dfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e02:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006e04:	4b22      	ldr	r3, [pc, #136]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e10:	d106      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d103      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006e18:	4b1f      	ldr	r3, [pc, #124]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e1c:	f001 ba34 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006e20:	4b1b      	ldr	r3, [pc, #108]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e2c:	d107      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e34:	d103      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006e36:	4b19      	ldr	r3, [pc, #100]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e3a:	f001 ba25 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e42:	f001 ba21 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006e46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e4a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006e4e:	430b      	orrs	r3, r1
 8006e50:	d16e      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006e52:	4b0f      	ldr	r3, [pc, #60]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e58:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006e5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e60:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006e64:	d03d      	beq.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e68:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006e6c:	d85c      	bhi.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e74:	d014      	beq.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e7c:	d854      	bhi.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01f      	beq.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e8a:	d012      	beq.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006e8c:	e04c      	b.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006e8e:	bf00      	nop
 8006e90:	46020c00 	.word	0x46020c00
 8006e94:	0003d090 	.word	0x0003d090
 8006e98:	00f42400 	.word	0x00f42400
 8006e9c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7ff fa85 	bl	80063b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006eae:	f001 b9eb 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eb2:	f107 0318 	add.w	r3, r7, #24
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff fbd8 	bl	800666c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ec0:	f001 b9e2 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006ec4:	4ba7      	ldr	r3, [pc, #668]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ed0:	d103      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006ed2:	4ba5      	ldr	r3, [pc, #660]	@ (8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ed4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ed6:	f001 b9d7 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ede:	f001 b9d3 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ee2:	4ba0      	ldr	r3, [pc, #640]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0320 	and.w	r3, r3, #32
 8006eea:	2b20      	cmp	r3, #32
 8006eec:	d118      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006eee:	4b9d      	ldr	r3, [pc, #628]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d005      	beq.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006efa:	4b9a      	ldr	r3, [pc, #616]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	0e1b      	lsrs	r3, r3, #24
 8006f00:	f003 030f 	and.w	r3, r3, #15
 8006f04:	e006      	b.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006f06:	4b97      	ldr	r3, [pc, #604]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f0c:	041b      	lsls	r3, r3, #16
 8006f0e:	0e1b      	lsrs	r3, r3, #24
 8006f10:	f003 030f 	and.w	r3, r3, #15
 8006f14:	4a95      	ldr	r2, [pc, #596]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f1a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f1c:	f001 b9b4 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f24:	f001 b9b0 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f2c:	f001 b9ac 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f34:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	d17f      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006f3c:	4b89      	ldr	r3, [pc, #548]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f46:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d165      	bne.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006f4e:	4b85      	ldr	r3, [pc, #532]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f54:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006f58:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006f60:	d034      	beq.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f64:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006f68:	d853      	bhi.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f70:	d00b      	beq.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f78:	d84b      	bhi.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d016      	beq.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f86:	d009      	beq.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006f88:	e043      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7ff fa10 	bl	80063b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f96:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006f98:	f001 b976 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f9c:	f107 0318 	add.w	r3, r7, #24
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7ff fb63 	bl	800666c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006faa:	f001 b96d 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006fae:	4b6d      	ldr	r3, [pc, #436]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fba:	d103      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006fbc:	4b6a      	ldr	r3, [pc, #424]	@ (8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fbe:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006fc0:	f001 b962 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006fc8:	f001 b95e 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fcc:	4b65      	ldr	r3, [pc, #404]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0320 	and.w	r3, r3, #32
 8006fd4:	2b20      	cmp	r3, #32
 8006fd6:	d118      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fd8:	4b62      	ldr	r3, [pc, #392]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006fe4:	4b5f      	ldr	r3, [pc, #380]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	0e1b      	lsrs	r3, r3, #24
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	e006      	b.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006ff0:	4b5c      	ldr	r3, [pc, #368]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ff6:	041b      	lsls	r3, r3, #16
 8006ff8:	0e1b      	lsrs	r3, r3, #24
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	4a5b      	ldr	r2, [pc, #364]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007004:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007006:	f001 b93f 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800700e:	f001 b93b 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        default :
        {
          frequency = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007016:	f001 b937 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007020:	d108      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff f9c4 	bl	80063b4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007030:	f001 b92a 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else
    {
      frequency = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	637b      	str	r3, [r7, #52]	@ 0x34
 8007038:	f001 b926 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800703c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007040:	1e51      	subs	r1, r2, #1
 8007042:	430b      	orrs	r3, r1
 8007044:	d136      	bne.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007046:	4b47      	ldr	r3, [pc, #284]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800704c:	f003 0303 	and.w	r3, r3, #3
 8007050:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007054:	2b00      	cmp	r3, #0
 8007056:	d104      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007058:	f7fe fa42 	bl	80054e0 <HAL_RCC_GetPCLK2Freq>
 800705c:	6378      	str	r0, [r7, #52]	@ 0x34
 800705e:	f001 b913 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007064:	2b01      	cmp	r3, #1
 8007066:	d104      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007068:	f7fe f906 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 800706c:	6378      	str	r0, [r7, #52]	@ 0x34
 800706e:	f001 b90b 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007072:	4b3c      	ldr	r3, [pc, #240]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800707a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800707e:	d106      	bne.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	2b02      	cmp	r3, #2
 8007084:	d103      	bne.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8007086:	4b3a      	ldr	r3, [pc, #232]	@ (8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007088:	637b      	str	r3, [r7, #52]	@ 0x34
 800708a:	f001 b8fd 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800708e:	4b35      	ldr	r3, [pc, #212]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b02      	cmp	r3, #2
 800709a:	d107      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800709c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d104      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80070a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a8:	f001 b8ee 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80070b0:	f001 b8ea 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80070b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b8:	1e91      	subs	r1, r2, #2
 80070ba:	430b      	orrs	r3, r1
 80070bc:	d136      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80070be:	4b29      	ldr	r3, [pc, #164]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80070c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070c4:	f003 030c 	and.w	r3, r3, #12
 80070c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80070d0:	f7fe f9f2 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 80070d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80070d6:	f001 b8d7 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d104      	bne.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070e0:	f7fe f8ca 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 80070e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80070e6:	f001 b8cf 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80070ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070f6:	d106      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80070f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d103      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80070fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007100:	637b      	str	r3, [r7, #52]	@ 0x34
 8007102:	f001 b8c1 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007106:	4b17      	ldr	r3, [pc, #92]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b02      	cmp	r3, #2
 8007112:	d107      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	2b0c      	cmp	r3, #12
 8007118:	d104      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800711a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800711e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007120:	f001 b8b2 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	637b      	str	r3, [r7, #52]	@ 0x34
 8007128:	f001 b8ae 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800712c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007130:	1f11      	subs	r1, r2, #4
 8007132:	430b      	orrs	r3, r1
 8007134:	d13f      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007136:	4b0b      	ldr	r3, [pc, #44]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800713c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007140:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007144:	2b00      	cmp	r3, #0
 8007146:	d104      	bne.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007148:	f7fe f9b6 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 800714c:	6378      	str	r0, [r7, #52]	@ 0x34
 800714e:	f001 b89b 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007154:	2b10      	cmp	r3, #16
 8007156:	d10d      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007158:	f7fe f88e 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 800715c:	6378      	str	r0, [r7, #52]	@ 0x34
 800715e:	f001 b893 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8007162:	bf00      	nop
 8007164:	46020c00 	.word	0x46020c00
 8007168:	02dc6c00 	.word	0x02dc6c00
 800716c:	0800eb34 	.word	0x0800eb34
 8007170:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007174:	4ba8      	ldr	r3, [pc, #672]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800717c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007180:	d106      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8007182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007184:	2b20      	cmp	r3, #32
 8007186:	d103      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8007188:	4ba4      	ldr	r3, [pc, #656]	@ (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800718a:	637b      	str	r3, [r7, #52]	@ 0x34
 800718c:	f001 b87c 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007190:	4ba1      	ldr	r3, [pc, #644]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b02      	cmp	r3, #2
 800719c:	d107      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800719e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a0:	2b30      	cmp	r3, #48	@ 0x30
 80071a2:	d104      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80071a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80071aa:	f001 b86d 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071b2:	f001 b869 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80071b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ba:	f1a2 0108 	sub.w	r1, r2, #8
 80071be:	430b      	orrs	r3, r1
 80071c0:	d136      	bne.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80071c2:	4b95      	ldr	r3, [pc, #596]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80071c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071c8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071cc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80071d4:	f7fe f970 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 80071d8:	6378      	str	r0, [r7, #52]	@ 0x34
 80071da:	f001 b855 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80071de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e0:	2b40      	cmp	r3, #64	@ 0x40
 80071e2:	d104      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80071e4:	f7fe f848 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 80071e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80071ea:	f001 b84d 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80071ee:	4b8a      	ldr	r3, [pc, #552]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071fa:	d106      	bne.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	2b80      	cmp	r3, #128	@ 0x80
 8007200:	d103      	bne.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8007202:	4b86      	ldr	r3, [pc, #536]	@ (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007204:	637b      	str	r3, [r7, #52]	@ 0x34
 8007206:	f001 b83f 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800720a:	4b83      	ldr	r3, [pc, #524]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800720c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b02      	cmp	r3, #2
 8007216:	d107      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721a:	2bc0      	cmp	r3, #192	@ 0xc0
 800721c:	d104      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800721e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007222:	637b      	str	r3, [r7, #52]	@ 0x34
 8007224:	f001 b830 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	637b      	str	r3, [r7, #52]	@ 0x34
 800722c:	f001 b82c 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007234:	f1a2 0110 	sub.w	r1, r2, #16
 8007238:	430b      	orrs	r3, r1
 800723a:	d139      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800723c:	4b76      	ldr	r3, [pc, #472]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800723e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007246:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800724e:	f7fe f933 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8007252:	6378      	str	r0, [r7, #52]	@ 0x34
 8007254:	f001 b818 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800725e:	d104      	bne.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007260:	f7fe f80a 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8007264:	6378      	str	r0, [r7, #52]	@ 0x34
 8007266:	f001 b80f 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800726a:	4b6b      	ldr	r3, [pc, #428]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007276:	d107      	bne.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8007278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800727e:	d103      	bne.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8007280:	4b66      	ldr	r3, [pc, #408]	@ (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007282:	637b      	str	r3, [r7, #52]	@ 0x34
 8007284:	f001 b800 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007288:	4b63      	ldr	r3, [pc, #396]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800728a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b02      	cmp	r3, #2
 8007294:	d108      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007298:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800729c:	d104      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800729e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072a4:	f000 bff0 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ac:	f000 bfec 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 80072b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b4:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80072b8:	430b      	orrs	r3, r1
 80072ba:	d139      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80072bc:	4b56      	ldr	r3, [pc, #344]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80072be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80072c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80072c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80072c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d104      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80072ce:	f7fe f8f3 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 80072d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80072d4:	f000 bfd8 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 80072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072de:	d104      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80072e0:	f7fd ffca 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 80072e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80072e6:	f000 bfcf 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80072ea:	4b4b      	ldr	r3, [pc, #300]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072f6:	d107      	bne.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80072f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072fe:	d103      	bne.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8007300:	4b46      	ldr	r3, [pc, #280]	@ (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007302:	637b      	str	r3, [r7, #52]	@ 0x34
 8007304:	f000 bfc0 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007308:	4b43      	ldr	r3, [pc, #268]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800730a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b02      	cmp	r3, #2
 8007314:	d108      	bne.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8007316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007318:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800731c:	d104      	bne.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800731e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007322:	637b      	str	r3, [r7, #52]	@ 0x34
 8007324:	f000 bfb0 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	637b      	str	r3, [r7, #52]	@ 0x34
 800732c:	f000 bfac 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007334:	f1a2 0120 	sub.w	r1, r2, #32
 8007338:	430b      	orrs	r3, r1
 800733a:	d158      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800733c:	4b36      	ldr	r3, [pc, #216]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800733e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734a:	2b00      	cmp	r3, #0
 800734c:	d104      	bne.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800734e:	f7fe f8db 	bl	8005508 <HAL_RCC_GetPCLK3Freq>
 8007352:	6378      	str	r0, [r7, #52]	@ 0x34
 8007354:	f000 bf98 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735a:	2b01      	cmp	r3, #1
 800735c:	d104      	bne.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800735e:	f7fd ff8b 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8007362:	6378      	str	r0, [r7, #52]	@ 0x34
 8007364:	f000 bf90 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007368:	4b2b      	ldr	r3, [pc, #172]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007374:	d106      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8007376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007378:	2b02      	cmp	r3, #2
 800737a:	d103      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800737c:	4b27      	ldr	r3, [pc, #156]	@ (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800737e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007380:	f000 bf82 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007384:	4b24      	ldr	r3, [pc, #144]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007386:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b02      	cmp	r3, #2
 8007390:	d107      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007394:	2b03      	cmp	r3, #3
 8007396:	d104      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8007398:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800739c:	637b      	str	r3, [r7, #52]	@ 0x34
 800739e:	f000 bf73 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80073a2:	4b1d      	ldr	r3, [pc, #116]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0320 	and.w	r3, r3, #32
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	d11b      	bne.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80073ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d118      	bne.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073b4:	4b18      	ldr	r3, [pc, #96]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 80073c0:	4b15      	ldr	r3, [pc, #84]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	0e1b      	lsrs	r3, r3, #24
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	e006      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 80073cc:	4b12      	ldr	r3, [pc, #72]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80073ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073d2:	041b      	lsls	r3, r3, #16
 80073d4:	0e1b      	lsrs	r3, r3, #24
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	4a11      	ldr	r2, [pc, #68]	@ (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80073dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e2:	f000 bf51 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ea:	f000 bf4d 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80073ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073f2:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80073f6:	430b      	orrs	r3, r1
 80073f8:	d172      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80073fa:	4b07      	ldr	r3, [pc, #28]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80073fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007400:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007404:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800740c:	d10a      	bne.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800740e:	f7fd ff33 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8007412:	6378      	str	r0, [r7, #52]	@ 0x34
 8007414:	f000 bf38 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8007418:	46020c00 	.word	0x46020c00
 800741c:	00f42400 	.word	0x00f42400
 8007420:	0800eb34 	.word	0x0800eb34
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800742a:	d108      	bne.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800742c:	f107 0318 	add.w	r3, r7, #24
 8007430:	4618      	mov	r0, r3
 8007432:	f7ff f91b 	bl	800666c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	637b      	str	r3, [r7, #52]	@ 0x34
 800743a:	f000 bf25 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	2b00      	cmp	r3, #0
 8007442:	d104      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007444:	f7fe f81e 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 8007448:	6378      	str	r0, [r7, #52]	@ 0x34
 800744a:	f000 bf1d 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007450:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007454:	d122      	bne.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007456:	4bb0      	ldr	r3, [pc, #704]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b20      	cmp	r3, #32
 8007460:	d118      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007462:	4bad      	ldr	r3, [pc, #692]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d005      	beq.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800746e:	4baa      	ldr	r3, [pc, #680]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	0e1b      	lsrs	r3, r3, #24
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	e006      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800747a:	4ba7      	ldr	r3, [pc, #668]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800747c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007480:	041b      	lsls	r3, r3, #16
 8007482:	0e1b      	lsrs	r3, r3, #24
 8007484:	f003 030f 	and.w	r3, r3, #15
 8007488:	4aa4      	ldr	r2, [pc, #656]	@ (800771c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800748a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800748e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007490:	f000 befa 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	637b      	str	r3, [r7, #52]	@ 0x34
 8007498:	f000 bef6 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800749c:	4b9e      	ldr	r3, [pc, #632]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074a8:	d107      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80074aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074b0:	d103      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 80074b2:	4b9b      	ldr	r3, [pc, #620]	@ (8007720 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 80074b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b6:	f000 bee7 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80074ba:	4b97      	ldr	r3, [pc, #604]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074c6:	d107      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 80074c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074ce:	d103      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 80074d0:	4b94      	ldr	r3, [pc, #592]	@ (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 80074d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d4:	f000 bed8 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	637b      	str	r3, [r7, #52]	@ 0x34
 80074dc:	f000 bed4 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80074e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074e4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80074e8:	430b      	orrs	r3, r1
 80074ea:	d158      	bne.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80074ec:	4b8a      	ldr	r3, [pc, #552]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80074ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80074f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d84b      	bhi.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 80074fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8007500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007504:	0800753d 	.word	0x0800753d
 8007508:	08007519 	.word	0x08007519
 800750c:	0800752b 	.word	0x0800752b
 8007510:	08007547 	.word	0x08007547
 8007514:	08007551 	.word	0x08007551
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe ff49 	bl	80063b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007524:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007526:	f000 beaf 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800752a:	f107 030c 	add.w	r3, r7, #12
 800752e:	4618      	mov	r0, r3
 8007530:	f7ff f9f8 	bl	8006924 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007538:	f000 bea6 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800753c:	f7fd ffa2 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 8007540:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007542:	f000 bea1 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007546:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800754a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800754c:	f000 be9c 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007550:	4b71      	ldr	r3, [pc, #452]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b20      	cmp	r3, #32
 800755a:	d118      	bne.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800755c:	4b6e      	ldr	r3, [pc, #440]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d005      	beq.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007568:	4b6b      	ldr	r3, [pc, #428]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	0e1b      	lsrs	r3, r3, #24
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	e006      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007574:	4b68      	ldr	r3, [pc, #416]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800757a:	041b      	lsls	r3, r3, #16
 800757c:	0e1b      	lsrs	r3, r3, #24
 800757e:	f003 030f 	and.w	r3, r3, #15
 8007582:	4a66      	ldr	r2, [pc, #408]	@ (800771c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007588:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800758a:	f000 be7d 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007592:	f000 be79 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800759a:	f000 be75 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800759e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a2:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80075a6:	430b      	orrs	r3, r1
 80075a8:	d167      	bne.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80075aa:	4b5b      	ldr	r3, [pc, #364]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80075ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075b0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80075b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075bc:	d036      	beq.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075c4:	d855      	bhi.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80075c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075cc:	d029      	beq.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80075ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075d4:	d84d      	bhi.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80075d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075dc:	d013      	beq.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 80075de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075e4:	d845      	bhi.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d015      	beq.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 80075ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075f2:	d13e      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe fedb 	bl	80063b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007602:	f000 be41 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007606:	f107 030c 	add.w	r3, r7, #12
 800760a:	4618      	mov	r0, r3
 800760c:	f7ff f98a 	bl	8006924 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007614:	f000 be38 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007618:	f7fd ff34 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 800761c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800761e:	f000 be33 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007622:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007626:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007628:	f000 be2e 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800762c:	4b3a      	ldr	r3, [pc, #232]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0320 	and.w	r3, r3, #32
 8007634:	2b20      	cmp	r3, #32
 8007636:	d118      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007638:	4b37      	ldr	r3, [pc, #220]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8007644:	4b34      	ldr	r3, [pc, #208]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	0e1b      	lsrs	r3, r3, #24
 800764a:	f003 030f 	and.w	r3, r3, #15
 800764e:	e006      	b.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007650:	4b31      	ldr	r3, [pc, #196]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007656:	041b      	lsls	r3, r3, #16
 8007658:	0e1b      	lsrs	r3, r3, #24
 800765a:	f003 030f 	and.w	r3, r3, #15
 800765e:	4a2f      	ldr	r2, [pc, #188]	@ (800771c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007664:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007666:	f000 be0f 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800766e:	f000 be0b 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007672:	2300      	movs	r3, #0
 8007674:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007676:	f000 be07 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800767a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800767e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007682:	430b      	orrs	r3, r1
 8007684:	d154      	bne.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007686:	4b24      	ldr	r3, [pc, #144]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800768c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007690:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	2b00      	cmp	r3, #0
 8007696:	d104      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007698:	f7fd ff0e 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 800769c:	6378      	str	r0, [r7, #52]	@ 0x34
 800769e:	f000 bdf3 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076a8:	d104      	bne.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80076aa:	f7fd fde5 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 80076ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80076b0:	f000 bdea 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80076b4:	4b18      	ldr	r3, [pc, #96]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076c0:	d107      	bne.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 80076c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076c8:	d103      	bne.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 80076ca:	4b16      	ldr	r3, [pc, #88]	@ (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 80076cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ce:	f000 bddb 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80076d2:	4b11      	ldr	r3, [pc, #68]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0320 	and.w	r3, r3, #32
 80076da:	2b20      	cmp	r3, #32
 80076dc:	d124      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80076de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076e4:	d120      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 80076f2:	4b09      	ldr	r3, [pc, #36]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	0e1b      	lsrs	r3, r3, #24
 80076f8:	f003 030f 	and.w	r3, r3, #15
 80076fc:	e006      	b.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 80076fe:	4b06      	ldr	r3, [pc, #24]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007704:	041b      	lsls	r3, r3, #16
 8007706:	0e1b      	lsrs	r3, r3, #24
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	4a03      	ldr	r2, [pc, #12]	@ (800771c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800770e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007712:	637b      	str	r3, [r7, #52]	@ 0x34
 8007714:	f000 bdb8 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8007718:	46020c00 	.word	0x46020c00
 800771c:	0800eb34 	.word	0x0800eb34
 8007720:	007a1200 	.word	0x007a1200
 8007724:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	637b      	str	r3, [r7, #52]	@ 0x34
 800772c:	f000 bdac 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007730:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007734:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007738:	430b      	orrs	r3, r1
 800773a:	d14c      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800773c:	4ba8      	ldr	r3, [pc, #672]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800773e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007742:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007746:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774a:	2b00      	cmp	r3, #0
 800774c:	d104      	bne.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800774e:	f7fd feb3 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8007752:	6378      	str	r0, [r7, #52]	@ 0x34
 8007754:	f000 bd98 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800775e:	d104      	bne.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007760:	f7fd fd8a 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8007764:	6378      	str	r0, [r7, #52]	@ 0x34
 8007766:	f000 bd8f 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800776a:	4b9d      	ldr	r3, [pc, #628]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007776:	d107      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8007778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800777e:	d103      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
    {
      frequency = HSI_VALUE;
 8007780:	4b98      	ldr	r3, [pc, #608]	@ (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007782:	637b      	str	r3, [r7, #52]	@ 0x34
 8007784:	f000 bd80 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007788:	4b95      	ldr	r3, [pc, #596]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0320 	and.w	r3, r3, #32
 8007790:	2b20      	cmp	r3, #32
 8007792:	d11c      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 8007794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007796:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800779a:	d118      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800779c:	4b90      	ldr	r3, [pc, #576]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d005      	beq.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 80077a8:	4b8d      	ldr	r3, [pc, #564]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	0e1b      	lsrs	r3, r3, #24
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	e006      	b.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80077b4:	4b8a      	ldr	r3, [pc, #552]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80077b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077ba:	041b      	lsls	r3, r3, #16
 80077bc:	0e1b      	lsrs	r3, r3, #24
 80077be:	f003 030f 	and.w	r3, r3, #15
 80077c2:	4a89      	ldr	r2, [pc, #548]	@ (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 80077c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ca:	f000 bd5d 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077d2:	f000 bd59 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80077d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077da:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80077de:	430b      	orrs	r3, r1
 80077e0:	d158      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80077e2:	4b7f      	ldr	r3, [pc, #508]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80077e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077e8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80077ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80077f2:	d028      	beq.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
 80077f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80077f8:	d848      	bhi.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	2b80      	cmp	r3, #128	@ 0x80
 80077fe:	d00e      	beq.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8007800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007802:	2b80      	cmp	r3, #128	@ 0x80
 8007804:	d842      	bhi.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8007806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	2b40      	cmp	r3, #64	@ 0x40
 8007810:	d014      	beq.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
 8007812:	e03b      	b.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007814:	f7fd fe78 	bl	8005508 <HAL_RCC_GetPCLK3Freq>
 8007818:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800781a:	f000 bd35 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800781e:	4b70      	ldr	r3, [pc, #448]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800782a:	d103      	bne.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
        {
          frequency = HSI_VALUE;
 800782c:	4b6d      	ldr	r3, [pc, #436]	@ (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800782e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007830:	f000 bd2a 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007838:	f000 bd26 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800783c:	f7fd fd1c 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8007840:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007842:	f000 bd21 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007846:	4b66      	ldr	r3, [pc, #408]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b20      	cmp	r3, #32
 8007850:	d118      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007852:	4b63      	ldr	r3, [pc, #396]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d005      	beq.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 800785e:	4b60      	ldr	r3, [pc, #384]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	0e1b      	lsrs	r3, r3, #24
 8007864:	f003 030f 	and.w	r3, r3, #15
 8007868:	e006      	b.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xc9c>
 800786a:	4b5d      	ldr	r3, [pc, #372]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800786c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007870:	041b      	lsls	r3, r3, #16
 8007872:	0e1b      	lsrs	r3, r3, #24
 8007874:	f003 030f 	and.w	r3, r3, #15
 8007878:	4a5b      	ldr	r2, [pc, #364]	@ (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 800787a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800787e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007880:	f000 bd02 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007888:	f000 bcfe 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      default:
      {
        frequency = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007890:	f000 bcfa 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007898:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800789c:	430b      	orrs	r3, r1
 800789e:	d14c      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80078a0:	4b4f      	ldr	r3, [pc, #316]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80078a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80078aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80078ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d104      	bne.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80078b2:	f7fd fe01 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 80078b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80078b8:	f000 bce6 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80078bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078c2:	d104      	bne.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078c4:	f7fd fcd8 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 80078c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80078ca:	f000 bcdd 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80078ce:	4b44      	ldr	r3, [pc, #272]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078da:	d107      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 80078dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078e2:	d103      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
    {
      frequency = HSI_VALUE;
 80078e4:	4b3f      	ldr	r3, [pc, #252]	@ (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80078e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80078e8:	f000 bcce 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80078ec:	4b3c      	ldr	r3, [pc, #240]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0320 	and.w	r3, r3, #32
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	d11c      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 80078f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80078fe:	d118      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007900:	4b37      	ldr	r3, [pc, #220]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
 800790c:	4b34      	ldr	r3, [pc, #208]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	0e1b      	lsrs	r3, r3, #24
 8007912:	f003 030f 	and.w	r3, r3, #15
 8007916:	e006      	b.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
 8007918:	4b31      	ldr	r3, [pc, #196]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800791a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800791e:	041b      	lsls	r3, r3, #16
 8007920:	0e1b      	lsrs	r3, r3, #24
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	4a30      	ldr	r2, [pc, #192]	@ (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8007928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800792c:	637b      	str	r3, [r7, #52]	@ 0x34
 800792e:	f000 bcab 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007932:	2300      	movs	r3, #0
 8007934:	637b      	str	r3, [r7, #52]	@ 0x34
 8007936:	f000 bca7 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800793a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800793e:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 8007942:	430b      	orrs	r3, r1
 8007944:	d152      	bne.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8007946:	4b26      	ldr	r3, [pc, #152]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007948:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800794c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007950:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8007952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007954:	2b00      	cmp	r3, #0
 8007956:	d104      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0xd86>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007958:	f7fd fdae 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 800795c:	6378      	str	r0, [r7, #52]	@ 0x34
 800795e:	f000 bc93 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8007962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007968:	d104      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800796a:	f7fd fc85 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 800796e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007970:	f000 bc8a 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8007974:	4b1a      	ldr	r3, [pc, #104]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800797c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007980:	d107      	bne.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007988:	d103      	bne.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
    {
      frequency = HSI_VALUE;
 800798a:	4b16      	ldr	r3, [pc, #88]	@ (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800798c:	637b      	str	r3, [r7, #52]	@ 0x34
 800798e:	f000 bc7b 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8007992:	4b13      	ldr	r3, [pc, #76]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0320 	and.w	r3, r3, #32
 800799a:	2b20      	cmp	r3, #32
 800799c:	d11c      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 800799e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80079a4:	d118      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079a6:	4b0e      	ldr	r3, [pc, #56]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d005      	beq.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 80079b2:	4b0b      	ldr	r3, [pc, #44]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	0e1b      	lsrs	r3, r3, #24
 80079b8:	f003 030f 	and.w	r3, r3, #15
 80079bc:	e006      	b.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
 80079be:	4b08      	ldr	r3, [pc, #32]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80079c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079c4:	041b      	lsls	r3, r3, #16
 80079c6:	0e1b      	lsrs	r3, r3, #24
 80079c8:	f003 030f 	and.w	r3, r3, #15
 80079cc:	4a06      	ldr	r2, [pc, #24]	@ (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 80079ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079d4:	f000 bc58 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	637b      	str	r3, [r7, #52]	@ 0x34
 80079dc:	f000 bc54 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80079e0:	46020c00 	.word	0x46020c00
 80079e4:	00f42400 	.word	0x00f42400
 80079e8:	0800eb34 	.word	0x0800eb34
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 80079ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079f0:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 80079f4:	430b      	orrs	r3, r1
 80079f6:	d14a      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 80079f8:	4ba5      	ldr	r3, [pc, #660]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80079fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079fe:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007a02:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8007a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d104      	bne.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a0a:	f7fd fd55 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8007a0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a10:	f000 bc3a 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8007a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a1a:	d104      	bne.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a1c:	f7fd fc2c 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8007a20:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a22:	f000 bc31 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8007a26:	4b9a      	ldr	r3, [pc, #616]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a32:	d107      	bne.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
 8007a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a3a:	d103      	bne.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
    {
      frequency = HSI_VALUE;
 8007a3c:	4b95      	ldr	r3, [pc, #596]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a40:	f000 bc22 	b.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8007a44:	4b92      	ldr	r3, [pc, #584]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0320 	and.w	r3, r3, #32
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	d11b      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 8007a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a52:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007a56:	d117      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a58:	4b8d      	ldr	r3, [pc, #564]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d005      	beq.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8007a64:	4b8a      	ldr	r3, [pc, #552]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	0e1b      	lsrs	r3, r3, #24
 8007a6a:	f003 030f 	and.w	r3, r3, #15
 8007a6e:	e006      	b.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8007a70:	4b87      	ldr	r3, [pc, #540]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007a72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a76:	041b      	lsls	r3, r3, #16
 8007a78:	0e1b      	lsrs	r3, r3, #24
 8007a7a:	f003 030f 	and.w	r3, r3, #15
 8007a7e:	4a86      	ldr	r2, [pc, #536]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8007a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a86:	e3ff      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a8c:	e3fc      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a92:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007a96:	430b      	orrs	r3, r1
 8007a98:	d164      	bne.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007a9a:	4b7d      	ldr	r3, [pc, #500]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007aa0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aa4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d120      	bne.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007aac:	4b78      	ldr	r3, [pc, #480]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0320 	and.w	r3, r3, #32
 8007ab4:	2b20      	cmp	r3, #32
 8007ab6:	d117      	bne.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ab8:	4b75      	ldr	r3, [pc, #468]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d005      	beq.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8007ac4:	4b72      	ldr	r3, [pc, #456]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	0e1b      	lsrs	r3, r3, #24
 8007aca:	f003 030f 	and.w	r3, r3, #15
 8007ace:	e006      	b.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8007ad0:	4b6f      	ldr	r3, [pc, #444]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ad6:	041b      	lsls	r3, r3, #16
 8007ad8:	0e1b      	lsrs	r3, r3, #24
 8007ada:	f003 030f 	and.w	r3, r3, #15
 8007ade:	4a6e      	ldr	r2, [pc, #440]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8007ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae6:	e3cf      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aec:	e3cc      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007aee:	4b68      	ldr	r3, [pc, #416]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007af4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007af8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007afc:	d112      	bne.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 8007afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b04:	d10e      	bne.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b06:	4b62      	ldr	r3, [pc, #392]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b14:	d102      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 8007b16:	23fa      	movs	r3, #250	@ 0xfa
 8007b18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b1a:	e3b5      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8007b1c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007b20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b22:	e3b1      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007b24:	4b5a      	ldr	r3, [pc, #360]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b30:	d106      	bne.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 8007b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b38:	d102      	bne.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 8007b3a:	4b56      	ldr	r3, [pc, #344]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b3e:	e3a3      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007b40:	4b53      	ldr	r3, [pc, #332]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d107      	bne.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b54:	d103      	bne.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 8007b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b5c:	e394      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b62:	e391      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b68:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007b6c:	430b      	orrs	r3, r1
 8007b6e:	d164      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007b70:	4b47      	ldr	r3, [pc, #284]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007b72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b76:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b7a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d120      	bne.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b82:	4b43      	ldr	r3, [pc, #268]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	d117      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b8e:	4b40      	ldr	r3, [pc, #256]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d005      	beq.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 8007b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	0e1b      	lsrs	r3, r3, #24
 8007ba0:	f003 030f 	and.w	r3, r3, #15
 8007ba4:	e006      	b.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007ba8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007bac:	041b      	lsls	r3, r3, #16
 8007bae:	0e1b      	lsrs	r3, r3, #24
 8007bb0:	f003 030f 	and.w	r3, r3, #15
 8007bb4:	4a38      	ldr	r2, [pc, #224]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8007bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bbc:	e364      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bc2:	e361      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007bc4:	4b32      	ldr	r3, [pc, #200]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bd2:	d112      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8007bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bda:	d10e      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007bde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bea:	d102      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 8007bec:	23fa      	movs	r3, #250	@ 0xfa
 8007bee:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007bf0:	e34a      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8007bf2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007bf6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007bf8:	e346      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007bfa:	4b25      	ldr	r3, [pc, #148]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c06:	d106      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 8007c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c0e:	d102      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 8007c10:	4b20      	ldr	r3, [pc, #128]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c14:	e338      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007c16:	4b1e      	ldr	r3, [pc, #120]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d107      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 8007c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c2a:	d103      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 8007c2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c32:	e329      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c38:	e326      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c3e:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007c42:	430b      	orrs	r3, r1
 8007c44:	d14e      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007c46:	4b12      	ldr	r3, [pc, #72]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c4c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007c50:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d103      	bne.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c58:	f7fd fc2e 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8007c5c:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c5e:	e313      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007c60:	4b0b      	ldr	r3, [pc, #44]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c6e:	d119      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 8007c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c76:	d115      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c78:	4b05      	ldr	r3, [pc, #20]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c86:	d109      	bne.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 8007c88:	23fa      	movs	r3, #250	@ 0xfa
 8007c8a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c8c:	e2fc      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8007c8e:	bf00      	nop
 8007c90:	46020c00 	.word	0x46020c00
 8007c94:	00f42400 	.word	0x00f42400
 8007c98:	0800eb34 	.word	0x0800eb34
      }
      else
      {
        frequency = LSI_VALUE;
 8007c9c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007ca0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ca2:	e2f1      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007ca4:	4ba8      	ldr	r3, [pc, #672]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cb0:	d106      	bne.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007cb8:	d102      	bne.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 8007cba:	4ba4      	ldr	r3, [pc, #656]	@ (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cbe:	e2e3      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007cc0:	4ba1      	ldr	r3, [pc, #644]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d107      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007cd4:	d103      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 8007cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cdc:	e2d4      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ce2:	e2d1      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ce8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007cec:	430b      	orrs	r3, r1
 8007cee:	d12d      	bne.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007cf0:	4b95      	ldr	r3, [pc, #596]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cf6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007cfa:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007cfc:	4b92      	ldr	r3, [pc, #584]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d08:	d105      	bne.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d102      	bne.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 8007d10:	4b8f      	ldr	r3, [pc, #572]	@ (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 8007d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d14:	e2b8      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d1c:	d107      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe fb46 	bl	80063b4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d2c:	e2ac      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d34:	d107      	bne.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d36:	f107 0318 	add.w	r3, r7, #24
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fc96 	bl	800666c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d44:	e2a0      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d4a:	e29d      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d50:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007d54:	430b      	orrs	r3, r1
 8007d56:	d156      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007d58:	4b7b      	ldr	r3, [pc, #492]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d5e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007d62:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d6a:	d028      	beq.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d72:	d845      	bhi.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8007d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d7a:	d013      	beq.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d82:	d83d      	bhi.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8007d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d004      	beq.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d90:	d004      	beq.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007d92:	e035      	b.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007d94:	f7fd fba4 	bl	80054e0 <HAL_RCC_GetPCLK2Freq>
 8007d98:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007d9a:	e275      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007d9c:	f7fd fa6c 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8007da0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007da2:	e271      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007da4:	4b68      	ldr	r3, [pc, #416]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007db0:	d102      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 8007db2:	4b66      	ldr	r3, [pc, #408]	@ (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007db4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007db6:	e267      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007dbc:	e264      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007dbe:	4b62      	ldr	r3, [pc, #392]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	d117      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007dca:	4b5f      	ldr	r3, [pc, #380]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d005      	beq.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 8007dd6:	4b5c      	ldr	r3, [pc, #368]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	0e1b      	lsrs	r3, r3, #24
 8007ddc:	f003 030f 	and.w	r3, r3, #15
 8007de0:	e006      	b.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 8007de2:	4b59      	ldr	r3, [pc, #356]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007de4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007de8:	041b      	lsls	r3, r3, #16
 8007dea:	0e1b      	lsrs	r3, r3, #24
 8007dec:	f003 030f 	and.w	r3, r3, #15
 8007df0:	4a58      	ldr	r2, [pc, #352]	@ (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 8007df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007df6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007df8:	e246      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007dfe:	e243      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e04:	e240      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e0a:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007e0e:	430b      	orrs	r3, r1
 8007e10:	d156      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007e12:	4b4d      	ldr	r3, [pc, #308]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e1c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e24:	d028      	beq.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 8007e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e2c:	d845      	bhi.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e34:	d013      	beq.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 8007e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e3c:	d83d      	bhi.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d004      	beq.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 8007e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e4a:	d004      	beq.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 8007e4c:	e035      	b.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007e4e:	f7fd fb33 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8007e52:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007e54:	e218      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007e56:	f7fd fa0f 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8007e5a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007e5c:	e214      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e6a:	d102      	bne.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 8007e6c:	4b37      	ldr	r3, [pc, #220]	@ (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007e6e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e70:	e20a      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e76:	e207      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e78:	4b33      	ldr	r3, [pc, #204]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0320 	and.w	r3, r3, #32
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d117      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e84:	4b30      	ldr	r3, [pc, #192]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d005      	beq.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8007e90:	4b2d      	ldr	r3, [pc, #180]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	0e1b      	lsrs	r3, r3, #24
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	e006      	b.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8007e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ea2:	041b      	lsls	r3, r3, #16
 8007ea4:	0e1b      	lsrs	r3, r3, #24
 8007ea6:	f003 030f 	and.w	r3, r3, #15
 8007eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 8007eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eb0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007eb2:	e1e9      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007eb8:	e1e6      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ebe:	e1e3      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec4:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	d17e      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007ece:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ed2:	f003 0318 	and.w	r3, r3, #24
 8007ed6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eda:	2b18      	cmp	r3, #24
 8007edc:	d872      	bhi.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 8007ede:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 8007ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee4:	08007f59 	.word	0x08007f59
 8007ee8:	08007fc5 	.word	0x08007fc5
 8007eec:	08007fc5 	.word	0x08007fc5
 8007ef0:	08007fc5 	.word	0x08007fc5
 8007ef4:	08007fc5 	.word	0x08007fc5
 8007ef8:	08007fc5 	.word	0x08007fc5
 8007efc:	08007fc5 	.word	0x08007fc5
 8007f00:	08007fc5 	.word	0x08007fc5
 8007f04:	08007f61 	.word	0x08007f61
 8007f08:	08007fc5 	.word	0x08007fc5
 8007f0c:	08007fc5 	.word	0x08007fc5
 8007f10:	08007fc5 	.word	0x08007fc5
 8007f14:	08007fc5 	.word	0x08007fc5
 8007f18:	08007fc5 	.word	0x08007fc5
 8007f1c:	08007fc5 	.word	0x08007fc5
 8007f20:	08007fc5 	.word	0x08007fc5
 8007f24:	08007f69 	.word	0x08007f69
 8007f28:	08007fc5 	.word	0x08007fc5
 8007f2c:	08007fc5 	.word	0x08007fc5
 8007f30:	08007fc5 	.word	0x08007fc5
 8007f34:	08007fc5 	.word	0x08007fc5
 8007f38:	08007fc5 	.word	0x08007fc5
 8007f3c:	08007fc5 	.word	0x08007fc5
 8007f40:	08007fc5 	.word	0x08007fc5
 8007f44:	08007f83 	.word	0x08007f83
 8007f48:	46020c00 	.word	0x46020c00
 8007f4c:	00f42400 	.word	0x00f42400
 8007f50:	007a1200 	.word	0x007a1200
 8007f54:	0800eb34 	.word	0x0800eb34
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007f58:	f7fd fad6 	bl	8005508 <HAL_RCC_GetPCLK3Freq>
 8007f5c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007f5e:	e193      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007f60:	f7fd f98a 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8007f64:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007f66:	e18f      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f68:	4b9f      	ldr	r3, [pc, #636]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f74:	d102      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 8007f76:	4b9d      	ldr	r3, [pc, #628]	@ (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8007f78:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f7a:	e185      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f80:	e182      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007f82:	4b99      	ldr	r3, [pc, #612]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0320 	and.w	r3, r3, #32
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	d117      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f8e:	4b96      	ldr	r3, [pc, #600]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d005      	beq.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 8007f9a:	4b93      	ldr	r3, [pc, #588]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	0e1b      	lsrs	r3, r3, #24
 8007fa0:	f003 030f 	and.w	r3, r3, #15
 8007fa4:	e006      	b.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8007fa6:	4b90      	ldr	r3, [pc, #576]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007fac:	041b      	lsls	r3, r3, #16
 8007fae:	0e1b      	lsrs	r3, r3, #24
 8007fb0:	f003 030f 	and.w	r3, r3, #15
 8007fb4:	4a8e      	ldr	r2, [pc, #568]	@ (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8007fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007fbc:	e164      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fc2:	e161      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fc8:	e15e      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fce:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	d155      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007fd6:	4b84      	ldr	r3, [pc, #528]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007fd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fdc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007fe0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007fe8:	d013      	beq.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 8007fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ff0:	d844      	bhi.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ff8:	d013      	beq.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008000:	d83c      	bhi.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 8008002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008004:	2b00      	cmp	r3, #0
 8008006:	d014      	beq.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8008008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800800e:	d014      	beq.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 8008010:	e034      	b.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008012:	f107 0318 	add.w	r3, r7, #24
 8008016:	4618      	mov	r0, r3
 8008018:	f7fe fb28 	bl	800666c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008020:	e132      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe f9c4 	bl	80063b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800802c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008030:	e12a      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008032:	f7fd f921 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8008036:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008038:	e126      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800803a:	4b6b      	ldr	r3, [pc, #428]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0320 	and.w	r3, r3, #32
 8008042:	2b20      	cmp	r3, #32
 8008044:	d117      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008046:	4b68      	ldr	r3, [pc, #416]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d005      	beq.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 8008052:	4b65      	ldr	r3, [pc, #404]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	0e1b      	lsrs	r3, r3, #24
 8008058:	f003 030f 	and.w	r3, r3, #15
 800805c:	e006      	b.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 800805e:	4b62      	ldr	r3, [pc, #392]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008064:	041b      	lsls	r3, r3, #16
 8008066:	0e1b      	lsrs	r3, r3, #24
 8008068:	f003 030f 	and.w	r3, r3, #15
 800806c:	4a60      	ldr	r2, [pc, #384]	@ (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800806e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008072:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008074:	e108      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800807a:	e105      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008080:	e102      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8008082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008086:	1e59      	subs	r1, r3, #1
 8008088:	ea52 0301 	orrs.w	r3, r2, r1
 800808c:	d13c      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800808e:	4b56      	ldr	r3, [pc, #344]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008090:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008094:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008098:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80080a0:	d027      	beq.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80080a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80080a8:	d82b      	bhi.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 80080aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080b0:	d017      	beq.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 80080b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080b8:	d823      	bhi.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 80080ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d004      	beq.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 80080c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080c6:	d004      	beq.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 80080c8:	e01b      	b.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80080ca:	f7fd f8d5 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 80080ce:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80080d0:	e0da      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fe f96c 	bl	80063b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80080dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080e0:	e0d2      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080e2:	f107 0318 	add.w	r3, r7, #24
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fe fac0 	bl	800666c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080f0:	e0ca      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080f2:	f107 030c 	add.w	r3, r7, #12
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fc14 	bl	8006924 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008100:	e0c2      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008106:	e0bf      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800810c:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8008110:	430b      	orrs	r3, r1
 8008112:	d131      	bne.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008114:	4b34      	ldr	r3, [pc, #208]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800811a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800811e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008120:	4b31      	ldr	r3, [pc, #196]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008122:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b02      	cmp	r3, #2
 800812c:	d106      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 800812e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008130:	2b00      	cmp	r3, #0
 8008132:	d103      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 8008134:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008138:	637b      	str	r3, [r7, #52]	@ 0x34
 800813a:	e0a5      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800813c:	4b2a      	ldr	r3, [pc, #168]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800813e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008142:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008146:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800814a:	d112      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 800814c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008152:	d10e      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008154:	4b24      	ldr	r3, [pc, #144]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800815a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800815e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008162:	d102      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 8008164:	23fa      	movs	r3, #250	@ 0xfa
 8008166:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008168:	e08e      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 800816a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800816e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008170:	e08a      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	637b      	str	r3, [r7, #52]	@ 0x34
 8008176:	e087      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800817c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008180:	430b      	orrs	r3, r1
 8008182:	d13b      	bne.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008184:	4b18      	ldr	r3, [pc, #96]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008186:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800818a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800818e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008190:	4b15      	ldr	r3, [pc, #84]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800819c:	d105      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
 800819e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
    {
      frequency = HSI48_VALUE;
 80081a4:	4b13      	ldr	r3, [pc, #76]	@ (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 80081a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80081a8:	e06e      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80081aa:	4b0f      	ldr	r3, [pc, #60]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081b6:	d106      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
 80081b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081be:	d102      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
    {
      frequency = HSI48_VALUE >> 1U ;
 80081c0:	4b0d      	ldr	r3, [pc, #52]	@ (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>)
 80081c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c4:	e060      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80081c6:	4b08      	ldr	r3, [pc, #32]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081d2:	d106      	bne.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 80081d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081da:	d102      	bne.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
    {
      frequency = HSI_VALUE;
 80081dc:	4b03      	ldr	r3, [pc, #12]	@ (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 80081de:	637b      	str	r3, [r7, #52]	@ 0x34
 80081e0:	e052      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80081e6:	e04f      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80081e8:	46020c00 	.word	0x46020c00
 80081ec:	00f42400 	.word	0x00f42400
 80081f0:	0800eb34 	.word	0x0800eb34
 80081f4:	02dc6c00 	.word	0x02dc6c00
 80081f8:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 80081fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008200:	f1a3 0108 	sub.w	r1, r3, #8
 8008204:	ea52 0301 	orrs.w	r3, r2, r1
 8008208:	d13c      	bne.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x16a8>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800820a:	4b22      	ldr	r3, [pc, #136]	@ (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800820c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008210:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008214:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8008216:	4b1f      	ldr	r3, [pc, #124]	@ (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800821e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008222:	d105      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 8008224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008226:	2b00      	cmp	r3, #0
 8008228:	d102      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
    {
      frequency = HSE_VALUE;
 800822a:	4b1b      	ldr	r3, [pc, #108]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800822c:	637b      	str	r3, [r7, #52]	@ 0x34
 800822e:	e02b      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8008230:	4b18      	ldr	r3, [pc, #96]	@ (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008238:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800823c:	d106      	bne.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
 800823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008240:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008244:	d102      	bne.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
    {
      frequency = HSE_VALUE >> 1U ;
 8008246:	4b15      	ldr	r3, [pc, #84]	@ (800829c <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 8008248:	637b      	str	r3, [r7, #52]	@ 0x34
 800824a:	e01d      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800824c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008252:	d107      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x1688>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe f8ab 	bl	80063b4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	637b      	str	r3, [r7, #52]	@ 0x34
 8008262:	e011      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8008264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008266:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800826a:	d108      	bne.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800826c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008270:	4618      	mov	r0, r3
 8008272:	f7fe f89f 	bl	80063b4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8008276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008278:	085b      	lsrs	r3, r3, #1
 800827a:	637b      	str	r3, [r7, #52]	@ 0x34
 800827c:	e004      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	637b      	str	r3, [r7, #52]	@ 0x34
 8008282:	e001      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008284:	2300      	movs	r3, #0
 8008286:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8008288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800828a:	4618      	mov	r0, r3
 800828c:	3738      	adds	r7, #56	@ 0x38
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	46020c00 	.word	0x46020c00
 8008298:	007a1200 	.word	0x007a1200
 800829c:	003d0900 	.word	0x003d0900

080082a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80082a8:	4b47      	ldr	r3, [pc, #284]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a46      	ldr	r2, [pc, #280]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 80082ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80082b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80082b4:	f7fb f960 	bl	8003578 <HAL_GetTick>
 80082b8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082ba:	e008      	b.n	80082ce <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80082bc:	f7fb f95c 	bl	8003578 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d901      	bls.n	80082ce <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e077      	b.n	80083be <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082ce:	4b3e      	ldr	r3, [pc, #248]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1f0      	bne.n	80082bc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80082da:	4b3b      	ldr	r3, [pc, #236]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 80082dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80082e2:	f023 0303 	bic.w	r3, r3, #3
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	6811      	ldr	r1, [r2, #0]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	6852      	ldr	r2, [r2, #4]
 80082ee:	3a01      	subs	r2, #1
 80082f0:	0212      	lsls	r2, r2, #8
 80082f2:	430a      	orrs	r2, r1
 80082f4:	4934      	ldr	r1, [pc, #208]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80082fa:	4b33      	ldr	r3, [pc, #204]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 80082fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082fe:	4b33      	ldr	r3, [pc, #204]	@ (80083cc <RCCEx_PLL2_Config+0x12c>)
 8008300:	4013      	ands	r3, r2
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6892      	ldr	r2, [r2, #8]
 8008306:	3a01      	subs	r2, #1
 8008308:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	68d2      	ldr	r2, [r2, #12]
 8008310:	3a01      	subs	r2, #1
 8008312:	0252      	lsls	r2, r2, #9
 8008314:	b292      	uxth	r2, r2
 8008316:	4311      	orrs	r1, r2
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	6912      	ldr	r2, [r2, #16]
 800831c:	3a01      	subs	r2, #1
 800831e:	0412      	lsls	r2, r2, #16
 8008320:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008324:	4311      	orrs	r1, r2
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	6952      	ldr	r2, [r2, #20]
 800832a:	3a01      	subs	r2, #1
 800832c:	0612      	lsls	r2, r2, #24
 800832e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008332:	430a      	orrs	r2, r1
 8008334:	4924      	ldr	r1, [pc, #144]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 8008336:	4313      	orrs	r3, r2
 8008338:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800833a:	4b23      	ldr	r3, [pc, #140]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 800833c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833e:	f023 020c 	bic.w	r2, r3, #12
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	4920      	ldr	r1, [pc, #128]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 8008348:	4313      	orrs	r3, r2
 800834a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800834c:	4b1e      	ldr	r3, [pc, #120]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 800834e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	491c      	ldr	r1, [pc, #112]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 8008356:	4313      	orrs	r3, r2
 8008358:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800835a:	4b1b      	ldr	r3, [pc, #108]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 800835c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835e:	4a1a      	ldr	r2, [pc, #104]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 8008360:	f023 0310 	bic.w	r3, r3, #16
 8008364:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008366:	4b18      	ldr	r3, [pc, #96]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 8008368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800836e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	69d2      	ldr	r2, [r2, #28]
 8008376:	00d2      	lsls	r2, r2, #3
 8008378:	4913      	ldr	r1, [pc, #76]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 800837a:	4313      	orrs	r3, r2
 800837c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800837e:	4b12      	ldr	r3, [pc, #72]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 8008380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008382:	4a11      	ldr	r2, [pc, #68]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 8008384:	f043 0310 	orr.w	r3, r3, #16
 8008388:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800838a:	4b0f      	ldr	r3, [pc, #60]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a0e      	ldr	r2, [pc, #56]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 8008390:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008394:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008396:	f7fb f8ef 	bl	8003578 <HAL_GetTick>
 800839a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800839c:	e008      	b.n	80083b0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800839e:	f7fb f8eb 	bl	8003578 <HAL_GetTick>
 80083a2:	4602      	mov	r2, r0
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d901      	bls.n	80083b0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e006      	b.n	80083be <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083b0:	4b05      	ldr	r3, [pc, #20]	@ (80083c8 <RCCEx_PLL2_Config+0x128>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d0f0      	beq.n	800839e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80083bc:	2300      	movs	r3, #0

}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	46020c00 	.word	0x46020c00
 80083cc:	80800000 	.word	0x80800000

080083d0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80083d8:	4b47      	ldr	r3, [pc, #284]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a46      	ldr	r2, [pc, #280]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 80083de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80083e4:	f7fb f8c8 	bl	8003578 <HAL_GetTick>
 80083e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80083ea:	e008      	b.n	80083fe <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083ec:	f7fb f8c4 	bl	8003578 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d901      	bls.n	80083fe <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e077      	b.n	80084ee <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80083fe:	4b3e      	ldr	r3, [pc, #248]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1f0      	bne.n	80083ec <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800840a:	4b3b      	ldr	r3, [pc, #236]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 800840c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800840e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008412:	f023 0303 	bic.w	r3, r3, #3
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	6811      	ldr	r1, [r2, #0]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	6852      	ldr	r2, [r2, #4]
 800841e:	3a01      	subs	r2, #1
 8008420:	0212      	lsls	r2, r2, #8
 8008422:	430a      	orrs	r2, r1
 8008424:	4934      	ldr	r1, [pc, #208]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 8008426:	4313      	orrs	r3, r2
 8008428:	630b      	str	r3, [r1, #48]	@ 0x30
 800842a:	4b33      	ldr	r3, [pc, #204]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 800842c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800842e:	4b33      	ldr	r3, [pc, #204]	@ (80084fc <RCCEx_PLL3_Config+0x12c>)
 8008430:	4013      	ands	r3, r2
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	6892      	ldr	r2, [r2, #8]
 8008436:	3a01      	subs	r2, #1
 8008438:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	68d2      	ldr	r2, [r2, #12]
 8008440:	3a01      	subs	r2, #1
 8008442:	0252      	lsls	r2, r2, #9
 8008444:	b292      	uxth	r2, r2
 8008446:	4311      	orrs	r1, r2
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6912      	ldr	r2, [r2, #16]
 800844c:	3a01      	subs	r2, #1
 800844e:	0412      	lsls	r2, r2, #16
 8008450:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008454:	4311      	orrs	r1, r2
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	6952      	ldr	r2, [r2, #20]
 800845a:	3a01      	subs	r2, #1
 800845c:	0612      	lsls	r2, r2, #24
 800845e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008462:	430a      	orrs	r2, r1
 8008464:	4924      	ldr	r1, [pc, #144]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 8008466:	4313      	orrs	r3, r2
 8008468:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800846a:	4b23      	ldr	r3, [pc, #140]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 800846c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800846e:	f023 020c 	bic.w	r2, r3, #12
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	4920      	ldr	r1, [pc, #128]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 8008478:	4313      	orrs	r3, r2
 800847a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800847c:	4b1e      	ldr	r3, [pc, #120]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 800847e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	491c      	ldr	r1, [pc, #112]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 8008486:	4313      	orrs	r3, r2
 8008488:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800848a:	4b1b      	ldr	r3, [pc, #108]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 800848c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800848e:	4a1a      	ldr	r2, [pc, #104]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 8008490:	f023 0310 	bic.w	r3, r3, #16
 8008494:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008496:	4b18      	ldr	r3, [pc, #96]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 8008498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800849a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800849e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	69d2      	ldr	r2, [r2, #28]
 80084a6:	00d2      	lsls	r2, r2, #3
 80084a8:	4913      	ldr	r1, [pc, #76]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 80084aa:	4313      	orrs	r3, r2
 80084ac:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80084ae:	4b12      	ldr	r3, [pc, #72]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 80084b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b2:	4a11      	ldr	r2, [pc, #68]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 80084b4:	f043 0310 	orr.w	r3, r3, #16
 80084b8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80084ba:	4b0f      	ldr	r3, [pc, #60]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a0e      	ldr	r2, [pc, #56]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 80084c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084c4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80084c6:	f7fb f857 	bl	8003578 <HAL_GetTick>
 80084ca:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80084cc:	e008      	b.n	80084e0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80084ce:	f7fb f853 	bl	8003578 <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d901      	bls.n	80084e0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e006      	b.n	80084ee <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80084e0:	4b05      	ldr	r3, [pc, #20]	@ (80084f8 <RCCEx_PLL3_Config+0x128>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d0f0      	beq.n	80084ce <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	46020c00 	.word	0x46020c00
 80084fc:	80800000 	.word	0x80800000

08008500 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e0fb      	b.n	800870a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a7f      	ldr	r2, [pc, #508]	@ (8008714 <HAL_SPI_Init+0x214>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d004      	beq.n	8008526 <HAL_SPI_Init+0x26>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a7d      	ldr	r2, [pc, #500]	@ (8008718 <HAL_SPI_Init+0x218>)
 8008522:	4293      	cmp	r3, r2
 8008524:	e000      	b.n	8008528 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008526:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a78      	ldr	r2, [pc, #480]	@ (8008714 <HAL_SPI_Init+0x214>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d004      	beq.n	8008542 <HAL_SPI_Init+0x42>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a76      	ldr	r2, [pc, #472]	@ (8008718 <HAL_SPI_Init+0x218>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d105      	bne.n	800854e <HAL_SPI_Init+0x4e>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	2b0f      	cmp	r3, #15
 8008548:	d901      	bls.n	800854e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e0dd      	b.n	800870a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fd6c 	bl	800902c <SPI_GetPacketSize>
 8008554:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a6e      	ldr	r2, [pc, #440]	@ (8008714 <HAL_SPI_Init+0x214>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d004      	beq.n	800856a <HAL_SPI_Init+0x6a>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a6c      	ldr	r2, [pc, #432]	@ (8008718 <HAL_SPI_Init+0x218>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d102      	bne.n	8008570 <HAL_SPI_Init+0x70>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b08      	cmp	r3, #8
 800856e:	d816      	bhi.n	800859e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008574:	4a69      	ldr	r2, [pc, #420]	@ (800871c <HAL_SPI_Init+0x21c>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00e      	beq.n	8008598 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a68      	ldr	r2, [pc, #416]	@ (8008720 <HAL_SPI_Init+0x220>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d009      	beq.n	8008598 <HAL_SPI_Init+0x98>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a66      	ldr	r2, [pc, #408]	@ (8008724 <HAL_SPI_Init+0x224>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d004      	beq.n	8008598 <HAL_SPI_Init+0x98>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a65      	ldr	r2, [pc, #404]	@ (8008728 <HAL_SPI_Init+0x228>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d104      	bne.n	80085a2 <HAL_SPI_Init+0xa2>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2b10      	cmp	r3, #16
 800859c:	d901      	bls.n	80085a2 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e0b3      	b.n	800870a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d106      	bne.n	80085bc <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7fa fb2a 	bl	8002c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2202      	movs	r2, #2
 80085c0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f022 0201 	bic.w	r2, r2, #1
 80085d2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80085de:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085e8:	d119      	bne.n	800861e <HAL_SPI_Init+0x11e>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085f2:	d103      	bne.n	80085fc <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d008      	beq.n	800860e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10c      	bne.n	800861e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800860c:	d107      	bne.n	800861e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800861c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00f      	beq.n	800864a <HAL_SPI_Init+0x14a>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	2b06      	cmp	r3, #6
 8008630:	d90b      	bls.n	800864a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	430a      	orrs	r2, r1
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	e007      	b.n	800865a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008658:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	69da      	ldr	r2, [r3, #28]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008662:	431a      	orrs	r2, r3
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	431a      	orrs	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800866c:	ea42 0103 	orr.w	r1, r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	430a      	orrs	r2, r1
 800867a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008684:	431a      	orrs	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	431a      	orrs	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	431a      	orrs	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	431a      	orrs	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	431a      	orrs	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	431a      	orrs	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086ae:	431a      	orrs	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	431a      	orrs	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086ba:	431a      	orrs	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086c0:	431a      	orrs	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086c6:	ea42 0103 	orr.w	r1, r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	430a      	orrs	r2, r1
 80086d4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00a      	beq.n	80086f8 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	46002000 	.word	0x46002000
 8008718:	56002000 	.word	0x56002000
 800871c:	40013000 	.word	0x40013000
 8008720:	50013000 	.word	0x50013000
 8008724:	40003800 	.word	0x40003800
 8008728:	50003800 	.word	0x50003800

0800872c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b088      	sub	sp, #32
 8008730:	af02      	add	r7, sp, #8
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	603b      	str	r3, [r7, #0]
 8008738:	4613      	mov	r3, r2
 800873a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3320      	adds	r3, #32
 8008742:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008744:	f7fa ff18 	bl	8003578 <HAL_GetTick>
 8008748:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b01      	cmp	r3, #1
 8008754:	d001      	beq.n	800875a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8008756:	2302      	movs	r3, #2
 8008758:	e1f3      	b.n	8008b42 <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <HAL_SPI_Transmit+0x3a>
 8008760:	88fb      	ldrh	r3, [r7, #6]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e1eb      	b.n	8008b42 <HAL_SPI_Transmit+0x416>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008770:	2b01      	cmp	r3, #1
 8008772:	d101      	bne.n	8008778 <HAL_SPI_Transmit+0x4c>
 8008774:	2302      	movs	r3, #2
 8008776:	e1e4      	b.n	8008b42 <HAL_SPI_Transmit+0x416>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2203      	movs	r2, #3
 8008784:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	88fa      	ldrh	r2, [r7, #6]
 800879a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	88fa      	ldrh	r2, [r7, #6]
 80087a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80087d0:	d108      	bne.n	80087e4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	e009      	b.n	80087f8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80087f6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	0c1b      	lsrs	r3, r3, #16
 8008800:	041b      	lsls	r3, r3, #16
 8008802:	88f9      	ldrh	r1, [r7, #6]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	6812      	ldr	r2, [r2, #0]
 8008808:	430b      	orrs	r3, r1
 800880a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f042 0201 	orr.w	r2, r2, #1
 800881a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10c      	bne.n	8008844 <HAL_SPI_Transmit+0x118>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008832:	d107      	bne.n	8008844 <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008842:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	2b0f      	cmp	r3, #15
 800884a:	d95b      	bls.n	8008904 <HAL_SPI_Transmit+0x1d8>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a8f      	ldr	r2, [pc, #572]	@ (8008a90 <HAL_SPI_Transmit+0x364>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d04f      	beq.n	80088f6 <HAL_SPI_Transmit+0x1ca>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a8e      	ldr	r2, [pc, #568]	@ (8008a94 <HAL_SPI_Transmit+0x368>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d04a      	beq.n	80088f6 <HAL_SPI_Transmit+0x1ca>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a8c      	ldr	r2, [pc, #560]	@ (8008a98 <HAL_SPI_Transmit+0x36c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d045      	beq.n	80088f6 <HAL_SPI_Transmit+0x1ca>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a8b      	ldr	r2, [pc, #556]	@ (8008a9c <HAL_SPI_Transmit+0x370>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d147      	bne.n	8008904 <HAL_SPI_Transmit+0x1d8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008874:	e03f      	b.n	80088f6 <HAL_SPI_Transmit+0x1ca>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	f003 0302 	and.w	r3, r3, #2
 8008880:	2b02      	cmp	r3, #2
 8008882:	d114      	bne.n	80088ae <HAL_SPI_Transmit+0x182>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6812      	ldr	r2, [r2, #0]
 800888e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008894:	1d1a      	adds	r2, r3, #4
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	3b01      	subs	r3, #1
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80088ac:	e023      	b.n	80088f6 <HAL_SPI_Transmit+0x1ca>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088ae:	f7fa fe63 	bl	8003578 <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d803      	bhi.n	80088c6 <HAL_SPI_Transmit+0x19a>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c4:	d102      	bne.n	80088cc <HAL_SPI_Transmit+0x1a0>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d114      	bne.n	80088f6 <HAL_SPI_Transmit+0x1ca>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 fadf 	bl	8008e90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e125      	b.n	8008b42 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1b9      	bne.n	8008876 <HAL_SPI_Transmit+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008902:	e0f8      	b.n	8008af6 <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	2b07      	cmp	r3, #7
 800890a:	f240 80ed 	bls.w	8008ae8 <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800890e:	e05d      	b.n	80089cc <HAL_SPI_Transmit+0x2a0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	2b02      	cmp	r3, #2
 800891c:	d132      	bne.n	8008984 <HAL_SPI_Transmit+0x258>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008924:	b29b      	uxth	r3, r3
 8008926:	2b01      	cmp	r3, #1
 8008928:	d918      	bls.n	800895c <HAL_SPI_Transmit+0x230>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892e:	2b00      	cmp	r3, #0
 8008930:	d014      	beq.n	800895c <HAL_SPI_Transmit+0x230>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6812      	ldr	r2, [r2, #0]
 800893c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008942:	1d1a      	adds	r2, r3, #4
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800894e:	b29b      	uxth	r3, r3
 8008950:	3b02      	subs	r3, #2
 8008952:	b29a      	uxth	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800895a:	e037      	b.n	80089cc <HAL_SPI_Transmit+0x2a0>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008960:	881a      	ldrh	r2, [r3, #0]
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800896a:	1c9a      	adds	r2, r3, #2
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008976:	b29b      	uxth	r3, r3
 8008978:	3b01      	subs	r3, #1
 800897a:	b29a      	uxth	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008982:	e023      	b.n	80089cc <HAL_SPI_Transmit+0x2a0>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008984:	f7fa fdf8 	bl	8003578 <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	429a      	cmp	r2, r3
 8008992:	d803      	bhi.n	800899c <HAL_SPI_Transmit+0x270>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899a:	d102      	bne.n	80089a2 <HAL_SPI_Transmit+0x276>
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d114      	bne.n	80089cc <HAL_SPI_Transmit+0x2a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 fa74 	bl	8008e90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e0ba      	b.n	8008b42 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d19b      	bne.n	8008910 <HAL_SPI_Transmit+0x1e4>
 80089d8:	e08d      	b.n	8008af6 <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	f003 0302 	and.w	r3, r3, #2
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d15b      	bne.n	8008aa0 <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d918      	bls.n	8008a26 <HAL_SPI_Transmit+0x2fa>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089f8:	2b40      	cmp	r3, #64	@ 0x40
 80089fa:	d914      	bls.n	8008a26 <HAL_SPI_Transmit+0x2fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6812      	ldr	r2, [r2, #0]
 8008a06:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a0c:	1d1a      	adds	r2, r3, #4
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	3b04      	subs	r3, #4
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008a24:	e060      	b.n	8008ae8 <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d917      	bls.n	8008a62 <HAL_SPI_Transmit+0x336>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d013      	beq.n	8008a62 <HAL_SPI_Transmit+0x336>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a3e:	881a      	ldrh	r2, [r3, #0]
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a48:	1c9a      	adds	r2, r3, #2
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	3b02      	subs	r3, #2
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008a60:	e042      	b.n	8008ae8 <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3320      	adds	r3, #32
 8008a6c:	7812      	ldrb	r2, [r2, #0]
 8008a6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	3b01      	subs	r3, #1
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008a8c:	e02c      	b.n	8008ae8 <HAL_SPI_Transmit+0x3bc>
 8008a8e:	bf00      	nop
 8008a90:	40013000 	.word	0x40013000
 8008a94:	50013000 	.word	0x50013000
 8008a98:	40003800 	.word	0x40003800
 8008a9c:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008aa0:	f7fa fd6a 	bl	8003578 <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d803      	bhi.n	8008ab8 <HAL_SPI_Transmit+0x38c>
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab6:	d102      	bne.n	8008abe <HAL_SPI_Transmit+0x392>
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d114      	bne.n	8008ae8 <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f000 f9e6 	bl	8008e90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008aca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e02c      	b.n	8008b42 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f47f af72 	bne.w	80089da <HAL_SPI_Transmit+0x2ae>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2200      	movs	r2, #0
 8008afe:	2108      	movs	r1, #8
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 fa65 	bl	8008fd0 <SPI_WaitOnFlagUntilTimeout>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d007      	beq.n	8008b1c <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b12:	f043 0220 	orr.w	r2, r3, #32
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 f9b7 	bl	8008e90 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e000      	b.n	8008b42 <HAL_SPI_Transmit+0x416>
  }
  else
  {
    return HAL_OK;
 8008b40:	2300      	movs	r3, #0
  }
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop

08008b4c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3330      	adds	r3, #48	@ 0x30
 8008b62:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b64:	f7fa fd08 	bl	8003578 <HAL_GetTick>
 8008b68:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d001      	beq.n	8008b7a <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 8008b76:	2302      	movs	r3, #2
 8008b78:	e17e      	b.n	8008e78 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <HAL_SPI_Receive+0x3a>
 8008b80:	88fb      	ldrh	r3, [r7, #6]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d101      	bne.n	8008b8a <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e176      	b.n	8008e78 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d101      	bne.n	8008b98 <HAL_SPI_Receive+0x4c>
 8008b94:	2302      	movs	r3, #2
 8008b96:	e16f      	b.n	8008e78 <HAL_SPI_Receive+0x32c>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2204      	movs	r2, #4
 8008ba4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	88fa      	ldrh	r2, [r7, #6]
 8008bba:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	88fa      	ldrh	r2, [r7, #6]
 8008bc2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008bf0:	d108      	bne.n	8008c04 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	e009      	b.n	8008c18 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008c16:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	0c1b      	lsrs	r3, r3, #16
 8008c20:	041b      	lsls	r3, r3, #16
 8008c22:	88f9      	ldrh	r1, [r7, #6]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	6812      	ldr	r2, [r2, #0]
 8008c28:	430b      	orrs	r3, r1
 8008c2a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f042 0201 	orr.w	r2, r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10c      	bne.n	8008c64 <HAL_SPI_Receive+0x118>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c52:	d107      	bne.n	8008c64 <HAL_SPI_Receive+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	2b0f      	cmp	r3, #15
 8008c6a:	d95c      	bls.n	8008d26 <HAL_SPI_Receive+0x1da>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a83      	ldr	r2, [pc, #524]	@ (8008e80 <HAL_SPI_Receive+0x334>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d050      	beq.n	8008d18 <HAL_SPI_Receive+0x1cc>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a82      	ldr	r2, [pc, #520]	@ (8008e84 <HAL_SPI_Receive+0x338>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d04b      	beq.n	8008d18 <HAL_SPI_Receive+0x1cc>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a80      	ldr	r2, [pc, #512]	@ (8008e88 <HAL_SPI_Receive+0x33c>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d046      	beq.n	8008d18 <HAL_SPI_Receive+0x1cc>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a7f      	ldr	r2, [pc, #508]	@ (8008e8c <HAL_SPI_Receive+0x340>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d148      	bne.n	8008d26 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008c94:	e040      	b.n	8008d18 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	695a      	ldr	r2, [r3, #20]
 8008c9c:	f248 0308 	movw	r3, #32776	@ 0x8008
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d014      	beq.n	8008cd0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008cb0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cb6:	1d1a      	adds	r2, r3, #4
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008cce:	e023      	b.n	8008d18 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cd0:	f7fa fc52 	bl	8003578 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d803      	bhi.n	8008ce8 <HAL_SPI_Receive+0x19c>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce6:	d102      	bne.n	8008cee <HAL_SPI_Receive+0x1a2>
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d114      	bne.n	8008d18 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f000 f8ce 	bl	8008e90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cfa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e0af      	b.n	8008e78 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1b8      	bne.n	8008c96 <HAL_SPI_Receive+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008d24:	e095      	b.n	8008e52 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	2b07      	cmp	r3, #7
 8008d2c:	f240 808b 	bls.w	8008e46 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008d30:	e03f      	b.n	8008db2 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d114      	bne.n	8008d6a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	8812      	ldrh	r2, [r2, #0]
 8008d48:	b292      	uxth	r2, r2
 8008d4a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d50:	1c9a      	adds	r2, r3, #2
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008d68:	e023      	b.n	8008db2 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d6a:	f7fa fc05 	bl	8003578 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d803      	bhi.n	8008d82 <HAL_SPI_Receive+0x236>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d80:	d102      	bne.n	8008d88 <HAL_SPI_Receive+0x23c>
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d114      	bne.n	8008db2 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f000 f881 	bl	8008e90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e062      	b.n	8008e78 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1b9      	bne.n	8008d32 <HAL_SPI_Receive+0x1e6>
 8008dbe:	e048      	b.n	8008e52 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d117      	bne.n	8008dfe <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dda:	7812      	ldrb	r2, [r2, #0]
 8008ddc:	b2d2      	uxtb	r2, r2
 8008dde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	3b01      	subs	r3, #1
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008dfc:	e023      	b.n	8008e46 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dfe:	f7fa fbbb 	bl	8003578 <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d803      	bhi.n	8008e16 <HAL_SPI_Receive+0x2ca>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e14:	d102      	bne.n	8008e1c <HAL_SPI_Receive+0x2d0>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d114      	bne.n	8008e46 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f000 f837 	bl	8008e90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e018      	b.n	8008e78 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1b6      	bne.n	8008dc0 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f000 f81c 	bl	8008e90 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e000      	b.n	8008e78 <HAL_SPI_Receive+0x32c>
  }
  else
  {
    return HAL_OK;
 8008e76:	2300      	movs	r3, #0
  }
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3718      	adds	r7, #24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	40013000 	.word	0x40013000
 8008e84:	50013000 	.word	0x50013000
 8008e88:	40003800 	.word	0x40003800
 8008e8c:	50003800 	.word	0x50003800

08008e90 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	699a      	ldr	r2, [r3, #24]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f042 0208 	orr.w	r2, r2, #8
 8008eae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	699a      	ldr	r2, [r3, #24]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f042 0210 	orr.w	r2, r2, #16
 8008ebe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0201 	bic.w	r2, r2, #1
 8008ece:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	6812      	ldr	r2, [r2, #0]
 8008eda:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008ede:	f023 0303 	bic.w	r3, r3, #3
 8008ee2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689a      	ldr	r2, [r3, #8]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008ef2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b04      	cmp	r3, #4
 8008efe:	d014      	beq.n	8008f2a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f003 0320 	and.w	r3, r3, #32
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00f      	beq.n	8008f2a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f10:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	699a      	ldr	r2, [r3, #24]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f042 0220 	orr.w	r2, r2, #32
 8008f28:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d014      	beq.n	8008f60 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00f      	beq.n	8008f60 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f46:	f043 0204 	orr.w	r2, r3, #4
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	699a      	ldr	r2, [r3, #24]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f5e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00f      	beq.n	8008f8a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f70:	f043 0201 	orr.w	r2, r3, #1
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	699a      	ldr	r2, [r3, #24]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f88:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00f      	beq.n	8008fb4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f9a:	f043 0208 	orr.w	r2, r3, #8
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	699a      	ldr	r2, [r3, #24]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008fb2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8008fc4:	bf00      	nop
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	603b      	str	r3, [r7, #0]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008fe0:	e010      	b.n	8009004 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fe2:	f7fa fac9 	bl	8003578 <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	683a      	ldr	r2, [r7, #0]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d803      	bhi.n	8008ffa <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff8:	d102      	bne.n	8009000 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e00f      	b.n	8009024 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	695a      	ldr	r2, [r3, #20]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	4013      	ands	r3, r2
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	429a      	cmp	r2, r3
 8009012:	bf0c      	ite	eq
 8009014:	2301      	moveq	r3, #1
 8009016:	2300      	movne	r3, #0
 8009018:	b2db      	uxtb	r3, r3
 800901a:	461a      	mov	r2, r3
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	429a      	cmp	r2, r3
 8009020:	d0df      	beq.n	8008fe2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009038:	095b      	lsrs	r3, r3, #5
 800903a:	3301      	adds	r3, #1
 800903c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	3301      	adds	r3, #1
 8009044:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	3307      	adds	r3, #7
 800904a:	08db      	lsrs	r3, r3, #3
 800904c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	fb02 f303 	mul.w	r3, r2, r3
}
 8009056:	4618      	mov	r0, r3
 8009058:	3714      	adds	r7, #20
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8009062:	b480      	push	{r7}
 8009064:	b083      	sub	sp, #12
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009072:	b2db      	uxtb	r3, r3
 8009074:	2b01      	cmp	r3, #1
 8009076:	d12e      	bne.n	80090d6 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800907e:	2b01      	cmp	r3, #1
 8009080:	d101      	bne.n	8009086 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8009082:	2302      	movs	r3, #2
 8009084:	e028      	b.n	80090d8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2202      	movs	r2, #2
 8009092:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 0201 	bic.w	r2, r2, #1
 80090a4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80090b2:	ea42 0103 	orr.w	r1, r2, r3
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	689a      	ldr	r2, [r3, #8]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	e000      	b.n	80090d8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
  }
}
 80090d8:	4618      	mov	r0, r3
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e049      	b.n	800918a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d106      	bne.n	8009110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7f9 fdea 	bl	8002ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2202      	movs	r2, #2
 8009114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	3304      	adds	r3, #4
 8009120:	4619      	mov	r1, r3
 8009122:	4610      	mov	r0, r2
 8009124:	f000 f938 	bl	8009398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d101      	bne.n	80091b0 <HAL_TIM_ConfigClockSource+0x1c>
 80091ac:	2302      	movs	r3, #2
 80091ae:	e0e6      	b.n	800937e <HAL_TIM_ConfigClockSource+0x1ea>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80091ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80091d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80091da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a67      	ldr	r2, [pc, #412]	@ (8009388 <HAL_TIM_ConfigClockSource+0x1f4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	f000 80b1 	beq.w	8009352 <HAL_TIM_ConfigClockSource+0x1be>
 80091f0:	4a65      	ldr	r2, [pc, #404]	@ (8009388 <HAL_TIM_ConfigClockSource+0x1f4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	f200 80b6 	bhi.w	8009364 <HAL_TIM_ConfigClockSource+0x1d0>
 80091f8:	4a64      	ldr	r2, [pc, #400]	@ (800938c <HAL_TIM_ConfigClockSource+0x1f8>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	f000 80a9 	beq.w	8009352 <HAL_TIM_ConfigClockSource+0x1be>
 8009200:	4a62      	ldr	r2, [pc, #392]	@ (800938c <HAL_TIM_ConfigClockSource+0x1f8>)
 8009202:	4293      	cmp	r3, r2
 8009204:	f200 80ae 	bhi.w	8009364 <HAL_TIM_ConfigClockSource+0x1d0>
 8009208:	4a61      	ldr	r2, [pc, #388]	@ (8009390 <HAL_TIM_ConfigClockSource+0x1fc>)
 800920a:	4293      	cmp	r3, r2
 800920c:	f000 80a1 	beq.w	8009352 <HAL_TIM_ConfigClockSource+0x1be>
 8009210:	4a5f      	ldr	r2, [pc, #380]	@ (8009390 <HAL_TIM_ConfigClockSource+0x1fc>)
 8009212:	4293      	cmp	r3, r2
 8009214:	f200 80a6 	bhi.w	8009364 <HAL_TIM_ConfigClockSource+0x1d0>
 8009218:	4a5e      	ldr	r2, [pc, #376]	@ (8009394 <HAL_TIM_ConfigClockSource+0x200>)
 800921a:	4293      	cmp	r3, r2
 800921c:	f000 8099 	beq.w	8009352 <HAL_TIM_ConfigClockSource+0x1be>
 8009220:	4a5c      	ldr	r2, [pc, #368]	@ (8009394 <HAL_TIM_ConfigClockSource+0x200>)
 8009222:	4293      	cmp	r3, r2
 8009224:	f200 809e 	bhi.w	8009364 <HAL_TIM_ConfigClockSource+0x1d0>
 8009228:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800922c:	f000 8091 	beq.w	8009352 <HAL_TIM_ConfigClockSource+0x1be>
 8009230:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009234:	f200 8096 	bhi.w	8009364 <HAL_TIM_ConfigClockSource+0x1d0>
 8009238:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800923c:	f000 8089 	beq.w	8009352 <HAL_TIM_ConfigClockSource+0x1be>
 8009240:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009244:	f200 808e 	bhi.w	8009364 <HAL_TIM_ConfigClockSource+0x1d0>
 8009248:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800924c:	d03e      	beq.n	80092cc <HAL_TIM_ConfigClockSource+0x138>
 800924e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009252:	f200 8087 	bhi.w	8009364 <HAL_TIM_ConfigClockSource+0x1d0>
 8009256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800925a:	f000 8086 	beq.w	800936a <HAL_TIM_ConfigClockSource+0x1d6>
 800925e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009262:	d87f      	bhi.n	8009364 <HAL_TIM_ConfigClockSource+0x1d0>
 8009264:	2b70      	cmp	r3, #112	@ 0x70
 8009266:	d01a      	beq.n	800929e <HAL_TIM_ConfigClockSource+0x10a>
 8009268:	2b70      	cmp	r3, #112	@ 0x70
 800926a:	d87b      	bhi.n	8009364 <HAL_TIM_ConfigClockSource+0x1d0>
 800926c:	2b60      	cmp	r3, #96	@ 0x60
 800926e:	d050      	beq.n	8009312 <HAL_TIM_ConfigClockSource+0x17e>
 8009270:	2b60      	cmp	r3, #96	@ 0x60
 8009272:	d877      	bhi.n	8009364 <HAL_TIM_ConfigClockSource+0x1d0>
 8009274:	2b50      	cmp	r3, #80	@ 0x50
 8009276:	d03c      	beq.n	80092f2 <HAL_TIM_ConfigClockSource+0x15e>
 8009278:	2b50      	cmp	r3, #80	@ 0x50
 800927a:	d873      	bhi.n	8009364 <HAL_TIM_ConfigClockSource+0x1d0>
 800927c:	2b40      	cmp	r3, #64	@ 0x40
 800927e:	d058      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x19e>
 8009280:	2b40      	cmp	r3, #64	@ 0x40
 8009282:	d86f      	bhi.n	8009364 <HAL_TIM_ConfigClockSource+0x1d0>
 8009284:	2b30      	cmp	r3, #48	@ 0x30
 8009286:	d064      	beq.n	8009352 <HAL_TIM_ConfigClockSource+0x1be>
 8009288:	2b30      	cmp	r3, #48	@ 0x30
 800928a:	d86b      	bhi.n	8009364 <HAL_TIM_ConfigClockSource+0x1d0>
 800928c:	2b20      	cmp	r3, #32
 800928e:	d060      	beq.n	8009352 <HAL_TIM_ConfigClockSource+0x1be>
 8009290:	2b20      	cmp	r3, #32
 8009292:	d867      	bhi.n	8009364 <HAL_TIM_ConfigClockSource+0x1d0>
 8009294:	2b00      	cmp	r3, #0
 8009296:	d05c      	beq.n	8009352 <HAL_TIM_ConfigClockSource+0x1be>
 8009298:	2b10      	cmp	r3, #16
 800929a:	d05a      	beq.n	8009352 <HAL_TIM_ConfigClockSource+0x1be>
 800929c:	e062      	b.n	8009364 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092ae:	f000 f9f5 	bl	800969c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80092c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	609a      	str	r2, [r3, #8]
      break;
 80092ca:	e04f      	b.n	800936c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092dc:	f000 f9de 	bl	800969c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	689a      	ldr	r2, [r3, #8]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80092ee:	609a      	str	r2, [r3, #8]
      break;
 80092f0:	e03c      	b.n	800936c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092fe:	461a      	mov	r2, r3
 8009300:	f000 f950 	bl	80095a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2150      	movs	r1, #80	@ 0x50
 800930a:	4618      	mov	r0, r3
 800930c:	f000 f9a9 	bl	8009662 <TIM_ITRx_SetConfig>
      break;
 8009310:	e02c      	b.n	800936c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800931e:	461a      	mov	r2, r3
 8009320:	f000 f96f 	bl	8009602 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2160      	movs	r1, #96	@ 0x60
 800932a:	4618      	mov	r0, r3
 800932c:	f000 f999 	bl	8009662 <TIM_ITRx_SetConfig>
      break;
 8009330:	e01c      	b.n	800936c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800933e:	461a      	mov	r2, r3
 8009340:	f000 f930 	bl	80095a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2140      	movs	r1, #64	@ 0x40
 800934a:	4618      	mov	r0, r3
 800934c:	f000 f989 	bl	8009662 <TIM_ITRx_SetConfig>
      break;
 8009350:	e00c      	b.n	800936c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4619      	mov	r1, r3
 800935c:	4610      	mov	r0, r2
 800935e:	f000 f980 	bl	8009662 <TIM_ITRx_SetConfig>
      break;
 8009362:	e003      	b.n	800936c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	73fb      	strb	r3, [r7, #15]
      break;
 8009368:	e000      	b.n	800936c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800936a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	00100070 	.word	0x00100070
 800938c:	00100040 	.word	0x00100040
 8009390:	00100030 	.word	0x00100030
 8009394:	00100020 	.word	0x00100020

08009398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a6e      	ldr	r2, [pc, #440]	@ (8009564 <TIM_Base_SetConfig+0x1cc>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d02b      	beq.n	8009408 <TIM_Base_SetConfig+0x70>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a6d      	ldr	r2, [pc, #436]	@ (8009568 <TIM_Base_SetConfig+0x1d0>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d027      	beq.n	8009408 <TIM_Base_SetConfig+0x70>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093be:	d023      	beq.n	8009408 <TIM_Base_SetConfig+0x70>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093c6:	d01f      	beq.n	8009408 <TIM_Base_SetConfig+0x70>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a68      	ldr	r2, [pc, #416]	@ (800956c <TIM_Base_SetConfig+0x1d4>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d01b      	beq.n	8009408 <TIM_Base_SetConfig+0x70>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a67      	ldr	r2, [pc, #412]	@ (8009570 <TIM_Base_SetConfig+0x1d8>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d017      	beq.n	8009408 <TIM_Base_SetConfig+0x70>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a66      	ldr	r2, [pc, #408]	@ (8009574 <TIM_Base_SetConfig+0x1dc>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d013      	beq.n	8009408 <TIM_Base_SetConfig+0x70>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a65      	ldr	r2, [pc, #404]	@ (8009578 <TIM_Base_SetConfig+0x1e0>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d00f      	beq.n	8009408 <TIM_Base_SetConfig+0x70>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a64      	ldr	r2, [pc, #400]	@ (800957c <TIM_Base_SetConfig+0x1e4>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d00b      	beq.n	8009408 <TIM_Base_SetConfig+0x70>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a63      	ldr	r2, [pc, #396]	@ (8009580 <TIM_Base_SetConfig+0x1e8>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d007      	beq.n	8009408 <TIM_Base_SetConfig+0x70>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a62      	ldr	r2, [pc, #392]	@ (8009584 <TIM_Base_SetConfig+0x1ec>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d003      	beq.n	8009408 <TIM_Base_SetConfig+0x70>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a61      	ldr	r2, [pc, #388]	@ (8009588 <TIM_Base_SetConfig+0x1f0>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d108      	bne.n	800941a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800940e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	4313      	orrs	r3, r2
 8009418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a51      	ldr	r2, [pc, #324]	@ (8009564 <TIM_Base_SetConfig+0x1cc>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d043      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a50      	ldr	r2, [pc, #320]	@ (8009568 <TIM_Base_SetConfig+0x1d0>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d03f      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009430:	d03b      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009438:	d037      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a4b      	ldr	r2, [pc, #300]	@ (800956c <TIM_Base_SetConfig+0x1d4>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d033      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a4a      	ldr	r2, [pc, #296]	@ (8009570 <TIM_Base_SetConfig+0x1d8>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d02f      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a49      	ldr	r2, [pc, #292]	@ (8009574 <TIM_Base_SetConfig+0x1dc>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d02b      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a48      	ldr	r2, [pc, #288]	@ (8009578 <TIM_Base_SetConfig+0x1e0>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d027      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a47      	ldr	r2, [pc, #284]	@ (800957c <TIM_Base_SetConfig+0x1e4>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d023      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a46      	ldr	r2, [pc, #280]	@ (8009580 <TIM_Base_SetConfig+0x1e8>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d01f      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a45      	ldr	r2, [pc, #276]	@ (8009584 <TIM_Base_SetConfig+0x1ec>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d01b      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a44      	ldr	r2, [pc, #272]	@ (8009588 <TIM_Base_SetConfig+0x1f0>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d017      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a43      	ldr	r2, [pc, #268]	@ (800958c <TIM_Base_SetConfig+0x1f4>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d013      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a42      	ldr	r2, [pc, #264]	@ (8009590 <TIM_Base_SetConfig+0x1f8>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d00f      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a41      	ldr	r2, [pc, #260]	@ (8009594 <TIM_Base_SetConfig+0x1fc>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d00b      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a40      	ldr	r2, [pc, #256]	@ (8009598 <TIM_Base_SetConfig+0x200>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d007      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a3f      	ldr	r2, [pc, #252]	@ (800959c <TIM_Base_SetConfig+0x204>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d003      	beq.n	80094aa <TIM_Base_SetConfig+0x112>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a3e      	ldr	r2, [pc, #248]	@ (80095a0 <TIM_Base_SetConfig+0x208>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d108      	bne.n	80094bc <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a20      	ldr	r2, [pc, #128]	@ (8009564 <TIM_Base_SetConfig+0x1cc>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d023      	beq.n	8009530 <TIM_Base_SetConfig+0x198>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a1f      	ldr	r2, [pc, #124]	@ (8009568 <TIM_Base_SetConfig+0x1d0>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d01f      	beq.n	8009530 <TIM_Base_SetConfig+0x198>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a24      	ldr	r2, [pc, #144]	@ (8009584 <TIM_Base_SetConfig+0x1ec>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d01b      	beq.n	8009530 <TIM_Base_SetConfig+0x198>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a23      	ldr	r2, [pc, #140]	@ (8009588 <TIM_Base_SetConfig+0x1f0>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d017      	beq.n	8009530 <TIM_Base_SetConfig+0x198>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a22      	ldr	r2, [pc, #136]	@ (800958c <TIM_Base_SetConfig+0x1f4>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d013      	beq.n	8009530 <TIM_Base_SetConfig+0x198>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a21      	ldr	r2, [pc, #132]	@ (8009590 <TIM_Base_SetConfig+0x1f8>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d00f      	beq.n	8009530 <TIM_Base_SetConfig+0x198>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a20      	ldr	r2, [pc, #128]	@ (8009594 <TIM_Base_SetConfig+0x1fc>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d00b      	beq.n	8009530 <TIM_Base_SetConfig+0x198>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a1f      	ldr	r2, [pc, #124]	@ (8009598 <TIM_Base_SetConfig+0x200>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d007      	beq.n	8009530 <TIM_Base_SetConfig+0x198>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a1e      	ldr	r2, [pc, #120]	@ (800959c <TIM_Base_SetConfig+0x204>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d003      	beq.n	8009530 <TIM_Base_SetConfig+0x198>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a1d      	ldr	r2, [pc, #116]	@ (80095a0 <TIM_Base_SetConfig+0x208>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d103      	bne.n	8009538 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	691a      	ldr	r2, [r3, #16]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b01      	cmp	r3, #1
 8009548:	d105      	bne.n	8009556 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	f023 0201 	bic.w	r2, r3, #1
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	611a      	str	r2, [r3, #16]
  }
}
 8009556:	bf00      	nop
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	40012c00 	.word	0x40012c00
 8009568:	50012c00 	.word	0x50012c00
 800956c:	40000400 	.word	0x40000400
 8009570:	50000400 	.word	0x50000400
 8009574:	40000800 	.word	0x40000800
 8009578:	50000800 	.word	0x50000800
 800957c:	40000c00 	.word	0x40000c00
 8009580:	50000c00 	.word	0x50000c00
 8009584:	40013400 	.word	0x40013400
 8009588:	50013400 	.word	0x50013400
 800958c:	40014000 	.word	0x40014000
 8009590:	50014000 	.word	0x50014000
 8009594:	40014400 	.word	0x40014400
 8009598:	50014400 	.word	0x50014400
 800959c:	40014800 	.word	0x40014800
 80095a0:	50014800 	.word	0x50014800

080095a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b087      	sub	sp, #28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6a1b      	ldr	r3, [r3, #32]
 80095b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	f023 0201 	bic.w	r2, r3, #1
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	011b      	lsls	r3, r3, #4
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f023 030a 	bic.w	r3, r3, #10
 80095e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	693a      	ldr	r2, [r7, #16]
 80095ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	621a      	str	r2, [r3, #32]
}
 80095f6:	bf00      	nop
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009602:	b480      	push	{r7}
 8009604:	b087      	sub	sp, #28
 8009606:	af00      	add	r7, sp, #0
 8009608:	60f8      	str	r0, [r7, #12]
 800960a:	60b9      	str	r1, [r7, #8]
 800960c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6a1b      	ldr	r3, [r3, #32]
 8009612:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	f023 0210 	bic.w	r2, r3, #16
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800962c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	031b      	lsls	r3, r3, #12
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	4313      	orrs	r3, r2
 8009636:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800963e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	011b      	lsls	r3, r3, #4
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	4313      	orrs	r3, r2
 8009648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	621a      	str	r2, [r3, #32]
}
 8009656:	bf00      	nop
 8009658:	371c      	adds	r7, #28
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009662:	b480      	push	{r7}
 8009664:	b085      	sub	sp, #20
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800967c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4313      	orrs	r3, r2
 8009684:	f043 0307 	orr.w	r3, r3, #7
 8009688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	609a      	str	r2, [r3, #8]
}
 8009690:	bf00      	nop
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800969c:	b480      	push	{r7}
 800969e:	b087      	sub	sp, #28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	021a      	lsls	r2, r3, #8
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	431a      	orrs	r2, r3
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	609a      	str	r2, [r3, #8]
}
 80096d0:	bf00      	nop
 80096d2:	371c      	adds	r7, #28
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d101      	bne.n	80096f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096f0:	2302      	movs	r3, #2
 80096f2:	e097      	b.n	8009824 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2202      	movs	r2, #2
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a45      	ldr	r2, [pc, #276]	@ (8009830 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d00e      	beq.n	800973c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a44      	ldr	r2, [pc, #272]	@ (8009834 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d009      	beq.n	800973c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a42      	ldr	r2, [pc, #264]	@ (8009838 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d004      	beq.n	800973c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a41      	ldr	r2, [pc, #260]	@ (800983c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d108      	bne.n	800974e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009742:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	4313      	orrs	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009758:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	4313      	orrs	r3, r2
 8009762:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a2f      	ldr	r2, [pc, #188]	@ (8009830 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d040      	beq.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a2e      	ldr	r2, [pc, #184]	@ (8009834 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d03b      	beq.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009788:	d036      	beq.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009792:	d031      	beq.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a29      	ldr	r2, [pc, #164]	@ (8009840 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d02c      	beq.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a28      	ldr	r2, [pc, #160]	@ (8009844 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d027      	beq.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a26      	ldr	r2, [pc, #152]	@ (8009848 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d022      	beq.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a25      	ldr	r2, [pc, #148]	@ (800984c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d01d      	beq.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a23      	ldr	r2, [pc, #140]	@ (8009850 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d018      	beq.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a22      	ldr	r2, [pc, #136]	@ (8009854 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d013      	beq.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a18      	ldr	r2, [pc, #96]	@ (8009838 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d00e      	beq.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a17      	ldr	r2, [pc, #92]	@ (800983c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d009      	beq.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009858 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d004      	beq.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a1a      	ldr	r2, [pc, #104]	@ (800985c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d10c      	bne.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	4313      	orrs	r3, r2
 8009808:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	40012c00 	.word	0x40012c00
 8009834:	50012c00 	.word	0x50012c00
 8009838:	40013400 	.word	0x40013400
 800983c:	50013400 	.word	0x50013400
 8009840:	40000400 	.word	0x40000400
 8009844:	50000400 	.word	0x50000400
 8009848:	40000800 	.word	0x40000800
 800984c:	50000800 	.word	0x50000800
 8009850:	40000c00 	.word	0x40000c00
 8009854:	50000c00 	.word	0x50000c00
 8009858:	40014000 	.word	0x40014000
 800985c:	50014000 	.word	0x50014000

08009860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e042      	b.n	80098f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009878:	2b00      	cmp	r3, #0
 800987a:	d106      	bne.n	800988a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f83b 	bl	8009900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2224      	movs	r2, #36	@ 0x24
 800988e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 0201 	bic.w	r2, r2, #1
 80098a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fa6e 	bl	8009d8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f8bd 	bl	8009a30 <UART_SetConfig>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d101      	bne.n	80098c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e01b      	b.n	80098f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80098ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689a      	ldr	r2, [r3, #8]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80098de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f042 0201 	orr.w	r2, r2, #1
 80098ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 faed 	bl	8009ed0 <UART_CheckIdleState>
 80098f6:	4603      	mov	r3, r0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b08a      	sub	sp, #40	@ 0x28
 8009918:	af02      	add	r7, sp, #8
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	603b      	str	r3, [r7, #0]
 8009920:	4613      	mov	r3, r2
 8009922:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800992a:	2b20      	cmp	r3, #32
 800992c:	d17b      	bne.n	8009a26 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <HAL_UART_Transmit+0x26>
 8009934:	88fb      	ldrh	r3, [r7, #6]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e074      	b.n	8009a28 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2221      	movs	r2, #33	@ 0x21
 800994a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800994e:	f7f9 fe13 	bl	8003578 <HAL_GetTick>
 8009952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	88fa      	ldrh	r2, [r7, #6]
 8009958:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	88fa      	ldrh	r2, [r7, #6]
 8009960:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800996c:	d108      	bne.n	8009980 <HAL_UART_Transmit+0x6c>
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d104      	bne.n	8009980 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009976:	2300      	movs	r3, #0
 8009978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	61bb      	str	r3, [r7, #24]
 800997e:	e003      	b.n	8009988 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009984:	2300      	movs	r3, #0
 8009986:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009988:	e030      	b.n	80099ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2200      	movs	r2, #0
 8009992:	2180      	movs	r1, #128	@ 0x80
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 fb45 	bl	800a024 <UART_WaitOnFlagUntilTimeout>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d005      	beq.n	80099ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e03d      	b.n	8009a28 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10b      	bne.n	80099ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	3302      	adds	r3, #2
 80099c6:	61bb      	str	r3, [r7, #24]
 80099c8:	e007      	b.n	80099da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	781a      	ldrb	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	3301      	adds	r3, #1
 80099d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	3b01      	subs	r3, #1
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1c8      	bne.n	800998a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	2200      	movs	r2, #0
 8009a00:	2140      	movs	r1, #64	@ 0x40
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f000 fb0e 	bl	800a024 <UART_WaitOnFlagUntilTimeout>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d005      	beq.n	8009a1a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2220      	movs	r2, #32
 8009a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e006      	b.n	8009a28 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	e000      	b.n	8009a28 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009a26:	2302      	movs	r3, #2
  }
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3720      	adds	r7, #32
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a34:	b094      	sub	sp, #80	@ 0x50
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	4b83      	ldr	r3, [pc, #524]	@ (8009c54 <UART_SetConfig+0x224>)
 8009a46:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a4a:	689a      	ldr	r2, [r3, #8]
 8009a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	431a      	orrs	r2, r3
 8009a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	431a      	orrs	r2, r3
 8009a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	497c      	ldr	r1, [pc, #496]	@ (8009c58 <UART_SetConfig+0x228>)
 8009a68:	4019      	ands	r1, r3
 8009a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a70:	430b      	orrs	r3, r1
 8009a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a80:	68d9      	ldr	r1, [r3, #12]
 8009a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	ea40 0301 	orr.w	r3, r0, r1
 8009a8a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	4b6f      	ldr	r3, [pc, #444]	@ (8009c54 <UART_SetConfig+0x224>)
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d009      	beq.n	8009ab0 <UART_SetConfig+0x80>
 8009a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	4b6e      	ldr	r3, [pc, #440]	@ (8009c5c <UART_SetConfig+0x22c>)
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d004      	beq.n	8009ab0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa8:	6a1a      	ldr	r2, [r3, #32]
 8009aaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aac:	4313      	orrs	r3, r2
 8009aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009aba:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ac4:	430b      	orrs	r3, r1
 8009ac6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ace:	f023 000f 	bic.w	r0, r3, #15
 8009ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	ea40 0301 	orr.w	r3, r0, r1
 8009ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	4b5e      	ldr	r3, [pc, #376]	@ (8009c60 <UART_SetConfig+0x230>)
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d102      	bne.n	8009af0 <UART_SetConfig+0xc0>
 8009aea:	2301      	movs	r3, #1
 8009aec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009aee:	e032      	b.n	8009b56 <UART_SetConfig+0x126>
 8009af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	4b5b      	ldr	r3, [pc, #364]	@ (8009c64 <UART_SetConfig+0x234>)
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d102      	bne.n	8009b00 <UART_SetConfig+0xd0>
 8009afa:	2302      	movs	r3, #2
 8009afc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009afe:	e02a      	b.n	8009b56 <UART_SetConfig+0x126>
 8009b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	4b58      	ldr	r3, [pc, #352]	@ (8009c68 <UART_SetConfig+0x238>)
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d102      	bne.n	8009b10 <UART_SetConfig+0xe0>
 8009b0a:	2304      	movs	r3, #4
 8009b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b0e:	e022      	b.n	8009b56 <UART_SetConfig+0x126>
 8009b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	4b55      	ldr	r3, [pc, #340]	@ (8009c6c <UART_SetConfig+0x23c>)
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d102      	bne.n	8009b20 <UART_SetConfig+0xf0>
 8009b1a:	2308      	movs	r3, #8
 8009b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b1e:	e01a      	b.n	8009b56 <UART_SetConfig+0x126>
 8009b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	4b52      	ldr	r3, [pc, #328]	@ (8009c70 <UART_SetConfig+0x240>)
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d102      	bne.n	8009b30 <UART_SetConfig+0x100>
 8009b2a:	2310      	movs	r3, #16
 8009b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b2e:	e012      	b.n	8009b56 <UART_SetConfig+0x126>
 8009b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	4b4f      	ldr	r3, [pc, #316]	@ (8009c74 <UART_SetConfig+0x244>)
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d103      	bne.n	8009b42 <UART_SetConfig+0x112>
 8009b3a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8009b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b40:	e009      	b.n	8009b56 <UART_SetConfig+0x126>
 8009b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	4b43      	ldr	r3, [pc, #268]	@ (8009c54 <UART_SetConfig+0x224>)
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d102      	bne.n	8009b52 <UART_SetConfig+0x122>
 8009b4c:	2320      	movs	r3, #32
 8009b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b50:	e001      	b.n	8009b56 <UART_SetConfig+0x126>
 8009b52:	2300      	movs	r3, #0
 8009b54:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8009c54 <UART_SetConfig+0x224>)
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d005      	beq.n	8009b6c <UART_SetConfig+0x13c>
 8009b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	4b3d      	ldr	r3, [pc, #244]	@ (8009c5c <UART_SetConfig+0x22c>)
 8009b66:	429a      	cmp	r2, r3
 8009b68:	f040 8088 	bne.w	8009c7c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b6e:	2200      	movs	r2, #0
 8009b70:	623b      	str	r3, [r7, #32]
 8009b72:	627a      	str	r2, [r7, #36]	@ 0x24
 8009b74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009b78:	f7fd f830 	bl	8006bdc <HAL_RCCEx_GetPeriphCLKFreq>
 8009b7c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 80eb 	beq.w	8009d5c <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8a:	4a3b      	ldr	r2, [pc, #236]	@ (8009c78 <UART_SetConfig+0x248>)
 8009b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b90:	461a      	mov	r2, r3
 8009b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b98:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9c:	685a      	ldr	r2, [r3, #4]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	005b      	lsls	r3, r3, #1
 8009ba2:	4413      	add	r3, r2
 8009ba4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d305      	bcc.n	8009bb6 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d903      	bls.n	8009bbe <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009bbc:	e048      	b.n	8009c50 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	61bb      	str	r3, [r7, #24]
 8009bc4:	61fa      	str	r2, [r7, #28]
 8009bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bca:	4a2b      	ldr	r2, [pc, #172]	@ (8009c78 <UART_SetConfig+0x248>)
 8009bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	613b      	str	r3, [r7, #16]
 8009bd6:	617a      	str	r2, [r7, #20]
 8009bd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009bdc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009be0:	f7f7 f862 	bl	8000ca8 <__aeabi_uldivmod>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4610      	mov	r0, r2
 8009bea:	4619      	mov	r1, r3
 8009bec:	f04f 0200 	mov.w	r2, #0
 8009bf0:	f04f 0300 	mov.w	r3, #0
 8009bf4:	020b      	lsls	r3, r1, #8
 8009bf6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bfa:	0202      	lsls	r2, r0, #8
 8009bfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bfe:	6849      	ldr	r1, [r1, #4]
 8009c00:	0849      	lsrs	r1, r1, #1
 8009c02:	2000      	movs	r0, #0
 8009c04:	460c      	mov	r4, r1
 8009c06:	4605      	mov	r5, r0
 8009c08:	eb12 0804 	adds.w	r8, r2, r4
 8009c0c:	eb43 0905 	adc.w	r9, r3, r5
 8009c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	60bb      	str	r3, [r7, #8]
 8009c18:	60fa      	str	r2, [r7, #12]
 8009c1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c1e:	4640      	mov	r0, r8
 8009c20:	4649      	mov	r1, r9
 8009c22:	f7f7 f841 	bl	8000ca8 <__aeabi_uldivmod>
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c34:	d308      	bcc.n	8009c48 <UART_SetConfig+0x218>
 8009c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c3c:	d204      	bcs.n	8009c48 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8009c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009c44:	60da      	str	r2, [r3, #12]
 8009c46:	e003      	b.n	8009c50 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009c4e:	e085      	b.n	8009d5c <UART_SetConfig+0x32c>
 8009c50:	e084      	b.n	8009d5c <UART_SetConfig+0x32c>
 8009c52:	bf00      	nop
 8009c54:	46002400 	.word	0x46002400
 8009c58:	cfff69f3 	.word	0xcfff69f3
 8009c5c:	56002400 	.word	0x56002400
 8009c60:	40013800 	.word	0x40013800
 8009c64:	40004400 	.word	0x40004400
 8009c68:	40004800 	.word	0x40004800
 8009c6c:	40004c00 	.word	0x40004c00
 8009c70:	40005000 	.word	0x40005000
 8009c74:	40006400 	.word	0x40006400
 8009c78:	0800ec00 	.word	0x0800ec00
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7e:	69db      	ldr	r3, [r3, #28]
 8009c80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c84:	d13c      	bne.n	8009d00 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c88:	2200      	movs	r2, #0
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	607a      	str	r2, [r7, #4]
 8009c8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c92:	f7fc ffa3 	bl	8006bdc <HAL_RCCEx_GetPeriphCLKFreq>
 8009c96:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d05e      	beq.n	8009d5c <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca2:	4a39      	ldr	r2, [pc, #228]	@ (8009d88 <UART_SetConfig+0x358>)
 8009ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cb0:	005a      	lsls	r2, r3, #1
 8009cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	085b      	lsrs	r3, r3, #1
 8009cb8:	441a      	add	r2, r3
 8009cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cc6:	2b0f      	cmp	r3, #15
 8009cc8:	d916      	bls.n	8009cf8 <UART_SetConfig+0x2c8>
 8009cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cd0:	d212      	bcs.n	8009cf8 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	f023 030f 	bic.w	r3, r3, #15
 8009cda:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cde:	085b      	lsrs	r3, r3, #1
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	f003 0307 	and.w	r3, r3, #7
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009cea:	4313      	orrs	r3, r2
 8009cec:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009cf4:	60da      	str	r2, [r3, #12]
 8009cf6:	e031      	b.n	8009d5c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009cfe:	e02d      	b.n	8009d5c <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d02:	2200      	movs	r2, #0
 8009d04:	469a      	mov	sl, r3
 8009d06:	4693      	mov	fp, r2
 8009d08:	4650      	mov	r0, sl
 8009d0a:	4659      	mov	r1, fp
 8009d0c:	f7fc ff66 	bl	8006bdc <HAL_RCCEx_GetPeriphCLKFreq>
 8009d10:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d021      	beq.n	8009d5c <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8009d88 <UART_SetConfig+0x358>)
 8009d1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d22:	461a      	mov	r2, r3
 8009d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d26:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	085b      	lsrs	r3, r3, #1
 8009d30:	441a      	add	r2, r3
 8009d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d3e:	2b0f      	cmp	r3, #15
 8009d40:	d909      	bls.n	8009d56 <UART_SetConfig+0x326>
 8009d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d48:	d205      	bcs.n	8009d56 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	60da      	str	r2, [r3, #12]
 8009d54:	e002      	b.n	8009d5c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d66:	2201      	movs	r2, #1
 8009d68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6e:	2200      	movs	r2, #0
 8009d70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d74:	2200      	movs	r2, #0
 8009d76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d78:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3750      	adds	r7, #80	@ 0x50
 8009d80:	46bd      	mov	sp, r7
 8009d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d86:	bf00      	nop
 8009d88:	0800ec00 	.word	0x0800ec00

08009d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d98:	f003 0308 	and.w	r3, r3, #8
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	430a      	orrs	r2, r1
 8009db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dba:	f003 0301 	and.w	r3, r3, #1
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ddc:	f003 0302 	and.w	r3, r3, #2
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00a      	beq.n	8009dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dfe:	f003 0304 	and.w	r3, r3, #4
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00a      	beq.n	8009e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00a      	beq.n	8009e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e42:	f003 0320 	and.w	r3, r3, #32
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00a      	beq.n	8009e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d01a      	beq.n	8009ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e8a:	d10a      	bne.n	8009ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	605a      	str	r2, [r3, #4]
  }
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b098      	sub	sp, #96	@ 0x60
 8009ed4:	af02      	add	r7, sp, #8
 8009ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ee0:	f7f9 fb4a 	bl	8003578 <HAL_GetTick>
 8009ee4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0308 	and.w	r3, r3, #8
 8009ef0:	2b08      	cmp	r3, #8
 8009ef2:	d12f      	bne.n	8009f54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ef4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009efc:	2200      	movs	r2, #0
 8009efe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f88e 	bl	800a024 <UART_WaitOnFlagUntilTimeout>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d022      	beq.n	8009f54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f16:	e853 3f00 	ldrex	r3, [r3]
 8009f1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f22:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f34:	e841 2300 	strex	r3, r2, [r1]
 8009f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1e6      	bne.n	8009f0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2220      	movs	r2, #32
 8009f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e063      	b.n	800a01c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f003 0304 	and.w	r3, r3, #4
 8009f5e:	2b04      	cmp	r3, #4
 8009f60:	d149      	bne.n	8009ff6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f857 	bl	800a024 <UART_WaitOnFlagUntilTimeout>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d03c      	beq.n	8009ff6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f84:	e853 3f00 	ldrex	r3, [r3]
 8009f88:	623b      	str	r3, [r7, #32]
   return(result);
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fa2:	e841 2300 	strex	r3, r2, [r1]
 8009fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e6      	bne.n	8009f7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3308      	adds	r3, #8
 8009fb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	e853 3f00 	ldrex	r3, [r3]
 8009fbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f023 0301 	bic.w	r3, r3, #1
 8009fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	3308      	adds	r3, #8
 8009fcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fce:	61fa      	str	r2, [r7, #28]
 8009fd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd2:	69b9      	ldr	r1, [r7, #24]
 8009fd4:	69fa      	ldr	r2, [r7, #28]
 8009fd6:	e841 2300 	strex	r3, r2, [r1]
 8009fda:	617b      	str	r3, [r7, #20]
   return(result);
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1e5      	bne.n	8009fae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e012      	b.n	800a01c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2220      	movs	r2, #32
 8009ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2220      	movs	r2, #32
 800a002:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3758      	adds	r7, #88	@ 0x58
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	4613      	mov	r3, r2
 800a032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a034:	e04f      	b.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a03c:	d04b      	beq.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a03e:	f7f9 fa9b 	bl	8003578 <HAL_GetTick>
 800a042:	4602      	mov	r2, r0
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d302      	bcc.n	800a054 <UART_WaitOnFlagUntilTimeout+0x30>
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	e04e      	b.n	800a0f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 0304 	and.w	r3, r3, #4
 800a062:	2b00      	cmp	r3, #0
 800a064:	d037      	beq.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2b80      	cmp	r3, #128	@ 0x80
 800a06a:	d034      	beq.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	2b40      	cmp	r3, #64	@ 0x40
 800a070:	d031      	beq.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	69db      	ldr	r3, [r3, #28]
 800a078:	f003 0308 	and.w	r3, r3, #8
 800a07c:	2b08      	cmp	r3, #8
 800a07e:	d110      	bne.n	800a0a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2208      	movs	r2, #8
 800a086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 f838 	bl	800a0fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2208      	movs	r2, #8
 800a092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e029      	b.n	800a0f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	69db      	ldr	r3, [r3, #28]
 800a0a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0b0:	d111      	bne.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a0ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f000 f81e 	bl	800a0fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e00f      	b.n	800a0f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69da      	ldr	r2, [r3, #28]
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	4013      	ands	r3, r2
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	bf0c      	ite	eq
 800a0e6:	2301      	moveq	r3, #1
 800a0e8:	2300      	movne	r3, #0
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	79fb      	ldrb	r3, [r7, #7]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d0a0      	beq.n	800a036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b095      	sub	sp, #84	@ 0x54
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a10e:	e853 3f00 	ldrex	r3, [r3]
 800a112:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a116:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a11a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	461a      	mov	r2, r3
 800a122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a124:	643b      	str	r3, [r7, #64]	@ 0x40
 800a126:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a128:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a12a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a12c:	e841 2300 	strex	r3, r2, [r1]
 800a130:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1e6      	bne.n	800a106 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	3308      	adds	r3, #8
 800a13e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	e853 3f00 	ldrex	r3, [r3]
 800a146:	61fb      	str	r3, [r7, #28]
   return(result);
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a14e:	f023 0301 	bic.w	r3, r3, #1
 800a152:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	3308      	adds	r3, #8
 800a15a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a15c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a15e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a164:	e841 2300 	strex	r3, r2, [r1]
 800a168:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1e3      	bne.n	800a138 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a174:	2b01      	cmp	r3, #1
 800a176:	d118      	bne.n	800a1aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	e853 3f00 	ldrex	r3, [r3]
 800a184:	60bb      	str	r3, [r7, #8]
   return(result);
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	f023 0310 	bic.w	r3, r3, #16
 800a18c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	461a      	mov	r2, r3
 800a194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a196:	61bb      	str	r3, [r7, #24]
 800a198:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19a:	6979      	ldr	r1, [r7, #20]
 800a19c:	69ba      	ldr	r2, [r7, #24]
 800a19e:	e841 2300 	strex	r3, r2, [r1]
 800a1a2:	613b      	str	r3, [r7, #16]
   return(result);
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1e6      	bne.n	800a178 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2220      	movs	r2, #32
 800a1ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a1be:	bf00      	nop
 800a1c0:	3754      	adds	r7, #84	@ 0x54
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <_ZdlPvj>:
 800a1ca:	f000 b800 	b.w	800a1ce <_ZdlPv>

0800a1ce <_ZdlPv>:
 800a1ce:	f000 b809 	b.w	800a1e4 <free>
	...

0800a1d4 <malloc>:
 800a1d4:	4b02      	ldr	r3, [pc, #8]	@ (800a1e0 <malloc+0xc>)
 800a1d6:	4601      	mov	r1, r0
 800a1d8:	6818      	ldr	r0, [r3, #0]
 800a1da:	f000 b82d 	b.w	800a238 <_malloc_r>
 800a1de:	bf00      	nop
 800a1e0:	2000005c 	.word	0x2000005c

0800a1e4 <free>:
 800a1e4:	4b02      	ldr	r3, [pc, #8]	@ (800a1f0 <free+0xc>)
 800a1e6:	4601      	mov	r1, r0
 800a1e8:	6818      	ldr	r0, [r3, #0]
 800a1ea:	f002 b83d 	b.w	800c268 <_free_r>
 800a1ee:	bf00      	nop
 800a1f0:	2000005c 	.word	0x2000005c

0800a1f4 <sbrk_aligned>:
 800a1f4:	b570      	push	{r4, r5, r6, lr}
 800a1f6:	4e0f      	ldr	r6, [pc, #60]	@ (800a234 <sbrk_aligned+0x40>)
 800a1f8:	460c      	mov	r4, r1
 800a1fa:	4605      	mov	r5, r0
 800a1fc:	6831      	ldr	r1, [r6, #0]
 800a1fe:	b911      	cbnz	r1, 800a206 <sbrk_aligned+0x12>
 800a200:	f001 f97c 	bl	800b4fc <_sbrk_r>
 800a204:	6030      	str	r0, [r6, #0]
 800a206:	4621      	mov	r1, r4
 800a208:	4628      	mov	r0, r5
 800a20a:	f001 f977 	bl	800b4fc <_sbrk_r>
 800a20e:	1c43      	adds	r3, r0, #1
 800a210:	d103      	bne.n	800a21a <sbrk_aligned+0x26>
 800a212:	f04f 34ff 	mov.w	r4, #4294967295
 800a216:	4620      	mov	r0, r4
 800a218:	bd70      	pop	{r4, r5, r6, pc}
 800a21a:	1cc4      	adds	r4, r0, #3
 800a21c:	f024 0403 	bic.w	r4, r4, #3
 800a220:	42a0      	cmp	r0, r4
 800a222:	d0f8      	beq.n	800a216 <sbrk_aligned+0x22>
 800a224:	1a21      	subs	r1, r4, r0
 800a226:	4628      	mov	r0, r5
 800a228:	f001 f968 	bl	800b4fc <_sbrk_r>
 800a22c:	3001      	adds	r0, #1
 800a22e:	d1f2      	bne.n	800a216 <sbrk_aligned+0x22>
 800a230:	e7ef      	b.n	800a212 <sbrk_aligned+0x1e>
 800a232:	bf00      	nop
 800a234:	2000049c 	.word	0x2000049c

0800a238 <_malloc_r>:
 800a238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a23c:	1ccd      	adds	r5, r1, #3
 800a23e:	4606      	mov	r6, r0
 800a240:	f025 0503 	bic.w	r5, r5, #3
 800a244:	3508      	adds	r5, #8
 800a246:	2d0c      	cmp	r5, #12
 800a248:	bf38      	it	cc
 800a24a:	250c      	movcc	r5, #12
 800a24c:	2d00      	cmp	r5, #0
 800a24e:	db01      	blt.n	800a254 <_malloc_r+0x1c>
 800a250:	42a9      	cmp	r1, r5
 800a252:	d904      	bls.n	800a25e <_malloc_r+0x26>
 800a254:	230c      	movs	r3, #12
 800a256:	6033      	str	r3, [r6, #0]
 800a258:	2000      	movs	r0, #0
 800a25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a25e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a334 <_malloc_r+0xfc>
 800a262:	f000 f869 	bl	800a338 <__malloc_lock>
 800a266:	f8d8 3000 	ldr.w	r3, [r8]
 800a26a:	461c      	mov	r4, r3
 800a26c:	bb44      	cbnz	r4, 800a2c0 <_malloc_r+0x88>
 800a26e:	4629      	mov	r1, r5
 800a270:	4630      	mov	r0, r6
 800a272:	f7ff ffbf 	bl	800a1f4 <sbrk_aligned>
 800a276:	1c43      	adds	r3, r0, #1
 800a278:	4604      	mov	r4, r0
 800a27a:	d158      	bne.n	800a32e <_malloc_r+0xf6>
 800a27c:	f8d8 4000 	ldr.w	r4, [r8]
 800a280:	4627      	mov	r7, r4
 800a282:	2f00      	cmp	r7, #0
 800a284:	d143      	bne.n	800a30e <_malloc_r+0xd6>
 800a286:	2c00      	cmp	r4, #0
 800a288:	d04b      	beq.n	800a322 <_malloc_r+0xea>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	4639      	mov	r1, r7
 800a28e:	4630      	mov	r0, r6
 800a290:	eb04 0903 	add.w	r9, r4, r3
 800a294:	f001 f932 	bl	800b4fc <_sbrk_r>
 800a298:	4581      	cmp	r9, r0
 800a29a:	d142      	bne.n	800a322 <_malloc_r+0xea>
 800a29c:	6821      	ldr	r1, [r4, #0]
 800a29e:	4630      	mov	r0, r6
 800a2a0:	1a6d      	subs	r5, r5, r1
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	f7ff ffa6 	bl	800a1f4 <sbrk_aligned>
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d03a      	beq.n	800a322 <_malloc_r+0xea>
 800a2ac:	6823      	ldr	r3, [r4, #0]
 800a2ae:	442b      	add	r3, r5
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a2b6:	685a      	ldr	r2, [r3, #4]
 800a2b8:	bb62      	cbnz	r2, 800a314 <_malloc_r+0xdc>
 800a2ba:	f8c8 7000 	str.w	r7, [r8]
 800a2be:	e00f      	b.n	800a2e0 <_malloc_r+0xa8>
 800a2c0:	6822      	ldr	r2, [r4, #0]
 800a2c2:	1b52      	subs	r2, r2, r5
 800a2c4:	d420      	bmi.n	800a308 <_malloc_r+0xd0>
 800a2c6:	2a0b      	cmp	r2, #11
 800a2c8:	d917      	bls.n	800a2fa <_malloc_r+0xc2>
 800a2ca:	1961      	adds	r1, r4, r5
 800a2cc:	42a3      	cmp	r3, r4
 800a2ce:	6025      	str	r5, [r4, #0]
 800a2d0:	bf18      	it	ne
 800a2d2:	6059      	strne	r1, [r3, #4]
 800a2d4:	6863      	ldr	r3, [r4, #4]
 800a2d6:	bf08      	it	eq
 800a2d8:	f8c8 1000 	streq.w	r1, [r8]
 800a2dc:	5162      	str	r2, [r4, r5]
 800a2de:	604b      	str	r3, [r1, #4]
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	f000 f82f 	bl	800a344 <__malloc_unlock>
 800a2e6:	f104 000b 	add.w	r0, r4, #11
 800a2ea:	1d23      	adds	r3, r4, #4
 800a2ec:	f020 0007 	bic.w	r0, r0, #7
 800a2f0:	1ac2      	subs	r2, r0, r3
 800a2f2:	bf1c      	itt	ne
 800a2f4:	1a1b      	subne	r3, r3, r0
 800a2f6:	50a3      	strne	r3, [r4, r2]
 800a2f8:	e7af      	b.n	800a25a <_malloc_r+0x22>
 800a2fa:	6862      	ldr	r2, [r4, #4]
 800a2fc:	42a3      	cmp	r3, r4
 800a2fe:	bf0c      	ite	eq
 800a300:	f8c8 2000 	streq.w	r2, [r8]
 800a304:	605a      	strne	r2, [r3, #4]
 800a306:	e7eb      	b.n	800a2e0 <_malloc_r+0xa8>
 800a308:	4623      	mov	r3, r4
 800a30a:	6864      	ldr	r4, [r4, #4]
 800a30c:	e7ae      	b.n	800a26c <_malloc_r+0x34>
 800a30e:	463c      	mov	r4, r7
 800a310:	687f      	ldr	r7, [r7, #4]
 800a312:	e7b6      	b.n	800a282 <_malloc_r+0x4a>
 800a314:	461a      	mov	r2, r3
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	42a3      	cmp	r3, r4
 800a31a:	d1fb      	bne.n	800a314 <_malloc_r+0xdc>
 800a31c:	2300      	movs	r3, #0
 800a31e:	6053      	str	r3, [r2, #4]
 800a320:	e7de      	b.n	800a2e0 <_malloc_r+0xa8>
 800a322:	230c      	movs	r3, #12
 800a324:	4630      	mov	r0, r6
 800a326:	6033      	str	r3, [r6, #0]
 800a328:	f000 f80c 	bl	800a344 <__malloc_unlock>
 800a32c:	e794      	b.n	800a258 <_malloc_r+0x20>
 800a32e:	6005      	str	r5, [r0, #0]
 800a330:	e7d6      	b.n	800a2e0 <_malloc_r+0xa8>
 800a332:	bf00      	nop
 800a334:	200004a0 	.word	0x200004a0

0800a338 <__malloc_lock>:
 800a338:	4801      	ldr	r0, [pc, #4]	@ (800a340 <__malloc_lock+0x8>)
 800a33a:	f001 b92c 	b.w	800b596 <__retarget_lock_acquire_recursive>
 800a33e:	bf00      	nop
 800a340:	200005e4 	.word	0x200005e4

0800a344 <__malloc_unlock>:
 800a344:	4801      	ldr	r0, [pc, #4]	@ (800a34c <__malloc_unlock+0x8>)
 800a346:	f001 b927 	b.w	800b598 <__retarget_lock_release_recursive>
 800a34a:	bf00      	nop
 800a34c:	200005e4 	.word	0x200005e4

0800a350 <__cvt>:
 800a350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a354:	ec57 6b10 	vmov	r6, r7, d0
 800a358:	2f00      	cmp	r7, #0
 800a35a:	460c      	mov	r4, r1
 800a35c:	4619      	mov	r1, r3
 800a35e:	463b      	mov	r3, r7
 800a360:	bfb4      	ite	lt
 800a362:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a366:	2300      	movge	r3, #0
 800a368:	4691      	mov	r9, r2
 800a36a:	bfbf      	itttt	lt
 800a36c:	4632      	movlt	r2, r6
 800a36e:	461f      	movlt	r7, r3
 800a370:	232d      	movlt	r3, #45	@ 0x2d
 800a372:	4616      	movlt	r6, r2
 800a374:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a378:	700b      	strb	r3, [r1, #0]
 800a37a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a37c:	f023 0820 	bic.w	r8, r3, #32
 800a380:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a384:	d005      	beq.n	800a392 <__cvt+0x42>
 800a386:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a38a:	d100      	bne.n	800a38e <__cvt+0x3e>
 800a38c:	3401      	adds	r4, #1
 800a38e:	2102      	movs	r1, #2
 800a390:	e000      	b.n	800a394 <__cvt+0x44>
 800a392:	2103      	movs	r1, #3
 800a394:	ab03      	add	r3, sp, #12
 800a396:	4622      	mov	r2, r4
 800a398:	9301      	str	r3, [sp, #4]
 800a39a:	ab02      	add	r3, sp, #8
 800a39c:	ec47 6b10 	vmov	d0, r6, r7
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	4653      	mov	r3, sl
 800a3a4:	f001 f99c 	bl	800b6e0 <_dtoa_r>
 800a3a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a3ac:	4605      	mov	r5, r0
 800a3ae:	d119      	bne.n	800a3e4 <__cvt+0x94>
 800a3b0:	f019 0f01 	tst.w	r9, #1
 800a3b4:	d00e      	beq.n	800a3d4 <__cvt+0x84>
 800a3b6:	eb00 0904 	add.w	r9, r0, r4
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	2300      	movs	r3, #0
 800a3be:	4630      	mov	r0, r6
 800a3c0:	4639      	mov	r1, r7
 800a3c2:	f7f6 fb91 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3c6:	b108      	cbz	r0, 800a3cc <__cvt+0x7c>
 800a3c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a3cc:	2230      	movs	r2, #48	@ 0x30
 800a3ce:	9b03      	ldr	r3, [sp, #12]
 800a3d0:	454b      	cmp	r3, r9
 800a3d2:	d31e      	bcc.n	800a412 <__cvt+0xc2>
 800a3d4:	9b03      	ldr	r3, [sp, #12]
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3da:	1b5b      	subs	r3, r3, r5
 800a3dc:	6013      	str	r3, [r2, #0]
 800a3de:	b004      	add	sp, #16
 800a3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a3e8:	eb00 0904 	add.w	r9, r0, r4
 800a3ec:	d1e5      	bne.n	800a3ba <__cvt+0x6a>
 800a3ee:	7803      	ldrb	r3, [r0, #0]
 800a3f0:	2b30      	cmp	r3, #48	@ 0x30
 800a3f2:	d10a      	bne.n	800a40a <__cvt+0xba>
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	4639      	mov	r1, r7
 800a3fc:	f7f6 fb74 	bl	8000ae8 <__aeabi_dcmpeq>
 800a400:	b918      	cbnz	r0, 800a40a <__cvt+0xba>
 800a402:	f1c4 0401 	rsb	r4, r4, #1
 800a406:	f8ca 4000 	str.w	r4, [sl]
 800a40a:	f8da 3000 	ldr.w	r3, [sl]
 800a40e:	4499      	add	r9, r3
 800a410:	e7d3      	b.n	800a3ba <__cvt+0x6a>
 800a412:	1c59      	adds	r1, r3, #1
 800a414:	9103      	str	r1, [sp, #12]
 800a416:	701a      	strb	r2, [r3, #0]
 800a418:	e7d9      	b.n	800a3ce <__cvt+0x7e>

0800a41a <__exponent>:
 800a41a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a41c:	2900      	cmp	r1, #0
 800a41e:	7002      	strb	r2, [r0, #0]
 800a420:	bfba      	itte	lt
 800a422:	4249      	neglt	r1, r1
 800a424:	232d      	movlt	r3, #45	@ 0x2d
 800a426:	232b      	movge	r3, #43	@ 0x2b
 800a428:	2909      	cmp	r1, #9
 800a42a:	7043      	strb	r3, [r0, #1]
 800a42c:	dd28      	ble.n	800a480 <__exponent+0x66>
 800a42e:	f10d 0307 	add.w	r3, sp, #7
 800a432:	270a      	movs	r7, #10
 800a434:	461d      	mov	r5, r3
 800a436:	461a      	mov	r2, r3
 800a438:	3b01      	subs	r3, #1
 800a43a:	fbb1 f6f7 	udiv	r6, r1, r7
 800a43e:	fb07 1416 	mls	r4, r7, r6, r1
 800a442:	3430      	adds	r4, #48	@ 0x30
 800a444:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a448:	460c      	mov	r4, r1
 800a44a:	4631      	mov	r1, r6
 800a44c:	2c63      	cmp	r4, #99	@ 0x63
 800a44e:	dcf2      	bgt.n	800a436 <__exponent+0x1c>
 800a450:	3130      	adds	r1, #48	@ 0x30
 800a452:	1e94      	subs	r4, r2, #2
 800a454:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a458:	1c41      	adds	r1, r0, #1
 800a45a:	4623      	mov	r3, r4
 800a45c:	42ab      	cmp	r3, r5
 800a45e:	d30a      	bcc.n	800a476 <__exponent+0x5c>
 800a460:	f10d 0309 	add.w	r3, sp, #9
 800a464:	1a9b      	subs	r3, r3, r2
 800a466:	42ac      	cmp	r4, r5
 800a468:	bf88      	it	hi
 800a46a:	2300      	movhi	r3, #0
 800a46c:	3302      	adds	r3, #2
 800a46e:	4403      	add	r3, r0
 800a470:	1a18      	subs	r0, r3, r0
 800a472:	b003      	add	sp, #12
 800a474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a476:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a47a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a47e:	e7ed      	b.n	800a45c <__exponent+0x42>
 800a480:	2330      	movs	r3, #48	@ 0x30
 800a482:	3130      	adds	r1, #48	@ 0x30
 800a484:	7083      	strb	r3, [r0, #2]
 800a486:	1d03      	adds	r3, r0, #4
 800a488:	70c1      	strb	r1, [r0, #3]
 800a48a:	e7f1      	b.n	800a470 <__exponent+0x56>

0800a48c <_printf_float>:
 800a48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a490:	b08d      	sub	sp, #52	@ 0x34
 800a492:	460c      	mov	r4, r1
 800a494:	4616      	mov	r6, r2
 800a496:	461f      	mov	r7, r3
 800a498:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a49c:	4605      	mov	r5, r0
 800a49e:	f000 fff5 	bl	800b48c <_localeconv_r>
 800a4a2:	6803      	ldr	r3, [r0, #0]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	9304      	str	r3, [sp, #16]
 800a4a8:	f7f5 fef2 	bl	8000290 <strlen>
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9005      	str	r0, [sp, #20]
 800a4b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a4b6:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a4ba:	3307      	adds	r3, #7
 800a4bc:	f8d4 b000 	ldr.w	fp, [r4]
 800a4c0:	f023 0307 	bic.w	r3, r3, #7
 800a4c4:	f103 0208 	add.w	r2, r3, #8
 800a4c8:	f8c8 2000 	str.w	r2, [r8]
 800a4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a4d8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a4dc:	9307      	str	r3, [sp, #28]
 800a4de:	4b9d      	ldr	r3, [pc, #628]	@ (800a754 <_printf_float+0x2c8>)
 800a4e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4e4:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a4e8:	f7f6 fb30 	bl	8000b4c <__aeabi_dcmpun>
 800a4ec:	bb70      	cbnz	r0, 800a54c <_printf_float+0xc0>
 800a4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f2:	4b98      	ldr	r3, [pc, #608]	@ (800a754 <_printf_float+0x2c8>)
 800a4f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4f8:	f7f6 fb0a 	bl	8000b10 <__aeabi_dcmple>
 800a4fc:	bb30      	cbnz	r0, 800a54c <_printf_float+0xc0>
 800a4fe:	2200      	movs	r2, #0
 800a500:	2300      	movs	r3, #0
 800a502:	4640      	mov	r0, r8
 800a504:	4649      	mov	r1, r9
 800a506:	f7f6 faf9 	bl	8000afc <__aeabi_dcmplt>
 800a50a:	b110      	cbz	r0, 800a512 <_printf_float+0x86>
 800a50c:	232d      	movs	r3, #45	@ 0x2d
 800a50e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a512:	4a91      	ldr	r2, [pc, #580]	@ (800a758 <_printf_float+0x2cc>)
 800a514:	4b91      	ldr	r3, [pc, #580]	@ (800a75c <_printf_float+0x2d0>)
 800a516:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a51a:	bf94      	ite	ls
 800a51c:	4690      	movls	r8, r2
 800a51e:	4698      	movhi	r8, r3
 800a520:	2303      	movs	r3, #3
 800a522:	f04f 0900 	mov.w	r9, #0
 800a526:	6123      	str	r3, [r4, #16]
 800a528:	f02b 0304 	bic.w	r3, fp, #4
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	4633      	mov	r3, r6
 800a530:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a532:	4621      	mov	r1, r4
 800a534:	4628      	mov	r0, r5
 800a536:	9700      	str	r7, [sp, #0]
 800a538:	f000 f9d2 	bl	800a8e0 <_printf_common>
 800a53c:	3001      	adds	r0, #1
 800a53e:	f040 808d 	bne.w	800a65c <_printf_float+0x1d0>
 800a542:	f04f 30ff 	mov.w	r0, #4294967295
 800a546:	b00d      	add	sp, #52	@ 0x34
 800a548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54c:	4642      	mov	r2, r8
 800a54e:	464b      	mov	r3, r9
 800a550:	4640      	mov	r0, r8
 800a552:	4649      	mov	r1, r9
 800a554:	f7f6 fafa 	bl	8000b4c <__aeabi_dcmpun>
 800a558:	b140      	cbz	r0, 800a56c <_printf_float+0xe0>
 800a55a:	464b      	mov	r3, r9
 800a55c:	4a80      	ldr	r2, [pc, #512]	@ (800a760 <_printf_float+0x2d4>)
 800a55e:	2b00      	cmp	r3, #0
 800a560:	bfbc      	itt	lt
 800a562:	232d      	movlt	r3, #45	@ 0x2d
 800a564:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a568:	4b7e      	ldr	r3, [pc, #504]	@ (800a764 <_printf_float+0x2d8>)
 800a56a:	e7d4      	b.n	800a516 <_printf_float+0x8a>
 800a56c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a570:	6863      	ldr	r3, [r4, #4]
 800a572:	9206      	str	r2, [sp, #24]
 800a574:	1c5a      	adds	r2, r3, #1
 800a576:	d13b      	bne.n	800a5f0 <_printf_float+0x164>
 800a578:	2306      	movs	r3, #6
 800a57a:	6063      	str	r3, [r4, #4]
 800a57c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a580:	2300      	movs	r3, #0
 800a582:	4628      	mov	r0, r5
 800a584:	6022      	str	r2, [r4, #0]
 800a586:	9303      	str	r3, [sp, #12]
 800a588:	ab0a      	add	r3, sp, #40	@ 0x28
 800a58a:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a58e:	ab09      	add	r3, sp, #36	@ 0x24
 800a590:	ec49 8b10 	vmov	d0, r8, r9
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a59a:	6861      	ldr	r1, [r4, #4]
 800a59c:	f7ff fed8 	bl	800a350 <__cvt>
 800a5a0:	9b06      	ldr	r3, [sp, #24]
 800a5a2:	4680      	mov	r8, r0
 800a5a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a5a6:	2b47      	cmp	r3, #71	@ 0x47
 800a5a8:	d129      	bne.n	800a5fe <_printf_float+0x172>
 800a5aa:	1cc8      	adds	r0, r1, #3
 800a5ac:	db02      	blt.n	800a5b4 <_printf_float+0x128>
 800a5ae:	6863      	ldr	r3, [r4, #4]
 800a5b0:	4299      	cmp	r1, r3
 800a5b2:	dd41      	ble.n	800a638 <_printf_float+0x1ac>
 800a5b4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a5b8:	fa5f fa8a 	uxtb.w	sl, sl
 800a5bc:	3901      	subs	r1, #1
 800a5be:	4652      	mov	r2, sl
 800a5c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a5c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a5c6:	f7ff ff28 	bl	800a41a <__exponent>
 800a5ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a5cc:	4681      	mov	r9, r0
 800a5ce:	1813      	adds	r3, r2, r0
 800a5d0:	2a01      	cmp	r2, #1
 800a5d2:	6123      	str	r3, [r4, #16]
 800a5d4:	dc02      	bgt.n	800a5dc <_printf_float+0x150>
 800a5d6:	6822      	ldr	r2, [r4, #0]
 800a5d8:	07d2      	lsls	r2, r2, #31
 800a5da:	d501      	bpl.n	800a5e0 <_printf_float+0x154>
 800a5dc:	3301      	adds	r3, #1
 800a5de:	6123      	str	r3, [r4, #16]
 800a5e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d0a2      	beq.n	800a52e <_printf_float+0xa2>
 800a5e8:	232d      	movs	r3, #45	@ 0x2d
 800a5ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5ee:	e79e      	b.n	800a52e <_printf_float+0xa2>
 800a5f0:	9a06      	ldr	r2, [sp, #24]
 800a5f2:	2a47      	cmp	r2, #71	@ 0x47
 800a5f4:	d1c2      	bne.n	800a57c <_printf_float+0xf0>
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1c0      	bne.n	800a57c <_printf_float+0xf0>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e7bd      	b.n	800a57a <_printf_float+0xee>
 800a5fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a602:	d9db      	bls.n	800a5bc <_printf_float+0x130>
 800a604:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a608:	d118      	bne.n	800a63c <_printf_float+0x1b0>
 800a60a:	2900      	cmp	r1, #0
 800a60c:	6863      	ldr	r3, [r4, #4]
 800a60e:	dd0b      	ble.n	800a628 <_printf_float+0x19c>
 800a610:	6121      	str	r1, [r4, #16]
 800a612:	b913      	cbnz	r3, 800a61a <_printf_float+0x18e>
 800a614:	6822      	ldr	r2, [r4, #0]
 800a616:	07d0      	lsls	r0, r2, #31
 800a618:	d502      	bpl.n	800a620 <_printf_float+0x194>
 800a61a:	3301      	adds	r3, #1
 800a61c:	440b      	add	r3, r1
 800a61e:	6123      	str	r3, [r4, #16]
 800a620:	f04f 0900 	mov.w	r9, #0
 800a624:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a626:	e7db      	b.n	800a5e0 <_printf_float+0x154>
 800a628:	b913      	cbnz	r3, 800a630 <_printf_float+0x1a4>
 800a62a:	6822      	ldr	r2, [r4, #0]
 800a62c:	07d2      	lsls	r2, r2, #31
 800a62e:	d501      	bpl.n	800a634 <_printf_float+0x1a8>
 800a630:	3302      	adds	r3, #2
 800a632:	e7f4      	b.n	800a61e <_printf_float+0x192>
 800a634:	2301      	movs	r3, #1
 800a636:	e7f2      	b.n	800a61e <_printf_float+0x192>
 800a638:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a63c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a63e:	4299      	cmp	r1, r3
 800a640:	db05      	blt.n	800a64e <_printf_float+0x1c2>
 800a642:	6823      	ldr	r3, [r4, #0]
 800a644:	6121      	str	r1, [r4, #16]
 800a646:	07d8      	lsls	r0, r3, #31
 800a648:	d5ea      	bpl.n	800a620 <_printf_float+0x194>
 800a64a:	1c4b      	adds	r3, r1, #1
 800a64c:	e7e7      	b.n	800a61e <_printf_float+0x192>
 800a64e:	2900      	cmp	r1, #0
 800a650:	bfd4      	ite	le
 800a652:	f1c1 0202 	rsble	r2, r1, #2
 800a656:	2201      	movgt	r2, #1
 800a658:	4413      	add	r3, r2
 800a65a:	e7e0      	b.n	800a61e <_printf_float+0x192>
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	055a      	lsls	r2, r3, #21
 800a660:	d407      	bmi.n	800a672 <_printf_float+0x1e6>
 800a662:	6923      	ldr	r3, [r4, #16]
 800a664:	4642      	mov	r2, r8
 800a666:	4631      	mov	r1, r6
 800a668:	4628      	mov	r0, r5
 800a66a:	47b8      	blx	r7
 800a66c:	3001      	adds	r0, #1
 800a66e:	d12b      	bne.n	800a6c8 <_printf_float+0x23c>
 800a670:	e767      	b.n	800a542 <_printf_float+0xb6>
 800a672:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a676:	f240 80dd 	bls.w	800a834 <_printf_float+0x3a8>
 800a67a:	2200      	movs	r2, #0
 800a67c:	2300      	movs	r3, #0
 800a67e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a682:	f7f6 fa31 	bl	8000ae8 <__aeabi_dcmpeq>
 800a686:	2800      	cmp	r0, #0
 800a688:	d033      	beq.n	800a6f2 <_printf_float+0x266>
 800a68a:	2301      	movs	r3, #1
 800a68c:	4a36      	ldr	r2, [pc, #216]	@ (800a768 <_printf_float+0x2dc>)
 800a68e:	4631      	mov	r1, r6
 800a690:	4628      	mov	r0, r5
 800a692:	47b8      	blx	r7
 800a694:	3001      	adds	r0, #1
 800a696:	f43f af54 	beq.w	800a542 <_printf_float+0xb6>
 800a69a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a69e:	4543      	cmp	r3, r8
 800a6a0:	db02      	blt.n	800a6a8 <_printf_float+0x21c>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	07d8      	lsls	r0, r3, #31
 800a6a6:	d50f      	bpl.n	800a6c8 <_printf_float+0x23c>
 800a6a8:	4631      	mov	r1, r6
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6b0:	47b8      	blx	r7
 800a6b2:	3001      	adds	r0, #1
 800a6b4:	f43f af45 	beq.w	800a542 <_printf_float+0xb6>
 800a6b8:	f04f 0900 	mov.w	r9, #0
 800a6bc:	f108 38ff 	add.w	r8, r8, #4294967295
 800a6c0:	f104 0a1a 	add.w	sl, r4, #26
 800a6c4:	45c8      	cmp	r8, r9
 800a6c6:	dc09      	bgt.n	800a6dc <_printf_float+0x250>
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	079b      	lsls	r3, r3, #30
 800a6cc:	f100 8103 	bmi.w	800a8d6 <_printf_float+0x44a>
 800a6d0:	68e0      	ldr	r0, [r4, #12]
 800a6d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6d4:	4298      	cmp	r0, r3
 800a6d6:	bfb8      	it	lt
 800a6d8:	4618      	movlt	r0, r3
 800a6da:	e734      	b.n	800a546 <_printf_float+0xba>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	4652      	mov	r2, sl
 800a6e0:	4631      	mov	r1, r6
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	47b8      	blx	r7
 800a6e6:	3001      	adds	r0, #1
 800a6e8:	f43f af2b 	beq.w	800a542 <_printf_float+0xb6>
 800a6ec:	f109 0901 	add.w	r9, r9, #1
 800a6f0:	e7e8      	b.n	800a6c4 <_printf_float+0x238>
 800a6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	dc39      	bgt.n	800a76c <_printf_float+0x2e0>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	4a1b      	ldr	r2, [pc, #108]	@ (800a768 <_printf_float+0x2dc>)
 800a6fc:	4631      	mov	r1, r6
 800a6fe:	4628      	mov	r0, r5
 800a700:	47b8      	blx	r7
 800a702:	3001      	adds	r0, #1
 800a704:	f43f af1d 	beq.w	800a542 <_printf_float+0xb6>
 800a708:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a70c:	ea59 0303 	orrs.w	r3, r9, r3
 800a710:	d102      	bne.n	800a718 <_printf_float+0x28c>
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	07d9      	lsls	r1, r3, #31
 800a716:	d5d7      	bpl.n	800a6c8 <_printf_float+0x23c>
 800a718:	4631      	mov	r1, r6
 800a71a:	4628      	mov	r0, r5
 800a71c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a720:	47b8      	blx	r7
 800a722:	3001      	adds	r0, #1
 800a724:	f43f af0d 	beq.w	800a542 <_printf_float+0xb6>
 800a728:	f04f 0a00 	mov.w	sl, #0
 800a72c:	f104 0b1a 	add.w	fp, r4, #26
 800a730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a732:	425b      	negs	r3, r3
 800a734:	4553      	cmp	r3, sl
 800a736:	dc01      	bgt.n	800a73c <_printf_float+0x2b0>
 800a738:	464b      	mov	r3, r9
 800a73a:	e793      	b.n	800a664 <_printf_float+0x1d8>
 800a73c:	2301      	movs	r3, #1
 800a73e:	465a      	mov	r2, fp
 800a740:	4631      	mov	r1, r6
 800a742:	4628      	mov	r0, r5
 800a744:	47b8      	blx	r7
 800a746:	3001      	adds	r0, #1
 800a748:	f43f aefb 	beq.w	800a542 <_printf_float+0xb6>
 800a74c:	f10a 0a01 	add.w	sl, sl, #1
 800a750:	e7ee      	b.n	800a730 <_printf_float+0x2a4>
 800a752:	bf00      	nop
 800a754:	7fefffff 	.word	0x7fefffff
 800a758:	0800ec18 	.word	0x0800ec18
 800a75c:	0800ec1c 	.word	0x0800ec1c
 800a760:	0800ec20 	.word	0x0800ec20
 800a764:	0800ec24 	.word	0x0800ec24
 800a768:	0800ec28 	.word	0x0800ec28
 800a76c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a76e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a772:	4553      	cmp	r3, sl
 800a774:	bfa8      	it	ge
 800a776:	4653      	movge	r3, sl
 800a778:	2b00      	cmp	r3, #0
 800a77a:	4699      	mov	r9, r3
 800a77c:	dc36      	bgt.n	800a7ec <_printf_float+0x360>
 800a77e:	f04f 0b00 	mov.w	fp, #0
 800a782:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a786:	f104 021a 	add.w	r2, r4, #26
 800a78a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a78c:	9306      	str	r3, [sp, #24]
 800a78e:	eba3 0309 	sub.w	r3, r3, r9
 800a792:	455b      	cmp	r3, fp
 800a794:	dc31      	bgt.n	800a7fa <_printf_float+0x36e>
 800a796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a798:	459a      	cmp	sl, r3
 800a79a:	dc3a      	bgt.n	800a812 <_printf_float+0x386>
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	07da      	lsls	r2, r3, #31
 800a7a0:	d437      	bmi.n	800a812 <_printf_float+0x386>
 800a7a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7a4:	ebaa 0903 	sub.w	r9, sl, r3
 800a7a8:	9b06      	ldr	r3, [sp, #24]
 800a7aa:	ebaa 0303 	sub.w	r3, sl, r3
 800a7ae:	4599      	cmp	r9, r3
 800a7b0:	bfa8      	it	ge
 800a7b2:	4699      	movge	r9, r3
 800a7b4:	f1b9 0f00 	cmp.w	r9, #0
 800a7b8:	dc33      	bgt.n	800a822 <_printf_float+0x396>
 800a7ba:	f04f 0800 	mov.w	r8, #0
 800a7be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7c2:	f104 0b1a 	add.w	fp, r4, #26
 800a7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7c8:	ebaa 0303 	sub.w	r3, sl, r3
 800a7cc:	eba3 0309 	sub.w	r3, r3, r9
 800a7d0:	4543      	cmp	r3, r8
 800a7d2:	f77f af79 	ble.w	800a6c8 <_printf_float+0x23c>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	465a      	mov	r2, fp
 800a7da:	4631      	mov	r1, r6
 800a7dc:	4628      	mov	r0, r5
 800a7de:	47b8      	blx	r7
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	f43f aeae 	beq.w	800a542 <_printf_float+0xb6>
 800a7e6:	f108 0801 	add.w	r8, r8, #1
 800a7ea:	e7ec      	b.n	800a7c6 <_printf_float+0x33a>
 800a7ec:	4642      	mov	r2, r8
 800a7ee:	4631      	mov	r1, r6
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	47b8      	blx	r7
 800a7f4:	3001      	adds	r0, #1
 800a7f6:	d1c2      	bne.n	800a77e <_printf_float+0x2f2>
 800a7f8:	e6a3      	b.n	800a542 <_printf_float+0xb6>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	4631      	mov	r1, r6
 800a7fe:	4628      	mov	r0, r5
 800a800:	9206      	str	r2, [sp, #24]
 800a802:	47b8      	blx	r7
 800a804:	3001      	adds	r0, #1
 800a806:	f43f ae9c 	beq.w	800a542 <_printf_float+0xb6>
 800a80a:	f10b 0b01 	add.w	fp, fp, #1
 800a80e:	9a06      	ldr	r2, [sp, #24]
 800a810:	e7bb      	b.n	800a78a <_printf_float+0x2fe>
 800a812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a816:	4631      	mov	r1, r6
 800a818:	4628      	mov	r0, r5
 800a81a:	47b8      	blx	r7
 800a81c:	3001      	adds	r0, #1
 800a81e:	d1c0      	bne.n	800a7a2 <_printf_float+0x316>
 800a820:	e68f      	b.n	800a542 <_printf_float+0xb6>
 800a822:	9a06      	ldr	r2, [sp, #24]
 800a824:	464b      	mov	r3, r9
 800a826:	4631      	mov	r1, r6
 800a828:	4628      	mov	r0, r5
 800a82a:	4442      	add	r2, r8
 800a82c:	47b8      	blx	r7
 800a82e:	3001      	adds	r0, #1
 800a830:	d1c3      	bne.n	800a7ba <_printf_float+0x32e>
 800a832:	e686      	b.n	800a542 <_printf_float+0xb6>
 800a834:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a838:	f1ba 0f01 	cmp.w	sl, #1
 800a83c:	dc01      	bgt.n	800a842 <_printf_float+0x3b6>
 800a83e:	07db      	lsls	r3, r3, #31
 800a840:	d536      	bpl.n	800a8b0 <_printf_float+0x424>
 800a842:	2301      	movs	r3, #1
 800a844:	4642      	mov	r2, r8
 800a846:	4631      	mov	r1, r6
 800a848:	4628      	mov	r0, r5
 800a84a:	47b8      	blx	r7
 800a84c:	3001      	adds	r0, #1
 800a84e:	f43f ae78 	beq.w	800a542 <_printf_float+0xb6>
 800a852:	4631      	mov	r1, r6
 800a854:	4628      	mov	r0, r5
 800a856:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a85a:	47b8      	blx	r7
 800a85c:	3001      	adds	r0, #1
 800a85e:	f43f ae70 	beq.w	800a542 <_printf_float+0xb6>
 800a862:	2200      	movs	r2, #0
 800a864:	2300      	movs	r3, #0
 800a866:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a86a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a86e:	f7f6 f93b 	bl	8000ae8 <__aeabi_dcmpeq>
 800a872:	b9c0      	cbnz	r0, 800a8a6 <_printf_float+0x41a>
 800a874:	4653      	mov	r3, sl
 800a876:	f108 0201 	add.w	r2, r8, #1
 800a87a:	4631      	mov	r1, r6
 800a87c:	4628      	mov	r0, r5
 800a87e:	47b8      	blx	r7
 800a880:	3001      	adds	r0, #1
 800a882:	d10c      	bne.n	800a89e <_printf_float+0x412>
 800a884:	e65d      	b.n	800a542 <_printf_float+0xb6>
 800a886:	2301      	movs	r3, #1
 800a888:	465a      	mov	r2, fp
 800a88a:	4631      	mov	r1, r6
 800a88c:	4628      	mov	r0, r5
 800a88e:	47b8      	blx	r7
 800a890:	3001      	adds	r0, #1
 800a892:	f43f ae56 	beq.w	800a542 <_printf_float+0xb6>
 800a896:	f108 0801 	add.w	r8, r8, #1
 800a89a:	45d0      	cmp	r8, sl
 800a89c:	dbf3      	blt.n	800a886 <_printf_float+0x3fa>
 800a89e:	464b      	mov	r3, r9
 800a8a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a8a4:	e6df      	b.n	800a666 <_printf_float+0x1da>
 800a8a6:	f04f 0800 	mov.w	r8, #0
 800a8aa:	f104 0b1a 	add.w	fp, r4, #26
 800a8ae:	e7f4      	b.n	800a89a <_printf_float+0x40e>
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	4642      	mov	r2, r8
 800a8b4:	e7e1      	b.n	800a87a <_printf_float+0x3ee>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	464a      	mov	r2, r9
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	4628      	mov	r0, r5
 800a8be:	47b8      	blx	r7
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	f43f ae3e 	beq.w	800a542 <_printf_float+0xb6>
 800a8c6:	f108 0801 	add.w	r8, r8, #1
 800a8ca:	68e3      	ldr	r3, [r4, #12]
 800a8cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a8ce:	1a5b      	subs	r3, r3, r1
 800a8d0:	4543      	cmp	r3, r8
 800a8d2:	dcf0      	bgt.n	800a8b6 <_printf_float+0x42a>
 800a8d4:	e6fc      	b.n	800a6d0 <_printf_float+0x244>
 800a8d6:	f04f 0800 	mov.w	r8, #0
 800a8da:	f104 0919 	add.w	r9, r4, #25
 800a8de:	e7f4      	b.n	800a8ca <_printf_float+0x43e>

0800a8e0 <_printf_common>:
 800a8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8e4:	4616      	mov	r6, r2
 800a8e6:	4698      	mov	r8, r3
 800a8e8:	688a      	ldr	r2, [r1, #8]
 800a8ea:	4607      	mov	r7, r0
 800a8ec:	690b      	ldr	r3, [r1, #16]
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	bfb8      	it	lt
 800a8f8:	4613      	movlt	r3, r2
 800a8fa:	6033      	str	r3, [r6, #0]
 800a8fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a900:	b10a      	cbz	r2, 800a906 <_printf_common+0x26>
 800a902:	3301      	adds	r3, #1
 800a904:	6033      	str	r3, [r6, #0]
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	0699      	lsls	r1, r3, #26
 800a90a:	bf42      	ittt	mi
 800a90c:	6833      	ldrmi	r3, [r6, #0]
 800a90e:	3302      	addmi	r3, #2
 800a910:	6033      	strmi	r3, [r6, #0]
 800a912:	6825      	ldr	r5, [r4, #0]
 800a914:	f015 0506 	ands.w	r5, r5, #6
 800a918:	d106      	bne.n	800a928 <_printf_common+0x48>
 800a91a:	f104 0a19 	add.w	sl, r4, #25
 800a91e:	68e3      	ldr	r3, [r4, #12]
 800a920:	6832      	ldr	r2, [r6, #0]
 800a922:	1a9b      	subs	r3, r3, r2
 800a924:	42ab      	cmp	r3, r5
 800a926:	dc2b      	bgt.n	800a980 <_printf_common+0xa0>
 800a928:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a92c:	6822      	ldr	r2, [r4, #0]
 800a92e:	3b00      	subs	r3, #0
 800a930:	bf18      	it	ne
 800a932:	2301      	movne	r3, #1
 800a934:	0692      	lsls	r2, r2, #26
 800a936:	d430      	bmi.n	800a99a <_printf_common+0xba>
 800a938:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a93c:	4641      	mov	r1, r8
 800a93e:	4638      	mov	r0, r7
 800a940:	47c8      	blx	r9
 800a942:	3001      	adds	r0, #1
 800a944:	d023      	beq.n	800a98e <_printf_common+0xae>
 800a946:	6823      	ldr	r3, [r4, #0]
 800a948:	341a      	adds	r4, #26
 800a94a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a94e:	f003 0306 	and.w	r3, r3, #6
 800a952:	2b04      	cmp	r3, #4
 800a954:	bf0a      	itet	eq
 800a956:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a95a:	2500      	movne	r5, #0
 800a95c:	6833      	ldreq	r3, [r6, #0]
 800a95e:	f04f 0600 	mov.w	r6, #0
 800a962:	bf08      	it	eq
 800a964:	1aed      	subeq	r5, r5, r3
 800a966:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a96a:	bf08      	it	eq
 800a96c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a970:	4293      	cmp	r3, r2
 800a972:	bfc4      	itt	gt
 800a974:	1a9b      	subgt	r3, r3, r2
 800a976:	18ed      	addgt	r5, r5, r3
 800a978:	42b5      	cmp	r5, r6
 800a97a:	d11a      	bne.n	800a9b2 <_printf_common+0xd2>
 800a97c:	2000      	movs	r0, #0
 800a97e:	e008      	b.n	800a992 <_printf_common+0xb2>
 800a980:	2301      	movs	r3, #1
 800a982:	4652      	mov	r2, sl
 800a984:	4641      	mov	r1, r8
 800a986:	4638      	mov	r0, r7
 800a988:	47c8      	blx	r9
 800a98a:	3001      	adds	r0, #1
 800a98c:	d103      	bne.n	800a996 <_printf_common+0xb6>
 800a98e:	f04f 30ff 	mov.w	r0, #4294967295
 800a992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a996:	3501      	adds	r5, #1
 800a998:	e7c1      	b.n	800a91e <_printf_common+0x3e>
 800a99a:	18e1      	adds	r1, r4, r3
 800a99c:	1c5a      	adds	r2, r3, #1
 800a99e:	2030      	movs	r0, #48	@ 0x30
 800a9a0:	3302      	adds	r3, #2
 800a9a2:	4422      	add	r2, r4
 800a9a4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a9a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a9ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a9b0:	e7c2      	b.n	800a938 <_printf_common+0x58>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	4622      	mov	r2, r4
 800a9b6:	4641      	mov	r1, r8
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	47c8      	blx	r9
 800a9bc:	3001      	adds	r0, #1
 800a9be:	d0e6      	beq.n	800a98e <_printf_common+0xae>
 800a9c0:	3601      	adds	r6, #1
 800a9c2:	e7d9      	b.n	800a978 <_printf_common+0x98>

0800a9c4 <_printf_i>:
 800a9c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c8:	7e0f      	ldrb	r7, [r1, #24]
 800a9ca:	4691      	mov	r9, r2
 800a9cc:	4680      	mov	r8, r0
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	2f78      	cmp	r7, #120	@ 0x78
 800a9d2:	469a      	mov	sl, r3
 800a9d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a9d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a9da:	d807      	bhi.n	800a9ec <_printf_i+0x28>
 800a9dc:	2f62      	cmp	r7, #98	@ 0x62
 800a9de:	d80a      	bhi.n	800a9f6 <_printf_i+0x32>
 800a9e0:	2f00      	cmp	r7, #0
 800a9e2:	f000 80d2 	beq.w	800ab8a <_printf_i+0x1c6>
 800a9e6:	2f58      	cmp	r7, #88	@ 0x58
 800a9e8:	f000 80b9 	beq.w	800ab5e <_printf_i+0x19a>
 800a9ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a9f4:	e03a      	b.n	800aa6c <_printf_i+0xa8>
 800a9f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a9fa:	2b15      	cmp	r3, #21
 800a9fc:	d8f6      	bhi.n	800a9ec <_printf_i+0x28>
 800a9fe:	a101      	add	r1, pc, #4	@ (adr r1, 800aa04 <_printf_i+0x40>)
 800aa00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa04:	0800aa5d 	.word	0x0800aa5d
 800aa08:	0800aa71 	.word	0x0800aa71
 800aa0c:	0800a9ed 	.word	0x0800a9ed
 800aa10:	0800a9ed 	.word	0x0800a9ed
 800aa14:	0800a9ed 	.word	0x0800a9ed
 800aa18:	0800a9ed 	.word	0x0800a9ed
 800aa1c:	0800aa71 	.word	0x0800aa71
 800aa20:	0800a9ed 	.word	0x0800a9ed
 800aa24:	0800a9ed 	.word	0x0800a9ed
 800aa28:	0800a9ed 	.word	0x0800a9ed
 800aa2c:	0800a9ed 	.word	0x0800a9ed
 800aa30:	0800ab71 	.word	0x0800ab71
 800aa34:	0800aa9b 	.word	0x0800aa9b
 800aa38:	0800ab2b 	.word	0x0800ab2b
 800aa3c:	0800a9ed 	.word	0x0800a9ed
 800aa40:	0800a9ed 	.word	0x0800a9ed
 800aa44:	0800ab93 	.word	0x0800ab93
 800aa48:	0800a9ed 	.word	0x0800a9ed
 800aa4c:	0800aa9b 	.word	0x0800aa9b
 800aa50:	0800a9ed 	.word	0x0800a9ed
 800aa54:	0800a9ed 	.word	0x0800a9ed
 800aa58:	0800ab33 	.word	0x0800ab33
 800aa5c:	6833      	ldr	r3, [r6, #0]
 800aa5e:	1d1a      	adds	r2, r3, #4
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	6032      	str	r2, [r6, #0]
 800aa64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e09d      	b.n	800abac <_printf_i+0x1e8>
 800aa70:	6833      	ldr	r3, [r6, #0]
 800aa72:	6820      	ldr	r0, [r4, #0]
 800aa74:	1d19      	adds	r1, r3, #4
 800aa76:	6031      	str	r1, [r6, #0]
 800aa78:	0606      	lsls	r6, r0, #24
 800aa7a:	d501      	bpl.n	800aa80 <_printf_i+0xbc>
 800aa7c:	681d      	ldr	r5, [r3, #0]
 800aa7e:	e003      	b.n	800aa88 <_printf_i+0xc4>
 800aa80:	0645      	lsls	r5, r0, #25
 800aa82:	d5fb      	bpl.n	800aa7c <_printf_i+0xb8>
 800aa84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa88:	2d00      	cmp	r5, #0
 800aa8a:	da03      	bge.n	800aa94 <_printf_i+0xd0>
 800aa8c:	232d      	movs	r3, #45	@ 0x2d
 800aa8e:	426d      	negs	r5, r5
 800aa90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa94:	4859      	ldr	r0, [pc, #356]	@ (800abfc <_printf_i+0x238>)
 800aa96:	230a      	movs	r3, #10
 800aa98:	e011      	b.n	800aabe <_printf_i+0xfa>
 800aa9a:	6821      	ldr	r1, [r4, #0]
 800aa9c:	6833      	ldr	r3, [r6, #0]
 800aa9e:	0608      	lsls	r0, r1, #24
 800aaa0:	f853 5b04 	ldr.w	r5, [r3], #4
 800aaa4:	d402      	bmi.n	800aaac <_printf_i+0xe8>
 800aaa6:	0649      	lsls	r1, r1, #25
 800aaa8:	bf48      	it	mi
 800aaaa:	b2ad      	uxthmi	r5, r5
 800aaac:	2f6f      	cmp	r7, #111	@ 0x6f
 800aaae:	6033      	str	r3, [r6, #0]
 800aab0:	4852      	ldr	r0, [pc, #328]	@ (800abfc <_printf_i+0x238>)
 800aab2:	bf14      	ite	ne
 800aab4:	230a      	movne	r3, #10
 800aab6:	2308      	moveq	r3, #8
 800aab8:	2100      	movs	r1, #0
 800aaba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aabe:	6866      	ldr	r6, [r4, #4]
 800aac0:	2e00      	cmp	r6, #0
 800aac2:	60a6      	str	r6, [r4, #8]
 800aac4:	bfa2      	ittt	ge
 800aac6:	6821      	ldrge	r1, [r4, #0]
 800aac8:	f021 0104 	bicge.w	r1, r1, #4
 800aacc:	6021      	strge	r1, [r4, #0]
 800aace:	b90d      	cbnz	r5, 800aad4 <_printf_i+0x110>
 800aad0:	2e00      	cmp	r6, #0
 800aad2:	d04b      	beq.n	800ab6c <_printf_i+0x1a8>
 800aad4:	4616      	mov	r6, r2
 800aad6:	fbb5 f1f3 	udiv	r1, r5, r3
 800aada:	fb03 5711 	mls	r7, r3, r1, r5
 800aade:	5dc7      	ldrb	r7, [r0, r7]
 800aae0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aae4:	462f      	mov	r7, r5
 800aae6:	460d      	mov	r5, r1
 800aae8:	42bb      	cmp	r3, r7
 800aaea:	d9f4      	bls.n	800aad6 <_printf_i+0x112>
 800aaec:	2b08      	cmp	r3, #8
 800aaee:	d10b      	bne.n	800ab08 <_printf_i+0x144>
 800aaf0:	6823      	ldr	r3, [r4, #0]
 800aaf2:	07df      	lsls	r7, r3, #31
 800aaf4:	d508      	bpl.n	800ab08 <_printf_i+0x144>
 800aaf6:	6923      	ldr	r3, [r4, #16]
 800aaf8:	6861      	ldr	r1, [r4, #4]
 800aafa:	4299      	cmp	r1, r3
 800aafc:	bfde      	ittt	le
 800aafe:	2330      	movle	r3, #48	@ 0x30
 800ab00:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab04:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab08:	1b92      	subs	r2, r2, r6
 800ab0a:	6122      	str	r2, [r4, #16]
 800ab0c:	464b      	mov	r3, r9
 800ab0e:	aa03      	add	r2, sp, #12
 800ab10:	4621      	mov	r1, r4
 800ab12:	4640      	mov	r0, r8
 800ab14:	f8cd a000 	str.w	sl, [sp]
 800ab18:	f7ff fee2 	bl	800a8e0 <_printf_common>
 800ab1c:	3001      	adds	r0, #1
 800ab1e:	d14a      	bne.n	800abb6 <_printf_i+0x1f2>
 800ab20:	f04f 30ff 	mov.w	r0, #4294967295
 800ab24:	b004      	add	sp, #16
 800ab26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab2a:	6823      	ldr	r3, [r4, #0]
 800ab2c:	f043 0320 	orr.w	r3, r3, #32
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	2778      	movs	r7, #120	@ 0x78
 800ab34:	4832      	ldr	r0, [pc, #200]	@ (800ac00 <_printf_i+0x23c>)
 800ab36:	6823      	ldr	r3, [r4, #0]
 800ab38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab3c:	061f      	lsls	r7, r3, #24
 800ab3e:	6831      	ldr	r1, [r6, #0]
 800ab40:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab44:	d402      	bmi.n	800ab4c <_printf_i+0x188>
 800ab46:	065f      	lsls	r7, r3, #25
 800ab48:	bf48      	it	mi
 800ab4a:	b2ad      	uxthmi	r5, r5
 800ab4c:	6031      	str	r1, [r6, #0]
 800ab4e:	07d9      	lsls	r1, r3, #31
 800ab50:	bf44      	itt	mi
 800ab52:	f043 0320 	orrmi.w	r3, r3, #32
 800ab56:	6023      	strmi	r3, [r4, #0]
 800ab58:	b11d      	cbz	r5, 800ab62 <_printf_i+0x19e>
 800ab5a:	2310      	movs	r3, #16
 800ab5c:	e7ac      	b.n	800aab8 <_printf_i+0xf4>
 800ab5e:	4827      	ldr	r0, [pc, #156]	@ (800abfc <_printf_i+0x238>)
 800ab60:	e7e9      	b.n	800ab36 <_printf_i+0x172>
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	f023 0320 	bic.w	r3, r3, #32
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	e7f6      	b.n	800ab5a <_printf_i+0x196>
 800ab6c:	4616      	mov	r6, r2
 800ab6e:	e7bd      	b.n	800aaec <_printf_i+0x128>
 800ab70:	6833      	ldr	r3, [r6, #0]
 800ab72:	6825      	ldr	r5, [r4, #0]
 800ab74:	1d18      	adds	r0, r3, #4
 800ab76:	6961      	ldr	r1, [r4, #20]
 800ab78:	6030      	str	r0, [r6, #0]
 800ab7a:	062e      	lsls	r6, r5, #24
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	d501      	bpl.n	800ab84 <_printf_i+0x1c0>
 800ab80:	6019      	str	r1, [r3, #0]
 800ab82:	e002      	b.n	800ab8a <_printf_i+0x1c6>
 800ab84:	0668      	lsls	r0, r5, #25
 800ab86:	d5fb      	bpl.n	800ab80 <_printf_i+0x1bc>
 800ab88:	8019      	strh	r1, [r3, #0]
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	4616      	mov	r6, r2
 800ab8e:	6123      	str	r3, [r4, #16]
 800ab90:	e7bc      	b.n	800ab0c <_printf_i+0x148>
 800ab92:	6833      	ldr	r3, [r6, #0]
 800ab94:	2100      	movs	r1, #0
 800ab96:	1d1a      	adds	r2, r3, #4
 800ab98:	6032      	str	r2, [r6, #0]
 800ab9a:	681e      	ldr	r6, [r3, #0]
 800ab9c:	6862      	ldr	r2, [r4, #4]
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f000 fcfb 	bl	800b59a <memchr>
 800aba4:	b108      	cbz	r0, 800abaa <_printf_i+0x1e6>
 800aba6:	1b80      	subs	r0, r0, r6
 800aba8:	6060      	str	r0, [r4, #4]
 800abaa:	6863      	ldr	r3, [r4, #4]
 800abac:	6123      	str	r3, [r4, #16]
 800abae:	2300      	movs	r3, #0
 800abb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abb4:	e7aa      	b.n	800ab0c <_printf_i+0x148>
 800abb6:	6923      	ldr	r3, [r4, #16]
 800abb8:	4632      	mov	r2, r6
 800abba:	4649      	mov	r1, r9
 800abbc:	4640      	mov	r0, r8
 800abbe:	47d0      	blx	sl
 800abc0:	3001      	adds	r0, #1
 800abc2:	d0ad      	beq.n	800ab20 <_printf_i+0x15c>
 800abc4:	6823      	ldr	r3, [r4, #0]
 800abc6:	079b      	lsls	r3, r3, #30
 800abc8:	d413      	bmi.n	800abf2 <_printf_i+0x22e>
 800abca:	68e0      	ldr	r0, [r4, #12]
 800abcc:	9b03      	ldr	r3, [sp, #12]
 800abce:	4298      	cmp	r0, r3
 800abd0:	bfb8      	it	lt
 800abd2:	4618      	movlt	r0, r3
 800abd4:	e7a6      	b.n	800ab24 <_printf_i+0x160>
 800abd6:	2301      	movs	r3, #1
 800abd8:	4632      	mov	r2, r6
 800abda:	4649      	mov	r1, r9
 800abdc:	4640      	mov	r0, r8
 800abde:	47d0      	blx	sl
 800abe0:	3001      	adds	r0, #1
 800abe2:	d09d      	beq.n	800ab20 <_printf_i+0x15c>
 800abe4:	3501      	adds	r5, #1
 800abe6:	68e3      	ldr	r3, [r4, #12]
 800abe8:	9903      	ldr	r1, [sp, #12]
 800abea:	1a5b      	subs	r3, r3, r1
 800abec:	42ab      	cmp	r3, r5
 800abee:	dcf2      	bgt.n	800abd6 <_printf_i+0x212>
 800abf0:	e7eb      	b.n	800abca <_printf_i+0x206>
 800abf2:	2500      	movs	r5, #0
 800abf4:	f104 0619 	add.w	r6, r4, #25
 800abf8:	e7f5      	b.n	800abe6 <_printf_i+0x222>
 800abfa:	bf00      	nop
 800abfc:	0800ec2a 	.word	0x0800ec2a
 800ac00:	0800ec3b 	.word	0x0800ec3b

0800ac04 <_scanf_float>:
 800ac04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac08:	b087      	sub	sp, #28
 800ac0a:	4617      	mov	r7, r2
 800ac0c:	4680      	mov	r8, r0
 800ac0e:	460c      	mov	r4, r1
 800ac10:	9303      	str	r3, [sp, #12]
 800ac12:	688b      	ldr	r3, [r1, #8]
 800ac14:	1e5a      	subs	r2, r3, #1
 800ac16:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ac1a:	460a      	mov	r2, r1
 800ac1c:	bf89      	itett	hi
 800ac1e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ac22:	f04f 0b00 	movls.w	fp, #0
 800ac26:	eb03 0b05 	addhi.w	fp, r3, r5
 800ac2a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ac2e:	f04f 0500 	mov.w	r5, #0
 800ac32:	bf88      	it	hi
 800ac34:	608b      	strhi	r3, [r1, #8]
 800ac36:	680b      	ldr	r3, [r1, #0]
 800ac38:	46aa      	mov	sl, r5
 800ac3a:	46a9      	mov	r9, r5
 800ac3c:	9502      	str	r5, [sp, #8]
 800ac3e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ac42:	f842 3b1c 	str.w	r3, [r2], #28
 800ac46:	4616      	mov	r6, r2
 800ac48:	9201      	str	r2, [sp, #4]
 800ac4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ac4e:	68a2      	ldr	r2, [r4, #8]
 800ac50:	b152      	cbz	r2, 800ac68 <_scanf_float+0x64>
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	2b4e      	cmp	r3, #78	@ 0x4e
 800ac58:	d864      	bhi.n	800ad24 <_scanf_float+0x120>
 800ac5a:	2b40      	cmp	r3, #64	@ 0x40
 800ac5c:	d83c      	bhi.n	800acd8 <_scanf_float+0xd4>
 800ac5e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ac62:	b2c8      	uxtb	r0, r1
 800ac64:	280e      	cmp	r0, #14
 800ac66:	d93a      	bls.n	800acde <_scanf_float+0xda>
 800ac68:	f1b9 0f00 	cmp.w	r9, #0
 800ac6c:	d003      	beq.n	800ac76 <_scanf_float+0x72>
 800ac6e:	6823      	ldr	r3, [r4, #0]
 800ac70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac7a:	f1ba 0f01 	cmp.w	sl, #1
 800ac7e:	f200 8117 	bhi.w	800aeb0 <_scanf_float+0x2ac>
 800ac82:	9b01      	ldr	r3, [sp, #4]
 800ac84:	429e      	cmp	r6, r3
 800ac86:	f200 8108 	bhi.w	800ae9a <_scanf_float+0x296>
 800ac8a:	2001      	movs	r0, #1
 800ac8c:	b007      	add	sp, #28
 800ac8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac92:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ac96:	2a0d      	cmp	r2, #13
 800ac98:	d8e6      	bhi.n	800ac68 <_scanf_float+0x64>
 800ac9a:	a101      	add	r1, pc, #4	@ (adr r1, 800aca0 <_scanf_float+0x9c>)
 800ac9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aca0:	0800ade7 	.word	0x0800ade7
 800aca4:	0800ac69 	.word	0x0800ac69
 800aca8:	0800ac69 	.word	0x0800ac69
 800acac:	0800ac69 	.word	0x0800ac69
 800acb0:	0800ae47 	.word	0x0800ae47
 800acb4:	0800ae1f 	.word	0x0800ae1f
 800acb8:	0800ac69 	.word	0x0800ac69
 800acbc:	0800ac69 	.word	0x0800ac69
 800acc0:	0800adf5 	.word	0x0800adf5
 800acc4:	0800ac69 	.word	0x0800ac69
 800acc8:	0800ac69 	.word	0x0800ac69
 800accc:	0800ac69 	.word	0x0800ac69
 800acd0:	0800ac69 	.word	0x0800ac69
 800acd4:	0800adad 	.word	0x0800adad
 800acd8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800acdc:	e7db      	b.n	800ac96 <_scanf_float+0x92>
 800acde:	290e      	cmp	r1, #14
 800ace0:	d8c2      	bhi.n	800ac68 <_scanf_float+0x64>
 800ace2:	a001      	add	r0, pc, #4	@ (adr r0, 800ace8 <_scanf_float+0xe4>)
 800ace4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ace8:	0800ad9d 	.word	0x0800ad9d
 800acec:	0800ac69 	.word	0x0800ac69
 800acf0:	0800ad9d 	.word	0x0800ad9d
 800acf4:	0800ae33 	.word	0x0800ae33
 800acf8:	0800ac69 	.word	0x0800ac69
 800acfc:	0800ad45 	.word	0x0800ad45
 800ad00:	0800ad83 	.word	0x0800ad83
 800ad04:	0800ad83 	.word	0x0800ad83
 800ad08:	0800ad83 	.word	0x0800ad83
 800ad0c:	0800ad83 	.word	0x0800ad83
 800ad10:	0800ad83 	.word	0x0800ad83
 800ad14:	0800ad83 	.word	0x0800ad83
 800ad18:	0800ad83 	.word	0x0800ad83
 800ad1c:	0800ad83 	.word	0x0800ad83
 800ad20:	0800ad83 	.word	0x0800ad83
 800ad24:	2b6e      	cmp	r3, #110	@ 0x6e
 800ad26:	d809      	bhi.n	800ad3c <_scanf_float+0x138>
 800ad28:	2b60      	cmp	r3, #96	@ 0x60
 800ad2a:	d8b2      	bhi.n	800ac92 <_scanf_float+0x8e>
 800ad2c:	2b54      	cmp	r3, #84	@ 0x54
 800ad2e:	d07b      	beq.n	800ae28 <_scanf_float+0x224>
 800ad30:	2b59      	cmp	r3, #89	@ 0x59
 800ad32:	d199      	bne.n	800ac68 <_scanf_float+0x64>
 800ad34:	2d07      	cmp	r5, #7
 800ad36:	d197      	bne.n	800ac68 <_scanf_float+0x64>
 800ad38:	2508      	movs	r5, #8
 800ad3a:	e02c      	b.n	800ad96 <_scanf_float+0x192>
 800ad3c:	2b74      	cmp	r3, #116	@ 0x74
 800ad3e:	d073      	beq.n	800ae28 <_scanf_float+0x224>
 800ad40:	2b79      	cmp	r3, #121	@ 0x79
 800ad42:	e7f6      	b.n	800ad32 <_scanf_float+0x12e>
 800ad44:	6821      	ldr	r1, [r4, #0]
 800ad46:	05c8      	lsls	r0, r1, #23
 800ad48:	d51b      	bpl.n	800ad82 <_scanf_float+0x17e>
 800ad4a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ad4e:	f109 0901 	add.w	r9, r9, #1
 800ad52:	6021      	str	r1, [r4, #0]
 800ad54:	f1bb 0f00 	cmp.w	fp, #0
 800ad58:	d003      	beq.n	800ad62 <_scanf_float+0x15e>
 800ad5a:	3201      	adds	r2, #1
 800ad5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad60:	60a2      	str	r2, [r4, #8]
 800ad62:	68a3      	ldr	r3, [r4, #8]
 800ad64:	3b01      	subs	r3, #1
 800ad66:	60a3      	str	r3, [r4, #8]
 800ad68:	6923      	ldr	r3, [r4, #16]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	6123      	str	r3, [r4, #16]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	3b01      	subs	r3, #1
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	607b      	str	r3, [r7, #4]
 800ad76:	f340 8087 	ble.w	800ae88 <_scanf_float+0x284>
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	603b      	str	r3, [r7, #0]
 800ad80:	e765      	b.n	800ac4e <_scanf_float+0x4a>
 800ad82:	eb1a 0105 	adds.w	r1, sl, r5
 800ad86:	f47f af6f 	bne.w	800ac68 <_scanf_float+0x64>
 800ad8a:	6822      	ldr	r2, [r4, #0]
 800ad8c:	460d      	mov	r5, r1
 800ad8e:	468a      	mov	sl, r1
 800ad90:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ad94:	6022      	str	r2, [r4, #0]
 800ad96:	f806 3b01 	strb.w	r3, [r6], #1
 800ad9a:	e7e2      	b.n	800ad62 <_scanf_float+0x15e>
 800ad9c:	6822      	ldr	r2, [r4, #0]
 800ad9e:	0610      	lsls	r0, r2, #24
 800ada0:	f57f af62 	bpl.w	800ac68 <_scanf_float+0x64>
 800ada4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ada8:	6022      	str	r2, [r4, #0]
 800adaa:	e7f4      	b.n	800ad96 <_scanf_float+0x192>
 800adac:	f1ba 0f00 	cmp.w	sl, #0
 800adb0:	d10e      	bne.n	800add0 <_scanf_float+0x1cc>
 800adb2:	f1b9 0f00 	cmp.w	r9, #0
 800adb6:	d10e      	bne.n	800add6 <_scanf_float+0x1d2>
 800adb8:	6822      	ldr	r2, [r4, #0]
 800adba:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800adbe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800adc2:	d108      	bne.n	800add6 <_scanf_float+0x1d2>
 800adc4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800adc8:	f04f 0a01 	mov.w	sl, #1
 800adcc:	6022      	str	r2, [r4, #0]
 800adce:	e7e2      	b.n	800ad96 <_scanf_float+0x192>
 800add0:	f1ba 0f02 	cmp.w	sl, #2
 800add4:	d055      	beq.n	800ae82 <_scanf_float+0x27e>
 800add6:	2d01      	cmp	r5, #1
 800add8:	d002      	beq.n	800ade0 <_scanf_float+0x1dc>
 800adda:	2d04      	cmp	r5, #4
 800addc:	f47f af44 	bne.w	800ac68 <_scanf_float+0x64>
 800ade0:	3501      	adds	r5, #1
 800ade2:	b2ed      	uxtb	r5, r5
 800ade4:	e7d7      	b.n	800ad96 <_scanf_float+0x192>
 800ade6:	f1ba 0f01 	cmp.w	sl, #1
 800adea:	f47f af3d 	bne.w	800ac68 <_scanf_float+0x64>
 800adee:	f04f 0a02 	mov.w	sl, #2
 800adf2:	e7d0      	b.n	800ad96 <_scanf_float+0x192>
 800adf4:	b97d      	cbnz	r5, 800ae16 <_scanf_float+0x212>
 800adf6:	f1b9 0f00 	cmp.w	r9, #0
 800adfa:	f47f af38 	bne.w	800ac6e <_scanf_float+0x6a>
 800adfe:	6822      	ldr	r2, [r4, #0]
 800ae00:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ae04:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ae08:	f040 8107 	bne.w	800b01a <_scanf_float+0x416>
 800ae0c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ae10:	2501      	movs	r5, #1
 800ae12:	6022      	str	r2, [r4, #0]
 800ae14:	e7bf      	b.n	800ad96 <_scanf_float+0x192>
 800ae16:	2d03      	cmp	r5, #3
 800ae18:	d0e2      	beq.n	800ade0 <_scanf_float+0x1dc>
 800ae1a:	2d05      	cmp	r5, #5
 800ae1c:	e7de      	b.n	800addc <_scanf_float+0x1d8>
 800ae1e:	2d02      	cmp	r5, #2
 800ae20:	f47f af22 	bne.w	800ac68 <_scanf_float+0x64>
 800ae24:	2503      	movs	r5, #3
 800ae26:	e7b6      	b.n	800ad96 <_scanf_float+0x192>
 800ae28:	2d06      	cmp	r5, #6
 800ae2a:	f47f af1d 	bne.w	800ac68 <_scanf_float+0x64>
 800ae2e:	2507      	movs	r5, #7
 800ae30:	e7b1      	b.n	800ad96 <_scanf_float+0x192>
 800ae32:	6822      	ldr	r2, [r4, #0]
 800ae34:	0591      	lsls	r1, r2, #22
 800ae36:	f57f af17 	bpl.w	800ac68 <_scanf_float+0x64>
 800ae3a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ae3e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ae42:	6022      	str	r2, [r4, #0]
 800ae44:	e7a7      	b.n	800ad96 <_scanf_float+0x192>
 800ae46:	6822      	ldr	r2, [r4, #0]
 800ae48:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ae4c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ae50:	d006      	beq.n	800ae60 <_scanf_float+0x25c>
 800ae52:	0550      	lsls	r0, r2, #21
 800ae54:	f57f af08 	bpl.w	800ac68 <_scanf_float+0x64>
 800ae58:	f1b9 0f00 	cmp.w	r9, #0
 800ae5c:	f000 80dd 	beq.w	800b01a <_scanf_float+0x416>
 800ae60:	0591      	lsls	r1, r2, #22
 800ae62:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ae66:	bf58      	it	pl
 800ae68:	9902      	ldrpl	r1, [sp, #8]
 800ae6a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ae6e:	bf58      	it	pl
 800ae70:	eba9 0101 	subpl.w	r1, r9, r1
 800ae74:	6022      	str	r2, [r4, #0]
 800ae76:	f04f 0900 	mov.w	r9, #0
 800ae7a:	bf58      	it	pl
 800ae7c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ae80:	e789      	b.n	800ad96 <_scanf_float+0x192>
 800ae82:	f04f 0a03 	mov.w	sl, #3
 800ae86:	e786      	b.n	800ad96 <_scanf_float+0x192>
 800ae88:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ae8c:	4639      	mov	r1, r7
 800ae8e:	4640      	mov	r0, r8
 800ae90:	4798      	blx	r3
 800ae92:	2800      	cmp	r0, #0
 800ae94:	f43f aedb 	beq.w	800ac4e <_scanf_float+0x4a>
 800ae98:	e6e6      	b.n	800ac68 <_scanf_float+0x64>
 800ae9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ae9e:	463a      	mov	r2, r7
 800aea0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aea4:	4640      	mov	r0, r8
 800aea6:	4798      	blx	r3
 800aea8:	6923      	ldr	r3, [r4, #16]
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	6123      	str	r3, [r4, #16]
 800aeae:	e6e8      	b.n	800ac82 <_scanf_float+0x7e>
 800aeb0:	1e6b      	subs	r3, r5, #1
 800aeb2:	2b06      	cmp	r3, #6
 800aeb4:	d824      	bhi.n	800af00 <_scanf_float+0x2fc>
 800aeb6:	2d02      	cmp	r5, #2
 800aeb8:	d836      	bhi.n	800af28 <_scanf_float+0x324>
 800aeba:	9b01      	ldr	r3, [sp, #4]
 800aebc:	429e      	cmp	r6, r3
 800aebe:	f67f aee4 	bls.w	800ac8a <_scanf_float+0x86>
 800aec2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aec6:	463a      	mov	r2, r7
 800aec8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aecc:	4640      	mov	r0, r8
 800aece:	4798      	blx	r3
 800aed0:	6923      	ldr	r3, [r4, #16]
 800aed2:	3b01      	subs	r3, #1
 800aed4:	6123      	str	r3, [r4, #16]
 800aed6:	e7f0      	b.n	800aeba <_scanf_float+0x2b6>
 800aed8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aedc:	463a      	mov	r2, r7
 800aede:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800aee2:	4640      	mov	r0, r8
 800aee4:	4798      	blx	r3
 800aee6:	6923      	ldr	r3, [r4, #16]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	6123      	str	r3, [r4, #16]
 800aeec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aef0:	fa5f fa8a 	uxtb.w	sl, sl
 800aef4:	f1ba 0f02 	cmp.w	sl, #2
 800aef8:	d1ee      	bne.n	800aed8 <_scanf_float+0x2d4>
 800aefa:	3d03      	subs	r5, #3
 800aefc:	b2ed      	uxtb	r5, r5
 800aefe:	1b76      	subs	r6, r6, r5
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	05da      	lsls	r2, r3, #23
 800af04:	d52f      	bpl.n	800af66 <_scanf_float+0x362>
 800af06:	055b      	lsls	r3, r3, #21
 800af08:	d511      	bpl.n	800af2e <_scanf_float+0x32a>
 800af0a:	9b01      	ldr	r3, [sp, #4]
 800af0c:	429e      	cmp	r6, r3
 800af0e:	f67f aebc 	bls.w	800ac8a <_scanf_float+0x86>
 800af12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800af16:	463a      	mov	r2, r7
 800af18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af1c:	4640      	mov	r0, r8
 800af1e:	4798      	blx	r3
 800af20:	6923      	ldr	r3, [r4, #16]
 800af22:	3b01      	subs	r3, #1
 800af24:	6123      	str	r3, [r4, #16]
 800af26:	e7f0      	b.n	800af0a <_scanf_float+0x306>
 800af28:	46aa      	mov	sl, r5
 800af2a:	46b3      	mov	fp, r6
 800af2c:	e7de      	b.n	800aeec <_scanf_float+0x2e8>
 800af2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800af32:	1e75      	subs	r5, r6, #1
 800af34:	6923      	ldr	r3, [r4, #16]
 800af36:	2965      	cmp	r1, #101	@ 0x65
 800af38:	f103 33ff 	add.w	r3, r3, #4294967295
 800af3c:	6123      	str	r3, [r4, #16]
 800af3e:	d00c      	beq.n	800af5a <_scanf_float+0x356>
 800af40:	2945      	cmp	r1, #69	@ 0x45
 800af42:	d00a      	beq.n	800af5a <_scanf_float+0x356>
 800af44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800af48:	463a      	mov	r2, r7
 800af4a:	4640      	mov	r0, r8
 800af4c:	1eb5      	subs	r5, r6, #2
 800af4e:	4798      	blx	r3
 800af50:	6923      	ldr	r3, [r4, #16]
 800af52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800af56:	3b01      	subs	r3, #1
 800af58:	6123      	str	r3, [r4, #16]
 800af5a:	462e      	mov	r6, r5
 800af5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800af60:	463a      	mov	r2, r7
 800af62:	4640      	mov	r0, r8
 800af64:	4798      	blx	r3
 800af66:	6822      	ldr	r2, [r4, #0]
 800af68:	f012 0210 	ands.w	r2, r2, #16
 800af6c:	d001      	beq.n	800af72 <_scanf_float+0x36e>
 800af6e:	2000      	movs	r0, #0
 800af70:	e68c      	b.n	800ac8c <_scanf_float+0x88>
 800af72:	7032      	strb	r2, [r6, #0]
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800af7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af7e:	d11c      	bne.n	800afba <_scanf_float+0x3b6>
 800af80:	9b02      	ldr	r3, [sp, #8]
 800af82:	454b      	cmp	r3, r9
 800af84:	eba3 0209 	sub.w	r2, r3, r9
 800af88:	d123      	bne.n	800afd2 <_scanf_float+0x3ce>
 800af8a:	2200      	movs	r2, #0
 800af8c:	9901      	ldr	r1, [sp, #4]
 800af8e:	4640      	mov	r0, r8
 800af90:	f002 fc72 	bl	800d878 <_strtod_r>
 800af94:	6821      	ldr	r1, [r4, #0]
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	f011 0f02 	tst.w	r1, #2
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	ec57 6b10 	vmov	r6, r7, d0
 800afa2:	f103 0204 	add.w	r2, r3, #4
 800afa6:	d01f      	beq.n	800afe8 <_scanf_float+0x3e4>
 800afa8:	9903      	ldr	r1, [sp, #12]
 800afaa:	600a      	str	r2, [r1, #0]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	e9c3 6700 	strd	r6, r7, [r3]
 800afb2:	68e3      	ldr	r3, [r4, #12]
 800afb4:	3301      	adds	r3, #1
 800afb6:	60e3      	str	r3, [r4, #12]
 800afb8:	e7d9      	b.n	800af6e <_scanf_float+0x36a>
 800afba:	9b04      	ldr	r3, [sp, #16]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d0e4      	beq.n	800af8a <_scanf_float+0x386>
 800afc0:	9905      	ldr	r1, [sp, #20]
 800afc2:	230a      	movs	r3, #10
 800afc4:	4640      	mov	r0, r8
 800afc6:	3101      	adds	r1, #1
 800afc8:	f002 fcd6 	bl	800d978 <_strtol_r>
 800afcc:	9b04      	ldr	r3, [sp, #16]
 800afce:	9e05      	ldr	r6, [sp, #20]
 800afd0:	1ac2      	subs	r2, r0, r3
 800afd2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800afd6:	4912      	ldr	r1, [pc, #72]	@ (800b020 <_scanf_float+0x41c>)
 800afd8:	429e      	cmp	r6, r3
 800afda:	bf28      	it	cs
 800afdc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800afe0:	4630      	mov	r0, r6
 800afe2:	f000 f953 	bl	800b28c <siprintf>
 800afe6:	e7d0      	b.n	800af8a <_scanf_float+0x386>
 800afe8:	f011 0f04 	tst.w	r1, #4
 800afec:	9903      	ldr	r1, [sp, #12]
 800afee:	600a      	str	r2, [r1, #0]
 800aff0:	d1dc      	bne.n	800afac <_scanf_float+0x3a8>
 800aff2:	681d      	ldr	r5, [r3, #0]
 800aff4:	4632      	mov	r2, r6
 800aff6:	463b      	mov	r3, r7
 800aff8:	4630      	mov	r0, r6
 800affa:	4639      	mov	r1, r7
 800affc:	f7f5 fda6 	bl	8000b4c <__aeabi_dcmpun>
 800b000:	b128      	cbz	r0, 800b00e <_scanf_float+0x40a>
 800b002:	4808      	ldr	r0, [pc, #32]	@ (800b024 <_scanf_float+0x420>)
 800b004:	f000 fad8 	bl	800b5b8 <nanf>
 800b008:	ed85 0a00 	vstr	s0, [r5]
 800b00c:	e7d1      	b.n	800afb2 <_scanf_float+0x3ae>
 800b00e:	4630      	mov	r0, r6
 800b010:	4639      	mov	r1, r7
 800b012:	f7f5 fdf9 	bl	8000c08 <__aeabi_d2f>
 800b016:	6028      	str	r0, [r5, #0]
 800b018:	e7cb      	b.n	800afb2 <_scanf_float+0x3ae>
 800b01a:	f04f 0900 	mov.w	r9, #0
 800b01e:	e62a      	b.n	800ac76 <_scanf_float+0x72>
 800b020:	0800ec4c 	.word	0x0800ec4c
 800b024:	0800efe5 	.word	0x0800efe5

0800b028 <std>:
 800b028:	2300      	movs	r3, #0
 800b02a:	b510      	push	{r4, lr}
 800b02c:	4604      	mov	r4, r0
 800b02e:	6083      	str	r3, [r0, #8]
 800b030:	8181      	strh	r1, [r0, #12]
 800b032:	4619      	mov	r1, r3
 800b034:	6643      	str	r3, [r0, #100]	@ 0x64
 800b036:	81c2      	strh	r2, [r0, #14]
 800b038:	2208      	movs	r2, #8
 800b03a:	6183      	str	r3, [r0, #24]
 800b03c:	e9c0 3300 	strd	r3, r3, [r0]
 800b040:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b044:	305c      	adds	r0, #92	@ 0x5c
 800b046:	f000 fa19 	bl	800b47c <memset>
 800b04a:	4b0d      	ldr	r3, [pc, #52]	@ (800b080 <std+0x58>)
 800b04c:	6224      	str	r4, [r4, #32]
 800b04e:	6263      	str	r3, [r4, #36]	@ 0x24
 800b050:	4b0c      	ldr	r3, [pc, #48]	@ (800b084 <std+0x5c>)
 800b052:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b054:	4b0c      	ldr	r3, [pc, #48]	@ (800b088 <std+0x60>)
 800b056:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b058:	4b0c      	ldr	r3, [pc, #48]	@ (800b08c <std+0x64>)
 800b05a:	6323      	str	r3, [r4, #48]	@ 0x30
 800b05c:	4b0c      	ldr	r3, [pc, #48]	@ (800b090 <std+0x68>)
 800b05e:	429c      	cmp	r4, r3
 800b060:	d006      	beq.n	800b070 <std+0x48>
 800b062:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b066:	4294      	cmp	r4, r2
 800b068:	d002      	beq.n	800b070 <std+0x48>
 800b06a:	33d0      	adds	r3, #208	@ 0xd0
 800b06c:	429c      	cmp	r4, r3
 800b06e:	d105      	bne.n	800b07c <std+0x54>
 800b070:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b078:	f000 ba8c 	b.w	800b594 <__retarget_lock_init_recursive>
 800b07c:	bd10      	pop	{r4, pc}
 800b07e:	bf00      	nop
 800b080:	0800b2cd 	.word	0x0800b2cd
 800b084:	0800b2ef 	.word	0x0800b2ef
 800b088:	0800b327 	.word	0x0800b327
 800b08c:	0800b34b 	.word	0x0800b34b
 800b090:	200004a4 	.word	0x200004a4

0800b094 <stdio_exit_handler>:
 800b094:	4a02      	ldr	r2, [pc, #8]	@ (800b0a0 <stdio_exit_handler+0xc>)
 800b096:	4903      	ldr	r1, [pc, #12]	@ (800b0a4 <stdio_exit_handler+0x10>)
 800b098:	4803      	ldr	r0, [pc, #12]	@ (800b0a8 <stdio_exit_handler+0x14>)
 800b09a:	f000 b869 	b.w	800b170 <_fwalk_sglue>
 800b09e:	bf00      	nop
 800b0a0:	20000050 	.word	0x20000050
 800b0a4:	0800dfb9 	.word	0x0800dfb9
 800b0a8:	20000060 	.word	0x20000060

0800b0ac <cleanup_stdio>:
 800b0ac:	6841      	ldr	r1, [r0, #4]
 800b0ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b0e0 <cleanup_stdio+0x34>)
 800b0b0:	4299      	cmp	r1, r3
 800b0b2:	b510      	push	{r4, lr}
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	d001      	beq.n	800b0bc <cleanup_stdio+0x10>
 800b0b8:	f002 ff7e 	bl	800dfb8 <_fflush_r>
 800b0bc:	68a1      	ldr	r1, [r4, #8]
 800b0be:	4b09      	ldr	r3, [pc, #36]	@ (800b0e4 <cleanup_stdio+0x38>)
 800b0c0:	4299      	cmp	r1, r3
 800b0c2:	d002      	beq.n	800b0ca <cleanup_stdio+0x1e>
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f002 ff77 	bl	800dfb8 <_fflush_r>
 800b0ca:	68e1      	ldr	r1, [r4, #12]
 800b0cc:	4b06      	ldr	r3, [pc, #24]	@ (800b0e8 <cleanup_stdio+0x3c>)
 800b0ce:	4299      	cmp	r1, r3
 800b0d0:	d004      	beq.n	800b0dc <cleanup_stdio+0x30>
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0d8:	f002 bf6e 	b.w	800dfb8 <_fflush_r>
 800b0dc:	bd10      	pop	{r4, pc}
 800b0de:	bf00      	nop
 800b0e0:	200004a4 	.word	0x200004a4
 800b0e4:	2000050c 	.word	0x2000050c
 800b0e8:	20000574 	.word	0x20000574

0800b0ec <global_stdio_init.part.0>:
 800b0ec:	b510      	push	{r4, lr}
 800b0ee:	4b0b      	ldr	r3, [pc, #44]	@ (800b11c <global_stdio_init.part.0+0x30>)
 800b0f0:	2104      	movs	r1, #4
 800b0f2:	4c0b      	ldr	r4, [pc, #44]	@ (800b120 <global_stdio_init.part.0+0x34>)
 800b0f4:	4a0b      	ldr	r2, [pc, #44]	@ (800b124 <global_stdio_init.part.0+0x38>)
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	601a      	str	r2, [r3, #0]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f7ff ff94 	bl	800b028 <std>
 800b100:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b104:	2201      	movs	r2, #1
 800b106:	2109      	movs	r1, #9
 800b108:	f7ff ff8e 	bl	800b028 <std>
 800b10c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b110:	2202      	movs	r2, #2
 800b112:	2112      	movs	r1, #18
 800b114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b118:	f7ff bf86 	b.w	800b028 <std>
 800b11c:	200005dc 	.word	0x200005dc
 800b120:	200004a4 	.word	0x200004a4
 800b124:	0800b095 	.word	0x0800b095

0800b128 <__sfp_lock_acquire>:
 800b128:	4801      	ldr	r0, [pc, #4]	@ (800b130 <__sfp_lock_acquire+0x8>)
 800b12a:	f000 ba34 	b.w	800b596 <__retarget_lock_acquire_recursive>
 800b12e:	bf00      	nop
 800b130:	200005e5 	.word	0x200005e5

0800b134 <__sfp_lock_release>:
 800b134:	4801      	ldr	r0, [pc, #4]	@ (800b13c <__sfp_lock_release+0x8>)
 800b136:	f000 ba2f 	b.w	800b598 <__retarget_lock_release_recursive>
 800b13a:	bf00      	nop
 800b13c:	200005e5 	.word	0x200005e5

0800b140 <__sinit>:
 800b140:	b510      	push	{r4, lr}
 800b142:	4604      	mov	r4, r0
 800b144:	f7ff fff0 	bl	800b128 <__sfp_lock_acquire>
 800b148:	6a23      	ldr	r3, [r4, #32]
 800b14a:	b11b      	cbz	r3, 800b154 <__sinit+0x14>
 800b14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b150:	f7ff bff0 	b.w	800b134 <__sfp_lock_release>
 800b154:	4b04      	ldr	r3, [pc, #16]	@ (800b168 <__sinit+0x28>)
 800b156:	6223      	str	r3, [r4, #32]
 800b158:	4b04      	ldr	r3, [pc, #16]	@ (800b16c <__sinit+0x2c>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d1f5      	bne.n	800b14c <__sinit+0xc>
 800b160:	f7ff ffc4 	bl	800b0ec <global_stdio_init.part.0>
 800b164:	e7f2      	b.n	800b14c <__sinit+0xc>
 800b166:	bf00      	nop
 800b168:	0800b0ad 	.word	0x0800b0ad
 800b16c:	200005dc 	.word	0x200005dc

0800b170 <_fwalk_sglue>:
 800b170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b174:	4607      	mov	r7, r0
 800b176:	4688      	mov	r8, r1
 800b178:	4614      	mov	r4, r2
 800b17a:	2600      	movs	r6, #0
 800b17c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b180:	f1b9 0901 	subs.w	r9, r9, #1
 800b184:	d505      	bpl.n	800b192 <_fwalk_sglue+0x22>
 800b186:	6824      	ldr	r4, [r4, #0]
 800b188:	2c00      	cmp	r4, #0
 800b18a:	d1f7      	bne.n	800b17c <_fwalk_sglue+0xc>
 800b18c:	4630      	mov	r0, r6
 800b18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b192:	89ab      	ldrh	r3, [r5, #12]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d907      	bls.n	800b1a8 <_fwalk_sglue+0x38>
 800b198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b19c:	3301      	adds	r3, #1
 800b19e:	d003      	beq.n	800b1a8 <_fwalk_sglue+0x38>
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4638      	mov	r0, r7
 800b1a4:	47c0      	blx	r8
 800b1a6:	4306      	orrs	r6, r0
 800b1a8:	3568      	adds	r5, #104	@ 0x68
 800b1aa:	e7e9      	b.n	800b180 <_fwalk_sglue+0x10>

0800b1ac <iprintf>:
 800b1ac:	b40f      	push	{r0, r1, r2, r3}
 800b1ae:	b507      	push	{r0, r1, r2, lr}
 800b1b0:	4906      	ldr	r1, [pc, #24]	@ (800b1cc <iprintf+0x20>)
 800b1b2:	ab04      	add	r3, sp, #16
 800b1b4:	6808      	ldr	r0, [r1, #0]
 800b1b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ba:	6881      	ldr	r1, [r0, #8]
 800b1bc:	9301      	str	r3, [sp, #4]
 800b1be:	f002 fd5f 	bl	800dc80 <_vfiprintf_r>
 800b1c2:	b003      	add	sp, #12
 800b1c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1c8:	b004      	add	sp, #16
 800b1ca:	4770      	bx	lr
 800b1cc:	2000005c 	.word	0x2000005c

0800b1d0 <_puts_r>:
 800b1d0:	6a03      	ldr	r3, [r0, #32]
 800b1d2:	b570      	push	{r4, r5, r6, lr}
 800b1d4:	4605      	mov	r5, r0
 800b1d6:	460e      	mov	r6, r1
 800b1d8:	6884      	ldr	r4, [r0, #8]
 800b1da:	b90b      	cbnz	r3, 800b1e0 <_puts_r+0x10>
 800b1dc:	f7ff ffb0 	bl	800b140 <__sinit>
 800b1e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1e2:	07db      	lsls	r3, r3, #31
 800b1e4:	d405      	bmi.n	800b1f2 <_puts_r+0x22>
 800b1e6:	89a3      	ldrh	r3, [r4, #12]
 800b1e8:	0598      	lsls	r0, r3, #22
 800b1ea:	d402      	bmi.n	800b1f2 <_puts_r+0x22>
 800b1ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1ee:	f000 f9d2 	bl	800b596 <__retarget_lock_acquire_recursive>
 800b1f2:	89a3      	ldrh	r3, [r4, #12]
 800b1f4:	0719      	lsls	r1, r3, #28
 800b1f6:	d502      	bpl.n	800b1fe <_puts_r+0x2e>
 800b1f8:	6923      	ldr	r3, [r4, #16]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d135      	bne.n	800b26a <_puts_r+0x9a>
 800b1fe:	4621      	mov	r1, r4
 800b200:	4628      	mov	r0, r5
 800b202:	f000 f8e5 	bl	800b3d0 <__swsetup_r>
 800b206:	b380      	cbz	r0, 800b26a <_puts_r+0x9a>
 800b208:	f04f 35ff 	mov.w	r5, #4294967295
 800b20c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b20e:	07da      	lsls	r2, r3, #31
 800b210:	d405      	bmi.n	800b21e <_puts_r+0x4e>
 800b212:	89a3      	ldrh	r3, [r4, #12]
 800b214:	059b      	lsls	r3, r3, #22
 800b216:	d402      	bmi.n	800b21e <_puts_r+0x4e>
 800b218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b21a:	f000 f9bd 	bl	800b598 <__retarget_lock_release_recursive>
 800b21e:	4628      	mov	r0, r5
 800b220:	bd70      	pop	{r4, r5, r6, pc}
 800b222:	2b00      	cmp	r3, #0
 800b224:	da04      	bge.n	800b230 <_puts_r+0x60>
 800b226:	69a2      	ldr	r2, [r4, #24]
 800b228:	429a      	cmp	r2, r3
 800b22a:	dc17      	bgt.n	800b25c <_puts_r+0x8c>
 800b22c:	290a      	cmp	r1, #10
 800b22e:	d015      	beq.n	800b25c <_puts_r+0x8c>
 800b230:	6823      	ldr	r3, [r4, #0]
 800b232:	1c5a      	adds	r2, r3, #1
 800b234:	6022      	str	r2, [r4, #0]
 800b236:	7019      	strb	r1, [r3, #0]
 800b238:	68a3      	ldr	r3, [r4, #8]
 800b23a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b23e:	3b01      	subs	r3, #1
 800b240:	60a3      	str	r3, [r4, #8]
 800b242:	2900      	cmp	r1, #0
 800b244:	d1ed      	bne.n	800b222 <_puts_r+0x52>
 800b246:	2b00      	cmp	r3, #0
 800b248:	da11      	bge.n	800b26e <_puts_r+0x9e>
 800b24a:	4622      	mov	r2, r4
 800b24c:	210a      	movs	r1, #10
 800b24e:	4628      	mov	r0, r5
 800b250:	f000 f87f 	bl	800b352 <__swbuf_r>
 800b254:	3001      	adds	r0, #1
 800b256:	d0d7      	beq.n	800b208 <_puts_r+0x38>
 800b258:	250a      	movs	r5, #10
 800b25a:	e7d7      	b.n	800b20c <_puts_r+0x3c>
 800b25c:	4622      	mov	r2, r4
 800b25e:	4628      	mov	r0, r5
 800b260:	f000 f877 	bl	800b352 <__swbuf_r>
 800b264:	3001      	adds	r0, #1
 800b266:	d1e7      	bne.n	800b238 <_puts_r+0x68>
 800b268:	e7ce      	b.n	800b208 <_puts_r+0x38>
 800b26a:	3e01      	subs	r6, #1
 800b26c:	e7e4      	b.n	800b238 <_puts_r+0x68>
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	1c5a      	adds	r2, r3, #1
 800b272:	6022      	str	r2, [r4, #0]
 800b274:	220a      	movs	r2, #10
 800b276:	701a      	strb	r2, [r3, #0]
 800b278:	e7ee      	b.n	800b258 <_puts_r+0x88>
	...

0800b27c <puts>:
 800b27c:	4b02      	ldr	r3, [pc, #8]	@ (800b288 <puts+0xc>)
 800b27e:	4601      	mov	r1, r0
 800b280:	6818      	ldr	r0, [r3, #0]
 800b282:	f7ff bfa5 	b.w	800b1d0 <_puts_r>
 800b286:	bf00      	nop
 800b288:	2000005c 	.word	0x2000005c

0800b28c <siprintf>:
 800b28c:	b40e      	push	{r1, r2, r3}
 800b28e:	b500      	push	{lr}
 800b290:	b09c      	sub	sp, #112	@ 0x70
 800b292:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b296:	ab1d      	add	r3, sp, #116	@ 0x74
 800b298:	9002      	str	r0, [sp, #8]
 800b29a:	9006      	str	r0, [sp, #24]
 800b29c:	9107      	str	r1, [sp, #28]
 800b29e:	9104      	str	r1, [sp, #16]
 800b2a0:	4808      	ldr	r0, [pc, #32]	@ (800b2c4 <siprintf+0x38>)
 800b2a2:	4909      	ldr	r1, [pc, #36]	@ (800b2c8 <siprintf+0x3c>)
 800b2a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2a8:	9105      	str	r1, [sp, #20]
 800b2aa:	a902      	add	r1, sp, #8
 800b2ac:	6800      	ldr	r0, [r0, #0]
 800b2ae:	9301      	str	r3, [sp, #4]
 800b2b0:	f002 fbc0 	bl	800da34 <_svfiprintf_r>
 800b2b4:	9b02      	ldr	r3, [sp, #8]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	701a      	strb	r2, [r3, #0]
 800b2ba:	b01c      	add	sp, #112	@ 0x70
 800b2bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2c0:	b003      	add	sp, #12
 800b2c2:	4770      	bx	lr
 800b2c4:	2000005c 	.word	0x2000005c
 800b2c8:	ffff0208 	.word	0xffff0208

0800b2cc <__sread>:
 800b2cc:	b510      	push	{r4, lr}
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2d4:	f000 f900 	bl	800b4d8 <_read_r>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	bfab      	itete	ge
 800b2dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b2de:	89a3      	ldrhlt	r3, [r4, #12]
 800b2e0:	181b      	addge	r3, r3, r0
 800b2e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b2e6:	bfac      	ite	ge
 800b2e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b2ea:	81a3      	strhlt	r3, [r4, #12]
 800b2ec:	bd10      	pop	{r4, pc}

0800b2ee <__swrite>:
 800b2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f2:	461f      	mov	r7, r3
 800b2f4:	898b      	ldrh	r3, [r1, #12]
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	05db      	lsls	r3, r3, #23
 800b2fc:	4616      	mov	r6, r2
 800b2fe:	d505      	bpl.n	800b30c <__swrite+0x1e>
 800b300:	2302      	movs	r3, #2
 800b302:	2200      	movs	r2, #0
 800b304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b308:	f000 f8d4 	bl	800b4b4 <_lseek_r>
 800b30c:	89a3      	ldrh	r3, [r4, #12]
 800b30e:	4632      	mov	r2, r6
 800b310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b314:	4628      	mov	r0, r5
 800b316:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b31a:	81a3      	strh	r3, [r4, #12]
 800b31c:	463b      	mov	r3, r7
 800b31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b322:	f000 b8fb 	b.w	800b51c <_write_r>

0800b326 <__sseek>:
 800b326:	b510      	push	{r4, lr}
 800b328:	460c      	mov	r4, r1
 800b32a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b32e:	f000 f8c1 	bl	800b4b4 <_lseek_r>
 800b332:	1c43      	adds	r3, r0, #1
 800b334:	89a3      	ldrh	r3, [r4, #12]
 800b336:	bf15      	itete	ne
 800b338:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b33a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b33e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b342:	81a3      	strheq	r3, [r4, #12]
 800b344:	bf18      	it	ne
 800b346:	81a3      	strhne	r3, [r4, #12]
 800b348:	bd10      	pop	{r4, pc}

0800b34a <__sclose>:
 800b34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34e:	f000 b8a1 	b.w	800b494 <_close_r>

0800b352 <__swbuf_r>:
 800b352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b354:	460e      	mov	r6, r1
 800b356:	4614      	mov	r4, r2
 800b358:	4605      	mov	r5, r0
 800b35a:	b118      	cbz	r0, 800b364 <__swbuf_r+0x12>
 800b35c:	6a03      	ldr	r3, [r0, #32]
 800b35e:	b90b      	cbnz	r3, 800b364 <__swbuf_r+0x12>
 800b360:	f7ff feee 	bl	800b140 <__sinit>
 800b364:	69a3      	ldr	r3, [r4, #24]
 800b366:	60a3      	str	r3, [r4, #8]
 800b368:	89a3      	ldrh	r3, [r4, #12]
 800b36a:	071a      	lsls	r2, r3, #28
 800b36c:	d501      	bpl.n	800b372 <__swbuf_r+0x20>
 800b36e:	6923      	ldr	r3, [r4, #16]
 800b370:	b943      	cbnz	r3, 800b384 <__swbuf_r+0x32>
 800b372:	4621      	mov	r1, r4
 800b374:	4628      	mov	r0, r5
 800b376:	f000 f82b 	bl	800b3d0 <__swsetup_r>
 800b37a:	b118      	cbz	r0, 800b384 <__swbuf_r+0x32>
 800b37c:	f04f 37ff 	mov.w	r7, #4294967295
 800b380:	4638      	mov	r0, r7
 800b382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b384:	6823      	ldr	r3, [r4, #0]
 800b386:	b2f6      	uxtb	r6, r6
 800b388:	6922      	ldr	r2, [r4, #16]
 800b38a:	4637      	mov	r7, r6
 800b38c:	1a98      	subs	r0, r3, r2
 800b38e:	6963      	ldr	r3, [r4, #20]
 800b390:	4283      	cmp	r3, r0
 800b392:	dc05      	bgt.n	800b3a0 <__swbuf_r+0x4e>
 800b394:	4621      	mov	r1, r4
 800b396:	4628      	mov	r0, r5
 800b398:	f002 fe0e 	bl	800dfb8 <_fflush_r>
 800b39c:	2800      	cmp	r0, #0
 800b39e:	d1ed      	bne.n	800b37c <__swbuf_r+0x2a>
 800b3a0:	68a3      	ldr	r3, [r4, #8]
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	60a3      	str	r3, [r4, #8]
 800b3a6:	6823      	ldr	r3, [r4, #0]
 800b3a8:	1c5a      	adds	r2, r3, #1
 800b3aa:	6022      	str	r2, [r4, #0]
 800b3ac:	701e      	strb	r6, [r3, #0]
 800b3ae:	1c43      	adds	r3, r0, #1
 800b3b0:	6962      	ldr	r2, [r4, #20]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d004      	beq.n	800b3c0 <__swbuf_r+0x6e>
 800b3b6:	89a3      	ldrh	r3, [r4, #12]
 800b3b8:	07db      	lsls	r3, r3, #31
 800b3ba:	d5e1      	bpl.n	800b380 <__swbuf_r+0x2e>
 800b3bc:	2e0a      	cmp	r6, #10
 800b3be:	d1df      	bne.n	800b380 <__swbuf_r+0x2e>
 800b3c0:	4621      	mov	r1, r4
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	f002 fdf8 	bl	800dfb8 <_fflush_r>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d0d9      	beq.n	800b380 <__swbuf_r+0x2e>
 800b3cc:	e7d6      	b.n	800b37c <__swbuf_r+0x2a>
	...

0800b3d0 <__swsetup_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	4b29      	ldr	r3, [pc, #164]	@ (800b478 <__swsetup_r+0xa8>)
 800b3d4:	4605      	mov	r5, r0
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	6818      	ldr	r0, [r3, #0]
 800b3da:	b118      	cbz	r0, 800b3e4 <__swsetup_r+0x14>
 800b3dc:	6a03      	ldr	r3, [r0, #32]
 800b3de:	b90b      	cbnz	r3, 800b3e4 <__swsetup_r+0x14>
 800b3e0:	f7ff feae 	bl	800b140 <__sinit>
 800b3e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3e8:	0719      	lsls	r1, r3, #28
 800b3ea:	d422      	bmi.n	800b432 <__swsetup_r+0x62>
 800b3ec:	06da      	lsls	r2, r3, #27
 800b3ee:	d407      	bmi.n	800b400 <__swsetup_r+0x30>
 800b3f0:	2209      	movs	r2, #9
 800b3f2:	602a      	str	r2, [r5, #0]
 800b3f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3fc:	81a3      	strh	r3, [r4, #12]
 800b3fe:	e033      	b.n	800b468 <__swsetup_r+0x98>
 800b400:	0758      	lsls	r0, r3, #29
 800b402:	d512      	bpl.n	800b42a <__swsetup_r+0x5a>
 800b404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b406:	b141      	cbz	r1, 800b41a <__swsetup_r+0x4a>
 800b408:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b40c:	4299      	cmp	r1, r3
 800b40e:	d002      	beq.n	800b416 <__swsetup_r+0x46>
 800b410:	4628      	mov	r0, r5
 800b412:	f000 ff29 	bl	800c268 <_free_r>
 800b416:	2300      	movs	r3, #0
 800b418:	6363      	str	r3, [r4, #52]	@ 0x34
 800b41a:	89a3      	ldrh	r3, [r4, #12]
 800b41c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b420:	81a3      	strh	r3, [r4, #12]
 800b422:	2300      	movs	r3, #0
 800b424:	6063      	str	r3, [r4, #4]
 800b426:	6923      	ldr	r3, [r4, #16]
 800b428:	6023      	str	r3, [r4, #0]
 800b42a:	89a3      	ldrh	r3, [r4, #12]
 800b42c:	f043 0308 	orr.w	r3, r3, #8
 800b430:	81a3      	strh	r3, [r4, #12]
 800b432:	6923      	ldr	r3, [r4, #16]
 800b434:	b94b      	cbnz	r3, 800b44a <__swsetup_r+0x7a>
 800b436:	89a3      	ldrh	r3, [r4, #12]
 800b438:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b43c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b440:	d003      	beq.n	800b44a <__swsetup_r+0x7a>
 800b442:	4621      	mov	r1, r4
 800b444:	4628      	mov	r0, r5
 800b446:	f002 fe04 	bl	800e052 <__smakebuf_r>
 800b44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b44e:	f013 0201 	ands.w	r2, r3, #1
 800b452:	d00a      	beq.n	800b46a <__swsetup_r+0x9a>
 800b454:	2200      	movs	r2, #0
 800b456:	60a2      	str	r2, [r4, #8]
 800b458:	6962      	ldr	r2, [r4, #20]
 800b45a:	4252      	negs	r2, r2
 800b45c:	61a2      	str	r2, [r4, #24]
 800b45e:	6922      	ldr	r2, [r4, #16]
 800b460:	b942      	cbnz	r2, 800b474 <__swsetup_r+0xa4>
 800b462:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b466:	d1c5      	bne.n	800b3f4 <__swsetup_r+0x24>
 800b468:	bd38      	pop	{r3, r4, r5, pc}
 800b46a:	0799      	lsls	r1, r3, #30
 800b46c:	bf58      	it	pl
 800b46e:	6962      	ldrpl	r2, [r4, #20]
 800b470:	60a2      	str	r2, [r4, #8]
 800b472:	e7f4      	b.n	800b45e <__swsetup_r+0x8e>
 800b474:	2000      	movs	r0, #0
 800b476:	e7f7      	b.n	800b468 <__swsetup_r+0x98>
 800b478:	2000005c 	.word	0x2000005c

0800b47c <memset>:
 800b47c:	4402      	add	r2, r0
 800b47e:	4603      	mov	r3, r0
 800b480:	4293      	cmp	r3, r2
 800b482:	d100      	bne.n	800b486 <memset+0xa>
 800b484:	4770      	bx	lr
 800b486:	f803 1b01 	strb.w	r1, [r3], #1
 800b48a:	e7f9      	b.n	800b480 <memset+0x4>

0800b48c <_localeconv_r>:
 800b48c:	4800      	ldr	r0, [pc, #0]	@ (800b490 <_localeconv_r+0x4>)
 800b48e:	4770      	bx	lr
 800b490:	2000019c 	.word	0x2000019c

0800b494 <_close_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	2300      	movs	r3, #0
 800b498:	4d05      	ldr	r5, [pc, #20]	@ (800b4b0 <_close_r+0x1c>)
 800b49a:	4604      	mov	r4, r0
 800b49c:	4608      	mov	r0, r1
 800b49e:	602b      	str	r3, [r5, #0]
 800b4a0:	f7f7 fcda 	bl	8002e58 <_close>
 800b4a4:	1c43      	adds	r3, r0, #1
 800b4a6:	d102      	bne.n	800b4ae <_close_r+0x1a>
 800b4a8:	682b      	ldr	r3, [r5, #0]
 800b4aa:	b103      	cbz	r3, 800b4ae <_close_r+0x1a>
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	bd38      	pop	{r3, r4, r5, pc}
 800b4b0:	200005e0 	.word	0x200005e0

0800b4b4 <_lseek_r>:
 800b4b4:	b538      	push	{r3, r4, r5, lr}
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	4d06      	ldr	r5, [pc, #24]	@ (800b4d4 <_lseek_r+0x20>)
 800b4ba:	4608      	mov	r0, r1
 800b4bc:	4611      	mov	r1, r2
 800b4be:	2200      	movs	r2, #0
 800b4c0:	602a      	str	r2, [r5, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	f7f7 fcef 	bl	8002ea6 <_lseek>
 800b4c8:	1c43      	adds	r3, r0, #1
 800b4ca:	d102      	bne.n	800b4d2 <_lseek_r+0x1e>
 800b4cc:	682b      	ldr	r3, [r5, #0]
 800b4ce:	b103      	cbz	r3, 800b4d2 <_lseek_r+0x1e>
 800b4d0:	6023      	str	r3, [r4, #0]
 800b4d2:	bd38      	pop	{r3, r4, r5, pc}
 800b4d4:	200005e0 	.word	0x200005e0

0800b4d8 <_read_r>:
 800b4d8:	b538      	push	{r3, r4, r5, lr}
 800b4da:	4604      	mov	r4, r0
 800b4dc:	4d06      	ldr	r5, [pc, #24]	@ (800b4f8 <_read_r+0x20>)
 800b4de:	4608      	mov	r0, r1
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	602a      	str	r2, [r5, #0]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	f7f7 fc7d 	bl	8002de6 <_read>
 800b4ec:	1c43      	adds	r3, r0, #1
 800b4ee:	d102      	bne.n	800b4f6 <_read_r+0x1e>
 800b4f0:	682b      	ldr	r3, [r5, #0]
 800b4f2:	b103      	cbz	r3, 800b4f6 <_read_r+0x1e>
 800b4f4:	6023      	str	r3, [r4, #0]
 800b4f6:	bd38      	pop	{r3, r4, r5, pc}
 800b4f8:	200005e0 	.word	0x200005e0

0800b4fc <_sbrk_r>:
 800b4fc:	b538      	push	{r3, r4, r5, lr}
 800b4fe:	2300      	movs	r3, #0
 800b500:	4d05      	ldr	r5, [pc, #20]	@ (800b518 <_sbrk_r+0x1c>)
 800b502:	4604      	mov	r4, r0
 800b504:	4608      	mov	r0, r1
 800b506:	602b      	str	r3, [r5, #0]
 800b508:	f7f7 fcda 	bl	8002ec0 <_sbrk>
 800b50c:	1c43      	adds	r3, r0, #1
 800b50e:	d102      	bne.n	800b516 <_sbrk_r+0x1a>
 800b510:	682b      	ldr	r3, [r5, #0]
 800b512:	b103      	cbz	r3, 800b516 <_sbrk_r+0x1a>
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	200005e0 	.word	0x200005e0

0800b51c <_write_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4604      	mov	r4, r0
 800b520:	4d06      	ldr	r5, [pc, #24]	@ (800b53c <_write_r+0x20>)
 800b522:	4608      	mov	r0, r1
 800b524:	4611      	mov	r1, r2
 800b526:	2200      	movs	r2, #0
 800b528:	602a      	str	r2, [r5, #0]
 800b52a:	461a      	mov	r2, r3
 800b52c:	f7f7 fc78 	bl	8002e20 <_write>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d102      	bne.n	800b53a <_write_r+0x1e>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	b103      	cbz	r3, 800b53a <_write_r+0x1e>
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	200005e0 	.word	0x200005e0

0800b540 <__errno>:
 800b540:	4b01      	ldr	r3, [pc, #4]	@ (800b548 <__errno+0x8>)
 800b542:	6818      	ldr	r0, [r3, #0]
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	2000005c 	.word	0x2000005c

0800b54c <__libc_init_array>:
 800b54c:	b570      	push	{r4, r5, r6, lr}
 800b54e:	4d0d      	ldr	r5, [pc, #52]	@ (800b584 <__libc_init_array+0x38>)
 800b550:	2600      	movs	r6, #0
 800b552:	4c0d      	ldr	r4, [pc, #52]	@ (800b588 <__libc_init_array+0x3c>)
 800b554:	1b64      	subs	r4, r4, r5
 800b556:	10a4      	asrs	r4, r4, #2
 800b558:	42a6      	cmp	r6, r4
 800b55a:	d109      	bne.n	800b570 <__libc_init_array+0x24>
 800b55c:	4d0b      	ldr	r5, [pc, #44]	@ (800b58c <__libc_init_array+0x40>)
 800b55e:	2600      	movs	r6, #0
 800b560:	4c0b      	ldr	r4, [pc, #44]	@ (800b590 <__libc_init_array+0x44>)
 800b562:	f003 fa33 	bl	800e9cc <_init>
 800b566:	1b64      	subs	r4, r4, r5
 800b568:	10a4      	asrs	r4, r4, #2
 800b56a:	42a6      	cmp	r6, r4
 800b56c:	d105      	bne.n	800b57a <__libc_init_array+0x2e>
 800b56e:	bd70      	pop	{r4, r5, r6, pc}
 800b570:	f855 3b04 	ldr.w	r3, [r5], #4
 800b574:	3601      	adds	r6, #1
 800b576:	4798      	blx	r3
 800b578:	e7ee      	b.n	800b558 <__libc_init_array+0xc>
 800b57a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b57e:	3601      	adds	r6, #1
 800b580:	4798      	blx	r3
 800b582:	e7f2      	b.n	800b56a <__libc_init_array+0x1e>
 800b584:	0800f050 	.word	0x0800f050
 800b588:	0800f050 	.word	0x0800f050
 800b58c:	0800f050 	.word	0x0800f050
 800b590:	0800f058 	.word	0x0800f058

0800b594 <__retarget_lock_init_recursive>:
 800b594:	4770      	bx	lr

0800b596 <__retarget_lock_acquire_recursive>:
 800b596:	4770      	bx	lr

0800b598 <__retarget_lock_release_recursive>:
 800b598:	4770      	bx	lr

0800b59a <memchr>:
 800b59a:	b2c9      	uxtb	r1, r1
 800b59c:	4603      	mov	r3, r0
 800b59e:	4402      	add	r2, r0
 800b5a0:	b510      	push	{r4, lr}
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	d101      	bne.n	800b5ac <memchr+0x12>
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	e003      	b.n	800b5b4 <memchr+0x1a>
 800b5ac:	7804      	ldrb	r4, [r0, #0]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	428c      	cmp	r4, r1
 800b5b2:	d1f6      	bne.n	800b5a2 <memchr+0x8>
 800b5b4:	bd10      	pop	{r4, pc}
	...

0800b5b8 <nanf>:
 800b5b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b5c0 <nanf+0x8>
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	7fc00000 	.word	0x7fc00000

0800b5c4 <quorem>:
 800b5c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c8:	6903      	ldr	r3, [r0, #16]
 800b5ca:	4607      	mov	r7, r0
 800b5cc:	690c      	ldr	r4, [r1, #16]
 800b5ce:	42a3      	cmp	r3, r4
 800b5d0:	f2c0 8083 	blt.w	800b6da <quorem+0x116>
 800b5d4:	3c01      	subs	r4, #1
 800b5d6:	f100 0514 	add.w	r5, r0, #20
 800b5da:	f101 0814 	add.w	r8, r1, #20
 800b5de:	00a3      	lsls	r3, r4, #2
 800b5e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5fc:	d331      	bcc.n	800b662 <quorem+0x9e>
 800b5fe:	f04f 0a00 	mov.w	sl, #0
 800b602:	46c4      	mov	ip, r8
 800b604:	46ae      	mov	lr, r5
 800b606:	46d3      	mov	fp, sl
 800b608:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b60c:	b298      	uxth	r0, r3
 800b60e:	45e1      	cmp	r9, ip
 800b610:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b614:	fb06 a000 	mla	r0, r6, r0, sl
 800b618:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800b61c:	b280      	uxth	r0, r0
 800b61e:	fb06 2303 	mla	r3, r6, r3, r2
 800b622:	f8de 2000 	ldr.w	r2, [lr]
 800b626:	b292      	uxth	r2, r2
 800b628:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b62c:	eba2 0200 	sub.w	r2, r2, r0
 800b630:	b29b      	uxth	r3, r3
 800b632:	f8de 0000 	ldr.w	r0, [lr]
 800b636:	445a      	add	r2, fp
 800b638:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b63c:	b292      	uxth	r2, r2
 800b63e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b642:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b646:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b64a:	f84e 2b04 	str.w	r2, [lr], #4
 800b64e:	d2db      	bcs.n	800b608 <quorem+0x44>
 800b650:	9b00      	ldr	r3, [sp, #0]
 800b652:	58eb      	ldr	r3, [r5, r3]
 800b654:	b92b      	cbnz	r3, 800b662 <quorem+0x9e>
 800b656:	9b01      	ldr	r3, [sp, #4]
 800b658:	3b04      	subs	r3, #4
 800b65a:	429d      	cmp	r5, r3
 800b65c:	461a      	mov	r2, r3
 800b65e:	d330      	bcc.n	800b6c2 <quorem+0xfe>
 800b660:	613c      	str	r4, [r7, #16]
 800b662:	4638      	mov	r0, r7
 800b664:	f001 f910 	bl	800c888 <__mcmp>
 800b668:	2800      	cmp	r0, #0
 800b66a:	db26      	blt.n	800b6ba <quorem+0xf6>
 800b66c:	4629      	mov	r1, r5
 800b66e:	2000      	movs	r0, #0
 800b670:	f858 2b04 	ldr.w	r2, [r8], #4
 800b674:	f8d1 c000 	ldr.w	ip, [r1]
 800b678:	fa1f fe82 	uxth.w	lr, r2
 800b67c:	45c1      	cmp	r9, r8
 800b67e:	fa1f f38c 	uxth.w	r3, ip
 800b682:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b686:	eba3 030e 	sub.w	r3, r3, lr
 800b68a:	4403      	add	r3, r0
 800b68c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b690:	b29b      	uxth	r3, r3
 800b692:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b69a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b69e:	f841 3b04 	str.w	r3, [r1], #4
 800b6a2:	d2e5      	bcs.n	800b670 <quorem+0xac>
 800b6a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6ac:	b922      	cbnz	r2, 800b6b8 <quorem+0xf4>
 800b6ae:	3b04      	subs	r3, #4
 800b6b0:	429d      	cmp	r5, r3
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	d30b      	bcc.n	800b6ce <quorem+0x10a>
 800b6b6:	613c      	str	r4, [r7, #16]
 800b6b8:	3601      	adds	r6, #1
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	b003      	add	sp, #12
 800b6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c2:	6812      	ldr	r2, [r2, #0]
 800b6c4:	3b04      	subs	r3, #4
 800b6c6:	2a00      	cmp	r2, #0
 800b6c8:	d1ca      	bne.n	800b660 <quorem+0x9c>
 800b6ca:	3c01      	subs	r4, #1
 800b6cc:	e7c5      	b.n	800b65a <quorem+0x96>
 800b6ce:	6812      	ldr	r2, [r2, #0]
 800b6d0:	3b04      	subs	r3, #4
 800b6d2:	2a00      	cmp	r2, #0
 800b6d4:	d1ef      	bne.n	800b6b6 <quorem+0xf2>
 800b6d6:	3c01      	subs	r4, #1
 800b6d8:	e7ea      	b.n	800b6b0 <quorem+0xec>
 800b6da:	2000      	movs	r0, #0
 800b6dc:	e7ee      	b.n	800b6bc <quorem+0xf8>
	...

0800b6e0 <_dtoa_r>:
 800b6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e4:	69c7      	ldr	r7, [r0, #28]
 800b6e6:	b099      	sub	sp, #100	@ 0x64
 800b6e8:	4683      	mov	fp, r0
 800b6ea:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b6ec:	9109      	str	r1, [sp, #36]	@ 0x24
 800b6ee:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b6f2:	ec55 4b10 	vmov	r4, r5, d0
 800b6f6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b6fa:	b97f      	cbnz	r7, 800b71c <_dtoa_r+0x3c>
 800b6fc:	2010      	movs	r0, #16
 800b6fe:	f7fe fd69 	bl	800a1d4 <malloc>
 800b702:	4602      	mov	r2, r0
 800b704:	f8cb 001c 	str.w	r0, [fp, #28]
 800b708:	b920      	cbnz	r0, 800b714 <_dtoa_r+0x34>
 800b70a:	4ba7      	ldr	r3, [pc, #668]	@ (800b9a8 <_dtoa_r+0x2c8>)
 800b70c:	21ef      	movs	r1, #239	@ 0xef
 800b70e:	48a7      	ldr	r0, [pc, #668]	@ (800b9ac <_dtoa_r+0x2cc>)
 800b710:	f002 fd42 	bl	800e198 <__assert_func>
 800b714:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b718:	6007      	str	r7, [r0, #0]
 800b71a:	60c7      	str	r7, [r0, #12]
 800b71c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b720:	6819      	ldr	r1, [r3, #0]
 800b722:	b159      	cbz	r1, 800b73c <_dtoa_r+0x5c>
 800b724:	685a      	ldr	r2, [r3, #4]
 800b726:	2301      	movs	r3, #1
 800b728:	4658      	mov	r0, fp
 800b72a:	4093      	lsls	r3, r2
 800b72c:	604a      	str	r2, [r1, #4]
 800b72e:	608b      	str	r3, [r1, #8]
 800b730:	f000 fe24 	bl	800c37c <_Bfree>
 800b734:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b738:	2200      	movs	r2, #0
 800b73a:	601a      	str	r2, [r3, #0]
 800b73c:	1e2b      	subs	r3, r5, #0
 800b73e:	bfb7      	itett	lt
 800b740:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b744:	2300      	movge	r3, #0
 800b746:	2201      	movlt	r2, #1
 800b748:	9303      	strlt	r3, [sp, #12]
 800b74a:	bfa8      	it	ge
 800b74c:	6033      	strge	r3, [r6, #0]
 800b74e:	9f03      	ldr	r7, [sp, #12]
 800b750:	4b97      	ldr	r3, [pc, #604]	@ (800b9b0 <_dtoa_r+0x2d0>)
 800b752:	bfb8      	it	lt
 800b754:	6032      	strlt	r2, [r6, #0]
 800b756:	43bb      	bics	r3, r7
 800b758:	d112      	bne.n	800b780 <_dtoa_r+0xa0>
 800b75a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b75e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b760:	6013      	str	r3, [r2, #0]
 800b762:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b766:	4323      	orrs	r3, r4
 800b768:	f000 854c 	beq.w	800c204 <_dtoa_r+0xb24>
 800b76c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b76e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b9c4 <_dtoa_r+0x2e4>
 800b772:	2b00      	cmp	r3, #0
 800b774:	f000 854e 	beq.w	800c214 <_dtoa_r+0xb34>
 800b778:	f10a 0303 	add.w	r3, sl, #3
 800b77c:	f000 bd48 	b.w	800c210 <_dtoa_r+0xb30>
 800b780:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b784:	2200      	movs	r2, #0
 800b786:	2300      	movs	r3, #0
 800b788:	ec51 0b17 	vmov	r0, r1, d7
 800b78c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b790:	f7f5 f9aa 	bl	8000ae8 <__aeabi_dcmpeq>
 800b794:	4680      	mov	r8, r0
 800b796:	b158      	cbz	r0, 800b7b0 <_dtoa_r+0xd0>
 800b798:	2301      	movs	r3, #1
 800b79a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b79c:	6013      	str	r3, [r2, #0]
 800b79e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7a0:	b113      	cbz	r3, 800b7a8 <_dtoa_r+0xc8>
 800b7a2:	4b84      	ldr	r3, [pc, #528]	@ (800b9b4 <_dtoa_r+0x2d4>)
 800b7a4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b7a6:	6013      	str	r3, [r2, #0]
 800b7a8:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800b9c8 <_dtoa_r+0x2e8>
 800b7ac:	f000 bd32 	b.w	800c214 <_dtoa_r+0xb34>
 800b7b0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b7b4:	aa16      	add	r2, sp, #88	@ 0x58
 800b7b6:	a917      	add	r1, sp, #92	@ 0x5c
 800b7b8:	4658      	mov	r0, fp
 800b7ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b7be:	f001 f98b 	bl	800cad8 <__d2b>
 800b7c2:	4681      	mov	r9, r0
 800b7c4:	2e00      	cmp	r6, #0
 800b7c6:	d075      	beq.n	800b8b4 <_dtoa_r+0x1d4>
 800b7c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7ca:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b7ce:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b7d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7d6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b7da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7de:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	4b74      	ldr	r3, [pc, #464]	@ (800b9b8 <_dtoa_r+0x2d8>)
 800b7e8:	f7f4 fd5e 	bl	80002a8 <__aeabi_dsub>
 800b7ec:	a368      	add	r3, pc, #416	@ (adr r3, 800b990 <_dtoa_r+0x2b0>)
 800b7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f2:	f7f4 ff11 	bl	8000618 <__aeabi_dmul>
 800b7f6:	a368      	add	r3, pc, #416	@ (adr r3, 800b998 <_dtoa_r+0x2b8>)
 800b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fc:	f7f4 fd56 	bl	80002ac <__adddf3>
 800b800:	4604      	mov	r4, r0
 800b802:	460d      	mov	r5, r1
 800b804:	4630      	mov	r0, r6
 800b806:	f7f4 fe9d 	bl	8000544 <__aeabi_i2d>
 800b80a:	a365      	add	r3, pc, #404	@ (adr r3, 800b9a0 <_dtoa_r+0x2c0>)
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	f7f4 ff02 	bl	8000618 <__aeabi_dmul>
 800b814:	4602      	mov	r2, r0
 800b816:	460b      	mov	r3, r1
 800b818:	4620      	mov	r0, r4
 800b81a:	4629      	mov	r1, r5
 800b81c:	f7f4 fd46 	bl	80002ac <__adddf3>
 800b820:	4604      	mov	r4, r0
 800b822:	460d      	mov	r5, r1
 800b824:	f7f5 f9a8 	bl	8000b78 <__aeabi_d2iz>
 800b828:	2200      	movs	r2, #0
 800b82a:	4607      	mov	r7, r0
 800b82c:	2300      	movs	r3, #0
 800b82e:	4620      	mov	r0, r4
 800b830:	4629      	mov	r1, r5
 800b832:	f7f5 f963 	bl	8000afc <__aeabi_dcmplt>
 800b836:	b140      	cbz	r0, 800b84a <_dtoa_r+0x16a>
 800b838:	4638      	mov	r0, r7
 800b83a:	f7f4 fe83 	bl	8000544 <__aeabi_i2d>
 800b83e:	4622      	mov	r2, r4
 800b840:	462b      	mov	r3, r5
 800b842:	f7f5 f951 	bl	8000ae8 <__aeabi_dcmpeq>
 800b846:	b900      	cbnz	r0, 800b84a <_dtoa_r+0x16a>
 800b848:	3f01      	subs	r7, #1
 800b84a:	2f16      	cmp	r7, #22
 800b84c:	d851      	bhi.n	800b8f2 <_dtoa_r+0x212>
 800b84e:	4b5b      	ldr	r3, [pc, #364]	@ (800b9bc <_dtoa_r+0x2dc>)
 800b850:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b854:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85c:	f7f5 f94e 	bl	8000afc <__aeabi_dcmplt>
 800b860:	2800      	cmp	r0, #0
 800b862:	d048      	beq.n	800b8f6 <_dtoa_r+0x216>
 800b864:	3f01      	subs	r7, #1
 800b866:	2300      	movs	r3, #0
 800b868:	9312      	str	r3, [sp, #72]	@ 0x48
 800b86a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b86c:	1b9b      	subs	r3, r3, r6
 800b86e:	1e5a      	subs	r2, r3, #1
 800b870:	bf46      	itte	mi
 800b872:	f1c3 0801 	rsbmi	r8, r3, #1
 800b876:	2300      	movmi	r3, #0
 800b878:	f04f 0800 	movpl.w	r8, #0
 800b87c:	9208      	str	r2, [sp, #32]
 800b87e:	bf48      	it	mi
 800b880:	9308      	strmi	r3, [sp, #32]
 800b882:	2f00      	cmp	r7, #0
 800b884:	db39      	blt.n	800b8fa <_dtoa_r+0x21a>
 800b886:	9b08      	ldr	r3, [sp, #32]
 800b888:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b88a:	443b      	add	r3, r7
 800b88c:	9308      	str	r3, [sp, #32]
 800b88e:	2300      	movs	r3, #0
 800b890:	930a      	str	r3, [sp, #40]	@ 0x28
 800b892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b894:	2b09      	cmp	r3, #9
 800b896:	d864      	bhi.n	800b962 <_dtoa_r+0x282>
 800b898:	2b05      	cmp	r3, #5
 800b89a:	bfc5      	ittet	gt
 800b89c:	3b04      	subgt	r3, #4
 800b89e:	2400      	movgt	r4, #0
 800b8a0:	2401      	movle	r4, #1
 800b8a2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8a6:	3b02      	subs	r3, #2
 800b8a8:	2b03      	cmp	r3, #3
 800b8aa:	d865      	bhi.n	800b978 <_dtoa_r+0x298>
 800b8ac:	e8df f003 	tbb	[pc, r3]
 800b8b0:	5737392c 	.word	0x5737392c
 800b8b4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b8b8:	441e      	add	r6, r3
 800b8ba:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b8be:	2b20      	cmp	r3, #32
 800b8c0:	bfc9      	itett	gt
 800b8c2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b8c6:	f1c3 0320 	rsble	r3, r3, #32
 800b8ca:	409f      	lslgt	r7, r3
 800b8cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b8d0:	bfd8      	it	le
 800b8d2:	fa04 f003 	lslle.w	r0, r4, r3
 800b8d6:	f106 36ff 	add.w	r6, r6, #4294967295
 800b8da:	bfc4      	itt	gt
 800b8dc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b8e0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b8e4:	f7f4 fe1e 	bl	8000524 <__aeabi_ui2d>
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b8ee:	9214      	str	r2, [sp, #80]	@ 0x50
 800b8f0:	e777      	b.n	800b7e2 <_dtoa_r+0x102>
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e7b8      	b.n	800b868 <_dtoa_r+0x188>
 800b8f6:	9012      	str	r0, [sp, #72]	@ 0x48
 800b8f8:	e7b7      	b.n	800b86a <_dtoa_r+0x18a>
 800b8fa:	427b      	negs	r3, r7
 800b8fc:	eba8 0807 	sub.w	r8, r8, r7
 800b900:	930a      	str	r3, [sp, #40]	@ 0x28
 800b902:	2300      	movs	r3, #0
 800b904:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b906:	e7c4      	b.n	800b892 <_dtoa_r+0x1b2>
 800b908:	2300      	movs	r3, #0
 800b90a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b90c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b90e:	2b00      	cmp	r3, #0
 800b910:	dc35      	bgt.n	800b97e <_dtoa_r+0x29e>
 800b912:	2301      	movs	r3, #1
 800b914:	461a      	mov	r2, r3
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	9307      	str	r3, [sp, #28]
 800b91a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b91c:	e00b      	b.n	800b936 <_dtoa_r+0x256>
 800b91e:	2301      	movs	r3, #1
 800b920:	e7f3      	b.n	800b90a <_dtoa_r+0x22a>
 800b922:	2300      	movs	r3, #0
 800b924:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b926:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b928:	18fb      	adds	r3, r7, r3
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	3301      	adds	r3, #1
 800b92e:	2b01      	cmp	r3, #1
 800b930:	9307      	str	r3, [sp, #28]
 800b932:	bfb8      	it	lt
 800b934:	2301      	movlt	r3, #1
 800b936:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b93a:	2100      	movs	r1, #0
 800b93c:	2204      	movs	r2, #4
 800b93e:	f102 0514 	add.w	r5, r2, #20
 800b942:	429d      	cmp	r5, r3
 800b944:	d91f      	bls.n	800b986 <_dtoa_r+0x2a6>
 800b946:	6041      	str	r1, [r0, #4]
 800b948:	4658      	mov	r0, fp
 800b94a:	f000 fcd7 	bl	800c2fc <_Balloc>
 800b94e:	4682      	mov	sl, r0
 800b950:	2800      	cmp	r0, #0
 800b952:	d13b      	bne.n	800b9cc <_dtoa_r+0x2ec>
 800b954:	4b1a      	ldr	r3, [pc, #104]	@ (800b9c0 <_dtoa_r+0x2e0>)
 800b956:	4602      	mov	r2, r0
 800b958:	f240 11af 	movw	r1, #431	@ 0x1af
 800b95c:	e6d7      	b.n	800b70e <_dtoa_r+0x2e>
 800b95e:	2301      	movs	r3, #1
 800b960:	e7e0      	b.n	800b924 <_dtoa_r+0x244>
 800b962:	2401      	movs	r4, #1
 800b964:	2300      	movs	r3, #0
 800b966:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b968:	9309      	str	r3, [sp, #36]	@ 0x24
 800b96a:	f04f 33ff 	mov.w	r3, #4294967295
 800b96e:	2200      	movs	r2, #0
 800b970:	9300      	str	r3, [sp, #0]
 800b972:	9307      	str	r3, [sp, #28]
 800b974:	2312      	movs	r3, #18
 800b976:	e7d0      	b.n	800b91a <_dtoa_r+0x23a>
 800b978:	2301      	movs	r3, #1
 800b97a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b97c:	e7f5      	b.n	800b96a <_dtoa_r+0x28a>
 800b97e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	9307      	str	r3, [sp, #28]
 800b984:	e7d7      	b.n	800b936 <_dtoa_r+0x256>
 800b986:	3101      	adds	r1, #1
 800b988:	0052      	lsls	r2, r2, #1
 800b98a:	e7d8      	b.n	800b93e <_dtoa_r+0x25e>
 800b98c:	f3af 8000 	nop.w
 800b990:	636f4361 	.word	0x636f4361
 800b994:	3fd287a7 	.word	0x3fd287a7
 800b998:	8b60c8b3 	.word	0x8b60c8b3
 800b99c:	3fc68a28 	.word	0x3fc68a28
 800b9a0:	509f79fb 	.word	0x509f79fb
 800b9a4:	3fd34413 	.word	0x3fd34413
 800b9a8:	0800ec5e 	.word	0x0800ec5e
 800b9ac:	0800ec75 	.word	0x0800ec75
 800b9b0:	7ff00000 	.word	0x7ff00000
 800b9b4:	0800ec29 	.word	0x0800ec29
 800b9b8:	3ff80000 	.word	0x3ff80000
 800b9bc:	0800ed70 	.word	0x0800ed70
 800b9c0:	0800eccd 	.word	0x0800eccd
 800b9c4:	0800ec5a 	.word	0x0800ec5a
 800b9c8:	0800ec28 	.word	0x0800ec28
 800b9cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b9d0:	6018      	str	r0, [r3, #0]
 800b9d2:	9b07      	ldr	r3, [sp, #28]
 800b9d4:	2b0e      	cmp	r3, #14
 800b9d6:	f200 80a4 	bhi.w	800bb22 <_dtoa_r+0x442>
 800b9da:	2c00      	cmp	r4, #0
 800b9dc:	f000 80a1 	beq.w	800bb22 <_dtoa_r+0x442>
 800b9e0:	2f00      	cmp	r7, #0
 800b9e2:	dd33      	ble.n	800ba4c <_dtoa_r+0x36c>
 800b9e4:	f007 020f 	and.w	r2, r7, #15
 800b9e8:	4bac      	ldr	r3, [pc, #688]	@ (800bc9c <_dtoa_r+0x5bc>)
 800b9ea:	05f8      	lsls	r0, r7, #23
 800b9ec:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b9f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9f4:	ed93 7b00 	vldr	d7, [r3]
 800b9f8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b9fc:	d516      	bpl.n	800ba2c <_dtoa_r+0x34c>
 800b9fe:	4ba8      	ldr	r3, [pc, #672]	@ (800bca0 <_dtoa_r+0x5c0>)
 800ba00:	f004 040f 	and.w	r4, r4, #15
 800ba04:	2603      	movs	r6, #3
 800ba06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba0e:	f7f4 ff2d 	bl	800086c <__aeabi_ddiv>
 800ba12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba16:	4da2      	ldr	r5, [pc, #648]	@ (800bca0 <_dtoa_r+0x5c0>)
 800ba18:	b954      	cbnz	r4, 800ba30 <_dtoa_r+0x350>
 800ba1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba22:	f7f4 ff23 	bl	800086c <__aeabi_ddiv>
 800ba26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba2a:	e028      	b.n	800ba7e <_dtoa_r+0x39e>
 800ba2c:	2602      	movs	r6, #2
 800ba2e:	e7f2      	b.n	800ba16 <_dtoa_r+0x336>
 800ba30:	07e1      	lsls	r1, r4, #31
 800ba32:	d508      	bpl.n	800ba46 <_dtoa_r+0x366>
 800ba34:	3601      	adds	r6, #1
 800ba36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba3e:	f7f4 fdeb 	bl	8000618 <__aeabi_dmul>
 800ba42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba46:	1064      	asrs	r4, r4, #1
 800ba48:	3508      	adds	r5, #8
 800ba4a:	e7e5      	b.n	800ba18 <_dtoa_r+0x338>
 800ba4c:	f000 80d2 	beq.w	800bbf4 <_dtoa_r+0x514>
 800ba50:	427c      	negs	r4, r7
 800ba52:	4b92      	ldr	r3, [pc, #584]	@ (800bc9c <_dtoa_r+0x5bc>)
 800ba54:	4d92      	ldr	r5, [pc, #584]	@ (800bca0 <_dtoa_r+0x5c0>)
 800ba56:	2602      	movs	r6, #2
 800ba58:	f004 020f 	and.w	r2, r4, #15
 800ba5c:	1124      	asrs	r4, r4, #4
 800ba5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6a:	f7f4 fdd5 	bl	8000618 <__aeabi_dmul>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba74:	2c00      	cmp	r4, #0
 800ba76:	f040 80b2 	bne.w	800bbde <_dtoa_r+0x4fe>
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d1d3      	bne.n	800ba26 <_dtoa_r+0x346>
 800ba7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 80b7 	beq.w	800bbf8 <_dtoa_r+0x518>
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	4b85      	ldr	r3, [pc, #532]	@ (800bca4 <_dtoa_r+0x5c4>)
 800ba8e:	4620      	mov	r0, r4
 800ba90:	4629      	mov	r1, r5
 800ba92:	f7f5 f833 	bl	8000afc <__aeabi_dcmplt>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	f000 80ae 	beq.w	800bbf8 <_dtoa_r+0x518>
 800ba9c:	9b07      	ldr	r3, [sp, #28]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 80aa 	beq.w	800bbf8 <_dtoa_r+0x518>
 800baa4:	9b00      	ldr	r3, [sp, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	dd37      	ble.n	800bb1a <_dtoa_r+0x43a>
 800baaa:	1e7b      	subs	r3, r7, #1
 800baac:	4620      	mov	r0, r4
 800baae:	2200      	movs	r2, #0
 800bab0:	4629      	mov	r1, r5
 800bab2:	9304      	str	r3, [sp, #16]
 800bab4:	3601      	adds	r6, #1
 800bab6:	4b7c      	ldr	r3, [pc, #496]	@ (800bca8 <_dtoa_r+0x5c8>)
 800bab8:	f7f4 fdae 	bl	8000618 <__aeabi_dmul>
 800babc:	9c00      	ldr	r4, [sp, #0]
 800babe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bac2:	4630      	mov	r0, r6
 800bac4:	f7f4 fd3e 	bl	8000544 <__aeabi_i2d>
 800bac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bacc:	f7f4 fda4 	bl	8000618 <__aeabi_dmul>
 800bad0:	2200      	movs	r2, #0
 800bad2:	4b76      	ldr	r3, [pc, #472]	@ (800bcac <_dtoa_r+0x5cc>)
 800bad4:	f7f4 fbea 	bl	80002ac <__adddf3>
 800bad8:	4605      	mov	r5, r0
 800bada:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bade:	2c00      	cmp	r4, #0
 800bae0:	f040 808d 	bne.w	800bbfe <_dtoa_r+0x51e>
 800bae4:	2200      	movs	r2, #0
 800bae6:	4b72      	ldr	r3, [pc, #456]	@ (800bcb0 <_dtoa_r+0x5d0>)
 800bae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baec:	f7f4 fbdc 	bl	80002a8 <__aeabi_dsub>
 800baf0:	4602      	mov	r2, r0
 800baf2:	460b      	mov	r3, r1
 800baf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800baf8:	462a      	mov	r2, r5
 800bafa:	4633      	mov	r3, r6
 800bafc:	f7f5 f81c 	bl	8000b38 <__aeabi_dcmpgt>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	f040 828b 	bne.w	800c01c <_dtoa_r+0x93c>
 800bb06:	462a      	mov	r2, r5
 800bb08:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bb0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb10:	f7f4 fff4 	bl	8000afc <__aeabi_dcmplt>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	f040 8128 	bne.w	800bd6a <_dtoa_r+0x68a>
 800bb1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bb1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bb22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f2c0 815a 	blt.w	800bdde <_dtoa_r+0x6fe>
 800bb2a:	2f0e      	cmp	r7, #14
 800bb2c:	f300 8157 	bgt.w	800bdde <_dtoa_r+0x6fe>
 800bb30:	4b5a      	ldr	r3, [pc, #360]	@ (800bc9c <_dtoa_r+0x5bc>)
 800bb32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb36:	ed93 7b00 	vldr	d7, [r3]
 800bb3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	ed8d 7b00 	vstr	d7, [sp]
 800bb42:	da03      	bge.n	800bb4c <_dtoa_r+0x46c>
 800bb44:	9b07      	ldr	r3, [sp, #28]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f340 8101 	ble.w	800bd4e <_dtoa_r+0x66e>
 800bb4c:	4656      	mov	r6, sl
 800bb4e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb56:	4620      	mov	r0, r4
 800bb58:	4629      	mov	r1, r5
 800bb5a:	f7f4 fe87 	bl	800086c <__aeabi_ddiv>
 800bb5e:	f7f5 f80b 	bl	8000b78 <__aeabi_d2iz>
 800bb62:	4680      	mov	r8, r0
 800bb64:	f7f4 fcee 	bl	8000544 <__aeabi_i2d>
 800bb68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb6c:	f7f4 fd54 	bl	8000618 <__aeabi_dmul>
 800bb70:	4602      	mov	r2, r0
 800bb72:	4620      	mov	r0, r4
 800bb74:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4629      	mov	r1, r5
 800bb7c:	f7f4 fb94 	bl	80002a8 <__aeabi_dsub>
 800bb80:	9d07      	ldr	r5, [sp, #28]
 800bb82:	f806 4b01 	strb.w	r4, [r6], #1
 800bb86:	eba6 040a 	sub.w	r4, r6, sl
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	42a5      	cmp	r5, r4
 800bb90:	f040 8117 	bne.w	800bdc2 <_dtoa_r+0x6e2>
 800bb94:	f7f4 fb8a 	bl	80002ac <__adddf3>
 800bb98:	4604      	mov	r4, r0
 800bb9a:	460d      	mov	r5, r1
 800bb9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bba0:	f7f4 ffca 	bl	8000b38 <__aeabi_dcmpgt>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	f040 80f9 	bne.w	800bd9c <_dtoa_r+0x6bc>
 800bbaa:	4620      	mov	r0, r4
 800bbac:	4629      	mov	r1, r5
 800bbae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbb2:	f7f4 ff99 	bl	8000ae8 <__aeabi_dcmpeq>
 800bbb6:	b118      	cbz	r0, 800bbc0 <_dtoa_r+0x4e0>
 800bbb8:	f018 0f01 	tst.w	r8, #1
 800bbbc:	f040 80ee 	bne.w	800bd9c <_dtoa_r+0x6bc>
 800bbc0:	4649      	mov	r1, r9
 800bbc2:	4658      	mov	r0, fp
 800bbc4:	f000 fbda 	bl	800c37c <_Bfree>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	3701      	adds	r7, #1
 800bbcc:	7033      	strb	r3, [r6, #0]
 800bbce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bbd0:	601f      	str	r7, [r3, #0]
 800bbd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 831d 	beq.w	800c214 <_dtoa_r+0xb34>
 800bbda:	601e      	str	r6, [r3, #0]
 800bbdc:	e31a      	b.n	800c214 <_dtoa_r+0xb34>
 800bbde:	07e2      	lsls	r2, r4, #31
 800bbe0:	d505      	bpl.n	800bbee <_dtoa_r+0x50e>
 800bbe2:	3601      	adds	r6, #1
 800bbe4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbe8:	f7f4 fd16 	bl	8000618 <__aeabi_dmul>
 800bbec:	2301      	movs	r3, #1
 800bbee:	1064      	asrs	r4, r4, #1
 800bbf0:	3508      	adds	r5, #8
 800bbf2:	e73f      	b.n	800ba74 <_dtoa_r+0x394>
 800bbf4:	2602      	movs	r6, #2
 800bbf6:	e742      	b.n	800ba7e <_dtoa_r+0x39e>
 800bbf8:	9c07      	ldr	r4, [sp, #28]
 800bbfa:	9704      	str	r7, [sp, #16]
 800bbfc:	e761      	b.n	800bac2 <_dtoa_r+0x3e2>
 800bbfe:	4b27      	ldr	r3, [pc, #156]	@ (800bc9c <_dtoa_r+0x5bc>)
 800bc00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc06:	4454      	add	r4, sl
 800bc08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc0c:	2900      	cmp	r1, #0
 800bc0e:	d053      	beq.n	800bcb8 <_dtoa_r+0x5d8>
 800bc10:	2000      	movs	r0, #0
 800bc12:	4928      	ldr	r1, [pc, #160]	@ (800bcb4 <_dtoa_r+0x5d4>)
 800bc14:	f7f4 fe2a 	bl	800086c <__aeabi_ddiv>
 800bc18:	4633      	mov	r3, r6
 800bc1a:	4656      	mov	r6, sl
 800bc1c:	462a      	mov	r2, r5
 800bc1e:	f7f4 fb43 	bl	80002a8 <__aeabi_dsub>
 800bc22:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc2a:	f7f4 ffa5 	bl	8000b78 <__aeabi_d2iz>
 800bc2e:	4605      	mov	r5, r0
 800bc30:	f7f4 fc88 	bl	8000544 <__aeabi_i2d>
 800bc34:	4602      	mov	r2, r0
 800bc36:	460b      	mov	r3, r1
 800bc38:	3530      	adds	r5, #48	@ 0x30
 800bc3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc3e:	f7f4 fb33 	bl	80002a8 <__aeabi_dsub>
 800bc42:	4602      	mov	r2, r0
 800bc44:	460b      	mov	r3, r1
 800bc46:	f806 5b01 	strb.w	r5, [r6], #1
 800bc4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc52:	f7f4 ff53 	bl	8000afc <__aeabi_dcmplt>
 800bc56:	2800      	cmp	r0, #0
 800bc58:	d171      	bne.n	800bd3e <_dtoa_r+0x65e>
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	4911      	ldr	r1, [pc, #68]	@ (800bca4 <_dtoa_r+0x5c4>)
 800bc5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc62:	f7f4 fb21 	bl	80002a8 <__aeabi_dsub>
 800bc66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc6a:	f7f4 ff47 	bl	8000afc <__aeabi_dcmplt>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	f040 8095 	bne.w	800bd9e <_dtoa_r+0x6be>
 800bc74:	42a6      	cmp	r6, r4
 800bc76:	f43f af50 	beq.w	800bb1a <_dtoa_r+0x43a>
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bca8 <_dtoa_r+0x5c8>)
 800bc7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bc82:	f7f4 fcc9 	bl	8000618 <__aeabi_dmul>
 800bc86:	2200      	movs	r2, #0
 800bc88:	4b07      	ldr	r3, [pc, #28]	@ (800bca8 <_dtoa_r+0x5c8>)
 800bc8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc92:	f7f4 fcc1 	bl	8000618 <__aeabi_dmul>
 800bc96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc9a:	e7c4      	b.n	800bc26 <_dtoa_r+0x546>
 800bc9c:	0800ed70 	.word	0x0800ed70
 800bca0:	0800ed48 	.word	0x0800ed48
 800bca4:	3ff00000 	.word	0x3ff00000
 800bca8:	40240000 	.word	0x40240000
 800bcac:	401c0000 	.word	0x401c0000
 800bcb0:	40140000 	.word	0x40140000
 800bcb4:	3fe00000 	.word	0x3fe00000
 800bcb8:	4631      	mov	r1, r6
 800bcba:	4656      	mov	r6, sl
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	f7f4 fcab 	bl	8000618 <__aeabi_dmul>
 800bcc2:	9415      	str	r4, [sp, #84]	@ 0x54
 800bcc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bcc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bccc:	f7f4 ff54 	bl	8000b78 <__aeabi_d2iz>
 800bcd0:	4605      	mov	r5, r0
 800bcd2:	f7f4 fc37 	bl	8000544 <__aeabi_i2d>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	3530      	adds	r5, #48	@ 0x30
 800bcda:	460b      	mov	r3, r1
 800bcdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bce0:	f7f4 fae2 	bl	80002a8 <__aeabi_dsub>
 800bce4:	f806 5b01 	strb.w	r5, [r6], #1
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	42a6      	cmp	r6, r4
 800bcee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcf2:	f04f 0200 	mov.w	r2, #0
 800bcf6:	d124      	bne.n	800bd42 <_dtoa_r+0x662>
 800bcf8:	4bac      	ldr	r3, [pc, #688]	@ (800bfac <_dtoa_r+0x8cc>)
 800bcfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bcfe:	f7f4 fad5 	bl	80002ac <__adddf3>
 800bd02:	4602      	mov	r2, r0
 800bd04:	460b      	mov	r3, r1
 800bd06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd0a:	f7f4 ff15 	bl	8000b38 <__aeabi_dcmpgt>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	d145      	bne.n	800bd9e <_dtoa_r+0x6be>
 800bd12:	2000      	movs	r0, #0
 800bd14:	49a5      	ldr	r1, [pc, #660]	@ (800bfac <_dtoa_r+0x8cc>)
 800bd16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd1a:	f7f4 fac5 	bl	80002a8 <__aeabi_dsub>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	460b      	mov	r3, r1
 800bd22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd26:	f7f4 fee9 	bl	8000afc <__aeabi_dcmplt>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	f43f aef5 	beq.w	800bb1a <_dtoa_r+0x43a>
 800bd30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bd32:	1e73      	subs	r3, r6, #1
 800bd34:	9315      	str	r3, [sp, #84]	@ 0x54
 800bd36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd3a:	2b30      	cmp	r3, #48	@ 0x30
 800bd3c:	d0f8      	beq.n	800bd30 <_dtoa_r+0x650>
 800bd3e:	9f04      	ldr	r7, [sp, #16]
 800bd40:	e73e      	b.n	800bbc0 <_dtoa_r+0x4e0>
 800bd42:	4b9b      	ldr	r3, [pc, #620]	@ (800bfb0 <_dtoa_r+0x8d0>)
 800bd44:	f7f4 fc68 	bl	8000618 <__aeabi_dmul>
 800bd48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd4c:	e7bc      	b.n	800bcc8 <_dtoa_r+0x5e8>
 800bd4e:	d10c      	bne.n	800bd6a <_dtoa_r+0x68a>
 800bd50:	2200      	movs	r2, #0
 800bd52:	4b98      	ldr	r3, [pc, #608]	@ (800bfb4 <_dtoa_r+0x8d4>)
 800bd54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd58:	f7f4 fc5e 	bl	8000618 <__aeabi_dmul>
 800bd5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd60:	f7f4 fee0 	bl	8000b24 <__aeabi_dcmpge>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	f000 8157 	beq.w	800c018 <_dtoa_r+0x938>
 800bd6a:	2400      	movs	r4, #0
 800bd6c:	4625      	mov	r5, r4
 800bd6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd70:	4656      	mov	r6, sl
 800bd72:	43db      	mvns	r3, r3
 800bd74:	9304      	str	r3, [sp, #16]
 800bd76:	2700      	movs	r7, #0
 800bd78:	4621      	mov	r1, r4
 800bd7a:	4658      	mov	r0, fp
 800bd7c:	f000 fafe 	bl	800c37c <_Bfree>
 800bd80:	2d00      	cmp	r5, #0
 800bd82:	d0dc      	beq.n	800bd3e <_dtoa_r+0x65e>
 800bd84:	b12f      	cbz	r7, 800bd92 <_dtoa_r+0x6b2>
 800bd86:	42af      	cmp	r7, r5
 800bd88:	d003      	beq.n	800bd92 <_dtoa_r+0x6b2>
 800bd8a:	4639      	mov	r1, r7
 800bd8c:	4658      	mov	r0, fp
 800bd8e:	f000 faf5 	bl	800c37c <_Bfree>
 800bd92:	4629      	mov	r1, r5
 800bd94:	4658      	mov	r0, fp
 800bd96:	f000 faf1 	bl	800c37c <_Bfree>
 800bd9a:	e7d0      	b.n	800bd3e <_dtoa_r+0x65e>
 800bd9c:	9704      	str	r7, [sp, #16]
 800bd9e:	4633      	mov	r3, r6
 800bda0:	461e      	mov	r6, r3
 800bda2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bda6:	2a39      	cmp	r2, #57	@ 0x39
 800bda8:	d107      	bne.n	800bdba <_dtoa_r+0x6da>
 800bdaa:	459a      	cmp	sl, r3
 800bdac:	d1f8      	bne.n	800bda0 <_dtoa_r+0x6c0>
 800bdae:	9a04      	ldr	r2, [sp, #16]
 800bdb0:	3201      	adds	r2, #1
 800bdb2:	9204      	str	r2, [sp, #16]
 800bdb4:	2230      	movs	r2, #48	@ 0x30
 800bdb6:	f88a 2000 	strb.w	r2, [sl]
 800bdba:	781a      	ldrb	r2, [r3, #0]
 800bdbc:	3201      	adds	r2, #1
 800bdbe:	701a      	strb	r2, [r3, #0]
 800bdc0:	e7bd      	b.n	800bd3e <_dtoa_r+0x65e>
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	4b7a      	ldr	r3, [pc, #488]	@ (800bfb0 <_dtoa_r+0x8d0>)
 800bdc6:	f7f4 fc27 	bl	8000618 <__aeabi_dmul>
 800bdca:	2200      	movs	r2, #0
 800bdcc:	2300      	movs	r3, #0
 800bdce:	4604      	mov	r4, r0
 800bdd0:	460d      	mov	r5, r1
 800bdd2:	f7f4 fe89 	bl	8000ae8 <__aeabi_dcmpeq>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	f43f aebb 	beq.w	800bb52 <_dtoa_r+0x472>
 800bddc:	e6f0      	b.n	800bbc0 <_dtoa_r+0x4e0>
 800bdde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bde0:	2a00      	cmp	r2, #0
 800bde2:	f000 80db 	beq.w	800bf9c <_dtoa_r+0x8bc>
 800bde6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bde8:	2a01      	cmp	r2, #1
 800bdea:	f300 80bf 	bgt.w	800bf6c <_dtoa_r+0x88c>
 800bdee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bdf0:	2a00      	cmp	r2, #0
 800bdf2:	f000 80b7 	beq.w	800bf64 <_dtoa_r+0x884>
 800bdf6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bdfa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bdfc:	4646      	mov	r6, r8
 800bdfe:	9a08      	ldr	r2, [sp, #32]
 800be00:	2101      	movs	r1, #1
 800be02:	4658      	mov	r0, fp
 800be04:	4498      	add	r8, r3
 800be06:	441a      	add	r2, r3
 800be08:	9208      	str	r2, [sp, #32]
 800be0a:	f000 fbb7 	bl	800c57c <__i2b>
 800be0e:	4605      	mov	r5, r0
 800be10:	b15e      	cbz	r6, 800be2a <_dtoa_r+0x74a>
 800be12:	9b08      	ldr	r3, [sp, #32]
 800be14:	2b00      	cmp	r3, #0
 800be16:	dd08      	ble.n	800be2a <_dtoa_r+0x74a>
 800be18:	42b3      	cmp	r3, r6
 800be1a:	9a08      	ldr	r2, [sp, #32]
 800be1c:	bfa8      	it	ge
 800be1e:	4633      	movge	r3, r6
 800be20:	eba8 0803 	sub.w	r8, r8, r3
 800be24:	1af6      	subs	r6, r6, r3
 800be26:	1ad3      	subs	r3, r2, r3
 800be28:	9308      	str	r3, [sp, #32]
 800be2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be2c:	b1f3      	cbz	r3, 800be6c <_dtoa_r+0x78c>
 800be2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be30:	2b00      	cmp	r3, #0
 800be32:	f000 80b7 	beq.w	800bfa4 <_dtoa_r+0x8c4>
 800be36:	b18c      	cbz	r4, 800be5c <_dtoa_r+0x77c>
 800be38:	4629      	mov	r1, r5
 800be3a:	4622      	mov	r2, r4
 800be3c:	4658      	mov	r0, fp
 800be3e:	f000 fc5d 	bl	800c6fc <__pow5mult>
 800be42:	464a      	mov	r2, r9
 800be44:	4601      	mov	r1, r0
 800be46:	4605      	mov	r5, r0
 800be48:	4658      	mov	r0, fp
 800be4a:	f000 fbad 	bl	800c5a8 <__multiply>
 800be4e:	4649      	mov	r1, r9
 800be50:	9004      	str	r0, [sp, #16]
 800be52:	4658      	mov	r0, fp
 800be54:	f000 fa92 	bl	800c37c <_Bfree>
 800be58:	9b04      	ldr	r3, [sp, #16]
 800be5a:	4699      	mov	r9, r3
 800be5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be5e:	1b1a      	subs	r2, r3, r4
 800be60:	d004      	beq.n	800be6c <_dtoa_r+0x78c>
 800be62:	4649      	mov	r1, r9
 800be64:	4658      	mov	r0, fp
 800be66:	f000 fc49 	bl	800c6fc <__pow5mult>
 800be6a:	4681      	mov	r9, r0
 800be6c:	2101      	movs	r1, #1
 800be6e:	4658      	mov	r0, fp
 800be70:	f000 fb84 	bl	800c57c <__i2b>
 800be74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be76:	4604      	mov	r4, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f000 81cf 	beq.w	800c21c <_dtoa_r+0xb3c>
 800be7e:	461a      	mov	r2, r3
 800be80:	4601      	mov	r1, r0
 800be82:	4658      	mov	r0, fp
 800be84:	f000 fc3a 	bl	800c6fc <__pow5mult>
 800be88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be8a:	4604      	mov	r4, r0
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	f300 8095 	bgt.w	800bfbc <_dtoa_r+0x8dc>
 800be92:	9b02      	ldr	r3, [sp, #8]
 800be94:	2b00      	cmp	r3, #0
 800be96:	f040 8087 	bne.w	800bfa8 <_dtoa_r+0x8c8>
 800be9a:	9b03      	ldr	r3, [sp, #12]
 800be9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f040 8089 	bne.w	800bfb8 <_dtoa_r+0x8d8>
 800bea6:	9b03      	ldr	r3, [sp, #12]
 800bea8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800beac:	0d1b      	lsrs	r3, r3, #20
 800beae:	051b      	lsls	r3, r3, #20
 800beb0:	b12b      	cbz	r3, 800bebe <_dtoa_r+0x7de>
 800beb2:	9b08      	ldr	r3, [sp, #32]
 800beb4:	f108 0801 	add.w	r8, r8, #1
 800beb8:	3301      	adds	r3, #1
 800beba:	9308      	str	r3, [sp, #32]
 800bebc:	2301      	movs	r3, #1
 800bebe:	930a      	str	r3, [sp, #40]	@ 0x28
 800bec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 81b0 	beq.w	800c228 <_dtoa_r+0xb48>
 800bec8:	6923      	ldr	r3, [r4, #16]
 800beca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bece:	6918      	ldr	r0, [r3, #16]
 800bed0:	f000 fb08 	bl	800c4e4 <__hi0bits>
 800bed4:	f1c0 0020 	rsb	r0, r0, #32
 800bed8:	9b08      	ldr	r3, [sp, #32]
 800beda:	4418      	add	r0, r3
 800bedc:	f010 001f 	ands.w	r0, r0, #31
 800bee0:	d077      	beq.n	800bfd2 <_dtoa_r+0x8f2>
 800bee2:	f1c0 0320 	rsb	r3, r0, #32
 800bee6:	2b04      	cmp	r3, #4
 800bee8:	dd6b      	ble.n	800bfc2 <_dtoa_r+0x8e2>
 800beea:	f1c0 001c 	rsb	r0, r0, #28
 800beee:	9b08      	ldr	r3, [sp, #32]
 800bef0:	4480      	add	r8, r0
 800bef2:	4403      	add	r3, r0
 800bef4:	4406      	add	r6, r0
 800bef6:	9308      	str	r3, [sp, #32]
 800bef8:	f1b8 0f00 	cmp.w	r8, #0
 800befc:	dd05      	ble.n	800bf0a <_dtoa_r+0x82a>
 800befe:	4649      	mov	r1, r9
 800bf00:	4642      	mov	r2, r8
 800bf02:	4658      	mov	r0, fp
 800bf04:	f000 fc54 	bl	800c7b0 <__lshift>
 800bf08:	4681      	mov	r9, r0
 800bf0a:	9b08      	ldr	r3, [sp, #32]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	dd05      	ble.n	800bf1c <_dtoa_r+0x83c>
 800bf10:	4621      	mov	r1, r4
 800bf12:	461a      	mov	r2, r3
 800bf14:	4658      	mov	r0, fp
 800bf16:	f000 fc4b 	bl	800c7b0 <__lshift>
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d059      	beq.n	800bfd6 <_dtoa_r+0x8f6>
 800bf22:	4621      	mov	r1, r4
 800bf24:	4648      	mov	r0, r9
 800bf26:	f000 fcaf 	bl	800c888 <__mcmp>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	da53      	bge.n	800bfd6 <_dtoa_r+0x8f6>
 800bf2e:	1e7b      	subs	r3, r7, #1
 800bf30:	4649      	mov	r1, r9
 800bf32:	220a      	movs	r2, #10
 800bf34:	4658      	mov	r0, fp
 800bf36:	9304      	str	r3, [sp, #16]
 800bf38:	2300      	movs	r3, #0
 800bf3a:	f000 fa41 	bl	800c3c0 <__multadd>
 800bf3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf40:	4681      	mov	r9, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f000 8172 	beq.w	800c22c <_dtoa_r+0xb4c>
 800bf48:	2300      	movs	r3, #0
 800bf4a:	4629      	mov	r1, r5
 800bf4c:	220a      	movs	r2, #10
 800bf4e:	4658      	mov	r0, fp
 800bf50:	f000 fa36 	bl	800c3c0 <__multadd>
 800bf54:	9b00      	ldr	r3, [sp, #0]
 800bf56:	4605      	mov	r5, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	dc67      	bgt.n	800c02c <_dtoa_r+0x94c>
 800bf5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	dc41      	bgt.n	800bfe6 <_dtoa_r+0x906>
 800bf62:	e063      	b.n	800c02c <_dtoa_r+0x94c>
 800bf64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bf66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bf6a:	e746      	b.n	800bdfa <_dtoa_r+0x71a>
 800bf6c:	9b07      	ldr	r3, [sp, #28]
 800bf6e:	1e5c      	subs	r4, r3, #1
 800bf70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf72:	42a3      	cmp	r3, r4
 800bf74:	bfb7      	itett	lt
 800bf76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bf78:	1b1c      	subge	r4, r3, r4
 800bf7a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bf7c:	1ae3      	sublt	r3, r4, r3
 800bf7e:	bfbe      	ittt	lt
 800bf80:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bf82:	2400      	movlt	r4, #0
 800bf84:	18d2      	addlt	r2, r2, r3
 800bf86:	9b07      	ldr	r3, [sp, #28]
 800bf88:	bfb8      	it	lt
 800bf8a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	bfb5      	itete	lt
 800bf90:	eba8 0603 	sublt.w	r6, r8, r3
 800bf94:	4646      	movge	r6, r8
 800bf96:	2300      	movlt	r3, #0
 800bf98:	9b07      	ldrge	r3, [sp, #28]
 800bf9a:	e730      	b.n	800bdfe <_dtoa_r+0x71e>
 800bf9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf9e:	4646      	mov	r6, r8
 800bfa0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bfa2:	e735      	b.n	800be10 <_dtoa_r+0x730>
 800bfa4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bfa6:	e75c      	b.n	800be62 <_dtoa_r+0x782>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	e788      	b.n	800bebe <_dtoa_r+0x7de>
 800bfac:	3fe00000 	.word	0x3fe00000
 800bfb0:	40240000 	.word	0x40240000
 800bfb4:	40140000 	.word	0x40140000
 800bfb8:	9b02      	ldr	r3, [sp, #8]
 800bfba:	e780      	b.n	800bebe <_dtoa_r+0x7de>
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfc0:	e782      	b.n	800bec8 <_dtoa_r+0x7e8>
 800bfc2:	d099      	beq.n	800bef8 <_dtoa_r+0x818>
 800bfc4:	331c      	adds	r3, #28
 800bfc6:	9a08      	ldr	r2, [sp, #32]
 800bfc8:	441a      	add	r2, r3
 800bfca:	4498      	add	r8, r3
 800bfcc:	441e      	add	r6, r3
 800bfce:	9208      	str	r2, [sp, #32]
 800bfd0:	e792      	b.n	800bef8 <_dtoa_r+0x818>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	e7f6      	b.n	800bfc4 <_dtoa_r+0x8e4>
 800bfd6:	9b07      	ldr	r3, [sp, #28]
 800bfd8:	9704      	str	r7, [sp, #16]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	dc20      	bgt.n	800c020 <_dtoa_r+0x940>
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	dd1e      	ble.n	800c024 <_dtoa_r+0x944>
 800bfe6:	9b00      	ldr	r3, [sp, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f47f aec0 	bne.w	800bd6e <_dtoa_r+0x68e>
 800bfee:	4621      	mov	r1, r4
 800bff0:	2205      	movs	r2, #5
 800bff2:	4658      	mov	r0, fp
 800bff4:	f000 f9e4 	bl	800c3c0 <__multadd>
 800bff8:	4601      	mov	r1, r0
 800bffa:	4604      	mov	r4, r0
 800bffc:	4648      	mov	r0, r9
 800bffe:	f000 fc43 	bl	800c888 <__mcmp>
 800c002:	2800      	cmp	r0, #0
 800c004:	f77f aeb3 	ble.w	800bd6e <_dtoa_r+0x68e>
 800c008:	2331      	movs	r3, #49	@ 0x31
 800c00a:	4656      	mov	r6, sl
 800c00c:	f806 3b01 	strb.w	r3, [r6], #1
 800c010:	9b04      	ldr	r3, [sp, #16]
 800c012:	3301      	adds	r3, #1
 800c014:	9304      	str	r3, [sp, #16]
 800c016:	e6ae      	b.n	800bd76 <_dtoa_r+0x696>
 800c018:	9c07      	ldr	r4, [sp, #28]
 800c01a:	9704      	str	r7, [sp, #16]
 800c01c:	4625      	mov	r5, r4
 800c01e:	e7f3      	b.n	800c008 <_dtoa_r+0x928>
 800c020:	9b07      	ldr	r3, [sp, #28]
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c026:	2b00      	cmp	r3, #0
 800c028:	f000 8104 	beq.w	800c234 <_dtoa_r+0xb54>
 800c02c:	2e00      	cmp	r6, #0
 800c02e:	dd05      	ble.n	800c03c <_dtoa_r+0x95c>
 800c030:	4629      	mov	r1, r5
 800c032:	4632      	mov	r2, r6
 800c034:	4658      	mov	r0, fp
 800c036:	f000 fbbb 	bl	800c7b0 <__lshift>
 800c03a:	4605      	mov	r5, r0
 800c03c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d05a      	beq.n	800c0f8 <_dtoa_r+0xa18>
 800c042:	6869      	ldr	r1, [r5, #4]
 800c044:	4658      	mov	r0, fp
 800c046:	f000 f959 	bl	800c2fc <_Balloc>
 800c04a:	4606      	mov	r6, r0
 800c04c:	b928      	cbnz	r0, 800c05a <_dtoa_r+0x97a>
 800c04e:	4b84      	ldr	r3, [pc, #528]	@ (800c260 <_dtoa_r+0xb80>)
 800c050:	4602      	mov	r2, r0
 800c052:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c056:	f7ff bb5a 	b.w	800b70e <_dtoa_r+0x2e>
 800c05a:	692a      	ldr	r2, [r5, #16]
 800c05c:	f105 010c 	add.w	r1, r5, #12
 800c060:	300c      	adds	r0, #12
 800c062:	3202      	adds	r2, #2
 800c064:	0092      	lsls	r2, r2, #2
 800c066:	f002 f87f 	bl	800e168 <memcpy>
 800c06a:	2201      	movs	r2, #1
 800c06c:	4631      	mov	r1, r6
 800c06e:	4658      	mov	r0, fp
 800c070:	f000 fb9e 	bl	800c7b0 <__lshift>
 800c074:	f10a 0301 	add.w	r3, sl, #1
 800c078:	462f      	mov	r7, r5
 800c07a:	4605      	mov	r5, r0
 800c07c:	9307      	str	r3, [sp, #28]
 800c07e:	9b00      	ldr	r3, [sp, #0]
 800c080:	4453      	add	r3, sl
 800c082:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c084:	9b02      	ldr	r3, [sp, #8]
 800c086:	f003 0301 	and.w	r3, r3, #1
 800c08a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c08c:	9b07      	ldr	r3, [sp, #28]
 800c08e:	4621      	mov	r1, r4
 800c090:	4648      	mov	r0, r9
 800c092:	3b01      	subs	r3, #1
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	f7ff fa95 	bl	800b5c4 <quorem>
 800c09a:	4639      	mov	r1, r7
 800c09c:	9002      	str	r0, [sp, #8]
 800c09e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c0a2:	4648      	mov	r0, r9
 800c0a4:	f000 fbf0 	bl	800c888 <__mcmp>
 800c0a8:	462a      	mov	r2, r5
 800c0aa:	9008      	str	r0, [sp, #32]
 800c0ac:	4621      	mov	r1, r4
 800c0ae:	4658      	mov	r0, fp
 800c0b0:	f000 fc06 	bl	800c8c0 <__mdiff>
 800c0b4:	68c2      	ldr	r2, [r0, #12]
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	bb02      	cbnz	r2, 800c0fc <_dtoa_r+0xa1c>
 800c0ba:	4601      	mov	r1, r0
 800c0bc:	4648      	mov	r0, r9
 800c0be:	f000 fbe3 	bl	800c888 <__mcmp>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	4631      	mov	r1, r6
 800c0c6:	4658      	mov	r0, fp
 800c0c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c0ca:	f000 f957 	bl	800c37c <_Bfree>
 800c0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0d2:	9e07      	ldr	r6, [sp, #28]
 800c0d4:	ea43 0102 	orr.w	r1, r3, r2
 800c0d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0da:	4319      	orrs	r1, r3
 800c0dc:	d110      	bne.n	800c100 <_dtoa_r+0xa20>
 800c0de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c0e2:	d029      	beq.n	800c138 <_dtoa_r+0xa58>
 800c0e4:	9b08      	ldr	r3, [sp, #32]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	dd02      	ble.n	800c0f0 <_dtoa_r+0xa10>
 800c0ea:	9b02      	ldr	r3, [sp, #8]
 800c0ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c0f0:	9b00      	ldr	r3, [sp, #0]
 800c0f2:	f883 8000 	strb.w	r8, [r3]
 800c0f6:	e63f      	b.n	800bd78 <_dtoa_r+0x698>
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	e7bb      	b.n	800c074 <_dtoa_r+0x994>
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	e7e1      	b.n	800c0c4 <_dtoa_r+0x9e4>
 800c100:	9b08      	ldr	r3, [sp, #32]
 800c102:	2b00      	cmp	r3, #0
 800c104:	db04      	blt.n	800c110 <_dtoa_r+0xa30>
 800c106:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c108:	430b      	orrs	r3, r1
 800c10a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c10c:	430b      	orrs	r3, r1
 800c10e:	d120      	bne.n	800c152 <_dtoa_r+0xa72>
 800c110:	2a00      	cmp	r2, #0
 800c112:	dded      	ble.n	800c0f0 <_dtoa_r+0xa10>
 800c114:	4649      	mov	r1, r9
 800c116:	2201      	movs	r2, #1
 800c118:	4658      	mov	r0, fp
 800c11a:	f000 fb49 	bl	800c7b0 <__lshift>
 800c11e:	4621      	mov	r1, r4
 800c120:	4681      	mov	r9, r0
 800c122:	f000 fbb1 	bl	800c888 <__mcmp>
 800c126:	2800      	cmp	r0, #0
 800c128:	dc03      	bgt.n	800c132 <_dtoa_r+0xa52>
 800c12a:	d1e1      	bne.n	800c0f0 <_dtoa_r+0xa10>
 800c12c:	f018 0f01 	tst.w	r8, #1
 800c130:	d0de      	beq.n	800c0f0 <_dtoa_r+0xa10>
 800c132:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c136:	d1d8      	bne.n	800c0ea <_dtoa_r+0xa0a>
 800c138:	2339      	movs	r3, #57	@ 0x39
 800c13a:	9a00      	ldr	r2, [sp, #0]
 800c13c:	7013      	strb	r3, [r2, #0]
 800c13e:	4633      	mov	r3, r6
 800c140:	461e      	mov	r6, r3
 800c142:	3b01      	subs	r3, #1
 800c144:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c148:	2a39      	cmp	r2, #57	@ 0x39
 800c14a:	d052      	beq.n	800c1f2 <_dtoa_r+0xb12>
 800c14c:	3201      	adds	r2, #1
 800c14e:	701a      	strb	r2, [r3, #0]
 800c150:	e612      	b.n	800bd78 <_dtoa_r+0x698>
 800c152:	2a00      	cmp	r2, #0
 800c154:	dd07      	ble.n	800c166 <_dtoa_r+0xa86>
 800c156:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c15a:	d0ed      	beq.n	800c138 <_dtoa_r+0xa58>
 800c15c:	f108 0301 	add.w	r3, r8, #1
 800c160:	9a00      	ldr	r2, [sp, #0]
 800c162:	7013      	strb	r3, [r2, #0]
 800c164:	e608      	b.n	800bd78 <_dtoa_r+0x698>
 800c166:	9b07      	ldr	r3, [sp, #28]
 800c168:	9a07      	ldr	r2, [sp, #28]
 800c16a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c16e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c170:	4293      	cmp	r3, r2
 800c172:	d028      	beq.n	800c1c6 <_dtoa_r+0xae6>
 800c174:	4649      	mov	r1, r9
 800c176:	2300      	movs	r3, #0
 800c178:	220a      	movs	r2, #10
 800c17a:	4658      	mov	r0, fp
 800c17c:	f000 f920 	bl	800c3c0 <__multadd>
 800c180:	42af      	cmp	r7, r5
 800c182:	4681      	mov	r9, r0
 800c184:	f04f 0300 	mov.w	r3, #0
 800c188:	f04f 020a 	mov.w	r2, #10
 800c18c:	4639      	mov	r1, r7
 800c18e:	4658      	mov	r0, fp
 800c190:	d107      	bne.n	800c1a2 <_dtoa_r+0xac2>
 800c192:	f000 f915 	bl	800c3c0 <__multadd>
 800c196:	4607      	mov	r7, r0
 800c198:	4605      	mov	r5, r0
 800c19a:	9b07      	ldr	r3, [sp, #28]
 800c19c:	3301      	adds	r3, #1
 800c19e:	9307      	str	r3, [sp, #28]
 800c1a0:	e774      	b.n	800c08c <_dtoa_r+0x9ac>
 800c1a2:	f000 f90d 	bl	800c3c0 <__multadd>
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	4607      	mov	r7, r0
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	220a      	movs	r2, #10
 800c1ae:	4658      	mov	r0, fp
 800c1b0:	f000 f906 	bl	800c3c0 <__multadd>
 800c1b4:	4605      	mov	r5, r0
 800c1b6:	e7f0      	b.n	800c19a <_dtoa_r+0xaba>
 800c1b8:	9b00      	ldr	r3, [sp, #0]
 800c1ba:	2700      	movs	r7, #0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	bfcc      	ite	gt
 800c1c0:	461e      	movgt	r6, r3
 800c1c2:	2601      	movle	r6, #1
 800c1c4:	4456      	add	r6, sl
 800c1c6:	4649      	mov	r1, r9
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	4658      	mov	r0, fp
 800c1cc:	f000 faf0 	bl	800c7b0 <__lshift>
 800c1d0:	4621      	mov	r1, r4
 800c1d2:	4681      	mov	r9, r0
 800c1d4:	f000 fb58 	bl	800c888 <__mcmp>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	dcb0      	bgt.n	800c13e <_dtoa_r+0xa5e>
 800c1dc:	d102      	bne.n	800c1e4 <_dtoa_r+0xb04>
 800c1de:	f018 0f01 	tst.w	r8, #1
 800c1e2:	d1ac      	bne.n	800c13e <_dtoa_r+0xa5e>
 800c1e4:	4633      	mov	r3, r6
 800c1e6:	461e      	mov	r6, r3
 800c1e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1ec:	2a30      	cmp	r2, #48	@ 0x30
 800c1ee:	d0fa      	beq.n	800c1e6 <_dtoa_r+0xb06>
 800c1f0:	e5c2      	b.n	800bd78 <_dtoa_r+0x698>
 800c1f2:	459a      	cmp	sl, r3
 800c1f4:	d1a4      	bne.n	800c140 <_dtoa_r+0xa60>
 800c1f6:	9b04      	ldr	r3, [sp, #16]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	9304      	str	r3, [sp, #16]
 800c1fc:	2331      	movs	r3, #49	@ 0x31
 800c1fe:	f88a 3000 	strb.w	r3, [sl]
 800c202:	e5b9      	b.n	800bd78 <_dtoa_r+0x698>
 800c204:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c206:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c264 <_dtoa_r+0xb84>
 800c20a:	b11b      	cbz	r3, 800c214 <_dtoa_r+0xb34>
 800c20c:	f10a 0308 	add.w	r3, sl, #8
 800c210:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c212:	6013      	str	r3, [r2, #0]
 800c214:	4650      	mov	r0, sl
 800c216:	b019      	add	sp, #100	@ 0x64
 800c218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c21e:	2b01      	cmp	r3, #1
 800c220:	f77f ae37 	ble.w	800be92 <_dtoa_r+0x7b2>
 800c224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c226:	930a      	str	r3, [sp, #40]	@ 0x28
 800c228:	2001      	movs	r0, #1
 800c22a:	e655      	b.n	800bed8 <_dtoa_r+0x7f8>
 800c22c:	9b00      	ldr	r3, [sp, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f77f aed6 	ble.w	800bfe0 <_dtoa_r+0x900>
 800c234:	4656      	mov	r6, sl
 800c236:	4621      	mov	r1, r4
 800c238:	4648      	mov	r0, r9
 800c23a:	f7ff f9c3 	bl	800b5c4 <quorem>
 800c23e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c242:	9b00      	ldr	r3, [sp, #0]
 800c244:	f806 8b01 	strb.w	r8, [r6], #1
 800c248:	eba6 020a 	sub.w	r2, r6, sl
 800c24c:	4293      	cmp	r3, r2
 800c24e:	ddb3      	ble.n	800c1b8 <_dtoa_r+0xad8>
 800c250:	4649      	mov	r1, r9
 800c252:	2300      	movs	r3, #0
 800c254:	220a      	movs	r2, #10
 800c256:	4658      	mov	r0, fp
 800c258:	f000 f8b2 	bl	800c3c0 <__multadd>
 800c25c:	4681      	mov	r9, r0
 800c25e:	e7ea      	b.n	800c236 <_dtoa_r+0xb56>
 800c260:	0800eccd 	.word	0x0800eccd
 800c264:	0800ec51 	.word	0x0800ec51

0800c268 <_free_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	4605      	mov	r5, r0
 800c26c:	2900      	cmp	r1, #0
 800c26e:	d041      	beq.n	800c2f4 <_free_r+0x8c>
 800c270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c274:	1f0c      	subs	r4, r1, #4
 800c276:	2b00      	cmp	r3, #0
 800c278:	bfb8      	it	lt
 800c27a:	18e4      	addlt	r4, r4, r3
 800c27c:	f7fe f85c 	bl	800a338 <__malloc_lock>
 800c280:	4a1d      	ldr	r2, [pc, #116]	@ (800c2f8 <_free_r+0x90>)
 800c282:	6813      	ldr	r3, [r2, #0]
 800c284:	b933      	cbnz	r3, 800c294 <_free_r+0x2c>
 800c286:	6063      	str	r3, [r4, #4]
 800c288:	6014      	str	r4, [r2, #0]
 800c28a:	4628      	mov	r0, r5
 800c28c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c290:	f7fe b858 	b.w	800a344 <__malloc_unlock>
 800c294:	42a3      	cmp	r3, r4
 800c296:	d908      	bls.n	800c2aa <_free_r+0x42>
 800c298:	6820      	ldr	r0, [r4, #0]
 800c29a:	1821      	adds	r1, r4, r0
 800c29c:	428b      	cmp	r3, r1
 800c29e:	bf01      	itttt	eq
 800c2a0:	6819      	ldreq	r1, [r3, #0]
 800c2a2:	685b      	ldreq	r3, [r3, #4]
 800c2a4:	1809      	addeq	r1, r1, r0
 800c2a6:	6021      	streq	r1, [r4, #0]
 800c2a8:	e7ed      	b.n	800c286 <_free_r+0x1e>
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	b10b      	cbz	r3, 800c2b4 <_free_r+0x4c>
 800c2b0:	42a3      	cmp	r3, r4
 800c2b2:	d9fa      	bls.n	800c2aa <_free_r+0x42>
 800c2b4:	6811      	ldr	r1, [r2, #0]
 800c2b6:	1850      	adds	r0, r2, r1
 800c2b8:	42a0      	cmp	r0, r4
 800c2ba:	d10b      	bne.n	800c2d4 <_free_r+0x6c>
 800c2bc:	6820      	ldr	r0, [r4, #0]
 800c2be:	4401      	add	r1, r0
 800c2c0:	1850      	adds	r0, r2, r1
 800c2c2:	6011      	str	r1, [r2, #0]
 800c2c4:	4283      	cmp	r3, r0
 800c2c6:	d1e0      	bne.n	800c28a <_free_r+0x22>
 800c2c8:	6818      	ldr	r0, [r3, #0]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	4408      	add	r0, r1
 800c2ce:	6053      	str	r3, [r2, #4]
 800c2d0:	6010      	str	r0, [r2, #0]
 800c2d2:	e7da      	b.n	800c28a <_free_r+0x22>
 800c2d4:	d902      	bls.n	800c2dc <_free_r+0x74>
 800c2d6:	230c      	movs	r3, #12
 800c2d8:	602b      	str	r3, [r5, #0]
 800c2da:	e7d6      	b.n	800c28a <_free_r+0x22>
 800c2dc:	6820      	ldr	r0, [r4, #0]
 800c2de:	1821      	adds	r1, r4, r0
 800c2e0:	428b      	cmp	r3, r1
 800c2e2:	bf02      	ittt	eq
 800c2e4:	6819      	ldreq	r1, [r3, #0]
 800c2e6:	685b      	ldreq	r3, [r3, #4]
 800c2e8:	1809      	addeq	r1, r1, r0
 800c2ea:	6063      	str	r3, [r4, #4]
 800c2ec:	bf08      	it	eq
 800c2ee:	6021      	streq	r1, [r4, #0]
 800c2f0:	6054      	str	r4, [r2, #4]
 800c2f2:	e7ca      	b.n	800c28a <_free_r+0x22>
 800c2f4:	bd38      	pop	{r3, r4, r5, pc}
 800c2f6:	bf00      	nop
 800c2f8:	200004a0 	.word	0x200004a0

0800c2fc <_Balloc>:
 800c2fc:	b570      	push	{r4, r5, r6, lr}
 800c2fe:	69c6      	ldr	r6, [r0, #28]
 800c300:	4604      	mov	r4, r0
 800c302:	460d      	mov	r5, r1
 800c304:	b976      	cbnz	r6, 800c324 <_Balloc+0x28>
 800c306:	2010      	movs	r0, #16
 800c308:	f7fd ff64 	bl	800a1d4 <malloc>
 800c30c:	4602      	mov	r2, r0
 800c30e:	61e0      	str	r0, [r4, #28]
 800c310:	b920      	cbnz	r0, 800c31c <_Balloc+0x20>
 800c312:	4b18      	ldr	r3, [pc, #96]	@ (800c374 <_Balloc+0x78>)
 800c314:	216b      	movs	r1, #107	@ 0x6b
 800c316:	4818      	ldr	r0, [pc, #96]	@ (800c378 <_Balloc+0x7c>)
 800c318:	f001 ff3e 	bl	800e198 <__assert_func>
 800c31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c320:	6006      	str	r6, [r0, #0]
 800c322:	60c6      	str	r6, [r0, #12]
 800c324:	69e6      	ldr	r6, [r4, #28]
 800c326:	68f3      	ldr	r3, [r6, #12]
 800c328:	b183      	cbz	r3, 800c34c <_Balloc+0x50>
 800c32a:	69e3      	ldr	r3, [r4, #28]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c332:	b9b8      	cbnz	r0, 800c364 <_Balloc+0x68>
 800c334:	2101      	movs	r1, #1
 800c336:	4620      	mov	r0, r4
 800c338:	fa01 f605 	lsl.w	r6, r1, r5
 800c33c:	1d72      	adds	r2, r6, #5
 800c33e:	0092      	lsls	r2, r2, #2
 800c340:	f001 ff48 	bl	800e1d4 <_calloc_r>
 800c344:	b160      	cbz	r0, 800c360 <_Balloc+0x64>
 800c346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c34a:	e00e      	b.n	800c36a <_Balloc+0x6e>
 800c34c:	2221      	movs	r2, #33	@ 0x21
 800c34e:	2104      	movs	r1, #4
 800c350:	4620      	mov	r0, r4
 800c352:	f001 ff3f 	bl	800e1d4 <_calloc_r>
 800c356:	69e3      	ldr	r3, [r4, #28]
 800c358:	60f0      	str	r0, [r6, #12]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1e4      	bne.n	800c32a <_Balloc+0x2e>
 800c360:	2000      	movs	r0, #0
 800c362:	bd70      	pop	{r4, r5, r6, pc}
 800c364:	6802      	ldr	r2, [r0, #0]
 800c366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c36a:	2300      	movs	r3, #0
 800c36c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c370:	e7f7      	b.n	800c362 <_Balloc+0x66>
 800c372:	bf00      	nop
 800c374:	0800ec5e 	.word	0x0800ec5e
 800c378:	0800ecde 	.word	0x0800ecde

0800c37c <_Bfree>:
 800c37c:	b570      	push	{r4, r5, r6, lr}
 800c37e:	69c6      	ldr	r6, [r0, #28]
 800c380:	4605      	mov	r5, r0
 800c382:	460c      	mov	r4, r1
 800c384:	b976      	cbnz	r6, 800c3a4 <_Bfree+0x28>
 800c386:	2010      	movs	r0, #16
 800c388:	f7fd ff24 	bl	800a1d4 <malloc>
 800c38c:	4602      	mov	r2, r0
 800c38e:	61e8      	str	r0, [r5, #28]
 800c390:	b920      	cbnz	r0, 800c39c <_Bfree+0x20>
 800c392:	4b09      	ldr	r3, [pc, #36]	@ (800c3b8 <_Bfree+0x3c>)
 800c394:	218f      	movs	r1, #143	@ 0x8f
 800c396:	4809      	ldr	r0, [pc, #36]	@ (800c3bc <_Bfree+0x40>)
 800c398:	f001 fefe 	bl	800e198 <__assert_func>
 800c39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3a0:	6006      	str	r6, [r0, #0]
 800c3a2:	60c6      	str	r6, [r0, #12]
 800c3a4:	b13c      	cbz	r4, 800c3b6 <_Bfree+0x3a>
 800c3a6:	69eb      	ldr	r3, [r5, #28]
 800c3a8:	6862      	ldr	r2, [r4, #4]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3b0:	6021      	str	r1, [r4, #0]
 800c3b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3b6:	bd70      	pop	{r4, r5, r6, pc}
 800c3b8:	0800ec5e 	.word	0x0800ec5e
 800c3bc:	0800ecde 	.word	0x0800ecde

0800c3c0 <__multadd>:
 800c3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c4:	f101 0c14 	add.w	ip, r1, #20
 800c3c8:	4607      	mov	r7, r0
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	461e      	mov	r6, r3
 800c3ce:	690d      	ldr	r5, [r1, #16]
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	f8dc 3000 	ldr.w	r3, [ip]
 800c3d6:	3001      	adds	r0, #1
 800c3d8:	b299      	uxth	r1, r3
 800c3da:	4285      	cmp	r5, r0
 800c3dc:	fb02 6101 	mla	r1, r2, r1, r6
 800c3e0:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c3e4:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800c3e8:	b289      	uxth	r1, r1
 800c3ea:	fb02 3306 	mla	r3, r2, r6, r3
 800c3ee:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c3f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c3f6:	f84c 1b04 	str.w	r1, [ip], #4
 800c3fa:	dcea      	bgt.n	800c3d2 <__multadd+0x12>
 800c3fc:	b30e      	cbz	r6, 800c442 <__multadd+0x82>
 800c3fe:	68a3      	ldr	r3, [r4, #8]
 800c400:	42ab      	cmp	r3, r5
 800c402:	dc19      	bgt.n	800c438 <__multadd+0x78>
 800c404:	6861      	ldr	r1, [r4, #4]
 800c406:	4638      	mov	r0, r7
 800c408:	3101      	adds	r1, #1
 800c40a:	f7ff ff77 	bl	800c2fc <_Balloc>
 800c40e:	4680      	mov	r8, r0
 800c410:	b928      	cbnz	r0, 800c41e <__multadd+0x5e>
 800c412:	4602      	mov	r2, r0
 800c414:	4b0c      	ldr	r3, [pc, #48]	@ (800c448 <__multadd+0x88>)
 800c416:	21ba      	movs	r1, #186	@ 0xba
 800c418:	480c      	ldr	r0, [pc, #48]	@ (800c44c <__multadd+0x8c>)
 800c41a:	f001 febd 	bl	800e198 <__assert_func>
 800c41e:	6922      	ldr	r2, [r4, #16]
 800c420:	f104 010c 	add.w	r1, r4, #12
 800c424:	300c      	adds	r0, #12
 800c426:	3202      	adds	r2, #2
 800c428:	0092      	lsls	r2, r2, #2
 800c42a:	f001 fe9d 	bl	800e168 <memcpy>
 800c42e:	4621      	mov	r1, r4
 800c430:	4644      	mov	r4, r8
 800c432:	4638      	mov	r0, r7
 800c434:	f7ff ffa2 	bl	800c37c <_Bfree>
 800c438:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c43c:	3501      	adds	r5, #1
 800c43e:	615e      	str	r6, [r3, #20]
 800c440:	6125      	str	r5, [r4, #16]
 800c442:	4620      	mov	r0, r4
 800c444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c448:	0800eccd 	.word	0x0800eccd
 800c44c:	0800ecde 	.word	0x0800ecde

0800c450 <__s2b>:
 800c450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c454:	4615      	mov	r5, r2
 800c456:	461f      	mov	r7, r3
 800c458:	2209      	movs	r2, #9
 800c45a:	3308      	adds	r3, #8
 800c45c:	460c      	mov	r4, r1
 800c45e:	4606      	mov	r6, r0
 800c460:	2100      	movs	r1, #0
 800c462:	fb93 f3f2 	sdiv	r3, r3, r2
 800c466:	2201      	movs	r2, #1
 800c468:	429a      	cmp	r2, r3
 800c46a:	db09      	blt.n	800c480 <__s2b+0x30>
 800c46c:	4630      	mov	r0, r6
 800c46e:	f7ff ff45 	bl	800c2fc <_Balloc>
 800c472:	b940      	cbnz	r0, 800c486 <__s2b+0x36>
 800c474:	4602      	mov	r2, r0
 800c476:	4b19      	ldr	r3, [pc, #100]	@ (800c4dc <__s2b+0x8c>)
 800c478:	21d3      	movs	r1, #211	@ 0xd3
 800c47a:	4819      	ldr	r0, [pc, #100]	@ (800c4e0 <__s2b+0x90>)
 800c47c:	f001 fe8c 	bl	800e198 <__assert_func>
 800c480:	0052      	lsls	r2, r2, #1
 800c482:	3101      	adds	r1, #1
 800c484:	e7f0      	b.n	800c468 <__s2b+0x18>
 800c486:	9b08      	ldr	r3, [sp, #32]
 800c488:	2d09      	cmp	r5, #9
 800c48a:	6143      	str	r3, [r0, #20]
 800c48c:	f04f 0301 	mov.w	r3, #1
 800c490:	6103      	str	r3, [r0, #16]
 800c492:	dd16      	ble.n	800c4c2 <__s2b+0x72>
 800c494:	f104 0909 	add.w	r9, r4, #9
 800c498:	442c      	add	r4, r5
 800c49a:	46c8      	mov	r8, r9
 800c49c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c4a0:	4601      	mov	r1, r0
 800c4a2:	220a      	movs	r2, #10
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	3b30      	subs	r3, #48	@ 0x30
 800c4a8:	f7ff ff8a 	bl	800c3c0 <__multadd>
 800c4ac:	45a0      	cmp	r8, r4
 800c4ae:	d1f5      	bne.n	800c49c <__s2b+0x4c>
 800c4b0:	f1a5 0408 	sub.w	r4, r5, #8
 800c4b4:	444c      	add	r4, r9
 800c4b6:	1b2d      	subs	r5, r5, r4
 800c4b8:	1963      	adds	r3, r4, r5
 800c4ba:	42bb      	cmp	r3, r7
 800c4bc:	db04      	blt.n	800c4c8 <__s2b+0x78>
 800c4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4c2:	340a      	adds	r4, #10
 800c4c4:	2509      	movs	r5, #9
 800c4c6:	e7f6      	b.n	800c4b6 <__s2b+0x66>
 800c4c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c4cc:	4601      	mov	r1, r0
 800c4ce:	220a      	movs	r2, #10
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	3b30      	subs	r3, #48	@ 0x30
 800c4d4:	f7ff ff74 	bl	800c3c0 <__multadd>
 800c4d8:	e7ee      	b.n	800c4b8 <__s2b+0x68>
 800c4da:	bf00      	nop
 800c4dc:	0800eccd 	.word	0x0800eccd
 800c4e0:	0800ecde 	.word	0x0800ecde

0800c4e4 <__hi0bits>:
 800c4e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	bf36      	itet	cc
 800c4ec:	0403      	lslcc	r3, r0, #16
 800c4ee:	2000      	movcs	r0, #0
 800c4f0:	2010      	movcc	r0, #16
 800c4f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c4f6:	bf3c      	itt	cc
 800c4f8:	021b      	lslcc	r3, r3, #8
 800c4fa:	3008      	addcc	r0, #8
 800c4fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c500:	bf3c      	itt	cc
 800c502:	011b      	lslcc	r3, r3, #4
 800c504:	3004      	addcc	r0, #4
 800c506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c50a:	bf3c      	itt	cc
 800c50c:	009b      	lslcc	r3, r3, #2
 800c50e:	3002      	addcc	r0, #2
 800c510:	2b00      	cmp	r3, #0
 800c512:	db05      	blt.n	800c520 <__hi0bits+0x3c>
 800c514:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c518:	f100 0001 	add.w	r0, r0, #1
 800c51c:	bf08      	it	eq
 800c51e:	2020      	moveq	r0, #32
 800c520:	4770      	bx	lr

0800c522 <__lo0bits>:
 800c522:	6803      	ldr	r3, [r0, #0]
 800c524:	4602      	mov	r2, r0
 800c526:	f013 0007 	ands.w	r0, r3, #7
 800c52a:	d00b      	beq.n	800c544 <__lo0bits+0x22>
 800c52c:	07d9      	lsls	r1, r3, #31
 800c52e:	d421      	bmi.n	800c574 <__lo0bits+0x52>
 800c530:	0798      	lsls	r0, r3, #30
 800c532:	bf47      	ittee	mi
 800c534:	085b      	lsrmi	r3, r3, #1
 800c536:	2001      	movmi	r0, #1
 800c538:	089b      	lsrpl	r3, r3, #2
 800c53a:	2002      	movpl	r0, #2
 800c53c:	bf4c      	ite	mi
 800c53e:	6013      	strmi	r3, [r2, #0]
 800c540:	6013      	strpl	r3, [r2, #0]
 800c542:	4770      	bx	lr
 800c544:	b299      	uxth	r1, r3
 800c546:	b909      	cbnz	r1, 800c54c <__lo0bits+0x2a>
 800c548:	0c1b      	lsrs	r3, r3, #16
 800c54a:	2010      	movs	r0, #16
 800c54c:	b2d9      	uxtb	r1, r3
 800c54e:	b909      	cbnz	r1, 800c554 <__lo0bits+0x32>
 800c550:	3008      	adds	r0, #8
 800c552:	0a1b      	lsrs	r3, r3, #8
 800c554:	0719      	lsls	r1, r3, #28
 800c556:	bf04      	itt	eq
 800c558:	091b      	lsreq	r3, r3, #4
 800c55a:	3004      	addeq	r0, #4
 800c55c:	0799      	lsls	r1, r3, #30
 800c55e:	bf04      	itt	eq
 800c560:	089b      	lsreq	r3, r3, #2
 800c562:	3002      	addeq	r0, #2
 800c564:	07d9      	lsls	r1, r3, #31
 800c566:	d403      	bmi.n	800c570 <__lo0bits+0x4e>
 800c568:	085b      	lsrs	r3, r3, #1
 800c56a:	f100 0001 	add.w	r0, r0, #1
 800c56e:	d003      	beq.n	800c578 <__lo0bits+0x56>
 800c570:	6013      	str	r3, [r2, #0]
 800c572:	4770      	bx	lr
 800c574:	2000      	movs	r0, #0
 800c576:	4770      	bx	lr
 800c578:	2020      	movs	r0, #32
 800c57a:	4770      	bx	lr

0800c57c <__i2b>:
 800c57c:	b510      	push	{r4, lr}
 800c57e:	460c      	mov	r4, r1
 800c580:	2101      	movs	r1, #1
 800c582:	f7ff febb 	bl	800c2fc <_Balloc>
 800c586:	4602      	mov	r2, r0
 800c588:	b928      	cbnz	r0, 800c596 <__i2b+0x1a>
 800c58a:	4b05      	ldr	r3, [pc, #20]	@ (800c5a0 <__i2b+0x24>)
 800c58c:	f240 1145 	movw	r1, #325	@ 0x145
 800c590:	4804      	ldr	r0, [pc, #16]	@ (800c5a4 <__i2b+0x28>)
 800c592:	f001 fe01 	bl	800e198 <__assert_func>
 800c596:	2301      	movs	r3, #1
 800c598:	6144      	str	r4, [r0, #20]
 800c59a:	6103      	str	r3, [r0, #16]
 800c59c:	bd10      	pop	{r4, pc}
 800c59e:	bf00      	nop
 800c5a0:	0800eccd 	.word	0x0800eccd
 800c5a4:	0800ecde 	.word	0x0800ecde

0800c5a8 <__multiply>:
 800c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ac:	4614      	mov	r4, r2
 800c5ae:	690a      	ldr	r2, [r1, #16]
 800c5b0:	460f      	mov	r7, r1
 800c5b2:	b085      	sub	sp, #20
 800c5b4:	6923      	ldr	r3, [r4, #16]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	bfa2      	ittt	ge
 800c5ba:	4623      	movge	r3, r4
 800c5bc:	460c      	movge	r4, r1
 800c5be:	461f      	movge	r7, r3
 800c5c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c5c4:	68a3      	ldr	r3, [r4, #8]
 800c5c6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c5ca:	6861      	ldr	r1, [r4, #4]
 800c5cc:	eb0a 0609 	add.w	r6, sl, r9
 800c5d0:	42b3      	cmp	r3, r6
 800c5d2:	bfb8      	it	lt
 800c5d4:	3101      	addlt	r1, #1
 800c5d6:	f7ff fe91 	bl	800c2fc <_Balloc>
 800c5da:	b930      	cbnz	r0, 800c5ea <__multiply+0x42>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	4b45      	ldr	r3, [pc, #276]	@ (800c6f4 <__multiply+0x14c>)
 800c5e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c5e4:	4844      	ldr	r0, [pc, #272]	@ (800c6f8 <__multiply+0x150>)
 800c5e6:	f001 fdd7 	bl	800e198 <__assert_func>
 800c5ea:	f100 0514 	add.w	r5, r0, #20
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c5f4:	462b      	mov	r3, r5
 800c5f6:	4543      	cmp	r3, r8
 800c5f8:	d321      	bcc.n	800c63e <__multiply+0x96>
 800c5fa:	f107 0114 	add.w	r1, r7, #20
 800c5fe:	f104 0214 	add.w	r2, r4, #20
 800c602:	f104 0715 	add.w	r7, r4, #21
 800c606:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c60a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c60e:	9302      	str	r3, [sp, #8]
 800c610:	1b13      	subs	r3, r2, r4
 800c612:	3b15      	subs	r3, #21
 800c614:	f023 0303 	bic.w	r3, r3, #3
 800c618:	3304      	adds	r3, #4
 800c61a:	42ba      	cmp	r2, r7
 800c61c:	bf38      	it	cc
 800c61e:	2304      	movcc	r3, #4
 800c620:	9301      	str	r3, [sp, #4]
 800c622:	9b02      	ldr	r3, [sp, #8]
 800c624:	9103      	str	r1, [sp, #12]
 800c626:	428b      	cmp	r3, r1
 800c628:	d80c      	bhi.n	800c644 <__multiply+0x9c>
 800c62a:	2e00      	cmp	r6, #0
 800c62c:	dd03      	ble.n	800c636 <__multiply+0x8e>
 800c62e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c632:	2b00      	cmp	r3, #0
 800c634:	d05b      	beq.n	800c6ee <__multiply+0x146>
 800c636:	6106      	str	r6, [r0, #16]
 800c638:	b005      	add	sp, #20
 800c63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c63e:	f843 2b04 	str.w	r2, [r3], #4
 800c642:	e7d8      	b.n	800c5f6 <__multiply+0x4e>
 800c644:	f8b1 a000 	ldrh.w	sl, [r1]
 800c648:	f1ba 0f00 	cmp.w	sl, #0
 800c64c:	d024      	beq.n	800c698 <__multiply+0xf0>
 800c64e:	f104 0e14 	add.w	lr, r4, #20
 800c652:	46a9      	mov	r9, r5
 800c654:	f04f 0c00 	mov.w	ip, #0
 800c658:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c65c:	f8d9 3000 	ldr.w	r3, [r9]
 800c660:	fa1f fb87 	uxth.w	fp, r7
 800c664:	4572      	cmp	r2, lr
 800c666:	b29b      	uxth	r3, r3
 800c668:	fb0a 330b 	mla	r3, sl, fp, r3
 800c66c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c670:	f8d9 7000 	ldr.w	r7, [r9]
 800c674:	4463      	add	r3, ip
 800c676:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c67a:	fb0a c70b 	mla	r7, sl, fp, ip
 800c67e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c682:	b29b      	uxth	r3, r3
 800c684:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c688:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c68c:	f849 3b04 	str.w	r3, [r9], #4
 800c690:	d8e2      	bhi.n	800c658 <__multiply+0xb0>
 800c692:	9b01      	ldr	r3, [sp, #4]
 800c694:	f845 c003 	str.w	ip, [r5, r3]
 800c698:	9b03      	ldr	r3, [sp, #12]
 800c69a:	3104      	adds	r1, #4
 800c69c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c6a0:	f1b9 0f00 	cmp.w	r9, #0
 800c6a4:	d021      	beq.n	800c6ea <__multiply+0x142>
 800c6a6:	682b      	ldr	r3, [r5, #0]
 800c6a8:	f104 0c14 	add.w	ip, r4, #20
 800c6ac:	46ae      	mov	lr, r5
 800c6ae:	f04f 0a00 	mov.w	sl, #0
 800c6b2:	f8bc b000 	ldrh.w	fp, [ip]
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c6bc:	fb09 770b 	mla	r7, r9, fp, r7
 800c6c0:	4457      	add	r7, sl
 800c6c2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c6c6:	f84e 3b04 	str.w	r3, [lr], #4
 800c6ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c6ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6d2:	f8be 3000 	ldrh.w	r3, [lr]
 800c6d6:	4562      	cmp	r2, ip
 800c6d8:	fb09 330a 	mla	r3, r9, sl, r3
 800c6dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c6e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6e4:	d8e5      	bhi.n	800c6b2 <__multiply+0x10a>
 800c6e6:	9f01      	ldr	r7, [sp, #4]
 800c6e8:	51eb      	str	r3, [r5, r7]
 800c6ea:	3504      	adds	r5, #4
 800c6ec:	e799      	b.n	800c622 <__multiply+0x7a>
 800c6ee:	3e01      	subs	r6, #1
 800c6f0:	e79b      	b.n	800c62a <__multiply+0x82>
 800c6f2:	bf00      	nop
 800c6f4:	0800eccd 	.word	0x0800eccd
 800c6f8:	0800ecde 	.word	0x0800ecde

0800c6fc <__pow5mult>:
 800c6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c700:	4615      	mov	r5, r2
 800c702:	f012 0203 	ands.w	r2, r2, #3
 800c706:	4607      	mov	r7, r0
 800c708:	460e      	mov	r6, r1
 800c70a:	d007      	beq.n	800c71c <__pow5mult+0x20>
 800c70c:	3a01      	subs	r2, #1
 800c70e:	4c25      	ldr	r4, [pc, #148]	@ (800c7a4 <__pow5mult+0xa8>)
 800c710:	2300      	movs	r3, #0
 800c712:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c716:	f7ff fe53 	bl	800c3c0 <__multadd>
 800c71a:	4606      	mov	r6, r0
 800c71c:	10ad      	asrs	r5, r5, #2
 800c71e:	d03d      	beq.n	800c79c <__pow5mult+0xa0>
 800c720:	69fc      	ldr	r4, [r7, #28]
 800c722:	b97c      	cbnz	r4, 800c744 <__pow5mult+0x48>
 800c724:	2010      	movs	r0, #16
 800c726:	f7fd fd55 	bl	800a1d4 <malloc>
 800c72a:	4602      	mov	r2, r0
 800c72c:	61f8      	str	r0, [r7, #28]
 800c72e:	b928      	cbnz	r0, 800c73c <__pow5mult+0x40>
 800c730:	4b1d      	ldr	r3, [pc, #116]	@ (800c7a8 <__pow5mult+0xac>)
 800c732:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c736:	481d      	ldr	r0, [pc, #116]	@ (800c7ac <__pow5mult+0xb0>)
 800c738:	f001 fd2e 	bl	800e198 <__assert_func>
 800c73c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c740:	6004      	str	r4, [r0, #0]
 800c742:	60c4      	str	r4, [r0, #12]
 800c744:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c74c:	b94c      	cbnz	r4, 800c762 <__pow5mult+0x66>
 800c74e:	f240 2171 	movw	r1, #625	@ 0x271
 800c752:	4638      	mov	r0, r7
 800c754:	f7ff ff12 	bl	800c57c <__i2b>
 800c758:	2300      	movs	r3, #0
 800c75a:	4604      	mov	r4, r0
 800c75c:	f8c8 0008 	str.w	r0, [r8, #8]
 800c760:	6003      	str	r3, [r0, #0]
 800c762:	f04f 0900 	mov.w	r9, #0
 800c766:	07eb      	lsls	r3, r5, #31
 800c768:	d50a      	bpl.n	800c780 <__pow5mult+0x84>
 800c76a:	4631      	mov	r1, r6
 800c76c:	4622      	mov	r2, r4
 800c76e:	4638      	mov	r0, r7
 800c770:	f7ff ff1a 	bl	800c5a8 <__multiply>
 800c774:	4680      	mov	r8, r0
 800c776:	4631      	mov	r1, r6
 800c778:	4638      	mov	r0, r7
 800c77a:	4646      	mov	r6, r8
 800c77c:	f7ff fdfe 	bl	800c37c <_Bfree>
 800c780:	106d      	asrs	r5, r5, #1
 800c782:	d00b      	beq.n	800c79c <__pow5mult+0xa0>
 800c784:	6820      	ldr	r0, [r4, #0]
 800c786:	b938      	cbnz	r0, 800c798 <__pow5mult+0x9c>
 800c788:	4622      	mov	r2, r4
 800c78a:	4621      	mov	r1, r4
 800c78c:	4638      	mov	r0, r7
 800c78e:	f7ff ff0b 	bl	800c5a8 <__multiply>
 800c792:	6020      	str	r0, [r4, #0]
 800c794:	f8c0 9000 	str.w	r9, [r0]
 800c798:	4604      	mov	r4, r0
 800c79a:	e7e4      	b.n	800c766 <__pow5mult+0x6a>
 800c79c:	4630      	mov	r0, r6
 800c79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7a2:	bf00      	nop
 800c7a4:	0800ed38 	.word	0x0800ed38
 800c7a8:	0800ec5e 	.word	0x0800ec5e
 800c7ac:	0800ecde 	.word	0x0800ecde

0800c7b0 <__lshift>:
 800c7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7b4:	460c      	mov	r4, r1
 800c7b6:	4607      	mov	r7, r0
 800c7b8:	4691      	mov	r9, r2
 800c7ba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7be:	6923      	ldr	r3, [r4, #16]
 800c7c0:	6849      	ldr	r1, [r1, #4]
 800c7c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7c6:	68a3      	ldr	r3, [r4, #8]
 800c7c8:	f108 0601 	add.w	r6, r8, #1
 800c7cc:	42b3      	cmp	r3, r6
 800c7ce:	db0b      	blt.n	800c7e8 <__lshift+0x38>
 800c7d0:	4638      	mov	r0, r7
 800c7d2:	f7ff fd93 	bl	800c2fc <_Balloc>
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	b948      	cbnz	r0, 800c7ee <__lshift+0x3e>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	4b28      	ldr	r3, [pc, #160]	@ (800c880 <__lshift+0xd0>)
 800c7de:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c7e2:	4828      	ldr	r0, [pc, #160]	@ (800c884 <__lshift+0xd4>)
 800c7e4:	f001 fcd8 	bl	800e198 <__assert_func>
 800c7e8:	3101      	adds	r1, #1
 800c7ea:	005b      	lsls	r3, r3, #1
 800c7ec:	e7ee      	b.n	800c7cc <__lshift+0x1c>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	f100 0114 	add.w	r1, r0, #20
 800c7f4:	f100 0210 	add.w	r2, r0, #16
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	4553      	cmp	r3, sl
 800c7fc:	db33      	blt.n	800c866 <__lshift+0xb6>
 800c7fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c802:	f104 0314 	add.w	r3, r4, #20
 800c806:	6920      	ldr	r0, [r4, #16]
 800c808:	f019 091f 	ands.w	r9, r9, #31
 800c80c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c810:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c814:	d02b      	beq.n	800c86e <__lshift+0xbe>
 800c816:	f1c9 0e20 	rsb	lr, r9, #32
 800c81a:	468a      	mov	sl, r1
 800c81c:	2200      	movs	r2, #0
 800c81e:	6818      	ldr	r0, [r3, #0]
 800c820:	fa00 f009 	lsl.w	r0, r0, r9
 800c824:	4310      	orrs	r0, r2
 800c826:	f84a 0b04 	str.w	r0, [sl], #4
 800c82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c82e:	459c      	cmp	ip, r3
 800c830:	fa22 f20e 	lsr.w	r2, r2, lr
 800c834:	d8f3      	bhi.n	800c81e <__lshift+0x6e>
 800c836:	ebac 0304 	sub.w	r3, ip, r4
 800c83a:	f104 0015 	add.w	r0, r4, #21
 800c83e:	3b15      	subs	r3, #21
 800c840:	f023 0303 	bic.w	r3, r3, #3
 800c844:	3304      	adds	r3, #4
 800c846:	4584      	cmp	ip, r0
 800c848:	bf38      	it	cc
 800c84a:	2304      	movcc	r3, #4
 800c84c:	50ca      	str	r2, [r1, r3]
 800c84e:	b10a      	cbz	r2, 800c854 <__lshift+0xa4>
 800c850:	f108 0602 	add.w	r6, r8, #2
 800c854:	3e01      	subs	r6, #1
 800c856:	4638      	mov	r0, r7
 800c858:	4621      	mov	r1, r4
 800c85a:	612e      	str	r6, [r5, #16]
 800c85c:	f7ff fd8e 	bl	800c37c <_Bfree>
 800c860:	4628      	mov	r0, r5
 800c862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c866:	3301      	adds	r3, #1
 800c868:	f842 0f04 	str.w	r0, [r2, #4]!
 800c86c:	e7c5      	b.n	800c7fa <__lshift+0x4a>
 800c86e:	3904      	subs	r1, #4
 800c870:	f853 2b04 	ldr.w	r2, [r3], #4
 800c874:	459c      	cmp	ip, r3
 800c876:	f841 2f04 	str.w	r2, [r1, #4]!
 800c87a:	d8f9      	bhi.n	800c870 <__lshift+0xc0>
 800c87c:	e7ea      	b.n	800c854 <__lshift+0xa4>
 800c87e:	bf00      	nop
 800c880:	0800eccd 	.word	0x0800eccd
 800c884:	0800ecde 	.word	0x0800ecde

0800c888 <__mcmp>:
 800c888:	4603      	mov	r3, r0
 800c88a:	690a      	ldr	r2, [r1, #16]
 800c88c:	6900      	ldr	r0, [r0, #16]
 800c88e:	1a80      	subs	r0, r0, r2
 800c890:	b530      	push	{r4, r5, lr}
 800c892:	d10e      	bne.n	800c8b2 <__mcmp+0x2a>
 800c894:	3314      	adds	r3, #20
 800c896:	3114      	adds	r1, #20
 800c898:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c89c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c8a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8a8:	4295      	cmp	r5, r2
 800c8aa:	d003      	beq.n	800c8b4 <__mcmp+0x2c>
 800c8ac:	d205      	bcs.n	800c8ba <__mcmp+0x32>
 800c8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b2:	bd30      	pop	{r4, r5, pc}
 800c8b4:	42a3      	cmp	r3, r4
 800c8b6:	d3f3      	bcc.n	800c8a0 <__mcmp+0x18>
 800c8b8:	e7fb      	b.n	800c8b2 <__mcmp+0x2a>
 800c8ba:	2001      	movs	r0, #1
 800c8bc:	e7f9      	b.n	800c8b2 <__mcmp+0x2a>
	...

0800c8c0 <__mdiff>:
 800c8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	4689      	mov	r9, r1
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	4611      	mov	r1, r2
 800c8ca:	4614      	mov	r4, r2
 800c8cc:	4648      	mov	r0, r9
 800c8ce:	f7ff ffdb 	bl	800c888 <__mcmp>
 800c8d2:	1e05      	subs	r5, r0, #0
 800c8d4:	d112      	bne.n	800c8fc <__mdiff+0x3c>
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	4630      	mov	r0, r6
 800c8da:	f7ff fd0f 	bl	800c2fc <_Balloc>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	b928      	cbnz	r0, 800c8ee <__mdiff+0x2e>
 800c8e2:	4b41      	ldr	r3, [pc, #260]	@ (800c9e8 <__mdiff+0x128>)
 800c8e4:	f240 2137 	movw	r1, #567	@ 0x237
 800c8e8:	4840      	ldr	r0, [pc, #256]	@ (800c9ec <__mdiff+0x12c>)
 800c8ea:	f001 fc55 	bl	800e198 <__assert_func>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8f4:	4610      	mov	r0, r2
 800c8f6:	b003      	add	sp, #12
 800c8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fc:	bfbc      	itt	lt
 800c8fe:	464b      	movlt	r3, r9
 800c900:	46a1      	movlt	r9, r4
 800c902:	4630      	mov	r0, r6
 800c904:	bfb8      	it	lt
 800c906:	2501      	movlt	r5, #1
 800c908:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c90c:	bfb4      	ite	lt
 800c90e:	461c      	movlt	r4, r3
 800c910:	2500      	movge	r5, #0
 800c912:	f7ff fcf3 	bl	800c2fc <_Balloc>
 800c916:	4602      	mov	r2, r0
 800c918:	b918      	cbnz	r0, 800c922 <__mdiff+0x62>
 800c91a:	4b33      	ldr	r3, [pc, #204]	@ (800c9e8 <__mdiff+0x128>)
 800c91c:	f240 2145 	movw	r1, #581	@ 0x245
 800c920:	e7e2      	b.n	800c8e8 <__mdiff+0x28>
 800c922:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c926:	f104 0e14 	add.w	lr, r4, #20
 800c92a:	6926      	ldr	r6, [r4, #16]
 800c92c:	f100 0b14 	add.w	fp, r0, #20
 800c930:	60c5      	str	r5, [r0, #12]
 800c932:	f109 0514 	add.w	r5, r9, #20
 800c936:	f109 0310 	add.w	r3, r9, #16
 800c93a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c93e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c942:	46d9      	mov	r9, fp
 800c944:	f04f 0c00 	mov.w	ip, #0
 800c948:	9301      	str	r3, [sp, #4]
 800c94a:	9b01      	ldr	r3, [sp, #4]
 800c94c:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c950:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c954:	4576      	cmp	r6, lr
 800c956:	9301      	str	r3, [sp, #4]
 800c958:	fa1f f38a 	uxth.w	r3, sl
 800c95c:	4619      	mov	r1, r3
 800c95e:	b283      	uxth	r3, r0
 800c960:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800c964:	eba1 0303 	sub.w	r3, r1, r3
 800c968:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c96c:	4463      	add	r3, ip
 800c96e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c972:	b29b      	uxth	r3, r3
 800c974:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c978:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c97c:	f849 3b04 	str.w	r3, [r9], #4
 800c980:	d8e3      	bhi.n	800c94a <__mdiff+0x8a>
 800c982:	1b33      	subs	r3, r6, r4
 800c984:	3415      	adds	r4, #21
 800c986:	3b15      	subs	r3, #21
 800c988:	f023 0303 	bic.w	r3, r3, #3
 800c98c:	3304      	adds	r3, #4
 800c98e:	42a6      	cmp	r6, r4
 800c990:	bf38      	it	cc
 800c992:	2304      	movcc	r3, #4
 800c994:	441d      	add	r5, r3
 800c996:	445b      	add	r3, fp
 800c998:	462c      	mov	r4, r5
 800c99a:	461e      	mov	r6, r3
 800c99c:	4544      	cmp	r4, r8
 800c99e:	d30e      	bcc.n	800c9be <__mdiff+0xfe>
 800c9a0:	f108 0103 	add.w	r1, r8, #3
 800c9a4:	1b49      	subs	r1, r1, r5
 800c9a6:	3d03      	subs	r5, #3
 800c9a8:	f021 0103 	bic.w	r1, r1, #3
 800c9ac:	45a8      	cmp	r8, r5
 800c9ae:	bf38      	it	cc
 800c9b0:	2100      	movcc	r1, #0
 800c9b2:	440b      	add	r3, r1
 800c9b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9b8:	b199      	cbz	r1, 800c9e2 <__mdiff+0x122>
 800c9ba:	6117      	str	r7, [r2, #16]
 800c9bc:	e79a      	b.n	800c8f4 <__mdiff+0x34>
 800c9be:	f854 1b04 	ldr.w	r1, [r4], #4
 800c9c2:	46e6      	mov	lr, ip
 800c9c4:	fa1f fc81 	uxth.w	ip, r1
 800c9c8:	0c08      	lsrs	r0, r1, #16
 800c9ca:	4471      	add	r1, lr
 800c9cc:	44f4      	add	ip, lr
 800c9ce:	b289      	uxth	r1, r1
 800c9d0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c9d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c9d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9dc:	f846 1b04 	str.w	r1, [r6], #4
 800c9e0:	e7dc      	b.n	800c99c <__mdiff+0xdc>
 800c9e2:	3f01      	subs	r7, #1
 800c9e4:	e7e6      	b.n	800c9b4 <__mdiff+0xf4>
 800c9e6:	bf00      	nop
 800c9e8:	0800eccd 	.word	0x0800eccd
 800c9ec:	0800ecde 	.word	0x0800ecde

0800c9f0 <__ulp>:
 800c9f0:	b082      	sub	sp, #8
 800c9f2:	4b11      	ldr	r3, [pc, #68]	@ (800ca38 <__ulp+0x48>)
 800c9f4:	ed8d 0b00 	vstr	d0, [sp]
 800c9f8:	9a01      	ldr	r2, [sp, #4]
 800c9fa:	4013      	ands	r3, r2
 800c9fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	dc08      	bgt.n	800ca16 <__ulp+0x26>
 800ca04:	425b      	negs	r3, r3
 800ca06:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ca0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ca0e:	da04      	bge.n	800ca1a <__ulp+0x2a>
 800ca10:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ca14:	4113      	asrs	r3, r2
 800ca16:	2200      	movs	r2, #0
 800ca18:	e008      	b.n	800ca2c <__ulp+0x3c>
 800ca1a:	f1a2 0314 	sub.w	r3, r2, #20
 800ca1e:	2b1e      	cmp	r3, #30
 800ca20:	bfd6      	itet	le
 800ca22:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ca26:	2201      	movgt	r2, #1
 800ca28:	40da      	lsrle	r2, r3
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	4610      	mov	r0, r2
 800ca30:	ec41 0b10 	vmov	d0, r0, r1
 800ca34:	b002      	add	sp, #8
 800ca36:	4770      	bx	lr
 800ca38:	7ff00000 	.word	0x7ff00000

0800ca3c <__b2d>:
 800ca3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca40:	6906      	ldr	r6, [r0, #16]
 800ca42:	f100 0814 	add.w	r8, r0, #20
 800ca46:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ca4a:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ca4e:	1f37      	subs	r7, r6, #4
 800ca50:	4610      	mov	r0, r2
 800ca52:	f7ff fd47 	bl	800c4e4 <__hi0bits>
 800ca56:	f1c0 0320 	rsb	r3, r0, #32
 800ca5a:	280a      	cmp	r0, #10
 800ca5c:	600b      	str	r3, [r1, #0]
 800ca5e:	491d      	ldr	r1, [pc, #116]	@ (800cad4 <__b2d+0x98>)
 800ca60:	dc16      	bgt.n	800ca90 <__b2d+0x54>
 800ca62:	f1c0 0c0b 	rsb	ip, r0, #11
 800ca66:	45b8      	cmp	r8, r7
 800ca68:	f100 0015 	add.w	r0, r0, #21
 800ca6c:	fa22 f30c 	lsr.w	r3, r2, ip
 800ca70:	fa02 f000 	lsl.w	r0, r2, r0
 800ca74:	ea43 0501 	orr.w	r5, r3, r1
 800ca78:	bf34      	ite	cc
 800ca7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ca7e:	2300      	movcs	r3, #0
 800ca80:	fa23 f30c 	lsr.w	r3, r3, ip
 800ca84:	4303      	orrs	r3, r0
 800ca86:	461c      	mov	r4, r3
 800ca88:	ec45 4b10 	vmov	d0, r4, r5
 800ca8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca90:	45b8      	cmp	r8, r7
 800ca92:	bf3a      	itte	cc
 800ca94:	f1a6 0708 	subcc.w	r7, r6, #8
 800ca98:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ca9c:	2300      	movcs	r3, #0
 800ca9e:	380b      	subs	r0, #11
 800caa0:	d014      	beq.n	800cacc <__b2d+0x90>
 800caa2:	f1c0 0120 	rsb	r1, r0, #32
 800caa6:	4082      	lsls	r2, r0
 800caa8:	4547      	cmp	r7, r8
 800caaa:	fa23 f401 	lsr.w	r4, r3, r1
 800caae:	fa03 f300 	lsl.w	r3, r3, r0
 800cab2:	ea42 0204 	orr.w	r2, r2, r4
 800cab6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800caba:	bf8c      	ite	hi
 800cabc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cac0:	2200      	movls	r2, #0
 800cac2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cac6:	40ca      	lsrs	r2, r1
 800cac8:	4313      	orrs	r3, r2
 800caca:	e7dc      	b.n	800ca86 <__b2d+0x4a>
 800cacc:	ea42 0501 	orr.w	r5, r2, r1
 800cad0:	e7d9      	b.n	800ca86 <__b2d+0x4a>
 800cad2:	bf00      	nop
 800cad4:	3ff00000 	.word	0x3ff00000

0800cad8 <__d2b>:
 800cad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cadc:	460f      	mov	r7, r1
 800cade:	2101      	movs	r1, #1
 800cae0:	4616      	mov	r6, r2
 800cae2:	ec59 8b10 	vmov	r8, r9, d0
 800cae6:	f7ff fc09 	bl	800c2fc <_Balloc>
 800caea:	4604      	mov	r4, r0
 800caec:	b930      	cbnz	r0, 800cafc <__d2b+0x24>
 800caee:	4602      	mov	r2, r0
 800caf0:	4b23      	ldr	r3, [pc, #140]	@ (800cb80 <__d2b+0xa8>)
 800caf2:	f240 310f 	movw	r1, #783	@ 0x30f
 800caf6:	4823      	ldr	r0, [pc, #140]	@ (800cb84 <__d2b+0xac>)
 800caf8:	f001 fb4e 	bl	800e198 <__assert_func>
 800cafc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb04:	b10d      	cbz	r5, 800cb0a <__d2b+0x32>
 800cb06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb0a:	9301      	str	r3, [sp, #4]
 800cb0c:	f1b8 0300 	subs.w	r3, r8, #0
 800cb10:	d023      	beq.n	800cb5a <__d2b+0x82>
 800cb12:	4668      	mov	r0, sp
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	f7ff fd04 	bl	800c522 <__lo0bits>
 800cb1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb1e:	b1d0      	cbz	r0, 800cb56 <__d2b+0x7e>
 800cb20:	f1c0 0320 	rsb	r3, r0, #32
 800cb24:	fa02 f303 	lsl.w	r3, r2, r3
 800cb28:	40c2      	lsrs	r2, r0
 800cb2a:	430b      	orrs	r3, r1
 800cb2c:	9201      	str	r2, [sp, #4]
 800cb2e:	6163      	str	r3, [r4, #20]
 800cb30:	9b01      	ldr	r3, [sp, #4]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	61a3      	str	r3, [r4, #24]
 800cb36:	bf0c      	ite	eq
 800cb38:	2201      	moveq	r2, #1
 800cb3a:	2202      	movne	r2, #2
 800cb3c:	6122      	str	r2, [r4, #16]
 800cb3e:	b1a5      	cbz	r5, 800cb6a <__d2b+0x92>
 800cb40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cb44:	4405      	add	r5, r0
 800cb46:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cb4a:	603d      	str	r5, [r7, #0]
 800cb4c:	6030      	str	r0, [r6, #0]
 800cb4e:	4620      	mov	r0, r4
 800cb50:	b003      	add	sp, #12
 800cb52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb56:	6161      	str	r1, [r4, #20]
 800cb58:	e7ea      	b.n	800cb30 <__d2b+0x58>
 800cb5a:	a801      	add	r0, sp, #4
 800cb5c:	f7ff fce1 	bl	800c522 <__lo0bits>
 800cb60:	9b01      	ldr	r3, [sp, #4]
 800cb62:	3020      	adds	r0, #32
 800cb64:	2201      	movs	r2, #1
 800cb66:	6163      	str	r3, [r4, #20]
 800cb68:	e7e8      	b.n	800cb3c <__d2b+0x64>
 800cb6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cb6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb72:	6038      	str	r0, [r7, #0]
 800cb74:	6918      	ldr	r0, [r3, #16]
 800cb76:	f7ff fcb5 	bl	800c4e4 <__hi0bits>
 800cb7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb7e:	e7e5      	b.n	800cb4c <__d2b+0x74>
 800cb80:	0800eccd 	.word	0x0800eccd
 800cb84:	0800ecde 	.word	0x0800ecde

0800cb88 <__ratio>:
 800cb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb8c:	b085      	sub	sp, #20
 800cb8e:	e9cd 1000 	strd	r1, r0, [sp]
 800cb92:	a902      	add	r1, sp, #8
 800cb94:	f7ff ff52 	bl	800ca3c <__b2d>
 800cb98:	a903      	add	r1, sp, #12
 800cb9a:	9800      	ldr	r0, [sp, #0]
 800cb9c:	ec55 4b10 	vmov	r4, r5, d0
 800cba0:	f7ff ff4c 	bl	800ca3c <__b2d>
 800cba4:	9b01      	ldr	r3, [sp, #4]
 800cba6:	462f      	mov	r7, r5
 800cba8:	4620      	mov	r0, r4
 800cbaa:	6919      	ldr	r1, [r3, #16]
 800cbac:	9b00      	ldr	r3, [sp, #0]
 800cbae:	691b      	ldr	r3, [r3, #16]
 800cbb0:	1ac9      	subs	r1, r1, r3
 800cbb2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cbb6:	ec5b ab10 	vmov	sl, fp, d0
 800cbba:	1a9b      	subs	r3, r3, r2
 800cbbc:	46d9      	mov	r9, fp
 800cbbe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	bfcd      	iteet	gt
 800cbc6:	462a      	movgt	r2, r5
 800cbc8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cbcc:	465a      	movle	r2, fp
 800cbce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cbd2:	bfd8      	it	le
 800cbd4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cbd8:	4652      	mov	r2, sl
 800cbda:	4639      	mov	r1, r7
 800cbdc:	464b      	mov	r3, r9
 800cbde:	f7f3 fe45 	bl	800086c <__aeabi_ddiv>
 800cbe2:	ec41 0b10 	vmov	d0, r0, r1
 800cbe6:	b005      	add	sp, #20
 800cbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cbec <__copybits>:
 800cbec:	3901      	subs	r1, #1
 800cbee:	f102 0314 	add.w	r3, r2, #20
 800cbf2:	1149      	asrs	r1, r1, #5
 800cbf4:	b570      	push	{r4, r5, r6, lr}
 800cbf6:	3101      	adds	r1, #1
 800cbf8:	6914      	ldr	r4, [r2, #16]
 800cbfa:	1f05      	subs	r5, r0, #4
 800cbfc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc04:	42a3      	cmp	r3, r4
 800cc06:	d30c      	bcc.n	800cc22 <__copybits+0x36>
 800cc08:	1aa3      	subs	r3, r4, r2
 800cc0a:	3211      	adds	r2, #17
 800cc0c:	3b11      	subs	r3, #17
 800cc0e:	f023 0303 	bic.w	r3, r3, #3
 800cc12:	42a2      	cmp	r2, r4
 800cc14:	bf88      	it	hi
 800cc16:	2300      	movhi	r3, #0
 800cc18:	4418      	add	r0, r3
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	4288      	cmp	r0, r1
 800cc1e:	d305      	bcc.n	800cc2c <__copybits+0x40>
 800cc20:	bd70      	pop	{r4, r5, r6, pc}
 800cc22:	f853 6b04 	ldr.w	r6, [r3], #4
 800cc26:	f845 6f04 	str.w	r6, [r5, #4]!
 800cc2a:	e7eb      	b.n	800cc04 <__copybits+0x18>
 800cc2c:	f840 3b04 	str.w	r3, [r0], #4
 800cc30:	e7f4      	b.n	800cc1c <__copybits+0x30>

0800cc32 <__any_on>:
 800cc32:	f100 0214 	add.w	r2, r0, #20
 800cc36:	114b      	asrs	r3, r1, #5
 800cc38:	6900      	ldr	r0, [r0, #16]
 800cc3a:	4298      	cmp	r0, r3
 800cc3c:	b510      	push	{r4, lr}
 800cc3e:	db11      	blt.n	800cc64 <__any_on+0x32>
 800cc40:	dd0a      	ble.n	800cc58 <__any_on+0x26>
 800cc42:	f011 011f 	ands.w	r1, r1, #31
 800cc46:	d007      	beq.n	800cc58 <__any_on+0x26>
 800cc48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cc4c:	fa24 f001 	lsr.w	r0, r4, r1
 800cc50:	fa00 f101 	lsl.w	r1, r0, r1
 800cc54:	428c      	cmp	r4, r1
 800cc56:	d10b      	bne.n	800cc70 <__any_on+0x3e>
 800cc58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d803      	bhi.n	800cc68 <__any_on+0x36>
 800cc60:	2000      	movs	r0, #0
 800cc62:	bd10      	pop	{r4, pc}
 800cc64:	4603      	mov	r3, r0
 800cc66:	e7f7      	b.n	800cc58 <__any_on+0x26>
 800cc68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc6c:	2900      	cmp	r1, #0
 800cc6e:	d0f5      	beq.n	800cc5c <__any_on+0x2a>
 800cc70:	2001      	movs	r0, #1
 800cc72:	e7f6      	b.n	800cc62 <__any_on+0x30>

0800cc74 <sulp>:
 800cc74:	b570      	push	{r4, r5, r6, lr}
 800cc76:	4604      	mov	r4, r0
 800cc78:	460d      	mov	r5, r1
 800cc7a:	4616      	mov	r6, r2
 800cc7c:	ec45 4b10 	vmov	d0, r4, r5
 800cc80:	f7ff feb6 	bl	800c9f0 <__ulp>
 800cc84:	ec51 0b10 	vmov	r0, r1, d0
 800cc88:	b17e      	cbz	r6, 800ccaa <sulp+0x36>
 800cc8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cc8e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	dd09      	ble.n	800ccaa <sulp+0x36>
 800cc96:	051b      	lsls	r3, r3, #20
 800cc98:	2400      	movs	r4, #0
 800cc9a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cc9e:	4622      	mov	r2, r4
 800cca0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cca4:	462b      	mov	r3, r5
 800cca6:	f7f3 fcb7 	bl	8000618 <__aeabi_dmul>
 800ccaa:	ec41 0b10 	vmov	d0, r0, r1
 800ccae:	bd70      	pop	{r4, r5, r6, pc}

0800ccb0 <_strtod_l>:
 800ccb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb4:	b09f      	sub	sp, #124	@ 0x7c
 800ccb6:	460c      	mov	r4, r1
 800ccb8:	f04f 0a00 	mov.w	sl, #0
 800ccbc:	f04f 0b00 	mov.w	fp, #0
 800ccc0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	9005      	str	r0, [sp, #20]
 800ccc6:	921a      	str	r2, [sp, #104]	@ 0x68
 800ccc8:	460a      	mov	r2, r1
 800ccca:	9219      	str	r2, [sp, #100]	@ 0x64
 800cccc:	7811      	ldrb	r1, [r2, #0]
 800ccce:	292b      	cmp	r1, #43	@ 0x2b
 800ccd0:	d04a      	beq.n	800cd68 <_strtod_l+0xb8>
 800ccd2:	d838      	bhi.n	800cd46 <_strtod_l+0x96>
 800ccd4:	290d      	cmp	r1, #13
 800ccd6:	d832      	bhi.n	800cd3e <_strtod_l+0x8e>
 800ccd8:	2908      	cmp	r1, #8
 800ccda:	d832      	bhi.n	800cd42 <_strtod_l+0x92>
 800ccdc:	2900      	cmp	r1, #0
 800ccde:	d03b      	beq.n	800cd58 <_strtod_l+0xa8>
 800cce0:	2200      	movs	r2, #0
 800cce2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cce4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cce6:	782a      	ldrb	r2, [r5, #0]
 800cce8:	2a30      	cmp	r2, #48	@ 0x30
 800ccea:	f040 80b3 	bne.w	800ce54 <_strtod_l+0x1a4>
 800ccee:	786a      	ldrb	r2, [r5, #1]
 800ccf0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ccf4:	2a58      	cmp	r2, #88	@ 0x58
 800ccf6:	d16e      	bne.n	800cdd6 <_strtod_l+0x126>
 800ccf8:	9302      	str	r3, [sp, #8]
 800ccfa:	a919      	add	r1, sp, #100	@ 0x64
 800ccfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccfe:	4a90      	ldr	r2, [pc, #576]	@ (800cf40 <_strtod_l+0x290>)
 800cd00:	9301      	str	r3, [sp, #4]
 800cd02:	ab1a      	add	r3, sp, #104	@ 0x68
 800cd04:	9805      	ldr	r0, [sp, #20]
 800cd06:	9300      	str	r3, [sp, #0]
 800cd08:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cd0a:	f001 fadd 	bl	800e2c8 <__gethex>
 800cd0e:	f010 060f 	ands.w	r6, r0, #15
 800cd12:	4604      	mov	r4, r0
 800cd14:	d005      	beq.n	800cd22 <_strtod_l+0x72>
 800cd16:	2e06      	cmp	r6, #6
 800cd18:	d128      	bne.n	800cd6c <_strtod_l+0xbc>
 800cd1a:	3501      	adds	r5, #1
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	9519      	str	r5, [sp, #100]	@ 0x64
 800cd20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f040 858e 	bne.w	800d846 <_strtod_l+0xb96>
 800cd2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd2c:	b1cb      	cbz	r3, 800cd62 <_strtod_l+0xb2>
 800cd2e:	4652      	mov	r2, sl
 800cd30:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cd34:	ec43 2b10 	vmov	d0, r2, r3
 800cd38:	b01f      	add	sp, #124	@ 0x7c
 800cd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd3e:	2920      	cmp	r1, #32
 800cd40:	d1ce      	bne.n	800cce0 <_strtod_l+0x30>
 800cd42:	3201      	adds	r2, #1
 800cd44:	e7c1      	b.n	800ccca <_strtod_l+0x1a>
 800cd46:	292d      	cmp	r1, #45	@ 0x2d
 800cd48:	d1ca      	bne.n	800cce0 <_strtod_l+0x30>
 800cd4a:	2101      	movs	r1, #1
 800cd4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cd4e:	1c51      	adds	r1, r2, #1
 800cd50:	9119      	str	r1, [sp, #100]	@ 0x64
 800cd52:	7852      	ldrb	r2, [r2, #1]
 800cd54:	2a00      	cmp	r2, #0
 800cd56:	d1c5      	bne.n	800cce4 <_strtod_l+0x34>
 800cd58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cd5a:	9419      	str	r4, [sp, #100]	@ 0x64
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f040 8570 	bne.w	800d842 <_strtod_l+0xb92>
 800cd62:	4652      	mov	r2, sl
 800cd64:	465b      	mov	r3, fp
 800cd66:	e7e5      	b.n	800cd34 <_strtod_l+0x84>
 800cd68:	2100      	movs	r1, #0
 800cd6a:	e7ef      	b.n	800cd4c <_strtod_l+0x9c>
 800cd6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cd6e:	b13a      	cbz	r2, 800cd80 <_strtod_l+0xd0>
 800cd70:	2135      	movs	r1, #53	@ 0x35
 800cd72:	a81c      	add	r0, sp, #112	@ 0x70
 800cd74:	f7ff ff3a 	bl	800cbec <__copybits>
 800cd78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd7a:	9805      	ldr	r0, [sp, #20]
 800cd7c:	f7ff fafe 	bl	800c37c <_Bfree>
 800cd80:	3e01      	subs	r6, #1
 800cd82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cd84:	2e04      	cmp	r6, #4
 800cd86:	d806      	bhi.n	800cd96 <_strtod_l+0xe6>
 800cd88:	e8df f006 	tbb	[pc, r6]
 800cd8c:	201d0314 	.word	0x201d0314
 800cd90:	14          	.byte	0x14
 800cd91:	00          	.byte	0x00
 800cd92:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cd96:	05e1      	lsls	r1, r4, #23
 800cd98:	bf48      	it	mi
 800cd9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cd9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cda2:	0d1b      	lsrs	r3, r3, #20
 800cda4:	051b      	lsls	r3, r3, #20
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1bb      	bne.n	800cd22 <_strtod_l+0x72>
 800cdaa:	f7fe fbc9 	bl	800b540 <__errno>
 800cdae:	2322      	movs	r3, #34	@ 0x22
 800cdb0:	6003      	str	r3, [r0, #0]
 800cdb2:	e7b6      	b.n	800cd22 <_strtod_l+0x72>
 800cdb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cdb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cdbc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cdc0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cdc4:	e7e7      	b.n	800cd96 <_strtod_l+0xe6>
 800cdc6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800cf48 <_strtod_l+0x298>
 800cdca:	e7e4      	b.n	800cd96 <_strtod_l+0xe6>
 800cdcc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cdd0:	f04f 3aff 	mov.w	sl, #4294967295
 800cdd4:	e7df      	b.n	800cd96 <_strtod_l+0xe6>
 800cdd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdd8:	1c5a      	adds	r2, r3, #1
 800cdda:	9219      	str	r2, [sp, #100]	@ 0x64
 800cddc:	785b      	ldrb	r3, [r3, #1]
 800cdde:	2b30      	cmp	r3, #48	@ 0x30
 800cde0:	d0f9      	beq.n	800cdd6 <_strtod_l+0x126>
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d09d      	beq.n	800cd22 <_strtod_l+0x72>
 800cde6:	2301      	movs	r3, #1
 800cde8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdea:	220a      	movs	r2, #10
 800cdec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdee:	930c      	str	r3, [sp, #48]	@ 0x30
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	461f      	mov	r7, r3
 800cdf4:	9308      	str	r3, [sp, #32]
 800cdf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdf8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cdfa:	7805      	ldrb	r5, [r0, #0]
 800cdfc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ce00:	b2d9      	uxtb	r1, r3
 800ce02:	2909      	cmp	r1, #9
 800ce04:	d928      	bls.n	800ce58 <_strtod_l+0x1a8>
 800ce06:	2201      	movs	r2, #1
 800ce08:	494e      	ldr	r1, [pc, #312]	@ (800cf44 <_strtod_l+0x294>)
 800ce0a:	f001 f978 	bl	800e0fe <strncmp>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	d033      	beq.n	800ce7a <_strtod_l+0x1ca>
 800ce12:	2000      	movs	r0, #0
 800ce14:	462a      	mov	r2, r5
 800ce16:	463d      	mov	r5, r7
 800ce18:	4681      	mov	r9, r0
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2a65      	cmp	r2, #101	@ 0x65
 800ce1e:	d001      	beq.n	800ce24 <_strtod_l+0x174>
 800ce20:	2a45      	cmp	r2, #69	@ 0x45
 800ce22:	d114      	bne.n	800ce4e <_strtod_l+0x19e>
 800ce24:	b91d      	cbnz	r5, 800ce2e <_strtod_l+0x17e>
 800ce26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce28:	4302      	orrs	r2, r0
 800ce2a:	d095      	beq.n	800cd58 <_strtod_l+0xa8>
 800ce2c:	2500      	movs	r5, #0
 800ce2e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ce30:	1c62      	adds	r2, r4, #1
 800ce32:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce34:	7862      	ldrb	r2, [r4, #1]
 800ce36:	2a2b      	cmp	r2, #43	@ 0x2b
 800ce38:	d078      	beq.n	800cf2c <_strtod_l+0x27c>
 800ce3a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ce3c:	d07c      	beq.n	800cf38 <_strtod_l+0x288>
 800ce3e:	f04f 0c00 	mov.w	ip, #0
 800ce42:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ce46:	2909      	cmp	r1, #9
 800ce48:	f240 8084 	bls.w	800cf54 <_strtod_l+0x2a4>
 800ce4c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ce4e:	f04f 0800 	mov.w	r8, #0
 800ce52:	e0a4      	b.n	800cf9e <_strtod_l+0x2ee>
 800ce54:	2300      	movs	r3, #0
 800ce56:	e7c7      	b.n	800cde8 <_strtod_l+0x138>
 800ce58:	2f08      	cmp	r7, #8
 800ce5a:	f100 0001 	add.w	r0, r0, #1
 800ce5e:	f107 0701 	add.w	r7, r7, #1
 800ce62:	bfd5      	itete	le
 800ce64:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ce66:	9908      	ldrgt	r1, [sp, #32]
 800ce68:	fb02 3301 	mlale	r3, r2, r1, r3
 800ce6c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ce70:	bfd4      	ite	le
 800ce72:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ce74:	9308      	strgt	r3, [sp, #32]
 800ce76:	9019      	str	r0, [sp, #100]	@ 0x64
 800ce78:	e7be      	b.n	800cdf8 <_strtod_l+0x148>
 800ce7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce7c:	1c5a      	adds	r2, r3, #1
 800ce7e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce80:	785a      	ldrb	r2, [r3, #1]
 800ce82:	b37f      	cbz	r7, 800cee4 <_strtod_l+0x234>
 800ce84:	4681      	mov	r9, r0
 800ce86:	463d      	mov	r5, r7
 800ce88:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ce8c:	2b09      	cmp	r3, #9
 800ce8e:	d912      	bls.n	800ceb6 <_strtod_l+0x206>
 800ce90:	2301      	movs	r3, #1
 800ce92:	e7c3      	b.n	800ce1c <_strtod_l+0x16c>
 800ce94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce96:	3001      	adds	r0, #1
 800ce98:	1c5a      	adds	r2, r3, #1
 800ce9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce9c:	785a      	ldrb	r2, [r3, #1]
 800ce9e:	2a30      	cmp	r2, #48	@ 0x30
 800cea0:	d0f8      	beq.n	800ce94 <_strtod_l+0x1e4>
 800cea2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cea6:	2b08      	cmp	r3, #8
 800cea8:	f200 84d2 	bhi.w	800d850 <_strtod_l+0xba0>
 800ceac:	4681      	mov	r9, r0
 800ceae:	2000      	movs	r0, #0
 800ceb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ceb2:	4605      	mov	r5, r0
 800ceb4:	930c      	str	r3, [sp, #48]	@ 0x30
 800ceb6:	3a30      	subs	r2, #48	@ 0x30
 800ceb8:	f100 0301 	add.w	r3, r0, #1
 800cebc:	d02a      	beq.n	800cf14 <_strtod_l+0x264>
 800cebe:	4499      	add	r9, r3
 800cec0:	eb00 0c05 	add.w	ip, r0, r5
 800cec4:	462b      	mov	r3, r5
 800cec6:	210a      	movs	r1, #10
 800cec8:	4563      	cmp	r3, ip
 800ceca:	d10d      	bne.n	800cee8 <_strtod_l+0x238>
 800cecc:	1c69      	adds	r1, r5, #1
 800cece:	4401      	add	r1, r0
 800ced0:	4428      	add	r0, r5
 800ced2:	2808      	cmp	r0, #8
 800ced4:	dc16      	bgt.n	800cf04 <_strtod_l+0x254>
 800ced6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ced8:	230a      	movs	r3, #10
 800ceda:	fb03 2300 	mla	r3, r3, r0, r2
 800cede:	930a      	str	r3, [sp, #40]	@ 0x28
 800cee0:	2300      	movs	r3, #0
 800cee2:	e018      	b.n	800cf16 <_strtod_l+0x266>
 800cee4:	4638      	mov	r0, r7
 800cee6:	e7da      	b.n	800ce9e <_strtod_l+0x1ee>
 800cee8:	2b08      	cmp	r3, #8
 800ceea:	f103 0301 	add.w	r3, r3, #1
 800ceee:	dc03      	bgt.n	800cef8 <_strtod_l+0x248>
 800cef0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cef2:	434e      	muls	r6, r1
 800cef4:	960a      	str	r6, [sp, #40]	@ 0x28
 800cef6:	e7e7      	b.n	800cec8 <_strtod_l+0x218>
 800cef8:	2b10      	cmp	r3, #16
 800cefa:	bfde      	ittt	le
 800cefc:	9e08      	ldrle	r6, [sp, #32]
 800cefe:	434e      	mulle	r6, r1
 800cf00:	9608      	strle	r6, [sp, #32]
 800cf02:	e7e1      	b.n	800cec8 <_strtod_l+0x218>
 800cf04:	280f      	cmp	r0, #15
 800cf06:	dceb      	bgt.n	800cee0 <_strtod_l+0x230>
 800cf08:	9808      	ldr	r0, [sp, #32]
 800cf0a:	230a      	movs	r3, #10
 800cf0c:	fb03 2300 	mla	r3, r3, r0, r2
 800cf10:	9308      	str	r3, [sp, #32]
 800cf12:	e7e5      	b.n	800cee0 <_strtod_l+0x230>
 800cf14:	4629      	mov	r1, r5
 800cf16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf18:	460d      	mov	r5, r1
 800cf1a:	1c50      	adds	r0, r2, #1
 800cf1c:	9019      	str	r0, [sp, #100]	@ 0x64
 800cf1e:	4618      	mov	r0, r3
 800cf20:	7852      	ldrb	r2, [r2, #1]
 800cf22:	e7b1      	b.n	800ce88 <_strtod_l+0x1d8>
 800cf24:	f04f 0900 	mov.w	r9, #0
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e77c      	b.n	800ce26 <_strtod_l+0x176>
 800cf2c:	f04f 0c00 	mov.w	ip, #0
 800cf30:	1ca2      	adds	r2, r4, #2
 800cf32:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf34:	78a2      	ldrb	r2, [r4, #2]
 800cf36:	e784      	b.n	800ce42 <_strtod_l+0x192>
 800cf38:	f04f 0c01 	mov.w	ip, #1
 800cf3c:	e7f8      	b.n	800cf30 <_strtod_l+0x280>
 800cf3e:	bf00      	nop
 800cf40:	0800ee50 	.word	0x0800ee50
 800cf44:	0800ee38 	.word	0x0800ee38
 800cf48:	7ff00000 	.word	0x7ff00000
 800cf4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf4e:	1c51      	adds	r1, r2, #1
 800cf50:	9119      	str	r1, [sp, #100]	@ 0x64
 800cf52:	7852      	ldrb	r2, [r2, #1]
 800cf54:	2a30      	cmp	r2, #48	@ 0x30
 800cf56:	d0f9      	beq.n	800cf4c <_strtod_l+0x29c>
 800cf58:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cf5c:	2908      	cmp	r1, #8
 800cf5e:	f63f af76 	bhi.w	800ce4e <_strtod_l+0x19e>
 800cf62:	3a30      	subs	r2, #48	@ 0x30
 800cf64:	f04f 080a 	mov.w	r8, #10
 800cf68:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf6c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cf6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf70:	1c56      	adds	r6, r2, #1
 800cf72:	9619      	str	r6, [sp, #100]	@ 0x64
 800cf74:	7852      	ldrb	r2, [r2, #1]
 800cf76:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cf7a:	f1be 0f09 	cmp.w	lr, #9
 800cf7e:	d939      	bls.n	800cff4 <_strtod_l+0x344>
 800cf80:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cf82:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cf86:	1a76      	subs	r6, r6, r1
 800cf88:	2e08      	cmp	r6, #8
 800cf8a:	dc03      	bgt.n	800cf94 <_strtod_l+0x2e4>
 800cf8c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cf8e:	4588      	cmp	r8, r1
 800cf90:	bfa8      	it	ge
 800cf92:	4688      	movge	r8, r1
 800cf94:	f1bc 0f00 	cmp.w	ip, #0
 800cf98:	d001      	beq.n	800cf9e <_strtod_l+0x2ee>
 800cf9a:	f1c8 0800 	rsb	r8, r8, #0
 800cf9e:	2d00      	cmp	r5, #0
 800cfa0:	d14e      	bne.n	800d040 <_strtod_l+0x390>
 800cfa2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cfa4:	4308      	orrs	r0, r1
 800cfa6:	f47f aebc 	bne.w	800cd22 <_strtod_l+0x72>
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f47f aed4 	bne.w	800cd58 <_strtod_l+0xa8>
 800cfb0:	2a69      	cmp	r2, #105	@ 0x69
 800cfb2:	d028      	beq.n	800d006 <_strtod_l+0x356>
 800cfb4:	dc25      	bgt.n	800d002 <_strtod_l+0x352>
 800cfb6:	2a49      	cmp	r2, #73	@ 0x49
 800cfb8:	d025      	beq.n	800d006 <_strtod_l+0x356>
 800cfba:	2a4e      	cmp	r2, #78	@ 0x4e
 800cfbc:	f47f aecc 	bne.w	800cd58 <_strtod_l+0xa8>
 800cfc0:	499b      	ldr	r1, [pc, #620]	@ (800d230 <_strtod_l+0x580>)
 800cfc2:	a819      	add	r0, sp, #100	@ 0x64
 800cfc4:	f001 fba0 	bl	800e708 <__match>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	f43f aec5 	beq.w	800cd58 <_strtod_l+0xa8>
 800cfce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	2b28      	cmp	r3, #40	@ 0x28
 800cfd4:	d12e      	bne.n	800d034 <_strtod_l+0x384>
 800cfd6:	aa1c      	add	r2, sp, #112	@ 0x70
 800cfd8:	4996      	ldr	r1, [pc, #600]	@ (800d234 <_strtod_l+0x584>)
 800cfda:	a819      	add	r0, sp, #100	@ 0x64
 800cfdc:	f001 fba8 	bl	800e730 <__hexnan>
 800cfe0:	2805      	cmp	r0, #5
 800cfe2:	d127      	bne.n	800d034 <_strtod_l+0x384>
 800cfe4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cfe6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cfea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cfee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cff2:	e696      	b.n	800cd22 <_strtod_l+0x72>
 800cff4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cff6:	fb08 2101 	mla	r1, r8, r1, r2
 800cffa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cffe:	920e      	str	r2, [sp, #56]	@ 0x38
 800d000:	e7b5      	b.n	800cf6e <_strtod_l+0x2be>
 800d002:	2a6e      	cmp	r2, #110	@ 0x6e
 800d004:	e7da      	b.n	800cfbc <_strtod_l+0x30c>
 800d006:	498c      	ldr	r1, [pc, #560]	@ (800d238 <_strtod_l+0x588>)
 800d008:	a819      	add	r0, sp, #100	@ 0x64
 800d00a:	f001 fb7d 	bl	800e708 <__match>
 800d00e:	2800      	cmp	r0, #0
 800d010:	f43f aea2 	beq.w	800cd58 <_strtod_l+0xa8>
 800d014:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d016:	a819      	add	r0, sp, #100	@ 0x64
 800d018:	4988      	ldr	r1, [pc, #544]	@ (800d23c <_strtod_l+0x58c>)
 800d01a:	3b01      	subs	r3, #1
 800d01c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d01e:	f001 fb73 	bl	800e708 <__match>
 800d022:	b910      	cbnz	r0, 800d02a <_strtod_l+0x37a>
 800d024:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d026:	3301      	adds	r3, #1
 800d028:	9319      	str	r3, [sp, #100]	@ 0x64
 800d02a:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d24c <_strtod_l+0x59c>
 800d02e:	f04f 0a00 	mov.w	sl, #0
 800d032:	e676      	b.n	800cd22 <_strtod_l+0x72>
 800d034:	4882      	ldr	r0, [pc, #520]	@ (800d240 <_strtod_l+0x590>)
 800d036:	f001 f8a7 	bl	800e188 <nan>
 800d03a:	ec5b ab10 	vmov	sl, fp, d0
 800d03e:	e670      	b.n	800cd22 <_strtod_l+0x72>
 800d040:	eba8 0309 	sub.w	r3, r8, r9
 800d044:	2f00      	cmp	r7, #0
 800d046:	bf08      	it	eq
 800d048:	462f      	moveq	r7, r5
 800d04a:	2d10      	cmp	r5, #16
 800d04c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d04e:	462c      	mov	r4, r5
 800d050:	9309      	str	r3, [sp, #36]	@ 0x24
 800d052:	bfa8      	it	ge
 800d054:	2410      	movge	r4, #16
 800d056:	f7f3 fa65 	bl	8000524 <__aeabi_ui2d>
 800d05a:	2d09      	cmp	r5, #9
 800d05c:	4682      	mov	sl, r0
 800d05e:	468b      	mov	fp, r1
 800d060:	dc13      	bgt.n	800d08a <_strtod_l+0x3da>
 800d062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d064:	2b00      	cmp	r3, #0
 800d066:	f43f ae5c 	beq.w	800cd22 <_strtod_l+0x72>
 800d06a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d06c:	dd78      	ble.n	800d160 <_strtod_l+0x4b0>
 800d06e:	2b16      	cmp	r3, #22
 800d070:	dc5f      	bgt.n	800d132 <_strtod_l+0x482>
 800d072:	4974      	ldr	r1, [pc, #464]	@ (800d244 <_strtod_l+0x594>)
 800d074:	4652      	mov	r2, sl
 800d076:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d07a:	465b      	mov	r3, fp
 800d07c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d080:	f7f3 faca 	bl	8000618 <__aeabi_dmul>
 800d084:	4682      	mov	sl, r0
 800d086:	468b      	mov	fp, r1
 800d088:	e64b      	b.n	800cd22 <_strtod_l+0x72>
 800d08a:	4b6e      	ldr	r3, [pc, #440]	@ (800d244 <_strtod_l+0x594>)
 800d08c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d090:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d094:	f7f3 fac0 	bl	8000618 <__aeabi_dmul>
 800d098:	4682      	mov	sl, r0
 800d09a:	468b      	mov	fp, r1
 800d09c:	9808      	ldr	r0, [sp, #32]
 800d09e:	f7f3 fa41 	bl	8000524 <__aeabi_ui2d>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	4650      	mov	r0, sl
 800d0a8:	4659      	mov	r1, fp
 800d0aa:	f7f3 f8ff 	bl	80002ac <__adddf3>
 800d0ae:	2d0f      	cmp	r5, #15
 800d0b0:	4682      	mov	sl, r0
 800d0b2:	468b      	mov	fp, r1
 800d0b4:	ddd5      	ble.n	800d062 <_strtod_l+0x3b2>
 800d0b6:	1b2c      	subs	r4, r5, r4
 800d0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ba:	441c      	add	r4, r3
 800d0bc:	2c00      	cmp	r4, #0
 800d0be:	f340 8096 	ble.w	800d1ee <_strtod_l+0x53e>
 800d0c2:	f014 030f 	ands.w	r3, r4, #15
 800d0c6:	d00a      	beq.n	800d0de <_strtod_l+0x42e>
 800d0c8:	495e      	ldr	r1, [pc, #376]	@ (800d244 <_strtod_l+0x594>)
 800d0ca:	4652      	mov	r2, sl
 800d0cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d0d0:	465b      	mov	r3, fp
 800d0d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0d6:	f7f3 fa9f 	bl	8000618 <__aeabi_dmul>
 800d0da:	4682      	mov	sl, r0
 800d0dc:	468b      	mov	fp, r1
 800d0de:	f034 040f 	bics.w	r4, r4, #15
 800d0e2:	d073      	beq.n	800d1cc <_strtod_l+0x51c>
 800d0e4:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d0e8:	dd48      	ble.n	800d17c <_strtod_l+0x4cc>
 800d0ea:	2400      	movs	r4, #0
 800d0ec:	46a0      	mov	r8, r4
 800d0ee:	46a1      	mov	r9, r4
 800d0f0:	940a      	str	r4, [sp, #40]	@ 0x28
 800d0f2:	2322      	movs	r3, #34	@ 0x22
 800d0f4:	9a05      	ldr	r2, [sp, #20]
 800d0f6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d24c <_strtod_l+0x59c>
 800d0fa:	f04f 0a00 	mov.w	sl, #0
 800d0fe:	6013      	str	r3, [r2, #0]
 800d100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d102:	2b00      	cmp	r3, #0
 800d104:	f43f ae0d 	beq.w	800cd22 <_strtod_l+0x72>
 800d108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d10a:	9805      	ldr	r0, [sp, #20]
 800d10c:	f7ff f936 	bl	800c37c <_Bfree>
 800d110:	4649      	mov	r1, r9
 800d112:	9805      	ldr	r0, [sp, #20]
 800d114:	f7ff f932 	bl	800c37c <_Bfree>
 800d118:	4641      	mov	r1, r8
 800d11a:	9805      	ldr	r0, [sp, #20]
 800d11c:	f7ff f92e 	bl	800c37c <_Bfree>
 800d120:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d122:	9805      	ldr	r0, [sp, #20]
 800d124:	f7ff f92a 	bl	800c37c <_Bfree>
 800d128:	4621      	mov	r1, r4
 800d12a:	9805      	ldr	r0, [sp, #20]
 800d12c:	f7ff f926 	bl	800c37c <_Bfree>
 800d130:	e5f7      	b.n	800cd22 <_strtod_l+0x72>
 800d132:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d138:	4293      	cmp	r3, r2
 800d13a:	dbbc      	blt.n	800d0b6 <_strtod_l+0x406>
 800d13c:	f1c5 050f 	rsb	r5, r5, #15
 800d140:	4c40      	ldr	r4, [pc, #256]	@ (800d244 <_strtod_l+0x594>)
 800d142:	4652      	mov	r2, sl
 800d144:	465b      	mov	r3, fp
 800d146:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d14a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d14e:	f7f3 fa63 	bl	8000618 <__aeabi_dmul>
 800d152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d154:	1b5d      	subs	r5, r3, r5
 800d156:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d15a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d15e:	e78f      	b.n	800d080 <_strtod_l+0x3d0>
 800d160:	3316      	adds	r3, #22
 800d162:	dba8      	blt.n	800d0b6 <_strtod_l+0x406>
 800d164:	eba9 0808 	sub.w	r8, r9, r8
 800d168:	4b36      	ldr	r3, [pc, #216]	@ (800d244 <_strtod_l+0x594>)
 800d16a:	4650      	mov	r0, sl
 800d16c:	4659      	mov	r1, fp
 800d16e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d172:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d176:	f7f3 fb79 	bl	800086c <__aeabi_ddiv>
 800d17a:	e783      	b.n	800d084 <_strtod_l+0x3d4>
 800d17c:	4b32      	ldr	r3, [pc, #200]	@ (800d248 <_strtod_l+0x598>)
 800d17e:	1124      	asrs	r4, r4, #4
 800d180:	4650      	mov	r0, sl
 800d182:	4659      	mov	r1, fp
 800d184:	9308      	str	r3, [sp, #32]
 800d186:	2300      	movs	r3, #0
 800d188:	461e      	mov	r6, r3
 800d18a:	2c01      	cmp	r4, #1
 800d18c:	dc21      	bgt.n	800d1d2 <_strtod_l+0x522>
 800d18e:	b10b      	cbz	r3, 800d194 <_strtod_l+0x4e4>
 800d190:	4682      	mov	sl, r0
 800d192:	468b      	mov	fp, r1
 800d194:	492c      	ldr	r1, [pc, #176]	@ (800d248 <_strtod_l+0x598>)
 800d196:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d19a:	4652      	mov	r2, sl
 800d19c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d1a0:	465b      	mov	r3, fp
 800d1a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1a6:	f7f3 fa37 	bl	8000618 <__aeabi_dmul>
 800d1aa:	4b28      	ldr	r3, [pc, #160]	@ (800d24c <_strtod_l+0x59c>)
 800d1ac:	460a      	mov	r2, r1
 800d1ae:	4682      	mov	sl, r0
 800d1b0:	400b      	ands	r3, r1
 800d1b2:	4927      	ldr	r1, [pc, #156]	@ (800d250 <_strtod_l+0x5a0>)
 800d1b4:	428b      	cmp	r3, r1
 800d1b6:	d898      	bhi.n	800d0ea <_strtod_l+0x43a>
 800d1b8:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d1bc:	428b      	cmp	r3, r1
 800d1be:	bf86      	itte	hi
 800d1c0:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d254 <_strtod_l+0x5a4>
 800d1c4:	f04f 3aff 	movhi.w	sl, #4294967295
 800d1c8:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	9308      	str	r3, [sp, #32]
 800d1d0:	e07a      	b.n	800d2c8 <_strtod_l+0x618>
 800d1d2:	07e2      	lsls	r2, r4, #31
 800d1d4:	d505      	bpl.n	800d1e2 <_strtod_l+0x532>
 800d1d6:	9b08      	ldr	r3, [sp, #32]
 800d1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1dc:	f7f3 fa1c 	bl	8000618 <__aeabi_dmul>
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	9a08      	ldr	r2, [sp, #32]
 800d1e4:	3601      	adds	r6, #1
 800d1e6:	1064      	asrs	r4, r4, #1
 800d1e8:	3208      	adds	r2, #8
 800d1ea:	9208      	str	r2, [sp, #32]
 800d1ec:	e7cd      	b.n	800d18a <_strtod_l+0x4da>
 800d1ee:	d0ed      	beq.n	800d1cc <_strtod_l+0x51c>
 800d1f0:	4264      	negs	r4, r4
 800d1f2:	f014 020f 	ands.w	r2, r4, #15
 800d1f6:	d00a      	beq.n	800d20e <_strtod_l+0x55e>
 800d1f8:	4b12      	ldr	r3, [pc, #72]	@ (800d244 <_strtod_l+0x594>)
 800d1fa:	4650      	mov	r0, sl
 800d1fc:	4659      	mov	r1, fp
 800d1fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d206:	f7f3 fb31 	bl	800086c <__aeabi_ddiv>
 800d20a:	4682      	mov	sl, r0
 800d20c:	468b      	mov	fp, r1
 800d20e:	1124      	asrs	r4, r4, #4
 800d210:	d0dc      	beq.n	800d1cc <_strtod_l+0x51c>
 800d212:	2c1f      	cmp	r4, #31
 800d214:	dd20      	ble.n	800d258 <_strtod_l+0x5a8>
 800d216:	2400      	movs	r4, #0
 800d218:	46a0      	mov	r8, r4
 800d21a:	46a1      	mov	r9, r4
 800d21c:	940a      	str	r4, [sp, #40]	@ 0x28
 800d21e:	2322      	movs	r3, #34	@ 0x22
 800d220:	9a05      	ldr	r2, [sp, #20]
 800d222:	f04f 0a00 	mov.w	sl, #0
 800d226:	f04f 0b00 	mov.w	fp, #0
 800d22a:	6013      	str	r3, [r2, #0]
 800d22c:	e768      	b.n	800d100 <_strtod_l+0x450>
 800d22e:	bf00      	nop
 800d230:	0800ec25 	.word	0x0800ec25
 800d234:	0800ee3c 	.word	0x0800ee3c
 800d238:	0800ec1d 	.word	0x0800ec1d
 800d23c:	0800ec54 	.word	0x0800ec54
 800d240:	0800efe5 	.word	0x0800efe5
 800d244:	0800ed70 	.word	0x0800ed70
 800d248:	0800ed48 	.word	0x0800ed48
 800d24c:	7ff00000 	.word	0x7ff00000
 800d250:	7ca00000 	.word	0x7ca00000
 800d254:	7fefffff 	.word	0x7fefffff
 800d258:	f014 0310 	ands.w	r3, r4, #16
 800d25c:	4650      	mov	r0, sl
 800d25e:	4659      	mov	r1, fp
 800d260:	4ea9      	ldr	r6, [pc, #676]	@ (800d508 <_strtod_l+0x858>)
 800d262:	bf18      	it	ne
 800d264:	236a      	movne	r3, #106	@ 0x6a
 800d266:	9308      	str	r3, [sp, #32]
 800d268:	2300      	movs	r3, #0
 800d26a:	07e2      	lsls	r2, r4, #31
 800d26c:	d504      	bpl.n	800d278 <_strtod_l+0x5c8>
 800d26e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d272:	f7f3 f9d1 	bl	8000618 <__aeabi_dmul>
 800d276:	2301      	movs	r3, #1
 800d278:	1064      	asrs	r4, r4, #1
 800d27a:	f106 0608 	add.w	r6, r6, #8
 800d27e:	d1f4      	bne.n	800d26a <_strtod_l+0x5ba>
 800d280:	b10b      	cbz	r3, 800d286 <_strtod_l+0x5d6>
 800d282:	4682      	mov	sl, r0
 800d284:	468b      	mov	fp, r1
 800d286:	9b08      	ldr	r3, [sp, #32]
 800d288:	b1b3      	cbz	r3, 800d2b8 <_strtod_l+0x608>
 800d28a:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d28e:	4659      	mov	r1, fp
 800d290:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d294:	2b00      	cmp	r3, #0
 800d296:	dd0f      	ble.n	800d2b8 <_strtod_l+0x608>
 800d298:	2b1f      	cmp	r3, #31
 800d29a:	dd55      	ble.n	800d348 <_strtod_l+0x698>
 800d29c:	2b34      	cmp	r3, #52	@ 0x34
 800d29e:	f04f 0a00 	mov.w	sl, #0
 800d2a2:	bfdb      	ittet	le
 800d2a4:	f04f 33ff 	movle.w	r3, #4294967295
 800d2a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d2ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d2b0:	4093      	lslle	r3, r2
 800d2b2:	bfd8      	it	le
 800d2b4:	ea03 0b01 	andle.w	fp, r3, r1
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	4650      	mov	r0, sl
 800d2be:	4659      	mov	r1, fp
 800d2c0:	f7f3 fc12 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	d1a6      	bne.n	800d216 <_strtod_l+0x566>
 800d2c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2ca:	463a      	mov	r2, r7
 800d2cc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	462b      	mov	r3, r5
 800d2d2:	9805      	ldr	r0, [sp, #20]
 800d2d4:	f7ff f8bc 	bl	800c450 <__s2b>
 800d2d8:	900a      	str	r0, [sp, #40]	@ 0x28
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	f43f af05 	beq.w	800d0ea <_strtod_l+0x43a>
 800d2e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2e2:	eba9 0308 	sub.w	r3, r9, r8
 800d2e6:	2400      	movs	r4, #0
 800d2e8:	2a00      	cmp	r2, #0
 800d2ea:	46a0      	mov	r8, r4
 800d2ec:	bfa8      	it	ge
 800d2ee:	2300      	movge	r3, #0
 800d2f0:	9312      	str	r3, [sp, #72]	@ 0x48
 800d2f2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d2f6:	9316      	str	r3, [sp, #88]	@ 0x58
 800d2f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2fa:	9805      	ldr	r0, [sp, #20]
 800d2fc:	6859      	ldr	r1, [r3, #4]
 800d2fe:	f7fe fffd 	bl	800c2fc <_Balloc>
 800d302:	4681      	mov	r9, r0
 800d304:	2800      	cmp	r0, #0
 800d306:	f43f aef4 	beq.w	800d0f2 <_strtod_l+0x442>
 800d30a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d30c:	300c      	adds	r0, #12
 800d30e:	691a      	ldr	r2, [r3, #16]
 800d310:	f103 010c 	add.w	r1, r3, #12
 800d314:	3202      	adds	r2, #2
 800d316:	0092      	lsls	r2, r2, #2
 800d318:	f000 ff26 	bl	800e168 <memcpy>
 800d31c:	aa1c      	add	r2, sp, #112	@ 0x70
 800d31e:	a91b      	add	r1, sp, #108	@ 0x6c
 800d320:	9805      	ldr	r0, [sp, #20]
 800d322:	ec4b ab10 	vmov	d0, sl, fp
 800d326:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d32a:	f7ff fbd5 	bl	800cad8 <__d2b>
 800d32e:	901a      	str	r0, [sp, #104]	@ 0x68
 800d330:	2800      	cmp	r0, #0
 800d332:	f43f aede 	beq.w	800d0f2 <_strtod_l+0x442>
 800d336:	2101      	movs	r1, #1
 800d338:	9805      	ldr	r0, [sp, #20]
 800d33a:	f7ff f91f 	bl	800c57c <__i2b>
 800d33e:	4680      	mov	r8, r0
 800d340:	b948      	cbnz	r0, 800d356 <_strtod_l+0x6a6>
 800d342:	f04f 0800 	mov.w	r8, #0
 800d346:	e6d4      	b.n	800d0f2 <_strtod_l+0x442>
 800d348:	f04f 32ff 	mov.w	r2, #4294967295
 800d34c:	fa02 f303 	lsl.w	r3, r2, r3
 800d350:	ea03 0a0a 	and.w	sl, r3, sl
 800d354:	e7b0      	b.n	800d2b8 <_strtod_l+0x608>
 800d356:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d358:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d35a:	2d00      	cmp	r5, #0
 800d35c:	bfa9      	itett	ge
 800d35e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d360:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d362:	18ef      	addge	r7, r5, r3
 800d364:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d366:	bfb8      	it	lt
 800d368:	1b5e      	sublt	r6, r3, r5
 800d36a:	9b08      	ldr	r3, [sp, #32]
 800d36c:	bfb8      	it	lt
 800d36e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d370:	1aed      	subs	r5, r5, r3
 800d372:	4b66      	ldr	r3, [pc, #408]	@ (800d50c <_strtod_l+0x85c>)
 800d374:	4415      	add	r5, r2
 800d376:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d37a:	3d01      	subs	r5, #1
 800d37c:	429d      	cmp	r5, r3
 800d37e:	da4f      	bge.n	800d420 <_strtod_l+0x770>
 800d380:	1b5b      	subs	r3, r3, r5
 800d382:	2101      	movs	r1, #1
 800d384:	2b1f      	cmp	r3, #31
 800d386:	eba2 0203 	sub.w	r2, r2, r3
 800d38a:	dc3d      	bgt.n	800d408 <_strtod_l+0x758>
 800d38c:	fa01 f303 	lsl.w	r3, r1, r3
 800d390:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d392:	2300      	movs	r3, #0
 800d394:	9310      	str	r3, [sp, #64]	@ 0x40
 800d396:	18bd      	adds	r5, r7, r2
 800d398:	9b08      	ldr	r3, [sp, #32]
 800d39a:	4416      	add	r6, r2
 800d39c:	42af      	cmp	r7, r5
 800d39e:	441e      	add	r6, r3
 800d3a0:	463b      	mov	r3, r7
 800d3a2:	bfa8      	it	ge
 800d3a4:	462b      	movge	r3, r5
 800d3a6:	42b3      	cmp	r3, r6
 800d3a8:	bfa8      	it	ge
 800d3aa:	4633      	movge	r3, r6
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	bfc2      	ittt	gt
 800d3b0:	1aed      	subgt	r5, r5, r3
 800d3b2:	1af6      	subgt	r6, r6, r3
 800d3b4:	1aff      	subgt	r7, r7, r3
 800d3b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	dd16      	ble.n	800d3ea <_strtod_l+0x73a>
 800d3bc:	4641      	mov	r1, r8
 800d3be:	461a      	mov	r2, r3
 800d3c0:	9805      	ldr	r0, [sp, #20]
 800d3c2:	f7ff f99b 	bl	800c6fc <__pow5mult>
 800d3c6:	4680      	mov	r8, r0
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d0ba      	beq.n	800d342 <_strtod_l+0x692>
 800d3cc:	4601      	mov	r1, r0
 800d3ce:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d3d0:	9805      	ldr	r0, [sp, #20]
 800d3d2:	f7ff f8e9 	bl	800c5a8 <__multiply>
 800d3d6:	900e      	str	r0, [sp, #56]	@ 0x38
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	f43f ae8a 	beq.w	800d0f2 <_strtod_l+0x442>
 800d3de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d3e0:	9805      	ldr	r0, [sp, #20]
 800d3e2:	f7fe ffcb 	bl	800c37c <_Bfree>
 800d3e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3ea:	2d00      	cmp	r5, #0
 800d3ec:	dc1d      	bgt.n	800d42a <_strtod_l+0x77a>
 800d3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	dd23      	ble.n	800d43c <_strtod_l+0x78c>
 800d3f4:	4649      	mov	r1, r9
 800d3f6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d3f8:	9805      	ldr	r0, [sp, #20]
 800d3fa:	f7ff f97f 	bl	800c6fc <__pow5mult>
 800d3fe:	4681      	mov	r9, r0
 800d400:	b9e0      	cbnz	r0, 800d43c <_strtod_l+0x78c>
 800d402:	f04f 0900 	mov.w	r9, #0
 800d406:	e674      	b.n	800d0f2 <_strtod_l+0x442>
 800d408:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d40c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d40e:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d412:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d416:	35e2      	adds	r5, #226	@ 0xe2
 800d418:	fa01 f305 	lsl.w	r3, r1, r5
 800d41c:	9310      	str	r3, [sp, #64]	@ 0x40
 800d41e:	e7ba      	b.n	800d396 <_strtod_l+0x6e6>
 800d420:	2300      	movs	r3, #0
 800d422:	9310      	str	r3, [sp, #64]	@ 0x40
 800d424:	2301      	movs	r3, #1
 800d426:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d428:	e7b5      	b.n	800d396 <_strtod_l+0x6e6>
 800d42a:	462a      	mov	r2, r5
 800d42c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d42e:	9805      	ldr	r0, [sp, #20]
 800d430:	f7ff f9be 	bl	800c7b0 <__lshift>
 800d434:	901a      	str	r0, [sp, #104]	@ 0x68
 800d436:	2800      	cmp	r0, #0
 800d438:	d1d9      	bne.n	800d3ee <_strtod_l+0x73e>
 800d43a:	e65a      	b.n	800d0f2 <_strtod_l+0x442>
 800d43c:	2e00      	cmp	r6, #0
 800d43e:	dd07      	ble.n	800d450 <_strtod_l+0x7a0>
 800d440:	4649      	mov	r1, r9
 800d442:	4632      	mov	r2, r6
 800d444:	9805      	ldr	r0, [sp, #20]
 800d446:	f7ff f9b3 	bl	800c7b0 <__lshift>
 800d44a:	4681      	mov	r9, r0
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d0d8      	beq.n	800d402 <_strtod_l+0x752>
 800d450:	2f00      	cmp	r7, #0
 800d452:	dd08      	ble.n	800d466 <_strtod_l+0x7b6>
 800d454:	4641      	mov	r1, r8
 800d456:	463a      	mov	r2, r7
 800d458:	9805      	ldr	r0, [sp, #20]
 800d45a:	f7ff f9a9 	bl	800c7b0 <__lshift>
 800d45e:	4680      	mov	r8, r0
 800d460:	2800      	cmp	r0, #0
 800d462:	f43f ae46 	beq.w	800d0f2 <_strtod_l+0x442>
 800d466:	464a      	mov	r2, r9
 800d468:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d46a:	9805      	ldr	r0, [sp, #20]
 800d46c:	f7ff fa28 	bl	800c8c0 <__mdiff>
 800d470:	4604      	mov	r4, r0
 800d472:	2800      	cmp	r0, #0
 800d474:	f43f ae3d 	beq.w	800d0f2 <_strtod_l+0x442>
 800d478:	68c3      	ldr	r3, [r0, #12]
 800d47a:	4641      	mov	r1, r8
 800d47c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d47e:	2300      	movs	r3, #0
 800d480:	60c3      	str	r3, [r0, #12]
 800d482:	f7ff fa01 	bl	800c888 <__mcmp>
 800d486:	2800      	cmp	r0, #0
 800d488:	da46      	bge.n	800d518 <_strtod_l+0x868>
 800d48a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d48c:	ea53 030a 	orrs.w	r3, r3, sl
 800d490:	d16c      	bne.n	800d56c <_strtod_l+0x8bc>
 800d492:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d496:	2b00      	cmp	r3, #0
 800d498:	d168      	bne.n	800d56c <_strtod_l+0x8bc>
 800d49a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d49e:	0d1b      	lsrs	r3, r3, #20
 800d4a0:	051b      	lsls	r3, r3, #20
 800d4a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d4a6:	d961      	bls.n	800d56c <_strtod_l+0x8bc>
 800d4a8:	6963      	ldr	r3, [r4, #20]
 800d4aa:	b913      	cbnz	r3, 800d4b2 <_strtod_l+0x802>
 800d4ac:	6923      	ldr	r3, [r4, #16]
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	dd5c      	ble.n	800d56c <_strtod_l+0x8bc>
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	9805      	ldr	r0, [sp, #20]
 800d4b8:	f7ff f97a 	bl	800c7b0 <__lshift>
 800d4bc:	4641      	mov	r1, r8
 800d4be:	4604      	mov	r4, r0
 800d4c0:	f7ff f9e2 	bl	800c888 <__mcmp>
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	dd51      	ble.n	800d56c <_strtod_l+0x8bc>
 800d4c8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d4cc:	9a08      	ldr	r2, [sp, #32]
 800d4ce:	0d1b      	lsrs	r3, r3, #20
 800d4d0:	051b      	lsls	r3, r3, #20
 800d4d2:	2a00      	cmp	r2, #0
 800d4d4:	d06b      	beq.n	800d5ae <_strtod_l+0x8fe>
 800d4d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d4da:	d868      	bhi.n	800d5ae <_strtod_l+0x8fe>
 800d4dc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d4e0:	f67f ae9d 	bls.w	800d21e <_strtod_l+0x56e>
 800d4e4:	4b0a      	ldr	r3, [pc, #40]	@ (800d510 <_strtod_l+0x860>)
 800d4e6:	4650      	mov	r0, sl
 800d4e8:	4659      	mov	r1, fp
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f7f3 f894 	bl	8000618 <__aeabi_dmul>
 800d4f0:	4b08      	ldr	r3, [pc, #32]	@ (800d514 <_strtod_l+0x864>)
 800d4f2:	4682      	mov	sl, r0
 800d4f4:	468b      	mov	fp, r1
 800d4f6:	400b      	ands	r3, r1
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f47f ae05 	bne.w	800d108 <_strtod_l+0x458>
 800d4fe:	2322      	movs	r3, #34	@ 0x22
 800d500:	9a05      	ldr	r2, [sp, #20]
 800d502:	6013      	str	r3, [r2, #0]
 800d504:	e600      	b.n	800d108 <_strtod_l+0x458>
 800d506:	bf00      	nop
 800d508:	0800ee68 	.word	0x0800ee68
 800d50c:	fffffc02 	.word	0xfffffc02
 800d510:	39500000 	.word	0x39500000
 800d514:	7ff00000 	.word	0x7ff00000
 800d518:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d51c:	d165      	bne.n	800d5ea <_strtod_l+0x93a>
 800d51e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d520:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d524:	b35a      	cbz	r2, 800d57e <_strtod_l+0x8ce>
 800d526:	4a9e      	ldr	r2, [pc, #632]	@ (800d7a0 <_strtod_l+0xaf0>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d12b      	bne.n	800d584 <_strtod_l+0x8d4>
 800d52c:	9b08      	ldr	r3, [sp, #32]
 800d52e:	4651      	mov	r1, sl
 800d530:	b303      	cbz	r3, 800d574 <_strtod_l+0x8c4>
 800d532:	465a      	mov	r2, fp
 800d534:	4b9b      	ldr	r3, [pc, #620]	@ (800d7a4 <_strtod_l+0xaf4>)
 800d536:	4013      	ands	r3, r2
 800d538:	f04f 32ff 	mov.w	r2, #4294967295
 800d53c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d540:	d81b      	bhi.n	800d57a <_strtod_l+0x8ca>
 800d542:	0d1b      	lsrs	r3, r3, #20
 800d544:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d548:	fa02 f303 	lsl.w	r3, r2, r3
 800d54c:	4299      	cmp	r1, r3
 800d54e:	d119      	bne.n	800d584 <_strtod_l+0x8d4>
 800d550:	4b95      	ldr	r3, [pc, #596]	@ (800d7a8 <_strtod_l+0xaf8>)
 800d552:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d554:	429a      	cmp	r2, r3
 800d556:	d102      	bne.n	800d55e <_strtod_l+0x8ae>
 800d558:	3101      	adds	r1, #1
 800d55a:	f43f adca 	beq.w	800d0f2 <_strtod_l+0x442>
 800d55e:	4b91      	ldr	r3, [pc, #580]	@ (800d7a4 <_strtod_l+0xaf4>)
 800d560:	f04f 0a00 	mov.w	sl, #0
 800d564:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d566:	401a      	ands	r2, r3
 800d568:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d56c:	9b08      	ldr	r3, [sp, #32]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1b8      	bne.n	800d4e4 <_strtod_l+0x834>
 800d572:	e5c9      	b.n	800d108 <_strtod_l+0x458>
 800d574:	f04f 33ff 	mov.w	r3, #4294967295
 800d578:	e7e8      	b.n	800d54c <_strtod_l+0x89c>
 800d57a:	4613      	mov	r3, r2
 800d57c:	e7e6      	b.n	800d54c <_strtod_l+0x89c>
 800d57e:	ea53 030a 	orrs.w	r3, r3, sl
 800d582:	d0a1      	beq.n	800d4c8 <_strtod_l+0x818>
 800d584:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d586:	b1db      	cbz	r3, 800d5c0 <_strtod_l+0x910>
 800d588:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d58a:	4213      	tst	r3, r2
 800d58c:	d0ee      	beq.n	800d56c <_strtod_l+0x8bc>
 800d58e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d590:	4650      	mov	r0, sl
 800d592:	9a08      	ldr	r2, [sp, #32]
 800d594:	4659      	mov	r1, fp
 800d596:	b1bb      	cbz	r3, 800d5c8 <_strtod_l+0x918>
 800d598:	f7ff fb6c 	bl	800cc74 <sulp>
 800d59c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5a0:	ec53 2b10 	vmov	r2, r3, d0
 800d5a4:	f7f2 fe82 	bl	80002ac <__adddf3>
 800d5a8:	4682      	mov	sl, r0
 800d5aa:	468b      	mov	fp, r1
 800d5ac:	e7de      	b.n	800d56c <_strtod_l+0x8bc>
 800d5ae:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d5b2:	f04f 3aff 	mov.w	sl, #4294967295
 800d5b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d5ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d5be:	e7d5      	b.n	800d56c <_strtod_l+0x8bc>
 800d5c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d5c2:	ea13 0f0a 	tst.w	r3, sl
 800d5c6:	e7e1      	b.n	800d58c <_strtod_l+0x8dc>
 800d5c8:	f7ff fb54 	bl	800cc74 <sulp>
 800d5cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5d0:	ec53 2b10 	vmov	r2, r3, d0
 800d5d4:	f7f2 fe68 	bl	80002a8 <__aeabi_dsub>
 800d5d8:	2200      	movs	r2, #0
 800d5da:	2300      	movs	r3, #0
 800d5dc:	4682      	mov	sl, r0
 800d5de:	468b      	mov	fp, r1
 800d5e0:	f7f3 fa82 	bl	8000ae8 <__aeabi_dcmpeq>
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d0c1      	beq.n	800d56c <_strtod_l+0x8bc>
 800d5e8:	e619      	b.n	800d21e <_strtod_l+0x56e>
 800d5ea:	4641      	mov	r1, r8
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f7ff facb 	bl	800cb88 <__ratio>
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d5f8:	ec57 6b10 	vmov	r6, r7, d0
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	4639      	mov	r1, r7
 800d600:	f7f3 fa86 	bl	8000b10 <__aeabi_dcmple>
 800d604:	2800      	cmp	r0, #0
 800d606:	d06f      	beq.n	800d6e8 <_strtod_l+0xa38>
 800d608:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d17a      	bne.n	800d704 <_strtod_l+0xa54>
 800d60e:	f1ba 0f00 	cmp.w	sl, #0
 800d612:	d158      	bne.n	800d6c6 <_strtod_l+0xa16>
 800d614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d15a      	bne.n	800d6d4 <_strtod_l+0xa24>
 800d61e:	2200      	movs	r2, #0
 800d620:	4b62      	ldr	r3, [pc, #392]	@ (800d7ac <_strtod_l+0xafc>)
 800d622:	4630      	mov	r0, r6
 800d624:	4639      	mov	r1, r7
 800d626:	f7f3 fa69 	bl	8000afc <__aeabi_dcmplt>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d159      	bne.n	800d6e2 <_strtod_l+0xa32>
 800d62e:	4630      	mov	r0, r6
 800d630:	4639      	mov	r1, r7
 800d632:	2200      	movs	r2, #0
 800d634:	4b5e      	ldr	r3, [pc, #376]	@ (800d7b0 <_strtod_l+0xb00>)
 800d636:	f7f2 ffef 	bl	8000618 <__aeabi_dmul>
 800d63a:	4606      	mov	r6, r0
 800d63c:	460f      	mov	r7, r1
 800d63e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d642:	9606      	str	r6, [sp, #24]
 800d644:	9307      	str	r3, [sp, #28]
 800d646:	4d57      	ldr	r5, [pc, #348]	@ (800d7a4 <_strtod_l+0xaf4>)
 800d648:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d64c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d650:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d652:	401d      	ands	r5, r3
 800d654:	4b57      	ldr	r3, [pc, #348]	@ (800d7b4 <_strtod_l+0xb04>)
 800d656:	429d      	cmp	r5, r3
 800d658:	f040 80b0 	bne.w	800d7bc <_strtod_l+0xb0c>
 800d65c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d65e:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d662:	ec4b ab10 	vmov	d0, sl, fp
 800d666:	f7ff f9c3 	bl	800c9f0 <__ulp>
 800d66a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d66e:	ec51 0b10 	vmov	r0, r1, d0
 800d672:	f7f2 ffd1 	bl	8000618 <__aeabi_dmul>
 800d676:	4652      	mov	r2, sl
 800d678:	465b      	mov	r3, fp
 800d67a:	f7f2 fe17 	bl	80002ac <__adddf3>
 800d67e:	460b      	mov	r3, r1
 800d680:	4948      	ldr	r1, [pc, #288]	@ (800d7a4 <_strtod_l+0xaf4>)
 800d682:	4682      	mov	sl, r0
 800d684:	4a4c      	ldr	r2, [pc, #304]	@ (800d7b8 <_strtod_l+0xb08>)
 800d686:	4019      	ands	r1, r3
 800d688:	4291      	cmp	r1, r2
 800d68a:	d942      	bls.n	800d712 <_strtod_l+0xa62>
 800d68c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d68e:	4b46      	ldr	r3, [pc, #280]	@ (800d7a8 <_strtod_l+0xaf8>)
 800d690:	429a      	cmp	r2, r3
 800d692:	d103      	bne.n	800d69c <_strtod_l+0x9ec>
 800d694:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d696:	3301      	adds	r3, #1
 800d698:	f43f ad2b 	beq.w	800d0f2 <_strtod_l+0x442>
 800d69c:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800d7a8 <_strtod_l+0xaf8>
 800d6a0:	f04f 3aff 	mov.w	sl, #4294967295
 800d6a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6a6:	9805      	ldr	r0, [sp, #20]
 800d6a8:	f7fe fe68 	bl	800c37c <_Bfree>
 800d6ac:	4649      	mov	r1, r9
 800d6ae:	9805      	ldr	r0, [sp, #20]
 800d6b0:	f7fe fe64 	bl	800c37c <_Bfree>
 800d6b4:	4641      	mov	r1, r8
 800d6b6:	9805      	ldr	r0, [sp, #20]
 800d6b8:	f7fe fe60 	bl	800c37c <_Bfree>
 800d6bc:	4621      	mov	r1, r4
 800d6be:	9805      	ldr	r0, [sp, #20]
 800d6c0:	f7fe fe5c 	bl	800c37c <_Bfree>
 800d6c4:	e618      	b.n	800d2f8 <_strtod_l+0x648>
 800d6c6:	f1ba 0f01 	cmp.w	sl, #1
 800d6ca:	d103      	bne.n	800d6d4 <_strtod_l+0xa24>
 800d6cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	f43f ada5 	beq.w	800d21e <_strtod_l+0x56e>
 800d6d4:	2600      	movs	r6, #0
 800d6d6:	4f35      	ldr	r7, [pc, #212]	@ (800d7ac <_strtod_l+0xafc>)
 800d6d8:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800d780 <_strtod_l+0xad0>
 800d6dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d6e0:	e7b1      	b.n	800d646 <_strtod_l+0x996>
 800d6e2:	2600      	movs	r6, #0
 800d6e4:	4f32      	ldr	r7, [pc, #200]	@ (800d7b0 <_strtod_l+0xb00>)
 800d6e6:	e7aa      	b.n	800d63e <_strtod_l+0x98e>
 800d6e8:	4b31      	ldr	r3, [pc, #196]	@ (800d7b0 <_strtod_l+0xb00>)
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	4639      	mov	r1, r7
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f7f2 ff92 	bl	8000618 <__aeabi_dmul>
 800d6f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6f6:	4606      	mov	r6, r0
 800d6f8:	460f      	mov	r7, r1
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d09f      	beq.n	800d63e <_strtod_l+0x98e>
 800d6fe:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d702:	e7a0      	b.n	800d646 <_strtod_l+0x996>
 800d704:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800d788 <_strtod_l+0xad8>
 800d708:	ec57 6b17 	vmov	r6, r7, d7
 800d70c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d710:	e799      	b.n	800d646 <_strtod_l+0x996>
 800d712:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d716:	9b08      	ldr	r3, [sp, #32]
 800d718:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1c1      	bne.n	800d6a4 <_strtod_l+0x9f4>
 800d720:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d724:	0d1b      	lsrs	r3, r3, #20
 800d726:	051b      	lsls	r3, r3, #20
 800d728:	429d      	cmp	r5, r3
 800d72a:	d1bb      	bne.n	800d6a4 <_strtod_l+0x9f4>
 800d72c:	4630      	mov	r0, r6
 800d72e:	4639      	mov	r1, r7
 800d730:	f7f3 fad2 	bl	8000cd8 <__aeabi_d2lz>
 800d734:	f7f2 ff42 	bl	80005bc <__aeabi_l2d>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	4630      	mov	r0, r6
 800d73e:	4639      	mov	r1, r7
 800d740:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d744:	f7f2 fdb0 	bl	80002a8 <__aeabi_dsub>
 800d748:	460b      	mov	r3, r1
 800d74a:	4602      	mov	r2, r0
 800d74c:	ea46 060a 	orr.w	r6, r6, sl
 800d750:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d756:	431e      	orrs	r6, r3
 800d758:	d06d      	beq.n	800d836 <_strtod_l+0xb86>
 800d75a:	a30d      	add	r3, pc, #52	@ (adr r3, 800d790 <_strtod_l+0xae0>)
 800d75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d760:	f7f3 f9cc 	bl	8000afc <__aeabi_dcmplt>
 800d764:	2800      	cmp	r0, #0
 800d766:	f47f accf 	bne.w	800d108 <_strtod_l+0x458>
 800d76a:	a30b      	add	r3, pc, #44	@ (adr r3, 800d798 <_strtod_l+0xae8>)
 800d76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d770:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d774:	f7f3 f9e0 	bl	8000b38 <__aeabi_dcmpgt>
 800d778:	2800      	cmp	r0, #0
 800d77a:	d093      	beq.n	800d6a4 <_strtod_l+0x9f4>
 800d77c:	e4c4      	b.n	800d108 <_strtod_l+0x458>
 800d77e:	bf00      	nop
 800d780:	00000000 	.word	0x00000000
 800d784:	bff00000 	.word	0xbff00000
 800d788:	00000000 	.word	0x00000000
 800d78c:	3ff00000 	.word	0x3ff00000
 800d790:	94a03595 	.word	0x94a03595
 800d794:	3fdfffff 	.word	0x3fdfffff
 800d798:	35afe535 	.word	0x35afe535
 800d79c:	3fe00000 	.word	0x3fe00000
 800d7a0:	000fffff 	.word	0x000fffff
 800d7a4:	7ff00000 	.word	0x7ff00000
 800d7a8:	7fefffff 	.word	0x7fefffff
 800d7ac:	3ff00000 	.word	0x3ff00000
 800d7b0:	3fe00000 	.word	0x3fe00000
 800d7b4:	7fe00000 	.word	0x7fe00000
 800d7b8:	7c9fffff 	.word	0x7c9fffff
 800d7bc:	9b08      	ldr	r3, [sp, #32]
 800d7be:	b323      	cbz	r3, 800d80a <_strtod_l+0xb5a>
 800d7c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d7c4:	d821      	bhi.n	800d80a <_strtod_l+0xb5a>
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	4639      	mov	r1, r7
 800d7ca:	a327      	add	r3, pc, #156	@ (adr r3, 800d868 <_strtod_l+0xbb8>)
 800d7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d0:	f7f3 f99e 	bl	8000b10 <__aeabi_dcmple>
 800d7d4:	b1a0      	cbz	r0, 800d800 <_strtod_l+0xb50>
 800d7d6:	4639      	mov	r1, r7
 800d7d8:	4630      	mov	r0, r6
 800d7da:	f7f3 f9f5 	bl	8000bc8 <__aeabi_d2uiz>
 800d7de:	2801      	cmp	r0, #1
 800d7e0:	bf38      	it	cc
 800d7e2:	2001      	movcc	r0, #1
 800d7e4:	f7f2 fe9e 	bl	8000524 <__aeabi_ui2d>
 800d7e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7ea:	4606      	mov	r6, r0
 800d7ec:	460f      	mov	r7, r1
 800d7ee:	b9fb      	cbnz	r3, 800d830 <_strtod_l+0xb80>
 800d7f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d7f4:	9014      	str	r0, [sp, #80]	@ 0x50
 800d7f6:	9315      	str	r3, [sp, #84]	@ 0x54
 800d7f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d7fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d800:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d802:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d806:	1b5b      	subs	r3, r3, r5
 800d808:	9311      	str	r3, [sp, #68]	@ 0x44
 800d80a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d80e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d812:	f7ff f8ed 	bl	800c9f0 <__ulp>
 800d816:	4650      	mov	r0, sl
 800d818:	4659      	mov	r1, fp
 800d81a:	ec53 2b10 	vmov	r2, r3, d0
 800d81e:	f7f2 fefb 	bl	8000618 <__aeabi_dmul>
 800d822:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d826:	f7f2 fd41 	bl	80002ac <__adddf3>
 800d82a:	4682      	mov	sl, r0
 800d82c:	468b      	mov	fp, r1
 800d82e:	e772      	b.n	800d716 <_strtod_l+0xa66>
 800d830:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d834:	e7e0      	b.n	800d7f8 <_strtod_l+0xb48>
 800d836:	a30e      	add	r3, pc, #56	@ (adr r3, 800d870 <_strtod_l+0xbc0>)
 800d838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83c:	f7f3 f95e 	bl	8000afc <__aeabi_dcmplt>
 800d840:	e79a      	b.n	800d778 <_strtod_l+0xac8>
 800d842:	2300      	movs	r3, #0
 800d844:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d846:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d848:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d84a:	6013      	str	r3, [r2, #0]
 800d84c:	f7ff ba6d 	b.w	800cd2a <_strtod_l+0x7a>
 800d850:	2a65      	cmp	r2, #101	@ 0x65
 800d852:	f43f ab67 	beq.w	800cf24 <_strtod_l+0x274>
 800d856:	2a45      	cmp	r2, #69	@ 0x45
 800d858:	f43f ab64 	beq.w	800cf24 <_strtod_l+0x274>
 800d85c:	2301      	movs	r3, #1
 800d85e:	f7ff bba0 	b.w	800cfa2 <_strtod_l+0x2f2>
 800d862:	bf00      	nop
 800d864:	f3af 8000 	nop.w
 800d868:	ffc00000 	.word	0xffc00000
 800d86c:	41dfffff 	.word	0x41dfffff
 800d870:	94a03595 	.word	0x94a03595
 800d874:	3fcfffff 	.word	0x3fcfffff

0800d878 <_strtod_r>:
 800d878:	4b01      	ldr	r3, [pc, #4]	@ (800d880 <_strtod_r+0x8>)
 800d87a:	f7ff ba19 	b.w	800ccb0 <_strtod_l>
 800d87e:	bf00      	nop
 800d880:	200000ac 	.word	0x200000ac

0800d884 <_strtol_l.constprop.0>:
 800d884:	2b24      	cmp	r3, #36	@ 0x24
 800d886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d88a:	4686      	mov	lr, r0
 800d88c:	4690      	mov	r8, r2
 800d88e:	d801      	bhi.n	800d894 <_strtol_l.constprop.0+0x10>
 800d890:	2b01      	cmp	r3, #1
 800d892:	d106      	bne.n	800d8a2 <_strtol_l.constprop.0+0x1e>
 800d894:	f7fd fe54 	bl	800b540 <__errno>
 800d898:	2316      	movs	r3, #22
 800d89a:	6003      	str	r3, [r0, #0]
 800d89c:	2000      	movs	r0, #0
 800d89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8a2:	460d      	mov	r5, r1
 800d8a4:	4833      	ldr	r0, [pc, #204]	@ (800d974 <_strtol_l.constprop.0+0xf0>)
 800d8a6:	462a      	mov	r2, r5
 800d8a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8ac:	5d06      	ldrb	r6, [r0, r4]
 800d8ae:	f016 0608 	ands.w	r6, r6, #8
 800d8b2:	d1f8      	bne.n	800d8a6 <_strtol_l.constprop.0+0x22>
 800d8b4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d8b6:	d12d      	bne.n	800d914 <_strtol_l.constprop.0+0x90>
 800d8b8:	782c      	ldrb	r4, [r5, #0]
 800d8ba:	2601      	movs	r6, #1
 800d8bc:	1c95      	adds	r5, r2, #2
 800d8be:	f033 0210 	bics.w	r2, r3, #16
 800d8c2:	d109      	bne.n	800d8d8 <_strtol_l.constprop.0+0x54>
 800d8c4:	2c30      	cmp	r4, #48	@ 0x30
 800d8c6:	d12a      	bne.n	800d91e <_strtol_l.constprop.0+0x9a>
 800d8c8:	782a      	ldrb	r2, [r5, #0]
 800d8ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d8ce:	2a58      	cmp	r2, #88	@ 0x58
 800d8d0:	d125      	bne.n	800d91e <_strtol_l.constprop.0+0x9a>
 800d8d2:	786c      	ldrb	r4, [r5, #1]
 800d8d4:	2310      	movs	r3, #16
 800d8d6:	3502      	adds	r5, #2
 800d8d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d8dc:	2200      	movs	r2, #0
 800d8de:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d8e2:	4610      	mov	r0, r2
 800d8e4:	fbbc f9f3 	udiv	r9, ip, r3
 800d8e8:	fb03 ca19 	mls	sl, r3, r9, ip
 800d8ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d8f0:	2f09      	cmp	r7, #9
 800d8f2:	d81b      	bhi.n	800d92c <_strtol_l.constprop.0+0xa8>
 800d8f4:	463c      	mov	r4, r7
 800d8f6:	42a3      	cmp	r3, r4
 800d8f8:	dd27      	ble.n	800d94a <_strtol_l.constprop.0+0xc6>
 800d8fa:	1c57      	adds	r7, r2, #1
 800d8fc:	d007      	beq.n	800d90e <_strtol_l.constprop.0+0x8a>
 800d8fe:	4581      	cmp	r9, r0
 800d900:	d320      	bcc.n	800d944 <_strtol_l.constprop.0+0xc0>
 800d902:	d101      	bne.n	800d908 <_strtol_l.constprop.0+0x84>
 800d904:	45a2      	cmp	sl, r4
 800d906:	db1d      	blt.n	800d944 <_strtol_l.constprop.0+0xc0>
 800d908:	fb00 4003 	mla	r0, r0, r3, r4
 800d90c:	2201      	movs	r2, #1
 800d90e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d912:	e7eb      	b.n	800d8ec <_strtol_l.constprop.0+0x68>
 800d914:	2c2b      	cmp	r4, #43	@ 0x2b
 800d916:	bf04      	itt	eq
 800d918:	782c      	ldrbeq	r4, [r5, #0]
 800d91a:	1c95      	addeq	r5, r2, #2
 800d91c:	e7cf      	b.n	800d8be <_strtol_l.constprop.0+0x3a>
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d1da      	bne.n	800d8d8 <_strtol_l.constprop.0+0x54>
 800d922:	2c30      	cmp	r4, #48	@ 0x30
 800d924:	bf0c      	ite	eq
 800d926:	2308      	moveq	r3, #8
 800d928:	230a      	movne	r3, #10
 800d92a:	e7d5      	b.n	800d8d8 <_strtol_l.constprop.0+0x54>
 800d92c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d930:	2f19      	cmp	r7, #25
 800d932:	d801      	bhi.n	800d938 <_strtol_l.constprop.0+0xb4>
 800d934:	3c37      	subs	r4, #55	@ 0x37
 800d936:	e7de      	b.n	800d8f6 <_strtol_l.constprop.0+0x72>
 800d938:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d93c:	2f19      	cmp	r7, #25
 800d93e:	d804      	bhi.n	800d94a <_strtol_l.constprop.0+0xc6>
 800d940:	3c57      	subs	r4, #87	@ 0x57
 800d942:	e7d8      	b.n	800d8f6 <_strtol_l.constprop.0+0x72>
 800d944:	f04f 32ff 	mov.w	r2, #4294967295
 800d948:	e7e1      	b.n	800d90e <_strtol_l.constprop.0+0x8a>
 800d94a:	1c53      	adds	r3, r2, #1
 800d94c:	d108      	bne.n	800d960 <_strtol_l.constprop.0+0xdc>
 800d94e:	2322      	movs	r3, #34	@ 0x22
 800d950:	4660      	mov	r0, ip
 800d952:	f8ce 3000 	str.w	r3, [lr]
 800d956:	f1b8 0f00 	cmp.w	r8, #0
 800d95a:	d0a0      	beq.n	800d89e <_strtol_l.constprop.0+0x1a>
 800d95c:	1e69      	subs	r1, r5, #1
 800d95e:	e006      	b.n	800d96e <_strtol_l.constprop.0+0xea>
 800d960:	b106      	cbz	r6, 800d964 <_strtol_l.constprop.0+0xe0>
 800d962:	4240      	negs	r0, r0
 800d964:	f1b8 0f00 	cmp.w	r8, #0
 800d968:	d099      	beq.n	800d89e <_strtol_l.constprop.0+0x1a>
 800d96a:	2a00      	cmp	r2, #0
 800d96c:	d1f6      	bne.n	800d95c <_strtol_l.constprop.0+0xd8>
 800d96e:	f8c8 1000 	str.w	r1, [r8]
 800d972:	e794      	b.n	800d89e <_strtol_l.constprop.0+0x1a>
 800d974:	0800ee91 	.word	0x0800ee91

0800d978 <_strtol_r>:
 800d978:	f7ff bf84 	b.w	800d884 <_strtol_l.constprop.0>

0800d97c <__ssputs_r>:
 800d97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d980:	461f      	mov	r7, r3
 800d982:	688e      	ldr	r6, [r1, #8]
 800d984:	4682      	mov	sl, r0
 800d986:	460c      	mov	r4, r1
 800d988:	42be      	cmp	r6, r7
 800d98a:	4690      	mov	r8, r2
 800d98c:	680b      	ldr	r3, [r1, #0]
 800d98e:	d82d      	bhi.n	800d9ec <__ssputs_r+0x70>
 800d990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d994:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d998:	d026      	beq.n	800d9e8 <__ssputs_r+0x6c>
 800d99a:	6965      	ldr	r5, [r4, #20]
 800d99c:	6909      	ldr	r1, [r1, #16]
 800d99e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9a2:	eba3 0901 	sub.w	r9, r3, r1
 800d9a6:	1c7b      	adds	r3, r7, #1
 800d9a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9ac:	444b      	add	r3, r9
 800d9ae:	106d      	asrs	r5, r5, #1
 800d9b0:	429d      	cmp	r5, r3
 800d9b2:	bf38      	it	cc
 800d9b4:	461d      	movcc	r5, r3
 800d9b6:	0553      	lsls	r3, r2, #21
 800d9b8:	d527      	bpl.n	800da0a <__ssputs_r+0x8e>
 800d9ba:	4629      	mov	r1, r5
 800d9bc:	f7fc fc3c 	bl	800a238 <_malloc_r>
 800d9c0:	4606      	mov	r6, r0
 800d9c2:	b360      	cbz	r0, 800da1e <__ssputs_r+0xa2>
 800d9c4:	464a      	mov	r2, r9
 800d9c6:	6921      	ldr	r1, [r4, #16]
 800d9c8:	f000 fbce 	bl	800e168 <memcpy>
 800d9cc:	89a3      	ldrh	r3, [r4, #12]
 800d9ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d9d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9d6:	81a3      	strh	r3, [r4, #12]
 800d9d8:	6126      	str	r6, [r4, #16]
 800d9da:	444e      	add	r6, r9
 800d9dc:	6165      	str	r5, [r4, #20]
 800d9de:	eba5 0509 	sub.w	r5, r5, r9
 800d9e2:	6026      	str	r6, [r4, #0]
 800d9e4:	463e      	mov	r6, r7
 800d9e6:	60a5      	str	r5, [r4, #8]
 800d9e8:	42be      	cmp	r6, r7
 800d9ea:	d900      	bls.n	800d9ee <__ssputs_r+0x72>
 800d9ec:	463e      	mov	r6, r7
 800d9ee:	4632      	mov	r2, r6
 800d9f0:	4641      	mov	r1, r8
 800d9f2:	6820      	ldr	r0, [r4, #0]
 800d9f4:	f000 fb69 	bl	800e0ca <memmove>
 800d9f8:	68a3      	ldr	r3, [r4, #8]
 800d9fa:	2000      	movs	r0, #0
 800d9fc:	1b9b      	subs	r3, r3, r6
 800d9fe:	60a3      	str	r3, [r4, #8]
 800da00:	6823      	ldr	r3, [r4, #0]
 800da02:	4433      	add	r3, r6
 800da04:	6023      	str	r3, [r4, #0]
 800da06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da0a:	462a      	mov	r2, r5
 800da0c:	f000 ff3d 	bl	800e88a <_realloc_r>
 800da10:	4606      	mov	r6, r0
 800da12:	2800      	cmp	r0, #0
 800da14:	d1e0      	bne.n	800d9d8 <__ssputs_r+0x5c>
 800da16:	6921      	ldr	r1, [r4, #16]
 800da18:	4650      	mov	r0, sl
 800da1a:	f7fe fc25 	bl	800c268 <_free_r>
 800da1e:	230c      	movs	r3, #12
 800da20:	f04f 30ff 	mov.w	r0, #4294967295
 800da24:	f8ca 3000 	str.w	r3, [sl]
 800da28:	89a3      	ldrh	r3, [r4, #12]
 800da2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da2e:	81a3      	strh	r3, [r4, #12]
 800da30:	e7e9      	b.n	800da06 <__ssputs_r+0x8a>
	...

0800da34 <_svfiprintf_r>:
 800da34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da38:	4698      	mov	r8, r3
 800da3a:	898b      	ldrh	r3, [r1, #12]
 800da3c:	b09d      	sub	sp, #116	@ 0x74
 800da3e:	4607      	mov	r7, r0
 800da40:	061b      	lsls	r3, r3, #24
 800da42:	460d      	mov	r5, r1
 800da44:	4614      	mov	r4, r2
 800da46:	d510      	bpl.n	800da6a <_svfiprintf_r+0x36>
 800da48:	690b      	ldr	r3, [r1, #16]
 800da4a:	b973      	cbnz	r3, 800da6a <_svfiprintf_r+0x36>
 800da4c:	2140      	movs	r1, #64	@ 0x40
 800da4e:	f7fc fbf3 	bl	800a238 <_malloc_r>
 800da52:	6028      	str	r0, [r5, #0]
 800da54:	6128      	str	r0, [r5, #16]
 800da56:	b930      	cbnz	r0, 800da66 <_svfiprintf_r+0x32>
 800da58:	230c      	movs	r3, #12
 800da5a:	603b      	str	r3, [r7, #0]
 800da5c:	f04f 30ff 	mov.w	r0, #4294967295
 800da60:	b01d      	add	sp, #116	@ 0x74
 800da62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da66:	2340      	movs	r3, #64	@ 0x40
 800da68:	616b      	str	r3, [r5, #20]
 800da6a:	2300      	movs	r3, #0
 800da6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800da70:	f04f 0901 	mov.w	r9, #1
 800da74:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800dc18 <_svfiprintf_r+0x1e4>
 800da78:	9309      	str	r3, [sp, #36]	@ 0x24
 800da7a:	2320      	movs	r3, #32
 800da7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da80:	2330      	movs	r3, #48	@ 0x30
 800da82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da86:	4623      	mov	r3, r4
 800da88:	469a      	mov	sl, r3
 800da8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da8e:	b10a      	cbz	r2, 800da94 <_svfiprintf_r+0x60>
 800da90:	2a25      	cmp	r2, #37	@ 0x25
 800da92:	d1f9      	bne.n	800da88 <_svfiprintf_r+0x54>
 800da94:	ebba 0b04 	subs.w	fp, sl, r4
 800da98:	d00b      	beq.n	800dab2 <_svfiprintf_r+0x7e>
 800da9a:	465b      	mov	r3, fp
 800da9c:	4622      	mov	r2, r4
 800da9e:	4629      	mov	r1, r5
 800daa0:	4638      	mov	r0, r7
 800daa2:	f7ff ff6b 	bl	800d97c <__ssputs_r>
 800daa6:	3001      	adds	r0, #1
 800daa8:	f000 80a7 	beq.w	800dbfa <_svfiprintf_r+0x1c6>
 800daac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800daae:	445a      	add	r2, fp
 800dab0:	9209      	str	r2, [sp, #36]	@ 0x24
 800dab2:	f89a 3000 	ldrb.w	r3, [sl]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	f000 809f 	beq.w	800dbfa <_svfiprintf_r+0x1c6>
 800dabc:	2300      	movs	r3, #0
 800dabe:	f04f 32ff 	mov.w	r2, #4294967295
 800dac2:	f10a 0a01 	add.w	sl, sl, #1
 800dac6:	9304      	str	r3, [sp, #16]
 800dac8:	9307      	str	r3, [sp, #28]
 800daca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dace:	931a      	str	r3, [sp, #104]	@ 0x68
 800dad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dad4:	4654      	mov	r4, sl
 800dad6:	2205      	movs	r2, #5
 800dad8:	484f      	ldr	r0, [pc, #316]	@ (800dc18 <_svfiprintf_r+0x1e4>)
 800dada:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dade:	f7fd fd5c 	bl	800b59a <memchr>
 800dae2:	9a04      	ldr	r2, [sp, #16]
 800dae4:	b9d8      	cbnz	r0, 800db1e <_svfiprintf_r+0xea>
 800dae6:	06d0      	lsls	r0, r2, #27
 800dae8:	bf44      	itt	mi
 800daea:	2320      	movmi	r3, #32
 800daec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800daf0:	0711      	lsls	r1, r2, #28
 800daf2:	bf44      	itt	mi
 800daf4:	232b      	movmi	r3, #43	@ 0x2b
 800daf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dafa:	f89a 3000 	ldrb.w	r3, [sl]
 800dafe:	2b2a      	cmp	r3, #42	@ 0x2a
 800db00:	d015      	beq.n	800db2e <_svfiprintf_r+0xfa>
 800db02:	9a07      	ldr	r2, [sp, #28]
 800db04:	4654      	mov	r4, sl
 800db06:	2000      	movs	r0, #0
 800db08:	f04f 0c0a 	mov.w	ip, #10
 800db0c:	4621      	mov	r1, r4
 800db0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db12:	3b30      	subs	r3, #48	@ 0x30
 800db14:	2b09      	cmp	r3, #9
 800db16:	d94b      	bls.n	800dbb0 <_svfiprintf_r+0x17c>
 800db18:	b1b0      	cbz	r0, 800db48 <_svfiprintf_r+0x114>
 800db1a:	9207      	str	r2, [sp, #28]
 800db1c:	e014      	b.n	800db48 <_svfiprintf_r+0x114>
 800db1e:	eba0 0308 	sub.w	r3, r0, r8
 800db22:	46a2      	mov	sl, r4
 800db24:	fa09 f303 	lsl.w	r3, r9, r3
 800db28:	4313      	orrs	r3, r2
 800db2a:	9304      	str	r3, [sp, #16]
 800db2c:	e7d2      	b.n	800dad4 <_svfiprintf_r+0xa0>
 800db2e:	9b03      	ldr	r3, [sp, #12]
 800db30:	1d19      	adds	r1, r3, #4
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	9103      	str	r1, [sp, #12]
 800db38:	bfbb      	ittet	lt
 800db3a:	425b      	neglt	r3, r3
 800db3c:	f042 0202 	orrlt.w	r2, r2, #2
 800db40:	9307      	strge	r3, [sp, #28]
 800db42:	9307      	strlt	r3, [sp, #28]
 800db44:	bfb8      	it	lt
 800db46:	9204      	strlt	r2, [sp, #16]
 800db48:	7823      	ldrb	r3, [r4, #0]
 800db4a:	2b2e      	cmp	r3, #46	@ 0x2e
 800db4c:	d10a      	bne.n	800db64 <_svfiprintf_r+0x130>
 800db4e:	7863      	ldrb	r3, [r4, #1]
 800db50:	2b2a      	cmp	r3, #42	@ 0x2a
 800db52:	d132      	bne.n	800dbba <_svfiprintf_r+0x186>
 800db54:	9b03      	ldr	r3, [sp, #12]
 800db56:	3402      	adds	r4, #2
 800db58:	1d1a      	adds	r2, r3, #4
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db60:	9203      	str	r2, [sp, #12]
 800db62:	9305      	str	r3, [sp, #20]
 800db64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dc28 <_svfiprintf_r+0x1f4>
 800db68:	2203      	movs	r2, #3
 800db6a:	7821      	ldrb	r1, [r4, #0]
 800db6c:	4650      	mov	r0, sl
 800db6e:	f7fd fd14 	bl	800b59a <memchr>
 800db72:	b138      	cbz	r0, 800db84 <_svfiprintf_r+0x150>
 800db74:	eba0 000a 	sub.w	r0, r0, sl
 800db78:	2240      	movs	r2, #64	@ 0x40
 800db7a:	9b04      	ldr	r3, [sp, #16]
 800db7c:	3401      	adds	r4, #1
 800db7e:	4082      	lsls	r2, r0
 800db80:	4313      	orrs	r3, r2
 800db82:	9304      	str	r3, [sp, #16]
 800db84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db88:	2206      	movs	r2, #6
 800db8a:	4824      	ldr	r0, [pc, #144]	@ (800dc1c <_svfiprintf_r+0x1e8>)
 800db8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db90:	f7fd fd03 	bl	800b59a <memchr>
 800db94:	2800      	cmp	r0, #0
 800db96:	d036      	beq.n	800dc06 <_svfiprintf_r+0x1d2>
 800db98:	4b21      	ldr	r3, [pc, #132]	@ (800dc20 <_svfiprintf_r+0x1ec>)
 800db9a:	bb1b      	cbnz	r3, 800dbe4 <_svfiprintf_r+0x1b0>
 800db9c:	9b03      	ldr	r3, [sp, #12]
 800db9e:	3307      	adds	r3, #7
 800dba0:	f023 0307 	bic.w	r3, r3, #7
 800dba4:	3308      	adds	r3, #8
 800dba6:	9303      	str	r3, [sp, #12]
 800dba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbaa:	4433      	add	r3, r6
 800dbac:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbae:	e76a      	b.n	800da86 <_svfiprintf_r+0x52>
 800dbb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbb4:	460c      	mov	r4, r1
 800dbb6:	2001      	movs	r0, #1
 800dbb8:	e7a8      	b.n	800db0c <_svfiprintf_r+0xd8>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	3401      	adds	r4, #1
 800dbbe:	f04f 0c0a 	mov.w	ip, #10
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	9305      	str	r3, [sp, #20]
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbcc:	3a30      	subs	r2, #48	@ 0x30
 800dbce:	2a09      	cmp	r2, #9
 800dbd0:	d903      	bls.n	800dbda <_svfiprintf_r+0x1a6>
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d0c6      	beq.n	800db64 <_svfiprintf_r+0x130>
 800dbd6:	9105      	str	r1, [sp, #20]
 800dbd8:	e7c4      	b.n	800db64 <_svfiprintf_r+0x130>
 800dbda:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbde:	4604      	mov	r4, r0
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	e7f0      	b.n	800dbc6 <_svfiprintf_r+0x192>
 800dbe4:	ab03      	add	r3, sp, #12
 800dbe6:	462a      	mov	r2, r5
 800dbe8:	a904      	add	r1, sp, #16
 800dbea:	4638      	mov	r0, r7
 800dbec:	9300      	str	r3, [sp, #0]
 800dbee:	4b0d      	ldr	r3, [pc, #52]	@ (800dc24 <_svfiprintf_r+0x1f0>)
 800dbf0:	f7fc fc4c 	bl	800a48c <_printf_float>
 800dbf4:	1c42      	adds	r2, r0, #1
 800dbf6:	4606      	mov	r6, r0
 800dbf8:	d1d6      	bne.n	800dba8 <_svfiprintf_r+0x174>
 800dbfa:	89ab      	ldrh	r3, [r5, #12]
 800dbfc:	065b      	lsls	r3, r3, #25
 800dbfe:	f53f af2d 	bmi.w	800da5c <_svfiprintf_r+0x28>
 800dc02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc04:	e72c      	b.n	800da60 <_svfiprintf_r+0x2c>
 800dc06:	ab03      	add	r3, sp, #12
 800dc08:	462a      	mov	r2, r5
 800dc0a:	a904      	add	r1, sp, #16
 800dc0c:	4638      	mov	r0, r7
 800dc0e:	9300      	str	r3, [sp, #0]
 800dc10:	4b04      	ldr	r3, [pc, #16]	@ (800dc24 <_svfiprintf_r+0x1f0>)
 800dc12:	f7fc fed7 	bl	800a9c4 <_printf_i>
 800dc16:	e7ed      	b.n	800dbf4 <_svfiprintf_r+0x1c0>
 800dc18:	0800ef91 	.word	0x0800ef91
 800dc1c:	0800ef9b 	.word	0x0800ef9b
 800dc20:	0800a48d 	.word	0x0800a48d
 800dc24:	0800d97d 	.word	0x0800d97d
 800dc28:	0800ef97 	.word	0x0800ef97

0800dc2c <__sfputc_r>:
 800dc2c:	6893      	ldr	r3, [r2, #8]
 800dc2e:	3b01      	subs	r3, #1
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	6093      	str	r3, [r2, #8]
 800dc34:	b410      	push	{r4}
 800dc36:	da08      	bge.n	800dc4a <__sfputc_r+0x1e>
 800dc38:	6994      	ldr	r4, [r2, #24]
 800dc3a:	42a3      	cmp	r3, r4
 800dc3c:	db01      	blt.n	800dc42 <__sfputc_r+0x16>
 800dc3e:	290a      	cmp	r1, #10
 800dc40:	d103      	bne.n	800dc4a <__sfputc_r+0x1e>
 800dc42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc46:	f7fd bb84 	b.w	800b352 <__swbuf_r>
 800dc4a:	6813      	ldr	r3, [r2, #0]
 800dc4c:	1c58      	adds	r0, r3, #1
 800dc4e:	6010      	str	r0, [r2, #0]
 800dc50:	4608      	mov	r0, r1
 800dc52:	7019      	strb	r1, [r3, #0]
 800dc54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc58:	4770      	bx	lr

0800dc5a <__sfputs_r>:
 800dc5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc5c:	4606      	mov	r6, r0
 800dc5e:	460f      	mov	r7, r1
 800dc60:	4614      	mov	r4, r2
 800dc62:	18d5      	adds	r5, r2, r3
 800dc64:	42ac      	cmp	r4, r5
 800dc66:	d101      	bne.n	800dc6c <__sfputs_r+0x12>
 800dc68:	2000      	movs	r0, #0
 800dc6a:	e007      	b.n	800dc7c <__sfputs_r+0x22>
 800dc6c:	463a      	mov	r2, r7
 800dc6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc72:	4630      	mov	r0, r6
 800dc74:	f7ff ffda 	bl	800dc2c <__sfputc_r>
 800dc78:	1c43      	adds	r3, r0, #1
 800dc7a:	d1f3      	bne.n	800dc64 <__sfputs_r+0xa>
 800dc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc80 <_vfiprintf_r>:
 800dc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc84:	460d      	mov	r5, r1
 800dc86:	b09d      	sub	sp, #116	@ 0x74
 800dc88:	4614      	mov	r4, r2
 800dc8a:	4698      	mov	r8, r3
 800dc8c:	4606      	mov	r6, r0
 800dc8e:	b118      	cbz	r0, 800dc98 <_vfiprintf_r+0x18>
 800dc90:	6a03      	ldr	r3, [r0, #32]
 800dc92:	b90b      	cbnz	r3, 800dc98 <_vfiprintf_r+0x18>
 800dc94:	f7fd fa54 	bl	800b140 <__sinit>
 800dc98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc9a:	07d9      	lsls	r1, r3, #31
 800dc9c:	d405      	bmi.n	800dcaa <_vfiprintf_r+0x2a>
 800dc9e:	89ab      	ldrh	r3, [r5, #12]
 800dca0:	059a      	lsls	r2, r3, #22
 800dca2:	d402      	bmi.n	800dcaa <_vfiprintf_r+0x2a>
 800dca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dca6:	f7fd fc76 	bl	800b596 <__retarget_lock_acquire_recursive>
 800dcaa:	89ab      	ldrh	r3, [r5, #12]
 800dcac:	071b      	lsls	r3, r3, #28
 800dcae:	d501      	bpl.n	800dcb4 <_vfiprintf_r+0x34>
 800dcb0:	692b      	ldr	r3, [r5, #16]
 800dcb2:	b99b      	cbnz	r3, 800dcdc <_vfiprintf_r+0x5c>
 800dcb4:	4629      	mov	r1, r5
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	f7fd fb8a 	bl	800b3d0 <__swsetup_r>
 800dcbc:	b170      	cbz	r0, 800dcdc <_vfiprintf_r+0x5c>
 800dcbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcc0:	07dc      	lsls	r4, r3, #31
 800dcc2:	d504      	bpl.n	800dcce <_vfiprintf_r+0x4e>
 800dcc4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc8:	b01d      	add	sp, #116	@ 0x74
 800dcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcce:	89ab      	ldrh	r3, [r5, #12]
 800dcd0:	0598      	lsls	r0, r3, #22
 800dcd2:	d4f7      	bmi.n	800dcc4 <_vfiprintf_r+0x44>
 800dcd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcd6:	f7fd fc5f 	bl	800b598 <__retarget_lock_release_recursive>
 800dcda:	e7f3      	b.n	800dcc4 <_vfiprintf_r+0x44>
 800dcdc:	2300      	movs	r3, #0
 800dcde:	f8cd 800c 	str.w	r8, [sp, #12]
 800dce2:	f04f 0901 	mov.w	r9, #1
 800dce6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800de9c <_vfiprintf_r+0x21c>
 800dcea:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcec:	2320      	movs	r3, #32
 800dcee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dcf2:	2330      	movs	r3, #48	@ 0x30
 800dcf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dcf8:	4623      	mov	r3, r4
 800dcfa:	469a      	mov	sl, r3
 800dcfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd00:	b10a      	cbz	r2, 800dd06 <_vfiprintf_r+0x86>
 800dd02:	2a25      	cmp	r2, #37	@ 0x25
 800dd04:	d1f9      	bne.n	800dcfa <_vfiprintf_r+0x7a>
 800dd06:	ebba 0b04 	subs.w	fp, sl, r4
 800dd0a:	d00b      	beq.n	800dd24 <_vfiprintf_r+0xa4>
 800dd0c:	465b      	mov	r3, fp
 800dd0e:	4622      	mov	r2, r4
 800dd10:	4629      	mov	r1, r5
 800dd12:	4630      	mov	r0, r6
 800dd14:	f7ff ffa1 	bl	800dc5a <__sfputs_r>
 800dd18:	3001      	adds	r0, #1
 800dd1a:	f000 80a7 	beq.w	800de6c <_vfiprintf_r+0x1ec>
 800dd1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd20:	445a      	add	r2, fp
 800dd22:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd24:	f89a 3000 	ldrb.w	r3, [sl]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	f000 809f 	beq.w	800de6c <_vfiprintf_r+0x1ec>
 800dd2e:	2300      	movs	r3, #0
 800dd30:	f04f 32ff 	mov.w	r2, #4294967295
 800dd34:	f10a 0a01 	add.w	sl, sl, #1
 800dd38:	9304      	str	r3, [sp, #16]
 800dd3a:	9307      	str	r3, [sp, #28]
 800dd3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd40:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd46:	4654      	mov	r4, sl
 800dd48:	2205      	movs	r2, #5
 800dd4a:	4854      	ldr	r0, [pc, #336]	@ (800de9c <_vfiprintf_r+0x21c>)
 800dd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd50:	f7fd fc23 	bl	800b59a <memchr>
 800dd54:	9a04      	ldr	r2, [sp, #16]
 800dd56:	b9d8      	cbnz	r0, 800dd90 <_vfiprintf_r+0x110>
 800dd58:	06d1      	lsls	r1, r2, #27
 800dd5a:	bf44      	itt	mi
 800dd5c:	2320      	movmi	r3, #32
 800dd5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd62:	0713      	lsls	r3, r2, #28
 800dd64:	bf44      	itt	mi
 800dd66:	232b      	movmi	r3, #43	@ 0x2b
 800dd68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd6c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd70:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd72:	d015      	beq.n	800dda0 <_vfiprintf_r+0x120>
 800dd74:	9a07      	ldr	r2, [sp, #28]
 800dd76:	4654      	mov	r4, sl
 800dd78:	2000      	movs	r0, #0
 800dd7a:	f04f 0c0a 	mov.w	ip, #10
 800dd7e:	4621      	mov	r1, r4
 800dd80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd84:	3b30      	subs	r3, #48	@ 0x30
 800dd86:	2b09      	cmp	r3, #9
 800dd88:	d94b      	bls.n	800de22 <_vfiprintf_r+0x1a2>
 800dd8a:	b1b0      	cbz	r0, 800ddba <_vfiprintf_r+0x13a>
 800dd8c:	9207      	str	r2, [sp, #28]
 800dd8e:	e014      	b.n	800ddba <_vfiprintf_r+0x13a>
 800dd90:	eba0 0308 	sub.w	r3, r0, r8
 800dd94:	46a2      	mov	sl, r4
 800dd96:	fa09 f303 	lsl.w	r3, r9, r3
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	9304      	str	r3, [sp, #16]
 800dd9e:	e7d2      	b.n	800dd46 <_vfiprintf_r+0xc6>
 800dda0:	9b03      	ldr	r3, [sp, #12]
 800dda2:	1d19      	adds	r1, r3, #4
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	9103      	str	r1, [sp, #12]
 800ddaa:	bfbb      	ittet	lt
 800ddac:	425b      	neglt	r3, r3
 800ddae:	f042 0202 	orrlt.w	r2, r2, #2
 800ddb2:	9307      	strge	r3, [sp, #28]
 800ddb4:	9307      	strlt	r3, [sp, #28]
 800ddb6:	bfb8      	it	lt
 800ddb8:	9204      	strlt	r2, [sp, #16]
 800ddba:	7823      	ldrb	r3, [r4, #0]
 800ddbc:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddbe:	d10a      	bne.n	800ddd6 <_vfiprintf_r+0x156>
 800ddc0:	7863      	ldrb	r3, [r4, #1]
 800ddc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddc4:	d132      	bne.n	800de2c <_vfiprintf_r+0x1ac>
 800ddc6:	9b03      	ldr	r3, [sp, #12]
 800ddc8:	3402      	adds	r4, #2
 800ddca:	1d1a      	adds	r2, r3, #4
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ddd2:	9203      	str	r2, [sp, #12]
 800ddd4:	9305      	str	r3, [sp, #20]
 800ddd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800deac <_vfiprintf_r+0x22c>
 800ddda:	2203      	movs	r2, #3
 800dddc:	7821      	ldrb	r1, [r4, #0]
 800ddde:	4650      	mov	r0, sl
 800dde0:	f7fd fbdb 	bl	800b59a <memchr>
 800dde4:	b138      	cbz	r0, 800ddf6 <_vfiprintf_r+0x176>
 800dde6:	eba0 000a 	sub.w	r0, r0, sl
 800ddea:	2240      	movs	r2, #64	@ 0x40
 800ddec:	9b04      	ldr	r3, [sp, #16]
 800ddee:	3401      	adds	r4, #1
 800ddf0:	4082      	lsls	r2, r0
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	9304      	str	r3, [sp, #16]
 800ddf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddfa:	2206      	movs	r2, #6
 800ddfc:	4828      	ldr	r0, [pc, #160]	@ (800dea0 <_vfiprintf_r+0x220>)
 800ddfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de02:	f7fd fbca 	bl	800b59a <memchr>
 800de06:	2800      	cmp	r0, #0
 800de08:	d03f      	beq.n	800de8a <_vfiprintf_r+0x20a>
 800de0a:	4b26      	ldr	r3, [pc, #152]	@ (800dea4 <_vfiprintf_r+0x224>)
 800de0c:	bb1b      	cbnz	r3, 800de56 <_vfiprintf_r+0x1d6>
 800de0e:	9b03      	ldr	r3, [sp, #12]
 800de10:	3307      	adds	r3, #7
 800de12:	f023 0307 	bic.w	r3, r3, #7
 800de16:	3308      	adds	r3, #8
 800de18:	9303      	str	r3, [sp, #12]
 800de1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de1c:	443b      	add	r3, r7
 800de1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800de20:	e76a      	b.n	800dcf8 <_vfiprintf_r+0x78>
 800de22:	fb0c 3202 	mla	r2, ip, r2, r3
 800de26:	460c      	mov	r4, r1
 800de28:	2001      	movs	r0, #1
 800de2a:	e7a8      	b.n	800dd7e <_vfiprintf_r+0xfe>
 800de2c:	2300      	movs	r3, #0
 800de2e:	3401      	adds	r4, #1
 800de30:	f04f 0c0a 	mov.w	ip, #10
 800de34:	4619      	mov	r1, r3
 800de36:	9305      	str	r3, [sp, #20]
 800de38:	4620      	mov	r0, r4
 800de3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de3e:	3a30      	subs	r2, #48	@ 0x30
 800de40:	2a09      	cmp	r2, #9
 800de42:	d903      	bls.n	800de4c <_vfiprintf_r+0x1cc>
 800de44:	2b00      	cmp	r3, #0
 800de46:	d0c6      	beq.n	800ddd6 <_vfiprintf_r+0x156>
 800de48:	9105      	str	r1, [sp, #20]
 800de4a:	e7c4      	b.n	800ddd6 <_vfiprintf_r+0x156>
 800de4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800de50:	4604      	mov	r4, r0
 800de52:	2301      	movs	r3, #1
 800de54:	e7f0      	b.n	800de38 <_vfiprintf_r+0x1b8>
 800de56:	ab03      	add	r3, sp, #12
 800de58:	462a      	mov	r2, r5
 800de5a:	a904      	add	r1, sp, #16
 800de5c:	4630      	mov	r0, r6
 800de5e:	9300      	str	r3, [sp, #0]
 800de60:	4b11      	ldr	r3, [pc, #68]	@ (800dea8 <_vfiprintf_r+0x228>)
 800de62:	f7fc fb13 	bl	800a48c <_printf_float>
 800de66:	4607      	mov	r7, r0
 800de68:	1c78      	adds	r0, r7, #1
 800de6a:	d1d6      	bne.n	800de1a <_vfiprintf_r+0x19a>
 800de6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de6e:	07d9      	lsls	r1, r3, #31
 800de70:	d405      	bmi.n	800de7e <_vfiprintf_r+0x1fe>
 800de72:	89ab      	ldrh	r3, [r5, #12]
 800de74:	059a      	lsls	r2, r3, #22
 800de76:	d402      	bmi.n	800de7e <_vfiprintf_r+0x1fe>
 800de78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de7a:	f7fd fb8d 	bl	800b598 <__retarget_lock_release_recursive>
 800de7e:	89ab      	ldrh	r3, [r5, #12]
 800de80:	065b      	lsls	r3, r3, #25
 800de82:	f53f af1f 	bmi.w	800dcc4 <_vfiprintf_r+0x44>
 800de86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de88:	e71e      	b.n	800dcc8 <_vfiprintf_r+0x48>
 800de8a:	ab03      	add	r3, sp, #12
 800de8c:	462a      	mov	r2, r5
 800de8e:	a904      	add	r1, sp, #16
 800de90:	4630      	mov	r0, r6
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	4b04      	ldr	r3, [pc, #16]	@ (800dea8 <_vfiprintf_r+0x228>)
 800de96:	f7fc fd95 	bl	800a9c4 <_printf_i>
 800de9a:	e7e4      	b.n	800de66 <_vfiprintf_r+0x1e6>
 800de9c:	0800ef91 	.word	0x0800ef91
 800dea0:	0800ef9b 	.word	0x0800ef9b
 800dea4:	0800a48d 	.word	0x0800a48d
 800dea8:	0800dc5b 	.word	0x0800dc5b
 800deac:	0800ef97 	.word	0x0800ef97

0800deb0 <__sflush_r>:
 800deb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800deb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb8:	0716      	lsls	r6, r2, #28
 800deba:	4605      	mov	r5, r0
 800debc:	460c      	mov	r4, r1
 800debe:	d454      	bmi.n	800df6a <__sflush_r+0xba>
 800dec0:	684b      	ldr	r3, [r1, #4]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	dc02      	bgt.n	800decc <__sflush_r+0x1c>
 800dec6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dec8:	2b00      	cmp	r3, #0
 800deca:	dd48      	ble.n	800df5e <__sflush_r+0xae>
 800decc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dece:	2e00      	cmp	r6, #0
 800ded0:	d045      	beq.n	800df5e <__sflush_r+0xae>
 800ded2:	2300      	movs	r3, #0
 800ded4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ded8:	682f      	ldr	r7, [r5, #0]
 800deda:	6a21      	ldr	r1, [r4, #32]
 800dedc:	602b      	str	r3, [r5, #0]
 800dede:	d030      	beq.n	800df42 <__sflush_r+0x92>
 800dee0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dee2:	89a3      	ldrh	r3, [r4, #12]
 800dee4:	0759      	lsls	r1, r3, #29
 800dee6:	d505      	bpl.n	800def4 <__sflush_r+0x44>
 800dee8:	6863      	ldr	r3, [r4, #4]
 800deea:	1ad2      	subs	r2, r2, r3
 800deec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800deee:	b10b      	cbz	r3, 800def4 <__sflush_r+0x44>
 800def0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800def2:	1ad2      	subs	r2, r2, r3
 800def4:	2300      	movs	r3, #0
 800def6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800def8:	6a21      	ldr	r1, [r4, #32]
 800defa:	4628      	mov	r0, r5
 800defc:	47b0      	blx	r6
 800defe:	1c43      	adds	r3, r0, #1
 800df00:	89a3      	ldrh	r3, [r4, #12]
 800df02:	d106      	bne.n	800df12 <__sflush_r+0x62>
 800df04:	6829      	ldr	r1, [r5, #0]
 800df06:	291d      	cmp	r1, #29
 800df08:	d82b      	bhi.n	800df62 <__sflush_r+0xb2>
 800df0a:	4a2a      	ldr	r2, [pc, #168]	@ (800dfb4 <__sflush_r+0x104>)
 800df0c:	410a      	asrs	r2, r1
 800df0e:	07d6      	lsls	r6, r2, #31
 800df10:	d427      	bmi.n	800df62 <__sflush_r+0xb2>
 800df12:	2200      	movs	r2, #0
 800df14:	04d9      	lsls	r1, r3, #19
 800df16:	6062      	str	r2, [r4, #4]
 800df18:	6922      	ldr	r2, [r4, #16]
 800df1a:	6022      	str	r2, [r4, #0]
 800df1c:	d504      	bpl.n	800df28 <__sflush_r+0x78>
 800df1e:	1c42      	adds	r2, r0, #1
 800df20:	d101      	bne.n	800df26 <__sflush_r+0x76>
 800df22:	682b      	ldr	r3, [r5, #0]
 800df24:	b903      	cbnz	r3, 800df28 <__sflush_r+0x78>
 800df26:	6560      	str	r0, [r4, #84]	@ 0x54
 800df28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df2a:	602f      	str	r7, [r5, #0]
 800df2c:	b1b9      	cbz	r1, 800df5e <__sflush_r+0xae>
 800df2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df32:	4299      	cmp	r1, r3
 800df34:	d002      	beq.n	800df3c <__sflush_r+0x8c>
 800df36:	4628      	mov	r0, r5
 800df38:	f7fe f996 	bl	800c268 <_free_r>
 800df3c:	2300      	movs	r3, #0
 800df3e:	6363      	str	r3, [r4, #52]	@ 0x34
 800df40:	e00d      	b.n	800df5e <__sflush_r+0xae>
 800df42:	2301      	movs	r3, #1
 800df44:	4628      	mov	r0, r5
 800df46:	47b0      	blx	r6
 800df48:	4602      	mov	r2, r0
 800df4a:	1c50      	adds	r0, r2, #1
 800df4c:	d1c9      	bne.n	800dee2 <__sflush_r+0x32>
 800df4e:	682b      	ldr	r3, [r5, #0]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d0c6      	beq.n	800dee2 <__sflush_r+0x32>
 800df54:	2b1d      	cmp	r3, #29
 800df56:	d001      	beq.n	800df5c <__sflush_r+0xac>
 800df58:	2b16      	cmp	r3, #22
 800df5a:	d11d      	bne.n	800df98 <__sflush_r+0xe8>
 800df5c:	602f      	str	r7, [r5, #0]
 800df5e:	2000      	movs	r0, #0
 800df60:	e021      	b.n	800dfa6 <__sflush_r+0xf6>
 800df62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df66:	b21b      	sxth	r3, r3
 800df68:	e01a      	b.n	800dfa0 <__sflush_r+0xf0>
 800df6a:	690f      	ldr	r7, [r1, #16]
 800df6c:	2f00      	cmp	r7, #0
 800df6e:	d0f6      	beq.n	800df5e <__sflush_r+0xae>
 800df70:	0793      	lsls	r3, r2, #30
 800df72:	680e      	ldr	r6, [r1, #0]
 800df74:	600f      	str	r7, [r1, #0]
 800df76:	bf0c      	ite	eq
 800df78:	694b      	ldreq	r3, [r1, #20]
 800df7a:	2300      	movne	r3, #0
 800df7c:	eba6 0807 	sub.w	r8, r6, r7
 800df80:	608b      	str	r3, [r1, #8]
 800df82:	f1b8 0f00 	cmp.w	r8, #0
 800df86:	ddea      	ble.n	800df5e <__sflush_r+0xae>
 800df88:	4643      	mov	r3, r8
 800df8a:	463a      	mov	r2, r7
 800df8c:	6a21      	ldr	r1, [r4, #32]
 800df8e:	4628      	mov	r0, r5
 800df90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800df92:	47b0      	blx	r6
 800df94:	2800      	cmp	r0, #0
 800df96:	dc08      	bgt.n	800dfaa <__sflush_r+0xfa>
 800df98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa4:	81a3      	strh	r3, [r4, #12]
 800dfa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfaa:	4407      	add	r7, r0
 800dfac:	eba8 0800 	sub.w	r8, r8, r0
 800dfb0:	e7e7      	b.n	800df82 <__sflush_r+0xd2>
 800dfb2:	bf00      	nop
 800dfb4:	dfbffffe 	.word	0xdfbffffe

0800dfb8 <_fflush_r>:
 800dfb8:	b538      	push	{r3, r4, r5, lr}
 800dfba:	690b      	ldr	r3, [r1, #16]
 800dfbc:	4605      	mov	r5, r0
 800dfbe:	460c      	mov	r4, r1
 800dfc0:	b913      	cbnz	r3, 800dfc8 <_fflush_r+0x10>
 800dfc2:	2500      	movs	r5, #0
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	bd38      	pop	{r3, r4, r5, pc}
 800dfc8:	b118      	cbz	r0, 800dfd2 <_fflush_r+0x1a>
 800dfca:	6a03      	ldr	r3, [r0, #32]
 800dfcc:	b90b      	cbnz	r3, 800dfd2 <_fflush_r+0x1a>
 800dfce:	f7fd f8b7 	bl	800b140 <__sinit>
 800dfd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d0f3      	beq.n	800dfc2 <_fflush_r+0xa>
 800dfda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dfdc:	07d0      	lsls	r0, r2, #31
 800dfde:	d404      	bmi.n	800dfea <_fflush_r+0x32>
 800dfe0:	0599      	lsls	r1, r3, #22
 800dfe2:	d402      	bmi.n	800dfea <_fflush_r+0x32>
 800dfe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfe6:	f7fd fad6 	bl	800b596 <__retarget_lock_acquire_recursive>
 800dfea:	4628      	mov	r0, r5
 800dfec:	4621      	mov	r1, r4
 800dfee:	f7ff ff5f 	bl	800deb0 <__sflush_r>
 800dff2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dff4:	4605      	mov	r5, r0
 800dff6:	07da      	lsls	r2, r3, #31
 800dff8:	d4e4      	bmi.n	800dfc4 <_fflush_r+0xc>
 800dffa:	89a3      	ldrh	r3, [r4, #12]
 800dffc:	059b      	lsls	r3, r3, #22
 800dffe:	d4e1      	bmi.n	800dfc4 <_fflush_r+0xc>
 800e000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e002:	f7fd fac9 	bl	800b598 <__retarget_lock_release_recursive>
 800e006:	e7dd      	b.n	800dfc4 <_fflush_r+0xc>

0800e008 <__swhatbuf_r>:
 800e008:	b570      	push	{r4, r5, r6, lr}
 800e00a:	460c      	mov	r4, r1
 800e00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e010:	b096      	sub	sp, #88	@ 0x58
 800e012:	4615      	mov	r5, r2
 800e014:	2900      	cmp	r1, #0
 800e016:	461e      	mov	r6, r3
 800e018:	da0c      	bge.n	800e034 <__swhatbuf_r+0x2c>
 800e01a:	89a3      	ldrh	r3, [r4, #12]
 800e01c:	2100      	movs	r1, #0
 800e01e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e022:	bf14      	ite	ne
 800e024:	2340      	movne	r3, #64	@ 0x40
 800e026:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e02a:	2000      	movs	r0, #0
 800e02c:	6031      	str	r1, [r6, #0]
 800e02e:	602b      	str	r3, [r5, #0]
 800e030:	b016      	add	sp, #88	@ 0x58
 800e032:	bd70      	pop	{r4, r5, r6, pc}
 800e034:	466a      	mov	r2, sp
 800e036:	f000 f875 	bl	800e124 <_fstat_r>
 800e03a:	2800      	cmp	r0, #0
 800e03c:	dbed      	blt.n	800e01a <__swhatbuf_r+0x12>
 800e03e:	9901      	ldr	r1, [sp, #4]
 800e040:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e044:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e048:	4259      	negs	r1, r3
 800e04a:	4159      	adcs	r1, r3
 800e04c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e050:	e7eb      	b.n	800e02a <__swhatbuf_r+0x22>

0800e052 <__smakebuf_r>:
 800e052:	898b      	ldrh	r3, [r1, #12]
 800e054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e056:	079d      	lsls	r5, r3, #30
 800e058:	4606      	mov	r6, r0
 800e05a:	460c      	mov	r4, r1
 800e05c:	d507      	bpl.n	800e06e <__smakebuf_r+0x1c>
 800e05e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e062:	6023      	str	r3, [r4, #0]
 800e064:	6123      	str	r3, [r4, #16]
 800e066:	2301      	movs	r3, #1
 800e068:	6163      	str	r3, [r4, #20]
 800e06a:	b003      	add	sp, #12
 800e06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e06e:	ab01      	add	r3, sp, #4
 800e070:	466a      	mov	r2, sp
 800e072:	f7ff ffc9 	bl	800e008 <__swhatbuf_r>
 800e076:	9f00      	ldr	r7, [sp, #0]
 800e078:	4605      	mov	r5, r0
 800e07a:	4630      	mov	r0, r6
 800e07c:	4639      	mov	r1, r7
 800e07e:	f7fc f8db 	bl	800a238 <_malloc_r>
 800e082:	b948      	cbnz	r0, 800e098 <__smakebuf_r+0x46>
 800e084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e088:	059a      	lsls	r2, r3, #22
 800e08a:	d4ee      	bmi.n	800e06a <__smakebuf_r+0x18>
 800e08c:	f023 0303 	bic.w	r3, r3, #3
 800e090:	f043 0302 	orr.w	r3, r3, #2
 800e094:	81a3      	strh	r3, [r4, #12]
 800e096:	e7e2      	b.n	800e05e <__smakebuf_r+0xc>
 800e098:	89a3      	ldrh	r3, [r4, #12]
 800e09a:	6020      	str	r0, [r4, #0]
 800e09c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0a0:	81a3      	strh	r3, [r4, #12]
 800e0a2:	9b01      	ldr	r3, [sp, #4]
 800e0a4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e0a8:	b15b      	cbz	r3, 800e0c2 <__smakebuf_r+0x70>
 800e0aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0ae:	4630      	mov	r0, r6
 800e0b0:	f000 f84a 	bl	800e148 <_isatty_r>
 800e0b4:	b128      	cbz	r0, 800e0c2 <__smakebuf_r+0x70>
 800e0b6:	89a3      	ldrh	r3, [r4, #12]
 800e0b8:	f023 0303 	bic.w	r3, r3, #3
 800e0bc:	f043 0301 	orr.w	r3, r3, #1
 800e0c0:	81a3      	strh	r3, [r4, #12]
 800e0c2:	89a3      	ldrh	r3, [r4, #12]
 800e0c4:	431d      	orrs	r5, r3
 800e0c6:	81a5      	strh	r5, [r4, #12]
 800e0c8:	e7cf      	b.n	800e06a <__smakebuf_r+0x18>

0800e0ca <memmove>:
 800e0ca:	4288      	cmp	r0, r1
 800e0cc:	b510      	push	{r4, lr}
 800e0ce:	eb01 0402 	add.w	r4, r1, r2
 800e0d2:	d902      	bls.n	800e0da <memmove+0x10>
 800e0d4:	4284      	cmp	r4, r0
 800e0d6:	4623      	mov	r3, r4
 800e0d8:	d807      	bhi.n	800e0ea <memmove+0x20>
 800e0da:	1e43      	subs	r3, r0, #1
 800e0dc:	42a1      	cmp	r1, r4
 800e0de:	d008      	beq.n	800e0f2 <memmove+0x28>
 800e0e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0e8:	e7f8      	b.n	800e0dc <memmove+0x12>
 800e0ea:	4402      	add	r2, r0
 800e0ec:	4601      	mov	r1, r0
 800e0ee:	428a      	cmp	r2, r1
 800e0f0:	d100      	bne.n	800e0f4 <memmove+0x2a>
 800e0f2:	bd10      	pop	{r4, pc}
 800e0f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0fc:	e7f7      	b.n	800e0ee <memmove+0x24>

0800e0fe <strncmp>:
 800e0fe:	b510      	push	{r4, lr}
 800e100:	b16a      	cbz	r2, 800e11e <strncmp+0x20>
 800e102:	3901      	subs	r1, #1
 800e104:	1884      	adds	r4, r0, r2
 800e106:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e10a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e10e:	429a      	cmp	r2, r3
 800e110:	d103      	bne.n	800e11a <strncmp+0x1c>
 800e112:	42a0      	cmp	r0, r4
 800e114:	d001      	beq.n	800e11a <strncmp+0x1c>
 800e116:	2a00      	cmp	r2, #0
 800e118:	d1f5      	bne.n	800e106 <strncmp+0x8>
 800e11a:	1ad0      	subs	r0, r2, r3
 800e11c:	bd10      	pop	{r4, pc}
 800e11e:	4610      	mov	r0, r2
 800e120:	e7fc      	b.n	800e11c <strncmp+0x1e>
	...

0800e124 <_fstat_r>:
 800e124:	b538      	push	{r3, r4, r5, lr}
 800e126:	2300      	movs	r3, #0
 800e128:	4d06      	ldr	r5, [pc, #24]	@ (800e144 <_fstat_r+0x20>)
 800e12a:	4604      	mov	r4, r0
 800e12c:	4608      	mov	r0, r1
 800e12e:	4611      	mov	r1, r2
 800e130:	602b      	str	r3, [r5, #0]
 800e132:	f7f4 fe9d 	bl	8002e70 <_fstat>
 800e136:	1c43      	adds	r3, r0, #1
 800e138:	d102      	bne.n	800e140 <_fstat_r+0x1c>
 800e13a:	682b      	ldr	r3, [r5, #0]
 800e13c:	b103      	cbz	r3, 800e140 <_fstat_r+0x1c>
 800e13e:	6023      	str	r3, [r4, #0]
 800e140:	bd38      	pop	{r3, r4, r5, pc}
 800e142:	bf00      	nop
 800e144:	200005e0 	.word	0x200005e0

0800e148 <_isatty_r>:
 800e148:	b538      	push	{r3, r4, r5, lr}
 800e14a:	2300      	movs	r3, #0
 800e14c:	4d05      	ldr	r5, [pc, #20]	@ (800e164 <_isatty_r+0x1c>)
 800e14e:	4604      	mov	r4, r0
 800e150:	4608      	mov	r0, r1
 800e152:	602b      	str	r3, [r5, #0]
 800e154:	f7f4 fe9c 	bl	8002e90 <_isatty>
 800e158:	1c43      	adds	r3, r0, #1
 800e15a:	d102      	bne.n	800e162 <_isatty_r+0x1a>
 800e15c:	682b      	ldr	r3, [r5, #0]
 800e15e:	b103      	cbz	r3, 800e162 <_isatty_r+0x1a>
 800e160:	6023      	str	r3, [r4, #0]
 800e162:	bd38      	pop	{r3, r4, r5, pc}
 800e164:	200005e0 	.word	0x200005e0

0800e168 <memcpy>:
 800e168:	440a      	add	r2, r1
 800e16a:	1e43      	subs	r3, r0, #1
 800e16c:	4291      	cmp	r1, r2
 800e16e:	d100      	bne.n	800e172 <memcpy+0xa>
 800e170:	4770      	bx	lr
 800e172:	b510      	push	{r4, lr}
 800e174:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e178:	4291      	cmp	r1, r2
 800e17a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e17e:	d1f9      	bne.n	800e174 <memcpy+0xc>
 800e180:	bd10      	pop	{r4, pc}
 800e182:	0000      	movs	r0, r0
 800e184:	0000      	movs	r0, r0
	...

0800e188 <nan>:
 800e188:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e190 <nan+0x8>
 800e18c:	4770      	bx	lr
 800e18e:	bf00      	nop
 800e190:	00000000 	.word	0x00000000
 800e194:	7ff80000 	.word	0x7ff80000

0800e198 <__assert_func>:
 800e198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e19a:	4614      	mov	r4, r2
 800e19c:	461a      	mov	r2, r3
 800e19e:	4b09      	ldr	r3, [pc, #36]	@ (800e1c4 <__assert_func+0x2c>)
 800e1a0:	4605      	mov	r5, r0
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	68d8      	ldr	r0, [r3, #12]
 800e1a6:	b954      	cbnz	r4, 800e1be <__assert_func+0x26>
 800e1a8:	4b07      	ldr	r3, [pc, #28]	@ (800e1c8 <__assert_func+0x30>)
 800e1aa:	461c      	mov	r4, r3
 800e1ac:	9100      	str	r1, [sp, #0]
 800e1ae:	4907      	ldr	r1, [pc, #28]	@ (800e1cc <__assert_func+0x34>)
 800e1b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1b4:	462b      	mov	r3, r5
 800e1b6:	f000 fba3 	bl	800e900 <fiprintf>
 800e1ba:	f000 fbb3 	bl	800e924 <abort>
 800e1be:	4b04      	ldr	r3, [pc, #16]	@ (800e1d0 <__assert_func+0x38>)
 800e1c0:	e7f4      	b.n	800e1ac <__assert_func+0x14>
 800e1c2:	bf00      	nop
 800e1c4:	2000005c 	.word	0x2000005c
 800e1c8:	0800efe5 	.word	0x0800efe5
 800e1cc:	0800efb7 	.word	0x0800efb7
 800e1d0:	0800efaa 	.word	0x0800efaa

0800e1d4 <_calloc_r>:
 800e1d4:	b570      	push	{r4, r5, r6, lr}
 800e1d6:	fba1 5402 	umull	r5, r4, r1, r2
 800e1da:	b93c      	cbnz	r4, 800e1ec <_calloc_r+0x18>
 800e1dc:	4629      	mov	r1, r5
 800e1de:	f7fc f82b 	bl	800a238 <_malloc_r>
 800e1e2:	4606      	mov	r6, r0
 800e1e4:	b928      	cbnz	r0, 800e1f2 <_calloc_r+0x1e>
 800e1e6:	2600      	movs	r6, #0
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	bd70      	pop	{r4, r5, r6, pc}
 800e1ec:	220c      	movs	r2, #12
 800e1ee:	6002      	str	r2, [r0, #0]
 800e1f0:	e7f9      	b.n	800e1e6 <_calloc_r+0x12>
 800e1f2:	462a      	mov	r2, r5
 800e1f4:	4621      	mov	r1, r4
 800e1f6:	f7fd f941 	bl	800b47c <memset>
 800e1fa:	e7f5      	b.n	800e1e8 <_calloc_r+0x14>

0800e1fc <rshift>:
 800e1fc:	6903      	ldr	r3, [r0, #16]
 800e1fe:	114a      	asrs	r2, r1, #5
 800e200:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e208:	f100 0414 	add.w	r4, r0, #20
 800e20c:	dd45      	ble.n	800e29a <rshift+0x9e>
 800e20e:	f011 011f 	ands.w	r1, r1, #31
 800e212:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e216:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e21a:	d10c      	bne.n	800e236 <rshift+0x3a>
 800e21c:	f100 0710 	add.w	r7, r0, #16
 800e220:	4629      	mov	r1, r5
 800e222:	42b1      	cmp	r1, r6
 800e224:	d334      	bcc.n	800e290 <rshift+0x94>
 800e226:	1a9b      	subs	r3, r3, r2
 800e228:	1eea      	subs	r2, r5, #3
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	4296      	cmp	r6, r2
 800e22e:	bf38      	it	cc
 800e230:	2300      	movcc	r3, #0
 800e232:	4423      	add	r3, r4
 800e234:	e015      	b.n	800e262 <rshift+0x66>
 800e236:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e23a:	f1c1 0820 	rsb	r8, r1, #32
 800e23e:	f105 0e04 	add.w	lr, r5, #4
 800e242:	46a1      	mov	r9, r4
 800e244:	40cf      	lsrs	r7, r1
 800e246:	4576      	cmp	r6, lr
 800e248:	46f4      	mov	ip, lr
 800e24a:	d815      	bhi.n	800e278 <rshift+0x7c>
 800e24c:	1a9a      	subs	r2, r3, r2
 800e24e:	3501      	adds	r5, #1
 800e250:	0092      	lsls	r2, r2, #2
 800e252:	3a04      	subs	r2, #4
 800e254:	42ae      	cmp	r6, r5
 800e256:	bf38      	it	cc
 800e258:	2200      	movcc	r2, #0
 800e25a:	18a3      	adds	r3, r4, r2
 800e25c:	50a7      	str	r7, [r4, r2]
 800e25e:	b107      	cbz	r7, 800e262 <rshift+0x66>
 800e260:	3304      	adds	r3, #4
 800e262:	1b1a      	subs	r2, r3, r4
 800e264:	42a3      	cmp	r3, r4
 800e266:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e26a:	bf08      	it	eq
 800e26c:	2300      	moveq	r3, #0
 800e26e:	6102      	str	r2, [r0, #16]
 800e270:	bf08      	it	eq
 800e272:	6143      	streq	r3, [r0, #20]
 800e274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e278:	f8dc c000 	ldr.w	ip, [ip]
 800e27c:	fa0c fc08 	lsl.w	ip, ip, r8
 800e280:	ea4c 0707 	orr.w	r7, ip, r7
 800e284:	f849 7b04 	str.w	r7, [r9], #4
 800e288:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e28c:	40cf      	lsrs	r7, r1
 800e28e:	e7da      	b.n	800e246 <rshift+0x4a>
 800e290:	f851 cb04 	ldr.w	ip, [r1], #4
 800e294:	f847 cf04 	str.w	ip, [r7, #4]!
 800e298:	e7c3      	b.n	800e222 <rshift+0x26>
 800e29a:	4623      	mov	r3, r4
 800e29c:	e7e1      	b.n	800e262 <rshift+0x66>

0800e29e <__hexdig_fun>:
 800e29e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e2a2:	2b09      	cmp	r3, #9
 800e2a4:	d802      	bhi.n	800e2ac <__hexdig_fun+0xe>
 800e2a6:	3820      	subs	r0, #32
 800e2a8:	b2c0      	uxtb	r0, r0
 800e2aa:	4770      	bx	lr
 800e2ac:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e2b0:	2b05      	cmp	r3, #5
 800e2b2:	d801      	bhi.n	800e2b8 <__hexdig_fun+0x1a>
 800e2b4:	3847      	subs	r0, #71	@ 0x47
 800e2b6:	e7f7      	b.n	800e2a8 <__hexdig_fun+0xa>
 800e2b8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e2bc:	2b05      	cmp	r3, #5
 800e2be:	d801      	bhi.n	800e2c4 <__hexdig_fun+0x26>
 800e2c0:	3827      	subs	r0, #39	@ 0x27
 800e2c2:	e7f1      	b.n	800e2a8 <__hexdig_fun+0xa>
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	4770      	bx	lr

0800e2c8 <__gethex>:
 800e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2cc:	b085      	sub	sp, #20
 800e2ce:	468a      	mov	sl, r1
 800e2d0:	4690      	mov	r8, r2
 800e2d2:	9302      	str	r3, [sp, #8]
 800e2d4:	680b      	ldr	r3, [r1, #0]
 800e2d6:	9001      	str	r0, [sp, #4]
 800e2d8:	1c9c      	adds	r4, r3, #2
 800e2da:	46a1      	mov	r9, r4
 800e2dc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e2e0:	2830      	cmp	r0, #48	@ 0x30
 800e2e2:	d0fa      	beq.n	800e2da <__gethex+0x12>
 800e2e4:	eba9 0303 	sub.w	r3, r9, r3
 800e2e8:	f1a3 0b02 	sub.w	fp, r3, #2
 800e2ec:	f7ff ffd7 	bl	800e29e <__hexdig_fun>
 800e2f0:	4605      	mov	r5, r0
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	d166      	bne.n	800e3c4 <__gethex+0xfc>
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	499e      	ldr	r1, [pc, #632]	@ (800e574 <__gethex+0x2ac>)
 800e2fa:	4648      	mov	r0, r9
 800e2fc:	f7ff feff 	bl	800e0fe <strncmp>
 800e300:	4607      	mov	r7, r0
 800e302:	2800      	cmp	r0, #0
 800e304:	d165      	bne.n	800e3d2 <__gethex+0x10a>
 800e306:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e30a:	4626      	mov	r6, r4
 800e30c:	f7ff ffc7 	bl	800e29e <__hexdig_fun>
 800e310:	2800      	cmp	r0, #0
 800e312:	d060      	beq.n	800e3d6 <__gethex+0x10e>
 800e314:	4623      	mov	r3, r4
 800e316:	7818      	ldrb	r0, [r3, #0]
 800e318:	4699      	mov	r9, r3
 800e31a:	3301      	adds	r3, #1
 800e31c:	2830      	cmp	r0, #48	@ 0x30
 800e31e:	d0fa      	beq.n	800e316 <__gethex+0x4e>
 800e320:	f7ff ffbd 	bl	800e29e <__hexdig_fun>
 800e324:	fab0 f580 	clz	r5, r0
 800e328:	f04f 0b01 	mov.w	fp, #1
 800e32c:	096d      	lsrs	r5, r5, #5
 800e32e:	464a      	mov	r2, r9
 800e330:	4616      	mov	r6, r2
 800e332:	3201      	adds	r2, #1
 800e334:	7830      	ldrb	r0, [r6, #0]
 800e336:	f7ff ffb2 	bl	800e29e <__hexdig_fun>
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d1f8      	bne.n	800e330 <__gethex+0x68>
 800e33e:	2201      	movs	r2, #1
 800e340:	498c      	ldr	r1, [pc, #560]	@ (800e574 <__gethex+0x2ac>)
 800e342:	4630      	mov	r0, r6
 800e344:	f7ff fedb 	bl	800e0fe <strncmp>
 800e348:	2800      	cmp	r0, #0
 800e34a:	d13e      	bne.n	800e3ca <__gethex+0x102>
 800e34c:	b944      	cbnz	r4, 800e360 <__gethex+0x98>
 800e34e:	1c74      	adds	r4, r6, #1
 800e350:	4622      	mov	r2, r4
 800e352:	4616      	mov	r6, r2
 800e354:	3201      	adds	r2, #1
 800e356:	7830      	ldrb	r0, [r6, #0]
 800e358:	f7ff ffa1 	bl	800e29e <__hexdig_fun>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	d1f8      	bne.n	800e352 <__gethex+0x8a>
 800e360:	1ba4      	subs	r4, r4, r6
 800e362:	00a7      	lsls	r7, r4, #2
 800e364:	7833      	ldrb	r3, [r6, #0]
 800e366:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e36a:	2b50      	cmp	r3, #80	@ 0x50
 800e36c:	d13d      	bne.n	800e3ea <__gethex+0x122>
 800e36e:	7873      	ldrb	r3, [r6, #1]
 800e370:	2b2b      	cmp	r3, #43	@ 0x2b
 800e372:	d032      	beq.n	800e3da <__gethex+0x112>
 800e374:	2b2d      	cmp	r3, #45	@ 0x2d
 800e376:	d033      	beq.n	800e3e0 <__gethex+0x118>
 800e378:	1c71      	adds	r1, r6, #1
 800e37a:	2400      	movs	r4, #0
 800e37c:	7808      	ldrb	r0, [r1, #0]
 800e37e:	f7ff ff8e 	bl	800e29e <__hexdig_fun>
 800e382:	1e43      	subs	r3, r0, #1
 800e384:	b2db      	uxtb	r3, r3
 800e386:	2b18      	cmp	r3, #24
 800e388:	d82f      	bhi.n	800e3ea <__gethex+0x122>
 800e38a:	f1a0 0210 	sub.w	r2, r0, #16
 800e38e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e392:	f7ff ff84 	bl	800e29e <__hexdig_fun>
 800e396:	f100 3cff 	add.w	ip, r0, #4294967295
 800e39a:	230a      	movs	r3, #10
 800e39c:	fa5f fc8c 	uxtb.w	ip, ip
 800e3a0:	f1bc 0f18 	cmp.w	ip, #24
 800e3a4:	d91e      	bls.n	800e3e4 <__gethex+0x11c>
 800e3a6:	b104      	cbz	r4, 800e3aa <__gethex+0xe2>
 800e3a8:	4252      	negs	r2, r2
 800e3aa:	4417      	add	r7, r2
 800e3ac:	f8ca 1000 	str.w	r1, [sl]
 800e3b0:	b1ed      	cbz	r5, 800e3ee <__gethex+0x126>
 800e3b2:	f1bb 0f00 	cmp.w	fp, #0
 800e3b6:	bf0c      	ite	eq
 800e3b8:	2506      	moveq	r5, #6
 800e3ba:	2500      	movne	r5, #0
 800e3bc:	4628      	mov	r0, r5
 800e3be:	b005      	add	sp, #20
 800e3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3c4:	2500      	movs	r5, #0
 800e3c6:	462c      	mov	r4, r5
 800e3c8:	e7b1      	b.n	800e32e <__gethex+0x66>
 800e3ca:	2c00      	cmp	r4, #0
 800e3cc:	d1c8      	bne.n	800e360 <__gethex+0x98>
 800e3ce:	4627      	mov	r7, r4
 800e3d0:	e7c8      	b.n	800e364 <__gethex+0x9c>
 800e3d2:	464e      	mov	r6, r9
 800e3d4:	462f      	mov	r7, r5
 800e3d6:	2501      	movs	r5, #1
 800e3d8:	e7c4      	b.n	800e364 <__gethex+0x9c>
 800e3da:	2400      	movs	r4, #0
 800e3dc:	1cb1      	adds	r1, r6, #2
 800e3de:	e7cd      	b.n	800e37c <__gethex+0xb4>
 800e3e0:	2401      	movs	r4, #1
 800e3e2:	e7fb      	b.n	800e3dc <__gethex+0x114>
 800e3e4:	fb03 0002 	mla	r0, r3, r2, r0
 800e3e8:	e7cf      	b.n	800e38a <__gethex+0xc2>
 800e3ea:	4631      	mov	r1, r6
 800e3ec:	e7de      	b.n	800e3ac <__gethex+0xe4>
 800e3ee:	eba6 0309 	sub.w	r3, r6, r9
 800e3f2:	4629      	mov	r1, r5
 800e3f4:	3b01      	subs	r3, #1
 800e3f6:	2b07      	cmp	r3, #7
 800e3f8:	dc0a      	bgt.n	800e410 <__gethex+0x148>
 800e3fa:	9801      	ldr	r0, [sp, #4]
 800e3fc:	f7fd ff7e 	bl	800c2fc <_Balloc>
 800e400:	4604      	mov	r4, r0
 800e402:	b940      	cbnz	r0, 800e416 <__gethex+0x14e>
 800e404:	4b5c      	ldr	r3, [pc, #368]	@ (800e578 <__gethex+0x2b0>)
 800e406:	4602      	mov	r2, r0
 800e408:	21e4      	movs	r1, #228	@ 0xe4
 800e40a:	485c      	ldr	r0, [pc, #368]	@ (800e57c <__gethex+0x2b4>)
 800e40c:	f7ff fec4 	bl	800e198 <__assert_func>
 800e410:	3101      	adds	r1, #1
 800e412:	105b      	asrs	r3, r3, #1
 800e414:	e7ef      	b.n	800e3f6 <__gethex+0x12e>
 800e416:	f100 0a14 	add.w	sl, r0, #20
 800e41a:	2300      	movs	r3, #0
 800e41c:	4655      	mov	r5, sl
 800e41e:	469b      	mov	fp, r3
 800e420:	45b1      	cmp	r9, r6
 800e422:	d337      	bcc.n	800e494 <__gethex+0x1cc>
 800e424:	f845 bb04 	str.w	fp, [r5], #4
 800e428:	eba5 050a 	sub.w	r5, r5, sl
 800e42c:	4658      	mov	r0, fp
 800e42e:	10ad      	asrs	r5, r5, #2
 800e430:	6125      	str	r5, [r4, #16]
 800e432:	016d      	lsls	r5, r5, #5
 800e434:	f7fe f856 	bl	800c4e4 <__hi0bits>
 800e438:	f8d8 6000 	ldr.w	r6, [r8]
 800e43c:	1a2d      	subs	r5, r5, r0
 800e43e:	42b5      	cmp	r5, r6
 800e440:	dd54      	ble.n	800e4ec <__gethex+0x224>
 800e442:	1bad      	subs	r5, r5, r6
 800e444:	4620      	mov	r0, r4
 800e446:	4629      	mov	r1, r5
 800e448:	f7fe fbf3 	bl	800cc32 <__any_on>
 800e44c:	4681      	mov	r9, r0
 800e44e:	b178      	cbz	r0, 800e470 <__gethex+0x1a8>
 800e450:	1e6b      	subs	r3, r5, #1
 800e452:	f04f 0901 	mov.w	r9, #1
 800e456:	1159      	asrs	r1, r3, #5
 800e458:	f003 021f 	and.w	r2, r3, #31
 800e45c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e460:	fa09 f202 	lsl.w	r2, r9, r2
 800e464:	420a      	tst	r2, r1
 800e466:	d003      	beq.n	800e470 <__gethex+0x1a8>
 800e468:	454b      	cmp	r3, r9
 800e46a:	dc36      	bgt.n	800e4da <__gethex+0x212>
 800e46c:	f04f 0902 	mov.w	r9, #2
 800e470:	442f      	add	r7, r5
 800e472:	4629      	mov	r1, r5
 800e474:	4620      	mov	r0, r4
 800e476:	f7ff fec1 	bl	800e1fc <rshift>
 800e47a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e47e:	42bb      	cmp	r3, r7
 800e480:	da42      	bge.n	800e508 <__gethex+0x240>
 800e482:	4621      	mov	r1, r4
 800e484:	9801      	ldr	r0, [sp, #4]
 800e486:	f7fd ff79 	bl	800c37c <_Bfree>
 800e48a:	2300      	movs	r3, #0
 800e48c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e48e:	25a3      	movs	r5, #163	@ 0xa3
 800e490:	6013      	str	r3, [r2, #0]
 800e492:	e793      	b.n	800e3bc <__gethex+0xf4>
 800e494:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e498:	2a2e      	cmp	r2, #46	@ 0x2e
 800e49a:	d012      	beq.n	800e4c2 <__gethex+0x1fa>
 800e49c:	2b20      	cmp	r3, #32
 800e49e:	d104      	bne.n	800e4aa <__gethex+0x1e2>
 800e4a0:	f845 bb04 	str.w	fp, [r5], #4
 800e4a4:	f04f 0b00 	mov.w	fp, #0
 800e4a8:	465b      	mov	r3, fp
 800e4aa:	7830      	ldrb	r0, [r6, #0]
 800e4ac:	9303      	str	r3, [sp, #12]
 800e4ae:	f7ff fef6 	bl	800e29e <__hexdig_fun>
 800e4b2:	9b03      	ldr	r3, [sp, #12]
 800e4b4:	f000 000f 	and.w	r0, r0, #15
 800e4b8:	4098      	lsls	r0, r3
 800e4ba:	3304      	adds	r3, #4
 800e4bc:	ea4b 0b00 	orr.w	fp, fp, r0
 800e4c0:	e7ae      	b.n	800e420 <__gethex+0x158>
 800e4c2:	45b1      	cmp	r9, r6
 800e4c4:	d8ea      	bhi.n	800e49c <__gethex+0x1d4>
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	492a      	ldr	r1, [pc, #168]	@ (800e574 <__gethex+0x2ac>)
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	9303      	str	r3, [sp, #12]
 800e4ce:	f7ff fe16 	bl	800e0fe <strncmp>
 800e4d2:	9b03      	ldr	r3, [sp, #12]
 800e4d4:	2800      	cmp	r0, #0
 800e4d6:	d1e1      	bne.n	800e49c <__gethex+0x1d4>
 800e4d8:	e7a2      	b.n	800e420 <__gethex+0x158>
 800e4da:	1ea9      	subs	r1, r5, #2
 800e4dc:	4620      	mov	r0, r4
 800e4de:	f7fe fba8 	bl	800cc32 <__any_on>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	d0c2      	beq.n	800e46c <__gethex+0x1a4>
 800e4e6:	f04f 0903 	mov.w	r9, #3
 800e4ea:	e7c1      	b.n	800e470 <__gethex+0x1a8>
 800e4ec:	da09      	bge.n	800e502 <__gethex+0x23a>
 800e4ee:	1b75      	subs	r5, r6, r5
 800e4f0:	4621      	mov	r1, r4
 800e4f2:	9801      	ldr	r0, [sp, #4]
 800e4f4:	462a      	mov	r2, r5
 800e4f6:	1b7f      	subs	r7, r7, r5
 800e4f8:	f7fe f95a 	bl	800c7b0 <__lshift>
 800e4fc:	4604      	mov	r4, r0
 800e4fe:	f100 0a14 	add.w	sl, r0, #20
 800e502:	f04f 0900 	mov.w	r9, #0
 800e506:	e7b8      	b.n	800e47a <__gethex+0x1b2>
 800e508:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e50c:	42bd      	cmp	r5, r7
 800e50e:	dd6f      	ble.n	800e5f0 <__gethex+0x328>
 800e510:	1bed      	subs	r5, r5, r7
 800e512:	42ae      	cmp	r6, r5
 800e514:	dc34      	bgt.n	800e580 <__gethex+0x2b8>
 800e516:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e51a:	2b02      	cmp	r3, #2
 800e51c:	d022      	beq.n	800e564 <__gethex+0x29c>
 800e51e:	2b03      	cmp	r3, #3
 800e520:	d024      	beq.n	800e56c <__gethex+0x2a4>
 800e522:	2b01      	cmp	r3, #1
 800e524:	d115      	bne.n	800e552 <__gethex+0x28a>
 800e526:	42ae      	cmp	r6, r5
 800e528:	d113      	bne.n	800e552 <__gethex+0x28a>
 800e52a:	2e01      	cmp	r6, #1
 800e52c:	d10b      	bne.n	800e546 <__gethex+0x27e>
 800e52e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e532:	2562      	movs	r5, #98	@ 0x62
 800e534:	9a02      	ldr	r2, [sp, #8]
 800e536:	6013      	str	r3, [r2, #0]
 800e538:	2301      	movs	r3, #1
 800e53a:	6123      	str	r3, [r4, #16]
 800e53c:	f8ca 3000 	str.w	r3, [sl]
 800e540:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e542:	601c      	str	r4, [r3, #0]
 800e544:	e73a      	b.n	800e3bc <__gethex+0xf4>
 800e546:	1e71      	subs	r1, r6, #1
 800e548:	4620      	mov	r0, r4
 800e54a:	f7fe fb72 	bl	800cc32 <__any_on>
 800e54e:	2800      	cmp	r0, #0
 800e550:	d1ed      	bne.n	800e52e <__gethex+0x266>
 800e552:	4621      	mov	r1, r4
 800e554:	9801      	ldr	r0, [sp, #4]
 800e556:	f7fd ff11 	bl	800c37c <_Bfree>
 800e55a:	2300      	movs	r3, #0
 800e55c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e55e:	2550      	movs	r5, #80	@ 0x50
 800e560:	6013      	str	r3, [r2, #0]
 800e562:	e72b      	b.n	800e3bc <__gethex+0xf4>
 800e564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e566:	2b00      	cmp	r3, #0
 800e568:	d1f3      	bne.n	800e552 <__gethex+0x28a>
 800e56a:	e7e0      	b.n	800e52e <__gethex+0x266>
 800e56c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d1dd      	bne.n	800e52e <__gethex+0x266>
 800e572:	e7ee      	b.n	800e552 <__gethex+0x28a>
 800e574:	0800ee38 	.word	0x0800ee38
 800e578:	0800eccd 	.word	0x0800eccd
 800e57c:	0800efe6 	.word	0x0800efe6
 800e580:	1e6f      	subs	r7, r5, #1
 800e582:	f1b9 0f00 	cmp.w	r9, #0
 800e586:	d130      	bne.n	800e5ea <__gethex+0x322>
 800e588:	b127      	cbz	r7, 800e594 <__gethex+0x2cc>
 800e58a:	4639      	mov	r1, r7
 800e58c:	4620      	mov	r0, r4
 800e58e:	f7fe fb50 	bl	800cc32 <__any_on>
 800e592:	4681      	mov	r9, r0
 800e594:	117a      	asrs	r2, r7, #5
 800e596:	2301      	movs	r3, #1
 800e598:	f007 071f 	and.w	r7, r7, #31
 800e59c:	4629      	mov	r1, r5
 800e59e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	40bb      	lsls	r3, r7
 800e5a6:	1b76      	subs	r6, r6, r5
 800e5a8:	2502      	movs	r5, #2
 800e5aa:	4213      	tst	r3, r2
 800e5ac:	bf18      	it	ne
 800e5ae:	f049 0902 	orrne.w	r9, r9, #2
 800e5b2:	f7ff fe23 	bl	800e1fc <rshift>
 800e5b6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e5ba:	f1b9 0f00 	cmp.w	r9, #0
 800e5be:	d047      	beq.n	800e650 <__gethex+0x388>
 800e5c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d015      	beq.n	800e5f4 <__gethex+0x32c>
 800e5c8:	2b03      	cmp	r3, #3
 800e5ca:	d017      	beq.n	800e5fc <__gethex+0x334>
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d109      	bne.n	800e5e4 <__gethex+0x31c>
 800e5d0:	f019 0f02 	tst.w	r9, #2
 800e5d4:	d006      	beq.n	800e5e4 <__gethex+0x31c>
 800e5d6:	f8da 3000 	ldr.w	r3, [sl]
 800e5da:	ea49 0903 	orr.w	r9, r9, r3
 800e5de:	f019 0f01 	tst.w	r9, #1
 800e5e2:	d10e      	bne.n	800e602 <__gethex+0x33a>
 800e5e4:	f045 0510 	orr.w	r5, r5, #16
 800e5e8:	e032      	b.n	800e650 <__gethex+0x388>
 800e5ea:	f04f 0901 	mov.w	r9, #1
 800e5ee:	e7d1      	b.n	800e594 <__gethex+0x2cc>
 800e5f0:	2501      	movs	r5, #1
 800e5f2:	e7e2      	b.n	800e5ba <__gethex+0x2f2>
 800e5f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5f6:	f1c3 0301 	rsb	r3, r3, #1
 800e5fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e5fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d0f0      	beq.n	800e5e4 <__gethex+0x31c>
 800e602:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e606:	f104 0314 	add.w	r3, r4, #20
 800e60a:	f04f 0c00 	mov.w	ip, #0
 800e60e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e612:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e616:	4618      	mov	r0, r3
 800e618:	f853 2b04 	ldr.w	r2, [r3], #4
 800e61c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e620:	d01b      	beq.n	800e65a <__gethex+0x392>
 800e622:	3201      	adds	r2, #1
 800e624:	6002      	str	r2, [r0, #0]
 800e626:	2d02      	cmp	r5, #2
 800e628:	f104 0314 	add.w	r3, r4, #20
 800e62c:	d13c      	bne.n	800e6a8 <__gethex+0x3e0>
 800e62e:	f8d8 2000 	ldr.w	r2, [r8]
 800e632:	3a01      	subs	r2, #1
 800e634:	42b2      	cmp	r2, r6
 800e636:	d109      	bne.n	800e64c <__gethex+0x384>
 800e638:	1171      	asrs	r1, r6, #5
 800e63a:	2201      	movs	r2, #1
 800e63c:	f006 061f 	and.w	r6, r6, #31
 800e640:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e644:	fa02 f606 	lsl.w	r6, r2, r6
 800e648:	421e      	tst	r6, r3
 800e64a:	d13a      	bne.n	800e6c2 <__gethex+0x3fa>
 800e64c:	f045 0520 	orr.w	r5, r5, #32
 800e650:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e652:	601c      	str	r4, [r3, #0]
 800e654:	9b02      	ldr	r3, [sp, #8]
 800e656:	601f      	str	r7, [r3, #0]
 800e658:	e6b0      	b.n	800e3bc <__gethex+0xf4>
 800e65a:	4299      	cmp	r1, r3
 800e65c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e660:	d8d9      	bhi.n	800e616 <__gethex+0x34e>
 800e662:	68a3      	ldr	r3, [r4, #8]
 800e664:	459b      	cmp	fp, r3
 800e666:	db17      	blt.n	800e698 <__gethex+0x3d0>
 800e668:	6861      	ldr	r1, [r4, #4]
 800e66a:	9801      	ldr	r0, [sp, #4]
 800e66c:	3101      	adds	r1, #1
 800e66e:	f7fd fe45 	bl	800c2fc <_Balloc>
 800e672:	4681      	mov	r9, r0
 800e674:	b918      	cbnz	r0, 800e67e <__gethex+0x3b6>
 800e676:	4b1a      	ldr	r3, [pc, #104]	@ (800e6e0 <__gethex+0x418>)
 800e678:	4602      	mov	r2, r0
 800e67a:	2184      	movs	r1, #132	@ 0x84
 800e67c:	e6c5      	b.n	800e40a <__gethex+0x142>
 800e67e:	6922      	ldr	r2, [r4, #16]
 800e680:	f104 010c 	add.w	r1, r4, #12
 800e684:	300c      	adds	r0, #12
 800e686:	3202      	adds	r2, #2
 800e688:	0092      	lsls	r2, r2, #2
 800e68a:	f7ff fd6d 	bl	800e168 <memcpy>
 800e68e:	4621      	mov	r1, r4
 800e690:	464c      	mov	r4, r9
 800e692:	9801      	ldr	r0, [sp, #4]
 800e694:	f7fd fe72 	bl	800c37c <_Bfree>
 800e698:	6923      	ldr	r3, [r4, #16]
 800e69a:	1c5a      	adds	r2, r3, #1
 800e69c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e6a0:	6122      	str	r2, [r4, #16]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	615a      	str	r2, [r3, #20]
 800e6a6:	e7be      	b.n	800e626 <__gethex+0x35e>
 800e6a8:	6922      	ldr	r2, [r4, #16]
 800e6aa:	455a      	cmp	r2, fp
 800e6ac:	dd0b      	ble.n	800e6c6 <__gethex+0x3fe>
 800e6ae:	2101      	movs	r1, #1
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f7ff fda3 	bl	800e1fc <rshift>
 800e6b6:	3701      	adds	r7, #1
 800e6b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e6bc:	42bb      	cmp	r3, r7
 800e6be:	f6ff aee0 	blt.w	800e482 <__gethex+0x1ba>
 800e6c2:	2501      	movs	r5, #1
 800e6c4:	e7c2      	b.n	800e64c <__gethex+0x384>
 800e6c6:	f016 061f 	ands.w	r6, r6, #31
 800e6ca:	d0fa      	beq.n	800e6c2 <__gethex+0x3fa>
 800e6cc:	4453      	add	r3, sl
 800e6ce:	f1c6 0620 	rsb	r6, r6, #32
 800e6d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e6d6:	f7fd ff05 	bl	800c4e4 <__hi0bits>
 800e6da:	42b0      	cmp	r0, r6
 800e6dc:	dbe7      	blt.n	800e6ae <__gethex+0x3e6>
 800e6de:	e7f0      	b.n	800e6c2 <__gethex+0x3fa>
 800e6e0:	0800eccd 	.word	0x0800eccd

0800e6e4 <L_shift>:
 800e6e4:	f1c2 0208 	rsb	r2, r2, #8
 800e6e8:	0092      	lsls	r2, r2, #2
 800e6ea:	b570      	push	{r4, r5, r6, lr}
 800e6ec:	f1c2 0620 	rsb	r6, r2, #32
 800e6f0:	6843      	ldr	r3, [r0, #4]
 800e6f2:	6804      	ldr	r4, [r0, #0]
 800e6f4:	fa03 f506 	lsl.w	r5, r3, r6
 800e6f8:	40d3      	lsrs	r3, r2
 800e6fa:	432c      	orrs	r4, r5
 800e6fc:	6004      	str	r4, [r0, #0]
 800e6fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800e702:	4288      	cmp	r0, r1
 800e704:	d3f4      	bcc.n	800e6f0 <L_shift+0xc>
 800e706:	bd70      	pop	{r4, r5, r6, pc}

0800e708 <__match>:
 800e708:	6803      	ldr	r3, [r0, #0]
 800e70a:	3301      	adds	r3, #1
 800e70c:	b530      	push	{r4, r5, lr}
 800e70e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e712:	b914      	cbnz	r4, 800e71a <__match+0x12>
 800e714:	6003      	str	r3, [r0, #0]
 800e716:	2001      	movs	r0, #1
 800e718:	bd30      	pop	{r4, r5, pc}
 800e71a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e71e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e722:	2d19      	cmp	r5, #25
 800e724:	bf98      	it	ls
 800e726:	3220      	addls	r2, #32
 800e728:	42a2      	cmp	r2, r4
 800e72a:	d0f0      	beq.n	800e70e <__match+0x6>
 800e72c:	2000      	movs	r0, #0
 800e72e:	e7f3      	b.n	800e718 <__match+0x10>

0800e730 <__hexnan>:
 800e730:	680b      	ldr	r3, [r1, #0]
 800e732:	6801      	ldr	r1, [r0, #0]
 800e734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e738:	115e      	asrs	r6, r3, #5
 800e73a:	f013 031f 	ands.w	r3, r3, #31
 800e73e:	f04f 0500 	mov.w	r5, #0
 800e742:	b087      	sub	sp, #28
 800e744:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e748:	4682      	mov	sl, r0
 800e74a:	4690      	mov	r8, r2
 800e74c:	46ab      	mov	fp, r5
 800e74e:	bf18      	it	ne
 800e750:	3604      	addne	r6, #4
 800e752:	9301      	str	r3, [sp, #4]
 800e754:	9502      	str	r5, [sp, #8]
 800e756:	1f37      	subs	r7, r6, #4
 800e758:	f846 5c04 	str.w	r5, [r6, #-4]
 800e75c:	46b9      	mov	r9, r7
 800e75e:	463c      	mov	r4, r7
 800e760:	1c4b      	adds	r3, r1, #1
 800e762:	784a      	ldrb	r2, [r1, #1]
 800e764:	9303      	str	r3, [sp, #12]
 800e766:	b342      	cbz	r2, 800e7ba <__hexnan+0x8a>
 800e768:	4610      	mov	r0, r2
 800e76a:	9105      	str	r1, [sp, #20]
 800e76c:	9204      	str	r2, [sp, #16]
 800e76e:	f7ff fd96 	bl	800e29e <__hexdig_fun>
 800e772:	2800      	cmp	r0, #0
 800e774:	d151      	bne.n	800e81a <__hexnan+0xea>
 800e776:	9a04      	ldr	r2, [sp, #16]
 800e778:	9905      	ldr	r1, [sp, #20]
 800e77a:	2a20      	cmp	r2, #32
 800e77c:	d818      	bhi.n	800e7b0 <__hexnan+0x80>
 800e77e:	9b02      	ldr	r3, [sp, #8]
 800e780:	459b      	cmp	fp, r3
 800e782:	dd13      	ble.n	800e7ac <__hexnan+0x7c>
 800e784:	454c      	cmp	r4, r9
 800e786:	d206      	bcs.n	800e796 <__hexnan+0x66>
 800e788:	2d07      	cmp	r5, #7
 800e78a:	dc04      	bgt.n	800e796 <__hexnan+0x66>
 800e78c:	462a      	mov	r2, r5
 800e78e:	4649      	mov	r1, r9
 800e790:	4620      	mov	r0, r4
 800e792:	f7ff ffa7 	bl	800e6e4 <L_shift>
 800e796:	4544      	cmp	r4, r8
 800e798:	d951      	bls.n	800e83e <__hexnan+0x10e>
 800e79a:	2300      	movs	r3, #0
 800e79c:	f1a4 0904 	sub.w	r9, r4, #4
 800e7a0:	f8cd b008 	str.w	fp, [sp, #8]
 800e7a4:	f844 3c04 	str.w	r3, [r4, #-4]
 800e7a8:	461d      	mov	r5, r3
 800e7aa:	464c      	mov	r4, r9
 800e7ac:	9903      	ldr	r1, [sp, #12]
 800e7ae:	e7d7      	b.n	800e760 <__hexnan+0x30>
 800e7b0:	2a29      	cmp	r2, #41	@ 0x29
 800e7b2:	d156      	bne.n	800e862 <__hexnan+0x132>
 800e7b4:	3102      	adds	r1, #2
 800e7b6:	f8ca 1000 	str.w	r1, [sl]
 800e7ba:	f1bb 0f00 	cmp.w	fp, #0
 800e7be:	d050      	beq.n	800e862 <__hexnan+0x132>
 800e7c0:	454c      	cmp	r4, r9
 800e7c2:	d206      	bcs.n	800e7d2 <__hexnan+0xa2>
 800e7c4:	2d07      	cmp	r5, #7
 800e7c6:	dc04      	bgt.n	800e7d2 <__hexnan+0xa2>
 800e7c8:	462a      	mov	r2, r5
 800e7ca:	4649      	mov	r1, r9
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	f7ff ff89 	bl	800e6e4 <L_shift>
 800e7d2:	4544      	cmp	r4, r8
 800e7d4:	d935      	bls.n	800e842 <__hexnan+0x112>
 800e7d6:	f1a8 0204 	sub.w	r2, r8, #4
 800e7da:	4623      	mov	r3, r4
 800e7dc:	f853 1b04 	ldr.w	r1, [r3], #4
 800e7e0:	429f      	cmp	r7, r3
 800e7e2:	f842 1f04 	str.w	r1, [r2, #4]!
 800e7e6:	d2f9      	bcs.n	800e7dc <__hexnan+0xac>
 800e7e8:	1b3b      	subs	r3, r7, r4
 800e7ea:	3e03      	subs	r6, #3
 800e7ec:	3401      	adds	r4, #1
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f023 0303 	bic.w	r3, r3, #3
 800e7f4:	3304      	adds	r3, #4
 800e7f6:	42b4      	cmp	r4, r6
 800e7f8:	bf88      	it	hi
 800e7fa:	2304      	movhi	r3, #4
 800e7fc:	4443      	add	r3, r8
 800e7fe:	f843 2b04 	str.w	r2, [r3], #4
 800e802:	429f      	cmp	r7, r3
 800e804:	d2fb      	bcs.n	800e7fe <__hexnan+0xce>
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	b91b      	cbnz	r3, 800e812 <__hexnan+0xe2>
 800e80a:	4547      	cmp	r7, r8
 800e80c:	d127      	bne.n	800e85e <__hexnan+0x12e>
 800e80e:	2301      	movs	r3, #1
 800e810:	603b      	str	r3, [r7, #0]
 800e812:	2005      	movs	r0, #5
 800e814:	b007      	add	sp, #28
 800e816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e81a:	3501      	adds	r5, #1
 800e81c:	f10b 0b01 	add.w	fp, fp, #1
 800e820:	2d08      	cmp	r5, #8
 800e822:	dd05      	ble.n	800e830 <__hexnan+0x100>
 800e824:	4544      	cmp	r4, r8
 800e826:	d9c1      	bls.n	800e7ac <__hexnan+0x7c>
 800e828:	2300      	movs	r3, #0
 800e82a:	3c04      	subs	r4, #4
 800e82c:	2501      	movs	r5, #1
 800e82e:	6023      	str	r3, [r4, #0]
 800e830:	6822      	ldr	r2, [r4, #0]
 800e832:	f000 000f 	and.w	r0, r0, #15
 800e836:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e83a:	6020      	str	r0, [r4, #0]
 800e83c:	e7b6      	b.n	800e7ac <__hexnan+0x7c>
 800e83e:	2508      	movs	r5, #8
 800e840:	e7b4      	b.n	800e7ac <__hexnan+0x7c>
 800e842:	9b01      	ldr	r3, [sp, #4]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d0de      	beq.n	800e806 <__hexnan+0xd6>
 800e848:	f1c3 0320 	rsb	r3, r3, #32
 800e84c:	f04f 32ff 	mov.w	r2, #4294967295
 800e850:	40da      	lsrs	r2, r3
 800e852:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e856:	4013      	ands	r3, r2
 800e858:	f846 3c04 	str.w	r3, [r6, #-4]
 800e85c:	e7d3      	b.n	800e806 <__hexnan+0xd6>
 800e85e:	3f04      	subs	r7, #4
 800e860:	e7d1      	b.n	800e806 <__hexnan+0xd6>
 800e862:	2004      	movs	r0, #4
 800e864:	e7d6      	b.n	800e814 <__hexnan+0xe4>

0800e866 <__ascii_mbtowc>:
 800e866:	b082      	sub	sp, #8
 800e868:	b901      	cbnz	r1, 800e86c <__ascii_mbtowc+0x6>
 800e86a:	a901      	add	r1, sp, #4
 800e86c:	b142      	cbz	r2, 800e880 <__ascii_mbtowc+0x1a>
 800e86e:	b14b      	cbz	r3, 800e884 <__ascii_mbtowc+0x1e>
 800e870:	7813      	ldrb	r3, [r2, #0]
 800e872:	600b      	str	r3, [r1, #0]
 800e874:	7812      	ldrb	r2, [r2, #0]
 800e876:	1e10      	subs	r0, r2, #0
 800e878:	bf18      	it	ne
 800e87a:	2001      	movne	r0, #1
 800e87c:	b002      	add	sp, #8
 800e87e:	4770      	bx	lr
 800e880:	4610      	mov	r0, r2
 800e882:	e7fb      	b.n	800e87c <__ascii_mbtowc+0x16>
 800e884:	f06f 0001 	mvn.w	r0, #1
 800e888:	e7f8      	b.n	800e87c <__ascii_mbtowc+0x16>

0800e88a <_realloc_r>:
 800e88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e88e:	4680      	mov	r8, r0
 800e890:	4615      	mov	r5, r2
 800e892:	460c      	mov	r4, r1
 800e894:	b921      	cbnz	r1, 800e8a0 <_realloc_r+0x16>
 800e896:	4611      	mov	r1, r2
 800e898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e89c:	f7fb bccc 	b.w	800a238 <_malloc_r>
 800e8a0:	b92a      	cbnz	r2, 800e8ae <_realloc_r+0x24>
 800e8a2:	f7fd fce1 	bl	800c268 <_free_r>
 800e8a6:	2400      	movs	r4, #0
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8ae:	f000 f840 	bl	800e932 <_malloc_usable_size_r>
 800e8b2:	4285      	cmp	r5, r0
 800e8b4:	4606      	mov	r6, r0
 800e8b6:	d802      	bhi.n	800e8be <_realloc_r+0x34>
 800e8b8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e8bc:	d8f4      	bhi.n	800e8a8 <_realloc_r+0x1e>
 800e8be:	4629      	mov	r1, r5
 800e8c0:	4640      	mov	r0, r8
 800e8c2:	f7fb fcb9 	bl	800a238 <_malloc_r>
 800e8c6:	4607      	mov	r7, r0
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	d0ec      	beq.n	800e8a6 <_realloc_r+0x1c>
 800e8cc:	42b5      	cmp	r5, r6
 800e8ce:	462a      	mov	r2, r5
 800e8d0:	4621      	mov	r1, r4
 800e8d2:	bf28      	it	cs
 800e8d4:	4632      	movcs	r2, r6
 800e8d6:	f7ff fc47 	bl	800e168 <memcpy>
 800e8da:	4621      	mov	r1, r4
 800e8dc:	4640      	mov	r0, r8
 800e8de:	463c      	mov	r4, r7
 800e8e0:	f7fd fcc2 	bl	800c268 <_free_r>
 800e8e4:	e7e0      	b.n	800e8a8 <_realloc_r+0x1e>

0800e8e6 <__ascii_wctomb>:
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	4608      	mov	r0, r1
 800e8ea:	b141      	cbz	r1, 800e8fe <__ascii_wctomb+0x18>
 800e8ec:	2aff      	cmp	r2, #255	@ 0xff
 800e8ee:	d904      	bls.n	800e8fa <__ascii_wctomb+0x14>
 800e8f0:	228a      	movs	r2, #138	@ 0x8a
 800e8f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e8f6:	601a      	str	r2, [r3, #0]
 800e8f8:	4770      	bx	lr
 800e8fa:	2001      	movs	r0, #1
 800e8fc:	700a      	strb	r2, [r1, #0]
 800e8fe:	4770      	bx	lr

0800e900 <fiprintf>:
 800e900:	b40e      	push	{r1, r2, r3}
 800e902:	b503      	push	{r0, r1, lr}
 800e904:	ab03      	add	r3, sp, #12
 800e906:	4601      	mov	r1, r0
 800e908:	4805      	ldr	r0, [pc, #20]	@ (800e920 <fiprintf+0x20>)
 800e90a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e90e:	6800      	ldr	r0, [r0, #0]
 800e910:	9301      	str	r3, [sp, #4]
 800e912:	f7ff f9b5 	bl	800dc80 <_vfiprintf_r>
 800e916:	b002      	add	sp, #8
 800e918:	f85d eb04 	ldr.w	lr, [sp], #4
 800e91c:	b003      	add	sp, #12
 800e91e:	4770      	bx	lr
 800e920:	2000005c 	.word	0x2000005c

0800e924 <abort>:
 800e924:	2006      	movs	r0, #6
 800e926:	b508      	push	{r3, lr}
 800e928:	f000 f834 	bl	800e994 <raise>
 800e92c:	2001      	movs	r0, #1
 800e92e:	f7f4 fa4f 	bl	8002dd0 <_exit>

0800e932 <_malloc_usable_size_r>:
 800e932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e936:	1f18      	subs	r0, r3, #4
 800e938:	2b00      	cmp	r3, #0
 800e93a:	bfbc      	itt	lt
 800e93c:	580b      	ldrlt	r3, [r1, r0]
 800e93e:	18c0      	addlt	r0, r0, r3
 800e940:	4770      	bx	lr

0800e942 <_raise_r>:
 800e942:	291f      	cmp	r1, #31
 800e944:	b538      	push	{r3, r4, r5, lr}
 800e946:	4605      	mov	r5, r0
 800e948:	460c      	mov	r4, r1
 800e94a:	d904      	bls.n	800e956 <_raise_r+0x14>
 800e94c:	2316      	movs	r3, #22
 800e94e:	6003      	str	r3, [r0, #0]
 800e950:	f04f 30ff 	mov.w	r0, #4294967295
 800e954:	bd38      	pop	{r3, r4, r5, pc}
 800e956:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e958:	b112      	cbz	r2, 800e960 <_raise_r+0x1e>
 800e95a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e95e:	b94b      	cbnz	r3, 800e974 <_raise_r+0x32>
 800e960:	4628      	mov	r0, r5
 800e962:	f000 f831 	bl	800e9c8 <_getpid_r>
 800e966:	4622      	mov	r2, r4
 800e968:	4601      	mov	r1, r0
 800e96a:	4628      	mov	r0, r5
 800e96c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e970:	f000 b818 	b.w	800e9a4 <_kill_r>
 800e974:	2b01      	cmp	r3, #1
 800e976:	d00a      	beq.n	800e98e <_raise_r+0x4c>
 800e978:	1c59      	adds	r1, r3, #1
 800e97a:	d103      	bne.n	800e984 <_raise_r+0x42>
 800e97c:	2316      	movs	r3, #22
 800e97e:	6003      	str	r3, [r0, #0]
 800e980:	2001      	movs	r0, #1
 800e982:	e7e7      	b.n	800e954 <_raise_r+0x12>
 800e984:	2100      	movs	r1, #0
 800e986:	4620      	mov	r0, r4
 800e988:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e98c:	4798      	blx	r3
 800e98e:	2000      	movs	r0, #0
 800e990:	e7e0      	b.n	800e954 <_raise_r+0x12>
	...

0800e994 <raise>:
 800e994:	4b02      	ldr	r3, [pc, #8]	@ (800e9a0 <raise+0xc>)
 800e996:	4601      	mov	r1, r0
 800e998:	6818      	ldr	r0, [r3, #0]
 800e99a:	f7ff bfd2 	b.w	800e942 <_raise_r>
 800e99e:	bf00      	nop
 800e9a0:	2000005c 	.word	0x2000005c

0800e9a4 <_kill_r>:
 800e9a4:	b538      	push	{r3, r4, r5, lr}
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	4d06      	ldr	r5, [pc, #24]	@ (800e9c4 <_kill_r+0x20>)
 800e9aa:	4604      	mov	r4, r0
 800e9ac:	4608      	mov	r0, r1
 800e9ae:	4611      	mov	r1, r2
 800e9b0:	602b      	str	r3, [r5, #0]
 800e9b2:	f7f4 f9fd 	bl	8002db0 <_kill>
 800e9b6:	1c43      	adds	r3, r0, #1
 800e9b8:	d102      	bne.n	800e9c0 <_kill_r+0x1c>
 800e9ba:	682b      	ldr	r3, [r5, #0]
 800e9bc:	b103      	cbz	r3, 800e9c0 <_kill_r+0x1c>
 800e9be:	6023      	str	r3, [r4, #0]
 800e9c0:	bd38      	pop	{r3, r4, r5, pc}
 800e9c2:	bf00      	nop
 800e9c4:	200005e0 	.word	0x200005e0

0800e9c8 <_getpid_r>:
 800e9c8:	f7f4 b9ea 	b.w	8002da0 <_getpid>

0800e9cc <_init>:
 800e9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ce:	bf00      	nop
 800e9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9d2:	bc08      	pop	{r3}
 800e9d4:	469e      	mov	lr, r3
 800e9d6:	4770      	bx	lr

0800e9d8 <_fini>:
 800e9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9da:	bf00      	nop
 800e9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9de:	bc08      	pop	{r3}
 800e9e0:	469e      	mov	lr, r3
 800e9e2:	4770      	bx	lr
