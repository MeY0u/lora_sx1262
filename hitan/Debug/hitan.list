
hitan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e874  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067e  0800eac8  0800eac8  0000fac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f148  0800f148  00010148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f150  0800f150  00010150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  0800f158  0800f158  00010158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000218  20000000  0800f160  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003e6  20000218  0800f378  00011218  2**2
                  ALLOC
  8 ._user_heap_stack 00000602  200005fe  0800f378  000115fe  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00011218  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024d42  00000000  00000000  0001124e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ede  00000000  00000000  00035f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001958  00000000  00000000  00039e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001393  00000000  00000000  0003b7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c579  00000000  00000000  0003cb5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f301  00000000  00000000  000790d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001671e0  00000000  00000000  000983d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ff5b5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000082cc  00000000  00000000  001ff5f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  002078c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000218 	.word	0x20000218
 800026c:	00000000 	.word	0x00000000
 8000270:	0800eaac 	.word	0x0800eaac

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000021c 	.word	0x2000021c
 800028c:	0800eaac 	.word	0x0800eaac

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9b4 	b.w	8001028 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	2200      	movs	r2, #0
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d48:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14d      	bne.n	8000dec <__udivmoddi4+0xa8>
 8000d50:	428a      	cmp	r2, r1
 8000d52:	460f      	mov	r7, r1
 8000d54:	4684      	mov	ip, r0
 8000d56:	4696      	mov	lr, r2
 8000d58:	fab2 f382 	clz	r3, r2
 8000d5c:	d960      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5e:	b14b      	cbz	r3, 8000d74 <__udivmoddi4+0x30>
 8000d60:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d72:	4317      	orrs	r7, r2
 8000d74:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d78:	fa1f f48e 	uxth.w	r4, lr
 8000d7c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d80:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d84:	fb06 7711 	mls	r7, r6, r1, r7
 8000d88:	fb01 f004 	mul.w	r0, r1, r4
 8000d8c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d90:	4290      	cmp	r0, r2
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d94:	eb1e 0202 	adds.w	r2, lr, r2
 8000d98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x60>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f200 812d 	bhi.w	8000ffe <__udivmoddi4+0x2ba>
 8000da4:	4639      	mov	r1, r7
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	fa1f fc8c 	uxth.w	ip, ip
 8000dac:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db0:	fb06 2210 	mls	r2, r6, r0, r2
 8000db4:	fb00 f404 	mul.w	r4, r0, r4
 8000db8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dbc:	4564      	cmp	r4, ip
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dc0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x8c>
 8000dca:	4564      	cmp	r4, ip
 8000dcc:	f200 811a 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	ebac 0c04 	sub.w	ip, ip, r4
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b125      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000dde:	fa2c f303 	lsr.w	r3, ip, r3
 8000de2:	2200      	movs	r2, #0
 8000de4:	e9c5 3200 	strd	r3, r2, [r5]
 8000de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d905      	bls.n	8000dfc <__udivmoddi4+0xb8>
 8000df0:	b10d      	cbz	r5, 8000df6 <__udivmoddi4+0xb2>
 8000df2:	e9c5 0100 	strd	r0, r1, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	4608      	mov	r0, r1
 8000dfa:	e7f5      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000dfc:	fab3 f183 	clz	r1, r3
 8000e00:	2900      	cmp	r1, #0
 8000e02:	d14d      	bne.n	8000ea0 <__udivmoddi4+0x15c>
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	f0c0 80f2 	bcc.w	8000fee <__udivmoddi4+0x2aa>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f080 80ef 	bcs.w	8000fee <__udivmoddi4+0x2aa>
 8000e10:	4606      	mov	r6, r0
 8000e12:	4623      	mov	r3, r4
 8000e14:	4608      	mov	r0, r1
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e6      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e1a:	e9c5 6300 	strd	r6, r3, [r5]
 8000e1e:	e7e3      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f040 80a2 	bne.w	8000f6a <__udivmoddi4+0x226>
 8000e26:	1a8a      	subs	r2, r1, r2
 8000e28:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e2c:	fa1f f68e 	uxth.w	r6, lr
 8000e30:	2101      	movs	r1, #1
 8000e32:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e36:	fb07 2014 	mls	r0, r7, r4, r2
 8000e3a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e42:	fb06 f004 	mul.w	r0, r6, r4
 8000e46:	4290      	cmp	r0, r2
 8000e48:	d90f      	bls.n	8000e6a <__udivmoddi4+0x126>
 8000e4a:	eb1e 0202 	adds.w	r2, lr, r2
 8000e4e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e52:	bf2c      	ite	cs
 8000e54:	f04f 0901 	movcs.w	r9, #1
 8000e58:	f04f 0900 	movcc.w	r9, #0
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d903      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e60:	f1b9 0f00 	cmp.w	r9, #0
 8000e64:	f000 80c8 	beq.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e68:	4644      	mov	r4, r8
 8000e6a:	1a12      	subs	r2, r2, r0
 8000e6c:	fa1f fc8c 	uxth.w	ip, ip
 8000e70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e74:	fb07 2210 	mls	r2, r7, r0, r2
 8000e78:	fb00 f606 	mul.w	r6, r0, r6
 8000e7c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e80:	4566      	cmp	r6, ip
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x152>
 8000e84:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e8c:	d202      	bcs.n	8000e94 <__udivmoddi4+0x150>
 8000e8e:	4566      	cmp	r6, ip
 8000e90:	f200 80bb 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e94:	4610      	mov	r0, r2
 8000e96:	ebac 0c06 	sub.w	ip, ip, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	e79d      	b.n	8000ddc <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb2:	40f4      	lsrs	r4, r6
 8000eb4:	408a      	lsls	r2, r1
 8000eb6:	431f      	orrs	r7, r3
 8000eb8:	ea4e 030c 	orr.w	r3, lr, ip
 8000ebc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fa1f fc87 	uxth.w	ip, r7
 8000ecc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb00 f90c 	mul.w	r9, r0, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	d90e      	bls.n	8000efe <__udivmoddi4+0x1ba>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	bf2c      	ite	cs
 8000ee8:	f04f 0b01 	movcs.w	fp, #1
 8000eec:	f04f 0b00 	movcc.w	fp, #0
 8000ef0:	45a1      	cmp	r9, r4
 8000ef2:	d903      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ef4:	f1bb 0f00 	cmp.w	fp, #0
 8000ef8:	f000 8093 	beq.w	8001022 <__udivmoddi4+0x2de>
 8000efc:	4650      	mov	r0, sl
 8000efe:	eba4 0409 	sub.w	r4, r4, r9
 8000f02:	fa1f f983 	uxth.w	r9, r3
 8000f06:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f0a:	fb08 4413 	mls	r4, r8, r3, r4
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	d906      	bls.n	8000f28 <__udivmoddi4+0x1e4>
 8000f1a:	193c      	adds	r4, r7, r4
 8000f1c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f20:	d201      	bcs.n	8000f26 <__udivmoddi4+0x1e2>
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d87a      	bhi.n	800101c <__udivmoddi4+0x2d8>
 8000f26:	4643      	mov	r3, r8
 8000f28:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f2c:	eba4 040c 	sub.w	r4, r4, ip
 8000f30:	fba0 9802 	umull	r9, r8, r0, r2
 8000f34:	4544      	cmp	r4, r8
 8000f36:	46cc      	mov	ip, r9
 8000f38:	4643      	mov	r3, r8
 8000f3a:	d302      	bcc.n	8000f42 <__udivmoddi4+0x1fe>
 8000f3c:	d106      	bne.n	8000f4c <__udivmoddi4+0x208>
 8000f3e:	45ce      	cmp	lr, r9
 8000f40:	d204      	bcs.n	8000f4c <__udivmoddi4+0x208>
 8000f42:	3801      	subs	r0, #1
 8000f44:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f48:	eb68 0307 	sbc.w	r3, r8, r7
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x222>
 8000f4e:	ebbe 020c 	subs.w	r2, lr, ip
 8000f52:	eb64 0403 	sbc.w	r4, r4, r3
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	431e      	orrs	r6, r3
 8000f62:	e9c5 6400 	strd	r6, r4, [r5]
 8000f66:	2100      	movs	r1, #0
 8000f68:	e73e      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000f6a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f6e:	f1c3 0120 	rsb	r1, r3, #32
 8000f72:	fa04 f203 	lsl.w	r2, r4, r3
 8000f76:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f7a:	40cc      	lsrs	r4, r1
 8000f7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f80:	fa20 f101 	lsr.w	r1, r0, r1
 8000f84:	fa1f f68e 	uxth.w	r6, lr
 8000f88:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fb07 4410 	mls	r4, r7, r0, r4
 8000f92:	0c11      	lsrs	r1, r2, #16
 8000f94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f98:	fb00 f406 	mul.w	r4, r0, r6
 8000f9c:	428c      	cmp	r4, r1
 8000f9e:	d90e      	bls.n	8000fbe <__udivmoddi4+0x27a>
 8000fa0:	eb1e 0101 	adds.w	r1, lr, r1
 8000fa4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa8:	bf2c      	ite	cs
 8000faa:	f04f 0901 	movcs.w	r9, #1
 8000fae:	f04f 0900 	movcc.w	r9, #0
 8000fb2:	428c      	cmp	r4, r1
 8000fb4:	d902      	bls.n	8000fbc <__udivmoddi4+0x278>
 8000fb6:	f1b9 0f00 	cmp.w	r9, #0
 8000fba:	d02c      	beq.n	8001016 <__udivmoddi4+0x2d2>
 8000fbc:	4640      	mov	r0, r8
 8000fbe:	1b09      	subs	r1, r1, r4
 8000fc0:	b292      	uxth	r2, r2
 8000fc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000fca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fce:	fb04 f106 	mul.w	r1, r4, r6
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x2a2>
 8000fd6:	eb1e 0202 	adds.w	r2, lr, r2
 8000fda:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fde:	d201      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d815      	bhi.n	8001010 <__udivmoddi4+0x2cc>
 8000fe4:	4644      	mov	r4, r8
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000fec:	e721      	b.n	8000e32 <__udivmoddi4+0xee>
 8000fee:	1a86      	subs	r6, r0, r2
 8000ff0:	eb64 0303 	sbc.w	r3, r4, r3
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	e70e      	b.n	8000e16 <__udivmoddi4+0xd2>
 8000ff8:	3c02      	subs	r4, #2
 8000ffa:	4472      	add	r2, lr
 8000ffc:	e735      	b.n	8000e6a <__udivmoddi4+0x126>
 8000ffe:	3902      	subs	r1, #2
 8001000:	4472      	add	r2, lr
 8001002:	e6d0      	b.n	8000da6 <__udivmoddi4+0x62>
 8001004:	44f4      	add	ip, lr
 8001006:	3802      	subs	r0, #2
 8001008:	e6e3      	b.n	8000dd2 <__udivmoddi4+0x8e>
 800100a:	44f4      	add	ip, lr
 800100c:	3802      	subs	r0, #2
 800100e:	e742      	b.n	8000e96 <__udivmoddi4+0x152>
 8001010:	3c02      	subs	r4, #2
 8001012:	4472      	add	r2, lr
 8001014:	e7e7      	b.n	8000fe6 <__udivmoddi4+0x2a2>
 8001016:	3802      	subs	r0, #2
 8001018:	4471      	add	r1, lr
 800101a:	e7d0      	b.n	8000fbe <__udivmoddi4+0x27a>
 800101c:	3b02      	subs	r3, #2
 800101e:	443c      	add	r4, r7
 8001020:	e782      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8001022:	3802      	subs	r0, #2
 8001024:	443c      	add	r4, r7
 8001026:	e76a      	b.n	8000efe <__udivmoddi4+0x1ba>

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <_ZN5RadioC1EP16RadioCallbacks_t>:
     *
     * \param [in]  callbacks     The structure of callbacks function pointers
     *                            to be called on radio interrupts
     *
     */
    Radio( RadioCallbacks_t *callbacks )
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
    {
 8001036:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <_ZN5RadioC1EP16RadioCallbacks_t+0x68>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	601a      	str	r2, [r3, #0]
        this->txDone = callbacks->txDone;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	605a      	str	r2, [r3, #4]
        this->rxDone = callbacks->rxDone;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]
        this->rxPreambleDetect = callbacks->rxPreambleDetect;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60da      	str	r2, [r3, #12]
        this->rxSyncWordDone = callbacks->rxSyncWordDone;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	611a      	str	r2, [r3, #16]
        this->rxHeaderDone = callbacks->rxHeaderDone;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	615a      	str	r2, [r3, #20]
        this->txTimeout = callbacks->txTimeout;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
        this->rxTimeout = callbacks->rxTimeout;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	699a      	ldr	r2, [r3, #24]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	61da      	str	r2, [r3, #28]
        this->rxError = callbacks->rxError;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	69da      	ldr	r2, [r3, #28]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	621a      	str	r2, [r3, #32]
        this->cadDone = callbacks->cadDone;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	6a1a      	ldr	r2, [r3, #32]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	625a      	str	r2, [r3, #36]	@ 0x24
    }
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	0800eb90 	.word	0x0800eb90

08001098 <_ZN5RadioD1Ev>:
    virtual ~Radio( void ){ };
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <_ZN5RadioD1Ev+0x1c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	0800eb90 	.word	0x0800eb90

080010b8 <_ZN5RadioD0Ev>:
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ffe9 	bl	8001098 <_ZN5RadioD1Ev>
 80010c6:	2128      	movs	r1, #40	@ 0x28
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f009 f94a 	bl	800a362 <_ZdlPvj>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_ZN6SX126xC1EP16RadioCallbacks_t>:
    /*!
     * \brief Instantiates a SX126x object and provides API functions to communicates with the radio
     * \param [in]  callbacks      Pointer to the callbacks structure defining
     *                             all callbacks function pointers
     */
    SX126x( RadioCallbacks_t *callbacks ):
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
        Radio( callbacks )
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6839      	ldr	r1, [r7, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffa0 	bl	800102c <_ZN5RadioC1EP16RadioCallbacks_t>
 80010ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001120 <_ZN6SX126xC1EP16RadioCallbacks_t+0x48>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	601a      	str	r2, [r3, #0]
    {
        this->dioIrq      = &SX126x::OnDioIrq;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001124 <_ZN6SX126xC1EP16RadioCallbacks_t+0x4c>)
 80010f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	631a      	str	r2, [r3, #48]	@ 0x30
        this->PacketType  = PACKET_TYPE_NONE;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	220f      	movs	r2, #15
 8001102:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        this->PollingMode = false;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        this->IrqState    = false;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    }
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	0800ebc8 	.word	0x0800ebc8
 8001124:	080021ed 	.word	0x080021ed

08001128 <_ZN6SX126xD1Ev>:

    virtual ~SX126x( )
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    {
 8001130:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <_ZN6SX126xD1Ev+0x20>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
    }
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffad 	bl	8001098 <_ZN5RadioD1Ev>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	0800ebc8 	.word	0x0800ebc8

0800114c <_ZN6SX126xD0Ev>:
    virtual ~SX126x( )
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    }
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffe7 	bl	8001128 <_ZN6SX126xD1Ev>
 800115a:	2138      	movs	r1, #56	@ 0x38
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f009 f900 	bl	800a362 <_ZdlPvj>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_ZN9SX126xHalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tmmS3_tP16RadioCallbacks_t>:
#define __SX126x_HAL_CPP__

#include "sx126x-hal.hpp"
#include <cstring>

SX126xHal::SX126xHal(SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *nssPort, uint16_t nssPin,
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	807b      	strh	r3, [r7, #2]
					 uint32_t deviceChannel, GPIO_TypeDef *antSwPort, uint16_t antSwPin,
                     RadioCallbacks_t *callbacks)
    : SX126x(callbacks), hspi(spiHandle), nssPort(nssPort), nssPin(nssPin), busyPort(busyPort), busyPin(busyPin),
      dio1Port(dio1Port), dio1Pin(dio1Pin), dio2Port(dio2Port), dio2Pin(dio2Pin), dio3Port(dio3Port), dio3Pin(dio3Pin),
      rstPort(rstPort), rstPin(rstPin), freqChannel(freqChannel), deviceChannel(deviceChannel),
      antSwPort(antSwPort), antSwPin(antSwPin) {}
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffaa 	bl	80010d8 <_ZN6SX126xC1EP16RadioCallbacks_t>
 8001184:	4a21      	ldr	r2, [pc, #132]	@ (800120c <_ZN9SX126xHalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tmmS3_tP16RadioCallbacks_t+0xa0>)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]
    : SX126x(callbacks), hspi(spiHandle), nssPort(nssPort), nssPin(nssPin), busyPort(busyPort), busyPin(busyPin),
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	645a      	str	r2, [r3, #68]	@ 0x44
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	887a      	ldrh	r2, [r7, #2]
 800119a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	8bba      	ldrh	r2, [r7, #28]
 80011a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
      dio1Port(dio1Port), dio1Pin(dio1Pin), dio2Port(dio2Port), dio2Pin(dio2Pin), dio3Port(dio3Port), dio3Pin(dio3Pin),
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6a3a      	ldr	r2, [r7, #32]
 80011b0:	655a      	str	r2, [r3, #84]	@ 0x54
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80011b6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80011c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011cc:	665a      	str	r2, [r3, #100]	@ 0x64
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80011d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
      rstPort(rstPort), rstPin(rstPin), freqChannel(freqChannel), deviceChannel(deviceChannel),
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011da:	66da      	str	r2, [r3, #108]	@ 0x6c
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80011e0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80011e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011ee:	679a      	str	r2, [r3, #120]	@ 0x78
      antSwPort(antSwPort), antSwPin(antSwPin) {}
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80011f4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80011fc:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	0800eb30 	.word	0x0800eb30

08001210 <_ZN9SX126xHalD1Ev>:

SX126xHal::~SX126xHal(void) {}
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	4a05      	ldr	r2, [pc, #20]	@ (8001230 <_ZN9SX126xHalD1Ev+0x20>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff81 	bl	8001128 <_ZN6SX126xD1Ev>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	0800eb30 	.word	0x0800eb30

08001234 <_ZN9SX126xHalD0Ev>:
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffe7 	bl	8001210 <_ZN9SX126xHalD1Ev>
 8001242:	2184      	movs	r1, #132	@ 0x84
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f009 f88c 	bl	800a362 <_ZdlPvj>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN9SX126xHal7SpiInitEv>:

void SX126xHal::SpiInit(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001266:	2201      	movs	r2, #1
 8001268:	4619      	mov	r1, r3
 800126a:	f002 fe8d 	bl	8003f88 <HAL_GPIO_WritePin>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_ZN9SX126xHal9IoIrqInitEM6SX126xFvvE>:
//  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
    HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0); // Set the priority for EXTI11
    HAL_NVIC_EnableIRQ(EXTI11_IRQn); // Enable interrupt for EXTI line 11
}
*/
void SX126xHal::IoIrqInit(DioIrqHandler irqHandler) {
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	e883 0006 	stmia.w	r3, {r1, r2}
    assert_param(irqHandler != NULL);

    // Configure DIO1 pin with interrupt
    // Enable interrupt for the pin and set the priority
     HAL_NVIC_SetPriority(EXTI11_IRQn, 2, 0); // Set the priority for EXTI11
 8001284:	2200      	movs	r2, #0
 8001286:	2102      	movs	r1, #2
 8001288:	2016      	movs	r0, #22
 800128a:	f002 fb29 	bl	80038e0 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(EXTI11_IRQn); // Enable interrupt for EXTI line 11
 800128e:	2016      	movs	r0, #22
 8001290:	f002 fb40 	bl	8003914 <HAL_NVIC_EnableIRQ>
     this->dio1IrqHandler = irqHandler;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3338      	adds	r3, #56	@ 0x38
 8001298:	1d3a      	adds	r2, r7, #4
 800129a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800129e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <_ZN9SX126xHal5ResetEv>:

void SX126xHal::Reset(void) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_RESET);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	f002 fe62 	bl	8003f88 <HAL_GPIO_WritePin>
    	HAL_Delay(50);
 80012c4:	2032      	movs	r0, #50	@ 0x32
 80012c6:	f002 fa2f 	bl	8003728 <HAL_Delay>
    	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_SET);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80012d4:	2201      	movs	r2, #1
 80012d6:	4619      	mov	r1, r3
 80012d8:	f002 fe56 	bl	8003f88 <HAL_GPIO_WritePin>
    	HAL_Delay(20);
 80012dc:	2014      	movs	r0, #20
 80012de:	f002 fa23 	bl	8003728 <HAL_Delay>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <_ZN9SX126xHal6WakeupEv>:

void SX126xHal::Wakeup(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80012fe:	2200      	movs	r2, #0
 8001300:	4619      	mov	r1, r3
 8001302:	f002 fe41 	bl	8003f88 <HAL_GPIO_WritePin>
    uint8_t dummy[2] = {RADIO_GET_STATUS, 0};
 8001306:	23c0      	movs	r3, #192	@ 0xc0
 8001308:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(hspi, dummy, 2, HAL_MAX_DELAY);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800130e:	f107 010c 	add.w	r1, r7, #12
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	2202      	movs	r2, #2
 8001318:	f007 fad4 	bl	80088c4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001326:	2201      	movs	r2, #1
 8001328:	4619      	mov	r1, r3
 800132a:	f002 fe2d 	bl	8003f88 <HAL_GPIO_WritePin>
    WaitOnBusy();
 800132e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001332:	480b      	ldr	r0, [pc, #44]	@ (8001360 <_ZN9SX126xHal6WakeupEv+0x74>)
 8001334:	f002 fe10 	bl	8003f58 <HAL_GPIO_ReadPin>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	bf0c      	ite	eq
 800133e:	2301      	moveq	r3, #1
 8001340:	2300      	movne	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f2      	bne.n	800132e <_ZN9SX126xHal6WakeupEv+0x42>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001348:	b662      	cpsie	i
}
 800134a:	bf00      	nop
    __enable_irq();
    AntSwOn();
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	334c      	adds	r3, #76	@ 0x4c
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	4798      	blx	r3
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	42021000 	.word	0x42021000

08001364 <_ZN9SX126xHal12WriteCommandE15RadioCommands_ePht>:

void SX126xHal::WriteCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	461a      	mov	r2, r3
 8001370:	460b      	mov	r3, r1
 8001372:	72fb      	strb	r3, [r7, #11]
 8001374:	4613      	mov	r3, r2
 8001376:	813b      	strh	r3, [r7, #8]
	WaitOnBusy();
 8001378:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800137c:	4818      	ldr	r0, [pc, #96]	@ (80013e0 <_ZN9SX126xHal12WriteCommandE15RadioCommands_ePht+0x7c>)
 800137e:	f002 fdeb 	bl	8003f58 <HAL_GPIO_ReadPin>
 8001382:	4603      	mov	r3, r0
 8001384:	2b01      	cmp	r3, #1
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f2      	bne.n	8001378 <_ZN9SX126xHal12WriteCommandE15RadioCommands_ePht+0x14>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	f002 fdf2 	bl	8003f88 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, (uint8_t *)&command, 1, HAL_MAX_DELAY);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80013a8:	f107 010b 	add.w	r1, r7, #11
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	2201      	movs	r2, #1
 80013b2:	f007 fa87 	bl	80088c4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, buffer, size, HAL_MAX_DELAY);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80013ba:	893a      	ldrh	r2, [r7, #8]
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	f007 fa7f 	bl	80088c4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013d0:	2201      	movs	r2, #1
 80013d2:	4619      	mov	r1, r3
 80013d4:	f002 fdd8 	bl	8003f88 <HAL_GPIO_WritePin>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	42021000 	.word	0x42021000

080013e4 <_ZN9SX126xHal11ReadCommandE15RadioCommands_ePht>:

void SX126xHal::ReadCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	461a      	mov	r2, r3
 80013f0:	460b      	mov	r3, r1
 80013f2:	72fb      	strb	r3, [r7, #11]
 80013f4:	4613      	mov	r3, r2
 80013f6:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	f002 fdbf 	bl	8003f88 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, (uint8_t *)&command, 1, HAL_MAX_DELAY);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800140e:	f107 010b 	add.w	r1, r7, #11
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	2201      	movs	r2, #1
 8001418:	f007 fa54 	bl	80088c4 <HAL_SPI_Transmit>
    uint8_t dummy = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(hspi, &dummy, 1, HAL_MAX_DELAY);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001424:	f107 0117 	add.w	r1, r7, #23
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	2201      	movs	r2, #1
 800142e:	f007 fa49 	bl	80088c4 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, size, HAL_MAX_DELAY);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001436:	893a      	ldrh	r2, [r7, #8]
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	f007 fc51 	bl	8008ce4 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800144c:	2201      	movs	r2, #1
 800144e:	4619      	mov	r1, r3
 8001450:	f002 fd9a 	bl	8003f88 <HAL_GPIO_WritePin>
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_ZN9SX126xHal13WriteRegisterEtPht>:

void SX126xHal::WriteRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	461a      	mov	r2, r3
 8001468:	460b      	mov	r3, r1
 800146a:	817b      	strh	r3, [r7, #10]
 800146c:	4613      	mov	r3, r2
 800146e:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800147a:	2200      	movs	r2, #0
 800147c:	4619      	mov	r1, r3
 800147e:	f002 fd83 	bl	8003f88 <HAL_GPIO_WritePin>
    uint8_t header[3] = {RADIO_WRITE_REGISTER, (uint8_t)((address >> 8) & 0xFF), (uint8_t)(address & 0xFF)};
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	2100      	movs	r1, #0
 8001488:	460a      	mov	r2, r1
 800148a:	801a      	strh	r2, [r3, #0]
 800148c:	460a      	mov	r2, r1
 800148e:	709a      	strb	r2, [r3, #2]
 8001490:	230d      	movs	r3, #13
 8001492:	753b      	strb	r3, [r7, #20]
 8001494:	897b      	ldrh	r3, [r7, #10]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	757b      	strb	r3, [r7, #21]
 800149e:	897b      	ldrh	r3, [r7, #10]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	75bb      	strb	r3, [r7, #22]
    HAL_SPI_Transmit(hspi, header, 3, HAL_MAX_DELAY);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80014a8:	f107 0114 	add.w	r1, r7, #20
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	2203      	movs	r2, #3
 80014b2:	f007 fa07 	bl	80088c4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, buffer, size, HAL_MAX_DELAY);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80014ba:	893a      	ldrh	r2, [r7, #8]
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	f007 f9ff 	bl	80088c4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014d0:	2201      	movs	r2, #1
 80014d2:	4619      	mov	r1, r3
 80014d4:	f002 fd58 	bl	8003f88 <HAL_GPIO_WritePin>
}
 80014d8:	bf00      	nop
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_ZN9SX126xHal8WriteRegEth>:

void SX126xHal::WriteReg(uint16_t address, uint8_t value) {
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
    WriteRegister(address, &value, 1);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3318      	adds	r3, #24
 80014f6:	681c      	ldr	r4, [r3, #0]
 80014f8:	1c7a      	adds	r2, r7, #1
 80014fa:	8879      	ldrh	r1, [r7, #2]
 80014fc:	2301      	movs	r3, #1
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	47a0      	blx	r4
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bd90      	pop	{r4, r7, pc}

0800150a <_ZN9SX126xHal12ReadRegisterEtPht>:

void SX126xHal::ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	461a      	mov	r2, r3
 8001516:	460b      	mov	r3, r1
 8001518:	817b      	strh	r3, [r7, #10]
 800151a:	4613      	mov	r3, r2
 800151c:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	f002 fd2c 	bl	8003f88 <HAL_GPIO_WritePin>
    uint8_t header[3] = {RADIO_READ_REGISTER, (uint8_t)((address >> 8) & 0xFF), (uint8_t)(address & 0xFF)};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2100      	movs	r1, #0
 8001536:	460a      	mov	r2, r1
 8001538:	801a      	strh	r2, [r3, #0]
 800153a:	460a      	mov	r2, r1
 800153c:	709a      	strb	r2, [r3, #2]
 800153e:	231d      	movs	r3, #29
 8001540:	753b      	strb	r3, [r7, #20]
 8001542:	897b      	ldrh	r3, [r7, #10]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	b29b      	uxth	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	757b      	strb	r3, [r7, #21]
 800154c:	897b      	ldrh	r3, [r7, #10]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	75bb      	strb	r3, [r7, #22]
    HAL_SPI_Transmit(hspi, header, 3, HAL_MAX_DELAY);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001556:	f107 0114 	add.w	r1, r7, #20
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	2203      	movs	r2, #3
 8001560:	f007 f9b0 	bl	80088c4 <HAL_SPI_Transmit>
    uint8_t dummy = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	74fb      	strb	r3, [r7, #19]
    HAL_SPI_Transmit(hspi, &dummy, 1, HAL_MAX_DELAY);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800156c:	f107 0113 	add.w	r1, r7, #19
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	2201      	movs	r2, #1
 8001576:	f007 f9a5 	bl	80088c4 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, size, HAL_MAX_DELAY);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800157e:	893a      	ldrh	r2, [r7, #8]
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	f007 fbad 	bl	8008ce4 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001594:	2201      	movs	r2, #1
 8001596:	4619      	mov	r1, r3
 8001598:	f002 fcf6 	bl	8003f88 <HAL_GPIO_WritePin>
}
 800159c:	bf00      	nop
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_ZN9SX126xHal7ReadRegEt>:

uint8_t SX126xHal::ReadReg(uint16_t address) {
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
    uint8_t value;
    ReadRegister(address, &value, 1);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3320      	adds	r3, #32
 80015b6:	681c      	ldr	r4, [r3, #0]
 80015b8:	f107 020f 	add.w	r2, r7, #15
 80015bc:	8879      	ldrh	r1, [r7, #2]
 80015be:	2301      	movs	r3, #1
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	47a0      	blx	r4
    return value;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd90      	pop	{r4, r7, pc}

080015ce <_ZN9SX126xHal11WriteBufferEhPhh>:

void SX126xHal::WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	461a      	mov	r2, r3
 80015da:	460b      	mov	r3, r1
 80015dc:	72fb      	strb	r3, [r7, #11]
 80015de:	4613      	mov	r3, r2
 80015e0:	72bb      	strb	r3, [r7, #10]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80015ec:	2200      	movs	r2, #0
 80015ee:	4619      	mov	r1, r3
 80015f0:	f002 fcca 	bl	8003f88 <HAL_GPIO_WritePin>
    uint8_t header[2] = {RADIO_WRITE_BUFFER, offset};
 80015f4:	2300      	movs	r3, #0
 80015f6:	82bb      	strh	r3, [r7, #20]
 80015f8:	230e      	movs	r3, #14
 80015fa:	753b      	strb	r3, [r7, #20]
 80015fc:	7afb      	ldrb	r3, [r7, #11]
 80015fe:	757b      	strb	r3, [r7, #21]
    HAL_SPI_Transmit(hspi, header, 2, HAL_MAX_DELAY);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001604:	f107 0114 	add.w	r1, r7, #20
 8001608:	f04f 33ff 	mov.w	r3, #4294967295
 800160c:	2202      	movs	r2, #2
 800160e:	f007 f959 	bl	80088c4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, buffer, size, HAL_MAX_DELAY);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001616:	7abb      	ldrb	r3, [r7, #10]
 8001618:	b29a      	uxth	r2, r3
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f007 f950 	bl	80088c4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800162e:	2201      	movs	r2, #1
 8001630:	4619      	mov	r1, r3
 8001632:	f002 fca9 	bl	8003f88 <HAL_GPIO_WritePin>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_ZN9SX126xHal10ReadBufferEhPhh>:

void SX126xHal::ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	461a      	mov	r2, r3
 800164a:	460b      	mov	r3, r1
 800164c:	72fb      	strb	r3, [r7, #11]
 800164e:	4613      	mov	r3, r2
 8001650:	72bb      	strb	r3, [r7, #10]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	f002 fc92 	bl	8003f88 <HAL_GPIO_WritePin>
    uint8_t header[2] = {RADIO_READ_BUFFER, offset};
 8001664:	2300      	movs	r3, #0
 8001666:	82bb      	strh	r3, [r7, #20]
 8001668:	231e      	movs	r3, #30
 800166a:	753b      	strb	r3, [r7, #20]
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	757b      	strb	r3, [r7, #21]
    HAL_SPI_Transmit(hspi, header, 2, HAL_MAX_DELAY);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001674:	f107 0114 	add.w	r1, r7, #20
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
 800167c:	2202      	movs	r2, #2
 800167e:	f007 f921 	bl	80088c4 <HAL_SPI_Transmit>
    uint8_t dummy = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	74fb      	strb	r3, [r7, #19]
    HAL_SPI_Transmit(hspi, &dummy, 1, HAL_MAX_DELAY);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800168a:	f107 0113 	add.w	r1, r7, #19
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	2201      	movs	r2, #1
 8001694:	f007 f916 	bl	80088c4 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, size, HAL_MAX_DELAY);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800169c:	7abb      	ldrb	r3, [r7, #10]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	f007 fb1d 	bl	8008ce4 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80016b4:	2201      	movs	r2, #1
 80016b6:	4619      	mov	r1, r3
 80016b8:	f002 fc66 	bl	8003f88 <HAL_GPIO_WritePin>
}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_ZN9SX126xHal12GetDioStatusEv>:

uint8_t SX126xHal::GetDioStatus(void) {
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
    return (HAL_GPIO_ReadPin(dio3Port, dio3Pin) << 3) | (HAL_GPIO_ReadPin(dio2Port, dio2Pin) << 2) |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80016d6:	4619      	mov	r1, r3
 80016d8:	4610      	mov	r0, r2
 80016da:	f002 fc3d 	bl	8003f58 <HAL_GPIO_ReadPin>
 80016de:	4603      	mov	r3, r0
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	b25c      	sxtb	r4, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80016ee:	4619      	mov	r1, r3
 80016f0:	4610      	mov	r0, r2
 80016f2:	f002 fc31 	bl	8003f58 <HAL_GPIO_ReadPin>
 80016f6:	4603      	mov	r3, r0
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	4323      	orrs	r3, r4
 80016fe:	b25c      	sxtb	r4, r3
           (HAL_GPIO_ReadPin(dio1Port, dio1Pin) << 1) | (HAL_GPIO_ReadPin(busyPort, busyPin));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800170a:	4619      	mov	r1, r3
 800170c:	4610      	mov	r0, r2
 800170e:	f002 fc23 	bl	8003f58 <HAL_GPIO_ReadPin>
 8001712:	4603      	mov	r3, r0
 8001714:	005b      	lsls	r3, r3, #1
    return (HAL_GPIO_ReadPin(dio3Port, dio3Pin) << 3) | (HAL_GPIO_ReadPin(dio2Port, dio2Pin) << 2) |
 8001716:	b25b      	sxtb	r3, r3
 8001718:	4323      	orrs	r3, r4
 800171a:	b25c      	sxtb	r4, r3
           (HAL_GPIO_ReadPin(dio1Port, dio1Pin) << 1) | (HAL_GPIO_ReadPin(busyPort, busyPin));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001726:	4619      	mov	r1, r3
 8001728:	4610      	mov	r0, r2
 800172a:	f002 fc15 	bl	8003f58 <HAL_GPIO_ReadPin>
 800172e:	4603      	mov	r3, r0
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4323      	orrs	r3, r4
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2db      	uxtb	r3, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bd90      	pop	{r4, r7, pc}

08001740 <_ZN9SX126xHal13GetDeviceTypeEv>:

uint8_t SX126xHal::GetDeviceType(void) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
        return SX1262;
 8001748:	2301      	movs	r3, #1
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_ZN9SX126xHal13GetFreqSelectEv>:

uint8_t SX126xHal::GetFreqSelect(void) {
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
        return MATCHING_FREQ_868;
 800175e:	2306      	movs	r3, #6
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_ZN9SX126xHal7AntSwOnEv>:

void SX126xHal::AntSwOn(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(antSwPort, antSwPin, GPIO_PIN_SET);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800177e:	2201      	movs	r2, #1
 8001780:	4619      	mov	r1, r3
 8001782:	f002 fc01 	bl	8003f88 <HAL_GPIO_WritePin>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <_ZN9SX126xHal8AntSwOffEv>:

void SX126xHal::AntSwOff(void) {
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(antSwPort, antSwPin, GPIO_PIN_RESET);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80017a0:	2200      	movs	r2, #0
 80017a2:	4619      	mov	r1, r3
 80017a4:	f002 fbf0 	bl	8003f88 <HAL_GPIO_WritePin>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_ZN9SX126xHal13InvokeHandlerEv>:

// Method to invoke the handler
void SX126xHal::InvokeHandler(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	if (this->dio1IrqHandler) { // Check if the handler is set
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <_ZN9SX126xHal13InvokeHandlerEv+0x20>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <_ZN9SX126xHal13InvokeHandlerEv+0x20>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <_ZN9SX126xHal13InvokeHandlerEv+0x22>
 80017d0:	2300      	movs	r3, #0
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d01a      	beq.n	800180c <_ZN9SX126xHal13InvokeHandlerEv+0x5c>
		(this->*dio1IrqHandler)(); // Call the member function
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017dc:	1052      	asrs	r2, r2, #1
 80017de:	1899      	adds	r1, r3, r2
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <_ZN9SX126xHal13InvokeHandlerEv+0x42>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f0:	e009      	b.n	8001806 <_ZN9SX126xHal13InvokeHandlerEv+0x56>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017f8:	1052      	asrs	r2, r2, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001802:	4413      	add	r3, r2
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4608      	mov	r0, r1
 8001808:	4798      	blx	r3
    } else {
    	printf("No IRQ handler assigned!");
    }
}
 800180a:	e002      	b.n	8001812 <_ZN9SX126xHal13InvokeHandlerEv+0x62>
    	printf("No IRQ handler assigned!");
 800180c:	4803      	ldr	r0, [pc, #12]	@ (800181c <_ZN9SX126xHal13InvokeHandlerEv+0x6c>)
 800180e:	f009 fd99 	bl	800b344 <iprintf>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	0800eac8 	.word	0x0800eac8

08001820 <_ZN6SX126x4InitEv>:
 */
static bool ImageCalibrated = false;


void SX126x::Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
    CalibrationParams_t calibParam;

    Reset();
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3308      	adds	r3, #8
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
    /*
    uint32_t value = ReadReg(0x08D8);
    value = value | 0x1E;
    WriteReg(0x08D8, value);
	*/
    IoIrqInit(dioIrq);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3330      	adds	r3, #48	@ 0x30
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	322c      	adds	r2, #44	@ 0x2c
 8001840:	ca06      	ldmia	r2, {r1, r2}
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3

    Wakeup();
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	333c      	adds	r3, #60	@ 0x3c
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	4798      	blx	r3
    SetStandby(STDBY_RC);
 8001852:	2100      	movs	r1, #0
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f901 	bl	8001a5c <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t>

    // Configure TCXO or XTAL based on hardware detection logic

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 800185a:	2101      	movs	r1, #1
 800185c:	4820      	ldr	r0, [pc, #128]	@ (80018e0 <_ZN6SX126x4InitEv+0xc0>)
 800185e:	f002 fb7b 	bl	8003f58 <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <_ZN6SX126x4InitEv+0x6a>
    {
        SetDio3AsTcxoCtrl(TCXO_CTRL_1_7V, 320); // 5 ms
 8001872:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001876:	2101      	movs	r1, #1
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f9ed 	bl	8001c58 <_ZN6SX126x17SetDio3AsTcxoCtrlE22RadioTcxoCtrlVoltage_tm>
        calibParam.Value = 0x7F;
 800187e:	237f      	movs	r3, #127	@ 0x7f
 8001880:	733b      	strb	r3, [r7, #12]
        Calibrate(calibParam);
 8001882:	7b39      	ldrb	r1, [r7, #12]
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f949 	bl	8001b1c <_ZN6SX126x9CalibrateE19CalibrationParams_t>
    }

    SetPollingMode();
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fc92 	bl	80021b4 <_ZN6SX126x14SetPollingModeEv>

    AntSwOn();
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	334c      	adds	r3, #76	@ 0x4c
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	4798      	blx	r3
    SetDio2AsRfSwitchCtrl(true);
 800189c:	2101      	movs	r1, #1
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f9c7 	bl	8001c32 <_ZN6SX126x21SetDio2AsRfSwitchCtrlEh>

    OperatingMode = MODE_STDBY_RC;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    SetPacketType(PACKET_TYPE_LORA);
 80018ac:	2101      	movs	r1, #1
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 fa32 	bl	8001d18 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>

#ifdef USE_CONFIG_PUBLIC_NETWORK
    WriteReg(REG_LR_SYNCWORD, (LORA_MAC_PUBLIC_SYNCWORD >> 8) & 0xFF);
    WriteReg(REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF);
#else
    WriteReg(REG_LR_SYNCWORD, (LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	331c      	adds	r3, #28
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2214      	movs	r2, #20
 80018be:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
    WriteReg(REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	331c      	adds	r3, #28
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2224      	movs	r2, #36	@ 0x24
 80018d0:	f240 7141 	movw	r1, #1857	@ 0x741
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4798      	blx	r3
#endif
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	42020400 	.word	0x42020400

080018e4 <_ZN6SX126x16CheckDeviceReadyEv>:
{

}

void SX126x::CheckDeviceReady(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    if ((GetOperatingMode() == MODE_SLEEP) || (GetOperatingMode() == MODE_RX_DC))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3334      	adds	r3, #52	@ 0x34
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	4798      	blx	r3
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <_ZN6SX126x16CheckDeviceReadyEv+0x2c>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3334      	adds	r3, #52	@ 0x34
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	4798      	blx	r3
 800190a:	4603      	mov	r3, r0
 800190c:	2b06      	cmp	r3, #6
 800190e:	d101      	bne.n	8001914 <_ZN6SX126x16CheckDeviceReadyEv+0x30>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <_ZN6SX126x16CheckDeviceReadyEv+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <_ZN6SX126x16CheckDeviceReadyEv+0x4e>
    {
        Wakeup();
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	333c      	adds	r3, #60	@ 0x3c
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	4798      	blx	r3
        AntSwOn();
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	334c      	adds	r3, #76	@ 0x4c
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
    }
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_ZN6SX126x16GetOperatingModeEv>:

RadioOperatingModes_t SX126x::GetOperatingMode( void )
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
    return OperatingMode;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_ZN6SX126x10SetPayloadEPhh>:


void SX126x::SetPayload( uint8_t *payload, uint8_t size )
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	4613      	mov	r3, r2
 8001960:	71fb      	strb	r3, [r7, #7]
    WriteBuffer( 0x00, payload, size );
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3328      	adds	r3, #40	@ 0x28
 8001968:	681c      	ldr	r4, [r3, #0]
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	2100      	movs	r1, #0
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	47a0      	blx	r4
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bd90      	pop	{r4, r7, pc}

0800197c <_ZN6SX126x10GetPayloadEPhS0_h>:

uint8_t SX126x::GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	70fb      	strb	r3, [r7, #3]
    uint8_t offset = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]

    GetRxBufferStatus( size, &offset );
 800198e:	f107 0317 	add.w	r3, r7, #23
 8001992:	461a      	mov	r2, r3
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 fbb1 	bl	80020fe <_ZN6SX126x17GetRxBufferStatusEPhS0_>
    if( *size > maxSize )
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d201      	bcs.n	80019aa <_ZN6SX126x10GetPayloadEPhS0_h+0x2e>
    {
        return 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00a      	b.n	80019c0 <_ZN6SX126x10GetPayloadEPhS0_h+0x44>
    }
    ReadBuffer( offset, buffer, *size );
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	332c      	adds	r3, #44	@ 0x2c
 80019b0:	681c      	ldr	r4, [r3, #0]
 80019b2:	7df9      	ldrb	r1, [r7, #23]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	47a0      	blx	r4
    return 0;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	371c      	adds	r7, #28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}

080019c8 <_ZN6SX126x10SetCrcSeedEt>:
    WriteRegister( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SX126x::SetCrcSeed( uint16_t seed )
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80019d4:	887b      	ldrh	r3, [r7, #2]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	b29b      	uxth	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80019de:	887b      	ldrh	r3, [r7, #2]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	737b      	strb	r3, [r7, #13]

    switch( GetPacketType( ) )
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f9ae 	bl	8001d46 <_ZN6SX126x13GetPacketTypeEv>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10b      	bne.n	8001a08 <_ZN6SX126x10SetCrcSeedEt+0x40>
    {
        case PACKET_TYPE_GFSK:
            WriteRegister( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3318      	adds	r3, #24
 80019f6:	681c      	ldr	r4, [r3, #0]
 80019f8:	f107 020c 	add.w	r2, r7, #12
 80019fc:	2302      	movs	r3, #2
 80019fe:	f240 61bc 	movw	r1, #1724	@ 0x6bc
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	47a0      	blx	r4
            break;
 8001a06:	e000      	b.n	8001a0a <_ZN6SX126x10SetCrcSeedEt+0x42>

        default:
            break;
 8001a08:	bf00      	nop
    }
}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}

08001a12 <_ZN6SX126x16SetCrcPolynomialEt>:

void SX126x::SetCrcPolynomial( uint16_t polynomial )
{
 8001a12:	b590      	push	{r4, r7, lr}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	737b      	strb	r3, [r7, #13]

    switch( GetPacketType( ) )
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f989 	bl	8001d46 <_ZN6SX126x13GetPacketTypeEv>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10b      	bne.n	8001a52 <_ZN6SX126x16SetCrcPolynomialEt+0x40>
    {
        case PACKET_TYPE_GFSK:
            WriteRegister( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	3318      	adds	r3, #24
 8001a40:	681c      	ldr	r4, [r3, #0]
 8001a42:	f107 020c 	add.w	r2, r7, #12
 8001a46:	2302      	movs	r3, #2
 8001a48:	f240 61be 	movw	r1, #1726	@ 0x6be
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	47a0      	blx	r4
            break;
 8001a50:	e000      	b.n	8001a54 <_ZN6SX126x16SetCrcPolynomialEt+0x42>

        default:
            break;
 8001a52:	bf00      	nop
    }
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd90      	pop	{r4, r7, pc}

08001a5c <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t>:
    WriteCommand(RADIO_SET_SLEEP, &sleepConfig.Value, 1);
    OperatingMode = MODE_SLEEP;
}

void SX126x::SetStandby(RadioStandbyModes_t standbyConfig)
{
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
    WriteCommand(RADIO_SET_STANDBY, (uint8_t *)&standbyConfig, 1);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	3310      	adds	r3, #16
 8001a6e:	681c      	ldr	r4, [r3, #0]
 8001a70:	1cfa      	adds	r2, r7, #3
 8001a72:	2301      	movs	r3, #1
 8001a74:	2180      	movs	r1, #128	@ 0x80
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	47a0      	blx	r4
    OperatingMode = (standbyConfig == STDBY_RC) ? MODE_STDBY_RC : MODE_STDBY_XOSC;
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t+0x28>
 8001a80:	2201      	movs	r2, #1
 8001a82:	e000      	b.n	8001a86 <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t+0x2a>
 8001a84:	2202      	movs	r2, #2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd90      	pop	{r4, r7, pc}

08001a94 <_ZN6SX126x5SetTxEm>:

void SX126x::SetTx(uint32_t timeout)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	0c1b      	lsrs	r3, r3, #16
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t)(timeout & 0xFF);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	73bb      	strb	r3, [r7, #14]
    WriteCommand(RADIO_SET_TX, buf, 3);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	3310      	adds	r3, #16
 8001ac2:	681c      	ldr	r4, [r3, #0]
 8001ac4:	f107 020c 	add.w	r2, r7, #12
 8001ac8:	2303      	movs	r3, #3
 8001aca:	2183      	movs	r1, #131	@ 0x83
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	47a0      	blx	r4
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd90      	pop	{r4, r7, pc}

08001ad8 <_ZN6SX126x5SetRxEm>:
    buf[2] = ( uint8_t )( timeout & 0xFF );
    WriteCommand( RADIO_SET_RX, buf, 3 );
}

void SX126x::SetRx(uint32_t timeout)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2205      	movs	r2, #5
 8001ae6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t)(timeout & 0xFF);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	73bb      	strb	r3, [r7, #14]
    WriteCommand(RADIO_SET_RX, buf, 3);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3310      	adds	r3, #16
 8001b06:	681c      	ldr	r4, [r3, #0]
 8001b08:	f107 020c 	add.w	r2, r7, #12
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	2182      	movs	r1, #130	@ 0x82
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	47a0      	blx	r4
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd90      	pop	{r4, r7, pc}

08001b1c <_ZN6SX126x9CalibrateE19CalibrationParams_t>:
#endif
    WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}

void SX126x::Calibrate( CalibrationParams_t calibParam )
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	7039      	strb	r1, [r7, #0]
    WriteCommand( RADIO_CALIBRATE, &calibParam.Value, 1 );
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3310      	adds	r3, #16
 8001b2c:	681c      	ldr	r4, [r3, #0]
 8001b2e:	463a      	mov	r2, r7
 8001b30:	2301      	movs	r3, #1
 8001b32:	2189      	movs	r1, #137	@ 0x89
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	47a0      	blx	r4
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd90      	pop	{r4, r7, pc}

08001b40 <_ZN6SX126x11SetPaConfigEhhhh>:
    }
    WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
}

void SX126x::SetPaConfig( uint8_t paDutyCycle, uint8_t HpMax, uint8_t deviceSel, uint8_t paLUT )
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	4608      	mov	r0, r1
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4603      	mov	r3, r0
 8001b50:	70fb      	strb	r3, [r7, #3]
 8001b52:	460b      	mov	r3, r1
 8001b54:	70bb      	strb	r3, [r7, #2]
 8001b56:	4613      	mov	r3, r2
 8001b58:	707b      	strb	r3, [r7, #1]

#ifdef ADV_DEBUG
    printf("SetPaConfig ");
#endif

    buf[0] = paDutyCycle;
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	733b      	strb	r3, [r7, #12]
    buf[1] = HpMax;
 8001b5e:	78bb      	ldrb	r3, [r7, #2]
 8001b60:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8001b62:	787b      	ldrb	r3, [r7, #1]
 8001b64:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLUT;
 8001b66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b6a:	73fb      	strb	r3, [r7, #15]
    WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3310      	adds	r3, #16
 8001b72:	681c      	ldr	r4, [r3, #0]
 8001b74:	f107 020c 	add.w	r2, r7, #12
 8001b78:	2304      	movs	r3, #4
 8001b7a:	2195      	movs	r1, #149	@ 0x95
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	47a0      	blx	r4
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}

08001b88 <_ZN6SX126x15SetDioIrqParamsEtttt>:
{
    WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SX126x::SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	4608      	mov	r0, r1
 8001b92:	4611      	mov	r1, r2
 8001b94:	461a      	mov	r2, r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	817b      	strh	r3, [r7, #10]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	813b      	strh	r3, [r7, #8]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	80fb      	strh	r3, [r7, #6]

#ifdef ADV_DEBUG
    printf("SetDioIrqParams ");
#endif

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8001ba2:	897b      	ldrh	r3, [r7, #10]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	743b      	strb	r3, [r7, #16]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8001bac:	897b      	ldrh	r3, [r7, #10]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8001bb2:	893b      	ldrh	r3, [r7, #8]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001bbc:	893b      	ldrh	r3, [r7, #8]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8001bd2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	75bb      	strb	r3, [r7, #22]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001bdc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	75fb      	strb	r3, [r7, #23]
    WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	3310      	adds	r3, #16
 8001be8:	681c      	ldr	r4, [r3, #0]
 8001bea:	f107 0210 	add.w	r2, r7, #16
 8001bee:	2308      	movs	r3, #8
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	47a0      	blx	r4
}
 8001bf6:	bf00      	nop
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd90      	pop	{r4, r7, pc}

08001bfe <_ZN6SX126x12GetIrqStatusEv>:

uint16_t SX126x::GetIrqStatus( void )
{
 8001bfe:	b590      	push	{r4, r7, lr}
 8001c00:	b085      	sub	sp, #20
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
    uint8_t irqStatus[2];

    ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3314      	adds	r3, #20
 8001c0c:	681c      	ldr	r4, [r3, #0]
 8001c0e:	f107 020c 	add.w	r2, r7, #12
 8001c12:	2302      	movs	r3, #2
 8001c14:	2112      	movs	r1, #18
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	47a0      	blx	r4
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 8001c1a:	7b3b      	ldrb	r3, [r7, #12]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	4313      	orrs	r3, r2
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	b29b      	uxth	r3, r3
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd90      	pop	{r4, r7, pc}

08001c32 <_ZN6SX126x21SetDio2AsRfSwitchCtrlEh>:

void SX126x::SetDio2AsRfSwitchCtrl( uint8_t enable )
{
 8001c32:	b590      	push	{r4, r7, lr}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	70fb      	strb	r3, [r7, #3]
#ifdef ADV_DEBUG
    printf("SetDio2AsRfSwitchCtrl ");
#endif
    WriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3310      	adds	r3, #16
 8001c44:	681c      	ldr	r4, [r3, #0]
 8001c46:	1cfa      	adds	r2, r7, #3
 8001c48:	2301      	movs	r3, #1
 8001c4a:	219d      	movs	r1, #157	@ 0x9d
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	47a0      	blx	r4
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd90      	pop	{r4, r7, pc}

08001c58 <_ZN6SX126x17SetDio3AsTcxoCtrlE22RadioTcxoCtrlVoltage_tm>:

void SX126x::SetDio3AsTcxoCtrl(RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	460b      	mov	r3, r1
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8001c66:	7afb      	ldrb	r3, [r7, #11]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	753b      	strb	r3, [r7, #20]
    buf[1] = (uint8_t)((timeout >> 16) & 0xFF);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	0c1b      	lsrs	r3, r3, #16
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	757b      	strb	r3, [r7, #21]
    buf[2] = (uint8_t)((timeout >> 8) & 0xFF);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	0a1b      	lsrs	r3, r3, #8
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	75bb      	strb	r3, [r7, #22]
    buf[3] = (uint8_t)(timeout & 0xFF);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	75fb      	strb	r3, [r7, #23]
    WriteCommand(RADIO_SET_TCXOMODE, buf, 4);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3310      	adds	r3, #16
 8001c8c:	681c      	ldr	r4, [r3, #0]
 8001c8e:	f107 0214 	add.w	r2, r7, #20
 8001c92:	2304      	movs	r3, #4
 8001c94:	2197      	movs	r1, #151	@ 0x97
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	47a0      	blx	r4
}
 8001c9a:	bf00      	nop
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd90      	pop	{r4, r7, pc}
 8001ca2:	0000      	movs	r0, r0
 8001ca4:	0000      	movs	r0, r0
	...

08001ca8 <_ZN6SX126x14SetRfFrequencyEm>:

void SX126x::SetRfFrequency(uint32_t frequency)
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
    uint8_t buf[4];
    uint32_t freq = (uint32_t)((double)frequency / (double)FREQ_STEP);
 8001cb2:	6838      	ldr	r0, [r7, #0]
 8001cb4:	f7fe fc36 	bl	8000524 <__aeabi_ui2d>
 8001cb8:	a315      	add	r3, pc, #84	@ (adr r3, 8001d10 <_ZN6SX126x14SetRfFrequencyEm+0x68>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	f7fe fdd5 	bl	800086c <__aeabi_ddiv>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe ff7d 	bl	8000bc8 <__aeabi_d2uiz>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	60fb      	str	r3, [r7, #12]

    buf[0] = (uint8_t)((freq >> 24) & 0xFF);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	0e1b      	lsrs	r3, r3, #24
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)((freq >> 16) & 0xFF);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	0c1b      	lsrs	r3, r3, #16
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	727b      	strb	r3, [r7, #9]
    buf[2] = (uint8_t)((freq >> 8) & 0xFF);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	72bb      	strb	r3, [r7, #10]
    buf[3] = (uint8_t)(freq & 0xFF);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	72fb      	strb	r3, [r7, #11]
    WriteCommand(RADIO_SET_RFFREQUENCY, buf, 4);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	3310      	adds	r3, #16
 8001cf6:	681c      	ldr	r4, [r3, #0]
 8001cf8:	f107 0208 	add.w	r2, r7, #8
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	2186      	movs	r1, #134	@ 0x86
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	47a0      	blx	r4
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd90      	pop	{r4, r7, pc}
 8001d0c:	f3af 8000 	nop.w
 8001d10:	00000000 	.word	0x00000000
 8001d14:	3fee8480 	.word	0x3fee8480

08001d18 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>:

void SX126x::SetPacketType( RadioPacketTypes_t packetType )
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
#ifdef ADV_DEBUG
    printf("SetPacketType ");
#endif

    // Save packet type internally to avoid questioning the radio
    this->PacketType = packetType;
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3310      	adds	r3, #16
 8001d32:	681c      	ldr	r4, [r3, #0]
 8001d34:	1cfa      	adds	r2, r7, #3
 8001d36:	2301      	movs	r3, #1
 8001d38:	218a      	movs	r1, #138	@ 0x8a
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	47a0      	blx	r4
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd90      	pop	{r4, r7, pc}

08001d46 <_ZN6SX126x13GetPacketTypeEv>:

RadioPacketTypes_t SX126x::GetPacketType( void )
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
    return this->PacketType;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_ZN6SX126x11SetTxParamsEa16RadioRampTimes_t>:

void SX126x::SetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];

	SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8001d70:	2301      	movs	r3, #1
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2300      	movs	r3, #0
 8001d76:	2207      	movs	r2, #7
 8001d78:	2104      	movs	r1, #4
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fee0 	bl	8001b40 <_ZN6SX126x11SetPaConfigEhhhh>
	power = 22;
 8001d80:	2316      	movs	r3, #22
 8001d82:	70fb      	strb	r3, [r7, #3]
	WriteReg( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	331c      	adds	r3, #28
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2238      	movs	r2, #56	@ 0x38
 8001d8e:	f640 01e7 	movw	r1, #2279	@ 0x8e7
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
	buf[0] = power;
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	733b      	strb	r3, [r7, #12]
	buf[1] = RADIO_RAMP_200_US;
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	737b      	strb	r3, [r7, #13]

	WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3310      	adds	r3, #16
 8001da4:	681c      	ldr	r4, [r3, #0]
 8001da6:	f107 020c 	add.w	r2, r7, #12
 8001daa:	2302      	movs	r3, #2
 8001dac:	218e      	movs	r1, #142	@ 0x8e
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	47a0      	blx	r4
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd90      	pop	{r4, r7, pc}
 8001dba:	0000      	movs	r0, r0
 8001dbc:	0000      	movs	r0, r0
	...

08001dc0 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t>:

void SX126x::SetModulationParams( ModulationParams_t *modulationParams )
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
    uint8_t n;
    uint32_t tempVal = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001dce:	4a72      	ldr	r2, [pc, #456]	@ (8001f98 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1d8>)
 8001dd0:	f107 0308 	add.w	r3, r7, #8
 8001dd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dd8:	e883 0003 	stmia.w	r3, {r0, r1}
    printf("SetModulationParams ");
#endif

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != modulationParams->PacketType )
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d005      	beq.n	8001df6 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x36>
    {
        this->SetPacketType( modulationParams->PacketType );
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4619      	mov	r1, r3
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff91 	bl	8001d18 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( modulationParams->PacketType )
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x44>
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d04e      	beq.n	8001ea0 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0xe0>
        buf[2] = modulationParams->Params.LoRa.CodingRate;
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
        break;
    default:
    case PACKET_TYPE_NONE:
        return;
 8001e02:	e0be      	b.n	8001f82 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1c2>
        n = 8;
 8001e04:	2308      	movs	r3, #8
 8001e06:	75fb      	strb	r3, [r7, #23]
        tempVal = ( uint32_t )( 32 * ( ( double )XTAL_FREQ / ( double )modulationParams->Params.Gfsk.BitRate ) );
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fb89 	bl	8000524 <__aeabi_ui2d>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	a15c      	add	r1, pc, #368	@ (adr r1, 8001f88 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1c8>)
 8001e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e1c:	f7fe fd26 	bl	800086c <__aeabi_ddiv>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	4b5b      	ldr	r3, [pc, #364]	@ (8001f9c <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1dc>)
 8001e2e:	f7fe fbf3 	bl	8000618 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7fe fec5 	bl	8000bc8 <__aeabi_d2uiz>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	613b      	str	r3, [r7, #16]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	0c1b      	lsrs	r3, r3, #16
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	7b1b      	ldrb	r3, [r3, #12]
 8001e5c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	7b5b      	ldrb	r3, [r3, #13]
 8001e62:	733b      	strb	r3, [r7, #12]
        tempVal = ( uint32_t )( ( double )modulationParams->Params.Gfsk.Fdev / ( double )FREQ_STEP );
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb5b 	bl	8000524 <__aeabi_ui2d>
 8001e6e:	a348      	add	r3, pc, #288	@ (adr r3, 8001f90 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1d0>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	f7fe fcfa 	bl	800086c <__aeabi_ddiv>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f7fe fea2 	bl	8000bc8 <__aeabi_d2uiz>
 8001e84:	4603      	mov	r3, r0
 8001e86:	613b      	str	r3, [r7, #16]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	0c1b      	lsrs	r3, r3, #16
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	73fb      	strb	r3, [r7, #15]
        break;
 8001e9e:	e065      	b.n	8001f6c <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1ac>
        n = 4;
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	75fb      	strb	r3, [r7, #23]
        switch( modulationParams->Params.LoRa.Bandwidth )
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	7c5b      	ldrb	r3, [r3, #17]
 8001ea8:	2b0a      	cmp	r3, #10
 8001eaa:	d851      	bhi.n	8001f50 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x190>
 8001eac:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb4 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0xf4>)
 8001eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb2:	bf00      	nop
 8001eb4:	08001f49 	.word	0x08001f49
 8001eb8:	08001f49 	.word	0x08001f49
 8001ebc:	08001f49 	.word	0x08001f49
 8001ec0:	08001f19 	.word	0x08001f19
 8001ec4:	08001f01 	.word	0x08001f01
 8001ec8:	08001ee9 	.word	0x08001ee9
 8001ecc:	08001ee1 	.word	0x08001ee1
 8001ed0:	08001f51 	.word	0x08001f51
 8001ed4:	08001f49 	.word	0x08001f49
 8001ed8:	08001f49 	.word	0x08001f49
 8001edc:	08001f31 	.word	0x08001f31
                 modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	74da      	strb	r2, [r3, #19]
                break;
 8001ee6:	e034      	b.n	8001f52 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                if( modulationParams->Params.LoRa.SpreadingFactor == 12 )
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	7c1b      	ldrb	r3, [r3, #16]
 8001eec:	2b0c      	cmp	r3, #12
 8001eee:	d103      	bne.n	8001ef8 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x138>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	74da      	strb	r2, [r3, #19]
                break;
 8001ef6:	e02c      	b.n	8001f52 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2200      	movs	r2, #0
 8001efc:	74da      	strb	r2, [r3, #19]
                break;
 8001efe:	e028      	b.n	8001f52 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                if( modulationParams->Params.LoRa.SpreadingFactor >= 11 )
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	7c1b      	ldrb	r3, [r3, #16]
 8001f04:	2b0a      	cmp	r3, #10
 8001f06:	d903      	bls.n	8001f10 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x150>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	74da      	strb	r2, [r3, #19]
                break;
 8001f0e:	e020      	b.n	8001f52 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2200      	movs	r2, #0
 8001f14:	74da      	strb	r2, [r3, #19]
                break;
 8001f16:	e01c      	b.n	8001f52 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                if( modulationParams->Params.LoRa.SpreadingFactor >= 10 )
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	7c1b      	ldrb	r3, [r3, #16]
 8001f1c:	2b09      	cmp	r3, #9
 8001f1e:	d903      	bls.n	8001f28 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x168>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	2201      	movs	r2, #1
 8001f24:	74da      	strb	r2, [r3, #19]
                break;
 8001f26:	e014      	b.n	8001f52 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	74da      	strb	r2, [r3, #19]
                break;
 8001f2e:	e010      	b.n	8001f52 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                if( modulationParams->Params.LoRa.SpreadingFactor >= 9 )
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	7c1b      	ldrb	r3, [r3, #16]
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d903      	bls.n	8001f40 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x180>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	74da      	strb	r2, [r3, #19]
                break;
 8001f3e:	e008      	b.n	8001f52 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	2200      	movs	r2, #0
 8001f44:	74da      	strb	r2, [r3, #19]
                break;
 8001f46:	e004      	b.n	8001f52 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	74da      	strb	r2, [r3, #19]
                break;
 8001f4e:	e000      	b.n	8001f52 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                break;
 8001f50:	bf00      	nop
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	7c1b      	ldrb	r3, [r3, #16]
 8001f56:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	7c5b      	ldrb	r3, [r3, #17]
 8001f5c:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	7c9b      	ldrb	r3, [r3, #18]
 8001f62:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	7cdb      	ldrb	r3, [r3, #19]
 8001f68:	72fb      	strb	r3, [r7, #11]
        break;
 8001f6a:	bf00      	nop
    }
    WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	3310      	adds	r3, #16
 8001f72:	681c      	ldr	r4, [r3, #0]
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	f107 0208 	add.w	r2, r7, #8
 8001f7c:	218b      	movs	r1, #139	@ 0x8b
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	47a0      	blx	r4
}
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd90      	pop	{r4, r7, pc}
 8001f88:	00000000 	.word	0x00000000
 8001f8c:	417e8480 	.word	0x417e8480
 8001f90:	00000000 	.word	0x00000000
 8001f94:	3fee8480 	.word	0x3fee8480
 8001f98:	0800eae4 	.word	0x0800eae4
 8001f9c:	40400000 	.word	0x40400000

08001fa0 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t>:

void SX126x::SetPacketParams( PacketParams_t *packetParams )
{
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
    uint8_t n;
    uint8_t crcVal = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001fae:	4a47      	ldr	r2, [pc, #284]	@ (80020cc <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x12c>)
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fb6:	c303      	stmia	r3!, {r0, r1}
 8001fb8:	701a      	strb	r2, [r3, #0]
    printf("SetPacketParams ");
#endif

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != packetParams->PacketType )
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d005      	beq.n	8001fd4 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x34>
    {
        this->SetPacketType( packetParams->PacketType );
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff fea2 	bl	8001d18 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( packetParams->PacketType )
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x42>
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d04e      	beq.n	800207e <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0xde>
        buf[4] = packetParams->Params.LoRa.CrcMode;
        buf[5] = packetParams->Params.LoRa.InvertIQ;
        break;
    default:
    case PACKET_TYPE_NONE:
        return;
 8001fe0:	e071      	b.n	80020c6 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x126>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	7a5b      	ldrb	r3, [r3, #9]
 8001fe6:	2bf1      	cmp	r3, #241	@ 0xf1
 8001fe8:	d10c      	bne.n	8002004 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x64>
            SetCrcSeed( CRC_IBM_SEED );
 8001fea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fcea 	bl	80019c8 <_ZN6SX126x10SetCrcSeedEt>
            SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8001ff4:	f248 0105 	movw	r1, #32773	@ 0x8005
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fd0a 	bl	8001a12 <_ZN6SX126x16SetCrcPolynomialEt>
            crcVal = RADIO_CRC_2_BYTES;
 8001ffe:	2302      	movs	r3, #2
 8002000:	75bb      	strb	r3, [r7, #22]
 8002002:	e013      	b.n	800202c <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x8c>
        else if(  packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	7a5b      	ldrb	r3, [r3, #9]
 8002008:	2bf2      	cmp	r3, #242	@ 0xf2
 800200a:	d10c      	bne.n	8002026 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x86>
            SetCrcSeed( CRC_CCITT_SEED );
 800200c:	f641 510f 	movw	r1, #7439	@ 0x1d0f
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff fcd9 	bl	80019c8 <_ZN6SX126x10SetCrcSeedEt>
            SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8002016:	f241 0121 	movw	r1, #4129	@ 0x1021
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fcf9 	bl	8001a12 <_ZN6SX126x16SetCrcPolynomialEt>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8002020:	2306      	movs	r3, #6
 8002022:	75bb      	strb	r3, [r7, #22]
 8002024:	e002      	b.n	800202c <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x8c>
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	7a5b      	ldrb	r3, [r3, #9]
 800202a:	75bb      	strb	r3, [r7, #22]
        n = 9;
 800202c:	2309      	movs	r3, #9
 800202e:	75fb      	strb	r3, [r7, #23]
        packetParams->Params.Gfsk.PreambleLength = packetParams->Params.Gfsk.PreambleLength << 3;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	885b      	ldrh	r3, [r3, #2]
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	b29a      	uxth	r2, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	805a      	strh	r2, [r3, #2]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	885b      	ldrh	r3, [r3, #2]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	b29b      	uxth	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	885b      	ldrh	r3, [r3, #2]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	791b      	ldrb	r3, [r3, #4]
 8002054:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength << 3 ); // convert from byte to bit
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	795b      	ldrb	r3, [r3, #5]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	799b      	ldrb	r3, [r3, #6]
 8002064:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	79db      	ldrb	r3, [r3, #7]
 800206a:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	7a1b      	ldrb	r3, [r3, #8]
 8002070:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8002072:	7dbb      	ldrb	r3, [r7, #22]
 8002074:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	7a9b      	ldrb	r3, [r3, #10]
 800207a:	753b      	strb	r3, [r7, #20]
        break;
 800207c:	e018      	b.n	80020b0 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x110>
        n = 6;
 800207e:	2306      	movs	r3, #6
 8002080:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	899b      	ldrh	r3, [r3, #12]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	b29b      	uxth	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	899b      	ldrh	r3, [r3, #12]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.LoRa.HeaderType;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	7b9b      	ldrb	r3, [r3, #14]
 800209a:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	7bdb      	ldrb	r3, [r3, #15]
 80020a0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	7c1b      	ldrb	r3, [r3, #16]
 80020a6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	7c5b      	ldrb	r3, [r3, #17]
 80020ac:	747b      	strb	r3, [r7, #17]
        break;
 80020ae:	bf00      	nop
    }
    WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	3310      	adds	r3, #16
 80020b6:	681c      	ldr	r4, [r3, #0]
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	f107 020c 	add.w	r2, r7, #12
 80020c0:	218c      	movs	r1, #140	@ 0x8c
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	47a0      	blx	r4
}
 80020c6:	371c      	adds	r7, #28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd90      	pop	{r4, r7, pc}
 80020cc:	0800eaec 	.word	0x0800eaec

080020d0 <_ZN6SX126x9GetStatusEv>:
    buf[1] = rxBaseAddress;
    WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
}

RadioStatus_t SX126x::GetStatus( void )
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
    uint8_t stat = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
    RadioStatus_t status;

    ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3314      	adds	r3, #20
 80020e2:	681c      	ldr	r4, [r3, #0]
 80020e4:	f107 020f 	add.w	r2, r7, #15
 80020e8:	2301      	movs	r3, #1
 80020ea:	21c0      	movs	r1, #192	@ 0xc0
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	47a0      	blx	r4
    status.Value = stat;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	733b      	strb	r3, [r7, #12]
    return status;
 80020f4:	7b3b      	ldrb	r3, [r7, #12]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd90      	pop	{r4, r7, pc}

080020fe <_ZN6SX126x17GetRxBufferStatusEPhS0_>:
    ReadCommand( RADIO_GET_RSSIINST, ( uint8_t* )&rssi, 1 );
    return( -( rssi / 2 ) );
}

void SX126x::GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80020fe:	b590      	push	{r4, r7, lr}
 8002100:	b087      	sub	sp, #28
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
    uint8_t status[2];

    ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3314      	adds	r3, #20
 8002110:	681c      	ldr	r4, [r3, #0]
 8002112:	f107 0214 	add.w	r2, r7, #20
 8002116:	2302      	movs	r3, #2
 8002118:	2113      	movs	r1, #19
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	47a0      	blx	r4

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( this->GetPacketType( ) == PACKET_TYPE_LORA ) && ( ReadReg( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f7ff fe11 	bl	8001d46 <_ZN6SX126x13GetPacketTypeEv>
 8002124:	4603      	mov	r3, r0
 8002126:	2b01      	cmp	r3, #1
 8002128:	d10e      	bne.n	8002148 <_ZN6SX126x17GetRxBufferStatusEPhS0_+0x4a>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3324      	adds	r3, #36	@ 0x24
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f240 7104 	movw	r1, #1796	@ 0x704
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	4798      	blx	r3
 800213a:	4603      	mov	r3, r0
 800213c:	09db      	lsrs	r3, r3, #7
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <_ZN6SX126x17GetRxBufferStatusEPhS0_+0x4a>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <_ZN6SX126x17GetRxBufferStatusEPhS0_+0x4c>
 8002148:	2300      	movs	r3, #0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00c      	beq.n	8002168 <_ZN6SX126x17GetRxBufferStatusEPhS0_+0x6a>
    {
        *payloadLength = ReadReg( REG_LR_PAYLOADLENGTH );
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3324      	adds	r3, #36	@ 0x24
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f240 7102 	movw	r1, #1794	@ 0x702
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	4798      	blx	r3
 800215e:	4603      	mov	r3, r0
 8002160:	461a      	mov	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	e002      	b.n	800216e <_ZN6SX126x17GetRxBufferStatusEPhS0_+0x70>
    }
    else
    {
        *payloadLength = status[0];
 8002168:	7d3a      	ldrb	r2, [r7, #20]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800216e:	7d7a      	ldrb	r2, [r7, #21]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	701a      	strb	r2, [r3, #0]
}
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd90      	pop	{r4, r7, pc}

0800217c <_ZN6SX126x14ClearIrqStatusEt>:
    ReadCommand( RADIO_GET_ERROR, ( uint8_t * )&error, 2 );
    return error;
}

void SX126x::ClearIrqStatus( uint16_t irq )
{
 800217c:	b590      	push	{r4, r7, lr}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];
#ifdef ADV_DEBUG
    printf("ClearIrqStatus ");
#endif
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 8002188:	887b      	ldrh	r3, [r7, #2]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	b29b      	uxth	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3310      	adds	r3, #16
 800219e:	681c      	ldr	r4, [r3, #0]
 80021a0:	f107 020c 	add.w	r2, r7, #12
 80021a4:	2302      	movs	r3, #2
 80021a6:	2102      	movs	r1, #2
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	47a0      	blx	r4
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}

080021b4 <_ZN6SX126x14SetPollingModeEv>:

void SX126x::SetPollingMode( void )
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
    this->PollingMode = true;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <_ZN6SX126x16SetInterruptModeEv>:

void SX126x::SetInterruptMode( void )
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
    this->PollingMode = false;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <_ZN6SX126x8OnDioIrqEv>:

void SX126x::OnDioIrq( void )
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
    /*
     * When polling mode is activated, it is up to the application to call
     * ProcessIrqs( ). Otherwise, the driver automatically calls ProcessIrqs( )
     * on radio interrupt.
     */
    if( this->PollingMode == true )
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d104      	bne.n	8002208 <_ZN6SX126x8OnDioIrqEv+0x1c>
    {
        this->IrqState = true;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    }
    else
    {
        this->ProcessIrqs( );
    }
}
 8002206:	e002      	b.n	800220e <_ZN6SX126x8OnDioIrqEv+0x22>
        this->ProcessIrqs( );
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f805 	bl	8002218 <_ZN6SX126x11ProcessIrqsEv>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <_ZN6SX126x11ProcessIrqsEv>:

void SX126x::ProcessIrqs( void )
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    if( this->PollingMode == true )
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002226:	2b01      	cmp	r3, #1
 8002228:	d10d      	bne.n	8002246 <_ZN6SX126x11ProcessIrqsEv+0x2e>
    {
        if( this->IrqState == true )
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002230:	2b01      	cmp	r3, #1
 8002232:	f040 809d 	bne.w	8002370 <_ZN6SX126x11ProcessIrqsEv+0x158>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002236:	b672      	cpsid	i
}
 8002238:	bf00      	nop
        {
            __disable_irq( );
            this->IrqState = false;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002242:	b662      	cpsie	i
}
 8002244:	bf00      	nop
        {
            return;
        }
    }

    uint16_t irqRegs = GetIrqStatus( );
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fcd9 	bl	8001bfe <_ZN6SX126x12GetIrqStatusEv>
 800224c:	4603      	mov	r3, r0
 800224e:	81fb      	strh	r3, [r7, #14]
    ClearIrqStatus( IRQ_RADIO_ALL );
 8002250:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff91 	bl	800217c <_ZN6SX126x14ClearIrqStatusEt>

#ifdef ADV_DEBUG
    printf("0x%04x\n\r", irqRegs );
#endif

    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 800225a:	89fb      	ldrh	r3, [r7, #14]
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	2b00      	cmp	r3, #0
 8002262:	d02b      	beq.n	80022bc <_ZN6SX126x11ProcessIrqsEv+0xa4>
    {
        // LoRa Only
        FrequencyError = 0x000000 | ( ( 0x0F & ReadReg( REG_FREQUENCY_ERRORBASEADDR ) ) << 16 );
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3324      	adds	r3, #36	@ 0x24
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f240 716b 	movw	r1, #1899	@ 0x76b
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
 8002274:	4603      	mov	r3, r0
 8002276:	041b      	lsls	r3, r3, #16
 8002278:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800227c:	4a3e      	ldr	r2, [pc, #248]	@ (8002378 <_ZN6SX126x11ProcessIrqsEv+0x160>)
 800227e:	6013      	str	r3, [r2, #0]
        FrequencyError = FrequencyError | ( ReadReg( REG_FREQUENCY_ERRORBASEADDR + 1 ) << 8 );
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3324      	adds	r3, #36	@ 0x24
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f240 716c 	movw	r1, #1900	@ 0x76c
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
 8002290:	4603      	mov	r3, r0
 8002292:	021a      	lsls	r2, r3, #8
 8002294:	4b38      	ldr	r3, [pc, #224]	@ (8002378 <_ZN6SX126x11ProcessIrqsEv+0x160>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4313      	orrs	r3, r2
 800229a:	4a37      	ldr	r2, [pc, #220]	@ (8002378 <_ZN6SX126x11ProcessIrqsEv+0x160>)
 800229c:	6013      	str	r3, [r2, #0]
        FrequencyError = FrequencyError | ( ReadReg( REG_FREQUENCY_ERRORBASEADDR + 2 ) );
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3324      	adds	r3, #36	@ 0x24
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f240 716d 	movw	r1, #1901	@ 0x76d
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	4798      	blx	r3
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b31      	ldr	r3, [pc, #196]	@ (8002378 <_ZN6SX126x11ProcessIrqsEv+0x160>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002378 <_ZN6SX126x11ProcessIrqsEv+0x160>)
 80022ba:	6013      	str	r3, [r2, #0]
    }

    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 80022bc:	89fb      	ldrh	r3, [r7, #14]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d006      	beq.n	80022d4 <_ZN6SX126x11ProcessIrqsEv+0xbc>
    {
        if( txDone != NULL )
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <_ZN6SX126x11ProcessIrqsEv+0xbc>
        {
            txDone( );
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4798      	blx	r3
        }
    }

    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 80022d4:	89fb      	ldrh	r3, [r7, #14]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d014      	beq.n	8002308 <_ZN6SX126x11ProcessIrqsEv+0xf0>
    {
        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 80022de:	89fb      	ldrh	r3, [r7, #14]
 80022e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <_ZN6SX126x11ProcessIrqsEv+0xe2>
        {
            if( rxError != NULL )
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00b      	beq.n	8002308 <_ZN6SX126x11ProcessIrqsEv+0xf0>
            {
                rxError( IRQ_CRC_ERROR_CODE );
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	2004      	movs	r0, #4
 80022f6:	4798      	blx	r3
 80022f8:	e006      	b.n	8002308 <_ZN6SX126x11ProcessIrqsEv+0xf0>
            }
        }
        else
        {
            if( rxDone != NULL )
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <_ZN6SX126x11ProcessIrqsEv+0xf0>
            {
                rxDone( );
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	4798      	blx	r3
            }
        }
    }

    if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 8002308:	89fb      	ldrh	r3, [r7, #14]
 800230a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00f      	beq.n	8002332 <_ZN6SX126x11ProcessIrqsEv+0x11a>
    {
        if( cadDone != NULL )
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <_ZN6SX126x11ProcessIrqsEv+0x11a>
        {
            cadDone( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED );
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	89fa      	ldrh	r2, [r7, #14]
 8002320:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8002324:	2a00      	cmp	r2, #0
 8002326:	bf14      	ite	ne
 8002328:	2201      	movne	r2, #1
 800232a:	2200      	moveq	r2, #0
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	4610      	mov	r0, r2
 8002330:	4798      	blx	r3
        }
    }

    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8002332:	89fb      	ldrh	r3, [r7, #14]
 8002334:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01a      	beq.n	8002372 <_ZN6SX126x11ProcessIrqsEv+0x15a>
    {
        if( ( txTimeout != NULL ) && ( OperatingMode == MODE_TX ) )
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <_ZN6SX126x11ProcessIrqsEv+0x13e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800234a:	2b04      	cmp	r3, #4
 800234c:	d103      	bne.n	8002356 <_ZN6SX126x11ProcessIrqsEv+0x13e>
        {
            txTimeout( );
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	4798      	blx	r3
 8002354:	e00d      	b.n	8002372 <_ZN6SX126x11ProcessIrqsEv+0x15a>
        }
        else if( ( rxTimeout != NULL ) && ( OperatingMode == MODE_RX ) )
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <_ZN6SX126x11ProcessIrqsEv+0x15a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002364:	2b05      	cmp	r3, #5
 8002366:	d104      	bne.n	8002372 <_ZN6SX126x11ProcessIrqsEv+0x15a>
        {
            rxTimeout( );
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	4798      	blx	r3
 800236e:	e000      	b.n	8002372 <_ZN6SX126x11ProcessIrqsEv+0x15a>
            return;
 8002370:	bf00      	nop
        {
            rxError( IRQ_HEADER_ERROR_CODE );
        }
    }  
*/
}
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000234 	.word	0x20000234

0800237c <Lora_init>:
int8_t RssiValue = 0;
int8_t SnrValue = 0;
int8_t TxCounter = 0;
bool new_data = false;
void Lora_init()
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	Radio.Init();
 8002380:	4805      	ldr	r0, [pc, #20]	@ (8002398 <Lora_init+0x1c>)
 8002382:	f7ff fa4d 	bl	8001820 <_ZN6SX126x4InitEv>
	SetConfiguration(&radioConfiguration);
 8002386:	4805      	ldr	r0, [pc, #20]	@ (800239c <Lora_init+0x20>)
 8002388:	f000 f90c 	bl	80025a4 <SetConfiguration>
	ConfigureGeneralRadio(&Radio, &radioConfiguration);
 800238c:	4903      	ldr	r1, [pc, #12]	@ (800239c <Lora_init+0x20>)
 800238e:	4802      	ldr	r0, [pc, #8]	@ (8002398 <Lora_init+0x1c>)
 8002390:	f000 f952 	bl	8002638 <ConfigureGeneralRadio>
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000280 	.word	0x20000280
 800239c:	2000023c 	.word	0x2000023c

080023a0 <Lora_Operation_TX>:
	    	break;
	    }
	}
}
void Lora_Operation_TX()
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	Lora_init();
 80023a4:	f7ff ffea 	bl	800237c <Lora_init>

	// initialize transmitter
	TxState = SEND_PACKET;
 80023a8:	4b02      	ldr	r3, [pc, #8]	@ (80023b4 <Lora_Operation_TX+0x14>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]

	while(true){
//		HAL_Delay(50);
		RunTXStateMachine();
 80023ae:	f000 f803 	bl	80023b8 <RunTXStateMachine>
 80023b2:	e7fc      	b.n	80023ae <Lora_Operation_TX+0xe>
 80023b4:	20000238 	.word	0x20000238

080023b8 <RunTXStateMachine>:
	}
}

void RunTXStateMachine(){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
	//HAL_Delay(50);
	static uint8_t index = 0;
	if (index == MAX_INDEX)
 80023be:	4b28      	ldr	r3, [pc, #160]	@ (8002460 <RunTXStateMachine+0xa8>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2bff      	cmp	r3, #255	@ 0xff
 80023c4:	d102      	bne.n	80023cc <RunTXStateMachine+0x14>
		index = 0; //0 = Daniel, //1 = Chen
 80023c6:	4b26      	ldr	r3, [pc, #152]	@ (8002460 <RunTXStateMachine+0xa8>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
	Messages_t PingMsg = {index};
 80023cc:	4b24      	ldr	r3, [pc, #144]	@ (8002460 <RunTXStateMachine+0xa8>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	703b      	strb	r3, [r7, #0]


	Messages_t *messageToSend = &PingMsg;
 80023d2:	463b      	mov	r3, r7
 80023d4:	607b      	str	r3, [r7, #4]
    switch(TxState){
 80023d6:	4b23      	ldr	r3, [pc, #140]	@ (8002464 <RunTXStateMachine+0xac>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <RunTXStateMachine+0x2e>
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d023      	beq.n	800242c <RunTXStateMachine+0x74>

            }
            break;
        }
    }
}
 80023e4:	e037      	b.n	8002456 <RunTXStateMachine+0x9e>
        	PrepareBuffer(&Radio, messageToSend);
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	481f      	ldr	r0, [pc, #124]	@ (8002468 <RunTXStateMachine+0xb0>)
 80023ea:	f000 f86d 	bl	80024c8 <PrepareBuffer>
        	ConfigureRadioTx(&Radio, &radioConfiguration);
 80023ee:	491f      	ldr	r1, [pc, #124]	@ (800246c <RunTXStateMachine+0xb4>)
 80023f0:	481d      	ldr	r0, [pc, #116]	@ (8002468 <RunTXStateMachine+0xb0>)
 80023f2:	f000 f843 	bl	800247c <ConfigureRadioTx>
			Radio.SetTx(radioConfiguration.txTimeout);
 80023f6:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <RunTXStateMachine+0xb4>)
 80023f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023fa:	4619      	mov	r1, r3
 80023fc:	481a      	ldr	r0, [pc, #104]	@ (8002468 <RunTXStateMachine+0xb0>)
 80023fe:	f7ff fb49 	bl	8001a94 <_ZN6SX126x5SetTxEm>
        	printf("Sent = %d\n\r",index);
 8002402:	4b17      	ldr	r3, [pc, #92]	@ (8002460 <RunTXStateMachine+0xa8>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	4619      	mov	r1, r3
 8002408:	4819      	ldr	r0, [pc, #100]	@ (8002470 <RunTXStateMachine+0xb8>)
 800240a:	f008 ff9b 	bl	800b344 <iprintf>
        	index++;
 800240e:	4b14      	ldr	r3, [pc, #80]	@ (8002460 <RunTXStateMachine+0xa8>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	3301      	adds	r3, #1
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b12      	ldr	r3, [pc, #72]	@ (8002460 <RunTXStateMachine+0xa8>)
 8002418:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(SX_LED_TX_GPIO_Port, SX_LED_TX_Pin, GPIO_PIN_SET); // Turn LED On
 800241a:	2201      	movs	r2, #1
 800241c:	2102      	movs	r1, #2
 800241e:	4815      	ldr	r0, [pc, #84]	@ (8002474 <RunTXStateMachine+0xbc>)
 8002420:	f001 fdb2 	bl	8003f88 <HAL_GPIO_WritePin>
        	TxState = WAIT_SEND_DONE;
 8002424:	4b0f      	ldr	r3, [pc, #60]	@ (8002464 <RunTXStateMachine+0xac>)
 8002426:	2201      	movs	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]
            break;
 800242a:	e014      	b.n	8002456 <RunTXStateMachine+0x9e>
            if(radioFlags.txDone){
 800242c:	4b12      	ldr	r3, [pc, #72]	@ (8002478 <RunTXStateMachine+0xc0>)
 800242e:	789b      	ldrb	r3, [r3, #2]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <RunTXStateMachine+0x88>
                radioFlags.txDone = false;  // reset interrupted flag
 8002434:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <RunTXStateMachine+0xc0>)
 8002436:	2200      	movs	r2, #0
 8002438:	709a      	strb	r2, [r3, #2]
                TxState = SEND_PACKET;
 800243a:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <RunTXStateMachine+0xac>)
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
            if(radioFlags.txTimeout){
 8002440:	4b0d      	ldr	r3, [pc, #52]	@ (8002478 <RunTXStateMachine+0xc0>)
 8002442:	791b      	ldrb	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <RunTXStateMachine+0x9c>
                radioFlags.txTimeout = false;  // reset interrupted flag
 8002448:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <RunTXStateMachine+0xc0>)
 800244a:	2200      	movs	r2, #0
 800244c:	711a      	strb	r2, [r3, #4]
                TxState = SEND_PACKET;
 800244e:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <RunTXStateMachine+0xac>)
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
            break;
 8002454:	bf00      	nop
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000318 	.word	0x20000318
 8002464:	20000238 	.word	0x20000238
 8002468:	20000280 	.word	0x20000280
 800246c:	2000023c 	.word	0x2000023c
 8002470:	0800eb1c 	.word	0x0800eb1c
 8002474:	42020800 	.word	0x42020800
 8002478:	20000278 	.word	0x20000278

0800247c <ConfigureRadioTx>:

void ConfigureRadioTx(SX126xHal *radio, RadioConfigurations_t *config){
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af02      	add	r7, sp, #8
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
    radio->SetDioIrqParams(config->irqTx, config->irqTx, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8002490:	2300      	movs	r3, #0
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2300      	movs	r3, #0
 8002496:	f7ff fb77 	bl	8001b88 <_ZN6SX126x15SetDioIrqParamsEtttt>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <ConfigureRadioRx>:

void ConfigureRadioRx(SX126xHal *radio, RadioConfigurations_t *config){
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af02      	add	r7, sp, #8
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
    radio->SetDioIrqParams(config->irqRx, config->irqRx, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	8e59      	ldrh	r1, [r3, #50]	@ 0x32
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80024b6:	2300      	movs	r3, #0
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2300      	movs	r3, #0
 80024bc:	f7ff fb64 	bl	8001b88 <_ZN6SX126x15SetDioIrqParamsEtttt>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <PrepareBuffer>:

void PrepareBuffer(SX126xHal *radio, const Messages_t *messageToSend){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
    radio->SetPayload((uint8_t*)messageToSend, MESSAGE_SIZE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	6839      	ldr	r1, [r7, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fa3b 	bl	8001954 <_ZN6SX126x10SetPayloadEPhh>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <OnRxDone>:

void OnRxDone( void )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SX_LED_RX_GPIO_Port, SX_LED_RX_Pin, GPIO_PIN_SET); // Turn LED On
 80024ec:	2201      	movs	r2, #1
 80024ee:	2101      	movs	r1, #1
 80024f0:	4809      	ldr	r0, [pc, #36]	@ (8002518 <OnRxDone+0x30>)
 80024f2:	f001 fd49 	bl	8003f88 <HAL_GPIO_WritePin>
    radioFlags.rxDone= true;
 80024f6:	4b09      	ldr	r3, [pc, #36]	@ (800251c <OnRxDone+0x34>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
	Radio.GetPayload( RxBuffer, &RxBufferSize, RX_BUFFER_SIZE );
 80024fc:	2314      	movs	r3, #20
 80024fe:	4a08      	ldr	r2, [pc, #32]	@ (8002520 <OnRxDone+0x38>)
 8002500:	4908      	ldr	r1, [pc, #32]	@ (8002524 <OnRxDone+0x3c>)
 8002502:	4809      	ldr	r0, [pc, #36]	@ (8002528 <OnRxDone+0x40>)
 8002504:	f7ff fa3a 	bl	800197c <_ZN6SX126x10GetPayloadEPhS0_h>
    HAL_GPIO_WritePin(SX_LED_RX_GPIO_Port, SX_LED_RX_Pin, GPIO_PIN_RESET); // Turn LED On
 8002508:	2200      	movs	r2, #0
 800250a:	2101      	movs	r1, #1
 800250c:	4802      	ldr	r0, [pc, #8]	@ (8002518 <OnRxDone+0x30>)
 800250e:	f001 fd3b 	bl	8003f88 <HAL_GPIO_WritePin>
//	RunRXStateMachine();


}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	42020800 	.word	0x42020800
 800251c:	20000278 	.word	0x20000278
 8002520:	20000024 	.word	0x20000024
 8002524:	20000304 	.word	0x20000304
 8002528:	20000280 	.word	0x20000280

0800252c <OnRxTimeout>:

void OnRxTimeout( void )
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
    radioFlags.rxTimeout = true;
 8002530:	4b03      	ldr	r3, [pc, #12]	@ (8002540 <OnRxTimeout+0x14>)
 8002532:	2201      	movs	r2, #1
 8002534:	70da      	strb	r2, [r3, #3]
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	20000278 	.word	0x20000278

08002544 <OnRxError>:

void OnRxError( IrqErrorCode_t errCode )
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
    radioFlags.rxError = true;
 800254e:	4b04      	ldr	r3, [pc, #16]	@ (8002560 <OnRxError+0x1c>)
 8002550:	2201      	movs	r2, #1
 8002552:	705a      	strb	r2, [r3, #1]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	20000278 	.word	0x20000278

08002564 <OnTxDone>:

void OnTxDone( void )
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
    radioFlags.txDone = true;
 8002568:	4b04      	ldr	r3, [pc, #16]	@ (800257c <OnTxDone+0x18>)
 800256a:	2201      	movs	r2, #1
 800256c:	709a      	strb	r2, [r3, #2]
    HAL_GPIO_WritePin(SX_LED_TX_GPIO_Port, SX_LED_TX_Pin, GPIO_PIN_RESET); // Turn LED On
 800256e:	2200      	movs	r2, #0
 8002570:	2102      	movs	r1, #2
 8002572:	4803      	ldr	r0, [pc, #12]	@ (8002580 <OnTxDone+0x1c>)
 8002574:	f001 fd08 	bl	8003f88 <HAL_GPIO_WritePin>
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000278 	.word	0x20000278
 8002580:	42020800 	.word	0x42020800

08002584 <OnTxTimeout>:

void OnTxTimeout( void )
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
    radioFlags.txTimeout = true;
 8002588:	4b04      	ldr	r3, [pc, #16]	@ (800259c <OnTxTimeout+0x18>)
 800258a:	2201      	movs	r2, #1
 800258c:	711a      	strb	r2, [r3, #4]
    HAL_GPIO_WritePin(SX_LED_TX_GPIO_Port, SX_LED_TX_Pin, GPIO_PIN_RESET); // Turn LED On
 800258e:	2200      	movs	r2, #0
 8002590:	2102      	movs	r1, #2
 8002592:	4803      	ldr	r0, [pc, #12]	@ (80025a0 <OnTxTimeout+0x1c>)
 8002594:	f001 fcf8 	bl	8003f88 <HAL_GPIO_WritePin>
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000278 	.word	0x20000278
 80025a0:	42020800 	.word	0x42020800

080025a4 <SetConfiguration>:

void SetConfiguration(RadioConfigurations_t *config){
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
    config->irqRx = IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f240 2202 	movw	r2, #514	@ 0x202
 80025b2:	865a      	strh	r2, [r3, #50]	@ 0x32
    config->irqTx = IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f240 2201 	movw	r2, #513	@ 0x201
 80025ba:	861a      	strh	r2, [r3, #48]	@ 0x30
    config->rfFrequency = RF_FREQUENCY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a1d      	ldr	r2, [pc, #116]	@ (8002634 <SetConfiguration+0x90>)
 80025c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    config->rxTimeout = RX_TIMEOUT_US;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80025c8:	639a      	str	r2, [r3, #56]	@ 0x38
    config->txPower = TX_OUTPUT_POWER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2216      	movs	r2, #22
 80025ce:	705a      	strb	r2, [r3, #1]
    config->txRampTime = RADIO_RAMP_10_US;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	709a      	strb	r2, [r3, #2]
    config->packetType = PACKET_TYPE_LORA;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
    config->modParams.PacketType = PACKET_TYPE_LORA;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	711a      	strb	r2, [r3, #4]
    config->modParams.Params.LoRa.Bandwidth = LORA_BANDWIDTH;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2206      	movs	r2, #6
 80025e6:	755a      	strb	r2, [r3, #21]
    config->modParams.Params.LoRa.CodingRate = LORA_CODINGRATE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	759a      	strb	r2, [r3, #22]
    config->modParams.Params.LoRa.LowDatarateOptimize = LORA_LOWDATARATEOPTIMIZE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	75da      	strb	r2, [r3, #23]
    config->modParams.Params.LoRa.SpreadingFactor = LORA_SPREADING_FACTOR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	220a      	movs	r2, #10
 80025f8:	751a      	strb	r2, [r3, #20]
    config->packetParams.PacketType = PACKET_TYPE_LORA;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	761a      	strb	r2, [r3, #24]
    config->packetParams.Params.LoRa.CrcMode = LORA_CRC_MODE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    config->packetParams.Params.LoRa.HeaderType = LORA_HEADER_TYPE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    config->packetParams.Params.LoRa.InvertIQ = LORA_IQ;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    config->packetParams.Params.LoRa.PayloadLength = BUFFER_SIZE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2204      	movs	r2, #4
 800261c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    config->packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2210      	movs	r2, #16
 8002624:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	33bca100 	.word	0x33bca100

08002638 <ConfigureGeneralRadio>:
void ChangeConfigurations(RadioConfigurations_t *config, RadioLoRaBandwidths_t bw, RadioLoRaCodingRates_t cr, RadioLoRaSpreadingFactors_t sf){
	config->modParams.Params.LoRa.Bandwidth = bw;
	config->modParams.Params.LoRa.CodingRate = cr;
    config->modParams.Params.LoRa.SpreadingFactor = sf;
}
void ConfigureGeneralRadio(SX126xHal *radio, RadioConfigurations_t *config){
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
    radio->SetPacketType(config->packetType);
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4619      	mov	r1, r3
 800264a:	4610      	mov	r0, r2
 800264c:	f7ff fb64 	bl	8001d18 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>
    radio->SetPacketParams(&config->packetParams);
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	3318      	adds	r3, #24
 8002656:	4619      	mov	r1, r3
 8002658:	4610      	mov	r0, r2
 800265a:	f7ff fca1 	bl	8001fa0 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t>
    radio->SetModulationParams(&config->modParams);
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	3304      	adds	r3, #4
 8002664:	4619      	mov	r1, r3
 8002666:	4610      	mov	r0, r2
 8002668:	f7ff fbaa 	bl	8001dc0 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t>
    radio->SetRfFrequency(config->rfFrequency);
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002672:	4619      	mov	r1, r3
 8002674:	4610      	mov	r0, r2
 8002676:	f7ff fb17 	bl	8001ca8 <_ZN6SX126x14SetRfFrequencyEm>
    radio->SetTxParams(config->txPower, config->txRampTime);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	789b      	ldrb	r3, [r3, #2]
 8002686:	461a      	mov	r2, r3
 8002688:	f7ff fb6a 	bl	8001d60 <_ZN6SX126x11SetTxParamsEa16RadioRampTimes_t>
    radio->SetInterruptMode();
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fd9e 	bl	80021d0 <_ZN6SX126x16SetInterruptModeEv>
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
  if(GPIO_Pin == SX_DIO1_Pin){
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026ac:	d10c      	bne.n	80026c8 <HAL_GPIO_EXTI_Rising_Callback+0x2c>
	  Radio.InvokeHandler();
 80026ae:	4808      	ldr	r0, [pc, #32]	@ (80026d0 <HAL_GPIO_EXTI_Rising_Callback+0x34>)
 80026b0:	f7ff f87e 	bl	80017b0 <_ZN9SX126xHal13InvokeHandlerEv>
	  ConfigureRadioRx(&Radio, &radioConfiguration);
 80026b4:	4907      	ldr	r1, [pc, #28]	@ (80026d4 <HAL_GPIO_EXTI_Rising_Callback+0x38>)
 80026b6:	4806      	ldr	r0, [pc, #24]	@ (80026d0 <HAL_GPIO_EXTI_Rising_Callback+0x34>)
 80026b8:	f7ff fef3 	bl	80024a2 <ConfigureRadioRx>
	  Radio.SetRx(radioConfiguration.rxTimeout);
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <HAL_GPIO_EXTI_Rising_Callback+0x38>)
 80026be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c0:	4619      	mov	r1, r3
 80026c2:	4803      	ldr	r0, [pc, #12]	@ (80026d0 <HAL_GPIO_EXTI_Rising_Callback+0x34>)
 80026c4:	f7ff fa08 	bl	8001ad8 <_ZN6SX126x5SetRxEm>
  }
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000280 	.word	0x20000280
 80026d4:	2000023c 	.word	0x2000023c

080026d8 <_Z41__static_initialization_and_destruction_0ii>:
    PacketStatus_t pkt_stat;
    Radio.GetPacketStatus(&pkt_stat);
    *rssi = pkt_stat.Params.LoRa.RssiPkt;
    *snr = pkt_stat.Params.LoRa.SnrPkt;

}
 80026d8:	b580      	push	{r7, lr}
 80026da:	b092      	sub	sp, #72	@ 0x48
 80026dc:	af10      	add	r7, sp, #64	@ 0x40
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d12c      	bne.n	8002742 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d127      	bne.n	8002742 <_Z41__static_initialization_and_destruction_0ii+0x6a>
				SX_ANT_SW_GPIO_Port, SX_ANT_SW_Pin, &RadioEvents);
 80026f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80026f4:	930e      	str	r3, [sp, #56]	@ 0x38
 80026f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80026fc:	4b19      	ldr	r3, [pc, #100]	@ (8002764 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80026fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8002700:	2308      	movs	r3, #8
 8002702:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002704:	2304      	movs	r3, #4
 8002706:	930a      	str	r3, [sp, #40]	@ 0x28
 8002708:	2308      	movs	r3, #8
 800270a:	9309      	str	r3, [sp, #36]	@ 0x24
 800270c:	4b16      	ldr	r3, [pc, #88]	@ (8002768 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800270e:	9308      	str	r3, [sp, #32]
 8002710:	2300      	movs	r3, #0
 8002712:	9307      	str	r3, [sp, #28]
 8002714:	2300      	movs	r3, #0
 8002716:	9306      	str	r3, [sp, #24]
 8002718:	2300      	movs	r3, #0
 800271a:	9305      	str	r3, [sp, #20]
 800271c:	2300      	movs	r3, #0
 800271e:	9304      	str	r3, [sp, #16]
 8002720:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002724:	9303      	str	r3, [sp, #12]
 8002726:	4b11      	ldr	r3, [pc, #68]	@ (800276c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002728:	9302      	str	r3, [sp, #8]
 800272a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	4b0e      	ldr	r3, [pc, #56]	@ (800276c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002738:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800273a:	490d      	ldr	r1, [pc, #52]	@ (8002770 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800273c:	480d      	ldr	r0, [pc, #52]	@ (8002774 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800273e:	f7fe fd15 	bl	800116c <_ZN9SX126xHalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tmmS3_tP16RadioCallbacks_t>
SX126xHal Radio(&hspi1, SX_SPI1_CS_GPIO_Port, SX_SPI1_CS_Pin,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d107      	bne.n	8002758 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800274e:	4293      	cmp	r3, r2
 8002750:	d102      	bne.n	8002758 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8002752:	4808      	ldr	r0, [pc, #32]	@ (8002774 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002754:	f7fe fd5c 	bl	8001210 <_ZN9SX126xHalD1Ev>
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000000 	.word	0x20000000
 8002764:	42021400 	.word	0x42021400
 8002768:	42020000 	.word	0x42020000
 800276c:	42021000 	.word	0x42021000
 8002770:	2000032c 	.word	0x2000032c
 8002774:	20000280 	.word	0x20000280

08002778 <_GLOBAL__sub_I_TxState>:
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
 800277c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002780:	2001      	movs	r0, #1
 8002782:	f7ff ffa9 	bl	80026d8 <_Z41__static_initialization_and_destruction_0ii>
 8002786:	bd80      	pop	{r7, pc}

08002788 <_GLOBAL__sub_D_TxState>:
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
 800278c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002790:	2000      	movs	r0, #0
 8002792:	f7ff ffa1 	bl	80026d8 <_Z41__static_initialization_and_destruction_0ii>
 8002796:	bd80      	pop	{r7, pc}

08002798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800279c:	f000 fefe 	bl	800359c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027a0:	f000 f83c 	bl	800281c <_Z18SystemClock_Configv>

  /* Configure the System Power */
  SystemPower_Config();
 80027a4:	f000 f8a5 	bl	80028f2 <_ZL18SystemPower_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027a8:	f000 f9a8 	bl	8002afc <_ZL12MX_GPIO_Initv>
  MX_ICACHE_Init();
 80027ac:	f000 f8b4 	bl	8002918 <_ZL14MX_ICACHE_Initv>
  MX_SPI1_Init();
 80027b0:	f000 f8d0 	bl	8002954 <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 80027b4:	f000 f946 	bl	8002a44 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f000 fce5 	bl	8003188 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80027be:	2001      	movs	r0, #1
 80027c0:	f000 fce2 	bl	8003188 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80027c4:	2002      	movs	r0, #2
 80027c6:	f000 fcdf 	bl	8003188 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80027ca:	2101      	movs	r1, #1
 80027cc:	2000      	movs	r0, #0
 80027ce:	f000 fd6b 	bl	80032a8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80027d2:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <main+0x80>)
 80027d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027d8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80027da:	4b0f      	ldr	r3, [pc, #60]	@ (8002818 <main+0x80>)
 80027dc:	2200      	movs	r2, #0
 80027de:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80027e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <main+0x80>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80027e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <main+0x80>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80027ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002818 <main+0x80>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80027f2:	4909      	ldr	r1, [pc, #36]	@ (8002818 <main+0x80>)
 80027f4:	2000      	movs	r0, #0
 80027f6:	f000 fdf1 	bl	80033dc <BSP_COM_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf14      	ite	ne
 8002800:	2301      	movne	r3, #1
 8002802:	2300      	moveq	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <main+0x76>
  {
    Error_Handler();
 800280a:	f000 faad 	bl	8002d68 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  Lora_Operation_TX();
 800280e:	f7ff fdc7 	bl	80023a0 <Lora_Operation_TX>
//  Lora_Operation_RX();
  while (1)
 8002812:	bf00      	nop
 8002814:	e7fd      	b.n	8002812 <main+0x7a>
 8002816:	bf00      	nop
 8002818:	2000031c 	.word	0x2000031c

0800281c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b09e      	sub	sp, #120	@ 0x78
 8002820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002822:	f107 0318 	add.w	r3, r7, #24
 8002826:	2260      	movs	r2, #96	@ 0x60
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f008 fdff 	bl	800b42e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002830:	463b      	mov	r3, r7
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	60da      	str	r2, [r3, #12]
 800283c:	611a      	str	r2, [r3, #16]
 800283e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002840:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8002844:	f001 fc1a 	bl	800407c <HAL_PWREx_ControlVoltageScaling>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	bf14      	ite	ne
 800284e:	2301      	movne	r3, #1
 8002850:	2300      	moveq	r3, #0
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <_Z18SystemClock_Configv+0x40>
  {
    Error_Handler();
 8002858:	f000 fa86 	bl	8002d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800285c:	2310      	movs	r3, #16
 800285e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002860:	2301      	movs	r3, #1
 8002862:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002864:	2310      	movs	r3, #16
 8002866:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8002868:	2300      	movs	r3, #0
 800286a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800286c:	2302      	movs	r3, #2
 800286e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002870:	2301      	movs	r3, #1
 8002872:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8002874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002878:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 800287a:	2303      	movs	r3, #3
 800287c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800287e:	230a      	movs	r3, #10
 8002880:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8002882:	2308      	movs	r3, #8
 8002884:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002886:	2302      	movs	r3, #2
 8002888:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800288a:	2301      	movs	r3, #1
 800288c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800288e:	230c      	movs	r3, #12
 8002890:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002896:	f107 0318 	add.w	r3, r7, #24
 800289a:	4618      	mov	r0, r3
 800289c:	f001 fcea 	bl	8004274 <HAL_RCC_OscConfig>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bf14      	ite	ne
 80028a6:	2301      	movne	r3, #1
 80028a8:	2300      	moveq	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 80028b0:	f000 fa5a 	bl	8002d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028b4:	231f      	movs	r3, #31
 80028b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028b8:	2303      	movs	r3, #3
 80028ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028bc:	2300      	movs	r3, #0
 80028be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80028c4:	2350      	movs	r3, #80	@ 0x50
 80028c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80028cc:	463b      	mov	r3, r7
 80028ce:	2104      	movs	r1, #4
 80028d0:	4618      	mov	r0, r3
 80028d2:	f002 fbab 	bl	800502c <HAL_RCC_ClockConfig>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 80028e6:	f000 fa3f 	bl	8002d68 <Error_Handler>
  }
}
 80028ea:	bf00      	nop
 80028ec:	3778      	adds	r7, #120	@ 0x78
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <_ZL18SystemPower_Configv>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80028f6:	f001 fcad 	bl	8004254 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80028fa:	2002      	movs	r0, #2
 80028fc:	f001 fc4a 	bl	8004194 <HAL_PWREx_ConfigSupply>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf14      	ite	ne
 8002906:	2301      	movne	r3, #1
 8002908:	2300      	moveq	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <_ZL18SystemPower_Configv+0x22>
  {
    Error_Handler();
 8002910:	f000 fa2a 	bl	8002d68 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}

08002918 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800291c:	2000      	movs	r0, #0
 800291e:	f001 fb7d 	bl	800401c <HAL_ICACHE_ConfigAssociativityMode>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf14      	ite	ne
 8002928:	2301      	movne	r3, #1
 800292a:	2300      	moveq	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 8002932:	f000 fa19 	bl	8002d68 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8002936:	f001 fb91 	bl	800405c <HAL_ICACHE_Enable>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf14      	ite	ne
 8002940:	2301      	movne	r3, #1
 8002942:	2300      	moveq	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 800294a:	f000 fa0d 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002964:	4b35      	ldr	r3, [pc, #212]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 8002966:	4a36      	ldr	r2, [pc, #216]	@ (8002a40 <_ZL12MX_SPI1_Initv+0xec>)
 8002968:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800296a:	4b34      	ldr	r3, [pc, #208]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 800296c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002970:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002972:	4b32      	ldr	r3, [pc, #200]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002978:	4b30      	ldr	r3, [pc, #192]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 800297a:	2207      	movs	r2, #7
 800297c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800297e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002984:	4b2d      	ldr	r3, [pc, #180]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 8002986:	2200      	movs	r2, #0
 8002988:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800298a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 800298c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002990:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002992:	4b2a      	ldr	r3, [pc, #168]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 8002994:	2200      	movs	r2, #0
 8002996:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002998:	4b28      	ldr	r3, [pc, #160]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 800299a:	2200      	movs	r2, #0
 800299c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800299e:	4b27      	ldr	r3, [pc, #156]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a4:	4b25      	ldr	r3, [pc, #148]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80029aa:	4b24      	ldr	r3, [pc, #144]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 80029ac:	2207      	movs	r2, #7
 80029ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029b0:	4b22      	ldr	r3, [pc, #136]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 80029b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80029b8:	4b20      	ldr	r3, [pc, #128]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80029be:	4b1f      	ldr	r3, [pc, #124]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80029c4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80029ca:	4b1c      	ldr	r3, [pc, #112]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80029d0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80029d6:	4b19      	ldr	r3, [pc, #100]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 80029d8:	2200      	movs	r2, #0
 80029da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80029dc:	4b17      	ldr	r3, [pc, #92]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 80029de:	2200      	movs	r2, #0
 80029e0:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80029e2:	4b16      	ldr	r3, [pc, #88]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80029e8:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029ee:	4813      	ldr	r0, [pc, #76]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 80029f0:	f005 fe52 	bl	8008698 <HAL_SPI_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bf14      	ite	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	2300      	moveq	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <_ZL12MX_SPI1_Initv+0xb4>
  {
    Error_Handler();
 8002a04:	f000 f9b0 	bl	8002d68 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8002a0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002a10:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4808      	ldr	r0, [pc, #32]	@ (8002a3c <_ZL12MX_SPI1_Initv+0xe8>)
 8002a1c:	f006 fbed 	bl	80091fa <HAL_SPIEx_SetConfigAutonomousMode>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	bf14      	ite	ne
 8002a26:	2301      	movne	r3, #1
 8002a28:	2300      	moveq	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <_ZL12MX_SPI1_Initv+0xe0>
  {
    Error_Handler();
 8002a30:	f000 f99a 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	2000032c 	.word	0x2000032c
 8002a40:	40013000 	.word	0x40013000

08002a44 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a4a:	f107 0310 	add.w	r3, r7, #16
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	605a      	str	r2, [r3, #4]
 8002a60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a62:	4b25      	ldr	r3, [pc, #148]	@ (8002af8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002a64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a6a:	4b23      	ldr	r3, [pc, #140]	@ (8002af8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a70:	4b21      	ldr	r3, [pc, #132]	@ (8002af8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a76:	4b20      	ldr	r3, [pc, #128]	@ (8002af8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002af8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a84:	4b1c      	ldr	r3, [pc, #112]	@ (8002af8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a8a:	481b      	ldr	r0, [pc, #108]	@ (8002af8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002a8c:	f006 fbf6 	bl	800927c <HAL_TIM_Base_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf14      	ite	ne
 8002a96:	2301      	movne	r3, #1
 8002a98:	2300      	moveq	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8002aa0:	f000 f962 	bl	8002d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002aaa:	f107 0310 	add.w	r3, r7, #16
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4811      	ldr	r0, [pc, #68]	@ (8002af8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002ab2:	f006 fc3b 	bl	800932c <HAL_TIM_ConfigClockSource>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8002ac6:	f000 f94f 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4808      	ldr	r0, [pc, #32]	@ (8002af8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002ad8:	f006 fecc 	bl	8009874 <HAL_TIMEx_MasterConfigSynchronization>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bf14      	ite	ne
 8002ae2:	2301      	movne	r3, #1
 8002ae4:	2300      	moveq	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8002aec:	f000 f93c 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002af0:	bf00      	nop
 8002af2:	3720      	adds	r7, #32
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	200003bc 	.word	0x200003bc

08002afc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	@ 0x30
 8002b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b02:	f107 031c 	add.w	r3, r7, #28
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	60da      	str	r2, [r3, #12]
 8002b10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b12:	4b8e      	ldr	r3, [pc, #568]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b18:	4a8c      	ldr	r2, [pc, #560]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b22:	4b8a      	ldr	r3, [pc, #552]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b30:	4b86      	ldr	r3, [pc, #536]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b36:	4a85      	ldr	r2, [pc, #532]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b3c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b40:	4b82      	ldr	r3, [pc, #520]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b54:	4a7d      	ldr	r2, [pc, #500]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b5e:	4b7b      	ldr	r3, [pc, #492]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6c:	4b77      	ldr	r3, [pc, #476]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b72:	4a76      	ldr	r2, [pc, #472]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002b74:	f043 0302 	orr.w	r3, r3, #2
 8002b78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b7c:	4b73      	ldr	r3, [pc, #460]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b8a:	4b70      	ldr	r3, [pc, #448]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b90:	4a6e      	ldr	r2, [pc, #440]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002b92:	f043 0320 	orr.w	r3, r3, #32
 8002b96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b9a:	4b6c      	ldr	r3, [pc, #432]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ba8:	4b68      	ldr	r3, [pc, #416]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bae:	4a67      	ldr	r2, [pc, #412]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002bb0:	f043 0310 	orr.w	r3, r3, #16
 8002bb4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002bb8:	4b64      	ldr	r3, [pc, #400]	@ (8002d4c <_ZL12MX_GPIO_Initv+0x250>)
 8002bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SX_LED_RX_Pin|SX_LED_TX_Pin|SX_Mode_SX126X_Pin, GPIO_PIN_RESET);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	210b      	movs	r1, #11
 8002bca:	4861      	ldr	r0, [pc, #388]	@ (8002d50 <_ZL12MX_GPIO_Initv+0x254>)
 8002bcc:	f001 f9dc 	bl	8003f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_RESET_GPIO_Port, SX_RESET_Pin, GPIO_PIN_RESET);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2108      	movs	r1, #8
 8002bd4:	485f      	ldr	r0, [pc, #380]	@ (8002d54 <_ZL12MX_GPIO_Initv+0x258>)
 8002bd6:	f001 f9d7 	bl	8003f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SX_ANT_SW_Pin|SX_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002be0:	485d      	ldr	r0, [pc, #372]	@ (8002d58 <_ZL12MX_GPIO_Initv+0x25c>)
 8002be2:	f001 f9d1 	bl	8003f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2120      	movs	r1, #32
 8002bea:	485c      	ldr	r0, [pc, #368]	@ (8002d5c <_ZL12MX_GPIO_Initv+0x260>)
 8002bec:	f001 f9cc 	bl	8003f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SX_LED_RX_Pin SX_LED_TX_Pin SX_Mode_SX126X_Pin */
  GPIO_InitStruct.Pin = SX_LED_RX_Pin|SX_LED_TX_Pin|SX_Mode_SX126X_Pin;
 8002bf0:	230b      	movs	r3, #11
 8002bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	4619      	mov	r1, r3
 8002c06:	4852      	ldr	r0, [pc, #328]	@ (8002d50 <_ZL12MX_GPIO_Initv+0x254>)
 8002c08:	f000 ffce 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c10:	2303      	movs	r3, #3
 8002c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002c18:	f107 031c 	add.w	r3, r7, #28
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	484c      	ldr	r0, [pc, #304]	@ (8002d50 <_ZL12MX_GPIO_Initv+0x254>)
 8002c20:	f000 ffc2 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_Mode_FRx_Pin */
  GPIO_InitStruct.Pin = SX_Mode_FRx_Pin;
 8002c24:	2304      	movs	r3, #4
 8002c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SX_Mode_FRx_GPIO_Port, &GPIO_InitStruct);
 8002c30:	f107 031c 	add.w	r3, r7, #28
 8002c34:	4619      	mov	r1, r3
 8002c36:	4847      	ldr	r0, [pc, #284]	@ (8002d54 <_ZL12MX_GPIO_Initv+0x258>)
 8002c38:	f000 ffb6 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_RESET_Pin */
  GPIO_InitStruct.Pin = SX_RESET_Pin;
 8002c3c:	2308      	movs	r3, #8
 8002c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c40:	2301      	movs	r3, #1
 8002c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SX_RESET_GPIO_Port, &GPIO_InitStruct);
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	4619      	mov	r1, r3
 8002c52:	4840      	ldr	r0, [pc, #256]	@ (8002d54 <_ZL12MX_GPIO_Initv+0x258>)
 8002c54:	f000 ffa8 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX_OPT_Pin UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = SX_OPT_Pin|UCPD_FLT_Pin;
 8002c58:	f244 0301 	movw	r3, #16385	@ 0x4001
 8002c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c66:	f107 031c 	add.w	r3, r7, #28
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	483b      	ldr	r0, [pc, #236]	@ (8002d5c <_ZL12MX_GPIO_Initv+0x260>)
 8002c6e:	f000 ff9b 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX_ANT_SW_Pin SX_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SX_ANT_SW_Pin|SX_SPI1_CS_Pin;
 8002c72:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c80:	2300      	movs	r3, #0
 8002c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c84:	f107 031c 	add.w	r3, r7, #28
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4833      	ldr	r0, [pc, #204]	@ (8002d58 <_ZL12MX_GPIO_Initv+0x25c>)
 8002c8c:	f000 ff8c 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_DIO1_Pin */
  GPIO_InitStruct.Pin = SX_DIO1_Pin;
 8002c90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c96:	4b32      	ldr	r3, [pc, #200]	@ (8002d60 <_ZL12MX_GPIO_Initv+0x264>)
 8002c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SX_DIO1_GPIO_Port, &GPIO_InitStruct);
 8002c9e:	f107 031c 	add.w	r3, r7, #28
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	482f      	ldr	r0, [pc, #188]	@ (8002d64 <_ZL12MX_GPIO_Initv+0x268>)
 8002ca6:	f000 ff7f 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BUSY_Pin */
  GPIO_InitStruct.Pin = SX_BUSY_Pin;
 8002caa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SX_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4829      	ldr	r0, [pc, #164]	@ (8002d64 <_ZL12MX_GPIO_Initv+0x268>)
 8002cc0:	f000 ff72 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd2:	f107 031c 	add.w	r3, r7, #28
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4820      	ldr	r0, [pc, #128]	@ (8002d5c <_ZL12MX_GPIO_Initv+0x260>)
 8002cda:	f000 ff65 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002cde:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cec:	2300      	movs	r3, #0
 8002cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf0:	f107 031c 	add.w	r3, r7, #28
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4817      	ldr	r0, [pc, #92]	@ (8002d54 <_ZL12MX_GPIO_Initv+0x258>)
 8002cf8:	f000 ff56 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d02:	2303      	movs	r3, #3
 8002d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0a:	f107 031c 	add.w	r3, r7, #28
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4810      	ldr	r0, [pc, #64]	@ (8002d54 <_ZL12MX_GPIO_Initv+0x258>)
 8002d12:	f000 ff49 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8002d16:	2320      	movs	r3, #32
 8002d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8002d26:	f107 031c 	add.w	r3, r7, #28
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	480b      	ldr	r0, [pc, #44]	@ (8002d5c <_ZL12MX_GPIO_Initv+0x260>)
 8002d2e:	f000 ff3b 	bl	8003ba8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2100      	movs	r1, #0
 8002d36:	2016      	movs	r0, #22
 8002d38:	f000 fdd2 	bl	80038e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8002d3c:	2016      	movs	r0, #22
 8002d3e:	f000 fde9 	bl	8003914 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d42:	bf00      	nop
 8002d44:	3730      	adds	r7, #48	@ 0x30
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	46020c00 	.word	0x46020c00
 8002d50:	42020800 	.word	0x42020800
 8002d54:	42020000 	.word	0x42020000
 8002d58:	42021400 	.word	0x42021400
 8002d5c:	42020400 	.word	0x42020400
 8002d60:	10110000 	.word	0x10110000
 8002d64:	42021000 	.word	0x42021000

08002d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d6c:	b672      	cpsid	i
}
 8002d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d70:	bf00      	nop
 8002d72:	e7fd      	b.n	8002d70 <Error_Handler+0x8>

08002d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <HAL_MspInit+0x30>)
 8002d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d80:	4a08      	ldr	r2, [pc, #32]	@ (8002da4 <HAL_MspInit+0x30>)
 8002d82:	f043 0304 	orr.w	r3, r3, #4
 8002d86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_MspInit+0x30>)
 8002d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	46020c00 	.word	0x46020c00

08002da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b0c0      	sub	sp, #256	@ 0x100
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dc0:	f107 0310 	add.w	r3, r7, #16
 8002dc4:	22d8      	movs	r2, #216	@ 0xd8
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f008 fb30 	bl	800b42e <memset>
  if(hspi->Instance==SPI1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a27      	ldr	r2, [pc, #156]	@ (8002e70 <HAL_SPI_MspInit+0xc8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d145      	bne.n	8002e64 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002dd8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dea:	f107 0310 	add.w	r3, r7, #16
 8002dee:	4618      	mov	r0, r3
 8002df0:	f002 fcf0 	bl	80057d4 <HAL_RCCEx_PeriphCLKConfig>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002dfa:	f7ff ffb5 	bl	8002d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002e74 <HAL_SPI_MspInit+0xcc>)
 8002e00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e04:	4a1b      	ldr	r2, [pc, #108]	@ (8002e74 <HAL_SPI_MspInit+0xcc>)
 8002e06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e0a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002e0e:	4b19      	ldr	r3, [pc, #100]	@ (8002e74 <HAL_SPI_MspInit+0xcc>)
 8002e10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	4b15      	ldr	r3, [pc, #84]	@ (8002e74 <HAL_SPI_MspInit+0xcc>)
 8002e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e22:	4a14      	ldr	r2, [pc, #80]	@ (8002e74 <HAL_SPI_MspInit+0xcc>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e2c:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <HAL_SPI_MspInit+0xcc>)
 8002e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SX_SPI1_SCK_Pin|SX_SPI1_MISO_Pin|SX_SPI1_MOSI_Pin;
 8002e3a:	23e0      	movs	r3, #224	@ 0xe0
 8002e3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e52:	2305      	movs	r3, #5
 8002e54:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e58:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4806      	ldr	r0, [pc, #24]	@ (8002e78 <HAL_SPI_MspInit+0xd0>)
 8002e60:	f000 fea2 	bl	8003ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e64:	bf00      	nop
 8002e66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40013000 	.word	0x40013000
 8002e74:	46020c00 	.word	0x46020c00
 8002e78:	42020000 	.word	0x42020000

08002e7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e8c:	d10e      	bne.n	8002eac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <HAL_TIM_Base_MspInit+0x3c>)
 8002e90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e94:	4a08      	ldr	r2, [pc, #32]	@ (8002eb8 <HAL_TIM_Base_MspInit+0x3c>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002e9e:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <HAL_TIM_Base_MspInit+0x3c>)
 8002ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	46020c00 	.word	0x46020c00

08002ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <NMI_Handler+0x4>

08002ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <HardFault_Handler+0x4>

08002ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <MemManage_Handler+0x4>

08002ed4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <BusFault_Handler+0x4>

08002edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee0:	bf00      	nop
 8002ee2:	e7fd      	b.n	8002ee0 <UsageFault_Handler+0x4>

08002ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f12:	f000 fbe9 	bl	80036e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SX_DIO1_Pin);
 8002f1e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002f22:	f001 f849 	bl	8003fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f000 fa32 	bl	8003398 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return 1;
 8002f3c:	2301      	movs	r3, #1
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <_kill>:

int _kill(int pid, int sig)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f52:	f008 facf 	bl	800b4f4 <__errno>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2216      	movs	r2, #22
 8002f5a:	601a      	str	r2, [r3, #0]
  return -1;
 8002f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <_exit>:

void _exit (int status)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f70:	f04f 31ff 	mov.w	r1, #4294967295
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ffe7 	bl	8002f48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f7a:	bf00      	nop
 8002f7c:	e7fd      	b.n	8002f7a <_exit+0x12>

08002f7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e00a      	b.n	8002fa6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f90:	f3af 8000 	nop.w
 8002f94:	4601      	mov	r1, r0
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	60ba      	str	r2, [r7, #8]
 8002f9c:	b2ca      	uxtb	r2, r1
 8002f9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	dbf0      	blt.n	8002f90 <_read+0x12>
  }

  return len;
 8002fae:	687b      	ldr	r3, [r7, #4]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e009      	b.n	8002fde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	60ba      	str	r2, [r7, #8]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fa66 	bl	80034a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	dbf1      	blt.n	8002fca <_write+0x12>
  }
  return len;
 8002fe6:	687b      	ldr	r3, [r7, #4]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <_close>:

int _close(int file)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003018:	605a      	str	r2, [r3, #4]
  return 0;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <_isatty>:

int _isatty(int file)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003030:	2301      	movs	r3, #1
}
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003060:	4a14      	ldr	r2, [pc, #80]	@ (80030b4 <_sbrk+0x5c>)
 8003062:	4b15      	ldr	r3, [pc, #84]	@ (80030b8 <_sbrk+0x60>)
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800306c:	4b13      	ldr	r3, [pc, #76]	@ (80030bc <_sbrk+0x64>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003074:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <_sbrk+0x64>)
 8003076:	4a12      	ldr	r2, [pc, #72]	@ (80030c0 <_sbrk+0x68>)
 8003078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800307a:	4b10      	ldr	r3, [pc, #64]	@ (80030bc <_sbrk+0x64>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	429a      	cmp	r2, r3
 8003086:	d207      	bcs.n	8003098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003088:	f008 fa34 	bl	800b4f4 <__errno>
 800308c:	4603      	mov	r3, r0
 800308e:	220c      	movs	r2, #12
 8003090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003092:	f04f 33ff 	mov.w	r3, #4294967295
 8003096:	e009      	b.n	80030ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003098:	4b08      	ldr	r3, [pc, #32]	@ (80030bc <_sbrk+0x64>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800309e:	4b07      	ldr	r3, [pc, #28]	@ (80030bc <_sbrk+0x64>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	4a05      	ldr	r2, [pc, #20]	@ (80030bc <_sbrk+0x64>)
 80030a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030aa:	68fb      	ldr	r3, [r7, #12]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20270000 	.word	0x20270000
 80030b8:	00000400 	.word	0x00000400
 80030bc:	20000408 	.word	0x20000408
 80030c0:	20000600 	.word	0x20000600

080030c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030c8:	4b18      	ldr	r3, [pc, #96]	@ (800312c <SystemInit+0x68>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ce:	4a17      	ldr	r2, [pc, #92]	@ (800312c <SystemInit+0x68>)
 80030d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80030d8:	4b15      	ldr	r3, [pc, #84]	@ (8003130 <SystemInit+0x6c>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80030de:	4b14      	ldr	r3, [pc, #80]	@ (8003130 <SystemInit+0x6c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80030e4:	4b12      	ldr	r3, [pc, #72]	@ (8003130 <SystemInit+0x6c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80030ea:	4b11      	ldr	r3, [pc, #68]	@ (8003130 <SystemInit+0x6c>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80030f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003130 <SystemInit+0x6c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003130 <SystemInit+0x6c>)
 80030f6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80030fa:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80030fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003100:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <SystemInit+0x6c>)
 8003102:	2200      	movs	r2, #0
 8003104:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003106:	4b0a      	ldr	r3, [pc, #40]	@ (8003130 <SystemInit+0x6c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a09      	ldr	r2, [pc, #36]	@ (8003130 <SystemInit+0x6c>)
 800310c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003110:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003112:	4b07      	ldr	r3, [pc, #28]	@ (8003130 <SystemInit+0x6c>)
 8003114:	2200      	movs	r2, #0
 8003116:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003118:	4b04      	ldr	r3, [pc, #16]	@ (800312c <SystemInit+0x68>)
 800311a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800311e:	609a      	str	r2, [r3, #8]
  #endif
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	e000ed00 	.word	0xe000ed00
 8003130:	46020c00 	.word	0x46020c00

08003134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003134:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800316c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003138:	f7ff ffc4 	bl	80030c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800313c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800313e:	e003      	b.n	8003148 <LoopCopyDataInit>

08003140 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003140:	4b0b      	ldr	r3, [pc, #44]	@ (8003170 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003142:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003144:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003146:	3104      	adds	r1, #4

08003148 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003148:	480a      	ldr	r0, [pc, #40]	@ (8003174 <LoopForever+0xa>)
	ldr	r3, =_edata
 800314a:	4b0b      	ldr	r3, [pc, #44]	@ (8003178 <LoopForever+0xe>)
	adds	r2, r0, r1
 800314c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800314e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003150:	d3f6      	bcc.n	8003140 <CopyDataInit>
	ldr	r2, =_sbss
 8003152:	4a0a      	ldr	r2, [pc, #40]	@ (800317c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003154:	e002      	b.n	800315c <LoopFillZerobss>

08003156 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003156:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003158:	f842 3b04 	str.w	r3, [r2], #4

0800315c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800315c:	4b08      	ldr	r3, [pc, #32]	@ (8003180 <LoopForever+0x16>)
	cmp	r2, r3
 800315e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003160:	d3f9      	bcc.n	8003156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003162:	f008 f9cd 	bl	800b500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003166:	f7ff fb17 	bl	8002798 <main>

0800316a <LoopForever>:

LoopForever:
    b LoopForever
 800316a:	e7fe      	b.n	800316a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800316c:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8003170:	0800f160 	.word	0x0800f160
	ldr	r0, =_sdata
 8003174:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003178:	20000218 	.word	0x20000218
	ldr	r2, =_sbss
 800317c:	20000218 	.word	0x20000218
	ldr	r3, = _ebss
 8003180:	200005fe 	.word	0x200005fe

08003184 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003184:	e7fe      	b.n	8003184 <ADC1_2_IRQHandler>
	...

08003188 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08e      	sub	sp, #56	@ 0x38
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003192:	2300      	movs	r3, #0
 8003194:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d009      	beq.n	80031b4 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d006      	beq.n	80031b4 <BSP_LED_Init+0x2c>
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d003      	beq.n	80031b4 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80031ac:	f06f 0301 	mvn.w	r3, #1
 80031b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b2:	e06e      	b.n	8003292 <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d10f      	bne.n	80031da <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 80031ba:	4b38      	ldr	r3, [pc, #224]	@ (800329c <BSP_LED_Init+0x114>)
 80031bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031c0:	4a36      	ldr	r2, [pc, #216]	@ (800329c <BSP_LED_Init+0x114>)
 80031c2:	f043 0302 	orr.w	r3, r3, #2
 80031c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80031ca:	4b34      	ldr	r3, [pc, #208]	@ (800329c <BSP_LED_Init+0x114>)
 80031cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	e046      	b.n	8003268 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10f      	bne.n	8003200 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 80031e0:	4b2e      	ldr	r3, [pc, #184]	@ (800329c <BSP_LED_Init+0x114>)
 80031e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031e6:	4a2d      	ldr	r2, [pc, #180]	@ (800329c <BSP_LED_Init+0x114>)
 80031e8:	f043 0304 	orr.w	r3, r3, #4
 80031ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80031f0:	4b2a      	ldr	r3, [pc, #168]	@ (800329c <BSP_LED_Init+0x114>)
 80031f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	e033      	b.n	8003268 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003200:	4b26      	ldr	r3, [pc, #152]	@ (800329c <BSP_LED_Init+0x114>)
 8003202:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	d110      	bne.n	8003230 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	4b23      	ldr	r3, [pc, #140]	@ (800329c <BSP_LED_Init+0x114>)
 8003210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003214:	4a21      	ldr	r2, [pc, #132]	@ (800329c <BSP_LED_Init+0x114>)
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800321e:	4b1f      	ldr	r3, [pc, #124]	@ (800329c <BSP_LED_Init+0x114>)
 8003220:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 800322c:	2301      	movs	r3, #1
 800322e:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8003230:	f001 f800 	bl	8004234 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8003234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003236:	2b01      	cmp	r3, #1
 8003238:	d107      	bne.n	800324a <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800323a:	4b18      	ldr	r3, [pc, #96]	@ (800329c <BSP_LED_Init+0x114>)
 800323c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003240:	4a16      	ldr	r2, [pc, #88]	@ (800329c <BSP_LED_Init+0x114>)
 8003242:	f023 0304 	bic.w	r3, r3, #4
 8003246:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 800324a:	4b14      	ldr	r3, [pc, #80]	@ (800329c <BSP_LED_Init+0x114>)
 800324c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003250:	4a12      	ldr	r2, [pc, #72]	@ (800329c <BSP_LED_Init+0x114>)
 8003252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003256:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800325a:	4b10      	ldr	r3, [pc, #64]	@ (800329c <BSP_LED_Init+0x114>)
 800325c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	4a0d      	ldr	r2, [pc, #52]	@ (80032a0 <BSP_LED_Init+0x118>)
 800326c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003270:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003272:	2301      	movs	r3, #1
 8003274:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327a:	2303      	movs	r3, #3
 800327c:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	4a08      	ldr	r2, [pc, #32]	@ (80032a4 <BSP_LED_Init+0x11c>)
 8003282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003286:	f107 021c 	add.w	r2, r7, #28
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fc8b 	bl	8003ba8 <HAL_GPIO_Init>
  }

  return ret;
 8003292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003294:	4618      	mov	r0, r3
 8003296:	3738      	adds	r7, #56	@ 0x38
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	46020c00 	.word	0x46020c00
 80032a0:	0800ec74 	.word	0x0800ec74
 80032a4:	20000030 	.word	0x20000030

080032a8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	460a      	mov	r2, r1
 80032b2:	71fb      	strb	r3, [r7, #7]
 80032b4:	4613      	mov	r3, r2
 80032b6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80032b8:	4b30      	ldr	r3, [pc, #192]	@ (800337c <BSP_PB_Init+0xd4>)
 80032ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032be:	4a2f      	ldr	r2, [pc, #188]	@ (800337c <BSP_PB_Init+0xd4>)
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80032c8:	4b2c      	ldr	r3, [pc, #176]	@ (800337c <BSP_PB_Init+0xd4>)
 80032ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80032d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032da:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80032dc:	2302      	movs	r3, #2
 80032de:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80032e0:	2302      	movs	r3, #2
 80032e2:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80032e4:	79bb      	ldrb	r3, [r7, #6]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10c      	bne.n	8003304 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	4a23      	ldr	r2, [pc, #140]	@ (8003380 <BSP_PB_Init+0xd8>)
 80032f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f6:	f107 020c 	add.w	r2, r7, #12
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fc53 	bl	8003ba8 <HAL_GPIO_Init>
 8003302:	e036      	b.n	8003372 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003304:	4b1f      	ldr	r3, [pc, #124]	@ (8003384 <BSP_PB_Init+0xdc>)
 8003306:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	4a1d      	ldr	r2, [pc, #116]	@ (8003380 <BSP_PB_Init+0xd8>)
 800330c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003310:	f107 020c 	add.w	r2, r7, #12
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fc46 	bl	8003ba8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800331c:	79fa      	ldrb	r2, [r7, #7]
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4a18      	ldr	r2, [pc, #96]	@ (8003388 <BSP_PB_Init+0xe0>)
 8003328:	441a      	add	r2, r3
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	4917      	ldr	r1, [pc, #92]	@ (800338c <BSP_PB_Init+0xe4>)
 800332e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f000 fbdb 	bl	8003af0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800333a:	79fa      	ldrb	r2, [r7, #7]
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4a10      	ldr	r2, [pc, #64]	@ (8003388 <BSP_PB_Init+0xe0>)
 8003346:	1898      	adds	r0, r3, r2
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	4a11      	ldr	r2, [pc, #68]	@ (8003390 <BSP_PB_Init+0xe8>)
 800334c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003350:	461a      	mov	r2, r3
 8003352:	2100      	movs	r1, #0
 8003354:	f000 fba0 	bl	8003a98 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003358:	2018      	movs	r0, #24
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	4a0d      	ldr	r2, [pc, #52]	@ (8003394 <BSP_PB_Init+0xec>)
 800335e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003362:	2200      	movs	r2, #0
 8003364:	4619      	mov	r1, r3
 8003366:	f000 fabb 	bl	80038e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800336a:	2318      	movs	r3, #24
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fad1 	bl	8003914 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	46020c00 	.word	0x46020c00
 8003380:	2000003c 	.word	0x2000003c
 8003384:	10110000 	.word	0x10110000
 8003388:	2000040c 	.word	0x2000040c
 800338c:	0800ec7c 	.word	0x0800ec7c
 8003390:	20000040 	.word	0x20000040
 8003394:	20000044 	.word	0x20000044

08003398 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80033a2:	79fa      	ldrb	r2, [r7, #7]
 80033a4:	4613      	mov	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4a04      	ldr	r2, [pc, #16]	@ (80033c0 <BSP_PB_IRQHandler+0x28>)
 80033ae:	4413      	add	r3, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fbb1 	bl	8003b18 <HAL_EXTI_IRQHandler>
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2000040c 	.word	0x2000040c

080033c4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	6039      	str	r1, [r7, #0]
 80033e6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80033f2:	f06f 0301 	mvn.w	r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	e018      	b.n	800342c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	2294      	movs	r2, #148	@ 0x94
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	4a0d      	ldr	r2, [pc, #52]	@ (8003438 <BSP_COM_Init+0x5c>)
 8003404:	4413      	add	r3, r2
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f870 	bl	80034ec <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	2294      	movs	r2, #148	@ 0x94
 8003410:	fb02 f303 	mul.w	r3, r2, r3
 8003414:	4a08      	ldr	r2, [pc, #32]	@ (8003438 <BSP_COM_Init+0x5c>)
 8003416:	4413      	add	r3, r2
 8003418:	6839      	ldr	r1, [r7, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f80e 	bl	800343c <MX_USART1_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003426:	f06f 0303 	mvn.w	r3, #3
 800342a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800342c:	68fb      	ldr	r3, [r7, #12]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000418 	.word	0x20000418

0800343c <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8003446:	4b16      	ldr	r3, [pc, #88]	@ (80034a0 <MX_USART1_Init+0x64>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	220c      	movs	r2, #12
 800345a:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	895b      	ldrh	r3, [r3, #10]
 8003460:	461a      	mov	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	891b      	ldrh	r3, [r3, #8]
 8003472:	461a      	mov	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	899b      	ldrh	r3, [r3, #12]
 800347c:	461a      	mov	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003488:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f006 fab1 	bl	80099f8 <HAL_UART_Init>
 8003496:	4603      	mov	r3, r0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	2000002c 	.word	0x2000002c

080034a4 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80034ac:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <__io_putchar+0x30>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	2394      	movs	r3, #148	@ 0x94
 80034b4:	fb02 f303 	mul.w	r3, r2, r3
 80034b8:	4a07      	ldr	r2, [pc, #28]	@ (80034d8 <__io_putchar+0x34>)
 80034ba:	1898      	adds	r0, r3, r2
 80034bc:	1d39      	adds	r1, r7, #4
 80034be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034c2:	2201      	movs	r2, #1
 80034c4:	f006 faf2 	bl	8009aac <HAL_UART_Transmit>
  return ch;
 80034c8:	687b      	ldr	r3, [r7, #4]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200004ac 	.word	0x200004ac
 80034d8:	20000418 	.word	0x20000418

080034dc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80034e0:	2000      	movs	r0, #0
 80034e2:	f7ff ff6f 	bl	80033c4 <BSP_PB_Callback>
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	@ 0x28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80034f4:	4b27      	ldr	r3, [pc, #156]	@ (8003594 <COM1_MspInit+0xa8>)
 80034f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034fa:	4a26      	ldr	r2, [pc, #152]	@ (8003594 <COM1_MspInit+0xa8>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003504:	4b23      	ldr	r3, [pc, #140]	@ (8003594 <COM1_MspInit+0xa8>)
 8003506:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8003512:	4b20      	ldr	r3, [pc, #128]	@ (8003594 <COM1_MspInit+0xa8>)
 8003514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003518:	4a1e      	ldr	r2, [pc, #120]	@ (8003594 <COM1_MspInit+0xa8>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003522:	4b1c      	ldr	r3, [pc, #112]	@ (8003594 <COM1_MspInit+0xa8>)
 8003524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003530:	4b18      	ldr	r3, [pc, #96]	@ (8003594 <COM1_MspInit+0xa8>)
 8003532:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003536:	4a17      	ldr	r2, [pc, #92]	@ (8003594 <COM1_MspInit+0xa8>)
 8003538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800353c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003540:	4b14      	ldr	r3, [pc, #80]	@ (8003594 <COM1_MspInit+0xa8>)
 8003542:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800354e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003552:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003554:	2302      	movs	r3, #2
 8003556:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003558:	2302      	movs	r3, #2
 800355a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800355c:	2301      	movs	r3, #1
 800355e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003560:	2307      	movs	r3, #7
 8003562:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8003564:	f107 0314 	add.w	r3, r7, #20
 8003568:	4619      	mov	r1, r3
 800356a:	480b      	ldr	r0, [pc, #44]	@ (8003598 <COM1_MspInit+0xac>)
 800356c:	f000 fb1c 	bl	8003ba8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8003570:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003574:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003576:	2302      	movs	r3, #2
 8003578:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800357a:	2307      	movs	r3, #7
 800357c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800357e:	f107 0314 	add.w	r3, r7, #20
 8003582:	4619      	mov	r1, r3
 8003584:	4804      	ldr	r0, [pc, #16]	@ (8003598 <COM1_MspInit+0xac>)
 8003586:	f000 fb0f 	bl	8003ba8 <HAL_GPIO_Init>
}
 800358a:	bf00      	nop
 800358c:	3728      	adds	r7, #40	@ 0x28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	46020c00 	.word	0x46020c00
 8003598:	42020000 	.word	0x42020000

0800359c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035a0:	4b12      	ldr	r3, [pc, #72]	@ (80035ec <HAL_Init+0x50>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a11      	ldr	r2, [pc, #68]	@ (80035ec <HAL_Init+0x50>)
 80035a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035ac:	2003      	movs	r0, #3
 80035ae:	f000 f98c 	bl	80038ca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80035b2:	f001 ff2d 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 80035b6:	4602      	mov	r2, r0
 80035b8:	4b0d      	ldr	r3, [pc, #52]	@ (80035f0 <HAL_Init+0x54>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	490c      	ldr	r1, [pc, #48]	@ (80035f4 <HAL_Init+0x58>)
 80035c2:	5ccb      	ldrb	r3, [r1, r3]
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
 80035c8:	4a0b      	ldr	r2, [pc, #44]	@ (80035f8 <HAL_Init+0x5c>)
 80035ca:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80035cc:	2004      	movs	r0, #4
 80035ce:	f000 f9d1 	bl	8003974 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035d2:	200f      	movs	r0, #15
 80035d4:	f000 f812 	bl	80035fc <HAL_InitTick>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e002      	b.n	80035e8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80035e2:	f7ff fbc7 	bl	8002d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40022000 	.word	0x40022000
 80035f0:	46020c00 	.word	0x46020c00
 80035f4:	0800ec1c 	.word	0x0800ec1c
 80035f8:	20000028 	.word	0x20000028

080035fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003608:	4b33      	ldr	r3, [pc, #204]	@ (80036d8 <HAL_InitTick+0xdc>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e05c      	b.n	80036ce <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003614:	4b31      	ldr	r3, [pc, #196]	@ (80036dc <HAL_InitTick+0xe0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b04      	cmp	r3, #4
 800361e:	d10c      	bne.n	800363a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003620:	4b2f      	ldr	r3, [pc, #188]	@ (80036e0 <HAL_InitTick+0xe4>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b2c      	ldr	r3, [pc, #176]	@ (80036d8 <HAL_InitTick+0xdc>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	4619      	mov	r1, r3
 800362a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800362e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003632:	fbb2 f3f3 	udiv	r3, r2, r3
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e037      	b.n	80036aa <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800363a:	f000 f9f3 	bl	8003a24 <HAL_SYSTICK_GetCLKSourceConfig>
 800363e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d023      	beq.n	800368e <HAL_InitTick+0x92>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d82d      	bhi.n	80036a8 <HAL_InitTick+0xac>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_InitTick+0x5e>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d00d      	beq.n	8003674 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8003658:	e026      	b.n	80036a8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800365a:	4b21      	ldr	r3, [pc, #132]	@ (80036e0 <HAL_InitTick+0xe4>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4b1e      	ldr	r3, [pc, #120]	@ (80036d8 <HAL_InitTick+0xdc>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	4619      	mov	r1, r3
 8003664:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003668:	fbb3 f3f1 	udiv	r3, r3, r1
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	60fb      	str	r3, [r7, #12]
        break;
 8003672:	e01a      	b.n	80036aa <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003674:	4b18      	ldr	r3, [pc, #96]	@ (80036d8 <HAL_InitTick+0xdc>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800367e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003682:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	60fb      	str	r3, [r7, #12]
        break;
 800368c:	e00d      	b.n	80036aa <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800368e:	4b12      	ldr	r3, [pc, #72]	@ (80036d8 <HAL_InitTick+0xdc>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003698:	fbb3 f3f2 	udiv	r3, r3, r2
 800369c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80036a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a4:	60fb      	str	r3, [r7, #12]
        break;
 80036a6:	e000      	b.n	80036aa <HAL_InitTick+0xae>
        break;
 80036a8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f940 	bl	8003930 <HAL_SYSTICK_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e009      	b.n	80036ce <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036ba:	2200      	movs	r2, #0
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	f04f 30ff 	mov.w	r0, #4294967295
 80036c2:	f000 f90d 	bl	80038e0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80036c6:	4a07      	ldr	r2, [pc, #28]	@ (80036e4 <HAL_InitTick+0xe8>)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	2000004c 	.word	0x2000004c
 80036dc:	e000e010 	.word	0xe000e010
 80036e0:	20000028 	.word	0x20000028
 80036e4:	20000048 	.word	0x20000048

080036e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036ec:	4b06      	ldr	r3, [pc, #24]	@ (8003708 <HAL_IncTick+0x20>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b06      	ldr	r3, [pc, #24]	@ (800370c <HAL_IncTick+0x24>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4413      	add	r3, r2
 80036f8:	4a04      	ldr	r2, [pc, #16]	@ (800370c <HAL_IncTick+0x24>)
 80036fa:	6013      	str	r3, [r2, #0]
}
 80036fc:	bf00      	nop
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	2000004c 	.word	0x2000004c
 800370c:	200004b0 	.word	0x200004b0

08003710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return uwTick;
 8003714:	4b03      	ldr	r3, [pc, #12]	@ (8003724 <HAL_GetTick+0x14>)
 8003716:	681b      	ldr	r3, [r3, #0]
}
 8003718:	4618      	mov	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	200004b0 	.word	0x200004b0

08003728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003730:	f7ff ffee 	bl	8003710 <HAL_GetTick>
 8003734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d005      	beq.n	800374e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003742:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <HAL_Delay+0x44>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4413      	add	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800374e:	bf00      	nop
 8003750:	f7ff ffde 	bl	8003710 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	429a      	cmp	r2, r3
 800375e:	d8f7      	bhi.n	8003750 <HAL_Delay+0x28>
  {
  }
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	2000004c 	.word	0x2000004c

08003770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003780:	4b0c      	ldr	r3, [pc, #48]	@ (80037b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800378c:	4013      	ands	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003798:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800379c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037a2:	4a04      	ldr	r2, [pc, #16]	@ (80037b4 <__NVIC_SetPriorityGrouping+0x44>)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	60d3      	str	r3, [r2, #12]
}
 80037a8:	bf00      	nop
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037bc:	4b04      	ldr	r3, [pc, #16]	@ (80037d0 <__NVIC_GetPriorityGrouping+0x18>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	0a1b      	lsrs	r3, r3, #8
 80037c2:	f003 0307 	and.w	r3, r3, #7
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	db0b      	blt.n	80037fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	f003 021f 	and.w	r2, r3, #31
 80037ec:	4907      	ldr	r1, [pc, #28]	@ (800380c <__NVIC_EnableIRQ+0x38>)
 80037ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	2001      	movs	r0, #1
 80037f6:	fa00 f202 	lsl.w	r2, r0, r2
 80037fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	e000e100 	.word	0xe000e100

08003810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	6039      	str	r1, [r7, #0]
 800381a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800381c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003820:	2b00      	cmp	r3, #0
 8003822:	db0a      	blt.n	800383a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	b2da      	uxtb	r2, r3
 8003828:	490c      	ldr	r1, [pc, #48]	@ (800385c <__NVIC_SetPriority+0x4c>)
 800382a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800382e:	0112      	lsls	r2, r2, #4
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	440b      	add	r3, r1
 8003834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003838:	e00a      	b.n	8003850 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	b2da      	uxtb	r2, r3
 800383e:	4908      	ldr	r1, [pc, #32]	@ (8003860 <__NVIC_SetPriority+0x50>)
 8003840:	88fb      	ldrh	r3, [r7, #6]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	3b04      	subs	r3, #4
 8003848:	0112      	lsls	r2, r2, #4
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	440b      	add	r3, r1
 800384e:	761a      	strb	r2, [r3, #24]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000e100 	.word	0xe000e100
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003864:	b480      	push	{r7}
 8003866:	b089      	sub	sp, #36	@ 0x24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f1c3 0307 	rsb	r3, r3, #7
 800387e:	2b04      	cmp	r3, #4
 8003880:	bf28      	it	cs
 8003882:	2304      	movcs	r3, #4
 8003884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3304      	adds	r3, #4
 800388a:	2b06      	cmp	r3, #6
 800388c:	d902      	bls.n	8003894 <NVIC_EncodePriority+0x30>
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3b03      	subs	r3, #3
 8003892:	e000      	b.n	8003896 <NVIC_EncodePriority+0x32>
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003898:	f04f 32ff 	mov.w	r2, #4294967295
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43da      	mvns	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	401a      	ands	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038ac:	f04f 31ff 	mov.w	r1, #4294967295
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	fa01 f303 	lsl.w	r3, r1, r3
 80038b6:	43d9      	mvns	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038bc:	4313      	orrs	r3, r2
         );
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3724      	adds	r7, #36	@ 0x24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff ff4c 	bl	8003770 <__NVIC_SetPriorityGrouping>
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038ee:	f7ff ff63 	bl	80037b8 <__NVIC_GetPriorityGrouping>
 80038f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	6978      	ldr	r0, [r7, #20]
 80038fa:	f7ff ffb3 	bl	8003864 <NVIC_EncodePriority>
 80038fe:	4602      	mov	r2, r0
 8003900:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff ff82 	bl	8003810 <__NVIC_SetPriority>
}
 800390c:	bf00      	nop
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800391e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff ff56 	bl	80037d4 <__NVIC_EnableIRQ>
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3b01      	subs	r3, #1
 800393c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003940:	d301      	bcc.n	8003946 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003942:	2301      	movs	r3, #1
 8003944:	e00d      	b.n	8003962 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003946:	4a0a      	ldr	r2, [pc, #40]	@ (8003970 <HAL_SYSTICK_Config+0x40>)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800394e:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <HAL_SYSTICK_Config+0x40>)
 8003950:	2200      	movs	r2, #0
 8003952:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003954:	4b06      	ldr	r3, [pc, #24]	@ (8003970 <HAL_SYSTICK_Config+0x40>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a05      	ldr	r2, [pc, #20]	@ (8003970 <HAL_SYSTICK_Config+0x40>)
 800395a:	f043 0303 	orr.w	r3, r3, #3
 800395e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	e000e010 	.word	0xe000e010

08003974 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b04      	cmp	r3, #4
 8003980:	d844      	bhi.n	8003a0c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003982:	a201      	add	r2, pc, #4	@ (adr r2, 8003988 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	080039ab 	.word	0x080039ab
 800398c:	080039c9 	.word	0x080039c9
 8003990:	080039eb 	.word	0x080039eb
 8003994:	08003a0d 	.word	0x08003a0d
 8003998:	0800399d 	.word	0x0800399d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800399c:	4b1f      	ldr	r3, [pc, #124]	@ (8003a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a1e      	ldr	r2, [pc, #120]	@ (8003a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80039a2:	f043 0304 	orr.w	r3, r3, #4
 80039a6:	6013      	str	r3, [r2, #0]
      break;
 80039a8:	e031      	b.n	8003a0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80039aa:	4b1c      	ldr	r3, [pc, #112]	@ (8003a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1b      	ldr	r2, [pc, #108]	@ (8003a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80039b0:	f023 0304 	bic.w	r3, r3, #4
 80039b4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80039b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80039b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039bc:	4a18      	ldr	r2, [pc, #96]	@ (8003a20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80039be:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80039c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80039c6:	e022      	b.n	8003a0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80039c8:	4b14      	ldr	r3, [pc, #80]	@ (8003a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a13      	ldr	r2, [pc, #76]	@ (8003a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80039ce:	f023 0304 	bic.w	r3, r3, #4
 80039d2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80039d4:	4b12      	ldr	r3, [pc, #72]	@ (8003a20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80039d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039da:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80039de:	4a10      	ldr	r2, [pc, #64]	@ (8003a20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80039e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80039e8:	e011      	b.n	8003a0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80039ea:	4b0c      	ldr	r3, [pc, #48]	@ (8003a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a0b      	ldr	r2, [pc, #44]	@ (8003a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80039f0:	f023 0304 	bic.w	r3, r3, #4
 80039f4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80039f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80039f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039fc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003a00:	4a07      	ldr	r2, [pc, #28]	@ (8003a20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003a02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003a0a:	e000      	b.n	8003a0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003a0c:	bf00      	nop
  }
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000e010 	.word	0xe000e010
 8003a20:	46020c00 	.word	0x46020c00

08003a24 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003a2a:	4b19      	ldr	r3, [pc, #100]	@ (8003a90 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003a36:	2304      	movs	r3, #4
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	e021      	b.n	8003a80 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8003a3c:	4b15      	ldr	r3, [pc, #84]	@ (8003a94 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8003a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a42:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003a46:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a4e:	d011      	beq.n	8003a74 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a56:	d810      	bhi.n	8003a7a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d004      	beq.n	8003a68 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a64:	d003      	beq.n	8003a6e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003a66:	e008      	b.n	8003a7a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	607b      	str	r3, [r7, #4]
        break;
 8003a6c:	e008      	b.n	8003a80 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	607b      	str	r3, [r7, #4]
        break;
 8003a72:	e005      	b.n	8003a80 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003a74:	2302      	movs	r3, #2
 8003a76:	607b      	str	r3, [r7, #4]
        break;
 8003a78:	e002      	b.n	8003a80 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
        break;
 8003a7e:	bf00      	nop
    }
  }
  return systick_source;
 8003a80:	687b      	ldr	r3, [r7, #4]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	e000e010 	.word	0xe000e010
 8003a94:	46020c00 	.word	0x46020c00

08003a98 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003aaa:	7afb      	ldrb	r3, [r7, #11]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d011      	beq.n	8003ad4 <HAL_EXTI_RegisterCallback+0x3c>
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	dc13      	bgt.n	8003adc <HAL_EXTI_RegisterCallback+0x44>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <HAL_EXTI_RegisterCallback+0x26>
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d007      	beq.n	8003acc <HAL_EXTI_RegisterCallback+0x34>
 8003abc:	e00e      	b.n	8003adc <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	609a      	str	r2, [r3, #8]
      break;
 8003aca:	e00a      	b.n	8003ae2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	605a      	str	r2, [r3, #4]
      break;
 8003ad2:	e006      	b.n	8003ae2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	609a      	str	r2, [r3, #8]
      break;
 8003ada:	e002      	b.n	8003ae2 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae0:	bf00      	nop
  }

  return status;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e003      	b.n	8003b0c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
  }
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2201      	movs	r2, #1
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	4b17      	ldr	r3, [pc, #92]	@ (8003ba0 <HAL_EXTI_IRQHandler+0x88>)
 8003b42:	4413      	add	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba4 <HAL_EXTI_IRQHandler+0x8c>)
 8003b70:	4413      	add	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d009      	beq.n	8003b98 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	4798      	blx	r3
    }
  }
}
 8003b98:	bf00      	nop
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	4602200c 	.word	0x4602200c
 8003ba4:	46022010 	.word	0x46022010

08003ba8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b089      	sub	sp, #36	@ 0x24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003bba:	e1ba      	b.n	8003f32 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 81aa 	beq.w	8003f2c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a55      	ldr	r2, [pc, #340]	@ (8003d30 <HAL_GPIO_Init+0x188>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d15d      	bne.n	8003c9c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003be6:	2201      	movs	r2, #1
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 0201 	and.w	r2, r3, #1
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003c10:	4a48      	ldr	r2, [pc, #288]	@ (8003d34 <HAL_GPIO_Init+0x18c>)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c18:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003c1a:	4a46      	ldr	r2, [pc, #280]	@ (8003d34 <HAL_GPIO_Init+0x18c>)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	08da      	lsrs	r2, r3, #3
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	3208      	adds	r2, #8
 8003c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c32:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	220f      	movs	r2, #15
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	4013      	ands	r3, r2
 8003c48:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	220b      	movs	r2, #11
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	08da      	lsrs	r2, r3, #3
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	3208      	adds	r2, #8
 8003c66:	69f9      	ldr	r1, [r7, #28]
 8003c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	2203      	movs	r2, #3
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	2202      	movs	r2, #2
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e067      	b.n	8003d6c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d003      	beq.n	8003cac <HAL_GPIO_Init+0x104>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b12      	cmp	r3, #18
 8003caa:	d145      	bne.n	8003d38 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	08da      	lsrs	r2, r3, #3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3208      	adds	r2, #8
 8003cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	220f      	movs	r2, #15
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f003 020f 	and.w	r2, r3, #15
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	08da      	lsrs	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3208      	adds	r2, #8
 8003cf2:	69f9      	ldr	r1, [r7, #28]
 8003cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	2203      	movs	r2, #3
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 0203 	and.w	r2, r3, #3
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	e01e      	b.n	8003d6c <HAL_GPIO_Init+0x1c4>
 8003d2e:	bf00      	nop
 8003d30:	46020000 	.word	0x46020000
 8003d34:	0800ec80 	.word	0x0800ec80
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	2203      	movs	r2, #3
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 0203 	and.w	r2, r3, #3
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d00b      	beq.n	8003d8c <HAL_GPIO_Init+0x1e4>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d007      	beq.n	8003d8c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d80:	2b11      	cmp	r3, #17
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b12      	cmp	r3, #18
 8003d8a:	d130      	bne.n	8003dee <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	f003 0201 	and.w	r2, r3, #1
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d017      	beq.n	8003e26 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	2203      	movs	r2, #3
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d07c      	beq.n	8003f2c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003e32:	4a47      	ldr	r2, [pc, #284]	@ (8003f50 <HAL_GPIO_Init+0x3a8>)
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	3318      	adds	r3, #24
 8003e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	220f      	movs	r2, #15
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	0a9a      	lsrs	r2, r3, #10
 8003e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f54 <HAL_GPIO_Init+0x3ac>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	f002 0203 	and.w	r2, r2, #3
 8003e64:	00d2      	lsls	r2, r2, #3
 8003e66:	4093      	lsls	r3, r2
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003e6e:	4938      	ldr	r1, [pc, #224]	@ (8003f50 <HAL_GPIO_Init+0x3a8>)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	3318      	adds	r3, #24
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003e7c:	4b34      	ldr	r3, [pc, #208]	@ (8003f50 <HAL_GPIO_Init+0x3a8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f50 <HAL_GPIO_Init+0x3a8>)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8003f50 <HAL_GPIO_Init+0x3a8>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003eca:	4a21      	ldr	r2, [pc, #132]	@ (8003f50 <HAL_GPIO_Init+0x3a8>)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f50 <HAL_GPIO_Init+0x3a8>)
 8003ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ed6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003ef6:	4a16      	ldr	r2, [pc, #88]	@ (8003f50 <HAL_GPIO_Init+0x3a8>)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003efe:	4b14      	ldr	r3, [pc, #80]	@ (8003f50 <HAL_GPIO_Init+0x3a8>)
 8003f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f04:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003f24:	4a0a      	ldr	r2, [pc, #40]	@ (8003f50 <HAL_GPIO_Init+0x3a8>)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f47f ae3d 	bne.w	8003bbc <HAL_GPIO_Init+0x14>
  }
}
 8003f42:	bf00      	nop
 8003f44:	bf00      	nop
 8003f46:	3724      	adds	r7, #36	@ 0x24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	46022000 	.word	0x46022000
 8003f54:	002f7f7f 	.word	0x002f7f7f

08003f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	887b      	ldrh	r3, [r7, #2]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
 8003f74:	e001      	b.n	8003f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	807b      	strh	r3, [r7, #2]
 8003f94:	4613      	mov	r3, r2
 8003f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f98:	787b      	ldrb	r3, [r7, #1]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f9e:	887a      	ldrh	r2, [r7, #2]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003fa4:	e002      	b.n	8003fac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003fa6:	887a      	ldrh	r2, [r7, #2]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8004000 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d006      	beq.n	8003fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003fce:	4a0c      	ldr	r2, [pc, #48]	@ (8004000 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe fb60 	bl	800269c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003fdc:	4b08      	ldr	r3, [pc, #32]	@ (8004000 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d006      	beq.n	8003ff6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003fe8:	4a05      	ldr	r2, [pc, #20]	@ (8004000 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 f807 	bl	8004004 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	46022000 	.word	0x46022000

08004004 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004028:	4b0b      	ldr	r3, [pc, #44]	@ (8004058 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
 8004038:	e007      	b.n	800404a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800403a:	4b07      	ldr	r3, [pc, #28]	@ (8004058 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f023 0204 	bic.w	r2, r3, #4
 8004042:	4905      	ldr	r1, [pc, #20]	@ (8004058 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4313      	orrs	r3, r2
 8004048:	600b      	str	r3, [r1, #0]
  }

  return status;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	40030400 	.word	0x40030400

0800405c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004060:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <HAL_ICACHE_Enable+0x1c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a04      	ldr	r2, [pc, #16]	@ (8004078 <HAL_ICACHE_Enable+0x1c>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40030400 	.word	0x40030400

0800407c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004084:	4b39      	ldr	r3, [pc, #228]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800408c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	429a      	cmp	r2, r3
 8004094:	d10b      	bne.n	80040ae <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800409c:	d905      	bls.n	80040aa <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800409e:	4b33      	ldr	r3, [pc, #204]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	4a32      	ldr	r2, [pc, #200]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80040a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040a8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e057      	b.n	800415e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b4:	d90a      	bls.n	80040cc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80040b6:	4b2d      	ldr	r3, [pc, #180]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	4a2a      	ldr	r2, [pc, #168]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80040c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040c8:	60d3      	str	r3, [r2, #12]
 80040ca:	e007      	b.n	80040dc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80040cc:	4b27      	ldr	r3, [pc, #156]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80040d4:	4925      	ldr	r1, [pc, #148]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80040dc:	4b24      	ldr	r3, [pc, #144]	@ (8004170 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a24      	ldr	r2, [pc, #144]	@ (8004174 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	099b      	lsrs	r3, r3, #6
 80040e8:	2232      	movs	r2, #50	@ 0x32
 80040ea:	fb02 f303 	mul.w	r3, r2, r3
 80040ee:	4a21      	ldr	r2, [pc, #132]	@ (8004174 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80040f0:	fba2 2303 	umull	r2, r3, r2, r3
 80040f4:	099b      	lsrs	r3, r3, #6
 80040f6:	3301      	adds	r3, #1
 80040f8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80040fa:	e002      	b.n	8004102 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3b01      	subs	r3, #1
 8004100:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004102:	4b1a      	ldr	r3, [pc, #104]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d102      	bne.n	8004114 <HAL_PWREx_ControlVoltageScaling+0x98>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1f3      	bne.n	80040fc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d01b      	beq.n	8004152 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800411a:	4b15      	ldr	r3, [pc, #84]	@ (8004170 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a15      	ldr	r2, [pc, #84]	@ (8004174 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	099b      	lsrs	r3, r3, #6
 8004126:	2232      	movs	r2, #50	@ 0x32
 8004128:	fb02 f303 	mul.w	r3, r2, r3
 800412c:	4a11      	ldr	r2, [pc, #68]	@ (8004174 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	099b      	lsrs	r3, r3, #6
 8004134:	3301      	adds	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004138:	e002      	b.n	8004140 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3b01      	subs	r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004140:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004144:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d102      	bne.n	8004152 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f3      	bne.n	800413a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e000      	b.n	800415e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	46020800 	.word	0x46020800
 8004170:	20000028 	.word	0x20000028
 8004174:	10624dd3 	.word	0x10624dd3

08004178 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800417c:	4b04      	ldr	r3, [pc, #16]	@ (8004190 <HAL_PWREx_GetVoltageRange+0x18>)
 800417e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004180:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	46020800 	.word	0x46020800

08004194 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800419c:	4b22      	ldr	r3, [pc, #136]	@ (8004228 <HAL_PWREx_ConfigSupply+0x94>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a22      	ldr	r2, [pc, #136]	@ (800422c <HAL_PWREx_ConfigSupply+0x98>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	099b      	lsrs	r3, r3, #6
 80041a8:	2232      	movs	r2, #50	@ 0x32
 80041aa:	fb02 f303 	mul.w	r3, r2, r3
 80041ae:	4a1f      	ldr	r2, [pc, #124]	@ (800422c <HAL_PWREx_ConfigSupply+0x98>)
 80041b0:	fba2 2303 	umull	r2, r3, r2, r3
 80041b4:	099b      	lsrs	r3, r3, #6
 80041b6:	3301      	adds	r3, #1
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d113      	bne.n	80041e8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80041c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004230 <HAL_PWREx_ConfigSupply+0x9c>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004230 <HAL_PWREx_ConfigSupply+0x9c>)
 80041c6:	f023 0302 	bic.w	r3, r3, #2
 80041ca:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80041cc:	e002      	b.n	80041d4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80041d4:	4b16      	ldr	r3, [pc, #88]	@ (8004230 <HAL_PWREx_ConfigSupply+0x9c>)
 80041d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d116      	bne.n	800420e <HAL_PWREx_ConfigSupply+0x7a>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f3      	bne.n	80041ce <HAL_PWREx_ConfigSupply+0x3a>
 80041e6:	e012      	b.n	800420e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80041e8:	4b11      	ldr	r3, [pc, #68]	@ (8004230 <HAL_PWREx_ConfigSupply+0x9c>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	4a10      	ldr	r2, [pc, #64]	@ (8004230 <HAL_PWREx_ConfigSupply+0x9c>)
 80041ee:	f043 0302 	orr.w	r3, r3, #2
 80041f2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80041f4:	e002      	b.n	80041fc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80041fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004230 <HAL_PWREx_ConfigSupply+0x9c>)
 80041fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d102      	bne.n	800420e <HAL_PWREx_ConfigSupply+0x7a>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f3      	bne.n	80041f6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e000      	b.n	800421a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000028 	.word	0x20000028
 800422c:	10624dd3 	.word	0x10624dd3
 8004230:	46020800 	.word	0x46020800

08004234 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004238:	4b05      	ldr	r3, [pc, #20]	@ (8004250 <HAL_PWREx_EnableVddIO2+0x1c>)
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	4a04      	ldr	r2, [pc, #16]	@ (8004250 <HAL_PWREx_EnableVddIO2+0x1c>)
 800423e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004242:	6113      	str	r3, [r2, #16]
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	46020800 	.word	0x46020800

08004254 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004258:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425c:	4a04      	ldr	r2, [pc, #16]	@ (8004270 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	46020800 	.word	0x46020800

08004274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08e      	sub	sp, #56	@ 0x38
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800427c:	2300      	movs	r3, #0
 800427e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f000 bec8 	b.w	800501e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800428e:	4b99      	ldr	r3, [pc, #612]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004298:	4b96      	ldr	r3, [pc, #600]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 800429a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 816c 	beq.w	8004588 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <HAL_RCC_OscConfig+0x52>
 80042b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	f040 80de 	bne.w	800447a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	f040 80da 	bne.w	800447a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d102      	bne.n	80042d4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	f000 bea5 	b.w	800501e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042d8:	4b86      	ldr	r3, [pc, #536]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d004      	beq.n	80042ee <HAL_RCC_OscConfig+0x7a>
 80042e4:	4b83      	ldr	r3, [pc, #524]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80042ec:	e005      	b.n	80042fa <HAL_RCC_OscConfig+0x86>
 80042ee:	4b81      	ldr	r3, [pc, #516]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80042f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d255      	bcs.n	80043aa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80042fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	4618      	mov	r0, r3
 800430a:	f001 f9dd 	bl	80056c8 <RCC_SetFlashLatencyFromMSIRange>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	f000 be82 	b.w	800501e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800431a:	4b76      	ldr	r3, [pc, #472]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	4a75      	ldr	r2, [pc, #468]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 8004320:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004324:	6093      	str	r3, [r2, #8]
 8004326:	4b73      	ldr	r3, [pc, #460]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	4970      	ldr	r1, [pc, #448]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 8004334:	4313      	orrs	r3, r2
 8004336:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004340:	d309      	bcc.n	8004356 <HAL_RCC_OscConfig+0xe2>
 8004342:	4b6c      	ldr	r3, [pc, #432]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f023 021f 	bic.w	r2, r3, #31
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	4969      	ldr	r1, [pc, #420]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 8004350:	4313      	orrs	r3, r2
 8004352:	60cb      	str	r3, [r1, #12]
 8004354:	e07e      	b.n	8004454 <HAL_RCC_OscConfig+0x1e0>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	2b00      	cmp	r3, #0
 800435c:	da0a      	bge.n	8004374 <HAL_RCC_OscConfig+0x100>
 800435e:	4b65      	ldr	r3, [pc, #404]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	015b      	lsls	r3, r3, #5
 800436c:	4961      	ldr	r1, [pc, #388]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 800436e:	4313      	orrs	r3, r2
 8004370:	60cb      	str	r3, [r1, #12]
 8004372:	e06f      	b.n	8004454 <HAL_RCC_OscConfig+0x1e0>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800437c:	d30a      	bcc.n	8004394 <HAL_RCC_OscConfig+0x120>
 800437e:	4b5d      	ldr	r3, [pc, #372]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	029b      	lsls	r3, r3, #10
 800438c:	4959      	ldr	r1, [pc, #356]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 800438e:	4313      	orrs	r3, r2
 8004390:	60cb      	str	r3, [r1, #12]
 8004392:	e05f      	b.n	8004454 <HAL_RCC_OscConfig+0x1e0>
 8004394:	4b57      	ldr	r3, [pc, #348]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	03db      	lsls	r3, r3, #15
 80043a2:	4954      	ldr	r1, [pc, #336]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60cb      	str	r3, [r1, #12]
 80043a8:	e054      	b.n	8004454 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80043aa:	4b52      	ldr	r3, [pc, #328]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	4a51      	ldr	r2, [pc, #324]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80043b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043b4:	6093      	str	r3, [r2, #8]
 80043b6:	4b4f      	ldr	r3, [pc, #316]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	494c      	ldr	r1, [pc, #304]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80043d0:	d309      	bcc.n	80043e6 <HAL_RCC_OscConfig+0x172>
 80043d2:	4b48      	ldr	r3, [pc, #288]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f023 021f 	bic.w	r2, r3, #31
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	4945      	ldr	r1, [pc, #276]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60cb      	str	r3, [r1, #12]
 80043e4:	e028      	b.n	8004438 <HAL_RCC_OscConfig+0x1c4>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	da0a      	bge.n	8004404 <HAL_RCC_OscConfig+0x190>
 80043ee:	4b41      	ldr	r3, [pc, #260]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	015b      	lsls	r3, r3, #5
 80043fc:	493d      	ldr	r1, [pc, #244]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	60cb      	str	r3, [r1, #12]
 8004402:	e019      	b.n	8004438 <HAL_RCC_OscConfig+0x1c4>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800440c:	d30a      	bcc.n	8004424 <HAL_RCC_OscConfig+0x1b0>
 800440e:	4b39      	ldr	r3, [pc, #228]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	029b      	lsls	r3, r3, #10
 800441c:	4935      	ldr	r1, [pc, #212]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 800441e:	4313      	orrs	r3, r2
 8004420:	60cb      	str	r3, [r1, #12]
 8004422:	e009      	b.n	8004438 <HAL_RCC_OscConfig+0x1c4>
 8004424:	4b33      	ldr	r3, [pc, #204]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	03db      	lsls	r3, r3, #15
 8004432:	4930      	ldr	r1, [pc, #192]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 8004434:	4313      	orrs	r3, r2
 8004436:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	4618      	mov	r0, r3
 8004444:	f001 f940 	bl	80056c8 <RCC_SetFlashLatencyFromMSIRange>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	f000 bde5 	b.w	800501e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004454:	f001 f8e2 	bl	800561c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004458:	4b27      	ldr	r3, [pc, #156]	@ (80044f8 <HAL_RCC_OscConfig+0x284>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff f8cd 	bl	80035fc <HAL_InitTick>
 8004462:	4603      	mov	r3, r0
 8004464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004468:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 808a 	beq.w	8004586 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004472:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004476:	f000 bdd2 	b.w	800501e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d066      	beq.n	8004550 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004482:	4b1c      	ldr	r3, [pc, #112]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1b      	ldr	r2, [pc, #108]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800448e:	f7ff f93f 	bl	8003710 <HAL_GetTick>
 8004492:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004494:	e009      	b.n	80044aa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004496:	f7ff f93b 	bl	8003710 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d902      	bls.n	80044aa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	f000 bdba 	b.w	800501e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80044aa:	4b12      	ldr	r3, [pc, #72]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0ef      	beq.n	8004496 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80044b6:	4b0f      	ldr	r3, [pc, #60]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	4a0e      	ldr	r2, [pc, #56]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80044bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044c0:	6093      	str	r3, [r2, #8]
 80044c2:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ce:	4909      	ldr	r1, [pc, #36]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80044dc:	d30e      	bcc.n	80044fc <HAL_RCC_OscConfig+0x288>
 80044de:	4b05      	ldr	r3, [pc, #20]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f023 021f 	bic.w	r2, r3, #31
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	4902      	ldr	r1, [pc, #8]	@ (80044f4 <HAL_RCC_OscConfig+0x280>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60cb      	str	r3, [r1, #12]
 80044f0:	e04a      	b.n	8004588 <HAL_RCC_OscConfig+0x314>
 80044f2:	bf00      	nop
 80044f4:	46020c00 	.word	0x46020c00
 80044f8:	20000048 	.word	0x20000048
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	da0a      	bge.n	800451a <HAL_RCC_OscConfig+0x2a6>
 8004504:	4b98      	ldr	r3, [pc, #608]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	015b      	lsls	r3, r3, #5
 8004512:	4995      	ldr	r1, [pc, #596]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004514:	4313      	orrs	r3, r2
 8004516:	60cb      	str	r3, [r1, #12]
 8004518:	e036      	b.n	8004588 <HAL_RCC_OscConfig+0x314>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004522:	d30a      	bcc.n	800453a <HAL_RCC_OscConfig+0x2c6>
 8004524:	4b90      	ldr	r3, [pc, #576]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	029b      	lsls	r3, r3, #10
 8004532:	498d      	ldr	r1, [pc, #564]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004534:	4313      	orrs	r3, r2
 8004536:	60cb      	str	r3, [r1, #12]
 8004538:	e026      	b.n	8004588 <HAL_RCC_OscConfig+0x314>
 800453a:	4b8b      	ldr	r3, [pc, #556]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	03db      	lsls	r3, r3, #15
 8004548:	4987      	ldr	r1, [pc, #540]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 800454a:	4313      	orrs	r3, r2
 800454c:	60cb      	str	r3, [r1, #12]
 800454e:	e01b      	b.n	8004588 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004550:	4b85      	ldr	r3, [pc, #532]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a84      	ldr	r2, [pc, #528]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800455c:	f7ff f8d8 	bl	8003710 <HAL_GetTick>
 8004560:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004562:	e009      	b.n	8004578 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004564:	f7ff f8d4 	bl	8003710 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d902      	bls.n	8004578 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	f000 bd53 	b.w	800501e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004578:	4b7b      	ldr	r3, [pc, #492]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ef      	bne.n	8004564 <HAL_RCC_OscConfig+0x2f0>
 8004584:	e000      	b.n	8004588 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004586:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 808b 	beq.w	80046ac <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004598:	2b08      	cmp	r3, #8
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_OscConfig+0x334>
 800459c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459e:	2b0c      	cmp	r3, #12
 80045a0:	d109      	bne.n	80045b6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d106      	bne.n	80045b6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d17d      	bne.n	80046ac <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f000 bd34 	b.w	800501e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045be:	d106      	bne.n	80045ce <HAL_RCC_OscConfig+0x35a>
 80045c0:	4b69      	ldr	r3, [pc, #420]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a68      	ldr	r2, [pc, #416]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 80045c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	e041      	b.n	8004652 <HAL_RCC_OscConfig+0x3de>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045d6:	d112      	bne.n	80045fe <HAL_RCC_OscConfig+0x38a>
 80045d8:	4b63      	ldr	r3, [pc, #396]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a62      	ldr	r2, [pc, #392]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 80045de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	4b60      	ldr	r3, [pc, #384]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a5f      	ldr	r2, [pc, #380]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 80045ea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	4b5d      	ldr	r3, [pc, #372]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a5c      	ldr	r2, [pc, #368]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 80045f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	e029      	b.n	8004652 <HAL_RCC_OscConfig+0x3de>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004606:	d112      	bne.n	800462e <HAL_RCC_OscConfig+0x3ba>
 8004608:	4b57      	ldr	r3, [pc, #348]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a56      	ldr	r2, [pc, #344]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 800460e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	4b54      	ldr	r3, [pc, #336]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a53      	ldr	r2, [pc, #332]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 800461a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	4b51      	ldr	r3, [pc, #324]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a50      	ldr	r2, [pc, #320]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004626:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	e011      	b.n	8004652 <HAL_RCC_OscConfig+0x3de>
 800462e:	4b4e      	ldr	r3, [pc, #312]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a4d      	ldr	r2, [pc, #308]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004634:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	4b4b      	ldr	r3, [pc, #300]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a4a      	ldr	r2, [pc, #296]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004640:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	4b48      	ldr	r3, [pc, #288]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a47      	ldr	r2, [pc, #284]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 800464c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004650:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d014      	beq.n	8004684 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800465a:	f7ff f859 	bl	8003710 <HAL_GetTick>
 800465e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004660:	e009      	b.n	8004676 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004662:	f7ff f855 	bl	8003710 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b64      	cmp	r3, #100	@ 0x64
 800466e:	d902      	bls.n	8004676 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	f000 bcd4 	b.w	800501e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004676:	4b3c      	ldr	r3, [pc, #240]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0ef      	beq.n	8004662 <HAL_RCC_OscConfig+0x3ee>
 8004682:	e013      	b.n	80046ac <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004684:	f7ff f844 	bl	8003710 <HAL_GetTick>
 8004688:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800468a:	e009      	b.n	80046a0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468c:	f7ff f840 	bl	8003710 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	@ 0x64
 8004698:	d902      	bls.n	80046a0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	f000 bcbf 	b.w	800501e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046a0:	4b31      	ldr	r3, [pc, #196]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1ef      	bne.n	800468c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d05f      	beq.n	8004778 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80046b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d005      	beq.n	80046ca <HAL_RCC_OscConfig+0x456>
 80046be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	d114      	bne.n	80046ee <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d111      	bne.n	80046ee <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d102      	bne.n	80046d8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f000 bca3 	b.w	800501e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80046d8:	4b23      	ldr	r3, [pc, #140]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	041b      	lsls	r3, r3, #16
 80046e6:	4920      	ldr	r1, [pc, #128]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80046ec:	e044      	b.n	8004778 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d024      	beq.n	8004740 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80046f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 80046fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004700:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004702:	f7ff f805 	bl	8003710 <HAL_GetTick>
 8004706:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004708:	e009      	b.n	800471e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470a:	f7ff f801 	bl	8003710 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d902      	bls.n	800471e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	f000 bc80 	b.w	800501e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800471e:	4b12      	ldr	r3, [pc, #72]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0ef      	beq.n	800470a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800472a:	4b0f      	ldr	r3, [pc, #60]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	490b      	ldr	r1, [pc, #44]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	610b      	str	r3, [r1, #16]
 800473e:	e01b      	b.n	8004778 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004740:	4b09      	ldr	r3, [pc, #36]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a08      	ldr	r2, [pc, #32]	@ (8004768 <HAL_RCC_OscConfig+0x4f4>)
 8004746:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800474a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800474c:	f7fe ffe0 	bl	8003710 <HAL_GetTick>
 8004750:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004752:	e00b      	b.n	800476c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004754:	f7fe ffdc 	bl	8003710 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d904      	bls.n	800476c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	f000 bc5b 	b.w	800501e <HAL_RCC_OscConfig+0xdaa>
 8004768:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800476c:	4baf      	ldr	r3, [pc, #700]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ed      	bne.n	8004754 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80c8 	beq.w	8004916 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004786:	2300      	movs	r3, #0
 8004788:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800478c:	4ba7      	ldr	r3, [pc, #668]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 800478e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b00      	cmp	r3, #0
 8004798:	d111      	bne.n	80047be <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479a:	4ba4      	ldr	r3, [pc, #656]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 800479c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047a0:	4aa2      	ldr	r2, [pc, #648]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80047a2:	f043 0304 	orr.w	r3, r3, #4
 80047a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80047aa:	4ba0      	ldr	r3, [pc, #640]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80047ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80047b8:	2301      	movs	r3, #1
 80047ba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047be:	4b9c      	ldr	r3, [pc, #624]	@ (8004a30 <HAL_RCC_OscConfig+0x7bc>)
 80047c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d119      	bne.n	80047fe <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80047ca:	4b99      	ldr	r3, [pc, #612]	@ (8004a30 <HAL_RCC_OscConfig+0x7bc>)
 80047cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ce:	4a98      	ldr	r2, [pc, #608]	@ (8004a30 <HAL_RCC_OscConfig+0x7bc>)
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047d6:	f7fe ff9b 	bl	8003710 <HAL_GetTick>
 80047da:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047dc:	e009      	b.n	80047f2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047de:	f7fe ff97 	bl	8003710 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d902      	bls.n	80047f2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	f000 bc16 	b.w	800501e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047f2:	4b8f      	ldr	r3, [pc, #572]	@ (8004a30 <HAL_RCC_OscConfig+0x7bc>)
 80047f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0ef      	beq.n	80047de <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d05f      	beq.n	80048c6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004806:	4b89      	ldr	r3, [pc, #548]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 8004808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800480c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004818:	429a      	cmp	r2, r3
 800481a:	d037      	beq.n	800488c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d006      	beq.n	8004834 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e3f4      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d01b      	beq.n	8004876 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800483e:	4b7b      	ldr	r3, [pc, #492]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 8004840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004844:	4a79      	ldr	r2, [pc, #484]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 8004846:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800484a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800484e:	f7fe ff5f 	bl	8003710 <HAL_GetTick>
 8004852:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004856:	f7fe ff5b 	bl	8003710 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b05      	cmp	r3, #5
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e3da      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004868:	4b70      	ldr	r3, [pc, #448]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 800486a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800486e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1ef      	bne.n	8004856 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004876:	4b6d      	ldr	r3, [pc, #436]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 8004878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800487c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	4969      	ldr	r1, [pc, #420]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800488c:	4b67      	ldr	r3, [pc, #412]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 800488e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004892:	4a66      	ldr	r2, [pc, #408]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 8004894:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004898:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800489c:	f7fe ff38 	bl	8003710 <HAL_GetTick>
 80048a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a4:	f7fe ff34 	bl	8003710 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b05      	cmp	r3, #5
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e3b3      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80048b6:	4b5d      	ldr	r3, [pc, #372]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80048b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0ef      	beq.n	80048a4 <HAL_RCC_OscConfig+0x630>
 80048c4:	e01b      	b.n	80048fe <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80048c6:	4b59      	ldr	r3, [pc, #356]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80048c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048cc:	4a57      	ldr	r2, [pc, #348]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80048ce:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80048d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80048d6:	f7fe ff1b 	bl	8003710 <HAL_GetTick>
 80048da:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048de:	f7fe ff17 	bl	8003710 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b05      	cmp	r3, #5
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e396      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80048f0:	4b4e      	ldr	r3, [pc, #312]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80048f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1ef      	bne.n	80048de <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048fe:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004902:	2b01      	cmp	r3, #1
 8004904:	d107      	bne.n	8004916 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004906:	4b49      	ldr	r3, [pc, #292]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 8004908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800490c:	4a47      	ldr	r2, [pc, #284]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 800490e:	f023 0304 	bic.w	r3, r3, #4
 8004912:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 8111 	beq.w	8004b46 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004924:	2300      	movs	r3, #0
 8004926:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492a:	4b40      	ldr	r3, [pc, #256]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 800492c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d111      	bne.n	800495c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004938:	4b3c      	ldr	r3, [pc, #240]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 800493a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800493e:	4a3b      	ldr	r2, [pc, #236]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 8004940:	f043 0304 	orr.w	r3, r3, #4
 8004944:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004948:	4b38      	ldr	r3, [pc, #224]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 800494a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800495c:	4b34      	ldr	r3, [pc, #208]	@ (8004a30 <HAL_RCC_OscConfig+0x7bc>)
 800495e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d118      	bne.n	800499a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004968:	4b31      	ldr	r3, [pc, #196]	@ (8004a30 <HAL_RCC_OscConfig+0x7bc>)
 800496a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496c:	4a30      	ldr	r2, [pc, #192]	@ (8004a30 <HAL_RCC_OscConfig+0x7bc>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004974:	f7fe fecc 	bl	8003710 <HAL_GetTick>
 8004978:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800497c:	f7fe fec8 	bl	8003710 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e347      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800498e:	4b28      	ldr	r3, [pc, #160]	@ (8004a30 <HAL_RCC_OscConfig+0x7bc>)
 8004990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01f      	beq.n	80049e6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d010      	beq.n	80049d4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80049b2:	4b1e      	ldr	r3, [pc, #120]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80049b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049b8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80049ba:	f043 0304 	orr.w	r3, r3, #4
 80049be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049c2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80049c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049c8:	4a18      	ldr	r2, [pc, #96]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80049d2:	e018      	b.n	8004a06 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049d4:	4b15      	ldr	r3, [pc, #84]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80049d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049da:	4a14      	ldr	r2, [pc, #80]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80049e4:	e00f      	b.n	8004a06 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049e6:	4b11      	ldr	r3, [pc, #68]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80049e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049ec:	4a0f      	ldr	r2, [pc, #60]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80049f6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80049f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049fc:	4a0b      	ldr	r2, [pc, #44]	@ (8004a2c <HAL_RCC_OscConfig+0x7b8>)
 80049fe:	f023 0304 	bic.w	r3, r3, #4
 8004a02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d057      	beq.n	8004abe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004a0e:	f7fe fe7f 	bl	8003710 <HAL_GetTick>
 8004a12:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a14:	e00e      	b.n	8004a34 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a16:	f7fe fe7b 	bl	8003710 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d905      	bls.n	8004a34 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e2f8      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
 8004a2c:	46020c00 	.word	0x46020c00
 8004a30:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a34:	4b9c      	ldr	r3, [pc, #624]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0e9      	beq.n	8004a16 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d01b      	beq.n	8004a86 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004a4e:	4b96      	ldr	r3, [pc, #600]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a54:	4a94      	ldr	r2, [pc, #592]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f7fe fe56 	bl	8003710 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e2d3      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004a76:	4b8c      	ldr	r3, [pc, #560]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0ed      	beq.n	8004a60 <HAL_RCC_OscConfig+0x7ec>
 8004a84:	e053      	b.n	8004b2e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004a86:	4b88      	ldr	r3, [pc, #544]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a8c:	4a86      	ldr	r2, [pc, #536]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004a8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a96:	e00a      	b.n	8004aae <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a98:	f7fe fe3a 	bl	8003710 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e2b7      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004aae:	4b7e      	ldr	r3, [pc, #504]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ed      	bne.n	8004a98 <HAL_RCC_OscConfig+0x824>
 8004abc:	e037      	b.n	8004b2e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004abe:	f7fe fe27 	bl	8003710 <HAL_GetTick>
 8004ac2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ac4:	e00a      	b.n	8004adc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac6:	f7fe fe23 	bl	8003710 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e2a0      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004adc:	4b72      	ldr	r3, [pc, #456]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1ed      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004aea:	4b6f      	ldr	r3, [pc, #444]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01a      	beq.n	8004b2e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004af8:	4b6b      	ldr	r3, [pc, #428]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004afe:	4a6a      	ldr	r2, [pc, #424]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004b00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b08:	e00a      	b.n	8004b20 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b0a:	f7fe fe01 	bl	8003710 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e27e      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b20:	4b61      	ldr	r3, [pc, #388]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004b22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1ed      	bne.n	8004b0a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b2e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d107      	bne.n	8004b46 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b36:	4b5c      	ldr	r3, [pc, #368]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b3c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004b3e:	f023 0304 	bic.w	r3, r3, #4
 8004b42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d036      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d019      	beq.n	8004b8e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004b5a:	4b53      	ldr	r3, [pc, #332]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a52      	ldr	r2, [pc, #328]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004b60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b64:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b66:	f7fe fdd3 	bl	8003710 <HAL_GetTick>
 8004b6a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b6e:	f7fe fdcf 	bl	8003710 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e24e      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004b80:	4b49      	ldr	r3, [pc, #292]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f0      	beq.n	8004b6e <HAL_RCC_OscConfig+0x8fa>
 8004b8c:	e018      	b.n	8004bc0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004b8e:	4b46      	ldr	r3, [pc, #280]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a45      	ldr	r2, [pc, #276]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004b94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b98:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b9a:	f7fe fdb9 	bl	8003710 <HAL_GetTick>
 8004b9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ba2:	f7fe fdb5 	bl	8003710 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e234      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1f0      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d036      	beq.n	8004c3a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d019      	beq.n	8004c08 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004bd4:	4b34      	ldr	r3, [pc, #208]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a33      	ldr	r2, [pc, #204]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004bda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bde:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004be0:	f7fe fd96 	bl	8003710 <HAL_GetTick>
 8004be4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004be8:	f7fe fd92 	bl	8003710 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e211      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0x974>
 8004c06:	e018      	b.n	8004c3a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004c08:	4b27      	ldr	r3, [pc, #156]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a26      	ldr	r2, [pc, #152]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004c0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c12:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004c14:	f7fe fd7c 	bl	8003710 <HAL_GetTick>
 8004c18:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004c1c:	f7fe fd78 	bl	8003710 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e1f7      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d07f      	beq.n	8004d46 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d062      	beq.n	8004d14 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004c4e:	4b16      	ldr	r3, [pc, #88]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	4a15      	ldr	r2, [pc, #84]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004c54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c58:	6093      	str	r3, [r2, #8]
 8004c5a:	4b13      	ldr	r3, [pc, #76]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c66:	4910      	ldr	r1, [pc, #64]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c70:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004c74:	d309      	bcc.n	8004c8a <HAL_RCC_OscConfig+0xa16>
 8004c76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f023 021f 	bic.w	r2, r3, #31
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	4909      	ldr	r1, [pc, #36]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60cb      	str	r3, [r1, #12]
 8004c88:	e02a      	b.n	8004ce0 <HAL_RCC_OscConfig+0xa6c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	da0c      	bge.n	8004cac <HAL_RCC_OscConfig+0xa38>
 8004c92:	4b05      	ldr	r3, [pc, #20]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	015b      	lsls	r3, r3, #5
 8004ca0:	4901      	ldr	r1, [pc, #4]	@ (8004ca8 <HAL_RCC_OscConfig+0xa34>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60cb      	str	r3, [r1, #12]
 8004ca6:	e01b      	b.n	8004ce0 <HAL_RCC_OscConfig+0xa6c>
 8004ca8:	46020c00 	.word	0x46020c00
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb4:	d30a      	bcc.n	8004ccc <HAL_RCC_OscConfig+0xa58>
 8004cb6:	4ba1      	ldr	r3, [pc, #644]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	029b      	lsls	r3, r3, #10
 8004cc4:	499d      	ldr	r1, [pc, #628]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60cb      	str	r3, [r1, #12]
 8004cca:	e009      	b.n	8004ce0 <HAL_RCC_OscConfig+0xa6c>
 8004ccc:	4b9b      	ldr	r3, [pc, #620]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	03db      	lsls	r3, r3, #15
 8004cda:	4998      	ldr	r1, [pc, #608]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004ce0:	4b96      	ldr	r3, [pc, #600]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a95      	ldr	r2, [pc, #596]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004ce6:	f043 0310 	orr.w	r3, r3, #16
 8004cea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004cec:	f7fe fd10 	bl	8003710 <HAL_GetTick>
 8004cf0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004cf4:	f7fe fd0c 	bl	8003710 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e18b      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004d06:	4b8d      	ldr	r3, [pc, #564]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_RCC_OscConfig+0xa80>
 8004d12:	e018      	b.n	8004d46 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004d14:	4b89      	ldr	r3, [pc, #548]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a88      	ldr	r2, [pc, #544]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004d1a:	f023 0310 	bic.w	r3, r3, #16
 8004d1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004d20:	f7fe fcf6 	bl	8003710 <HAL_GetTick>
 8004d24:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004d28:	f7fe fcf2 	bl	8003710 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e171      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004d3a:	4b80      	ldr	r3, [pc, #512]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 8166 	beq.w	800501c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004d50:	2300      	movs	r3, #0
 8004d52:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d56:	4b79      	ldr	r3, [pc, #484]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	2b0c      	cmp	r3, #12
 8004d60:	f000 80f2 	beq.w	8004f48 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	f040 80c5 	bne.w	8004ef8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004d6e:	4b73      	ldr	r3, [pc, #460]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a72      	ldr	r2, [pc, #456]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004d74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d78:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d7a:	f7fe fcc9 	bl	8003710 <HAL_GetTick>
 8004d7e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d82:	f7fe fcc5 	bl	8003710 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e144      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d94:	4b69      	ldr	r3, [pc, #420]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f0      	bne.n	8004d82 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da0:	4b66      	ldr	r3, [pc, #408]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d111      	bne.n	8004dd2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004dae:	4b63      	ldr	r3, [pc, #396]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004db4:	4a61      	ldr	r2, [pc, #388]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004db6:	f043 0304 	orr.w	r3, r3, #4
 8004dba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004dbe:	4b5f      	ldr	r3, [pc, #380]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f40 <HAL_RCC_OscConfig+0xccc>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dde:	d102      	bne.n	8004de6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004de6:	4b56      	ldr	r3, [pc, #344]	@ (8004f40 <HAL_RCC_OscConfig+0xccc>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	4a55      	ldr	r2, [pc, #340]	@ (8004f40 <HAL_RCC_OscConfig+0xccc>)
 8004dec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004df0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004df2:	4b52      	ldr	r3, [pc, #328]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e06:	3a01      	subs	r2, #1
 8004e08:	0212      	lsls	r2, r2, #8
 8004e0a:	4311      	orrs	r1, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004e10:	430a      	orrs	r2, r1
 8004e12:	494a      	ldr	r1, [pc, #296]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e18:	4b48      	ldr	r3, [pc, #288]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004e1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e1c:	4b49      	ldr	r3, [pc, #292]	@ (8004f44 <HAL_RCC_OscConfig+0xcd0>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e24:	3a01      	subs	r2, #1
 8004e26:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004e2e:	3a01      	subs	r2, #1
 8004e30:	0252      	lsls	r2, r2, #9
 8004e32:	b292      	uxth	r2, r2
 8004e34:	4311      	orrs	r1, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e3a:	3a01      	subs	r2, #1
 8004e3c:	0412      	lsls	r2, r2, #16
 8004e3e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004e42:	4311      	orrs	r1, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004e48:	3a01      	subs	r2, #1
 8004e4a:	0612      	lsls	r2, r2, #24
 8004e4c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004e50:	430a      	orrs	r2, r1
 8004e52:	493a      	ldr	r1, [pc, #232]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004e58:	4b38      	ldr	r3, [pc, #224]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	4a37      	ldr	r2, [pc, #220]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004e5e:	f023 0310 	bic.w	r3, r3, #16
 8004e62:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e68:	4a34      	ldr	r2, [pc, #208]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004e6e:	4b33      	ldr	r3, [pc, #204]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e72:	4a32      	ldr	r2, [pc, #200]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004e74:	f043 0310 	orr.w	r3, r3, #16
 8004e78:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004e7a:	4b30      	ldr	r3, [pc, #192]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7e:	f023 020c 	bic.w	r2, r3, #12
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e86:	492d      	ldr	r1, [pc, #180]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004e8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d105      	bne.n	8004ea0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004e94:	4b2a      	ldr	r3, [pc, #168]	@ (8004f40 <HAL_RCC_OscConfig+0xccc>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4a29      	ldr	r2, [pc, #164]	@ (8004f40 <HAL_RCC_OscConfig+0xccc>)
 8004e9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e9e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004ea0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d107      	bne.n	8004eb8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004ea8:	4b24      	ldr	r3, [pc, #144]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eae:	4a23      	ldr	r2, [pc, #140]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004eb0:	f023 0304 	bic.w	r3, r3, #4
 8004eb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004eb8:	4b20      	ldr	r3, [pc, #128]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ec2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004ec4:	f7fe fc24 	bl	8003710 <HAL_GetTick>
 8004ec8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ecc:	f7fe fc20 	bl	8003710 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e09f      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004ede:	4b17      	ldr	r3, [pc, #92]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004eea:	4b14      	ldr	r3, [pc, #80]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eee:	4a13      	ldr	r2, [pc, #76]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ef4:	6293      	str	r3, [r2, #40]	@ 0x28
 8004ef6:	e091      	b.n	800501c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004ef8:	4b10      	ldr	r3, [pc, #64]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a0f      	ldr	r2, [pc, #60]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004efe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f02:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004f04:	f7fe fc04 	bl	8003710 <HAL_GetTick>
 8004f08:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0c:	f7fe fc00 	bl	8003710 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e07f      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004f1e:	4b07      	ldr	r3, [pc, #28]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004f2a:	4b04      	ldr	r3, [pc, #16]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2e:	4a03      	ldr	r2, [pc, #12]	@ (8004f3c <HAL_RCC_OscConfig+0xcc8>)
 8004f30:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004f34:	f023 0303 	bic.w	r3, r3, #3
 8004f38:	6293      	str	r3, [r2, #40]	@ 0x28
 8004f3a:	e06f      	b.n	800501c <HAL_RCC_OscConfig+0xda8>
 8004f3c:	46020c00 	.word	0x46020c00
 8004f40:	46020800 	.word	0x46020800
 8004f44:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004f48:	4b37      	ldr	r3, [pc, #220]	@ (8005028 <HAL_RCC_OscConfig+0xdb4>)
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f4e:	4b36      	ldr	r3, [pc, #216]	@ (8005028 <HAL_RCC_OscConfig+0xdb4>)
 8004f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f52:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d039      	beq.n	8004fd0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f003 0203 	and.w	r2, r3, #3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d132      	bne.n	8004fd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	0a1b      	lsrs	r3, r3, #8
 8004f6e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f76:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d129      	bne.n	8004fd0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d122      	bne.n	8004fd0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f94:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d11a      	bne.n	8004fd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	0a5b      	lsrs	r3, r3, #9
 8004f9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d111      	bne.n	8004fd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	0c1b      	lsrs	r3, r3, #16
 8004fb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fb8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d108      	bne.n	8004fd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	0e1b      	lsrs	r3, r3, #24
 8004fc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d001      	beq.n	8004fd4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e024      	b.n	800501e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004fd4:	4b14      	ldr	r3, [pc, #80]	@ (8005028 <HAL_RCC_OscConfig+0xdb4>)
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	08db      	lsrs	r3, r3, #3
 8004fda:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d01a      	beq.n	800501c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004fe6:	4b10      	ldr	r3, [pc, #64]	@ (8005028 <HAL_RCC_OscConfig+0xdb4>)
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fea:	4a0f      	ldr	r2, [pc, #60]	@ (8005028 <HAL_RCC_OscConfig+0xdb4>)
 8004fec:	f023 0310 	bic.w	r3, r3, #16
 8004ff0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff2:	f7fe fb8d 	bl	8003710 <HAL_GetTick>
 8004ff6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004ff8:	bf00      	nop
 8004ffa:	f7fe fb89 	bl	8003710 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005002:	4293      	cmp	r3, r2
 8005004:	d0f9      	beq.n	8004ffa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800500a:	4a07      	ldr	r2, [pc, #28]	@ (8005028 <HAL_RCC_OscConfig+0xdb4>)
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005010:	4b05      	ldr	r3, [pc, #20]	@ (8005028 <HAL_RCC_OscConfig+0xdb4>)
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	4a04      	ldr	r2, [pc, #16]	@ (8005028 <HAL_RCC_OscConfig+0xdb4>)
 8005016:	f043 0310 	orr.w	r3, r3, #16
 800501a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3738      	adds	r7, #56	@ 0x38
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	46020c00 	.word	0x46020c00

0800502c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e1d9      	b.n	80053f4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005040:	4b9b      	ldr	r3, [pc, #620]	@ (80052b0 <HAL_RCC_ClockConfig+0x284>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d910      	bls.n	8005070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b98      	ldr	r3, [pc, #608]	@ (80052b0 <HAL_RCC_ClockConfig+0x284>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 020f 	bic.w	r2, r3, #15
 8005056:	4996      	ldr	r1, [pc, #600]	@ (80052b0 <HAL_RCC_ClockConfig+0x284>)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b94      	ldr	r3, [pc, #592]	@ (80052b0 <HAL_RCC_ClockConfig+0x284>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e1c1      	b.n	80053f4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	2b00      	cmp	r3, #0
 800507a:	d010      	beq.n	800509e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	4b8c      	ldr	r3, [pc, #560]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005088:	429a      	cmp	r2, r3
 800508a:	d908      	bls.n	800509e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800508c:	4b89      	ldr	r3, [pc, #548]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 800508e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005090:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	4986      	ldr	r1, [pc, #536]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 800509a:	4313      	orrs	r3, r2
 800509c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d012      	beq.n	80050d0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	4b81      	ldr	r3, [pc, #516]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	091b      	lsrs	r3, r3, #4
 80050b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d909      	bls.n	80050d0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80050bc:	4b7d      	ldr	r3, [pc, #500]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	497a      	ldr	r1, [pc, #488]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d010      	beq.n	80050fe <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	4b74      	ldr	r3, [pc, #464]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d908      	bls.n	80050fe <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80050ec:	4b71      	ldr	r3, [pc, #452]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	496e      	ldr	r1, [pc, #440]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d010      	beq.n	800512c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	4b69      	ldr	r3, [pc, #420]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	429a      	cmp	r2, r3
 8005118:	d908      	bls.n	800512c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800511a:	4b66      	ldr	r3, [pc, #408]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f023 020f 	bic.w	r2, r3, #15
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	4963      	ldr	r1, [pc, #396]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 8005128:	4313      	orrs	r3, r2
 800512a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80d2 	beq.w	80052de <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800513a:	2300      	movs	r3, #0
 800513c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b03      	cmp	r3, #3
 8005144:	d143      	bne.n	80051ce <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005146:	4b5b      	ldr	r3, [pc, #364]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 8005148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d110      	bne.n	8005176 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005154:	4b57      	ldr	r3, [pc, #348]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 8005156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800515a:	4a56      	ldr	r2, [pc, #344]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 800515c:	f043 0304 	orr.w	r3, r3, #4
 8005160:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005164:	4b53      	ldr	r3, [pc, #332]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 8005166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	60bb      	str	r3, [r7, #8]
 8005170:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005172:	2301      	movs	r3, #1
 8005174:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005176:	f7fe facb 	bl	8003710 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800517c:	4b4e      	ldr	r3, [pc, #312]	@ (80052b8 <HAL_RCC_ClockConfig+0x28c>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00f      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005188:	e008      	b.n	800519c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800518a:	f7fe fac1 	bl	8003710 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e12b      	b.n	80053f4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800519c:	4b46      	ldr	r3, [pc, #280]	@ (80052b8 <HAL_RCC_ClockConfig+0x28c>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0f0      	beq.n	800518a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d107      	bne.n	80051be <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80051ae:	4b41      	ldr	r3, [pc, #260]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 80051b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b4:	4a3f      	ldr	r2, [pc, #252]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 80051b6:	f023 0304 	bic.w	r3, r3, #4
 80051ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80051be:	4b3d      	ldr	r3, [pc, #244]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d121      	bne.n	800520e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e112      	b.n	80053f4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d107      	bne.n	80051e6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051d6:	4b37      	ldr	r3, [pc, #220]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d115      	bne.n	800520e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e106      	b.n	80053f4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d107      	bne.n	80051fe <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80051ee:	4b31      	ldr	r3, [pc, #196]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d109      	bne.n	800520e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e0fa      	b.n	80053f4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051fe:	4b2d      	ldr	r3, [pc, #180]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e0f2      	b.n	80053f4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800520e:	4b29      	ldr	r3, [pc, #164]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f023 0203 	bic.w	r2, r3, #3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	4926      	ldr	r1, [pc, #152]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 800521c:	4313      	orrs	r3, r2
 800521e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005220:	f7fe fa76 	bl	8003710 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b03      	cmp	r3, #3
 800522c:	d112      	bne.n	8005254 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800522e:	e00a      	b.n	8005246 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005230:	f7fe fa6e 	bl	8003710 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800523e:	4293      	cmp	r3, r2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e0d6      	b.n	80053f4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005246:	4b1b      	ldr	r3, [pc, #108]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b0c      	cmp	r3, #12
 8005250:	d1ee      	bne.n	8005230 <HAL_RCC_ClockConfig+0x204>
 8005252:	e044      	b.n	80052de <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d112      	bne.n	8005282 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800525c:	e00a      	b.n	8005274 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800525e:	f7fe fa57 	bl	8003710 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800526c:	4293      	cmp	r3, r2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e0bf      	b.n	80053f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005274:	4b0f      	ldr	r3, [pc, #60]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f003 030c 	and.w	r3, r3, #12
 800527c:	2b08      	cmp	r3, #8
 800527e:	d1ee      	bne.n	800525e <HAL_RCC_ClockConfig+0x232>
 8005280:	e02d      	b.n	80052de <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d123      	bne.n	80052d2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800528a:	e00a      	b.n	80052a2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800528c:	f7fe fa40 	bl	8003710 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e0a8      	b.n	80053f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80052a2:	4b04      	ldr	r3, [pc, #16]	@ (80052b4 <HAL_RCC_ClockConfig+0x288>)
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f003 030c 	and.w	r3, r3, #12
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1ee      	bne.n	800528c <HAL_RCC_ClockConfig+0x260>
 80052ae:	e016      	b.n	80052de <HAL_RCC_ClockConfig+0x2b2>
 80052b0:	40022000 	.word	0x40022000
 80052b4:	46020c00 	.word	0x46020c00
 80052b8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052bc:	f7fe fa28 	bl	8003710 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e090      	b.n	80053f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052d2:	4b4a      	ldr	r3, [pc, #296]	@ (80053fc <HAL_RCC_ClockConfig+0x3d0>)
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f003 030c 	and.w	r3, r3, #12
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d1ee      	bne.n	80052bc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d010      	beq.n	800530c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	4b43      	ldr	r3, [pc, #268]	@ (80053fc <HAL_RCC_ClockConfig+0x3d0>)
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d208      	bcs.n	800530c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80052fa:	4b40      	ldr	r3, [pc, #256]	@ (80053fc <HAL_RCC_ClockConfig+0x3d0>)
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f023 020f 	bic.w	r2, r3, #15
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	493d      	ldr	r1, [pc, #244]	@ (80053fc <HAL_RCC_ClockConfig+0x3d0>)
 8005308:	4313      	orrs	r3, r2
 800530a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800530c:	4b3c      	ldr	r3, [pc, #240]	@ (8005400 <HAL_RCC_ClockConfig+0x3d4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d210      	bcs.n	800533c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531a:	4b39      	ldr	r3, [pc, #228]	@ (8005400 <HAL_RCC_ClockConfig+0x3d4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f023 020f 	bic.w	r2, r3, #15
 8005322:	4937      	ldr	r1, [pc, #220]	@ (8005400 <HAL_RCC_ClockConfig+0x3d4>)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	4313      	orrs	r3, r2
 8005328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800532a:	4b35      	ldr	r3, [pc, #212]	@ (8005400 <HAL_RCC_ClockConfig+0x3d4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e05b      	b.n	80053f4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d010      	beq.n	800536a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	4b2b      	ldr	r3, [pc, #172]	@ (80053fc <HAL_RCC_ClockConfig+0x3d0>)
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005354:	429a      	cmp	r2, r3
 8005356:	d208      	bcs.n	800536a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005358:	4b28      	ldr	r3, [pc, #160]	@ (80053fc <HAL_RCC_ClockConfig+0x3d0>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	4925      	ldr	r1, [pc, #148]	@ (80053fc <HAL_RCC_ClockConfig+0x3d0>)
 8005366:	4313      	orrs	r3, r2
 8005368:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b00      	cmp	r3, #0
 8005374:	d012      	beq.n	800539c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	4b20      	ldr	r3, [pc, #128]	@ (80053fc <HAL_RCC_ClockConfig+0x3d0>)
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	091b      	lsrs	r3, r3, #4
 8005380:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005384:	429a      	cmp	r2, r3
 8005386:	d209      	bcs.n	800539c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005388:	4b1c      	ldr	r3, [pc, #112]	@ (80053fc <HAL_RCC_ClockConfig+0x3d0>)
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	4919      	ldr	r1, [pc, #100]	@ (80053fc <HAL_RCC_ClockConfig+0x3d0>)
 8005398:	4313      	orrs	r3, r2
 800539a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d010      	beq.n	80053ca <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	4b13      	ldr	r3, [pc, #76]	@ (80053fc <HAL_RCC_ClockConfig+0x3d0>)
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d208      	bcs.n	80053ca <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80053b8:	4b10      	ldr	r3, [pc, #64]	@ (80053fc <HAL_RCC_ClockConfig+0x3d0>)
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	490d      	ldr	r1, [pc, #52]	@ (80053fc <HAL_RCC_ClockConfig+0x3d0>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80053ca:	f000 f821 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 80053ce:	4602      	mov	r2, r0
 80053d0:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <HAL_RCC_ClockConfig+0x3d0>)
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	490a      	ldr	r1, [pc, #40]	@ (8005404 <HAL_RCC_ClockConfig+0x3d8>)
 80053da:	5ccb      	ldrb	r3, [r1, r3]
 80053dc:	fa22 f303 	lsr.w	r3, r2, r3
 80053e0:	4a09      	ldr	r2, [pc, #36]	@ (8005408 <HAL_RCC_ClockConfig+0x3dc>)
 80053e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053e4:	4b09      	ldr	r3, [pc, #36]	@ (800540c <HAL_RCC_ClockConfig+0x3e0>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fe f907 	bl	80035fc <HAL_InitTick>
 80053ee:	4603      	mov	r3, r0
 80053f0:	73fb      	strb	r3, [r7, #15]

  return status;
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	46020c00 	.word	0x46020c00
 8005400:	40022000 	.word	0x40022000
 8005404:	0800ec1c 	.word	0x0800ec1c
 8005408:	20000028 	.word	0x20000028
 800540c:	20000048 	.word	0x20000048

08005410 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005410:	b480      	push	{r7}
 8005412:	b08b      	sub	sp, #44	@ 0x2c
 8005414:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800541a:	2300      	movs	r3, #0
 800541c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800541e:	4b78      	ldr	r3, [pc, #480]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f003 030c 	and.w	r3, r3, #12
 8005426:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005428:	4b75      	ldr	r3, [pc, #468]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800542a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542c:	f003 0303 	and.w	r3, r3, #3
 8005430:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <HAL_RCC_GetSysClockFreq+0x34>
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b0c      	cmp	r3, #12
 800543c:	d121      	bne.n	8005482 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d11e      	bne.n	8005482 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005444:	4b6e      	ldr	r3, [pc, #440]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d107      	bne.n	8005460 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005450:	4b6b      	ldr	r3, [pc, #428]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005452:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005456:	0b1b      	lsrs	r3, r3, #12
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	627b      	str	r3, [r7, #36]	@ 0x24
 800545e:	e005      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005460:	4b67      	ldr	r3, [pc, #412]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	0f1b      	lsrs	r3, r3, #28
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800546c:	4a65      	ldr	r2, [pc, #404]	@ (8005604 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005474:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d110      	bne.n	800549e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005480:	e00d      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005482:	4b5f      	ldr	r3, [pc, #380]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f003 030c 	and.w	r3, r3, #12
 800548a:	2b04      	cmp	r3, #4
 800548c:	d102      	bne.n	8005494 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800548e:	4b5e      	ldr	r3, [pc, #376]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005490:	623b      	str	r3, [r7, #32]
 8005492:	e004      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b08      	cmp	r3, #8
 8005498:	d101      	bne.n	800549e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800549a:	4b5c      	ldr	r3, [pc, #368]	@ (800560c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800549c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b0c      	cmp	r3, #12
 80054a2:	f040 80a5 	bne.w	80055f0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80054a6:	4b56      	ldr	r3, [pc, #344]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80054a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80054b0:	4b53      	ldr	r3, [pc, #332]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80054b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b4:	0a1b      	lsrs	r3, r3, #8
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	3301      	adds	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80054be:	4b50      	ldr	r3, [pc, #320]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80054c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c2:	091b      	lsrs	r3, r3, #4
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80054ca:	4b4d      	ldr	r3, [pc, #308]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80054cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ce:	08db      	lsrs	r3, r3, #3
 80054d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d003      	beq.n	80054f4 <HAL_RCC_GetSysClockFreq+0xe4>
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d022      	beq.n	8005538 <HAL_RCC_GetSysClockFreq+0x128>
 80054f2:	e043      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fe:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8005610 <HAL_RCC_GetSysClockFreq+0x200>
 8005502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005506:	4b3e      	ldr	r3, [pc, #248]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550e:	ee07 3a90 	vmov	s15, r3
 8005512:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005516:	ed97 6a01 	vldr	s12, [r7, #4]
 800551a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005614 <HAL_RCC_GetSysClockFreq+0x204>
 800551e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005522:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800552a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800552e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005536:	e046      	b.n	80055c6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005542:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8005618 <HAL_RCC_GetSysClockFreq+0x208>
 8005546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800554a:	4b2d      	ldr	r3, [pc, #180]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800554c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800555a:	ed97 6a01 	vldr	s12, [r7, #4]
 800555e:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005614 <HAL_RCC_GetSysClockFreq+0x204>
 8005562:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005566:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800556a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800556e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800557a:	e024      	b.n	80055c6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	ee07 3a90 	vmov	s15, r3
 800558c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005594:	4b1a      	ldr	r3, [pc, #104]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559c:	ee07 3a90 	vmov	s15, r3
 80055a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80055a4:	ed97 6a01 	vldr	s12, [r7, #4]
 80055a8:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8005614 <HAL_RCC_GetSysClockFreq+0x204>
 80055ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80055b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055c4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80055c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80055c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ca:	0e1b      	lsrs	r3, r3, #24
 80055cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055d0:	3301      	adds	r3, #1
 80055d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055de:	edd7 6a07 	vldr	s13, [r7, #28]
 80055e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ea:	ee17 3a90 	vmov	r3, s15
 80055ee:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80055f0:	6a3b      	ldr	r3, [r7, #32]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	372c      	adds	r7, #44	@ 0x2c
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	46020c00 	.word	0x46020c00
 8005604:	0800ec34 	.word	0x0800ec34
 8005608:	00f42400 	.word	0x00f42400
 800560c:	007a1200 	.word	0x007a1200
 8005610:	4b742400 	.word	0x4b742400
 8005614:	46000000 	.word	0x46000000
 8005618:	4af42400 	.word	0x4af42400

0800561c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005620:	f7ff fef6 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 8005624:	4602      	mov	r2, r0
 8005626:	4b07      	ldr	r3, [pc, #28]	@ (8005644 <HAL_RCC_GetHCLKFreq+0x28>)
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	4906      	ldr	r1, [pc, #24]	@ (8005648 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005630:	5ccb      	ldrb	r3, [r1, r3]
 8005632:	fa22 f303 	lsr.w	r3, r2, r3
 8005636:	4a05      	ldr	r2, [pc, #20]	@ (800564c <HAL_RCC_GetHCLKFreq+0x30>)
 8005638:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800563a:	4b04      	ldr	r3, [pc, #16]	@ (800564c <HAL_RCC_GetHCLKFreq+0x30>)
 800563c:	681b      	ldr	r3, [r3, #0]
}
 800563e:	4618      	mov	r0, r3
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	46020c00 	.word	0x46020c00
 8005648:	0800ec1c 	.word	0x0800ec1c
 800564c:	20000028 	.word	0x20000028

08005650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005654:	f7ff ffe2 	bl	800561c <HAL_RCC_GetHCLKFreq>
 8005658:	4602      	mov	r2, r0
 800565a:	4b05      	ldr	r3, [pc, #20]	@ (8005670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	091b      	lsrs	r3, r3, #4
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	4903      	ldr	r1, [pc, #12]	@ (8005674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005666:	5ccb      	ldrb	r3, [r1, r3]
 8005668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800566c:	4618      	mov	r0, r3
 800566e:	bd80      	pop	{r7, pc}
 8005670:	46020c00 	.word	0x46020c00
 8005674:	0800ec2c 	.word	0x0800ec2c

08005678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800567c:	f7ff ffce 	bl	800561c <HAL_RCC_GetHCLKFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b05      	ldr	r3, [pc, #20]	@ (8005698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	4903      	ldr	r1, [pc, #12]	@ (800569c <HAL_RCC_GetPCLK2Freq+0x24>)
 800568e:	5ccb      	ldrb	r3, [r1, r3]
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd80      	pop	{r7, pc}
 8005698:	46020c00 	.word	0x46020c00
 800569c:	0800ec2c 	.word	0x0800ec2c

080056a0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80056a4:	f7ff ffba 	bl	800561c <HAL_RCC_GetHCLKFreq>
 80056a8:	4602      	mov	r2, r0
 80056aa:	4b05      	ldr	r3, [pc, #20]	@ (80056c0 <HAL_RCC_GetPCLK3Freq+0x20>)
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	4903      	ldr	r1, [pc, #12]	@ (80056c4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80056b6:	5ccb      	ldrb	r3, [r1, r3]
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056bc:	4618      	mov	r0, r3
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	46020c00 	.word	0x46020c00
 80056c4:	0800ec2c 	.word	0x0800ec2c

080056c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056d0:	4b3e      	ldr	r3, [pc, #248]	@ (80057cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80056d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056de:	f7fe fd4b 	bl	8004178 <HAL_PWREx_GetVoltageRange>
 80056e2:	6178      	str	r0, [r7, #20]
 80056e4:	e019      	b.n	800571a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056e6:	4b39      	ldr	r3, [pc, #228]	@ (80057cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80056e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056ec:	4a37      	ldr	r2, [pc, #220]	@ (80057cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80056ee:	f043 0304 	orr.w	r3, r3, #4
 80056f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80056f6:	4b35      	ldr	r3, [pc, #212]	@ (80057cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80056f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005704:	f7fe fd38 	bl	8004178 <HAL_PWREx_GetVoltageRange>
 8005708:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800570a:	4b30      	ldr	r3, [pc, #192]	@ (80057cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800570c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005710:	4a2e      	ldr	r2, [pc, #184]	@ (80057cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005712:	f023 0304 	bic.w	r3, r3, #4
 8005716:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005720:	d003      	beq.n	800572a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005728:	d109      	bne.n	800573e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005730:	d202      	bcs.n	8005738 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005732:	2301      	movs	r3, #1
 8005734:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005736:	e033      	b.n	80057a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005738:	2300      	movs	r3, #0
 800573a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800573c:	e030      	b.n	80057a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005744:	d208      	bcs.n	8005758 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800574c:	d102      	bne.n	8005754 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800574e:	2303      	movs	r3, #3
 8005750:	613b      	str	r3, [r7, #16]
 8005752:	e025      	b.n	80057a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e035      	b.n	80057c4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800575e:	d90f      	bls.n	8005780 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800576c:	d902      	bls.n	8005774 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800576e:	2300      	movs	r3, #0
 8005770:	613b      	str	r3, [r7, #16]
 8005772:	e015      	b.n	80057a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005774:	2301      	movs	r3, #1
 8005776:	613b      	str	r3, [r7, #16]
 8005778:	e012      	b.n	80057a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800577a:	2300      	movs	r3, #0
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	e00f      	b.n	80057a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005786:	d109      	bne.n	800579c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800578e:	d102      	bne.n	8005796 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005790:	2301      	movs	r3, #1
 8005792:	613b      	str	r3, [r7, #16]
 8005794:	e004      	b.n	80057a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005796:	2302      	movs	r3, #2
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	e001      	b.n	80057a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800579c:	2301      	movs	r3, #1
 800579e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057a0:	4b0b      	ldr	r3, [pc, #44]	@ (80057d0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f023 020f 	bic.w	r2, r3, #15
 80057a8:	4909      	ldr	r1, [pc, #36]	@ (80057d0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80057b0:	4b07      	ldr	r3, [pc, #28]	@ (80057d0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d001      	beq.n	80057c2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	46020c00 	.word	0x46020c00
 80057d0:	40022000 	.word	0x40022000

080057d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80057d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d8:	b0c4      	sub	sp, #272	@ 0x110
 80057da:	af00      	add	r7, sp, #0
 80057dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057e0:	2300      	movs	r3, #0
 80057e2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057e6:	2300      	movs	r3, #0
 80057e8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f002 0401 	and.w	r4, r2, #1
 80057f8:	2500      	movs	r5, #0
 80057fa:	ea54 0305 	orrs.w	r3, r4, r5
 80057fe:	d00b      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005800:	4bd5      	ldr	r3, [pc, #852]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005806:	f023 0103 	bic.w	r1, r3, #3
 800580a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800580e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005810:	4ad1      	ldr	r2, [pc, #836]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005812:	430b      	orrs	r3, r1
 8005814:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f002 0802 	and.w	r8, r2, #2
 8005824:	f04f 0900 	mov.w	r9, #0
 8005828:	ea58 0309 	orrs.w	r3, r8, r9
 800582c:	d00b      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800582e:	4bca      	ldr	r3, [pc, #808]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005834:	f023 010c 	bic.w	r1, r3, #12
 8005838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800583c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583e:	4ac6      	ldr	r2, [pc, #792]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005840:	430b      	orrs	r3, r1
 8005842:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	f002 0a04 	and.w	sl, r2, #4
 8005852:	f04f 0b00 	mov.w	fp, #0
 8005856:	ea5a 030b 	orrs.w	r3, sl, fp
 800585a:	d00b      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800585c:	4bbe      	ldr	r3, [pc, #760]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800585e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005862:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800586a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800586c:	4aba      	ldr	r2, [pc, #744]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800586e:	430b      	orrs	r3, r1
 8005870:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f002 0308 	and.w	r3, r2, #8
 8005880:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005884:	2300      	movs	r3, #0
 8005886:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800588a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800588e:	460b      	mov	r3, r1
 8005890:	4313      	orrs	r3, r2
 8005892:	d00b      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005894:	4bb0      	ldr	r3, [pc, #704]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800589a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800589e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a4:	4aac      	ldr	r2, [pc, #688]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80058a6:	430b      	orrs	r3, r1
 80058a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	f002 0310 	and.w	r3, r2, #16
 80058b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058bc:	2300      	movs	r3, #0
 80058be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80058c2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80058c6:	460b      	mov	r3, r1
 80058c8:	4313      	orrs	r3, r2
 80058ca:	d00b      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80058cc:	4ba2      	ldr	r3, [pc, #648]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80058ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058dc:	4a9e      	ldr	r2, [pc, #632]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80058de:	430b      	orrs	r3, r1
 80058e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80058f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058f4:	2300      	movs	r3, #0
 80058f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058fa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80058fe:	460b      	mov	r3, r1
 8005900:	4313      	orrs	r3, r2
 8005902:	d00b      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005904:	4b94      	ldr	r3, [pc, #592]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005906:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800590a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800590e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005914:	4a90      	ldr	r2, [pc, #576]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005916:	430b      	orrs	r3, r1
 8005918:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800591c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f002 0320 	and.w	r3, r2, #32
 8005928:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800592c:	2300      	movs	r3, #0
 800592e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005932:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005936:	460b      	mov	r3, r1
 8005938:	4313      	orrs	r3, r2
 800593a:	d00b      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800593c:	4b86      	ldr	r3, [pc, #536]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800593e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005942:	f023 0107 	bic.w	r1, r3, #7
 8005946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800594a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800594c:	4a82      	ldr	r2, [pc, #520]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800594e:	430b      	orrs	r3, r1
 8005950:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005964:	2300      	movs	r3, #0
 8005966:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800596a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800596e:	460b      	mov	r3, r1
 8005970:	4313      	orrs	r3, r2
 8005972:	d00b      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005974:	4b78      	ldr	r3, [pc, #480]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800597a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800597e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005984:	4a74      	ldr	r2, [pc, #464]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005986:	430b      	orrs	r3, r1
 8005988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800598c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005998:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800599c:	2300      	movs	r3, #0
 800599e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80059a6:	460b      	mov	r3, r1
 80059a8:	4313      	orrs	r3, r2
 80059aa:	d00b      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80059ac:	4b6a      	ldr	r3, [pc, #424]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80059ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059bc:	4a66      	ldr	r2, [pc, #408]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80059be:	430b      	orrs	r3, r1
 80059c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059cc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80059d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059d4:	2300      	movs	r3, #0
 80059d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059de:	460b      	mov	r3, r1
 80059e0:	4313      	orrs	r3, r2
 80059e2:	d00b      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80059e4:	4b5c      	ldr	r3, [pc, #368]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80059e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80059ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059f4:	4a58      	ldr	r2, [pc, #352]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80059f6:	430b      	orrs	r3, r1
 80059f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005a08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005a12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005a16:	460b      	mov	r3, r1
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	d00b      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005a1c:	4b4e      	ldr	r3, [pc, #312]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a22:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8005a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005a40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a44:	2300      	movs	r3, #0
 8005a46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a4a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4313      	orrs	r3, r2
 8005a52:	d00b      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8005a54:	4b40      	ldr	r3, [pc, #256]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005a56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a5a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a64:	4a3c      	ldr	r2, [pc, #240]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005a66:	430b      	orrs	r3, r1
 8005a68:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8005a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005a78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a82:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a86:	460b      	mov	r3, r1
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	d00c      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8005a8c:	4b32      	ldr	r3, [pc, #200]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005a8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a92:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005abc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	d00c      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005ac6:	4b24      	ldr	r3, [pc, #144]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005acc:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005ad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005ada:	430b      	orrs	r3, r1
 8005adc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005aec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005af0:	2300      	movs	r3, #0
 8005af2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005af6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005afa:	460b      	mov	r3, r1
 8005afc:	4313      	orrs	r3, r2
 8005afe:	d00c      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005b00:	4b15      	ldr	r3, [pc, #84]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b06:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b12:	4a11      	ldr	r2, [pc, #68]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005b14:	430b      	orrs	r3, r1
 8005b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005b26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b30:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005b34:	460b      	mov	r3, r1
 8005b36:	4313      	orrs	r3, r2
 8005b38:	d010      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005b3a:	4b07      	ldr	r3, [pc, #28]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b40:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b4c:	4a02      	ldr	r2, [pc, #8]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005b54:	e002      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8005b56:	bf00      	nop
 8005b58:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005b68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005b72:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005b76:	460b      	mov	r3, r1
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	d04c      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b84:	2b80      	cmp	r3, #128	@ 0x80
 8005b86:	d02d      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005b88:	2b80      	cmp	r3, #128	@ 0x80
 8005b8a:	d827      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005b8c:	2b60      	cmp	r3, #96	@ 0x60
 8005b8e:	d02b      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005b90:	2b60      	cmp	r3, #96	@ 0x60
 8005b92:	d823      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005b94:	2b40      	cmp	r3, #64	@ 0x40
 8005b96:	d006      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8005b98:	2b40      	cmp	r3, #64	@ 0x40
 8005b9a:	d81f      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	d011      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005ba4:	e01a      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ba6:	4bbe      	ldr	r3, [pc, #760]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005baa:	4abd      	ldr	r2, [pc, #756]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bb0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005bb2:	e01a      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bb8:	3308      	adds	r3, #8
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f002 fc3c 	bl	8008438 <RCCEx_PLL2_Config>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005bc6:	e010      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bcc:	332c      	adds	r3, #44	@ 0x2c
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f002 fcca 	bl	8008568 <RCCEx_PLL3_Config>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005bda:	e006      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005be2:	e002      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8005be4:	bf00      	nop
 8005be6:	e000      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8005be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bea:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10d      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005bf2:	4bab      	ldr	r3, [pc, #684]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bf4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005bf8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c04:	4aa6      	ldr	r2, [pc, #664]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c06:	430b      	orrs	r3, r1
 8005c08:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005c0c:	e003      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005c12:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005c22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c26:	2300      	movs	r3, #0
 8005c28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c2c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c30:	460b      	mov	r3, r1
 8005c32:	4313      	orrs	r3, r2
 8005c34:	d053      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c42:	d033      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8005c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c48:	d82c      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c4e:	d02f      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8005c50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c54:	d826      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005c56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c5a:	d008      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8005c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c60:	d820      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c6a:	d011      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005c6c:	e01a      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c6e:	4b8c      	ldr	r3, [pc, #560]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c72:	4a8b      	ldr	r2, [pc, #556]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c78:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005c7a:	e01a      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c80:	3308      	adds	r3, #8
 8005c82:	4618      	mov	r0, r3
 8005c84:	f002 fbd8 	bl	8008438 <RCCEx_PLL2_Config>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005c8e:	e010      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c94:	332c      	adds	r3, #44	@ 0x2c
 8005c96:	4618      	mov	r0, r3
 8005c98:	f002 fc66 	bl	8008568 <RCCEx_PLL3_Config>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005ca2:	e006      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005caa:	e002      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005cac:	bf00      	nop
 8005cae:	e000      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10d      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005cba:	4b79      	ldr	r3, [pc, #484]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cc0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ccc:	4a74      	ldr	r2, [pc, #464]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005cd4:	e003      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005cda:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005cea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cec:	2300      	movs	r3, #0
 8005cee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cf0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	d046      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d02:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005d06:	d028      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005d08:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005d0c:	d821      	bhi.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005d0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d12:	d022      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005d14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d18:	d81b      	bhi.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005d1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d1e:	d01c      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005d20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d24:	d815      	bhi.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d2a:	d008      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8005d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d30:	d80f      	bhi.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d011      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d3a:	d00e      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005d3c:	e009      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d42:	3308      	adds	r3, #8
 8005d44:	4618      	mov	r0, r3
 8005d46:	f002 fb77 	bl	8008438 <RCCEx_PLL2_Config>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005d50:	e004      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005d58:	e000      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8005d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10d      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005d64:	4b4e      	ldr	r3, [pc, #312]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d6a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d76:	4a4a      	ldr	r2, [pc, #296]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005d7e:	e003      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d80:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005d84:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d90:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005d94:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d96:	2300      	movs	r3, #0
 8005d98:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d9a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4313      	orrs	r3, r2
 8005da2:	d03f      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	d81e      	bhi.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8005db0:	a201      	add	r2, pc, #4	@ (adr r2, 8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005df7 	.word	0x08005df7
 8005dbc:	08005dcd 	.word	0x08005dcd
 8005dc0:	08005ddb 	.word	0x08005ddb
 8005dc4:	08005df7 	.word	0x08005df7
 8005dc8:	08005df7 	.word	0x08005df7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005dcc:	4b34      	ldr	r3, [pc, #208]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd0:	4a33      	ldr	r2, [pc, #204]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dd6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005dd8:	e00e      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dde:	332c      	adds	r3, #44	@ 0x2c
 8005de0:	4618      	mov	r0, r3
 8005de2:	f002 fbc1 	bl	8008568 <RCCEx_PLL3_Config>
 8005de6:	4603      	mov	r3, r0
 8005de8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005dec:	e004      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005df4:	e000      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8005df6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005df8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10d      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005e00:	4b27      	ldr	r3, [pc, #156]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e06:	f023 0107 	bic.w	r1, r3, #7
 8005e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e12:	4a23      	ldr	r2, [pc, #140]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e14:	430b      	orrs	r3, r1
 8005e16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005e1a:	e003      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005e20:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005e30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e32:	2300      	movs	r3, #0
 8005e34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e36:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	d04c      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e4c:	d02a      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8005e4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e52:	d821      	bhi.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005e54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e58:	d026      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8005e5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e5e:	d81b      	bhi.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e64:	d00e      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005e66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e6a:	d815      	bhi.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01d      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8005e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e74:	d110      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e76:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7a:	4a09      	ldr	r2, [pc, #36]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e80:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005e82:	e014      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e88:	332c      	adds	r3, #44	@ 0x2c
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f002 fb6c 	bl	8008568 <RCCEx_PLL3_Config>
 8005e90:	4603      	mov	r3, r0
 8005e92:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005e96:	e00a      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005e9e:	e006      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8005ea0:	46020c00 	.word	0x46020c00
        break;
 8005ea4:	bf00      	nop
 8005ea6:	e002      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8005ea8:	bf00      	nop
 8005eaa:	e000      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8005eac:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005eae:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10d      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005eb6:	4baf      	ldr	r3, [pc, #700]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ebc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ec4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ec8:	4aaa      	ldr	r2, [pc, #680]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005eca:	430b      	orrs	r3, r1
 8005ecc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005ed0:	e003      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005ed6:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005ee6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ee8:	2300      	movs	r3, #0
 8005eea:	667b      	str	r3, [r7, #100]	@ 0x64
 8005eec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f000 80b5 	beq.w	8006062 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005efe:	4b9d      	ldr	r3, [pc, #628]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d113      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f0c:	4b99      	ldr	r3, [pc, #612]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f12:	4a98      	ldr	r2, [pc, #608]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005f14:	f043 0304 	orr.w	r3, r3, #4
 8005f18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005f1c:	4b95      	ldr	r3, [pc, #596]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005f34:	4b90      	ldr	r3, [pc, #576]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	4a8f      	ldr	r2, [pc, #572]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005f3a:	f043 0301 	orr.w	r3, r3, #1
 8005f3e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f40:	f7fd fbe6 	bl	8003710 <HAL_GetTick>
 8005f44:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005f48:	e00b      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f4a:	f7fd fbe1 	bl	8003710 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d903      	bls.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005f60:	e005      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005f62:	4b85      	ldr	r3, [pc, #532]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0ed      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8005f6e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d165      	bne.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f76:	4b7f      	ldr	r3, [pc, #508]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f80:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d023      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8005f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f90:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d01b      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f9c:	4b75      	ldr	r3, [pc, #468]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fa6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005faa:	4b72      	ldr	r3, [pc, #456]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fb0:	4a70      	ldr	r2, [pc, #448]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fba:	4b6e      	ldr	r3, [pc, #440]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fc0:	4a6c      	ldr	r2, [pc, #432]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005fca:	4a6a      	ldr	r2, [pc, #424]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fd0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d019      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe0:	f7fd fb96 	bl	8003710 <HAL_GetTick>
 8005fe4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fe8:	e00d      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fea:	f7fd fb91 	bl	8003710 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff4:	1ad2      	subs	r2, r2, r3
 8005ff6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d903      	bls.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8006004:	e006      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006006:	4b5b      	ldr	r3, [pc, #364]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0ea      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8006014:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10d      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800601c:	4b55      	ldr	r3, [pc, #340]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800601e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006022:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800602a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800602e:	4a51      	ldr	r2, [pc, #324]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006030:	430b      	orrs	r3, r1
 8006032:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006036:	e008      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006038:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800603c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8006040:	e003      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006042:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006046:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800604a:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 800604e:	2b01      	cmp	r3, #1
 8006050:	d107      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006052:	4b48      	ldr	r3, [pc, #288]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8006054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006058:	4a46      	ldr	r2, [pc, #280]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800605a:	f023 0304 	bic.w	r3, r3, #4
 800605e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800606e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006070:	2300      	movs	r3, #0
 8006072:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006074:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006078:	460b      	mov	r3, r1
 800607a:	4313      	orrs	r3, r2
 800607c:	d042      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800607e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006082:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006086:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800608a:	d022      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800608c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006090:	d81b      	bhi.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8006092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006096:	d011      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8006098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800609c:	d815      	bhi.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d019      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x902>
 80060a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060a6:	d110      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ac:	3308      	adds	r3, #8
 80060ae:	4618      	mov	r0, r3
 80060b0:	f002 f9c2 	bl	8008438 <RCCEx_PLL2_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80060ba:	e00d      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060bc:	4b2d      	ldr	r3, [pc, #180]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80060be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80060c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060c6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80060c8:	e006      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80060d0:	e002      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80060d2:	bf00      	nop
 80060d4:	e000      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80060d6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80060d8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10d      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80060e0:	4b24      	ldr	r3, [pc, #144]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80060e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060e6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80060ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80060f2:	4a20      	ldr	r2, [pc, #128]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80060f4:	430b      	orrs	r3, r1
 80060f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80060fa:	e003      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006100:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006110:	653b      	str	r3, [r7, #80]	@ 0x50
 8006112:	2300      	movs	r3, #0
 8006114:	657b      	str	r3, [r7, #84]	@ 0x54
 8006116:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800611a:	460b      	mov	r3, r1
 800611c:	4313      	orrs	r3, r2
 800611e:	d031      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006124:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800612c:	d00b      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800612e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006132:	d804      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d008      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800613c:	d007      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006144:	e004      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8006146:	bf00      	nop
 8006148:	e002      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800614a:	bf00      	nop
 800614c:	e000      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800614e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006150:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006154:	2b00      	cmp	r3, #0
 8006156:	d111      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006158:	4b06      	ldr	r3, [pc, #24]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800615a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800615e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006166:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800616a:	4a02      	ldr	r2, [pc, #8]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800616c:	430b      	orrs	r3, r1
 800616e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006172:	e007      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8006174:	46020c00 	.word	0x46020c00
 8006178:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006180:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006190:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006192:	2300      	movs	r3, #0
 8006194:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006196:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800619a:	460b      	mov	r3, r1
 800619c:	4313      	orrs	r3, r2
 800619e:	d00c      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80061a0:	4bb2      	ldr	r3, [pc, #712]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80061a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061a6:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80061aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80061b2:	4aae      	ldr	r2, [pc, #696]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80061b4:	430b      	orrs	r3, r1
 80061b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80061ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80061c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80061c8:	2300      	movs	r3, #0
 80061ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80061cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80061d0:	460b      	mov	r3, r1
 80061d2:	4313      	orrs	r3, r2
 80061d4:	d019      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80061d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80061de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061e2:	d105      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061e4:	4ba1      	ldr	r3, [pc, #644]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80061e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e8:	4aa0      	ldr	r2, [pc, #640]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80061ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061ee:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80061f0:	4b9e      	ldr	r3, [pc, #632]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80061f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061f6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80061fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006202:	4a9a      	ldr	r2, [pc, #616]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006204:	430b      	orrs	r3, r1
 8006206:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800620a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006216:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006218:	2300      	movs	r3, #0
 800621a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800621c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006220:	460b      	mov	r3, r1
 8006222:	4313      	orrs	r3, r2
 8006224:	d00c      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006226:	4b91      	ldr	r3, [pc, #580]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800622c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006234:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006238:	4a8c      	ldr	r2, [pc, #560]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800623a:	430b      	orrs	r3, r1
 800623c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800624c:	633b      	str	r3, [r7, #48]	@ 0x30
 800624e:	2300      	movs	r3, #0
 8006250:	637b      	str	r3, [r7, #52]	@ 0x34
 8006252:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006256:	460b      	mov	r3, r1
 8006258:	4313      	orrs	r3, r2
 800625a:	d00c      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800625c:	4b83      	ldr	r3, [pc, #524]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800625e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006262:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800626a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800626e:	4a7f      	ldr	r2, [pc, #508]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006270:	430b      	orrs	r3, r1
 8006272:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006284:	2300      	movs	r3, #0
 8006286:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006288:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800628c:	460b      	mov	r3, r1
 800628e:	4313      	orrs	r3, r2
 8006290:	d00c      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006292:	4b76      	ldr	r3, [pc, #472]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006298:	f023 0218 	bic.w	r2, r3, #24
 800629c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062a0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80062a4:	4971      	ldr	r1, [pc, #452]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80062ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80062b8:	623b      	str	r3, [r7, #32]
 80062ba:	2300      	movs	r3, #0
 80062bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80062be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80062c2:	460b      	mov	r3, r1
 80062c4:	4313      	orrs	r3, r2
 80062c6:	d032      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80062c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80062d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062d4:	d105      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d6:	4b65      	ldr	r3, [pc, #404]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80062d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062da:	4a64      	ldr	r2, [pc, #400]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80062dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062e0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80062e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80062ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062ee:	d108      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062f4:	3308      	adds	r3, #8
 80062f6:	4618      	mov	r0, r3
 80062f8:	f002 f89e 	bl	8008438 <RCCEx_PLL2_Config>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8006302:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10d      	bne.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800630a:	4b58      	ldr	r3, [pc, #352]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800630c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006310:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006318:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800631c:	4953      	ldr	r1, [pc, #332]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800631e:	4313      	orrs	r3, r2
 8006320:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006324:	e003      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006326:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800632a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800632e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	2100      	movs	r1, #0
 8006338:	61b9      	str	r1, [r7, #24]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	61fb      	str	r3, [r7, #28]
 8006340:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006344:	460b      	mov	r3, r1
 8006346:	4313      	orrs	r3, r2
 8006348:	d04a      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800634a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800634e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006352:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006356:	d01e      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8006358:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800635c:	d825      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800635e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006362:	d00e      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8006364:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006368:	d81f      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d021      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800636e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006372:	d11a      	bne.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006374:	4b3d      	ldr	r3, [pc, #244]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006378:	4a3c      	ldr	r2, [pc, #240]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800637a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800637e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8006380:	e018      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006386:	3308      	adds	r3, #8
 8006388:	4618      	mov	r0, r3
 800638a:	f002 f855 	bl	8008438 <RCCEx_PLL2_Config>
 800638e:	4603      	mov	r3, r0
 8006390:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8006394:	e00e      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800639a:	332c      	adds	r3, #44	@ 0x2c
 800639c:	4618      	mov	r0, r3
 800639e:	f002 f8e3 	bl	8008568 <RCCEx_PLL3_Config>
 80063a2:	4603      	mov	r3, r0
 80063a4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80063a8:	e004      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80063b0:	e000      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 80063b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10d      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80063bc:	4b2b      	ldr	r3, [pc, #172]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80063be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80063c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80063ce:	4927      	ldr	r1, [pc, #156]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80063d6:	e003      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80063dc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80063e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80063ec:	613b      	str	r3, [r7, #16]
 80063ee:	2300      	movs	r3, #0
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80063f6:	460b      	mov	r3, r1
 80063f8:	4313      	orrs	r3, r2
 80063fa:	d03d      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80063fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006404:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006408:	d00e      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800640a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800640e:	d815      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006410:	2b00      	cmp	r3, #0
 8006412:	d017      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006418:	d110      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800641a:	4b14      	ldr	r3, [pc, #80]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800641c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641e:	4a13      	ldr	r2, [pc, #76]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006424:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006426:	e00e      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800642c:	3308      	adds	r3, #8
 800642e:	4618      	mov	r0, r3
 8006430:	f002 f802 	bl	8008438 <RCCEx_PLL2_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800643a:	e004      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006442:	e000      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8006444:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006446:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800644a:	2b00      	cmp	r3, #0
 800644c:	d110      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800644e:	4b07      	ldr	r3, [pc, #28]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006454:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800645c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006460:	4902      	ldr	r1, [pc, #8]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006468:	e006      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 800646a:	bf00      	nop
 800646c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006470:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006474:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006484:	60bb      	str	r3, [r7, #8]
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800648e:	460b      	mov	r3, r1
 8006490:	4313      	orrs	r3, r2
 8006492:	d00c      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006494:	4b2c      	ldr	r3, [pc, #176]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006496:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800649a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800649e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80064a6:	4928      	ldr	r1, [pc, #160]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 80064ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	2100      	movs	r1, #0
 80064b8:	6039      	str	r1, [r7, #0]
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	607b      	str	r3, [r7, #4]
 80064c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80064c4:	460b      	mov	r3, r1
 80064c6:	4313      	orrs	r3, r2
 80064c8:	d036      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80064ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80064d2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80064d6:	d00d      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80064d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80064dc:	d811      	bhi.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80064de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064e2:	d012      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80064e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064e8:	d80b      	bhi.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00d      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80064ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f2:	d106      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064f4:	4b14      	ldr	r3, [pc, #80]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80064f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f8:	4a13      	ldr	r2, [pc, #76]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80064fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064fe:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8006500:	e004      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8006508:	e000      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 800650a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10d      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8006514:	4b0c      	ldr	r3, [pc, #48]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006516:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800651a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800651e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006522:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006526:	4908      	ldr	r1, [pc, #32]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8006528:	4313      	orrs	r3, r2
 800652a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800652e:	e003      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006530:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8006534:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006538:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 800653c:	4618      	mov	r0, r3
 800653e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8006542:	46bd      	mov	sp, r7
 8006544:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006548:	46020c00 	.word	0x46020c00

0800654c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800654c:	b480      	push	{r7}
 800654e:	b089      	sub	sp, #36	@ 0x24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006554:	4ba6      	ldr	r3, [pc, #664]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800655c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800655e:	4ba4      	ldr	r3, [pc, #656]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006568:	4ba1      	ldr	r3, [pc, #644]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800656a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656c:	0a1b      	lsrs	r3, r3, #8
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	3301      	adds	r3, #1
 8006574:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006576:	4b9e      	ldr	r3, [pc, #632]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006582:	4b9b      	ldr	r3, [pc, #620]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006586:	08db      	lsrs	r3, r3, #3
 8006588:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	fb02 f303 	mul.w	r3, r2, r3
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d062      	beq.n	800666a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	f200 8081 	bhi.w	80066ae <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d024      	beq.n	80065fc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d17a      	bne.n	80066ae <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80067f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80065c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ca:	4b89      	ldr	r3, [pc, #548]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80065cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d2:	ee07 3a90 	vmov	s15, r3
 80065d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80065da:	ed97 6a02 	vldr	s12, [r7, #8]
 80065de:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80067f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80065e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80065e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80065ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80065f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065fa:	e08f      	b.n	800671c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80065fc:	4b7c      	ldr	r3, [pc, #496]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d005      	beq.n	8006614 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006608:	4b79      	ldr	r3, [pc, #484]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	0f1b      	lsrs	r3, r3, #28
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	e006      	b.n	8006622 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006614:	4b76      	ldr	r3, [pc, #472]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006616:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800661a:	041b      	lsls	r3, r3, #16
 800661c:	0f1b      	lsrs	r3, r3, #28
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	4a76      	ldr	r2, [pc, #472]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006628:	ee07 3a90 	vmov	s15, r3
 800662c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	ee07 3a90 	vmov	s15, r3
 8006636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	ee07 3a90 	vmov	s15, r3
 8006644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006648:	ed97 6a02 	vldr	s12, [r7, #8]
 800664c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80067f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006650:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006654:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006658:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800665c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006664:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006668:	e058      	b.n	800671c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006674:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006800 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 8006678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800667c:	4b5c      	ldr	r3, [pc, #368]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800667e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006684:	ee07 3a90 	vmov	s15, r3
 8006688:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800668c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006690:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80067f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006694:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006698:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800669c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80066a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066ac:	e036      	b.n	800671c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80066ae:	4b50      	ldr	r3, [pc, #320]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80066ba:	4b4d      	ldr	r3, [pc, #308]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	0f1b      	lsrs	r3, r3, #28
 80066c0:	f003 030f 	and.w	r3, r3, #15
 80066c4:	e006      	b.n	80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80066c6:	4b4a      	ldr	r3, [pc, #296]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80066c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066cc:	041b      	lsls	r3, r3, #16
 80066ce:	0f1b      	lsrs	r3, r3, #28
 80066d0:	f003 030f 	and.w	r3, r3, #15
 80066d4:	4a49      	ldr	r2, [pc, #292]	@ (80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80066d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066da:	ee07 3a90 	vmov	s15, r3
 80066de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	ee07 3a90 	vmov	s15, r3
 80066e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	ee07 3a90 	vmov	s15, r3
 80066f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80066fe:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80067f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800670a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800670e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006716:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800671a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800671c:	4b34      	ldr	r3, [pc, #208]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800671e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d017      	beq.n	8006758 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006728:	4b31      	ldr	r3, [pc, #196]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800672a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800672c:	0a5b      	lsrs	r3, r3, #9
 800672e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800673a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800673e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006742:	edd7 6a07 	vldr	s13, [r7, #28]
 8006746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800674a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800674e:	ee17 2a90 	vmov	r2, s15
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	e002      	b.n	800675e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800675e:	4b24      	ldr	r3, [pc, #144]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d017      	beq.n	800679a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800676a:	4b21      	ldr	r3, [pc, #132]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800676c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800676e:	0c1b      	lsrs	r3, r3, #16
 8006770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006774:	ee07 3a90 	vmov	s15, r3
 8006778:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800677c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006780:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006784:	edd7 6a07 	vldr	s13, [r7, #28]
 8006788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800678c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006790:	ee17 2a90 	vmov	r2, s15
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	605a      	str	r2, [r3, #4]
 8006798:	e002      	b.n	80067a0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80067a0:	4b13      	ldr	r3, [pc, #76]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80067a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d017      	beq.n	80067dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80067ac:	4b10      	ldr	r3, [pc, #64]	@ (80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80067ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b0:	0e1b      	lsrs	r3, r3, #24
 80067b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80067be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067c2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80067c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80067ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067d2:	ee17 2a90 	vmov	r2, s15
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80067da:	e002      	b.n	80067e2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	609a      	str	r2, [r3, #8]
}
 80067e2:	bf00      	nop
 80067e4:	3724      	adds	r7, #36	@ 0x24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	46020c00 	.word	0x46020c00
 80067f4:	4b742400 	.word	0x4b742400
 80067f8:	46000000 	.word	0x46000000
 80067fc:	0800ec34 	.word	0x0800ec34
 8006800:	4af42400 	.word	0x4af42400

08006804 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006804:	b480      	push	{r7}
 8006806:	b089      	sub	sp, #36	@ 0x24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800680c:	4ba6      	ldr	r3, [pc, #664]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800680e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006814:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006816:	4ba4      	ldr	r3, [pc, #656]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006820:	4ba1      	ldr	r3, [pc, #644]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006824:	0a1b      	lsrs	r3, r3, #8
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	3301      	adds	r3, #1
 800682c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800682e:	4b9e      	ldr	r3, [pc, #632]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006832:	091b      	lsrs	r3, r3, #4
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800683a:	4b9b      	ldr	r3, [pc, #620]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683e:	08db      	lsrs	r3, r3, #3
 8006840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	fb02 f303 	mul.w	r3, r2, r3
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006852:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b03      	cmp	r3, #3
 800685a:	d062      	beq.n	8006922 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2b03      	cmp	r3, #3
 8006860:	f200 8081 	bhi.w	8006966 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d024      	beq.n	80068b4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2b02      	cmp	r3, #2
 800686e:	d17a      	bne.n	8006966 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800687e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006882:	4b89      	ldr	r3, [pc, #548]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006892:	ed97 6a02 	vldr	s12, [r7, #8]
 8006896:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800689a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800689e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80068a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80068aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068b2:	e08f      	b.n	80069d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80068b4:	4b7c      	ldr	r3, [pc, #496]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80068c0:	4b79      	ldr	r3, [pc, #484]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	0f1b      	lsrs	r3, r3, #28
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	e006      	b.n	80068da <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80068cc:	4b76      	ldr	r3, [pc, #472]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80068ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068d2:	041b      	lsls	r3, r3, #16
 80068d4:	0f1b      	lsrs	r3, r3, #28
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	4a76      	ldr	r2, [pc, #472]	@ (8006ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80068dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e0:	ee07 3a90 	vmov	s15, r3
 80068e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	ee07 3a90 	vmov	s15, r3
 80068ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	ee07 3a90 	vmov	s15, r3
 80068fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006900:	ed97 6a02 	vldr	s12, [r7, #8]
 8006904:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006908:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006910:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006914:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006920:	e058      	b.n	80069d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	ee07 3a90 	vmov	s15, r3
 8006928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692c:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 8006930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006934:	4b5c      	ldr	r3, [pc, #368]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693c:	ee07 3a90 	vmov	s15, r3
 8006940:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006944:	ed97 6a02 	vldr	s12, [r7, #8]
 8006948:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800694c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006950:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006954:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006958:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800695c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006960:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006964:	e036      	b.n	80069d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006966:	4b50      	ldr	r3, [pc, #320]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006972:	4b4d      	ldr	r3, [pc, #308]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	0f1b      	lsrs	r3, r3, #28
 8006978:	f003 030f 	and.w	r3, r3, #15
 800697c:	e006      	b.n	800698c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800697e:	4b4a      	ldr	r3, [pc, #296]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006980:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006984:	041b      	lsls	r3, r3, #16
 8006986:	0f1b      	lsrs	r3, r3, #28
 8006988:	f003 030f 	and.w	r3, r3, #15
 800698c:	4a49      	ldr	r2, [pc, #292]	@ (8006ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800698e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006992:	ee07 3a90 	vmov	s15, r3
 8006996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	ee07 3a90 	vmov	s15, r3
 80069a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80069b6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80069ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80069ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069d2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80069d4:	4b34      	ldr	r3, [pc, #208]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80069d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d017      	beq.n	8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80069e0:	4b31      	ldr	r3, [pc, #196]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80069e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e4:	0a5b      	lsrs	r3, r3, #9
 80069e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80069f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80069fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80069fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a06:	ee17 2a90 	vmov	r2, s15
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	e002      	b.n	8006a16 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006a16:	4b24      	ldr	r3, [pc, #144]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d017      	beq.n	8006a52 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006a22:	4b21      	ldr	r3, [pc, #132]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a26:	0c1b      	lsrs	r3, r3, #16
 8006a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a2c:	ee07 3a90 	vmov	s15, r3
 8006a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006a34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a38:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a48:	ee17 2a90 	vmov	r2, s15
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	605a      	str	r2, [r3, #4]
 8006a50:	e002      	b.n	8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006a58:	4b13      	ldr	r3, [pc, #76]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d017      	beq.n	8006a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006a64:	4b10      	ldr	r3, [pc, #64]	@ (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a68:	0e1b      	lsrs	r3, r3, #24
 8006a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006a76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a7a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006a7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a8a:	ee17 2a90 	vmov	r2, s15
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a92:	e002      	b.n	8006a9a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	609a      	str	r2, [r3, #8]
}
 8006a9a:	bf00      	nop
 8006a9c:	3724      	adds	r7, #36	@ 0x24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	46020c00 	.word	0x46020c00
 8006aac:	4b742400 	.word	0x4b742400
 8006ab0:	46000000 	.word	0x46000000
 8006ab4:	0800ec34 	.word	0x0800ec34
 8006ab8:	4af42400 	.word	0x4af42400

08006abc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b089      	sub	sp, #36	@ 0x24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006ac4:	4ba6      	ldr	r3, [pc, #664]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006acc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006ace:	4ba4      	ldr	r3, [pc, #656]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006ad8:	4ba1      	ldr	r3, [pc, #644]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006adc:	0a1b      	lsrs	r3, r3, #8
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006ae6:	4b9e      	ldr	r3, [pc, #632]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aea:	091b      	lsrs	r3, r3, #4
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006af2:	4b9b      	ldr	r3, [pc, #620]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006af6:	08db      	lsrs	r3, r3, #3
 8006af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	fb02 f303 	mul.w	r3, r2, r3
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d062      	beq.n	8006bda <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	f200 8081 	bhi.w	8006c1e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d024      	beq.n	8006b6c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d17a      	bne.n	8006c1e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b32:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3a:	4b89      	ldr	r3, [pc, #548]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b42:	ee07 3a90 	vmov	s15, r3
 8006b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b4e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b66:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006b6a:	e08f      	b.n	8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006b6c:	4b7c      	ldr	r3, [pc, #496]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006b78:	4b79      	ldr	r3, [pc, #484]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	0f1b      	lsrs	r3, r3, #28
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	e006      	b.n	8006b92 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006b84:	4b76      	ldr	r3, [pc, #472]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b8a:	041b      	lsls	r3, r3, #16
 8006b8c:	0f1b      	lsrs	r3, r3, #28
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	4a76      	ldr	r2, [pc, #472]	@ (8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b98:	ee07 3a90 	vmov	s15, r3
 8006b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	ee07 3a90 	vmov	s15, r3
 8006bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bbc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006bc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bd8:	e058      	b.n	8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	ee07 3a90 	vmov	s15, r3
 8006be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be4:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 8006be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bec:	4b5c      	ldr	r3, [pc, #368]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c00:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006c04:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c1c:	e036      	b.n	8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006c1e:	4b50      	ldr	r3, [pc, #320]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006c2a:	4b4d      	ldr	r3, [pc, #308]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	0f1b      	lsrs	r3, r3, #28
 8006c30:	f003 030f 	and.w	r3, r3, #15
 8006c34:	e006      	b.n	8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006c36:	4b4a      	ldr	r3, [pc, #296]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006c38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c3c:	041b      	lsls	r3, r3, #16
 8006c3e:	0f1b      	lsrs	r3, r3, #28
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	4a49      	ldr	r2, [pc, #292]	@ (8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	ee07 3a90 	vmov	s15, r3
 8006c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c6e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c8a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006c8c:	4b34      	ldr	r3, [pc, #208]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d017      	beq.n	8006cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006c98:	4b31      	ldr	r3, [pc, #196]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c9c:	0a5b      	lsrs	r3, r3, #9
 8006c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006caa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cbe:	ee17 2a90 	vmov	r2, s15
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	e002      	b.n	8006cce <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006cce:	4b24      	ldr	r3, [pc, #144]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d017      	beq.n	8006d0a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006cda:	4b21      	ldr	r3, [pc, #132]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cde:	0c1b      	lsrs	r3, r3, #16
 8006ce0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ce4:	ee07 3a90 	vmov	s15, r3
 8006ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006cec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cf0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006cf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d00:	ee17 2a90 	vmov	r2, s15
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	605a      	str	r2, [r3, #4]
 8006d08:	e002      	b.n	8006d10 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006d10:	4b13      	ldr	r3, [pc, #76]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d017      	beq.n	8006d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006d1c:	4b10      	ldr	r3, [pc, #64]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d20:	0e1b      	lsrs	r3, r3, #24
 8006d22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006d2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d32:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d42:	ee17 2a90 	vmov	r2, s15
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d4a:	e002      	b.n	8006d52 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	609a      	str	r2, [r3, #8]
}
 8006d52:	bf00      	nop
 8006d54:	3724      	adds	r7, #36	@ 0x24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	46020c00 	.word	0x46020c00
 8006d64:	4b742400 	.word	0x4b742400
 8006d68:	46000000 	.word	0x46000000
 8006d6c:	0800ec34 	.word	0x0800ec34
 8006d70:	4af42400 	.word	0x4af42400

08006d74 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08e      	sub	sp, #56	@ 0x38
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d82:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006d86:	430b      	orrs	r3, r1
 8006d88:	d145      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006d8a:	4ba7      	ldr	r3, [pc, #668]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d94:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006d96:	4ba4      	ldr	r3, [pc, #656]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d108      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006daa:	d104      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006dac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006db2:	f001 bb35 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006db6:	4b9c      	ldr	r3, [pc, #624]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dc4:	d114      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dcc:	d110      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dce:	4b96      	ldr	r3, [pc, #600]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ddc:	d103      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006dde:	23fa      	movs	r3, #250	@ 0xfa
 8006de0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006de2:	f001 bb1d 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8006de6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006dea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dec:	f001 bb18 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006df0:	4b8d      	ldr	r3, [pc, #564]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006df8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dfc:	d107      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e04:	d103      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006e06:	4b89      	ldr	r3, [pc, #548]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e0a:	f001 bb09 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e12:	f001 bb05 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e1a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006e1e:	430b      	orrs	r3, r1
 8006e20:	d151      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006e22:	4b81      	ldr	r3, [pc, #516]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006e24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e28:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006e2c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e30:	2b80      	cmp	r3, #128	@ 0x80
 8006e32:	d035      	beq.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e36:	2b80      	cmp	r3, #128	@ 0x80
 8006e38:	d841      	bhi.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	2b60      	cmp	r3, #96	@ 0x60
 8006e3e:	d02a      	beq.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e42:	2b60      	cmp	r3, #96	@ 0x60
 8006e44:	d83b      	bhi.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e48:	2b40      	cmp	r3, #64	@ 0x40
 8006e4a:	d009      	beq.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4e:	2b40      	cmp	r3, #64	@ 0x40
 8006e50:	d835      	bhi.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00c      	beq.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	d012      	beq.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006e5e:	e02e      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff fb71 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e6e:	f001 bad7 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e72:	f107 0318 	add.w	r3, r7, #24
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff fcc4 	bl	8006804 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e80:	f001 bace 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e84:	f107 030c 	add.w	r3, r7, #12
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff fe17 	bl	8006abc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e92:	f001 bac5 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006e96:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006e9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e9c:	f001 bac0 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ea0:	4b61      	ldr	r3, [pc, #388]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eac:	d103      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006eae:	4b60      	ldr	r3, [pc, #384]	@ (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006eb0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006eb2:	f001 bab5 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006eba:	f001 bab1 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :
      {
        frequency = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ec2:	f001 baad 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006ec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eca:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006ece:	430b      	orrs	r3, r1
 8006ed0:	d158      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006ed2:	4b55      	ldr	r3, [pc, #340]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006ed4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ed8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006edc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee4:	d03b      	beq.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eec:	d846      	bhi.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ef4:	d02e      	beq.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006efc:	d83e      	bhi.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f04:	d00b      	beq.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f0c:	d836      	bhi.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00d      	beq.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f1a:	d012      	beq.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006f1c:	e02e      	b.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff fb12 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f2c:	f001 ba78 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f30:	f107 0318 	add.w	r3, r7, #24
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff fc65 	bl	8006804 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f3e:	f001 ba6f 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f42:	f107 030c 	add.w	r3, r7, #12
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff fdb8 	bl	8006abc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f50:	f001 ba66 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006f54:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006f58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f5a:	f001 ba61 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f5e:	4b32      	ldr	r3, [pc, #200]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f6a:	d103      	bne.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006f6c:	4b30      	ldr	r3, [pc, #192]	@ (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006f6e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f70:	f001 ba56 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f78:	f001 ba52 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f80:	f001 ba4e 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f88:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	d126      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006f90:	4b25      	ldr	r3, [pc, #148]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006f92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f9a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006f9c:	4b22      	ldr	r3, [pc, #136]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fa8:	d106      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d103      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fb4:	f001 ba34 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fc4:	d107      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fcc:	d103      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006fce:	4b19      	ldr	r3, [pc, #100]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fd2:	f001 ba25 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fda:	f001 ba21 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fe2:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006fe6:	430b      	orrs	r3, r1
 8006fe8:	d16e      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006fea:	4b0f      	ldr	r3, [pc, #60]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ff0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006ff4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006ffc:	d03d      	beq.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007000:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007004:	d85c      	bhi.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007008:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800700c:	d014      	beq.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007010:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007014:	d854      	bhi.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007018:	2b00      	cmp	r3, #0
 800701a:	d01f      	beq.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007022:	d012      	beq.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007024:	e04c      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007026:	bf00      	nop
 8007028:	46020c00 	.word	0x46020c00
 800702c:	0003d090 	.word	0x0003d090
 8007030:	00f42400 	.word	0x00f42400
 8007034:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff fa85 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007044:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007046:	f001 b9eb 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800704a:	f107 0318 	add.w	r3, r7, #24
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff fbd8 	bl	8006804 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007058:	f001 b9e2 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800705c:	4ba7      	ldr	r3, [pc, #668]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007068:	d103      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800706a:	4ba5      	ldr	r3, [pc, #660]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800706c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800706e:	f001 b9d7 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007076:	f001 b9d3 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800707a:	4ba0      	ldr	r3, [pc, #640]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b20      	cmp	r3, #32
 8007084:	d118      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007086:	4b9d      	ldr	r3, [pc, #628]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007092:	4b9a      	ldr	r3, [pc, #616]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	0e1b      	lsrs	r3, r3, #24
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	e006      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800709e:	4b97      	ldr	r3, [pc, #604]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80070a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070a4:	041b      	lsls	r3, r3, #16
 80070a6:	0e1b      	lsrs	r3, r3, #24
 80070a8:	f003 030f 	and.w	r3, r3, #15
 80070ac:	4a95      	ldr	r2, [pc, #596]	@ (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80070ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070b4:	f001 b9b4 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070bc:	f001 b9b0 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070c4:	f001 b9ac 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80070c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070cc:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80070d0:	430b      	orrs	r3, r1
 80070d2:	d17f      	bne.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80070d4:	4b89      	ldr	r3, [pc, #548]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80070d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070de:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80070e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d165      	bne.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80070e6:	4b85      	ldr	r3, [pc, #532]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80070e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070ec:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80070f0:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80070f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80070f8:	d034      	beq.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007100:	d853      	bhi.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007104:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007108:	d00b      	beq.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800710a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007110:	d84b      	bhi.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007114:	2b00      	cmp	r3, #0
 8007116:	d016      	beq.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800711e:	d009      	beq.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007120:	e043      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007126:	4618      	mov	r0, r3
 8007128:	f7ff fa10 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800712c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007130:	f001 b976 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007134:	f107 0318 	add.w	r3, r7, #24
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff fb63 	bl	8006804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007142:	f001 b96d 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007146:	4b6d      	ldr	r3, [pc, #436]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800714e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007152:	d103      	bne.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8007154:	4b6a      	ldr	r3, [pc, #424]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007156:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007158:	f001 b962 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007160:	f001 b95e 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007164:	4b65      	ldr	r3, [pc, #404]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b20      	cmp	r3, #32
 800716e:	d118      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007170:	4b62      	ldr	r3, [pc, #392]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800717c:	4b5f      	ldr	r3, [pc, #380]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	0e1b      	lsrs	r3, r3, #24
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	e006      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007188:	4b5c      	ldr	r3, [pc, #368]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800718a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800718e:	041b      	lsls	r3, r3, #16
 8007190:	0e1b      	lsrs	r3, r3, #24
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	4a5b      	ldr	r2, [pc, #364]	@ (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800719c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800719e:	f001 b93f 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80071a6:	f001 b93b 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        default :
        {
          frequency = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80071ae:	f001 b937 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071b8:	d108      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff f9c4 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80071c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c8:	f001 b92a 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else
    {
      frequency = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d0:	f001 b926 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80071d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d8:	1e51      	subs	r1, r2, #1
 80071da:	430b      	orrs	r3, r1
 80071dc:	d136      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80071de:	4b47      	ldr	r3, [pc, #284]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80071e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071e4:	f003 0303 	and.w	r3, r3, #3
 80071e8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d104      	bne.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80071f0:	f7fe fa42 	bl	8005678 <HAL_RCC_GetPCLK2Freq>
 80071f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80071f6:	f001 b913 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d104      	bne.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007200:	f7fe f906 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 8007204:	6378      	str	r0, [r7, #52]	@ 0x34
 8007206:	f001 b90b 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800720a:	4b3c      	ldr	r3, [pc, #240]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007216:	d106      	bne.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721a:	2b02      	cmp	r3, #2
 800721c:	d103      	bne.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800721e:	4b3a      	ldr	r3, [pc, #232]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007220:	637b      	str	r3, [r7, #52]	@ 0x34
 8007222:	f001 b8fd 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007226:	4b35      	ldr	r3, [pc, #212]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b02      	cmp	r3, #2
 8007232:	d107      	bne.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007236:	2b03      	cmp	r3, #3
 8007238:	d104      	bne.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800723a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800723e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007240:	f001 b8ee 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	637b      	str	r3, [r7, #52]	@ 0x34
 8007248:	f001 b8ea 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800724c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007250:	1e91      	subs	r1, r2, #2
 8007252:	430b      	orrs	r3, r1
 8007254:	d136      	bne.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007256:	4b29      	ldr	r3, [pc, #164]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800725c:	f003 030c 	and.w	r3, r3, #12
 8007260:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007264:	2b00      	cmp	r3, #0
 8007266:	d104      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007268:	f7fe f9f2 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 800726c:	6378      	str	r0, [r7, #52]	@ 0x34
 800726e:	f001 b8d7 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	2b04      	cmp	r3, #4
 8007276:	d104      	bne.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007278:	f7fe f8ca 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 800727c:	6378      	str	r0, [r7, #52]	@ 0x34
 800727e:	f001 b8cf 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007282:	4b1e      	ldr	r3, [pc, #120]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800728a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800728e:	d106      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007292:	2b08      	cmp	r3, #8
 8007294:	d103      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8007296:	4b1c      	ldr	r3, [pc, #112]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007298:	637b      	str	r3, [r7, #52]	@ 0x34
 800729a:	f001 b8c1 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800729e:	4b17      	ldr	r3, [pc, #92]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80072a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d107      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80072ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ae:	2b0c      	cmp	r3, #12
 80072b0:	d104      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80072b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80072b8:	f001 b8b2 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	637b      	str	r3, [r7, #52]	@ 0x34
 80072c0:	f001 b8ae 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80072c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072c8:	1f11      	subs	r1, r2, #4
 80072ca:	430b      	orrs	r3, r1
 80072cc:	d13f      	bne.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80072ce:	4b0b      	ldr	r3, [pc, #44]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80072d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80072d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d104      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80072e0:	f7fe f9b6 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 80072e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80072e6:	f001 b89b 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	2b10      	cmp	r3, #16
 80072ee:	d10d      	bne.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80072f0:	f7fe f88e 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 80072f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80072f6:	f001 b893 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80072fa:	bf00      	nop
 80072fc:	46020c00 	.word	0x46020c00
 8007300:	02dc6c00 	.word	0x02dc6c00
 8007304:	0800ec34 	.word	0x0800ec34
 8007308:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800730c:	4ba8      	ldr	r3, [pc, #672]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007318:	d106      	bne.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800731a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731c:	2b20      	cmp	r3, #32
 800731e:	d103      	bne.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8007320:	4ba4      	ldr	r3, [pc, #656]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007322:	637b      	str	r3, [r7, #52]	@ 0x34
 8007324:	f001 b87c 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007328:	4ba1      	ldr	r3, [pc, #644]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800732a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b02      	cmp	r3, #2
 8007334:	d107      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007338:	2b30      	cmp	r3, #48	@ 0x30
 800733a:	d104      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800733c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007340:	637b      	str	r3, [r7, #52]	@ 0x34
 8007342:	f001 b86d 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	637b      	str	r3, [r7, #52]	@ 0x34
 800734a:	f001 b869 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800734e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007352:	f1a2 0108 	sub.w	r1, r2, #8
 8007356:	430b      	orrs	r3, r1
 8007358:	d136      	bne.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800735a:	4b95      	ldr	r3, [pc, #596]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800735c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007360:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007364:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800736c:	f7fe f970 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 8007370:	6378      	str	r0, [r7, #52]	@ 0x34
 8007372:	f001 b855 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007378:	2b40      	cmp	r3, #64	@ 0x40
 800737a:	d104      	bne.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800737c:	f7fe f848 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 8007380:	6378      	str	r0, [r7, #52]	@ 0x34
 8007382:	f001 b84d 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007386:	4b8a      	ldr	r3, [pc, #552]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800738e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007392:	d106      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8007394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007396:	2b80      	cmp	r3, #128	@ 0x80
 8007398:	d103      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800739a:	4b86      	ldr	r3, [pc, #536]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800739c:	637b      	str	r3, [r7, #52]	@ 0x34
 800739e:	f001 b83f 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80073a2:	4b83      	ldr	r3, [pc, #524]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80073a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d107      	bne.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80073b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80073b4:	d104      	bne.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80073b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80073bc:	f001 b830 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80073c0:	2300      	movs	r3, #0
 80073c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c4:	f001 b82c 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80073c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073cc:	f1a2 0110 	sub.w	r1, r2, #16
 80073d0:	430b      	orrs	r3, r1
 80073d2:	d139      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80073d4:	4b76      	ldr	r3, [pc, #472]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80073d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80073e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d104      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80073e6:	f7fe f933 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 80073ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80073ec:	f001 b818 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80073f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073f6:	d104      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80073f8:	f7fe f80a 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 80073fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80073fe:	f001 b80f 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007402:	4b6b      	ldr	r3, [pc, #428]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800740a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800740e:	d107      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8007410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007412:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007416:	d103      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8007418:	4b66      	ldr	r3, [pc, #408]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800741a:	637b      	str	r3, [r7, #52]	@ 0x34
 800741c:	f001 b800 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007420:	4b63      	ldr	r3, [pc, #396]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b02      	cmp	r3, #2
 800742c:	d108      	bne.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800742e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007430:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007434:	d104      	bne.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800743a:	637b      	str	r3, [r7, #52]	@ 0x34
 800743c:	f000 bff0 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	637b      	str	r3, [r7, #52]	@ 0x34
 8007444:	f000 bfec 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8007448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800744c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8007450:	430b      	orrs	r3, r1
 8007452:	d139      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007454:	4b56      	ldr	r3, [pc, #344]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007456:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800745a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800745e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007462:	2b00      	cmp	r3, #0
 8007464:	d104      	bne.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007466:	f7fe f8f3 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 800746a:	6378      	str	r0, [r7, #52]	@ 0x34
 800746c:	f000 bfd8 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007476:	d104      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007478:	f7fd ffca 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 800747c:	6378      	str	r0, [r7, #52]	@ 0x34
 800747e:	f000 bfcf 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007482:	4b4b      	ldr	r3, [pc, #300]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800748a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800748e:	d107      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007492:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007496:	d103      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8007498:	4b46      	ldr	r3, [pc, #280]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800749a:	637b      	str	r3, [r7, #52]	@ 0x34
 800749c:	f000 bfc0 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80074a0:	4b43      	ldr	r3, [pc, #268]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80074a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d108      	bne.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 80074ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074b4:	d104      	bne.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 80074b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80074bc:	f000 bfb0 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c4:	f000 bfac 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80074c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074cc:	f1a2 0120 	sub.w	r1, r2, #32
 80074d0:	430b      	orrs	r3, r1
 80074d2:	d158      	bne.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80074d4:	4b36      	ldr	r3, [pc, #216]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80074d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074da:	f003 0307 	and.w	r3, r3, #7
 80074de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d104      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80074e6:	f7fe f8db 	bl	80056a0 <HAL_RCC_GetPCLK3Freq>
 80074ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80074ec:	f000 bf98 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80074f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d104      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80074f6:	f7fd ff8b 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 80074fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80074fc:	f000 bf90 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007500:	4b2b      	ldr	r3, [pc, #172]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800750c:	d106      	bne.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007510:	2b02      	cmp	r3, #2
 8007512:	d103      	bne.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8007514:	4b27      	ldr	r3, [pc, #156]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007516:	637b      	str	r3, [r7, #52]	@ 0x34
 8007518:	f000 bf82 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800751c:	4b24      	ldr	r3, [pc, #144]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800751e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	2b02      	cmp	r3, #2
 8007528:	d107      	bne.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800752a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752c:	2b03      	cmp	r3, #3
 800752e:	d104      	bne.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8007530:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007534:	637b      	str	r3, [r7, #52]	@ 0x34
 8007536:	f000 bf73 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800753a:	4b1d      	ldr	r3, [pc, #116]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b20      	cmp	r3, #32
 8007544:	d11b      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8007546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007548:	2b04      	cmp	r3, #4
 800754a:	d118      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800754c:	4b18      	ldr	r3, [pc, #96]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8007558:	4b15      	ldr	r3, [pc, #84]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	0e1b      	lsrs	r3, r3, #24
 800755e:	f003 030f 	and.w	r3, r3, #15
 8007562:	e006      	b.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8007564:	4b12      	ldr	r3, [pc, #72]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800756a:	041b      	lsls	r3, r3, #16
 800756c:	0e1b      	lsrs	r3, r3, #24
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	4a11      	ldr	r2, [pc, #68]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007578:	637b      	str	r3, [r7, #52]	@ 0x34
 800757a:	f000 bf51 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800757e:	2300      	movs	r3, #0
 8007580:	637b      	str	r3, [r7, #52]	@ 0x34
 8007582:	f000 bf4d 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800758a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800758e:	430b      	orrs	r3, r1
 8007590:	d172      	bne.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007592:	4b07      	ldr	r3, [pc, #28]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007594:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007598:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800759c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800759e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a4:	d10a      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80075a6:	f7fd ff33 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 80075aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80075ac:	f000 bf38 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80075b0:	46020c00 	.word	0x46020c00
 80075b4:	00f42400 	.word	0x00f42400
 80075b8:	0800ec34 	.word	0x0800ec34
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80075bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075c2:	d108      	bne.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075c4:	f107 0318 	add.w	r3, r7, #24
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff f91b 	bl	8006804 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80075d2:	f000 bf25 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80075d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d104      	bne.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80075dc:	f7fe f81e 	bl	800561c <HAL_RCC_GetHCLKFreq>
 80075e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80075e2:	f000 bf1d 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80075ec:	d122      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80075ee:	4bb0      	ldr	r3, [pc, #704]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d118      	bne.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075fa:	4bad      	ldr	r3, [pc, #692]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d005      	beq.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8007606:	4baa      	ldr	r3, [pc, #680]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	0e1b      	lsrs	r3, r3, #24
 800760c:	f003 030f 	and.w	r3, r3, #15
 8007610:	e006      	b.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8007612:	4ba7      	ldr	r3, [pc, #668]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007614:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007618:	041b      	lsls	r3, r3, #16
 800761a:	0e1b      	lsrs	r3, r3, #24
 800761c:	f003 030f 	and.w	r3, r3, #15
 8007620:	4aa4      	ldr	r2, [pc, #656]	@ (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007626:	637b      	str	r3, [r7, #52]	@ 0x34
 8007628:	f000 befa 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007630:	f000 bef6 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007634:	4b9e      	ldr	r3, [pc, #632]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800763c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007640:	d107      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007648:	d103      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800764a:	4b9b      	ldr	r3, [pc, #620]	@ (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800764c:	637b      	str	r3, [r7, #52]	@ 0x34
 800764e:	f000 bee7 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007652:	4b97      	ldr	r3, [pc, #604]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800765a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800765e:	d107      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8007660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007662:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007666:	d103      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8007668:	4b94      	ldr	r3, [pc, #592]	@ (80078bc <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 800766a:	637b      	str	r3, [r7, #52]	@ 0x34
 800766c:	f000 bed8 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	637b      	str	r3, [r7, #52]	@ 0x34
 8007674:	f000 bed4 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800767c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007680:	430b      	orrs	r3, r1
 8007682:	d158      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007684:	4b8a      	ldr	r3, [pc, #552]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007686:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800768a:	f003 0307 	and.w	r3, r3, #7
 800768e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007692:	2b04      	cmp	r3, #4
 8007694:	d84b      	bhi.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8007696:	a201      	add	r2, pc, #4	@ (adr r2, 800769c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	080076d5 	.word	0x080076d5
 80076a0:	080076b1 	.word	0x080076b1
 80076a4:	080076c3 	.word	0x080076c3
 80076a8:	080076df 	.word	0x080076df
 80076ac:	080076e9 	.word	0x080076e9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fe ff49 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076be:	f000 beaf 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076c2:	f107 030c 	add.w	r3, r7, #12
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff f9f8 	bl	8006abc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076d0:	f000 bea6 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80076d4:	f7fd ffa2 	bl	800561c <HAL_RCC_GetHCLKFreq>
 80076d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80076da:	f000 bea1 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80076de:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80076e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076e4:	f000 be9c 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076e8:	4b71      	ldr	r3, [pc, #452]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0320 	and.w	r3, r3, #32
 80076f0:	2b20      	cmp	r3, #32
 80076f2:	d118      	bne.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076f4:	4b6e      	ldr	r3, [pc, #440]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007700:	4b6b      	ldr	r3, [pc, #428]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	0e1b      	lsrs	r3, r3, #24
 8007706:	f003 030f 	and.w	r3, r3, #15
 800770a:	e006      	b.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800770c:	4b68      	ldr	r3, [pc, #416]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800770e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007712:	041b      	lsls	r3, r3, #16
 8007714:	0e1b      	lsrs	r3, r3, #24
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	4a66      	ldr	r2, [pc, #408]	@ (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800771c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007720:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007722:	f000 be7d 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800772a:	f000 be79 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007732:	f000 be75 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800773a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800773e:	430b      	orrs	r3, r1
 8007740:	d167      	bne.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007742:	4b5b      	ldr	r3, [pc, #364]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007748:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800774c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007754:	d036      	beq.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8007756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007758:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800775c:	d855      	bhi.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800775e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007760:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007764:	d029      	beq.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8007766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007768:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800776c:	d84d      	bhi.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800776e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007770:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007774:	d013      	beq.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8007776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007778:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800777c:	d845      	bhi.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	2b00      	cmp	r3, #0
 8007782:	d015      	beq.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8007784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800778a:	d13e      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800778c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe fedb 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007798:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800779a:	f000 be41 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800779e:	f107 030c 	add.w	r3, r7, #12
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff f98a 	bl	8006abc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077ac:	f000 be38 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80077b0:	f7fd ff34 	bl	800561c <HAL_RCC_GetHCLKFreq>
 80077b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80077b6:	f000 be33 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80077ba:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80077be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077c0:	f000 be2e 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80077c4:	4b3a      	ldr	r3, [pc, #232]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0320 	and.w	r3, r3, #32
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d118      	bne.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80077d0:	4b37      	ldr	r3, [pc, #220]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80077dc:	4b34      	ldr	r3, [pc, #208]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	0e1b      	lsrs	r3, r3, #24
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	e006      	b.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80077e8:	4b31      	ldr	r3, [pc, #196]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80077ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077ee:	041b      	lsls	r3, r3, #16
 80077f0:	0e1b      	lsrs	r3, r3, #24
 80077f2:	f003 030f 	and.w	r3, r3, #15
 80077f6:	4a2f      	ldr	r2, [pc, #188]	@ (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80077f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077fe:	f000 be0f 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007806:	f000 be0b 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800780e:	f000 be07 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007816:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800781a:	430b      	orrs	r3, r1
 800781c:	d154      	bne.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800781e:	4b24      	ldr	r3, [pc, #144]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007824:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007828:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782c:	2b00      	cmp	r3, #0
 800782e:	d104      	bne.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007830:	f7fd ff0e 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 8007834:	6378      	str	r0, [r7, #52]	@ 0x34
 8007836:	f000 bdf3 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007840:	d104      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007842:	f7fd fde5 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 8007846:	6378      	str	r0, [r7, #52]	@ 0x34
 8007848:	f000 bdea 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800784c:	4b18      	ldr	r3, [pc, #96]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007858:	d107      	bne.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800785a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007860:	d103      	bne.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8007862:	4b16      	ldr	r3, [pc, #88]	@ (80078bc <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 8007864:	637b      	str	r3, [r7, #52]	@ 0x34
 8007866:	f000 bddb 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800786a:	4b11      	ldr	r3, [pc, #68]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0320 	and.w	r3, r3, #32
 8007872:	2b20      	cmp	r3, #32
 8007874:	d124      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007878:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800787c:	d120      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800787e:	4b0c      	ldr	r3, [pc, #48]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800788a:	4b09      	ldr	r3, [pc, #36]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	0e1b      	lsrs	r3, r3, #24
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	e006      	b.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8007896:	4b06      	ldr	r3, [pc, #24]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800789c:	041b      	lsls	r3, r3, #16
 800789e:	0e1b      	lsrs	r3, r3, #24
 80078a0:	f003 030f 	and.w	r3, r3, #15
 80078a4:	4a03      	ldr	r2, [pc, #12]	@ (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80078a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ac:	f000 bdb8 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80078b0:	46020c00 	.word	0x46020c00
 80078b4:	0800ec34 	.word	0x0800ec34
 80078b8:	007a1200 	.word	0x007a1200
 80078bc:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80078c0:	2300      	movs	r3, #0
 80078c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80078c4:	f000 bdac 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80078c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078cc:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80078d0:	430b      	orrs	r3, r1
 80078d2:	d14c      	bne.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80078d4:	4ba8      	ldr	r3, [pc, #672]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80078d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80078de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80078e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d104      	bne.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80078e6:	f7fd feb3 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 80078ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80078ec:	f000 bd98 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80078f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078f6:	d104      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078f8:	f7fd fd8a 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 80078fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80078fe:	f000 bd8f 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007902:	4b9d      	ldr	r3, [pc, #628]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800790a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800790e:	d107      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8007910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007912:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007916:	d103      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
    {
      frequency = HSI_VALUE;
 8007918:	4b98      	ldr	r3, [pc, #608]	@ (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800791a:	637b      	str	r3, [r7, #52]	@ 0x34
 800791c:	f000 bd80 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007920:	4b95      	ldr	r3, [pc, #596]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0320 	and.w	r3, r3, #32
 8007928:	2b20      	cmp	r3, #32
 800792a:	d11c      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 800792c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007932:	d118      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007934:	4b90      	ldr	r3, [pc, #576]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8007940:	4b8d      	ldr	r3, [pc, #564]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	0e1b      	lsrs	r3, r3, #24
 8007946:	f003 030f 	and.w	r3, r3, #15
 800794a:	e006      	b.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800794c:	4b8a      	ldr	r3, [pc, #552]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800794e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007952:	041b      	lsls	r3, r3, #16
 8007954:	0e1b      	lsrs	r3, r3, #24
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	4a89      	ldr	r2, [pc, #548]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 800795c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007960:	637b      	str	r3, [r7, #52]	@ 0x34
 8007962:	f000 bd5d 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	637b      	str	r3, [r7, #52]	@ 0x34
 800796a:	f000 bd59 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800796e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007972:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007976:	430b      	orrs	r3, r1
 8007978:	d158      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800797a:	4b7f      	ldr	r3, [pc, #508]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800797c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007980:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007984:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007988:	2bc0      	cmp	r3, #192	@ 0xc0
 800798a:	d028      	beq.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
 800798c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007990:	d848      	bhi.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8007992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007994:	2b80      	cmp	r3, #128	@ 0x80
 8007996:	d00e      	beq.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8007998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799a:	2b80      	cmp	r3, #128	@ 0x80
 800799c:	d842      	bhi.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 800799e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 80079a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a6:	2b40      	cmp	r3, #64	@ 0x40
 80079a8:	d014      	beq.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
 80079aa:	e03b      	b.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80079ac:	f7fd fe78 	bl	80056a0 <HAL_RCC_GetPCLK3Freq>
 80079b0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80079b2:	f000 bd35 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079b6:	4b70      	ldr	r3, [pc, #448]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079c2:	d103      	bne.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
        {
          frequency = HSI_VALUE;
 80079c4:	4b6d      	ldr	r3, [pc, #436]	@ (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80079c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079c8:	f000 bd2a 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079d0:	f000 bd26 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80079d4:	f7fd fd1c 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 80079d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80079da:	f000 bd21 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80079de:	4b66      	ldr	r3, [pc, #408]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0320 	and.w	r3, r3, #32
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	d118      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079ea:	4b63      	ldr	r3, [pc, #396]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d005      	beq.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 80079f6:	4b60      	ldr	r3, [pc, #384]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	0e1b      	lsrs	r3, r3, #24
 80079fc:	f003 030f 	and.w	r3, r3, #15
 8007a00:	e006      	b.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xc9c>
 8007a02:	4b5d      	ldr	r3, [pc, #372]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007a04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a08:	041b      	lsls	r3, r3, #16
 8007a0a:	0e1b      	lsrs	r3, r3, #24
 8007a0c:	f003 030f 	and.w	r3, r3, #15
 8007a10:	4a5b      	ldr	r2, [pc, #364]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8007a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a16:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a18:	f000 bd02 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a20:	f000 bcfe 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      default:
      {
        frequency = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a28:	f000 bcfa 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a30:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007a34:	430b      	orrs	r3, r1
 8007a36:	d14c      	bne.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007a38:	4b4f      	ldr	r3, [pc, #316]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a3e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007a42:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d104      	bne.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a4a:	f7fd fe01 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 8007a4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a50:	f000 bce6 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a5a:	d104      	bne.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a5c:	f7fd fcd8 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 8007a60:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a62:	f000 bcdd 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007a66:	4b44      	ldr	r3, [pc, #272]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a72:	d107      	bne.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 8007a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a7a:	d103      	bne.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
    {
      frequency = HSI_VALUE;
 8007a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a80:	f000 bcce 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007a84:	4b3c      	ldr	r3, [pc, #240]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0320 	and.w	r3, r3, #32
 8007a8c:	2b20      	cmp	r3, #32
 8007a8e:	d11c      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007a96:	d118      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a98:	4b37      	ldr	r3, [pc, #220]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d005      	beq.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
 8007aa4:	4b34      	ldr	r3, [pc, #208]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	0e1b      	lsrs	r3, r3, #24
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	e006      	b.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
 8007ab0:	4b31      	ldr	r3, [pc, #196]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007ab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ab6:	041b      	lsls	r3, r3, #16
 8007ab8:	0e1b      	lsrs	r3, r3, #24
 8007aba:	f003 030f 	and.w	r3, r3, #15
 8007abe:	4a30      	ldr	r2, [pc, #192]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8007ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac6:	f000 bcab 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007aca:	2300      	movs	r3, #0
 8007acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ace:	f000 bca7 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8007ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ad6:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 8007ada:	430b      	orrs	r3, r1
 8007adc:	d152      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8007ade:	4b26      	ldr	r3, [pc, #152]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007ae0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ae4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007ae8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8007aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d104      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0xd86>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007af0:	f7fd fdae 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 8007af4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007af6:	f000 bc93 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8007afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b00:	d104      	bne.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b02:	f7fd fc85 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 8007b06:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b08:	f000 bc8a 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8007b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b18:	d107      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b20:	d103      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
    {
      frequency = HSI_VALUE;
 8007b22:	4b16      	ldr	r3, [pc, #88]	@ (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b26:	f000 bc7b 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8007b2a:	4b13      	ldr	r3, [pc, #76]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	d11c      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8007b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b3c:	d118      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	0e1b      	lsrs	r3, r3, #24
 8007b50:	f003 030f 	and.w	r3, r3, #15
 8007b54:	e006      	b.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
 8007b56:	4b08      	ldr	r3, [pc, #32]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007b58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b5c:	041b      	lsls	r3, r3, #16
 8007b5e:	0e1b      	lsrs	r3, r3, #24
 8007b60:	f003 030f 	and.w	r3, r3, #15
 8007b64:	4a06      	ldr	r2, [pc, #24]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8007b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b6c:	f000 bc58 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b74:	f000 bc54 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8007b78:	46020c00 	.word	0x46020c00
 8007b7c:	00f42400 	.word	0x00f42400
 8007b80:	0800ec34 	.word	0x0800ec34
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8007b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b88:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	d14a      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8007b90:	4ba5      	ldr	r3, [pc, #660]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007b92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b96:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007b9a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d104      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007ba2:	f7fd fd55 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 8007ba6:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ba8:	f000 bc3a 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8007bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007bb2:	d104      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bb4:	f7fd fc2c 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 8007bb8:	6378      	str	r0, [r7, #52]	@ 0x34
 8007bba:	f000 bc31 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8007bbe:	4b9a      	ldr	r3, [pc, #616]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bca:	d107      	bne.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bd2:	d103      	bne.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
    {
      frequency = HSI_VALUE;
 8007bd4:	4b95      	ldr	r3, [pc, #596]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bd8:	f000 bc22 	b.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8007bdc:	4b92      	ldr	r3, [pc, #584]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0320 	and.w	r3, r3, #32
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	d11b      	bne.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 8007be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007bee:	d117      	bne.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bf0:	4b8d      	ldr	r3, [pc, #564]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d005      	beq.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8007bfc:	4b8a      	ldr	r3, [pc, #552]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	0e1b      	lsrs	r3, r3, #24
 8007c02:	f003 030f 	and.w	r3, r3, #15
 8007c06:	e006      	b.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8007c08:	4b87      	ldr	r3, [pc, #540]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c0e:	041b      	lsls	r3, r3, #16
 8007c10:	0e1b      	lsrs	r3, r3, #24
 8007c12:	f003 030f 	and.w	r3, r3, #15
 8007c16:	4a86      	ldr	r2, [pc, #536]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8007c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c1e:	e3ff      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c24:	e3fc      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c2a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	d164      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007c32:	4b7d      	ldr	r3, [pc, #500]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c3c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d120      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c44:	4b78      	ldr	r3, [pc, #480]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	d117      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c50:	4b75      	ldr	r3, [pc, #468]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d005      	beq.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8007c5c:	4b72      	ldr	r3, [pc, #456]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	0e1b      	lsrs	r3, r3, #24
 8007c62:	f003 030f 	and.w	r3, r3, #15
 8007c66:	e006      	b.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8007c68:	4b6f      	ldr	r3, [pc, #444]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c6e:	041b      	lsls	r3, r3, #16
 8007c70:	0e1b      	lsrs	r3, r3, #24
 8007c72:	f003 030f 	and.w	r3, r3, #15
 8007c76:	4a6e      	ldr	r2, [pc, #440]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8007c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c7e:	e3cf      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c84:	e3cc      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007c86:	4b68      	ldr	r3, [pc, #416]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c94:	d112      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 8007c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c9c:	d10e      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c9e:	4b62      	ldr	r3, [pc, #392]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ca8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cac:	d102      	bne.n	8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 8007cae:	23fa      	movs	r3, #250	@ 0xfa
 8007cb0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007cb2:	e3b5      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8007cb4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007cb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007cba:	e3b1      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cc8:	d106      	bne.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 8007cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cd0:	d102      	bne.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 8007cd2:	4b56      	ldr	r3, [pc, #344]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cd6:	e3a3      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007cd8:	4b53      	ldr	r3, [pc, #332]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007cda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cde:	f003 0302 	and.w	r3, r3, #2
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d107      	bne.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cec:	d103      	bne.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 8007cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf4:	e394      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cfa:	e391      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d00:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007d04:	430b      	orrs	r3, r1
 8007d06:	d164      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007d08:	4b47      	ldr	r3, [pc, #284]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007d0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d0e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007d12:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d120      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007d1a:	4b43      	ldr	r3, [pc, #268]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0320 	and.w	r3, r3, #32
 8007d22:	2b20      	cmp	r3, #32
 8007d24:	d117      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d26:	4b40      	ldr	r3, [pc, #256]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d005      	beq.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 8007d32:	4b3d      	ldr	r3, [pc, #244]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	0e1b      	lsrs	r3, r3, #24
 8007d38:	f003 030f 	and.w	r3, r3, #15
 8007d3c:	e006      	b.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007d40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d44:	041b      	lsls	r3, r3, #16
 8007d46:	0e1b      	lsrs	r3, r3, #24
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	4a38      	ldr	r2, [pc, #224]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8007d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d54:	e364      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d5a:	e361      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007d5c:	4b32      	ldr	r3, [pc, #200]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d6a:	d112      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d72:	d10e      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d74:	4b2c      	ldr	r3, [pc, #176]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007d76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d82:	d102      	bne.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 8007d84:	23fa      	movs	r3, #250	@ 0xfa
 8007d86:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d88:	e34a      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8007d8a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007d8e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d90:	e346      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007d92:	4b25      	ldr	r3, [pc, #148]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d9e:	d106      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 8007da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007da6:	d102      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 8007da8:	4b20      	ldr	r3, [pc, #128]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dac:	e338      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007dae:	4b1e      	ldr	r3, [pc, #120]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007db4:	f003 0302 	and.w	r3, r3, #2
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d107      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dc2:	d103      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 8007dc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dca:	e329      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd0:	e326      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dd6:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007dda:	430b      	orrs	r3, r1
 8007ddc:	d14e      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007dde:	4b12      	ldr	r3, [pc, #72]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007de4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007de8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d103      	bne.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007df0:	f7fd fc2e 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 8007df4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007df6:	e313      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007df8:	4b0b      	ldr	r3, [pc, #44]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007dfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e06:	d119      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e0e:	d115      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007e10:	4b05      	ldr	r3, [pc, #20]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e1e:	d109      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 8007e20:	23fa      	movs	r3, #250	@ 0xfa
 8007e22:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007e24:	e2fc      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8007e26:	bf00      	nop
 8007e28:	46020c00 	.word	0x46020c00
 8007e2c:	00f42400 	.word	0x00f42400
 8007e30:	0800ec34 	.word	0x0800ec34
      }
      else
      {
        frequency = LSI_VALUE;
 8007e34:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007e38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007e3a:	e2f1      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007e3c:	4ba8      	ldr	r3, [pc, #672]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e48:	d106      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007e50:	d102      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 8007e52:	4ba4      	ldr	r3, [pc, #656]	@ (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e56:	e2e3      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007e58:	4ba1      	ldr	r3, [pc, #644]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e5e:	f003 0302 	and.w	r3, r3, #2
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d107      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8007e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007e6c:	d103      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 8007e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e74:	e2d4      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e7a:	e2d1      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e80:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007e84:	430b      	orrs	r3, r1
 8007e86:	d12d      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007e88:	4b95      	ldr	r3, [pc, #596]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e8e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007e92:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007e94:	4b92      	ldr	r3, [pc, #584]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ea0:	d105      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d102      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 8007ea8:	4b8f      	ldr	r3, [pc, #572]	@ (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 8007eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eac:	e2b8      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007eb4:	d107      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe fb46 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ec4:	e2ac      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ecc:	d107      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ece:	f107 0318 	add.w	r3, r7, #24
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe fc96 	bl	8006804 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007edc:	e2a0      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ee2:	e29d      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007eec:	430b      	orrs	r3, r1
 8007eee:	d156      	bne.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007ef0:	4b7b      	ldr	r3, [pc, #492]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ef6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007efa:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f02:	d028      	beq.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8007f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f0a:	d845      	bhi.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f12:	d013      	beq.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8007f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f1a:	d83d      	bhi.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d004      	beq.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 8007f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f28:	d004      	beq.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007f2a:	e035      	b.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007f2c:	f7fd fba4 	bl	8005678 <HAL_RCC_GetPCLK2Freq>
 8007f30:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007f32:	e275      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007f34:	f7fd fa6c 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 8007f38:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007f3a:	e271      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f3c:	4b68      	ldr	r3, [pc, #416]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f48:	d102      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 8007f4a:	4b66      	ldr	r3, [pc, #408]	@ (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007f4c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f4e:	e267      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f54:	e264      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007f56:	4b62      	ldr	r3, [pc, #392]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0320 	and.w	r3, r3, #32
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	d117      	bne.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f62:	4b5f      	ldr	r3, [pc, #380]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d005      	beq.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 8007f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	0e1b      	lsrs	r3, r3, #24
 8007f74:	f003 030f 	and.w	r3, r3, #15
 8007f78:	e006      	b.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 8007f7a:	4b59      	ldr	r3, [pc, #356]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007f7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f80:	041b      	lsls	r3, r3, #16
 8007f82:	0e1b      	lsrs	r3, r3, #24
 8007f84:	f003 030f 	and.w	r3, r3, #15
 8007f88:	4a58      	ldr	r2, [pc, #352]	@ (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 8007f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f8e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f90:	e246      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f96:	e243      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f9c:	e240      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fa2:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007fa6:	430b      	orrs	r3, r1
 8007fa8:	d156      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007faa:	4b4d      	ldr	r3, [pc, #308]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007fb4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007fbc:	d028      	beq.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007fc4:	d845      	bhi.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fcc:	d013      	beq.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 8007fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fd4:	d83d      	bhi.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d004      	beq.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fe2:	d004      	beq.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 8007fe4:	e035      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007fe6:	f7fd fb33 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 8007fea:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007fec:	e218      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007fee:	f7fd fa0f 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 8007ff2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007ff4:	e214      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008002:	d102      	bne.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 8008004:	4b37      	ldr	r3, [pc, #220]	@ (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8008006:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008008:	e20a      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800800e:	e207      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008010:	4b33      	ldr	r3, [pc, #204]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0320 	and.w	r3, r3, #32
 8008018:	2b20      	cmp	r3, #32
 800801a:	d117      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800801c:	4b30      	ldr	r3, [pc, #192]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d005      	beq.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8008028:	4b2d      	ldr	r3, [pc, #180]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	0e1b      	lsrs	r3, r3, #24
 800802e:	f003 030f 	and.w	r3, r3, #15
 8008032:	e006      	b.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008034:	4b2a      	ldr	r3, [pc, #168]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800803a:	041b      	lsls	r3, r3, #16
 800803c:	0e1b      	lsrs	r3, r3, #24
 800803e:	f003 030f 	and.w	r3, r3, #15
 8008042:	4a2a      	ldr	r2, [pc, #168]	@ (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 8008044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008048:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800804a:	e1e9      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008050:	e1e6      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008056:	e1e3      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800805c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8008060:	430b      	orrs	r3, r1
 8008062:	d17e      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008064:	4b1e      	ldr	r3, [pc, #120]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800806a:	f003 0318 	and.w	r3, r3, #24
 800806e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008072:	2b18      	cmp	r3, #24
 8008074:	d872      	bhi.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 8008076:	a201      	add	r2, pc, #4	@ (adr r2, 800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 8008078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807c:	080080f1 	.word	0x080080f1
 8008080:	0800815d 	.word	0x0800815d
 8008084:	0800815d 	.word	0x0800815d
 8008088:	0800815d 	.word	0x0800815d
 800808c:	0800815d 	.word	0x0800815d
 8008090:	0800815d 	.word	0x0800815d
 8008094:	0800815d 	.word	0x0800815d
 8008098:	0800815d 	.word	0x0800815d
 800809c:	080080f9 	.word	0x080080f9
 80080a0:	0800815d 	.word	0x0800815d
 80080a4:	0800815d 	.word	0x0800815d
 80080a8:	0800815d 	.word	0x0800815d
 80080ac:	0800815d 	.word	0x0800815d
 80080b0:	0800815d 	.word	0x0800815d
 80080b4:	0800815d 	.word	0x0800815d
 80080b8:	0800815d 	.word	0x0800815d
 80080bc:	08008101 	.word	0x08008101
 80080c0:	0800815d 	.word	0x0800815d
 80080c4:	0800815d 	.word	0x0800815d
 80080c8:	0800815d 	.word	0x0800815d
 80080cc:	0800815d 	.word	0x0800815d
 80080d0:	0800815d 	.word	0x0800815d
 80080d4:	0800815d 	.word	0x0800815d
 80080d8:	0800815d 	.word	0x0800815d
 80080dc:	0800811b 	.word	0x0800811b
 80080e0:	46020c00 	.word	0x46020c00
 80080e4:	00f42400 	.word	0x00f42400
 80080e8:	007a1200 	.word	0x007a1200
 80080ec:	0800ec34 	.word	0x0800ec34
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80080f0:	f7fd fad6 	bl	80056a0 <HAL_RCC_GetPCLK3Freq>
 80080f4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80080f6:	e193      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80080f8:	f7fd f98a 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 80080fc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80080fe:	e18f      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008100:	4b9f      	ldr	r3, [pc, #636]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800810c:	d102      	bne.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 800810e:	4b9d      	ldr	r3, [pc, #628]	@ (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8008110:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008112:	e185      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008118:	e182      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800811a:	4b99      	ldr	r3, [pc, #612]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0320 	and.w	r3, r3, #32
 8008122:	2b20      	cmp	r3, #32
 8008124:	d117      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008126:	4b96      	ldr	r3, [pc, #600]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d005      	beq.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 8008132:	4b93      	ldr	r3, [pc, #588]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	0e1b      	lsrs	r3, r3, #24
 8008138:	f003 030f 	and.w	r3, r3, #15
 800813c:	e006      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 800813e:	4b90      	ldr	r3, [pc, #576]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008144:	041b      	lsls	r3, r3, #16
 8008146:	0e1b      	lsrs	r3, r3, #24
 8008148:	f003 030f 	and.w	r3, r3, #15
 800814c:	4a8e      	ldr	r2, [pc, #568]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800814e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008152:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008154:	e164      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800815a:	e161      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008160:	e15e      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008166:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800816a:	430b      	orrs	r3, r1
 800816c:	d155      	bne.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800816e:	4b84      	ldr	r3, [pc, #528]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008170:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008174:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008178:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800817a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008180:	d013      	beq.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 8008182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008184:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008188:	d844      	bhi.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008190:	d013      	beq.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 8008192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008194:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008198:	d83c      	bhi.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800819a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819c:	2b00      	cmp	r3, #0
 800819e:	d014      	beq.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 80081a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081a6:	d014      	beq.n	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 80081a8:	e034      	b.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081aa:	f107 0318 	add.w	r3, r7, #24
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe fb28 	bl	8006804 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081b8:	e132      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe f9c4 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80081c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081c8:	e12a      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80081ca:	f7fd f921 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 80081ce:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80081d0:	e126      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80081d2:	4b6b      	ldr	r3, [pc, #428]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0320 	and.w	r3, r3, #32
 80081da:	2b20      	cmp	r3, #32
 80081dc:	d117      	bne.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80081de:	4b68      	ldr	r3, [pc, #416]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d005      	beq.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 80081ea:	4b65      	ldr	r3, [pc, #404]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	0e1b      	lsrs	r3, r3, #24
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	e006      	b.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 80081f6:	4b62      	ldr	r3, [pc, #392]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80081f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081fc:	041b      	lsls	r3, r3, #16
 80081fe:	0e1b      	lsrs	r3, r3, #24
 8008200:	f003 030f 	and.w	r3, r3, #15
 8008204:	4a60      	ldr	r2, [pc, #384]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8008206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800820a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800820c:	e108      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800820e:	2300      	movs	r3, #0
 8008210:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008212:	e105      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008218:	e102      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800821a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800821e:	1e59      	subs	r1, r3, #1
 8008220:	ea52 0301 	orrs.w	r3, r2, r1
 8008224:	d13c      	bne.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8008226:	4b56      	ldr	r3, [pc, #344]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008228:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800822c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008230:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008234:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008238:	d027      	beq.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800823a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008240:	d82b      	bhi.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8008242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008244:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008248:	d017      	beq.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 800824a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008250:	d823      	bhi.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8008252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008254:	2b00      	cmp	r3, #0
 8008256:	d004      	beq.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8008258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800825e:	d004      	beq.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 8008260:	e01b      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008262:	f7fd f8d5 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 8008266:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008268:	e0da      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800826a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe f96c 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008276:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008278:	e0d2      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800827a:	f107 0318 	add.w	r3, r7, #24
 800827e:	4618      	mov	r0, r3
 8008280:	f7fe fac0 	bl	8006804 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008288:	e0ca      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800828a:	f107 030c 	add.w	r3, r7, #12
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe fc14 	bl	8006abc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008298:	e0c2      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800829e:	e0bf      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80082a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082a4:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80082a8:	430b      	orrs	r3, r1
 80082aa:	d131      	bne.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80082ac:	4b34      	ldr	r3, [pc, #208]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80082ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082b6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80082b8:	4b31      	ldr	r3, [pc, #196]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80082ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d106      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 80082c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d103      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 80082cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d2:	e0a5      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80082d4:	4b2a      	ldr	r3, [pc, #168]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80082d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082e2:	d112      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 80082e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ea:	d10e      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80082ec:	4b24      	ldr	r3, [pc, #144]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80082ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082fa:	d102      	bne.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 80082fc:	23fa      	movs	r3, #250	@ 0xfa
 80082fe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008300:	e08e      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8008302:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008306:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008308:	e08a      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	637b      	str	r3, [r7, #52]	@ 0x34
 800830e:	e087      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008314:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008318:	430b      	orrs	r3, r1
 800831a:	d13b      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800831c:	4b18      	ldr	r3, [pc, #96]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800831e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008322:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008326:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008328:	4b15      	ldr	r3, [pc, #84]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008334:	d105      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	2b00      	cmp	r3, #0
 800833a:	d102      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
    {
      frequency = HSI48_VALUE;
 800833c:	4b13      	ldr	r3, [pc, #76]	@ (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800833e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008340:	e06e      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008342:	4b0f      	ldr	r3, [pc, #60]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800834a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800834e:	d106      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
 8008350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008356:	d102      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008358:	4b0d      	ldr	r3, [pc, #52]	@ (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>)
 800835a:	637b      	str	r3, [r7, #52]	@ 0x34
 800835c:	e060      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800835e:	4b08      	ldr	r3, [pc, #32]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800836a:	d106      	bne.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 800836c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008372:	d102      	bne.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
    {
      frequency = HSI_VALUE;
 8008374:	4b03      	ldr	r3, [pc, #12]	@ (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8008376:	637b      	str	r3, [r7, #52]	@ 0x34
 8008378:	e052      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800837a:	2300      	movs	r3, #0
 800837c:	637b      	str	r3, [r7, #52]	@ 0x34
 800837e:	e04f      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8008380:	46020c00 	.word	0x46020c00
 8008384:	00f42400 	.word	0x00f42400
 8008388:	0800ec34 	.word	0x0800ec34
 800838c:	02dc6c00 	.word	0x02dc6c00
 8008390:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8008394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008398:	f1a3 0108 	sub.w	r1, r3, #8
 800839c:	ea52 0301 	orrs.w	r3, r2, r1
 80083a0:	d13c      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x16a8>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 80083a2:	4b22      	ldr	r3, [pc, #136]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80083a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80083a8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80083ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 80083ae:	4b1f      	ldr	r3, [pc, #124]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ba:	d105      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 80083bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d102      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
    {
      frequency = HSE_VALUE;
 80083c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80083c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80083c6:	e02b      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 80083c8:	4b18      	ldr	r3, [pc, #96]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083d4:	d106      	bne.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083dc:	d102      	bne.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
    {
      frequency = HSE_VALUE >> 1U ;
 80083de:	4b15      	ldr	r3, [pc, #84]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 80083e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083e2:	e01d      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ea:	d107      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1688>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fe f8ab 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80083f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80083fa:	e011      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 80083fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fe:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008402:	d108      	bne.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe f89f 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008410:	085b      	lsrs	r3, r3, #1
 8008412:	637b      	str	r3, [r7, #52]	@ 0x34
 8008414:	e004      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	637b      	str	r3, [r7, #52]	@ 0x34
 800841a:	e001      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8008420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008422:	4618      	mov	r0, r3
 8008424:	3738      	adds	r7, #56	@ 0x38
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	46020c00 	.word	0x46020c00
 8008430:	007a1200 	.word	0x007a1200
 8008434:	003d0900 	.word	0x003d0900

08008438 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008440:	4b47      	ldr	r3, [pc, #284]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a46      	ldr	r2, [pc, #280]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 8008446:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800844a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800844c:	f7fb f960 	bl	8003710 <HAL_GetTick>
 8008450:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008452:	e008      	b.n	8008466 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008454:	f7fb f95c 	bl	8003710 <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	2b02      	cmp	r3, #2
 8008460:	d901      	bls.n	8008466 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e077      	b.n	8008556 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008466:	4b3e      	ldr	r3, [pc, #248]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1f0      	bne.n	8008454 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008472:	4b3b      	ldr	r3, [pc, #236]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 8008474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008476:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800847a:	f023 0303 	bic.w	r3, r3, #3
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	6811      	ldr	r1, [r2, #0]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	6852      	ldr	r2, [r2, #4]
 8008486:	3a01      	subs	r2, #1
 8008488:	0212      	lsls	r2, r2, #8
 800848a:	430a      	orrs	r2, r1
 800848c:	4934      	ldr	r1, [pc, #208]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 800848e:	4313      	orrs	r3, r2
 8008490:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008492:	4b33      	ldr	r3, [pc, #204]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 8008494:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008496:	4b33      	ldr	r3, [pc, #204]	@ (8008564 <RCCEx_PLL2_Config+0x12c>)
 8008498:	4013      	ands	r3, r2
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	6892      	ldr	r2, [r2, #8]
 800849e:	3a01      	subs	r2, #1
 80084a0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	68d2      	ldr	r2, [r2, #12]
 80084a8:	3a01      	subs	r2, #1
 80084aa:	0252      	lsls	r2, r2, #9
 80084ac:	b292      	uxth	r2, r2
 80084ae:	4311      	orrs	r1, r2
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	6912      	ldr	r2, [r2, #16]
 80084b4:	3a01      	subs	r2, #1
 80084b6:	0412      	lsls	r2, r2, #16
 80084b8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80084bc:	4311      	orrs	r1, r2
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	6952      	ldr	r2, [r2, #20]
 80084c2:	3a01      	subs	r2, #1
 80084c4:	0612      	lsls	r2, r2, #24
 80084c6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80084ca:	430a      	orrs	r2, r1
 80084cc:	4924      	ldr	r1, [pc, #144]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80084d2:	4b23      	ldr	r3, [pc, #140]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 80084d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d6:	f023 020c 	bic.w	r2, r3, #12
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	4920      	ldr	r1, [pc, #128]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80084e4:	4b1e      	ldr	r3, [pc, #120]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 80084e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	491c      	ldr	r1, [pc, #112]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80084f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 80084f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f6:	4a1a      	ldr	r2, [pc, #104]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 80084f8:	f023 0310 	bic.w	r3, r3, #16
 80084fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80084fe:	4b18      	ldr	r3, [pc, #96]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 8008500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008502:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008506:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	69d2      	ldr	r2, [r2, #28]
 800850e:	00d2      	lsls	r2, r2, #3
 8008510:	4913      	ldr	r1, [pc, #76]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 8008512:	4313      	orrs	r3, r2
 8008514:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008516:	4b12      	ldr	r3, [pc, #72]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 8008518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851a:	4a11      	ldr	r2, [pc, #68]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 800851c:	f043 0310 	orr.w	r3, r3, #16
 8008520:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008522:	4b0f      	ldr	r3, [pc, #60]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a0e      	ldr	r2, [pc, #56]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 8008528:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800852c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800852e:	f7fb f8ef 	bl	8003710 <HAL_GetTick>
 8008532:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008534:	e008      	b.n	8008548 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008536:	f7fb f8eb 	bl	8003710 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b02      	cmp	r3, #2
 8008542:	d901      	bls.n	8008548 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e006      	b.n	8008556 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008548:	4b05      	ldr	r3, [pc, #20]	@ (8008560 <RCCEx_PLL2_Config+0x128>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0f0      	beq.n	8008536 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008554:	2300      	movs	r3, #0

}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	46020c00 	.word	0x46020c00
 8008564:	80800000 	.word	0x80800000

08008568 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008570:	4b47      	ldr	r3, [pc, #284]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a46      	ldr	r2, [pc, #280]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 8008576:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800857a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800857c:	f7fb f8c8 	bl	8003710 <HAL_GetTick>
 8008580:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008582:	e008      	b.n	8008596 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008584:	f7fb f8c4 	bl	8003710 <HAL_GetTick>
 8008588:	4602      	mov	r2, r0
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	2b02      	cmp	r3, #2
 8008590:	d901      	bls.n	8008596 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e077      	b.n	8008686 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008596:	4b3e      	ldr	r3, [pc, #248]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1f0      	bne.n	8008584 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80085a2:	4b3b      	ldr	r3, [pc, #236]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 80085a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80085aa:	f023 0303 	bic.w	r3, r3, #3
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	6811      	ldr	r1, [r2, #0]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	6852      	ldr	r2, [r2, #4]
 80085b6:	3a01      	subs	r2, #1
 80085b8:	0212      	lsls	r2, r2, #8
 80085ba:	430a      	orrs	r2, r1
 80085bc:	4934      	ldr	r1, [pc, #208]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	630b      	str	r3, [r1, #48]	@ 0x30
 80085c2:	4b33      	ldr	r3, [pc, #204]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 80085c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085c6:	4b33      	ldr	r3, [pc, #204]	@ (8008694 <RCCEx_PLL3_Config+0x12c>)
 80085c8:	4013      	ands	r3, r2
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	6892      	ldr	r2, [r2, #8]
 80085ce:	3a01      	subs	r2, #1
 80085d0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	68d2      	ldr	r2, [r2, #12]
 80085d8:	3a01      	subs	r2, #1
 80085da:	0252      	lsls	r2, r2, #9
 80085dc:	b292      	uxth	r2, r2
 80085de:	4311      	orrs	r1, r2
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	6912      	ldr	r2, [r2, #16]
 80085e4:	3a01      	subs	r2, #1
 80085e6:	0412      	lsls	r2, r2, #16
 80085e8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80085ec:	4311      	orrs	r1, r2
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	6952      	ldr	r2, [r2, #20]
 80085f2:	3a01      	subs	r2, #1
 80085f4:	0612      	lsls	r2, r2, #24
 80085f6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80085fa:	430a      	orrs	r2, r1
 80085fc:	4924      	ldr	r1, [pc, #144]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008602:	4b23      	ldr	r3, [pc, #140]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 8008604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008606:	f023 020c 	bic.w	r2, r3, #12
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	4920      	ldr	r1, [pc, #128]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 8008610:	4313      	orrs	r3, r2
 8008612:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008614:	4b1e      	ldr	r3, [pc, #120]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 8008616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	491c      	ldr	r1, [pc, #112]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 800861e:	4313      	orrs	r3, r2
 8008620:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008622:	4b1b      	ldr	r3, [pc, #108]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 8008624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008626:	4a1a      	ldr	r2, [pc, #104]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 8008628:	f023 0310 	bic.w	r3, r3, #16
 800862c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800862e:	4b18      	ldr	r3, [pc, #96]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 8008630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008632:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008636:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	69d2      	ldr	r2, [r2, #28]
 800863e:	00d2      	lsls	r2, r2, #3
 8008640:	4913      	ldr	r1, [pc, #76]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 8008642:	4313      	orrs	r3, r2
 8008644:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008646:	4b12      	ldr	r3, [pc, #72]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 8008648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800864a:	4a11      	ldr	r2, [pc, #68]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 800864c:	f043 0310 	orr.w	r3, r3, #16
 8008650:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008652:	4b0f      	ldr	r3, [pc, #60]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a0e      	ldr	r2, [pc, #56]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 8008658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800865c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800865e:	f7fb f857 	bl	8003710 <HAL_GetTick>
 8008662:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008664:	e008      	b.n	8008678 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008666:	f7fb f853 	bl	8003710 <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	2b02      	cmp	r3, #2
 8008672:	d901      	bls.n	8008678 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e006      	b.n	8008686 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008678:	4b05      	ldr	r3, [pc, #20]	@ (8008690 <RCCEx_PLL3_Config+0x128>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d0f0      	beq.n	8008666 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	46020c00 	.word	0x46020c00
 8008694:	80800000 	.word	0x80800000

08008698 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e0fb      	b.n	80088a2 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a7f      	ldr	r2, [pc, #508]	@ (80088ac <HAL_SPI_Init+0x214>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d004      	beq.n	80086be <HAL_SPI_Init+0x26>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a7d      	ldr	r2, [pc, #500]	@ (80088b0 <HAL_SPI_Init+0x218>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	e000      	b.n	80086c0 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80086be:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a78      	ldr	r2, [pc, #480]	@ (80088ac <HAL_SPI_Init+0x214>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d004      	beq.n	80086da <HAL_SPI_Init+0x42>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a76      	ldr	r2, [pc, #472]	@ (80088b0 <HAL_SPI_Init+0x218>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d105      	bne.n	80086e6 <HAL_SPI_Init+0x4e>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	2b0f      	cmp	r3, #15
 80086e0:	d901      	bls.n	80086e6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e0dd      	b.n	80088a2 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fd6c 	bl	80091c4 <SPI_GetPacketSize>
 80086ec:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a6e      	ldr	r2, [pc, #440]	@ (80088ac <HAL_SPI_Init+0x214>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d004      	beq.n	8008702 <HAL_SPI_Init+0x6a>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a6c      	ldr	r2, [pc, #432]	@ (80088b0 <HAL_SPI_Init+0x218>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d102      	bne.n	8008708 <HAL_SPI_Init+0x70>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2b08      	cmp	r3, #8
 8008706:	d816      	bhi.n	8008736 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800870c:	4a69      	ldr	r2, [pc, #420]	@ (80088b4 <HAL_SPI_Init+0x21c>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00e      	beq.n	8008730 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a68      	ldr	r2, [pc, #416]	@ (80088b8 <HAL_SPI_Init+0x220>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d009      	beq.n	8008730 <HAL_SPI_Init+0x98>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a66      	ldr	r2, [pc, #408]	@ (80088bc <HAL_SPI_Init+0x224>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d004      	beq.n	8008730 <HAL_SPI_Init+0x98>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a65      	ldr	r2, [pc, #404]	@ (80088c0 <HAL_SPI_Init+0x228>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d104      	bne.n	800873a <HAL_SPI_Init+0xa2>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b10      	cmp	r3, #16
 8008734:	d901      	bls.n	800873a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e0b3      	b.n	80088a2 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7fa fb2a 	bl	8002da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 0201 	bic.w	r2, r2, #1
 800876a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008776:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008780:	d119      	bne.n	80087b6 <HAL_SPI_Init+0x11e>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800878a:	d103      	bne.n	8008794 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008790:	2b00      	cmp	r3, #0
 8008792:	d008      	beq.n	80087a6 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10c      	bne.n	80087b6 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80087a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087a4:	d107      	bne.n	80087b6 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80087b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00f      	beq.n	80087e2 <HAL_SPI_Init+0x14a>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	2b06      	cmp	r3, #6
 80087c8:	d90b      	bls.n	80087e2 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	e007      	b.n	80087f2 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80087f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	69da      	ldr	r2, [r3, #28]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087fa:	431a      	orrs	r2, r3
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	431a      	orrs	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008804:	ea42 0103 	orr.w	r1, r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68da      	ldr	r2, [r3, #12]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	430a      	orrs	r2, r1
 8008812:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800881c:	431a      	orrs	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008822:	431a      	orrs	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	431a      	orrs	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	431a      	orrs	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	431a      	orrs	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	431a      	orrs	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	431a      	orrs	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008846:	431a      	orrs	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	431a      	orrs	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008852:	431a      	orrs	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008858:	431a      	orrs	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800885e:	ea42 0103 	orr.w	r1, r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00a      	beq.n	8008890 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	430a      	orrs	r2, r1
 800888e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	46002000 	.word	0x46002000
 80088b0:	56002000 	.word	0x56002000
 80088b4:	40013000 	.word	0x40013000
 80088b8:	50013000 	.word	0x50013000
 80088bc:	40003800 	.word	0x40003800
 80088c0:	50003800 	.word	0x50003800

080088c4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	4613      	mov	r3, r2
 80088d2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3320      	adds	r3, #32
 80088da:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088dc:	f7fa ff18 	bl	8003710 <HAL_GetTick>
 80088e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d001      	beq.n	80088f2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80088ee:	2302      	movs	r3, #2
 80088f0:	e1f3      	b.n	8008cda <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <HAL_SPI_Transmit+0x3a>
 80088f8:	88fb      	ldrh	r3, [r7, #6]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e1eb      	b.n	8008cda <HAL_SPI_Transmit+0x416>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008908:	2b01      	cmp	r3, #1
 800890a:	d101      	bne.n	8008910 <HAL_SPI_Transmit+0x4c>
 800890c:	2302      	movs	r3, #2
 800890e:	e1e4      	b.n	8008cda <HAL_SPI_Transmit+0x416>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2203      	movs	r2, #3
 800891c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	88fa      	ldrh	r2, [r7, #6]
 8008932:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	88fa      	ldrh	r2, [r7, #6]
 800893a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008968:	d108      	bne.n	800897c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	e009      	b.n	8008990 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800898e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	0c1b      	lsrs	r3, r3, #16
 8008998:	041b      	lsls	r3, r3, #16
 800899a:	88f9      	ldrh	r1, [r7, #6]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	6812      	ldr	r2, [r2, #0]
 80089a0:	430b      	orrs	r3, r1
 80089a2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f042 0201 	orr.w	r2, r2, #1
 80089b2:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10c      	bne.n	80089dc <HAL_SPI_Transmit+0x118>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089ca:	d107      	bne.n	80089dc <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	2b0f      	cmp	r3, #15
 80089e2:	d95b      	bls.n	8008a9c <HAL_SPI_Transmit+0x1d8>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a8f      	ldr	r2, [pc, #572]	@ (8008c28 <HAL_SPI_Transmit+0x364>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d04f      	beq.n	8008a8e <HAL_SPI_Transmit+0x1ca>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a8e      	ldr	r2, [pc, #568]	@ (8008c2c <HAL_SPI_Transmit+0x368>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d04a      	beq.n	8008a8e <HAL_SPI_Transmit+0x1ca>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a8c      	ldr	r2, [pc, #560]	@ (8008c30 <HAL_SPI_Transmit+0x36c>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d045      	beq.n	8008a8e <HAL_SPI_Transmit+0x1ca>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a8b      	ldr	r2, [pc, #556]	@ (8008c34 <HAL_SPI_Transmit+0x370>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d147      	bne.n	8008a9c <HAL_SPI_Transmit+0x1d8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008a0c:	e03f      	b.n	8008a8e <HAL_SPI_Transmit+0x1ca>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d114      	bne.n	8008a46 <HAL_SPI_Transmit+0x182>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6812      	ldr	r2, [r2, #0]
 8008a26:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a2c:	1d1a      	adds	r2, r3, #4
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008a44:	e023      	b.n	8008a8e <HAL_SPI_Transmit+0x1ca>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a46:	f7fa fe63 	bl	8003710 <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d803      	bhi.n	8008a5e <HAL_SPI_Transmit+0x19a>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5c:	d102      	bne.n	8008a64 <HAL_SPI_Transmit+0x1a0>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d114      	bne.n	8008a8e <HAL_SPI_Transmit+0x1ca>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 fadf 	bl	8009028 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e125      	b.n	8008cda <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1b9      	bne.n	8008a0e <HAL_SPI_Transmit+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008a9a:	e0f8      	b.n	8008c8e <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	2b07      	cmp	r3, #7
 8008aa2:	f240 80ed 	bls.w	8008c80 <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008aa6:	e05d      	b.n	8008b64 <HAL_SPI_Transmit+0x2a0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	f003 0302 	and.w	r3, r3, #2
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d132      	bne.n	8008b1c <HAL_SPI_Transmit+0x258>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d918      	bls.n	8008af4 <HAL_SPI_Transmit+0x230>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d014      	beq.n	8008af4 <HAL_SPI_Transmit+0x230>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6812      	ldr	r2, [r2, #0]
 8008ad4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ada:	1d1a      	adds	r2, r3, #4
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	3b02      	subs	r3, #2
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008af2:	e037      	b.n	8008b64 <HAL_SPI_Transmit+0x2a0>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008af8:	881a      	ldrh	r2, [r3, #0]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b02:	1c9a      	adds	r2, r3, #2
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	3b01      	subs	r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008b1a:	e023      	b.n	8008b64 <HAL_SPI_Transmit+0x2a0>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b1c:	f7fa fdf8 	bl	8003710 <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d803      	bhi.n	8008b34 <HAL_SPI_Transmit+0x270>
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b32:	d102      	bne.n	8008b3a <HAL_SPI_Transmit+0x276>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d114      	bne.n	8008b64 <HAL_SPI_Transmit+0x2a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f000 fa74 	bl	8009028 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b46:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e0ba      	b.n	8008cda <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d19b      	bne.n	8008aa8 <HAL_SPI_Transmit+0x1e4>
 8008b70:	e08d      	b.n	8008c8e <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	f003 0302 	and.w	r3, r3, #2
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d15b      	bne.n	8008c38 <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d918      	bls.n	8008bbe <HAL_SPI_Transmit+0x2fa>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b90:	2b40      	cmp	r3, #64	@ 0x40
 8008b92:	d914      	bls.n	8008bbe <HAL_SPI_Transmit+0x2fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6812      	ldr	r2, [r2, #0]
 8008b9e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ba4:	1d1a      	adds	r2, r3, #4
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	3b04      	subs	r3, #4
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008bbc:	e060      	b.n	8008c80 <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d917      	bls.n	8008bfa <HAL_SPI_Transmit+0x336>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d013      	beq.n	8008bfa <HAL_SPI_Transmit+0x336>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bd6:	881a      	ldrh	r2, [r3, #0]
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008be0:	1c9a      	adds	r2, r3, #2
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b02      	subs	r3, #2
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008bf8:	e042      	b.n	8008c80 <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3320      	adds	r3, #32
 8008c04:	7812      	ldrb	r2, [r2, #0]
 8008c06:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c0c:	1c5a      	adds	r2, r3, #1
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c24:	e02c      	b.n	8008c80 <HAL_SPI_Transmit+0x3bc>
 8008c26:	bf00      	nop
 8008c28:	40013000 	.word	0x40013000
 8008c2c:	50013000 	.word	0x50013000
 8008c30:	40003800 	.word	0x40003800
 8008c34:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c38:	f7fa fd6a 	bl	8003710 <HAL_GetTick>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d803      	bhi.n	8008c50 <HAL_SPI_Transmit+0x38c>
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4e:	d102      	bne.n	8008c56 <HAL_SPI_Transmit+0x392>
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d114      	bne.n	8008c80 <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 f9e6 	bl	8009028 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	e02c      	b.n	8008cda <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f47f af72 	bne.w	8008b72 <HAL_SPI_Transmit+0x2ae>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2200      	movs	r2, #0
 8008c96:	2108      	movs	r1, #8
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 fa65 	bl	8009168 <SPI_WaitOnFlagUntilTimeout>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d007      	beq.n	8008cb4 <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008caa:	f043 0220 	orr.w	r2, r3, #32
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 f9b7 	bl	8009028 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e000      	b.n	8008cda <HAL_SPI_Transmit+0x416>
  }
  else
  {
    return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
  }
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop

08008ce4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	603b      	str	r3, [r7, #0]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3330      	adds	r3, #48	@ 0x30
 8008cfa:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cfc:	f7fa fd08 	bl	8003710 <HAL_GetTick>
 8008d00:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d001      	beq.n	8008d12 <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 8008d0e:	2302      	movs	r3, #2
 8008d10:	e17e      	b.n	8009010 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <HAL_SPI_Receive+0x3a>
 8008d18:	88fb      	ldrh	r3, [r7, #6]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e176      	b.n	8009010 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d101      	bne.n	8008d30 <HAL_SPI_Receive+0x4c>
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	e16f      	b.n	8009010 <HAL_SPI_Receive+0x32c>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2204      	movs	r2, #4
 8008d3c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	88fa      	ldrh	r2, [r7, #6]
 8008d52:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	88fa      	ldrh	r2, [r7, #6]
 8008d5a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008d88:	d108      	bne.n	8008d9c <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	e009      	b.n	8008db0 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008dae:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	0c1b      	lsrs	r3, r3, #16
 8008db8:	041b      	lsls	r3, r3, #16
 8008dba:	88f9      	ldrh	r1, [r7, #6]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	6812      	ldr	r2, [r2, #0]
 8008dc0:	430b      	orrs	r3, r1
 8008dc2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 0201 	orr.w	r2, r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10c      	bne.n	8008dfc <HAL_SPI_Receive+0x118>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008dea:	d107      	bne.n	8008dfc <HAL_SPI_Receive+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dfa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	2b0f      	cmp	r3, #15
 8008e02:	d95c      	bls.n	8008ebe <HAL_SPI_Receive+0x1da>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a83      	ldr	r2, [pc, #524]	@ (8009018 <HAL_SPI_Receive+0x334>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d050      	beq.n	8008eb0 <HAL_SPI_Receive+0x1cc>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a82      	ldr	r2, [pc, #520]	@ (800901c <HAL_SPI_Receive+0x338>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d04b      	beq.n	8008eb0 <HAL_SPI_Receive+0x1cc>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a80      	ldr	r2, [pc, #512]	@ (8009020 <HAL_SPI_Receive+0x33c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d046      	beq.n	8008eb0 <HAL_SPI_Receive+0x1cc>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a7f      	ldr	r2, [pc, #508]	@ (8009024 <HAL_SPI_Receive+0x340>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d148      	bne.n	8008ebe <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008e2c:	e040      	b.n	8008eb0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	695a      	ldr	r2, [r3, #20]
 8008e34:	f248 0308 	movw	r3, #32776	@ 0x8008
 8008e38:	4013      	ands	r3, r2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d014      	beq.n	8008e68 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e46:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008e48:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e4e:	1d1a      	adds	r2, r3, #4
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008e66:	e023      	b.n	8008eb0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e68:	f7fa fc52 	bl	8003710 <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d803      	bhi.n	8008e80 <HAL_SPI_Receive+0x19c>
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7e:	d102      	bne.n	8008e86 <HAL_SPI_Receive+0x1a2>
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d114      	bne.n	8008eb0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 f8ce 	bl	8009028 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e0af      	b.n	8009010 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1b8      	bne.n	8008e2e <HAL_SPI_Receive+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008ebc:	e095      	b.n	8008fea <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	2b07      	cmp	r3, #7
 8008ec4:	f240 808b 	bls.w	8008fde <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008ec8:	e03f      	b.n	8008f4a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	f003 0301 	and.w	r3, r3, #1
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d114      	bne.n	8008f02 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	8812      	ldrh	r2, [r2, #0]
 8008ee0:	b292      	uxth	r2, r2
 8008ee2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ee8:	1c9a      	adds	r2, r3, #2
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008f00:	e023      	b.n	8008f4a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f02:	f7fa fc05 	bl	8003710 <HAL_GetTick>
 8008f06:	4602      	mov	r2, r0
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d803      	bhi.n	8008f1a <HAL_SPI_Receive+0x236>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f18:	d102      	bne.n	8008f20 <HAL_SPI_Receive+0x23c>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d114      	bne.n	8008f4a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 f881 	bl	8009028 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e062      	b.n	8009010 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1b9      	bne.n	8008eca <HAL_SPI_Receive+0x1e6>
 8008f56:	e048      	b.n	8008fea <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	f003 0301 	and.w	r3, r3, #1
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d117      	bne.n	8008f96 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f72:	7812      	ldrb	r2, [r2, #0]
 8008f74:	b2d2      	uxtb	r2, r2
 8008f76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008f94:	e023      	b.n	8008fde <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f96:	f7fa fbbb 	bl	8003710 <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d803      	bhi.n	8008fae <HAL_SPI_Receive+0x2ca>
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fac:	d102      	bne.n	8008fb4 <HAL_SPI_Receive+0x2d0>
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d114      	bne.n	8008fde <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 f837 	bl	8009028 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fc0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e018      	b.n	8009010 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1b6      	bne.n	8008f58 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f000 f81c 	bl	8009028 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e000      	b.n	8009010 <HAL_SPI_Receive+0x32c>
  }
  else
  {
    return HAL_OK;
 800900e:	2300      	movs	r3, #0
  }
}
 8009010:	4618      	mov	r0, r3
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	40013000 	.word	0x40013000
 800901c:	50013000 	.word	0x50013000
 8009020:	40003800 	.word	0x40003800
 8009024:	50003800 	.word	0x50003800

08009028 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	699a      	ldr	r2, [r3, #24]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f042 0208 	orr.w	r2, r2, #8
 8009046:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	699a      	ldr	r2, [r3, #24]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f042 0210 	orr.w	r2, r2, #16
 8009056:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f022 0201 	bic.w	r2, r2, #1
 8009066:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	6812      	ldr	r2, [r2, #0]
 8009072:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8009076:	f023 0303 	bic.w	r3, r3, #3
 800907a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800908a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b04      	cmp	r3, #4
 8009096:	d014      	beq.n	80090c2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00f      	beq.n	80090c2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	699a      	ldr	r2, [r3, #24]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f042 0220 	orr.w	r2, r2, #32
 80090c0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d014      	beq.n	80090f8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00f      	beq.n	80090f8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090de:	f043 0204 	orr.w	r2, r3, #4
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	699a      	ldr	r2, [r3, #24]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090f6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00f      	beq.n	8009122 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009108:	f043 0201 	orr.w	r2, r3, #1
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	699a      	ldr	r2, [r3, #24]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009120:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00f      	beq.n	800914c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009132:	f043 0208 	orr.w	r2, r3, #8
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	699a      	ldr	r2, [r3, #24]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800914a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800915c:	bf00      	nop
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	603b      	str	r3, [r7, #0]
 8009174:	4613      	mov	r3, r2
 8009176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009178:	e010      	b.n	800919c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800917a:	f7fa fac9 	bl	8003710 <HAL_GetTick>
 800917e:	4602      	mov	r2, r0
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d803      	bhi.n	8009192 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009190:	d102      	bne.n	8009198 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d101      	bne.n	800919c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	e00f      	b.n	80091bc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	695a      	ldr	r2, [r3, #20]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	4013      	ands	r3, r2
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	bf0c      	ite	eq
 80091ac:	2301      	moveq	r3, #1
 80091ae:	2300      	movne	r3, #0
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	461a      	mov	r2, r3
 80091b4:	79fb      	ldrb	r3, [r7, #7]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d0df      	beq.n	800917a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d0:	095b      	lsrs	r3, r3, #5
 80091d2:	3301      	adds	r3, #1
 80091d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	3301      	adds	r3, #1
 80091dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	3307      	adds	r3, #7
 80091e2:	08db      	lsrs	r3, r3, #3
 80091e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3714      	adds	r7, #20
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b083      	sub	sp, #12
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b01      	cmp	r3, #1
 800920e:	d12e      	bne.n	800926e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800921a:	2302      	movs	r3, #2
 800921c:	e028      	b.n	8009270 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2202      	movs	r2, #2
 800922a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 0201 	bic.w	r2, r2, #1
 800923c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800924a:	ea42 0103 	orr.w	r1, r2, r3
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	689a      	ldr	r2, [r3, #8]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	e000      	b.n	8009270 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
  }
}
 8009270:	4618      	mov	r0, r3
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d101      	bne.n	800928e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e049      	b.n	8009322 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	d106      	bne.n	80092a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7f9 fdea 	bl	8002e7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2202      	movs	r2, #2
 80092ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	3304      	adds	r3, #4
 80092b8:	4619      	mov	r1, r3
 80092ba:	4610      	mov	r0, r2
 80092bc:	f000 f938 	bl	8009530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
	...

0800932c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009340:	2b01      	cmp	r3, #1
 8009342:	d101      	bne.n	8009348 <HAL_TIM_ConfigClockSource+0x1c>
 8009344:	2302      	movs	r3, #2
 8009346:	e0e6      	b.n	8009516 <HAL_TIM_ConfigClockSource+0x1ea>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2202      	movs	r2, #2
 8009354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009366:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800936a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009372:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a67      	ldr	r2, [pc, #412]	@ (8009520 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009382:	4293      	cmp	r3, r2
 8009384:	f000 80b1 	beq.w	80094ea <HAL_TIM_ConfigClockSource+0x1be>
 8009388:	4a65      	ldr	r2, [pc, #404]	@ (8009520 <HAL_TIM_ConfigClockSource+0x1f4>)
 800938a:	4293      	cmp	r3, r2
 800938c:	f200 80b6 	bhi.w	80094fc <HAL_TIM_ConfigClockSource+0x1d0>
 8009390:	4a64      	ldr	r2, [pc, #400]	@ (8009524 <HAL_TIM_ConfigClockSource+0x1f8>)
 8009392:	4293      	cmp	r3, r2
 8009394:	f000 80a9 	beq.w	80094ea <HAL_TIM_ConfigClockSource+0x1be>
 8009398:	4a62      	ldr	r2, [pc, #392]	@ (8009524 <HAL_TIM_ConfigClockSource+0x1f8>)
 800939a:	4293      	cmp	r3, r2
 800939c:	f200 80ae 	bhi.w	80094fc <HAL_TIM_ConfigClockSource+0x1d0>
 80093a0:	4a61      	ldr	r2, [pc, #388]	@ (8009528 <HAL_TIM_ConfigClockSource+0x1fc>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	f000 80a1 	beq.w	80094ea <HAL_TIM_ConfigClockSource+0x1be>
 80093a8:	4a5f      	ldr	r2, [pc, #380]	@ (8009528 <HAL_TIM_ConfigClockSource+0x1fc>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	f200 80a6 	bhi.w	80094fc <HAL_TIM_ConfigClockSource+0x1d0>
 80093b0:	4a5e      	ldr	r2, [pc, #376]	@ (800952c <HAL_TIM_ConfigClockSource+0x200>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	f000 8099 	beq.w	80094ea <HAL_TIM_ConfigClockSource+0x1be>
 80093b8:	4a5c      	ldr	r2, [pc, #368]	@ (800952c <HAL_TIM_ConfigClockSource+0x200>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	f200 809e 	bhi.w	80094fc <HAL_TIM_ConfigClockSource+0x1d0>
 80093c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80093c4:	f000 8091 	beq.w	80094ea <HAL_TIM_ConfigClockSource+0x1be>
 80093c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80093cc:	f200 8096 	bhi.w	80094fc <HAL_TIM_ConfigClockSource+0x1d0>
 80093d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093d4:	f000 8089 	beq.w	80094ea <HAL_TIM_ConfigClockSource+0x1be>
 80093d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093dc:	f200 808e 	bhi.w	80094fc <HAL_TIM_ConfigClockSource+0x1d0>
 80093e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093e4:	d03e      	beq.n	8009464 <HAL_TIM_ConfigClockSource+0x138>
 80093e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093ea:	f200 8087 	bhi.w	80094fc <HAL_TIM_ConfigClockSource+0x1d0>
 80093ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093f2:	f000 8086 	beq.w	8009502 <HAL_TIM_ConfigClockSource+0x1d6>
 80093f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093fa:	d87f      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x1d0>
 80093fc:	2b70      	cmp	r3, #112	@ 0x70
 80093fe:	d01a      	beq.n	8009436 <HAL_TIM_ConfigClockSource+0x10a>
 8009400:	2b70      	cmp	r3, #112	@ 0x70
 8009402:	d87b      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x1d0>
 8009404:	2b60      	cmp	r3, #96	@ 0x60
 8009406:	d050      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0x17e>
 8009408:	2b60      	cmp	r3, #96	@ 0x60
 800940a:	d877      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x1d0>
 800940c:	2b50      	cmp	r3, #80	@ 0x50
 800940e:	d03c      	beq.n	800948a <HAL_TIM_ConfigClockSource+0x15e>
 8009410:	2b50      	cmp	r3, #80	@ 0x50
 8009412:	d873      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x1d0>
 8009414:	2b40      	cmp	r3, #64	@ 0x40
 8009416:	d058      	beq.n	80094ca <HAL_TIM_ConfigClockSource+0x19e>
 8009418:	2b40      	cmp	r3, #64	@ 0x40
 800941a:	d86f      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x1d0>
 800941c:	2b30      	cmp	r3, #48	@ 0x30
 800941e:	d064      	beq.n	80094ea <HAL_TIM_ConfigClockSource+0x1be>
 8009420:	2b30      	cmp	r3, #48	@ 0x30
 8009422:	d86b      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x1d0>
 8009424:	2b20      	cmp	r3, #32
 8009426:	d060      	beq.n	80094ea <HAL_TIM_ConfigClockSource+0x1be>
 8009428:	2b20      	cmp	r3, #32
 800942a:	d867      	bhi.n	80094fc <HAL_TIM_ConfigClockSource+0x1d0>
 800942c:	2b00      	cmp	r3, #0
 800942e:	d05c      	beq.n	80094ea <HAL_TIM_ConfigClockSource+0x1be>
 8009430:	2b10      	cmp	r3, #16
 8009432:	d05a      	beq.n	80094ea <HAL_TIM_ConfigClockSource+0x1be>
 8009434:	e062      	b.n	80094fc <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009446:	f000 f9f5 	bl	8009834 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009458:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	609a      	str	r2, [r3, #8]
      break;
 8009462:	e04f      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009474:	f000 f9de 	bl	8009834 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	689a      	ldr	r2, [r3, #8]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009486:	609a      	str	r2, [r3, #8]
      break;
 8009488:	e03c      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009496:	461a      	mov	r2, r3
 8009498:	f000 f950 	bl	800973c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2150      	movs	r1, #80	@ 0x50
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 f9a9 	bl	80097fa <TIM_ITRx_SetConfig>
      break;
 80094a8:	e02c      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094b6:	461a      	mov	r2, r3
 80094b8:	f000 f96f 	bl	800979a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2160      	movs	r1, #96	@ 0x60
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 f999 	bl	80097fa <TIM_ITRx_SetConfig>
      break;
 80094c8:	e01c      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094d6:	461a      	mov	r2, r3
 80094d8:	f000 f930 	bl	800973c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2140      	movs	r1, #64	@ 0x40
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 f989 	bl	80097fa <TIM_ITRx_SetConfig>
      break;
 80094e8:	e00c      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4619      	mov	r1, r3
 80094f4:	4610      	mov	r0, r2
 80094f6:	f000 f980 	bl	80097fa <TIM_ITRx_SetConfig>
      break;
 80094fa:	e003      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009500:	e000      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8009502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009514:	7bfb      	ldrb	r3, [r7, #15]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	00100070 	.word	0x00100070
 8009524:	00100040 	.word	0x00100040
 8009528:	00100030 	.word	0x00100030
 800952c:	00100020 	.word	0x00100020

08009530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a6e      	ldr	r2, [pc, #440]	@ (80096fc <TIM_Base_SetConfig+0x1cc>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d02b      	beq.n	80095a0 <TIM_Base_SetConfig+0x70>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a6d      	ldr	r2, [pc, #436]	@ (8009700 <TIM_Base_SetConfig+0x1d0>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d027      	beq.n	80095a0 <TIM_Base_SetConfig+0x70>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009556:	d023      	beq.n	80095a0 <TIM_Base_SetConfig+0x70>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800955e:	d01f      	beq.n	80095a0 <TIM_Base_SetConfig+0x70>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a68      	ldr	r2, [pc, #416]	@ (8009704 <TIM_Base_SetConfig+0x1d4>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d01b      	beq.n	80095a0 <TIM_Base_SetConfig+0x70>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a67      	ldr	r2, [pc, #412]	@ (8009708 <TIM_Base_SetConfig+0x1d8>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d017      	beq.n	80095a0 <TIM_Base_SetConfig+0x70>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a66      	ldr	r2, [pc, #408]	@ (800970c <TIM_Base_SetConfig+0x1dc>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d013      	beq.n	80095a0 <TIM_Base_SetConfig+0x70>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a65      	ldr	r2, [pc, #404]	@ (8009710 <TIM_Base_SetConfig+0x1e0>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d00f      	beq.n	80095a0 <TIM_Base_SetConfig+0x70>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a64      	ldr	r2, [pc, #400]	@ (8009714 <TIM_Base_SetConfig+0x1e4>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d00b      	beq.n	80095a0 <TIM_Base_SetConfig+0x70>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a63      	ldr	r2, [pc, #396]	@ (8009718 <TIM_Base_SetConfig+0x1e8>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d007      	beq.n	80095a0 <TIM_Base_SetConfig+0x70>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a62      	ldr	r2, [pc, #392]	@ (800971c <TIM_Base_SetConfig+0x1ec>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d003      	beq.n	80095a0 <TIM_Base_SetConfig+0x70>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a61      	ldr	r2, [pc, #388]	@ (8009720 <TIM_Base_SetConfig+0x1f0>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d108      	bne.n	80095b2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a51      	ldr	r2, [pc, #324]	@ (80096fc <TIM_Base_SetConfig+0x1cc>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d043      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a50      	ldr	r2, [pc, #320]	@ (8009700 <TIM_Base_SetConfig+0x1d0>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d03f      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095c8:	d03b      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095d0:	d037      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a4b      	ldr	r2, [pc, #300]	@ (8009704 <TIM_Base_SetConfig+0x1d4>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d033      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a4a      	ldr	r2, [pc, #296]	@ (8009708 <TIM_Base_SetConfig+0x1d8>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d02f      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a49      	ldr	r2, [pc, #292]	@ (800970c <TIM_Base_SetConfig+0x1dc>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d02b      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a48      	ldr	r2, [pc, #288]	@ (8009710 <TIM_Base_SetConfig+0x1e0>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d027      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a47      	ldr	r2, [pc, #284]	@ (8009714 <TIM_Base_SetConfig+0x1e4>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d023      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a46      	ldr	r2, [pc, #280]	@ (8009718 <TIM_Base_SetConfig+0x1e8>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d01f      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a45      	ldr	r2, [pc, #276]	@ (800971c <TIM_Base_SetConfig+0x1ec>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d01b      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a44      	ldr	r2, [pc, #272]	@ (8009720 <TIM_Base_SetConfig+0x1f0>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d017      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a43      	ldr	r2, [pc, #268]	@ (8009724 <TIM_Base_SetConfig+0x1f4>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d013      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a42      	ldr	r2, [pc, #264]	@ (8009728 <TIM_Base_SetConfig+0x1f8>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d00f      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a41      	ldr	r2, [pc, #260]	@ (800972c <TIM_Base_SetConfig+0x1fc>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d00b      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a40      	ldr	r2, [pc, #256]	@ (8009730 <TIM_Base_SetConfig+0x200>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d007      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a3f      	ldr	r2, [pc, #252]	@ (8009734 <TIM_Base_SetConfig+0x204>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d003      	beq.n	8009642 <TIM_Base_SetConfig+0x112>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a3e      	ldr	r2, [pc, #248]	@ (8009738 <TIM_Base_SetConfig+0x208>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d108      	bne.n	8009654 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	4313      	orrs	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	695b      	ldr	r3, [r3, #20]
 800965e:	4313      	orrs	r3, r2
 8009660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	689a      	ldr	r2, [r3, #8]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a20      	ldr	r2, [pc, #128]	@ (80096fc <TIM_Base_SetConfig+0x1cc>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d023      	beq.n	80096c8 <TIM_Base_SetConfig+0x198>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a1f      	ldr	r2, [pc, #124]	@ (8009700 <TIM_Base_SetConfig+0x1d0>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d01f      	beq.n	80096c8 <TIM_Base_SetConfig+0x198>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a24      	ldr	r2, [pc, #144]	@ (800971c <TIM_Base_SetConfig+0x1ec>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d01b      	beq.n	80096c8 <TIM_Base_SetConfig+0x198>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a23      	ldr	r2, [pc, #140]	@ (8009720 <TIM_Base_SetConfig+0x1f0>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d017      	beq.n	80096c8 <TIM_Base_SetConfig+0x198>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a22      	ldr	r2, [pc, #136]	@ (8009724 <TIM_Base_SetConfig+0x1f4>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d013      	beq.n	80096c8 <TIM_Base_SetConfig+0x198>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a21      	ldr	r2, [pc, #132]	@ (8009728 <TIM_Base_SetConfig+0x1f8>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d00f      	beq.n	80096c8 <TIM_Base_SetConfig+0x198>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a20      	ldr	r2, [pc, #128]	@ (800972c <TIM_Base_SetConfig+0x1fc>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d00b      	beq.n	80096c8 <TIM_Base_SetConfig+0x198>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a1f      	ldr	r2, [pc, #124]	@ (8009730 <TIM_Base_SetConfig+0x200>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d007      	beq.n	80096c8 <TIM_Base_SetConfig+0x198>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009734 <TIM_Base_SetConfig+0x204>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d003      	beq.n	80096c8 <TIM_Base_SetConfig+0x198>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a1d      	ldr	r2, [pc, #116]	@ (8009738 <TIM_Base_SetConfig+0x208>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d103      	bne.n	80096d0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	691a      	ldr	r2, [r3, #16]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d105      	bne.n	80096ee <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	f023 0201 	bic.w	r2, r3, #1
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	611a      	str	r2, [r3, #16]
  }
}
 80096ee:	bf00      	nop
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	40012c00 	.word	0x40012c00
 8009700:	50012c00 	.word	0x50012c00
 8009704:	40000400 	.word	0x40000400
 8009708:	50000400 	.word	0x50000400
 800970c:	40000800 	.word	0x40000800
 8009710:	50000800 	.word	0x50000800
 8009714:	40000c00 	.word	0x40000c00
 8009718:	50000c00 	.word	0x50000c00
 800971c:	40013400 	.word	0x40013400
 8009720:	50013400 	.word	0x50013400
 8009724:	40014000 	.word	0x40014000
 8009728:	50014000 	.word	0x50014000
 800972c:	40014400 	.word	0x40014400
 8009730:	50014400 	.word	0x50014400
 8009734:	40014800 	.word	0x40014800
 8009738:	50014800 	.word	0x50014800

0800973c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	f023 0201 	bic.w	r2, r3, #1
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	011b      	lsls	r3, r3, #4
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	4313      	orrs	r3, r2
 8009770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f023 030a 	bic.w	r3, r3, #10
 8009778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800977a:	697a      	ldr	r2, [r7, #20]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	4313      	orrs	r3, r2
 8009780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	621a      	str	r2, [r3, #32]
}
 800978e:	bf00      	nop
 8009790:	371c      	adds	r7, #28
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800979a:	b480      	push	{r7}
 800979c:	b087      	sub	sp, #28
 800979e:	af00      	add	r7, sp, #0
 80097a0:	60f8      	str	r0, [r7, #12]
 80097a2:	60b9      	str	r1, [r7, #8]
 80097a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6a1b      	ldr	r3, [r3, #32]
 80097b0:	f023 0210 	bic.w	r2, r3, #16
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80097c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	031b      	lsls	r3, r3, #12
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80097d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	011b      	lsls	r3, r3, #4
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	4313      	orrs	r3, r2
 80097e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	621a      	str	r2, [r3, #32]
}
 80097ee:	bf00      	nop
 80097f0:	371c      	adds	r7, #28
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b085      	sub	sp, #20
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4313      	orrs	r3, r2
 800981c:	f043 0307 	orr.w	r3, r3, #7
 8009820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	609a      	str	r2, [r3, #8]
}
 8009828:	bf00      	nop
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800984e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	021a      	lsls	r2, r3, #8
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	431a      	orrs	r2, r3
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	4313      	orrs	r3, r2
 800985c:	697a      	ldr	r2, [r7, #20]
 800985e:	4313      	orrs	r3, r2
 8009860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	609a      	str	r2, [r3, #8]
}
 8009868:	bf00      	nop
 800986a:	371c      	adds	r7, #28
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009884:	2b01      	cmp	r3, #1
 8009886:	d101      	bne.n	800988c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009888:	2302      	movs	r3, #2
 800988a:	e097      	b.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2202      	movs	r2, #2
 8009898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a45      	ldr	r2, [pc, #276]	@ (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d00e      	beq.n	80098d4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a44      	ldr	r2, [pc, #272]	@ (80099cc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d009      	beq.n	80098d4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a42      	ldr	r2, [pc, #264]	@ (80099d0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d004      	beq.n	80098d4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a41      	ldr	r2, [pc, #260]	@ (80099d4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d108      	bne.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80098da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80098ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a2f      	ldr	r2, [pc, #188]	@ (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d040      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a2e      	ldr	r2, [pc, #184]	@ (80099cc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d03b      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009920:	d036      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800992a:	d031      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a29      	ldr	r2, [pc, #164]	@ (80099d8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d02c      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a28      	ldr	r2, [pc, #160]	@ (80099dc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d027      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a26      	ldr	r2, [pc, #152]	@ (80099e0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d022      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a25      	ldr	r2, [pc, #148]	@ (80099e4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d01d      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a23      	ldr	r2, [pc, #140]	@ (80099e8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d018      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a22      	ldr	r2, [pc, #136]	@ (80099ec <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d013      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a18      	ldr	r2, [pc, #96]	@ (80099d0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d00e      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a17      	ldr	r2, [pc, #92]	@ (80099d4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d009      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a1b      	ldr	r2, [pc, #108]	@ (80099f0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d004      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a1a      	ldr	r2, [pc, #104]	@ (80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d10c      	bne.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009996:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	4313      	orrs	r3, r2
 80099a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3714      	adds	r7, #20
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	40012c00 	.word	0x40012c00
 80099cc:	50012c00 	.word	0x50012c00
 80099d0:	40013400 	.word	0x40013400
 80099d4:	50013400 	.word	0x50013400
 80099d8:	40000400 	.word	0x40000400
 80099dc:	50000400 	.word	0x50000400
 80099e0:	40000800 	.word	0x40000800
 80099e4:	50000800 	.word	0x50000800
 80099e8:	40000c00 	.word	0x40000c00
 80099ec:	50000c00 	.word	0x50000c00
 80099f0:	40014000 	.word	0x40014000
 80099f4:	50014000 	.word	0x50014000

080099f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e042      	b.n	8009a90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d106      	bne.n	8009a22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f83b 	bl	8009a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2224      	movs	r2, #36	@ 0x24
 8009a26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f022 0201 	bic.w	r2, r2, #1
 8009a38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d002      	beq.n	8009a48 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fa6e 	bl	8009f24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f8bd 	bl	8009bc8 <UART_SetConfig>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d101      	bne.n	8009a58 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e01b      	b.n	8009a90 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	685a      	ldr	r2, [r3, #4]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	689a      	ldr	r2, [r3, #8]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f042 0201 	orr.w	r2, r2, #1
 8009a86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 faed 	bl	800a068 <UART_CheckIdleState>
 8009a8e:	4603      	mov	r3, r0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b08a      	sub	sp, #40	@ 0x28
 8009ab0:	af02      	add	r7, sp, #8
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	603b      	str	r3, [r7, #0]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ac2:	2b20      	cmp	r3, #32
 8009ac4:	d17b      	bne.n	8009bbe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d002      	beq.n	8009ad2 <HAL_UART_Transmit+0x26>
 8009acc:	88fb      	ldrh	r3, [r7, #6]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e074      	b.n	8009bc0 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2221      	movs	r2, #33	@ 0x21
 8009ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ae6:	f7f9 fe13 	bl	8003710 <HAL_GetTick>
 8009aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	88fa      	ldrh	r2, [r7, #6]
 8009af0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	88fa      	ldrh	r2, [r7, #6]
 8009af8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b04:	d108      	bne.n	8009b18 <HAL_UART_Transmit+0x6c>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d104      	bne.n	8009b18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	61bb      	str	r3, [r7, #24]
 8009b16:	e003      	b.n	8009b20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b20:	e030      	b.n	8009b84 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	2180      	movs	r1, #128	@ 0x80
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f000 fb45 	bl	800a1bc <UART_WaitOnFlagUntilTimeout>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d005      	beq.n	8009b44 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2220      	movs	r2, #32
 8009b3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e03d      	b.n	8009bc0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d10b      	bne.n	8009b62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b58:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	3302      	adds	r3, #2
 8009b5e:	61bb      	str	r3, [r7, #24]
 8009b60:	e007      	b.n	8009b72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	781a      	ldrb	r2, [r3, #0]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1c8      	bne.n	8009b22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2200      	movs	r2, #0
 8009b98:	2140      	movs	r1, #64	@ 0x40
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 fb0e 	bl	800a1bc <UART_WaitOnFlagUntilTimeout>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d005      	beq.n	8009bb2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2220      	movs	r2, #32
 8009baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e006      	b.n	8009bc0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	e000      	b.n	8009bc0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009bbe:	2302      	movs	r3, #2
  }
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3720      	adds	r7, #32
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bcc:	b094      	sub	sp, #80	@ 0x50
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	4b83      	ldr	r3, [pc, #524]	@ (8009dec <UART_SetConfig+0x224>)
 8009bde:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be2:	689a      	ldr	r2, [r3, #8]
 8009be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	431a      	orrs	r2, r3
 8009bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf2:	69db      	ldr	r3, [r3, #28]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	497c      	ldr	r1, [pc, #496]	@ (8009df0 <UART_SetConfig+0x228>)
 8009c00:	4019      	ands	r1, r3
 8009c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c08:	430b      	orrs	r3, r1
 8009c0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c18:	68d9      	ldr	r1, [r3, #12]
 8009c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	ea40 0301 	orr.w	r3, r0, r1
 8009c22:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	4b6f      	ldr	r3, [pc, #444]	@ (8009dec <UART_SetConfig+0x224>)
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d009      	beq.n	8009c48 <UART_SetConfig+0x80>
 8009c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	4b6e      	ldr	r3, [pc, #440]	@ (8009df4 <UART_SetConfig+0x22c>)
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d004      	beq.n	8009c48 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c40:	6a1a      	ldr	r2, [r3, #32]
 8009c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c44:	4313      	orrs	r3, r2
 8009c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009c52:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c5c:	430b      	orrs	r3, r1
 8009c5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c66:	f023 000f 	bic.w	r0, r3, #15
 8009c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c6c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	ea40 0301 	orr.w	r3, r0, r1
 8009c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8009df8 <UART_SetConfig+0x230>)
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d102      	bne.n	8009c88 <UART_SetConfig+0xc0>
 8009c82:	2301      	movs	r3, #1
 8009c84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c86:	e032      	b.n	8009cee <UART_SetConfig+0x126>
 8009c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8009dfc <UART_SetConfig+0x234>)
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d102      	bne.n	8009c98 <UART_SetConfig+0xd0>
 8009c92:	2302      	movs	r3, #2
 8009c94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c96:	e02a      	b.n	8009cee <UART_SetConfig+0x126>
 8009c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	4b58      	ldr	r3, [pc, #352]	@ (8009e00 <UART_SetConfig+0x238>)
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d102      	bne.n	8009ca8 <UART_SetConfig+0xe0>
 8009ca2:	2304      	movs	r3, #4
 8009ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ca6:	e022      	b.n	8009cee <UART_SetConfig+0x126>
 8009ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	4b55      	ldr	r3, [pc, #340]	@ (8009e04 <UART_SetConfig+0x23c>)
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d102      	bne.n	8009cb8 <UART_SetConfig+0xf0>
 8009cb2:	2308      	movs	r3, #8
 8009cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cb6:	e01a      	b.n	8009cee <UART_SetConfig+0x126>
 8009cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	4b52      	ldr	r3, [pc, #328]	@ (8009e08 <UART_SetConfig+0x240>)
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d102      	bne.n	8009cc8 <UART_SetConfig+0x100>
 8009cc2:	2310      	movs	r3, #16
 8009cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cc6:	e012      	b.n	8009cee <UART_SetConfig+0x126>
 8009cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	4b4f      	ldr	r3, [pc, #316]	@ (8009e0c <UART_SetConfig+0x244>)
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d103      	bne.n	8009cda <UART_SetConfig+0x112>
 8009cd2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8009cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cd8:	e009      	b.n	8009cee <UART_SetConfig+0x126>
 8009cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	4b43      	ldr	r3, [pc, #268]	@ (8009dec <UART_SetConfig+0x224>)
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d102      	bne.n	8009cea <UART_SetConfig+0x122>
 8009ce4:	2320      	movs	r3, #32
 8009ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ce8:	e001      	b.n	8009cee <UART_SetConfig+0x126>
 8009cea:	2300      	movs	r3, #0
 8009cec:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8009dec <UART_SetConfig+0x224>)
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d005      	beq.n	8009d04 <UART_SetConfig+0x13c>
 8009cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	4b3d      	ldr	r3, [pc, #244]	@ (8009df4 <UART_SetConfig+0x22c>)
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	f040 8088 	bne.w	8009e14 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d06:	2200      	movs	r2, #0
 8009d08:	623b      	str	r3, [r7, #32]
 8009d0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8009d0c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009d10:	f7fd f830 	bl	8006d74 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d14:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 80eb 	beq.w	8009ef4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d22:	4a3b      	ldr	r2, [pc, #236]	@ (8009e10 <UART_SetConfig+0x248>)
 8009d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d30:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	4613      	mov	r3, r2
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	4413      	add	r3, r2
 8009d3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d305      	bcc.n	8009d4e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d903      	bls.n	8009d56 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009d54:	e048      	b.n	8009de8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d58:	2200      	movs	r2, #0
 8009d5a:	61bb      	str	r3, [r7, #24]
 8009d5c:	61fa      	str	r2, [r7, #28]
 8009d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d62:	4a2b      	ldr	r2, [pc, #172]	@ (8009e10 <UART_SetConfig+0x248>)
 8009d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	613b      	str	r3, [r7, #16]
 8009d6e:	617a      	str	r2, [r7, #20]
 8009d70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009d74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009d78:	f7f6 ff96 	bl	8000ca8 <__aeabi_uldivmod>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4610      	mov	r0, r2
 8009d82:	4619      	mov	r1, r3
 8009d84:	f04f 0200 	mov.w	r2, #0
 8009d88:	f04f 0300 	mov.w	r3, #0
 8009d8c:	020b      	lsls	r3, r1, #8
 8009d8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d92:	0202      	lsls	r2, r0, #8
 8009d94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d96:	6849      	ldr	r1, [r1, #4]
 8009d98:	0849      	lsrs	r1, r1, #1
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	4605      	mov	r5, r0
 8009da0:	eb12 0804 	adds.w	r8, r2, r4
 8009da4:	eb43 0905 	adc.w	r9, r3, r5
 8009da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	60bb      	str	r3, [r7, #8]
 8009db0:	60fa      	str	r2, [r7, #12]
 8009db2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009db6:	4640      	mov	r0, r8
 8009db8:	4649      	mov	r1, r9
 8009dba:	f7f6 ff75 	bl	8000ca8 <__aeabi_uldivmod>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009dcc:	d308      	bcc.n	8009de0 <UART_SetConfig+0x218>
 8009dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dd4:	d204      	bcs.n	8009de0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8009dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009ddc:	60da      	str	r2, [r3, #12]
 8009dde:	e003      	b.n	8009de8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009de6:	e085      	b.n	8009ef4 <UART_SetConfig+0x32c>
 8009de8:	e084      	b.n	8009ef4 <UART_SetConfig+0x32c>
 8009dea:	bf00      	nop
 8009dec:	46002400 	.word	0x46002400
 8009df0:	cfff69f3 	.word	0xcfff69f3
 8009df4:	56002400 	.word	0x56002400
 8009df8:	40013800 	.word	0x40013800
 8009dfc:	40004400 	.word	0x40004400
 8009e00:	40004800 	.word	0x40004800
 8009e04:	40004c00 	.word	0x40004c00
 8009e08:	40005000 	.word	0x40005000
 8009e0c:	40006400 	.word	0x40006400
 8009e10:	0800ed00 	.word	0x0800ed00
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e16:	69db      	ldr	r3, [r3, #28]
 8009e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e1c:	d13c      	bne.n	8009e98 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e20:	2200      	movs	r2, #0
 8009e22:	603b      	str	r3, [r7, #0]
 8009e24:	607a      	str	r2, [r7, #4]
 8009e26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e2a:	f7fc ffa3 	bl	8006d74 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e2e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d05e      	beq.n	8009ef4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e3a:	4a39      	ldr	r2, [pc, #228]	@ (8009f20 <UART_SetConfig+0x358>)
 8009e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e40:	461a      	mov	r2, r3
 8009e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e48:	005a      	lsls	r2, r3, #1
 8009e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	085b      	lsrs	r3, r3, #1
 8009e50:	441a      	add	r2, r3
 8009e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e5e:	2b0f      	cmp	r3, #15
 8009e60:	d916      	bls.n	8009e90 <UART_SetConfig+0x2c8>
 8009e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e68:	d212      	bcs.n	8009e90 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	f023 030f 	bic.w	r3, r3, #15
 8009e72:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e76:	085b      	lsrs	r3, r3, #1
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009e82:	4313      	orrs	r3, r2
 8009e84:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009e8c:	60da      	str	r2, [r3, #12]
 8009e8e:	e031      	b.n	8009ef4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009e96:	e02d      	b.n	8009ef4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	469a      	mov	sl, r3
 8009e9e:	4693      	mov	fp, r2
 8009ea0:	4650      	mov	r0, sl
 8009ea2:	4659      	mov	r1, fp
 8009ea4:	f7fc ff66 	bl	8006d74 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ea8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d021      	beq.n	8009ef4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8009f20 <UART_SetConfig+0x358>)
 8009eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ebe:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	085b      	lsrs	r3, r3, #1
 8009ec8:	441a      	add	r2, r3
 8009eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ed6:	2b0f      	cmp	r3, #15
 8009ed8:	d909      	bls.n	8009eee <UART_SetConfig+0x326>
 8009eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ee0:	d205      	bcs.n	8009eee <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	60da      	str	r2, [r3, #12]
 8009eec:	e002      	b.n	8009ef4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009efe:	2201      	movs	r2, #1
 8009f00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f06:	2200      	movs	r2, #0
 8009f08:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f10:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3750      	adds	r7, #80	@ 0x50
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f1e:	bf00      	nop
 8009f20:	0800ed00 	.word	0x0800ed00

08009f24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f30:	f003 0308 	and.w	r3, r3, #8
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00a      	beq.n	8009f4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f52:	f003 0301 	and.w	r3, r3, #1
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00a      	beq.n	8009f70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	430a      	orrs	r2, r1
 8009f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00a      	beq.n	8009f92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	430a      	orrs	r2, r1
 8009f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f96:	f003 0304 	and.w	r3, r3, #4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00a      	beq.n	8009fb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb8:	f003 0310 	and.w	r3, r3, #16
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00a      	beq.n	8009fd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fda:	f003 0320 	and.w	r3, r3, #32
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00a      	beq.n	8009ff8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	430a      	orrs	r2, r1
 8009ff6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a000:	2b00      	cmp	r3, #0
 800a002:	d01a      	beq.n	800a03a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	430a      	orrs	r2, r1
 800a018:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a01e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a022:	d10a      	bne.n	800a03a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	430a      	orrs	r2, r1
 800a038:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00a      	beq.n	800a05c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	430a      	orrs	r2, r1
 800a05a:	605a      	str	r2, [r3, #4]
  }
}
 800a05c:	bf00      	nop
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b098      	sub	sp, #96	@ 0x60
 800a06c:	af02      	add	r7, sp, #8
 800a06e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a078:	f7f9 fb4a 	bl	8003710 <HAL_GetTick>
 800a07c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0308 	and.w	r3, r3, #8
 800a088:	2b08      	cmp	r3, #8
 800a08a:	d12f      	bne.n	800a0ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a08c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a094:	2200      	movs	r2, #0
 800a096:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f88e 	bl	800a1bc <UART_WaitOnFlagUntilTimeout>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d022      	beq.n	800a0ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ae:	e853 3f00 	ldrex	r3, [r3]
 800a0b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0cc:	e841 2300 	strex	r3, r2, [r1]
 800a0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1e6      	bne.n	800a0a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2220      	movs	r2, #32
 800a0dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e063      	b.n	800a1b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f003 0304 	and.w	r3, r3, #4
 800a0f6:	2b04      	cmp	r3, #4
 800a0f8:	d149      	bne.n	800a18e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a102:	2200      	movs	r2, #0
 800a104:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f857 	bl	800a1bc <UART_WaitOnFlagUntilTimeout>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d03c      	beq.n	800a18e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11c:	e853 3f00 	ldrex	r3, [r3]
 800a120:	623b      	str	r3, [r7, #32]
   return(result);
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a128:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a132:	633b      	str	r3, [r7, #48]	@ 0x30
 800a134:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a136:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a13a:	e841 2300 	strex	r3, r2, [r1]
 800a13e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1e6      	bne.n	800a114 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3308      	adds	r3, #8
 800a14c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	e853 3f00 	ldrex	r3, [r3]
 800a154:	60fb      	str	r3, [r7, #12]
   return(result);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f023 0301 	bic.w	r3, r3, #1
 800a15c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3308      	adds	r3, #8
 800a164:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a166:	61fa      	str	r2, [r7, #28]
 800a168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16a:	69b9      	ldr	r1, [r7, #24]
 800a16c:	69fa      	ldr	r2, [r7, #28]
 800a16e:	e841 2300 	strex	r3, r2, [r1]
 800a172:	617b      	str	r3, [r7, #20]
   return(result);
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1e5      	bne.n	800a146 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2220      	movs	r2, #32
 800a17e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e012      	b.n	800a1b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2220      	movs	r2, #32
 800a192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2220      	movs	r2, #32
 800a19a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3758      	adds	r7, #88	@ 0x58
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	603b      	str	r3, [r7, #0]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1cc:	e04f      	b.n	800a26e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d4:	d04b      	beq.n	800a26e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1d6:	f7f9 fa9b 	bl	8003710 <HAL_GetTick>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	69ba      	ldr	r2, [r7, #24]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d302      	bcc.n	800a1ec <UART_WaitOnFlagUntilTimeout+0x30>
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d101      	bne.n	800a1f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e04e      	b.n	800a28e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 0304 	and.w	r3, r3, #4
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d037      	beq.n	800a26e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2b80      	cmp	r3, #128	@ 0x80
 800a202:	d034      	beq.n	800a26e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2b40      	cmp	r3, #64	@ 0x40
 800a208:	d031      	beq.n	800a26e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	69db      	ldr	r3, [r3, #28]
 800a210:	f003 0308 	and.w	r3, r3, #8
 800a214:	2b08      	cmp	r3, #8
 800a216:	d110      	bne.n	800a23a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2208      	movs	r2, #8
 800a21e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f000 f838 	bl	800a296 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2208      	movs	r2, #8
 800a22a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	e029      	b.n	800a28e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a248:	d111      	bne.n	800a26e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a252:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f000 f81e 	bl	800a296 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2220      	movs	r2, #32
 800a25e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e00f      	b.n	800a28e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	69da      	ldr	r2, [r3, #28]
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	4013      	ands	r3, r2
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	bf0c      	ite	eq
 800a27e:	2301      	moveq	r3, #1
 800a280:	2300      	movne	r3, #0
 800a282:	b2db      	uxtb	r3, r3
 800a284:	461a      	mov	r2, r3
 800a286:	79fb      	ldrb	r3, [r7, #7]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d0a0      	beq.n	800a1ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a296:	b480      	push	{r7}
 800a298:	b095      	sub	sp, #84	@ 0x54
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a6:	e853 3f00 	ldrex	r3, [r3]
 800a2aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2bc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2c4:	e841 2300 	strex	r3, r2, [r1]
 800a2c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1e6      	bne.n	800a29e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d8:	6a3b      	ldr	r3, [r7, #32]
 800a2da:	e853 3f00 	ldrex	r3, [r3]
 800a2de:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2e6:	f023 0301 	bic.w	r3, r3, #1
 800a2ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	3308      	adds	r3, #8
 800a2f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2fc:	e841 2300 	strex	r3, r2, [r1]
 800a300:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1e3      	bne.n	800a2d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d118      	bne.n	800a342 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	e853 3f00 	ldrex	r3, [r3]
 800a31c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	f023 0310 	bic.w	r3, r3, #16
 800a324:	647b      	str	r3, [r7, #68]	@ 0x44
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	461a      	mov	r2, r3
 800a32c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a32e:	61bb      	str	r3, [r7, #24]
 800a330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a332:	6979      	ldr	r1, [r7, #20]
 800a334:	69ba      	ldr	r2, [r7, #24]
 800a336:	e841 2300 	strex	r3, r2, [r1]
 800a33a:	613b      	str	r3, [r7, #16]
   return(result);
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1e6      	bne.n	800a310 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2220      	movs	r2, #32
 800a346:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a356:	bf00      	nop
 800a358:	3754      	adds	r7, #84	@ 0x54
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <_ZdlPvj>:
 800a362:	f000 b800 	b.w	800a366 <_ZdlPv>

0800a366 <_ZdlPv>:
 800a366:	f000 b809 	b.w	800a37c <free>
	...

0800a36c <malloc>:
 800a36c:	4b02      	ldr	r3, [pc, #8]	@ (800a378 <malloc+0xc>)
 800a36e:	4601      	mov	r1, r0
 800a370:	6818      	ldr	r0, [r3, #0]
 800a372:	f000 b82d 	b.w	800a3d0 <_malloc_r>
 800a376:	bf00      	nop
 800a378:	2000005c 	.word	0x2000005c

0800a37c <free>:
 800a37c:	4b02      	ldr	r3, [pc, #8]	@ (800a388 <free+0xc>)
 800a37e:	4601      	mov	r1, r0
 800a380:	6818      	ldr	r0, [r3, #0]
 800a382:	f001 bf4d 	b.w	800c220 <_free_r>
 800a386:	bf00      	nop
 800a388:	2000005c 	.word	0x2000005c

0800a38c <sbrk_aligned>:
 800a38c:	b570      	push	{r4, r5, r6, lr}
 800a38e:	4e0f      	ldr	r6, [pc, #60]	@ (800a3cc <sbrk_aligned+0x40>)
 800a390:	460c      	mov	r4, r1
 800a392:	4605      	mov	r5, r0
 800a394:	6831      	ldr	r1, [r6, #0]
 800a396:	b911      	cbnz	r1, 800a39e <sbrk_aligned+0x12>
 800a398:	f001 f88a 	bl	800b4b0 <_sbrk_r>
 800a39c:	6030      	str	r0, [r6, #0]
 800a39e:	4621      	mov	r1, r4
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	f001 f885 	bl	800b4b0 <_sbrk_r>
 800a3a6:	1c43      	adds	r3, r0, #1
 800a3a8:	d103      	bne.n	800a3b2 <sbrk_aligned+0x26>
 800a3aa:	f04f 34ff 	mov.w	r4, #4294967295
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	bd70      	pop	{r4, r5, r6, pc}
 800a3b2:	1cc4      	adds	r4, r0, #3
 800a3b4:	f024 0403 	bic.w	r4, r4, #3
 800a3b8:	42a0      	cmp	r0, r4
 800a3ba:	d0f8      	beq.n	800a3ae <sbrk_aligned+0x22>
 800a3bc:	1a21      	subs	r1, r4, r0
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f001 f876 	bl	800b4b0 <_sbrk_r>
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	d1f2      	bne.n	800a3ae <sbrk_aligned+0x22>
 800a3c8:	e7ef      	b.n	800a3aa <sbrk_aligned+0x1e>
 800a3ca:	bf00      	nop
 800a3cc:	200004b4 	.word	0x200004b4

0800a3d0 <_malloc_r>:
 800a3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d4:	1ccd      	adds	r5, r1, #3
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	f025 0503 	bic.w	r5, r5, #3
 800a3dc:	3508      	adds	r5, #8
 800a3de:	2d0c      	cmp	r5, #12
 800a3e0:	bf38      	it	cc
 800a3e2:	250c      	movcc	r5, #12
 800a3e4:	2d00      	cmp	r5, #0
 800a3e6:	db01      	blt.n	800a3ec <_malloc_r+0x1c>
 800a3e8:	42a9      	cmp	r1, r5
 800a3ea:	d904      	bls.n	800a3f6 <_malloc_r+0x26>
 800a3ec:	230c      	movs	r3, #12
 800a3ee:	6033      	str	r3, [r6, #0]
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4cc <_malloc_r+0xfc>
 800a3fa:	f000 f869 	bl	800a4d0 <__malloc_lock>
 800a3fe:	f8d8 3000 	ldr.w	r3, [r8]
 800a402:	461c      	mov	r4, r3
 800a404:	bb44      	cbnz	r4, 800a458 <_malloc_r+0x88>
 800a406:	4629      	mov	r1, r5
 800a408:	4630      	mov	r0, r6
 800a40a:	f7ff ffbf 	bl	800a38c <sbrk_aligned>
 800a40e:	1c43      	adds	r3, r0, #1
 800a410:	4604      	mov	r4, r0
 800a412:	d158      	bne.n	800a4c6 <_malloc_r+0xf6>
 800a414:	f8d8 4000 	ldr.w	r4, [r8]
 800a418:	4627      	mov	r7, r4
 800a41a:	2f00      	cmp	r7, #0
 800a41c:	d143      	bne.n	800a4a6 <_malloc_r+0xd6>
 800a41e:	2c00      	cmp	r4, #0
 800a420:	d04b      	beq.n	800a4ba <_malloc_r+0xea>
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	4639      	mov	r1, r7
 800a426:	4630      	mov	r0, r6
 800a428:	eb04 0903 	add.w	r9, r4, r3
 800a42c:	f001 f840 	bl	800b4b0 <_sbrk_r>
 800a430:	4581      	cmp	r9, r0
 800a432:	d142      	bne.n	800a4ba <_malloc_r+0xea>
 800a434:	6821      	ldr	r1, [r4, #0]
 800a436:	4630      	mov	r0, r6
 800a438:	1a6d      	subs	r5, r5, r1
 800a43a:	4629      	mov	r1, r5
 800a43c:	f7ff ffa6 	bl	800a38c <sbrk_aligned>
 800a440:	3001      	adds	r0, #1
 800a442:	d03a      	beq.n	800a4ba <_malloc_r+0xea>
 800a444:	6823      	ldr	r3, [r4, #0]
 800a446:	442b      	add	r3, r5
 800a448:	6023      	str	r3, [r4, #0]
 800a44a:	f8d8 3000 	ldr.w	r3, [r8]
 800a44e:	685a      	ldr	r2, [r3, #4]
 800a450:	bb62      	cbnz	r2, 800a4ac <_malloc_r+0xdc>
 800a452:	f8c8 7000 	str.w	r7, [r8]
 800a456:	e00f      	b.n	800a478 <_malloc_r+0xa8>
 800a458:	6822      	ldr	r2, [r4, #0]
 800a45a:	1b52      	subs	r2, r2, r5
 800a45c:	d420      	bmi.n	800a4a0 <_malloc_r+0xd0>
 800a45e:	2a0b      	cmp	r2, #11
 800a460:	d917      	bls.n	800a492 <_malloc_r+0xc2>
 800a462:	1961      	adds	r1, r4, r5
 800a464:	42a3      	cmp	r3, r4
 800a466:	6025      	str	r5, [r4, #0]
 800a468:	bf18      	it	ne
 800a46a:	6059      	strne	r1, [r3, #4]
 800a46c:	6863      	ldr	r3, [r4, #4]
 800a46e:	bf08      	it	eq
 800a470:	f8c8 1000 	streq.w	r1, [r8]
 800a474:	5162      	str	r2, [r4, r5]
 800a476:	604b      	str	r3, [r1, #4]
 800a478:	4630      	mov	r0, r6
 800a47a:	f000 f82f 	bl	800a4dc <__malloc_unlock>
 800a47e:	f104 000b 	add.w	r0, r4, #11
 800a482:	1d23      	adds	r3, r4, #4
 800a484:	f020 0007 	bic.w	r0, r0, #7
 800a488:	1ac2      	subs	r2, r0, r3
 800a48a:	bf1c      	itt	ne
 800a48c:	1a1b      	subne	r3, r3, r0
 800a48e:	50a3      	strne	r3, [r4, r2]
 800a490:	e7af      	b.n	800a3f2 <_malloc_r+0x22>
 800a492:	6862      	ldr	r2, [r4, #4]
 800a494:	42a3      	cmp	r3, r4
 800a496:	bf0c      	ite	eq
 800a498:	f8c8 2000 	streq.w	r2, [r8]
 800a49c:	605a      	strne	r2, [r3, #4]
 800a49e:	e7eb      	b.n	800a478 <_malloc_r+0xa8>
 800a4a0:	4623      	mov	r3, r4
 800a4a2:	6864      	ldr	r4, [r4, #4]
 800a4a4:	e7ae      	b.n	800a404 <_malloc_r+0x34>
 800a4a6:	463c      	mov	r4, r7
 800a4a8:	687f      	ldr	r7, [r7, #4]
 800a4aa:	e7b6      	b.n	800a41a <_malloc_r+0x4a>
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	42a3      	cmp	r3, r4
 800a4b2:	d1fb      	bne.n	800a4ac <_malloc_r+0xdc>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	6053      	str	r3, [r2, #4]
 800a4b8:	e7de      	b.n	800a478 <_malloc_r+0xa8>
 800a4ba:	230c      	movs	r3, #12
 800a4bc:	4630      	mov	r0, r6
 800a4be:	6033      	str	r3, [r6, #0]
 800a4c0:	f000 f80c 	bl	800a4dc <__malloc_unlock>
 800a4c4:	e794      	b.n	800a3f0 <_malloc_r+0x20>
 800a4c6:	6005      	str	r5, [r0, #0]
 800a4c8:	e7d6      	b.n	800a478 <_malloc_r+0xa8>
 800a4ca:	bf00      	nop
 800a4cc:	200004b8 	.word	0x200004b8

0800a4d0 <__malloc_lock>:
 800a4d0:	4801      	ldr	r0, [pc, #4]	@ (800a4d8 <__malloc_lock+0x8>)
 800a4d2:	f001 b83a 	b.w	800b54a <__retarget_lock_acquire_recursive>
 800a4d6:	bf00      	nop
 800a4d8:	200005fc 	.word	0x200005fc

0800a4dc <__malloc_unlock>:
 800a4dc:	4801      	ldr	r0, [pc, #4]	@ (800a4e4 <__malloc_unlock+0x8>)
 800a4de:	f001 b835 	b.w	800b54c <__retarget_lock_release_recursive>
 800a4e2:	bf00      	nop
 800a4e4:	200005fc 	.word	0x200005fc

0800a4e8 <__cvt>:
 800a4e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4ec:	ec57 6b10 	vmov	r6, r7, d0
 800a4f0:	2f00      	cmp	r7, #0
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	463b      	mov	r3, r7
 800a4f8:	bfb4      	ite	lt
 800a4fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a4fe:	2300      	movge	r3, #0
 800a500:	4691      	mov	r9, r2
 800a502:	bfbf      	itttt	lt
 800a504:	4632      	movlt	r2, r6
 800a506:	461f      	movlt	r7, r3
 800a508:	232d      	movlt	r3, #45	@ 0x2d
 800a50a:	4616      	movlt	r6, r2
 800a50c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a510:	700b      	strb	r3, [r1, #0]
 800a512:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a514:	f023 0820 	bic.w	r8, r3, #32
 800a518:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a51c:	d005      	beq.n	800a52a <__cvt+0x42>
 800a51e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a522:	d100      	bne.n	800a526 <__cvt+0x3e>
 800a524:	3401      	adds	r4, #1
 800a526:	2102      	movs	r1, #2
 800a528:	e000      	b.n	800a52c <__cvt+0x44>
 800a52a:	2103      	movs	r1, #3
 800a52c:	ab03      	add	r3, sp, #12
 800a52e:	4622      	mov	r2, r4
 800a530:	9301      	str	r3, [sp, #4]
 800a532:	ab02      	add	r3, sp, #8
 800a534:	ec47 6b10 	vmov	d0, r6, r7
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	4653      	mov	r3, sl
 800a53c:	f001 f8ac 	bl	800b698 <_dtoa_r>
 800a540:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a544:	4605      	mov	r5, r0
 800a546:	d119      	bne.n	800a57c <__cvt+0x94>
 800a548:	f019 0f01 	tst.w	r9, #1
 800a54c:	d00e      	beq.n	800a56c <__cvt+0x84>
 800a54e:	eb00 0904 	add.w	r9, r0, r4
 800a552:	2200      	movs	r2, #0
 800a554:	2300      	movs	r3, #0
 800a556:	4630      	mov	r0, r6
 800a558:	4639      	mov	r1, r7
 800a55a:	f7f6 fac5 	bl	8000ae8 <__aeabi_dcmpeq>
 800a55e:	b108      	cbz	r0, 800a564 <__cvt+0x7c>
 800a560:	f8cd 900c 	str.w	r9, [sp, #12]
 800a564:	2230      	movs	r2, #48	@ 0x30
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	454b      	cmp	r3, r9
 800a56a:	d31e      	bcc.n	800a5aa <__cvt+0xc2>
 800a56c:	9b03      	ldr	r3, [sp, #12]
 800a56e:	4628      	mov	r0, r5
 800a570:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a572:	1b5b      	subs	r3, r3, r5
 800a574:	6013      	str	r3, [r2, #0]
 800a576:	b004      	add	sp, #16
 800a578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a57c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a580:	eb00 0904 	add.w	r9, r0, r4
 800a584:	d1e5      	bne.n	800a552 <__cvt+0x6a>
 800a586:	7803      	ldrb	r3, [r0, #0]
 800a588:	2b30      	cmp	r3, #48	@ 0x30
 800a58a:	d10a      	bne.n	800a5a2 <__cvt+0xba>
 800a58c:	2200      	movs	r2, #0
 800a58e:	2300      	movs	r3, #0
 800a590:	4630      	mov	r0, r6
 800a592:	4639      	mov	r1, r7
 800a594:	f7f6 faa8 	bl	8000ae8 <__aeabi_dcmpeq>
 800a598:	b918      	cbnz	r0, 800a5a2 <__cvt+0xba>
 800a59a:	f1c4 0401 	rsb	r4, r4, #1
 800a59e:	f8ca 4000 	str.w	r4, [sl]
 800a5a2:	f8da 3000 	ldr.w	r3, [sl]
 800a5a6:	4499      	add	r9, r3
 800a5a8:	e7d3      	b.n	800a552 <__cvt+0x6a>
 800a5aa:	1c59      	adds	r1, r3, #1
 800a5ac:	9103      	str	r1, [sp, #12]
 800a5ae:	701a      	strb	r2, [r3, #0]
 800a5b0:	e7d9      	b.n	800a566 <__cvt+0x7e>

0800a5b2 <__exponent>:
 800a5b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5b4:	2900      	cmp	r1, #0
 800a5b6:	7002      	strb	r2, [r0, #0]
 800a5b8:	bfba      	itte	lt
 800a5ba:	4249      	neglt	r1, r1
 800a5bc:	232d      	movlt	r3, #45	@ 0x2d
 800a5be:	232b      	movge	r3, #43	@ 0x2b
 800a5c0:	2909      	cmp	r1, #9
 800a5c2:	7043      	strb	r3, [r0, #1]
 800a5c4:	dd28      	ble.n	800a618 <__exponent+0x66>
 800a5c6:	f10d 0307 	add.w	r3, sp, #7
 800a5ca:	270a      	movs	r7, #10
 800a5cc:	461d      	mov	r5, r3
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	fbb1 f6f7 	udiv	r6, r1, r7
 800a5d6:	fb07 1416 	mls	r4, r7, r6, r1
 800a5da:	3430      	adds	r4, #48	@ 0x30
 800a5dc:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	2c63      	cmp	r4, #99	@ 0x63
 800a5e6:	dcf2      	bgt.n	800a5ce <__exponent+0x1c>
 800a5e8:	3130      	adds	r1, #48	@ 0x30
 800a5ea:	1e94      	subs	r4, r2, #2
 800a5ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a5f0:	1c41      	adds	r1, r0, #1
 800a5f2:	4623      	mov	r3, r4
 800a5f4:	42ab      	cmp	r3, r5
 800a5f6:	d30a      	bcc.n	800a60e <__exponent+0x5c>
 800a5f8:	f10d 0309 	add.w	r3, sp, #9
 800a5fc:	1a9b      	subs	r3, r3, r2
 800a5fe:	42ac      	cmp	r4, r5
 800a600:	bf88      	it	hi
 800a602:	2300      	movhi	r3, #0
 800a604:	3302      	adds	r3, #2
 800a606:	4403      	add	r3, r0
 800a608:	1a18      	subs	r0, r3, r0
 800a60a:	b003      	add	sp, #12
 800a60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a60e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a612:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a616:	e7ed      	b.n	800a5f4 <__exponent+0x42>
 800a618:	2330      	movs	r3, #48	@ 0x30
 800a61a:	3130      	adds	r1, #48	@ 0x30
 800a61c:	7083      	strb	r3, [r0, #2]
 800a61e:	1d03      	adds	r3, r0, #4
 800a620:	70c1      	strb	r1, [r0, #3]
 800a622:	e7f1      	b.n	800a608 <__exponent+0x56>

0800a624 <_printf_float>:
 800a624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a628:	b08d      	sub	sp, #52	@ 0x34
 800a62a:	460c      	mov	r4, r1
 800a62c:	4616      	mov	r6, r2
 800a62e:	461f      	mov	r7, r3
 800a630:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a634:	4605      	mov	r5, r0
 800a636:	f000 ff03 	bl	800b440 <_localeconv_r>
 800a63a:	6803      	ldr	r3, [r0, #0]
 800a63c:	4618      	mov	r0, r3
 800a63e:	9304      	str	r3, [sp, #16]
 800a640:	f7f5 fe26 	bl	8000290 <strlen>
 800a644:	2300      	movs	r3, #0
 800a646:	9005      	str	r0, [sp, #20]
 800a648:	930a      	str	r3, [sp, #40]	@ 0x28
 800a64a:	f8d8 3000 	ldr.w	r3, [r8]
 800a64e:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a652:	3307      	adds	r3, #7
 800a654:	f8d4 b000 	ldr.w	fp, [r4]
 800a658:	f023 0307 	bic.w	r3, r3, #7
 800a65c:	f103 0208 	add.w	r2, r3, #8
 800a660:	f8c8 2000 	str.w	r2, [r8]
 800a664:	f04f 32ff 	mov.w	r2, #4294967295
 800a668:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a66c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a670:	f8cd 8018 	str.w	r8, [sp, #24]
 800a674:	9307      	str	r3, [sp, #28]
 800a676:	4b9d      	ldr	r3, [pc, #628]	@ (800a8ec <_printf_float+0x2c8>)
 800a678:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a67c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a680:	f7f6 fa64 	bl	8000b4c <__aeabi_dcmpun>
 800a684:	bb70      	cbnz	r0, 800a6e4 <_printf_float+0xc0>
 800a686:	f04f 32ff 	mov.w	r2, #4294967295
 800a68a:	4b98      	ldr	r3, [pc, #608]	@ (800a8ec <_printf_float+0x2c8>)
 800a68c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a690:	f7f6 fa3e 	bl	8000b10 <__aeabi_dcmple>
 800a694:	bb30      	cbnz	r0, 800a6e4 <_printf_float+0xc0>
 800a696:	2200      	movs	r2, #0
 800a698:	2300      	movs	r3, #0
 800a69a:	4640      	mov	r0, r8
 800a69c:	4649      	mov	r1, r9
 800a69e:	f7f6 fa2d 	bl	8000afc <__aeabi_dcmplt>
 800a6a2:	b110      	cbz	r0, 800a6aa <_printf_float+0x86>
 800a6a4:	232d      	movs	r3, #45	@ 0x2d
 800a6a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6aa:	4a91      	ldr	r2, [pc, #580]	@ (800a8f0 <_printf_float+0x2cc>)
 800a6ac:	4b91      	ldr	r3, [pc, #580]	@ (800a8f4 <_printf_float+0x2d0>)
 800a6ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a6b2:	bf94      	ite	ls
 800a6b4:	4690      	movls	r8, r2
 800a6b6:	4698      	movhi	r8, r3
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	f04f 0900 	mov.w	r9, #0
 800a6be:	6123      	str	r3, [r4, #16]
 800a6c0:	f02b 0304 	bic.w	r3, fp, #4
 800a6c4:	6023      	str	r3, [r4, #0]
 800a6c6:	4633      	mov	r3, r6
 800a6c8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	9700      	str	r7, [sp, #0]
 800a6d0:	f000 f9d2 	bl	800aa78 <_printf_common>
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	f040 808d 	bne.w	800a7f4 <_printf_float+0x1d0>
 800a6da:	f04f 30ff 	mov.w	r0, #4294967295
 800a6de:	b00d      	add	sp, #52	@ 0x34
 800a6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e4:	4642      	mov	r2, r8
 800a6e6:	464b      	mov	r3, r9
 800a6e8:	4640      	mov	r0, r8
 800a6ea:	4649      	mov	r1, r9
 800a6ec:	f7f6 fa2e 	bl	8000b4c <__aeabi_dcmpun>
 800a6f0:	b140      	cbz	r0, 800a704 <_printf_float+0xe0>
 800a6f2:	464b      	mov	r3, r9
 800a6f4:	4a80      	ldr	r2, [pc, #512]	@ (800a8f8 <_printf_float+0x2d4>)
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	bfbc      	itt	lt
 800a6fa:	232d      	movlt	r3, #45	@ 0x2d
 800a6fc:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a700:	4b7e      	ldr	r3, [pc, #504]	@ (800a8fc <_printf_float+0x2d8>)
 800a702:	e7d4      	b.n	800a6ae <_printf_float+0x8a>
 800a704:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a708:	6863      	ldr	r3, [r4, #4]
 800a70a:	9206      	str	r2, [sp, #24]
 800a70c:	1c5a      	adds	r2, r3, #1
 800a70e:	d13b      	bne.n	800a788 <_printf_float+0x164>
 800a710:	2306      	movs	r3, #6
 800a712:	6063      	str	r3, [r4, #4]
 800a714:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a718:	2300      	movs	r3, #0
 800a71a:	4628      	mov	r0, r5
 800a71c:	6022      	str	r2, [r4, #0]
 800a71e:	9303      	str	r3, [sp, #12]
 800a720:	ab0a      	add	r3, sp, #40	@ 0x28
 800a722:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a726:	ab09      	add	r3, sp, #36	@ 0x24
 800a728:	ec49 8b10 	vmov	d0, r8, r9
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a732:	6861      	ldr	r1, [r4, #4]
 800a734:	f7ff fed8 	bl	800a4e8 <__cvt>
 800a738:	9b06      	ldr	r3, [sp, #24]
 800a73a:	4680      	mov	r8, r0
 800a73c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a73e:	2b47      	cmp	r3, #71	@ 0x47
 800a740:	d129      	bne.n	800a796 <_printf_float+0x172>
 800a742:	1cc8      	adds	r0, r1, #3
 800a744:	db02      	blt.n	800a74c <_printf_float+0x128>
 800a746:	6863      	ldr	r3, [r4, #4]
 800a748:	4299      	cmp	r1, r3
 800a74a:	dd41      	ble.n	800a7d0 <_printf_float+0x1ac>
 800a74c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a750:	fa5f fa8a 	uxtb.w	sl, sl
 800a754:	3901      	subs	r1, #1
 800a756:	4652      	mov	r2, sl
 800a758:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a75c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a75e:	f7ff ff28 	bl	800a5b2 <__exponent>
 800a762:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a764:	4681      	mov	r9, r0
 800a766:	1813      	adds	r3, r2, r0
 800a768:	2a01      	cmp	r2, #1
 800a76a:	6123      	str	r3, [r4, #16]
 800a76c:	dc02      	bgt.n	800a774 <_printf_float+0x150>
 800a76e:	6822      	ldr	r2, [r4, #0]
 800a770:	07d2      	lsls	r2, r2, #31
 800a772:	d501      	bpl.n	800a778 <_printf_float+0x154>
 800a774:	3301      	adds	r3, #1
 800a776:	6123      	str	r3, [r4, #16]
 800a778:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d0a2      	beq.n	800a6c6 <_printf_float+0xa2>
 800a780:	232d      	movs	r3, #45	@ 0x2d
 800a782:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a786:	e79e      	b.n	800a6c6 <_printf_float+0xa2>
 800a788:	9a06      	ldr	r2, [sp, #24]
 800a78a:	2a47      	cmp	r2, #71	@ 0x47
 800a78c:	d1c2      	bne.n	800a714 <_printf_float+0xf0>
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1c0      	bne.n	800a714 <_printf_float+0xf0>
 800a792:	2301      	movs	r3, #1
 800a794:	e7bd      	b.n	800a712 <_printf_float+0xee>
 800a796:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a79a:	d9db      	bls.n	800a754 <_printf_float+0x130>
 800a79c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a7a0:	d118      	bne.n	800a7d4 <_printf_float+0x1b0>
 800a7a2:	2900      	cmp	r1, #0
 800a7a4:	6863      	ldr	r3, [r4, #4]
 800a7a6:	dd0b      	ble.n	800a7c0 <_printf_float+0x19c>
 800a7a8:	6121      	str	r1, [r4, #16]
 800a7aa:	b913      	cbnz	r3, 800a7b2 <_printf_float+0x18e>
 800a7ac:	6822      	ldr	r2, [r4, #0]
 800a7ae:	07d0      	lsls	r0, r2, #31
 800a7b0:	d502      	bpl.n	800a7b8 <_printf_float+0x194>
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	440b      	add	r3, r1
 800a7b6:	6123      	str	r3, [r4, #16]
 800a7b8:	f04f 0900 	mov.w	r9, #0
 800a7bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a7be:	e7db      	b.n	800a778 <_printf_float+0x154>
 800a7c0:	b913      	cbnz	r3, 800a7c8 <_printf_float+0x1a4>
 800a7c2:	6822      	ldr	r2, [r4, #0]
 800a7c4:	07d2      	lsls	r2, r2, #31
 800a7c6:	d501      	bpl.n	800a7cc <_printf_float+0x1a8>
 800a7c8:	3302      	adds	r3, #2
 800a7ca:	e7f4      	b.n	800a7b6 <_printf_float+0x192>
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e7f2      	b.n	800a7b6 <_printf_float+0x192>
 800a7d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a7d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7d6:	4299      	cmp	r1, r3
 800a7d8:	db05      	blt.n	800a7e6 <_printf_float+0x1c2>
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	6121      	str	r1, [r4, #16]
 800a7de:	07d8      	lsls	r0, r3, #31
 800a7e0:	d5ea      	bpl.n	800a7b8 <_printf_float+0x194>
 800a7e2:	1c4b      	adds	r3, r1, #1
 800a7e4:	e7e7      	b.n	800a7b6 <_printf_float+0x192>
 800a7e6:	2900      	cmp	r1, #0
 800a7e8:	bfd4      	ite	le
 800a7ea:	f1c1 0202 	rsble	r2, r1, #2
 800a7ee:	2201      	movgt	r2, #1
 800a7f0:	4413      	add	r3, r2
 800a7f2:	e7e0      	b.n	800a7b6 <_printf_float+0x192>
 800a7f4:	6823      	ldr	r3, [r4, #0]
 800a7f6:	055a      	lsls	r2, r3, #21
 800a7f8:	d407      	bmi.n	800a80a <_printf_float+0x1e6>
 800a7fa:	6923      	ldr	r3, [r4, #16]
 800a7fc:	4642      	mov	r2, r8
 800a7fe:	4631      	mov	r1, r6
 800a800:	4628      	mov	r0, r5
 800a802:	47b8      	blx	r7
 800a804:	3001      	adds	r0, #1
 800a806:	d12b      	bne.n	800a860 <_printf_float+0x23c>
 800a808:	e767      	b.n	800a6da <_printf_float+0xb6>
 800a80a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a80e:	f240 80dd 	bls.w	800a9cc <_printf_float+0x3a8>
 800a812:	2200      	movs	r2, #0
 800a814:	2300      	movs	r3, #0
 800a816:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a81a:	f7f6 f965 	bl	8000ae8 <__aeabi_dcmpeq>
 800a81e:	2800      	cmp	r0, #0
 800a820:	d033      	beq.n	800a88a <_printf_float+0x266>
 800a822:	2301      	movs	r3, #1
 800a824:	4a36      	ldr	r2, [pc, #216]	@ (800a900 <_printf_float+0x2dc>)
 800a826:	4631      	mov	r1, r6
 800a828:	4628      	mov	r0, r5
 800a82a:	47b8      	blx	r7
 800a82c:	3001      	adds	r0, #1
 800a82e:	f43f af54 	beq.w	800a6da <_printf_float+0xb6>
 800a832:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a836:	4543      	cmp	r3, r8
 800a838:	db02      	blt.n	800a840 <_printf_float+0x21c>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	07d8      	lsls	r0, r3, #31
 800a83e:	d50f      	bpl.n	800a860 <_printf_float+0x23c>
 800a840:	4631      	mov	r1, r6
 800a842:	4628      	mov	r0, r5
 800a844:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a848:	47b8      	blx	r7
 800a84a:	3001      	adds	r0, #1
 800a84c:	f43f af45 	beq.w	800a6da <_printf_float+0xb6>
 800a850:	f04f 0900 	mov.w	r9, #0
 800a854:	f108 38ff 	add.w	r8, r8, #4294967295
 800a858:	f104 0a1a 	add.w	sl, r4, #26
 800a85c:	45c8      	cmp	r8, r9
 800a85e:	dc09      	bgt.n	800a874 <_printf_float+0x250>
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	079b      	lsls	r3, r3, #30
 800a864:	f100 8103 	bmi.w	800aa6e <_printf_float+0x44a>
 800a868:	68e0      	ldr	r0, [r4, #12]
 800a86a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a86c:	4298      	cmp	r0, r3
 800a86e:	bfb8      	it	lt
 800a870:	4618      	movlt	r0, r3
 800a872:	e734      	b.n	800a6de <_printf_float+0xba>
 800a874:	2301      	movs	r3, #1
 800a876:	4652      	mov	r2, sl
 800a878:	4631      	mov	r1, r6
 800a87a:	4628      	mov	r0, r5
 800a87c:	47b8      	blx	r7
 800a87e:	3001      	adds	r0, #1
 800a880:	f43f af2b 	beq.w	800a6da <_printf_float+0xb6>
 800a884:	f109 0901 	add.w	r9, r9, #1
 800a888:	e7e8      	b.n	800a85c <_printf_float+0x238>
 800a88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	dc39      	bgt.n	800a904 <_printf_float+0x2e0>
 800a890:	2301      	movs	r3, #1
 800a892:	4a1b      	ldr	r2, [pc, #108]	@ (800a900 <_printf_float+0x2dc>)
 800a894:	4631      	mov	r1, r6
 800a896:	4628      	mov	r0, r5
 800a898:	47b8      	blx	r7
 800a89a:	3001      	adds	r0, #1
 800a89c:	f43f af1d 	beq.w	800a6da <_printf_float+0xb6>
 800a8a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a8a4:	ea59 0303 	orrs.w	r3, r9, r3
 800a8a8:	d102      	bne.n	800a8b0 <_printf_float+0x28c>
 800a8aa:	6823      	ldr	r3, [r4, #0]
 800a8ac:	07d9      	lsls	r1, r3, #31
 800a8ae:	d5d7      	bpl.n	800a860 <_printf_float+0x23c>
 800a8b0:	4631      	mov	r1, r6
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8b8:	47b8      	blx	r7
 800a8ba:	3001      	adds	r0, #1
 800a8bc:	f43f af0d 	beq.w	800a6da <_printf_float+0xb6>
 800a8c0:	f04f 0a00 	mov.w	sl, #0
 800a8c4:	f104 0b1a 	add.w	fp, r4, #26
 800a8c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ca:	425b      	negs	r3, r3
 800a8cc:	4553      	cmp	r3, sl
 800a8ce:	dc01      	bgt.n	800a8d4 <_printf_float+0x2b0>
 800a8d0:	464b      	mov	r3, r9
 800a8d2:	e793      	b.n	800a7fc <_printf_float+0x1d8>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	465a      	mov	r2, fp
 800a8d8:	4631      	mov	r1, r6
 800a8da:	4628      	mov	r0, r5
 800a8dc:	47b8      	blx	r7
 800a8de:	3001      	adds	r0, #1
 800a8e0:	f43f aefb 	beq.w	800a6da <_printf_float+0xb6>
 800a8e4:	f10a 0a01 	add.w	sl, sl, #1
 800a8e8:	e7ee      	b.n	800a8c8 <_printf_float+0x2a4>
 800a8ea:	bf00      	nop
 800a8ec:	7fefffff 	.word	0x7fefffff
 800a8f0:	0800ed18 	.word	0x0800ed18
 800a8f4:	0800ed1c 	.word	0x0800ed1c
 800a8f8:	0800ed20 	.word	0x0800ed20
 800a8fc:	0800ed24 	.word	0x0800ed24
 800a900:	0800ed28 	.word	0x0800ed28
 800a904:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a906:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a90a:	4553      	cmp	r3, sl
 800a90c:	bfa8      	it	ge
 800a90e:	4653      	movge	r3, sl
 800a910:	2b00      	cmp	r3, #0
 800a912:	4699      	mov	r9, r3
 800a914:	dc36      	bgt.n	800a984 <_printf_float+0x360>
 800a916:	f04f 0b00 	mov.w	fp, #0
 800a91a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a91e:	f104 021a 	add.w	r2, r4, #26
 800a922:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a924:	9306      	str	r3, [sp, #24]
 800a926:	eba3 0309 	sub.w	r3, r3, r9
 800a92a:	455b      	cmp	r3, fp
 800a92c:	dc31      	bgt.n	800a992 <_printf_float+0x36e>
 800a92e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a930:	459a      	cmp	sl, r3
 800a932:	dc3a      	bgt.n	800a9aa <_printf_float+0x386>
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	07da      	lsls	r2, r3, #31
 800a938:	d437      	bmi.n	800a9aa <_printf_float+0x386>
 800a93a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a93c:	ebaa 0903 	sub.w	r9, sl, r3
 800a940:	9b06      	ldr	r3, [sp, #24]
 800a942:	ebaa 0303 	sub.w	r3, sl, r3
 800a946:	4599      	cmp	r9, r3
 800a948:	bfa8      	it	ge
 800a94a:	4699      	movge	r9, r3
 800a94c:	f1b9 0f00 	cmp.w	r9, #0
 800a950:	dc33      	bgt.n	800a9ba <_printf_float+0x396>
 800a952:	f04f 0800 	mov.w	r8, #0
 800a956:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a95a:	f104 0b1a 	add.w	fp, r4, #26
 800a95e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a960:	ebaa 0303 	sub.w	r3, sl, r3
 800a964:	eba3 0309 	sub.w	r3, r3, r9
 800a968:	4543      	cmp	r3, r8
 800a96a:	f77f af79 	ble.w	800a860 <_printf_float+0x23c>
 800a96e:	2301      	movs	r3, #1
 800a970:	465a      	mov	r2, fp
 800a972:	4631      	mov	r1, r6
 800a974:	4628      	mov	r0, r5
 800a976:	47b8      	blx	r7
 800a978:	3001      	adds	r0, #1
 800a97a:	f43f aeae 	beq.w	800a6da <_printf_float+0xb6>
 800a97e:	f108 0801 	add.w	r8, r8, #1
 800a982:	e7ec      	b.n	800a95e <_printf_float+0x33a>
 800a984:	4642      	mov	r2, r8
 800a986:	4631      	mov	r1, r6
 800a988:	4628      	mov	r0, r5
 800a98a:	47b8      	blx	r7
 800a98c:	3001      	adds	r0, #1
 800a98e:	d1c2      	bne.n	800a916 <_printf_float+0x2f2>
 800a990:	e6a3      	b.n	800a6da <_printf_float+0xb6>
 800a992:	2301      	movs	r3, #1
 800a994:	4631      	mov	r1, r6
 800a996:	4628      	mov	r0, r5
 800a998:	9206      	str	r2, [sp, #24]
 800a99a:	47b8      	blx	r7
 800a99c:	3001      	adds	r0, #1
 800a99e:	f43f ae9c 	beq.w	800a6da <_printf_float+0xb6>
 800a9a2:	f10b 0b01 	add.w	fp, fp, #1
 800a9a6:	9a06      	ldr	r2, [sp, #24]
 800a9a8:	e7bb      	b.n	800a922 <_printf_float+0x2fe>
 800a9aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ae:	4631      	mov	r1, r6
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	47b8      	blx	r7
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	d1c0      	bne.n	800a93a <_printf_float+0x316>
 800a9b8:	e68f      	b.n	800a6da <_printf_float+0xb6>
 800a9ba:	9a06      	ldr	r2, [sp, #24]
 800a9bc:	464b      	mov	r3, r9
 800a9be:	4631      	mov	r1, r6
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	4442      	add	r2, r8
 800a9c4:	47b8      	blx	r7
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	d1c3      	bne.n	800a952 <_printf_float+0x32e>
 800a9ca:	e686      	b.n	800a6da <_printf_float+0xb6>
 800a9cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a9d0:	f1ba 0f01 	cmp.w	sl, #1
 800a9d4:	dc01      	bgt.n	800a9da <_printf_float+0x3b6>
 800a9d6:	07db      	lsls	r3, r3, #31
 800a9d8:	d536      	bpl.n	800aa48 <_printf_float+0x424>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	4642      	mov	r2, r8
 800a9de:	4631      	mov	r1, r6
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	47b8      	blx	r7
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	f43f ae78 	beq.w	800a6da <_printf_float+0xb6>
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9f2:	47b8      	blx	r7
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	f43f ae70 	beq.w	800a6da <_printf_float+0xb6>
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa06:	f7f6 f86f 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa0a:	b9c0      	cbnz	r0, 800aa3e <_printf_float+0x41a>
 800aa0c:	4653      	mov	r3, sl
 800aa0e:	f108 0201 	add.w	r2, r8, #1
 800aa12:	4631      	mov	r1, r6
 800aa14:	4628      	mov	r0, r5
 800aa16:	47b8      	blx	r7
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d10c      	bne.n	800aa36 <_printf_float+0x412>
 800aa1c:	e65d      	b.n	800a6da <_printf_float+0xb6>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	465a      	mov	r2, fp
 800aa22:	4631      	mov	r1, r6
 800aa24:	4628      	mov	r0, r5
 800aa26:	47b8      	blx	r7
 800aa28:	3001      	adds	r0, #1
 800aa2a:	f43f ae56 	beq.w	800a6da <_printf_float+0xb6>
 800aa2e:	f108 0801 	add.w	r8, r8, #1
 800aa32:	45d0      	cmp	r8, sl
 800aa34:	dbf3      	blt.n	800aa1e <_printf_float+0x3fa>
 800aa36:	464b      	mov	r3, r9
 800aa38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aa3c:	e6df      	b.n	800a7fe <_printf_float+0x1da>
 800aa3e:	f04f 0800 	mov.w	r8, #0
 800aa42:	f104 0b1a 	add.w	fp, r4, #26
 800aa46:	e7f4      	b.n	800aa32 <_printf_float+0x40e>
 800aa48:	2301      	movs	r3, #1
 800aa4a:	4642      	mov	r2, r8
 800aa4c:	e7e1      	b.n	800aa12 <_printf_float+0x3ee>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	464a      	mov	r2, r9
 800aa52:	4631      	mov	r1, r6
 800aa54:	4628      	mov	r0, r5
 800aa56:	47b8      	blx	r7
 800aa58:	3001      	adds	r0, #1
 800aa5a:	f43f ae3e 	beq.w	800a6da <_printf_float+0xb6>
 800aa5e:	f108 0801 	add.w	r8, r8, #1
 800aa62:	68e3      	ldr	r3, [r4, #12]
 800aa64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa66:	1a5b      	subs	r3, r3, r1
 800aa68:	4543      	cmp	r3, r8
 800aa6a:	dcf0      	bgt.n	800aa4e <_printf_float+0x42a>
 800aa6c:	e6fc      	b.n	800a868 <_printf_float+0x244>
 800aa6e:	f04f 0800 	mov.w	r8, #0
 800aa72:	f104 0919 	add.w	r9, r4, #25
 800aa76:	e7f4      	b.n	800aa62 <_printf_float+0x43e>

0800aa78 <_printf_common>:
 800aa78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa7c:	4616      	mov	r6, r2
 800aa7e:	4698      	mov	r8, r3
 800aa80:	688a      	ldr	r2, [r1, #8]
 800aa82:	4607      	mov	r7, r0
 800aa84:	690b      	ldr	r3, [r1, #16]
 800aa86:	460c      	mov	r4, r1
 800aa88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	bfb8      	it	lt
 800aa90:	4613      	movlt	r3, r2
 800aa92:	6033      	str	r3, [r6, #0]
 800aa94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa98:	b10a      	cbz	r2, 800aa9e <_printf_common+0x26>
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	6033      	str	r3, [r6, #0]
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	0699      	lsls	r1, r3, #26
 800aaa2:	bf42      	ittt	mi
 800aaa4:	6833      	ldrmi	r3, [r6, #0]
 800aaa6:	3302      	addmi	r3, #2
 800aaa8:	6033      	strmi	r3, [r6, #0]
 800aaaa:	6825      	ldr	r5, [r4, #0]
 800aaac:	f015 0506 	ands.w	r5, r5, #6
 800aab0:	d106      	bne.n	800aac0 <_printf_common+0x48>
 800aab2:	f104 0a19 	add.w	sl, r4, #25
 800aab6:	68e3      	ldr	r3, [r4, #12]
 800aab8:	6832      	ldr	r2, [r6, #0]
 800aaba:	1a9b      	subs	r3, r3, r2
 800aabc:	42ab      	cmp	r3, r5
 800aabe:	dc2b      	bgt.n	800ab18 <_printf_common+0xa0>
 800aac0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aac4:	6822      	ldr	r2, [r4, #0]
 800aac6:	3b00      	subs	r3, #0
 800aac8:	bf18      	it	ne
 800aaca:	2301      	movne	r3, #1
 800aacc:	0692      	lsls	r2, r2, #26
 800aace:	d430      	bmi.n	800ab32 <_printf_common+0xba>
 800aad0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aad4:	4641      	mov	r1, r8
 800aad6:	4638      	mov	r0, r7
 800aad8:	47c8      	blx	r9
 800aada:	3001      	adds	r0, #1
 800aadc:	d023      	beq.n	800ab26 <_printf_common+0xae>
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	341a      	adds	r4, #26
 800aae2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800aae6:	f003 0306 	and.w	r3, r3, #6
 800aaea:	2b04      	cmp	r3, #4
 800aaec:	bf0a      	itet	eq
 800aaee:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800aaf2:	2500      	movne	r5, #0
 800aaf4:	6833      	ldreq	r3, [r6, #0]
 800aaf6:	f04f 0600 	mov.w	r6, #0
 800aafa:	bf08      	it	eq
 800aafc:	1aed      	subeq	r5, r5, r3
 800aafe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ab02:	bf08      	it	eq
 800ab04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	bfc4      	itt	gt
 800ab0c:	1a9b      	subgt	r3, r3, r2
 800ab0e:	18ed      	addgt	r5, r5, r3
 800ab10:	42b5      	cmp	r5, r6
 800ab12:	d11a      	bne.n	800ab4a <_printf_common+0xd2>
 800ab14:	2000      	movs	r0, #0
 800ab16:	e008      	b.n	800ab2a <_printf_common+0xb2>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	4652      	mov	r2, sl
 800ab1c:	4641      	mov	r1, r8
 800ab1e:	4638      	mov	r0, r7
 800ab20:	47c8      	blx	r9
 800ab22:	3001      	adds	r0, #1
 800ab24:	d103      	bne.n	800ab2e <_printf_common+0xb6>
 800ab26:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab2e:	3501      	adds	r5, #1
 800ab30:	e7c1      	b.n	800aab6 <_printf_common+0x3e>
 800ab32:	18e1      	adds	r1, r4, r3
 800ab34:	1c5a      	adds	r2, r3, #1
 800ab36:	2030      	movs	r0, #48	@ 0x30
 800ab38:	3302      	adds	r3, #2
 800ab3a:	4422      	add	r2, r4
 800ab3c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ab44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ab48:	e7c2      	b.n	800aad0 <_printf_common+0x58>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	4622      	mov	r2, r4
 800ab4e:	4641      	mov	r1, r8
 800ab50:	4638      	mov	r0, r7
 800ab52:	47c8      	blx	r9
 800ab54:	3001      	adds	r0, #1
 800ab56:	d0e6      	beq.n	800ab26 <_printf_common+0xae>
 800ab58:	3601      	adds	r6, #1
 800ab5a:	e7d9      	b.n	800ab10 <_printf_common+0x98>

0800ab5c <_printf_i>:
 800ab5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab60:	7e0f      	ldrb	r7, [r1, #24]
 800ab62:	4691      	mov	r9, r2
 800ab64:	4680      	mov	r8, r0
 800ab66:	460c      	mov	r4, r1
 800ab68:	2f78      	cmp	r7, #120	@ 0x78
 800ab6a:	469a      	mov	sl, r3
 800ab6c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab72:	d807      	bhi.n	800ab84 <_printf_i+0x28>
 800ab74:	2f62      	cmp	r7, #98	@ 0x62
 800ab76:	d80a      	bhi.n	800ab8e <_printf_i+0x32>
 800ab78:	2f00      	cmp	r7, #0
 800ab7a:	f000 80d2 	beq.w	800ad22 <_printf_i+0x1c6>
 800ab7e:	2f58      	cmp	r7, #88	@ 0x58
 800ab80:	f000 80b9 	beq.w	800acf6 <_printf_i+0x19a>
 800ab84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab8c:	e03a      	b.n	800ac04 <_printf_i+0xa8>
 800ab8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab92:	2b15      	cmp	r3, #21
 800ab94:	d8f6      	bhi.n	800ab84 <_printf_i+0x28>
 800ab96:	a101      	add	r1, pc, #4	@ (adr r1, 800ab9c <_printf_i+0x40>)
 800ab98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab9c:	0800abf5 	.word	0x0800abf5
 800aba0:	0800ac09 	.word	0x0800ac09
 800aba4:	0800ab85 	.word	0x0800ab85
 800aba8:	0800ab85 	.word	0x0800ab85
 800abac:	0800ab85 	.word	0x0800ab85
 800abb0:	0800ab85 	.word	0x0800ab85
 800abb4:	0800ac09 	.word	0x0800ac09
 800abb8:	0800ab85 	.word	0x0800ab85
 800abbc:	0800ab85 	.word	0x0800ab85
 800abc0:	0800ab85 	.word	0x0800ab85
 800abc4:	0800ab85 	.word	0x0800ab85
 800abc8:	0800ad09 	.word	0x0800ad09
 800abcc:	0800ac33 	.word	0x0800ac33
 800abd0:	0800acc3 	.word	0x0800acc3
 800abd4:	0800ab85 	.word	0x0800ab85
 800abd8:	0800ab85 	.word	0x0800ab85
 800abdc:	0800ad2b 	.word	0x0800ad2b
 800abe0:	0800ab85 	.word	0x0800ab85
 800abe4:	0800ac33 	.word	0x0800ac33
 800abe8:	0800ab85 	.word	0x0800ab85
 800abec:	0800ab85 	.word	0x0800ab85
 800abf0:	0800accb 	.word	0x0800accb
 800abf4:	6833      	ldr	r3, [r6, #0]
 800abf6:	1d1a      	adds	r2, r3, #4
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	6032      	str	r2, [r6, #0]
 800abfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac04:	2301      	movs	r3, #1
 800ac06:	e09d      	b.n	800ad44 <_printf_i+0x1e8>
 800ac08:	6833      	ldr	r3, [r6, #0]
 800ac0a:	6820      	ldr	r0, [r4, #0]
 800ac0c:	1d19      	adds	r1, r3, #4
 800ac0e:	6031      	str	r1, [r6, #0]
 800ac10:	0606      	lsls	r6, r0, #24
 800ac12:	d501      	bpl.n	800ac18 <_printf_i+0xbc>
 800ac14:	681d      	ldr	r5, [r3, #0]
 800ac16:	e003      	b.n	800ac20 <_printf_i+0xc4>
 800ac18:	0645      	lsls	r5, r0, #25
 800ac1a:	d5fb      	bpl.n	800ac14 <_printf_i+0xb8>
 800ac1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac20:	2d00      	cmp	r5, #0
 800ac22:	da03      	bge.n	800ac2c <_printf_i+0xd0>
 800ac24:	232d      	movs	r3, #45	@ 0x2d
 800ac26:	426d      	negs	r5, r5
 800ac28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac2c:	4859      	ldr	r0, [pc, #356]	@ (800ad94 <_printf_i+0x238>)
 800ac2e:	230a      	movs	r3, #10
 800ac30:	e011      	b.n	800ac56 <_printf_i+0xfa>
 800ac32:	6821      	ldr	r1, [r4, #0]
 800ac34:	6833      	ldr	r3, [r6, #0]
 800ac36:	0608      	lsls	r0, r1, #24
 800ac38:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac3c:	d402      	bmi.n	800ac44 <_printf_i+0xe8>
 800ac3e:	0649      	lsls	r1, r1, #25
 800ac40:	bf48      	it	mi
 800ac42:	b2ad      	uxthmi	r5, r5
 800ac44:	2f6f      	cmp	r7, #111	@ 0x6f
 800ac46:	6033      	str	r3, [r6, #0]
 800ac48:	4852      	ldr	r0, [pc, #328]	@ (800ad94 <_printf_i+0x238>)
 800ac4a:	bf14      	ite	ne
 800ac4c:	230a      	movne	r3, #10
 800ac4e:	2308      	moveq	r3, #8
 800ac50:	2100      	movs	r1, #0
 800ac52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac56:	6866      	ldr	r6, [r4, #4]
 800ac58:	2e00      	cmp	r6, #0
 800ac5a:	60a6      	str	r6, [r4, #8]
 800ac5c:	bfa2      	ittt	ge
 800ac5e:	6821      	ldrge	r1, [r4, #0]
 800ac60:	f021 0104 	bicge.w	r1, r1, #4
 800ac64:	6021      	strge	r1, [r4, #0]
 800ac66:	b90d      	cbnz	r5, 800ac6c <_printf_i+0x110>
 800ac68:	2e00      	cmp	r6, #0
 800ac6a:	d04b      	beq.n	800ad04 <_printf_i+0x1a8>
 800ac6c:	4616      	mov	r6, r2
 800ac6e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac72:	fb03 5711 	mls	r7, r3, r1, r5
 800ac76:	5dc7      	ldrb	r7, [r0, r7]
 800ac78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac7c:	462f      	mov	r7, r5
 800ac7e:	460d      	mov	r5, r1
 800ac80:	42bb      	cmp	r3, r7
 800ac82:	d9f4      	bls.n	800ac6e <_printf_i+0x112>
 800ac84:	2b08      	cmp	r3, #8
 800ac86:	d10b      	bne.n	800aca0 <_printf_i+0x144>
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	07df      	lsls	r7, r3, #31
 800ac8c:	d508      	bpl.n	800aca0 <_printf_i+0x144>
 800ac8e:	6923      	ldr	r3, [r4, #16]
 800ac90:	6861      	ldr	r1, [r4, #4]
 800ac92:	4299      	cmp	r1, r3
 800ac94:	bfde      	ittt	le
 800ac96:	2330      	movle	r3, #48	@ 0x30
 800ac98:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aca0:	1b92      	subs	r2, r2, r6
 800aca2:	6122      	str	r2, [r4, #16]
 800aca4:	464b      	mov	r3, r9
 800aca6:	aa03      	add	r2, sp, #12
 800aca8:	4621      	mov	r1, r4
 800acaa:	4640      	mov	r0, r8
 800acac:	f8cd a000 	str.w	sl, [sp]
 800acb0:	f7ff fee2 	bl	800aa78 <_printf_common>
 800acb4:	3001      	adds	r0, #1
 800acb6:	d14a      	bne.n	800ad4e <_printf_i+0x1f2>
 800acb8:	f04f 30ff 	mov.w	r0, #4294967295
 800acbc:	b004      	add	sp, #16
 800acbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	f043 0320 	orr.w	r3, r3, #32
 800acc8:	6023      	str	r3, [r4, #0]
 800acca:	2778      	movs	r7, #120	@ 0x78
 800accc:	4832      	ldr	r0, [pc, #200]	@ (800ad98 <_printf_i+0x23c>)
 800acce:	6823      	ldr	r3, [r4, #0]
 800acd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800acd4:	061f      	lsls	r7, r3, #24
 800acd6:	6831      	ldr	r1, [r6, #0]
 800acd8:	f851 5b04 	ldr.w	r5, [r1], #4
 800acdc:	d402      	bmi.n	800ace4 <_printf_i+0x188>
 800acde:	065f      	lsls	r7, r3, #25
 800ace0:	bf48      	it	mi
 800ace2:	b2ad      	uxthmi	r5, r5
 800ace4:	6031      	str	r1, [r6, #0]
 800ace6:	07d9      	lsls	r1, r3, #31
 800ace8:	bf44      	itt	mi
 800acea:	f043 0320 	orrmi.w	r3, r3, #32
 800acee:	6023      	strmi	r3, [r4, #0]
 800acf0:	b11d      	cbz	r5, 800acfa <_printf_i+0x19e>
 800acf2:	2310      	movs	r3, #16
 800acf4:	e7ac      	b.n	800ac50 <_printf_i+0xf4>
 800acf6:	4827      	ldr	r0, [pc, #156]	@ (800ad94 <_printf_i+0x238>)
 800acf8:	e7e9      	b.n	800acce <_printf_i+0x172>
 800acfa:	6823      	ldr	r3, [r4, #0]
 800acfc:	f023 0320 	bic.w	r3, r3, #32
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	e7f6      	b.n	800acf2 <_printf_i+0x196>
 800ad04:	4616      	mov	r6, r2
 800ad06:	e7bd      	b.n	800ac84 <_printf_i+0x128>
 800ad08:	6833      	ldr	r3, [r6, #0]
 800ad0a:	6825      	ldr	r5, [r4, #0]
 800ad0c:	1d18      	adds	r0, r3, #4
 800ad0e:	6961      	ldr	r1, [r4, #20]
 800ad10:	6030      	str	r0, [r6, #0]
 800ad12:	062e      	lsls	r6, r5, #24
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	d501      	bpl.n	800ad1c <_printf_i+0x1c0>
 800ad18:	6019      	str	r1, [r3, #0]
 800ad1a:	e002      	b.n	800ad22 <_printf_i+0x1c6>
 800ad1c:	0668      	lsls	r0, r5, #25
 800ad1e:	d5fb      	bpl.n	800ad18 <_printf_i+0x1bc>
 800ad20:	8019      	strh	r1, [r3, #0]
 800ad22:	2300      	movs	r3, #0
 800ad24:	4616      	mov	r6, r2
 800ad26:	6123      	str	r3, [r4, #16]
 800ad28:	e7bc      	b.n	800aca4 <_printf_i+0x148>
 800ad2a:	6833      	ldr	r3, [r6, #0]
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	1d1a      	adds	r2, r3, #4
 800ad30:	6032      	str	r2, [r6, #0]
 800ad32:	681e      	ldr	r6, [r3, #0]
 800ad34:	6862      	ldr	r2, [r4, #4]
 800ad36:	4630      	mov	r0, r6
 800ad38:	f000 fc09 	bl	800b54e <memchr>
 800ad3c:	b108      	cbz	r0, 800ad42 <_printf_i+0x1e6>
 800ad3e:	1b80      	subs	r0, r0, r6
 800ad40:	6060      	str	r0, [r4, #4]
 800ad42:	6863      	ldr	r3, [r4, #4]
 800ad44:	6123      	str	r3, [r4, #16]
 800ad46:	2300      	movs	r3, #0
 800ad48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad4c:	e7aa      	b.n	800aca4 <_printf_i+0x148>
 800ad4e:	6923      	ldr	r3, [r4, #16]
 800ad50:	4632      	mov	r2, r6
 800ad52:	4649      	mov	r1, r9
 800ad54:	4640      	mov	r0, r8
 800ad56:	47d0      	blx	sl
 800ad58:	3001      	adds	r0, #1
 800ad5a:	d0ad      	beq.n	800acb8 <_printf_i+0x15c>
 800ad5c:	6823      	ldr	r3, [r4, #0]
 800ad5e:	079b      	lsls	r3, r3, #30
 800ad60:	d413      	bmi.n	800ad8a <_printf_i+0x22e>
 800ad62:	68e0      	ldr	r0, [r4, #12]
 800ad64:	9b03      	ldr	r3, [sp, #12]
 800ad66:	4298      	cmp	r0, r3
 800ad68:	bfb8      	it	lt
 800ad6a:	4618      	movlt	r0, r3
 800ad6c:	e7a6      	b.n	800acbc <_printf_i+0x160>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	4632      	mov	r2, r6
 800ad72:	4649      	mov	r1, r9
 800ad74:	4640      	mov	r0, r8
 800ad76:	47d0      	blx	sl
 800ad78:	3001      	adds	r0, #1
 800ad7a:	d09d      	beq.n	800acb8 <_printf_i+0x15c>
 800ad7c:	3501      	adds	r5, #1
 800ad7e:	68e3      	ldr	r3, [r4, #12]
 800ad80:	9903      	ldr	r1, [sp, #12]
 800ad82:	1a5b      	subs	r3, r3, r1
 800ad84:	42ab      	cmp	r3, r5
 800ad86:	dcf2      	bgt.n	800ad6e <_printf_i+0x212>
 800ad88:	e7eb      	b.n	800ad62 <_printf_i+0x206>
 800ad8a:	2500      	movs	r5, #0
 800ad8c:	f104 0619 	add.w	r6, r4, #25
 800ad90:	e7f5      	b.n	800ad7e <_printf_i+0x222>
 800ad92:	bf00      	nop
 800ad94:	0800ed2a 	.word	0x0800ed2a
 800ad98:	0800ed3b 	.word	0x0800ed3b

0800ad9c <_scanf_float>:
 800ad9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada0:	b087      	sub	sp, #28
 800ada2:	4617      	mov	r7, r2
 800ada4:	4680      	mov	r8, r0
 800ada6:	460c      	mov	r4, r1
 800ada8:	9303      	str	r3, [sp, #12]
 800adaa:	688b      	ldr	r3, [r1, #8]
 800adac:	1e5a      	subs	r2, r3, #1
 800adae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800adb2:	460a      	mov	r2, r1
 800adb4:	bf89      	itett	hi
 800adb6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800adba:	f04f 0b00 	movls.w	fp, #0
 800adbe:	eb03 0b05 	addhi.w	fp, r3, r5
 800adc2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800adc6:	f04f 0500 	mov.w	r5, #0
 800adca:	bf88      	it	hi
 800adcc:	608b      	strhi	r3, [r1, #8]
 800adce:	680b      	ldr	r3, [r1, #0]
 800add0:	46aa      	mov	sl, r5
 800add2:	46a9      	mov	r9, r5
 800add4:	9502      	str	r5, [sp, #8]
 800add6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800adda:	f842 3b1c 	str.w	r3, [r2], #28
 800adde:	4616      	mov	r6, r2
 800ade0:	9201      	str	r2, [sp, #4]
 800ade2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ade6:	68a2      	ldr	r2, [r4, #8]
 800ade8:	b152      	cbz	r2, 800ae00 <_scanf_float+0x64>
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	2b4e      	cmp	r3, #78	@ 0x4e
 800adf0:	d864      	bhi.n	800aebc <_scanf_float+0x120>
 800adf2:	2b40      	cmp	r3, #64	@ 0x40
 800adf4:	d83c      	bhi.n	800ae70 <_scanf_float+0xd4>
 800adf6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800adfa:	b2c8      	uxtb	r0, r1
 800adfc:	280e      	cmp	r0, #14
 800adfe:	d93a      	bls.n	800ae76 <_scanf_float+0xda>
 800ae00:	f1b9 0f00 	cmp.w	r9, #0
 800ae04:	d003      	beq.n	800ae0e <_scanf_float+0x72>
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae12:	f1ba 0f01 	cmp.w	sl, #1
 800ae16:	f200 8117 	bhi.w	800b048 <_scanf_float+0x2ac>
 800ae1a:	9b01      	ldr	r3, [sp, #4]
 800ae1c:	429e      	cmp	r6, r3
 800ae1e:	f200 8108 	bhi.w	800b032 <_scanf_float+0x296>
 800ae22:	2001      	movs	r0, #1
 800ae24:	b007      	add	sp, #28
 800ae26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ae2e:	2a0d      	cmp	r2, #13
 800ae30:	d8e6      	bhi.n	800ae00 <_scanf_float+0x64>
 800ae32:	a101      	add	r1, pc, #4	@ (adr r1, 800ae38 <_scanf_float+0x9c>)
 800ae34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ae38:	0800af7f 	.word	0x0800af7f
 800ae3c:	0800ae01 	.word	0x0800ae01
 800ae40:	0800ae01 	.word	0x0800ae01
 800ae44:	0800ae01 	.word	0x0800ae01
 800ae48:	0800afdf 	.word	0x0800afdf
 800ae4c:	0800afb7 	.word	0x0800afb7
 800ae50:	0800ae01 	.word	0x0800ae01
 800ae54:	0800ae01 	.word	0x0800ae01
 800ae58:	0800af8d 	.word	0x0800af8d
 800ae5c:	0800ae01 	.word	0x0800ae01
 800ae60:	0800ae01 	.word	0x0800ae01
 800ae64:	0800ae01 	.word	0x0800ae01
 800ae68:	0800ae01 	.word	0x0800ae01
 800ae6c:	0800af45 	.word	0x0800af45
 800ae70:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ae74:	e7db      	b.n	800ae2e <_scanf_float+0x92>
 800ae76:	290e      	cmp	r1, #14
 800ae78:	d8c2      	bhi.n	800ae00 <_scanf_float+0x64>
 800ae7a:	a001      	add	r0, pc, #4	@ (adr r0, 800ae80 <_scanf_float+0xe4>)
 800ae7c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ae80:	0800af35 	.word	0x0800af35
 800ae84:	0800ae01 	.word	0x0800ae01
 800ae88:	0800af35 	.word	0x0800af35
 800ae8c:	0800afcb 	.word	0x0800afcb
 800ae90:	0800ae01 	.word	0x0800ae01
 800ae94:	0800aedd 	.word	0x0800aedd
 800ae98:	0800af1b 	.word	0x0800af1b
 800ae9c:	0800af1b 	.word	0x0800af1b
 800aea0:	0800af1b 	.word	0x0800af1b
 800aea4:	0800af1b 	.word	0x0800af1b
 800aea8:	0800af1b 	.word	0x0800af1b
 800aeac:	0800af1b 	.word	0x0800af1b
 800aeb0:	0800af1b 	.word	0x0800af1b
 800aeb4:	0800af1b 	.word	0x0800af1b
 800aeb8:	0800af1b 	.word	0x0800af1b
 800aebc:	2b6e      	cmp	r3, #110	@ 0x6e
 800aebe:	d809      	bhi.n	800aed4 <_scanf_float+0x138>
 800aec0:	2b60      	cmp	r3, #96	@ 0x60
 800aec2:	d8b2      	bhi.n	800ae2a <_scanf_float+0x8e>
 800aec4:	2b54      	cmp	r3, #84	@ 0x54
 800aec6:	d07b      	beq.n	800afc0 <_scanf_float+0x224>
 800aec8:	2b59      	cmp	r3, #89	@ 0x59
 800aeca:	d199      	bne.n	800ae00 <_scanf_float+0x64>
 800aecc:	2d07      	cmp	r5, #7
 800aece:	d197      	bne.n	800ae00 <_scanf_float+0x64>
 800aed0:	2508      	movs	r5, #8
 800aed2:	e02c      	b.n	800af2e <_scanf_float+0x192>
 800aed4:	2b74      	cmp	r3, #116	@ 0x74
 800aed6:	d073      	beq.n	800afc0 <_scanf_float+0x224>
 800aed8:	2b79      	cmp	r3, #121	@ 0x79
 800aeda:	e7f6      	b.n	800aeca <_scanf_float+0x12e>
 800aedc:	6821      	ldr	r1, [r4, #0]
 800aede:	05c8      	lsls	r0, r1, #23
 800aee0:	d51b      	bpl.n	800af1a <_scanf_float+0x17e>
 800aee2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800aee6:	f109 0901 	add.w	r9, r9, #1
 800aeea:	6021      	str	r1, [r4, #0]
 800aeec:	f1bb 0f00 	cmp.w	fp, #0
 800aef0:	d003      	beq.n	800aefa <_scanf_float+0x15e>
 800aef2:	3201      	adds	r2, #1
 800aef4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aef8:	60a2      	str	r2, [r4, #8]
 800aefa:	68a3      	ldr	r3, [r4, #8]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	60a3      	str	r3, [r4, #8]
 800af00:	6923      	ldr	r3, [r4, #16]
 800af02:	3301      	adds	r3, #1
 800af04:	6123      	str	r3, [r4, #16]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	3b01      	subs	r3, #1
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	607b      	str	r3, [r7, #4]
 800af0e:	f340 8087 	ble.w	800b020 <_scanf_float+0x284>
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	3301      	adds	r3, #1
 800af16:	603b      	str	r3, [r7, #0]
 800af18:	e765      	b.n	800ade6 <_scanf_float+0x4a>
 800af1a:	eb1a 0105 	adds.w	r1, sl, r5
 800af1e:	f47f af6f 	bne.w	800ae00 <_scanf_float+0x64>
 800af22:	6822      	ldr	r2, [r4, #0]
 800af24:	460d      	mov	r5, r1
 800af26:	468a      	mov	sl, r1
 800af28:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800af2c:	6022      	str	r2, [r4, #0]
 800af2e:	f806 3b01 	strb.w	r3, [r6], #1
 800af32:	e7e2      	b.n	800aefa <_scanf_float+0x15e>
 800af34:	6822      	ldr	r2, [r4, #0]
 800af36:	0610      	lsls	r0, r2, #24
 800af38:	f57f af62 	bpl.w	800ae00 <_scanf_float+0x64>
 800af3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800af40:	6022      	str	r2, [r4, #0]
 800af42:	e7f4      	b.n	800af2e <_scanf_float+0x192>
 800af44:	f1ba 0f00 	cmp.w	sl, #0
 800af48:	d10e      	bne.n	800af68 <_scanf_float+0x1cc>
 800af4a:	f1b9 0f00 	cmp.w	r9, #0
 800af4e:	d10e      	bne.n	800af6e <_scanf_float+0x1d2>
 800af50:	6822      	ldr	r2, [r4, #0]
 800af52:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800af56:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800af5a:	d108      	bne.n	800af6e <_scanf_float+0x1d2>
 800af5c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800af60:	f04f 0a01 	mov.w	sl, #1
 800af64:	6022      	str	r2, [r4, #0]
 800af66:	e7e2      	b.n	800af2e <_scanf_float+0x192>
 800af68:	f1ba 0f02 	cmp.w	sl, #2
 800af6c:	d055      	beq.n	800b01a <_scanf_float+0x27e>
 800af6e:	2d01      	cmp	r5, #1
 800af70:	d002      	beq.n	800af78 <_scanf_float+0x1dc>
 800af72:	2d04      	cmp	r5, #4
 800af74:	f47f af44 	bne.w	800ae00 <_scanf_float+0x64>
 800af78:	3501      	adds	r5, #1
 800af7a:	b2ed      	uxtb	r5, r5
 800af7c:	e7d7      	b.n	800af2e <_scanf_float+0x192>
 800af7e:	f1ba 0f01 	cmp.w	sl, #1
 800af82:	f47f af3d 	bne.w	800ae00 <_scanf_float+0x64>
 800af86:	f04f 0a02 	mov.w	sl, #2
 800af8a:	e7d0      	b.n	800af2e <_scanf_float+0x192>
 800af8c:	b97d      	cbnz	r5, 800afae <_scanf_float+0x212>
 800af8e:	f1b9 0f00 	cmp.w	r9, #0
 800af92:	f47f af38 	bne.w	800ae06 <_scanf_float+0x6a>
 800af96:	6822      	ldr	r2, [r4, #0]
 800af98:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800af9c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800afa0:	f040 8107 	bne.w	800b1b2 <_scanf_float+0x416>
 800afa4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800afa8:	2501      	movs	r5, #1
 800afaa:	6022      	str	r2, [r4, #0]
 800afac:	e7bf      	b.n	800af2e <_scanf_float+0x192>
 800afae:	2d03      	cmp	r5, #3
 800afb0:	d0e2      	beq.n	800af78 <_scanf_float+0x1dc>
 800afb2:	2d05      	cmp	r5, #5
 800afb4:	e7de      	b.n	800af74 <_scanf_float+0x1d8>
 800afb6:	2d02      	cmp	r5, #2
 800afb8:	f47f af22 	bne.w	800ae00 <_scanf_float+0x64>
 800afbc:	2503      	movs	r5, #3
 800afbe:	e7b6      	b.n	800af2e <_scanf_float+0x192>
 800afc0:	2d06      	cmp	r5, #6
 800afc2:	f47f af1d 	bne.w	800ae00 <_scanf_float+0x64>
 800afc6:	2507      	movs	r5, #7
 800afc8:	e7b1      	b.n	800af2e <_scanf_float+0x192>
 800afca:	6822      	ldr	r2, [r4, #0]
 800afcc:	0591      	lsls	r1, r2, #22
 800afce:	f57f af17 	bpl.w	800ae00 <_scanf_float+0x64>
 800afd2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800afd6:	f8cd 9008 	str.w	r9, [sp, #8]
 800afda:	6022      	str	r2, [r4, #0]
 800afdc:	e7a7      	b.n	800af2e <_scanf_float+0x192>
 800afde:	6822      	ldr	r2, [r4, #0]
 800afe0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800afe4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800afe8:	d006      	beq.n	800aff8 <_scanf_float+0x25c>
 800afea:	0550      	lsls	r0, r2, #21
 800afec:	f57f af08 	bpl.w	800ae00 <_scanf_float+0x64>
 800aff0:	f1b9 0f00 	cmp.w	r9, #0
 800aff4:	f000 80dd 	beq.w	800b1b2 <_scanf_float+0x416>
 800aff8:	0591      	lsls	r1, r2, #22
 800affa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800affe:	bf58      	it	pl
 800b000:	9902      	ldrpl	r1, [sp, #8]
 800b002:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b006:	bf58      	it	pl
 800b008:	eba9 0101 	subpl.w	r1, r9, r1
 800b00c:	6022      	str	r2, [r4, #0]
 800b00e:	f04f 0900 	mov.w	r9, #0
 800b012:	bf58      	it	pl
 800b014:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b018:	e789      	b.n	800af2e <_scanf_float+0x192>
 800b01a:	f04f 0a03 	mov.w	sl, #3
 800b01e:	e786      	b.n	800af2e <_scanf_float+0x192>
 800b020:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b024:	4639      	mov	r1, r7
 800b026:	4640      	mov	r0, r8
 800b028:	4798      	blx	r3
 800b02a:	2800      	cmp	r0, #0
 800b02c:	f43f aedb 	beq.w	800ade6 <_scanf_float+0x4a>
 800b030:	e6e6      	b.n	800ae00 <_scanf_float+0x64>
 800b032:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b036:	463a      	mov	r2, r7
 800b038:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b03c:	4640      	mov	r0, r8
 800b03e:	4798      	blx	r3
 800b040:	6923      	ldr	r3, [r4, #16]
 800b042:	3b01      	subs	r3, #1
 800b044:	6123      	str	r3, [r4, #16]
 800b046:	e6e8      	b.n	800ae1a <_scanf_float+0x7e>
 800b048:	1e6b      	subs	r3, r5, #1
 800b04a:	2b06      	cmp	r3, #6
 800b04c:	d824      	bhi.n	800b098 <_scanf_float+0x2fc>
 800b04e:	2d02      	cmp	r5, #2
 800b050:	d836      	bhi.n	800b0c0 <_scanf_float+0x324>
 800b052:	9b01      	ldr	r3, [sp, #4]
 800b054:	429e      	cmp	r6, r3
 800b056:	f67f aee4 	bls.w	800ae22 <_scanf_float+0x86>
 800b05a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b05e:	463a      	mov	r2, r7
 800b060:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b064:	4640      	mov	r0, r8
 800b066:	4798      	blx	r3
 800b068:	6923      	ldr	r3, [r4, #16]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	6123      	str	r3, [r4, #16]
 800b06e:	e7f0      	b.n	800b052 <_scanf_float+0x2b6>
 800b070:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b074:	463a      	mov	r2, r7
 800b076:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b07a:	4640      	mov	r0, r8
 800b07c:	4798      	blx	r3
 800b07e:	6923      	ldr	r3, [r4, #16]
 800b080:	3b01      	subs	r3, #1
 800b082:	6123      	str	r3, [r4, #16]
 800b084:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b088:	fa5f fa8a 	uxtb.w	sl, sl
 800b08c:	f1ba 0f02 	cmp.w	sl, #2
 800b090:	d1ee      	bne.n	800b070 <_scanf_float+0x2d4>
 800b092:	3d03      	subs	r5, #3
 800b094:	b2ed      	uxtb	r5, r5
 800b096:	1b76      	subs	r6, r6, r5
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	05da      	lsls	r2, r3, #23
 800b09c:	d52f      	bpl.n	800b0fe <_scanf_float+0x362>
 800b09e:	055b      	lsls	r3, r3, #21
 800b0a0:	d511      	bpl.n	800b0c6 <_scanf_float+0x32a>
 800b0a2:	9b01      	ldr	r3, [sp, #4]
 800b0a4:	429e      	cmp	r6, r3
 800b0a6:	f67f aebc 	bls.w	800ae22 <_scanf_float+0x86>
 800b0aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0ae:	463a      	mov	r2, r7
 800b0b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b0b4:	4640      	mov	r0, r8
 800b0b6:	4798      	blx	r3
 800b0b8:	6923      	ldr	r3, [r4, #16]
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	6123      	str	r3, [r4, #16]
 800b0be:	e7f0      	b.n	800b0a2 <_scanf_float+0x306>
 800b0c0:	46aa      	mov	sl, r5
 800b0c2:	46b3      	mov	fp, r6
 800b0c4:	e7de      	b.n	800b084 <_scanf_float+0x2e8>
 800b0c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b0ca:	1e75      	subs	r5, r6, #1
 800b0cc:	6923      	ldr	r3, [r4, #16]
 800b0ce:	2965      	cmp	r1, #101	@ 0x65
 800b0d0:	f103 33ff 	add.w	r3, r3, #4294967295
 800b0d4:	6123      	str	r3, [r4, #16]
 800b0d6:	d00c      	beq.n	800b0f2 <_scanf_float+0x356>
 800b0d8:	2945      	cmp	r1, #69	@ 0x45
 800b0da:	d00a      	beq.n	800b0f2 <_scanf_float+0x356>
 800b0dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0e0:	463a      	mov	r2, r7
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	1eb5      	subs	r5, r6, #2
 800b0e6:	4798      	blx	r3
 800b0e8:	6923      	ldr	r3, [r4, #16]
 800b0ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	6123      	str	r3, [r4, #16]
 800b0f2:	462e      	mov	r6, r5
 800b0f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0f8:	463a      	mov	r2, r7
 800b0fa:	4640      	mov	r0, r8
 800b0fc:	4798      	blx	r3
 800b0fe:	6822      	ldr	r2, [r4, #0]
 800b100:	f012 0210 	ands.w	r2, r2, #16
 800b104:	d001      	beq.n	800b10a <_scanf_float+0x36e>
 800b106:	2000      	movs	r0, #0
 800b108:	e68c      	b.n	800ae24 <_scanf_float+0x88>
 800b10a:	7032      	strb	r2, [r6, #0]
 800b10c:	6823      	ldr	r3, [r4, #0]
 800b10e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b116:	d11c      	bne.n	800b152 <_scanf_float+0x3b6>
 800b118:	9b02      	ldr	r3, [sp, #8]
 800b11a:	454b      	cmp	r3, r9
 800b11c:	eba3 0209 	sub.w	r2, r3, r9
 800b120:	d123      	bne.n	800b16a <_scanf_float+0x3ce>
 800b122:	2200      	movs	r2, #0
 800b124:	9901      	ldr	r1, [sp, #4]
 800b126:	4640      	mov	r0, r8
 800b128:	f002 fb82 	bl	800d830 <_strtod_r>
 800b12c:	6821      	ldr	r1, [r4, #0]
 800b12e:	9b03      	ldr	r3, [sp, #12]
 800b130:	f011 0f02 	tst.w	r1, #2
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	ec57 6b10 	vmov	r6, r7, d0
 800b13a:	f103 0204 	add.w	r2, r3, #4
 800b13e:	d01f      	beq.n	800b180 <_scanf_float+0x3e4>
 800b140:	9903      	ldr	r1, [sp, #12]
 800b142:	600a      	str	r2, [r1, #0]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	e9c3 6700 	strd	r6, r7, [r3]
 800b14a:	68e3      	ldr	r3, [r4, #12]
 800b14c:	3301      	adds	r3, #1
 800b14e:	60e3      	str	r3, [r4, #12]
 800b150:	e7d9      	b.n	800b106 <_scanf_float+0x36a>
 800b152:	9b04      	ldr	r3, [sp, #16]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d0e4      	beq.n	800b122 <_scanf_float+0x386>
 800b158:	9905      	ldr	r1, [sp, #20]
 800b15a:	230a      	movs	r3, #10
 800b15c:	4640      	mov	r0, r8
 800b15e:	3101      	adds	r1, #1
 800b160:	f002 fbe6 	bl	800d930 <_strtol_r>
 800b164:	9b04      	ldr	r3, [sp, #16]
 800b166:	9e05      	ldr	r6, [sp, #20]
 800b168:	1ac2      	subs	r2, r0, r3
 800b16a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b16e:	4912      	ldr	r1, [pc, #72]	@ (800b1b8 <_scanf_float+0x41c>)
 800b170:	429e      	cmp	r6, r3
 800b172:	bf28      	it	cs
 800b174:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b178:	4630      	mov	r0, r6
 800b17a:	f000 f8f5 	bl	800b368 <siprintf>
 800b17e:	e7d0      	b.n	800b122 <_scanf_float+0x386>
 800b180:	f011 0f04 	tst.w	r1, #4
 800b184:	9903      	ldr	r1, [sp, #12]
 800b186:	600a      	str	r2, [r1, #0]
 800b188:	d1dc      	bne.n	800b144 <_scanf_float+0x3a8>
 800b18a:	681d      	ldr	r5, [r3, #0]
 800b18c:	4632      	mov	r2, r6
 800b18e:	463b      	mov	r3, r7
 800b190:	4630      	mov	r0, r6
 800b192:	4639      	mov	r1, r7
 800b194:	f7f5 fcda 	bl	8000b4c <__aeabi_dcmpun>
 800b198:	b128      	cbz	r0, 800b1a6 <_scanf_float+0x40a>
 800b19a:	4808      	ldr	r0, [pc, #32]	@ (800b1bc <_scanf_float+0x420>)
 800b19c:	f000 f9e6 	bl	800b56c <nanf>
 800b1a0:	ed85 0a00 	vstr	s0, [r5]
 800b1a4:	e7d1      	b.n	800b14a <_scanf_float+0x3ae>
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	4639      	mov	r1, r7
 800b1aa:	f7f5 fd2d 	bl	8000c08 <__aeabi_d2f>
 800b1ae:	6028      	str	r0, [r5, #0]
 800b1b0:	e7cb      	b.n	800b14a <_scanf_float+0x3ae>
 800b1b2:	f04f 0900 	mov.w	r9, #0
 800b1b6:	e62a      	b.n	800ae0e <_scanf_float+0x72>
 800b1b8:	0800ed4c 	.word	0x0800ed4c
 800b1bc:	0800f0e5 	.word	0x0800f0e5

0800b1c0 <std>:
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	b510      	push	{r4, lr}
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	6083      	str	r3, [r0, #8]
 800b1c8:	8181      	strh	r1, [r0, #12]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6643      	str	r3, [r0, #100]	@ 0x64
 800b1ce:	81c2      	strh	r2, [r0, #14]
 800b1d0:	2208      	movs	r2, #8
 800b1d2:	6183      	str	r3, [r0, #24]
 800b1d4:	e9c0 3300 	strd	r3, r3, [r0]
 800b1d8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1dc:	305c      	adds	r0, #92	@ 0x5c
 800b1de:	f000 f926 	bl	800b42e <memset>
 800b1e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b218 <std+0x58>)
 800b1e4:	6224      	str	r4, [r4, #32]
 800b1e6:	6263      	str	r3, [r4, #36]	@ 0x24
 800b1e8:	4b0c      	ldr	r3, [pc, #48]	@ (800b21c <std+0x5c>)
 800b1ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b1ec:	4b0c      	ldr	r3, [pc, #48]	@ (800b220 <std+0x60>)
 800b1ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b1f0:	4b0c      	ldr	r3, [pc, #48]	@ (800b224 <std+0x64>)
 800b1f2:	6323      	str	r3, [r4, #48]	@ 0x30
 800b1f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b228 <std+0x68>)
 800b1f6:	429c      	cmp	r4, r3
 800b1f8:	d006      	beq.n	800b208 <std+0x48>
 800b1fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b1fe:	4294      	cmp	r4, r2
 800b200:	d002      	beq.n	800b208 <std+0x48>
 800b202:	33d0      	adds	r3, #208	@ 0xd0
 800b204:	429c      	cmp	r4, r3
 800b206:	d105      	bne.n	800b214 <std+0x54>
 800b208:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b210:	f000 b99a 	b.w	800b548 <__retarget_lock_init_recursive>
 800b214:	bd10      	pop	{r4, pc}
 800b216:	bf00      	nop
 800b218:	0800b3a9 	.word	0x0800b3a9
 800b21c:	0800b3cb 	.word	0x0800b3cb
 800b220:	0800b403 	.word	0x0800b403
 800b224:	0800b427 	.word	0x0800b427
 800b228:	200004bc 	.word	0x200004bc

0800b22c <stdio_exit_handler>:
 800b22c:	4a02      	ldr	r2, [pc, #8]	@ (800b238 <stdio_exit_handler+0xc>)
 800b22e:	4903      	ldr	r1, [pc, #12]	@ (800b23c <stdio_exit_handler+0x10>)
 800b230:	4803      	ldr	r0, [pc, #12]	@ (800b240 <stdio_exit_handler+0x14>)
 800b232:	f000 b869 	b.w	800b308 <_fwalk_sglue>
 800b236:	bf00      	nop
 800b238:	20000050 	.word	0x20000050
 800b23c:	0800df71 	.word	0x0800df71
 800b240:	20000060 	.word	0x20000060

0800b244 <cleanup_stdio>:
 800b244:	6841      	ldr	r1, [r0, #4]
 800b246:	4b0c      	ldr	r3, [pc, #48]	@ (800b278 <cleanup_stdio+0x34>)
 800b248:	4299      	cmp	r1, r3
 800b24a:	b510      	push	{r4, lr}
 800b24c:	4604      	mov	r4, r0
 800b24e:	d001      	beq.n	800b254 <cleanup_stdio+0x10>
 800b250:	f002 fe8e 	bl	800df70 <_fflush_r>
 800b254:	68a1      	ldr	r1, [r4, #8]
 800b256:	4b09      	ldr	r3, [pc, #36]	@ (800b27c <cleanup_stdio+0x38>)
 800b258:	4299      	cmp	r1, r3
 800b25a:	d002      	beq.n	800b262 <cleanup_stdio+0x1e>
 800b25c:	4620      	mov	r0, r4
 800b25e:	f002 fe87 	bl	800df70 <_fflush_r>
 800b262:	68e1      	ldr	r1, [r4, #12]
 800b264:	4b06      	ldr	r3, [pc, #24]	@ (800b280 <cleanup_stdio+0x3c>)
 800b266:	4299      	cmp	r1, r3
 800b268:	d004      	beq.n	800b274 <cleanup_stdio+0x30>
 800b26a:	4620      	mov	r0, r4
 800b26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b270:	f002 be7e 	b.w	800df70 <_fflush_r>
 800b274:	bd10      	pop	{r4, pc}
 800b276:	bf00      	nop
 800b278:	200004bc 	.word	0x200004bc
 800b27c:	20000524 	.word	0x20000524
 800b280:	2000058c 	.word	0x2000058c

0800b284 <global_stdio_init.part.0>:
 800b284:	b510      	push	{r4, lr}
 800b286:	4b0b      	ldr	r3, [pc, #44]	@ (800b2b4 <global_stdio_init.part.0+0x30>)
 800b288:	2104      	movs	r1, #4
 800b28a:	4c0b      	ldr	r4, [pc, #44]	@ (800b2b8 <global_stdio_init.part.0+0x34>)
 800b28c:	4a0b      	ldr	r2, [pc, #44]	@ (800b2bc <global_stdio_init.part.0+0x38>)
 800b28e:	4620      	mov	r0, r4
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	2200      	movs	r2, #0
 800b294:	f7ff ff94 	bl	800b1c0 <std>
 800b298:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b29c:	2201      	movs	r2, #1
 800b29e:	2109      	movs	r1, #9
 800b2a0:	f7ff ff8e 	bl	800b1c0 <std>
 800b2a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b2a8:	2202      	movs	r2, #2
 800b2aa:	2112      	movs	r1, #18
 800b2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2b0:	f7ff bf86 	b.w	800b1c0 <std>
 800b2b4:	200005f4 	.word	0x200005f4
 800b2b8:	200004bc 	.word	0x200004bc
 800b2bc:	0800b22d 	.word	0x0800b22d

0800b2c0 <__sfp_lock_acquire>:
 800b2c0:	4801      	ldr	r0, [pc, #4]	@ (800b2c8 <__sfp_lock_acquire+0x8>)
 800b2c2:	f000 b942 	b.w	800b54a <__retarget_lock_acquire_recursive>
 800b2c6:	bf00      	nop
 800b2c8:	200005fd 	.word	0x200005fd

0800b2cc <__sfp_lock_release>:
 800b2cc:	4801      	ldr	r0, [pc, #4]	@ (800b2d4 <__sfp_lock_release+0x8>)
 800b2ce:	f000 b93d 	b.w	800b54c <__retarget_lock_release_recursive>
 800b2d2:	bf00      	nop
 800b2d4:	200005fd 	.word	0x200005fd

0800b2d8 <__sinit>:
 800b2d8:	b510      	push	{r4, lr}
 800b2da:	4604      	mov	r4, r0
 800b2dc:	f7ff fff0 	bl	800b2c0 <__sfp_lock_acquire>
 800b2e0:	6a23      	ldr	r3, [r4, #32]
 800b2e2:	b11b      	cbz	r3, 800b2ec <__sinit+0x14>
 800b2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2e8:	f7ff bff0 	b.w	800b2cc <__sfp_lock_release>
 800b2ec:	4b04      	ldr	r3, [pc, #16]	@ (800b300 <__sinit+0x28>)
 800b2ee:	6223      	str	r3, [r4, #32]
 800b2f0:	4b04      	ldr	r3, [pc, #16]	@ (800b304 <__sinit+0x2c>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1f5      	bne.n	800b2e4 <__sinit+0xc>
 800b2f8:	f7ff ffc4 	bl	800b284 <global_stdio_init.part.0>
 800b2fc:	e7f2      	b.n	800b2e4 <__sinit+0xc>
 800b2fe:	bf00      	nop
 800b300:	0800b245 	.word	0x0800b245
 800b304:	200005f4 	.word	0x200005f4

0800b308 <_fwalk_sglue>:
 800b308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b30c:	4607      	mov	r7, r0
 800b30e:	4688      	mov	r8, r1
 800b310:	4614      	mov	r4, r2
 800b312:	2600      	movs	r6, #0
 800b314:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b318:	f1b9 0901 	subs.w	r9, r9, #1
 800b31c:	d505      	bpl.n	800b32a <_fwalk_sglue+0x22>
 800b31e:	6824      	ldr	r4, [r4, #0]
 800b320:	2c00      	cmp	r4, #0
 800b322:	d1f7      	bne.n	800b314 <_fwalk_sglue+0xc>
 800b324:	4630      	mov	r0, r6
 800b326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b32a:	89ab      	ldrh	r3, [r5, #12]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d907      	bls.n	800b340 <_fwalk_sglue+0x38>
 800b330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b334:	3301      	adds	r3, #1
 800b336:	d003      	beq.n	800b340 <_fwalk_sglue+0x38>
 800b338:	4629      	mov	r1, r5
 800b33a:	4638      	mov	r0, r7
 800b33c:	47c0      	blx	r8
 800b33e:	4306      	orrs	r6, r0
 800b340:	3568      	adds	r5, #104	@ 0x68
 800b342:	e7e9      	b.n	800b318 <_fwalk_sglue+0x10>

0800b344 <iprintf>:
 800b344:	b40f      	push	{r0, r1, r2, r3}
 800b346:	b507      	push	{r0, r1, r2, lr}
 800b348:	4906      	ldr	r1, [pc, #24]	@ (800b364 <iprintf+0x20>)
 800b34a:	ab04      	add	r3, sp, #16
 800b34c:	6808      	ldr	r0, [r1, #0]
 800b34e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b352:	6881      	ldr	r1, [r0, #8]
 800b354:	9301      	str	r3, [sp, #4]
 800b356:	f002 fc6f 	bl	800dc38 <_vfiprintf_r>
 800b35a:	b003      	add	sp, #12
 800b35c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b360:	b004      	add	sp, #16
 800b362:	4770      	bx	lr
 800b364:	2000005c 	.word	0x2000005c

0800b368 <siprintf>:
 800b368:	b40e      	push	{r1, r2, r3}
 800b36a:	b500      	push	{lr}
 800b36c:	b09c      	sub	sp, #112	@ 0x70
 800b36e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b372:	ab1d      	add	r3, sp, #116	@ 0x74
 800b374:	9002      	str	r0, [sp, #8]
 800b376:	9006      	str	r0, [sp, #24]
 800b378:	9107      	str	r1, [sp, #28]
 800b37a:	9104      	str	r1, [sp, #16]
 800b37c:	4808      	ldr	r0, [pc, #32]	@ (800b3a0 <siprintf+0x38>)
 800b37e:	4909      	ldr	r1, [pc, #36]	@ (800b3a4 <siprintf+0x3c>)
 800b380:	f853 2b04 	ldr.w	r2, [r3], #4
 800b384:	9105      	str	r1, [sp, #20]
 800b386:	a902      	add	r1, sp, #8
 800b388:	6800      	ldr	r0, [r0, #0]
 800b38a:	9301      	str	r3, [sp, #4]
 800b38c:	f002 fb2e 	bl	800d9ec <_svfiprintf_r>
 800b390:	9b02      	ldr	r3, [sp, #8]
 800b392:	2200      	movs	r2, #0
 800b394:	701a      	strb	r2, [r3, #0]
 800b396:	b01c      	add	sp, #112	@ 0x70
 800b398:	f85d eb04 	ldr.w	lr, [sp], #4
 800b39c:	b003      	add	sp, #12
 800b39e:	4770      	bx	lr
 800b3a0:	2000005c 	.word	0x2000005c
 800b3a4:	ffff0208 	.word	0xffff0208

0800b3a8 <__sread>:
 800b3a8:	b510      	push	{r4, lr}
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b0:	f000 f86c 	bl	800b48c <_read_r>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	bfab      	itete	ge
 800b3b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b3ba:	89a3      	ldrhlt	r3, [r4, #12]
 800b3bc:	181b      	addge	r3, r3, r0
 800b3be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b3c2:	bfac      	ite	ge
 800b3c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3c6:	81a3      	strhlt	r3, [r4, #12]
 800b3c8:	bd10      	pop	{r4, pc}

0800b3ca <__swrite>:
 800b3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ce:	461f      	mov	r7, r3
 800b3d0:	898b      	ldrh	r3, [r1, #12]
 800b3d2:	4605      	mov	r5, r0
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	05db      	lsls	r3, r3, #23
 800b3d8:	4616      	mov	r6, r2
 800b3da:	d505      	bpl.n	800b3e8 <__swrite+0x1e>
 800b3dc:	2302      	movs	r3, #2
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3e4:	f000 f840 	bl	800b468 <_lseek_r>
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	4632      	mov	r2, r6
 800b3ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3f6:	81a3      	strh	r3, [r4, #12]
 800b3f8:	463b      	mov	r3, r7
 800b3fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3fe:	f000 b867 	b.w	800b4d0 <_write_r>

0800b402 <__sseek>:
 800b402:	b510      	push	{r4, lr}
 800b404:	460c      	mov	r4, r1
 800b406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b40a:	f000 f82d 	bl	800b468 <_lseek_r>
 800b40e:	1c43      	adds	r3, r0, #1
 800b410:	89a3      	ldrh	r3, [r4, #12]
 800b412:	bf15      	itete	ne
 800b414:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b416:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b41a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b41e:	81a3      	strheq	r3, [r4, #12]
 800b420:	bf18      	it	ne
 800b422:	81a3      	strhne	r3, [r4, #12]
 800b424:	bd10      	pop	{r4, pc}

0800b426 <__sclose>:
 800b426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b42a:	f000 b80d 	b.w	800b448 <_close_r>

0800b42e <memset>:
 800b42e:	4402      	add	r2, r0
 800b430:	4603      	mov	r3, r0
 800b432:	4293      	cmp	r3, r2
 800b434:	d100      	bne.n	800b438 <memset+0xa>
 800b436:	4770      	bx	lr
 800b438:	f803 1b01 	strb.w	r1, [r3], #1
 800b43c:	e7f9      	b.n	800b432 <memset+0x4>
	...

0800b440 <_localeconv_r>:
 800b440:	4800      	ldr	r0, [pc, #0]	@ (800b444 <_localeconv_r+0x4>)
 800b442:	4770      	bx	lr
 800b444:	2000019c 	.word	0x2000019c

0800b448 <_close_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	2300      	movs	r3, #0
 800b44c:	4d05      	ldr	r5, [pc, #20]	@ (800b464 <_close_r+0x1c>)
 800b44e:	4604      	mov	r4, r0
 800b450:	4608      	mov	r0, r1
 800b452:	602b      	str	r3, [r5, #0]
 800b454:	f7f7 fdcc 	bl	8002ff0 <_close>
 800b458:	1c43      	adds	r3, r0, #1
 800b45a:	d102      	bne.n	800b462 <_close_r+0x1a>
 800b45c:	682b      	ldr	r3, [r5, #0]
 800b45e:	b103      	cbz	r3, 800b462 <_close_r+0x1a>
 800b460:	6023      	str	r3, [r4, #0]
 800b462:	bd38      	pop	{r3, r4, r5, pc}
 800b464:	200005f8 	.word	0x200005f8

0800b468 <_lseek_r>:
 800b468:	b538      	push	{r3, r4, r5, lr}
 800b46a:	4604      	mov	r4, r0
 800b46c:	4d06      	ldr	r5, [pc, #24]	@ (800b488 <_lseek_r+0x20>)
 800b46e:	4608      	mov	r0, r1
 800b470:	4611      	mov	r1, r2
 800b472:	2200      	movs	r2, #0
 800b474:	602a      	str	r2, [r5, #0]
 800b476:	461a      	mov	r2, r3
 800b478:	f7f7 fde1 	bl	800303e <_lseek>
 800b47c:	1c43      	adds	r3, r0, #1
 800b47e:	d102      	bne.n	800b486 <_lseek_r+0x1e>
 800b480:	682b      	ldr	r3, [r5, #0]
 800b482:	b103      	cbz	r3, 800b486 <_lseek_r+0x1e>
 800b484:	6023      	str	r3, [r4, #0]
 800b486:	bd38      	pop	{r3, r4, r5, pc}
 800b488:	200005f8 	.word	0x200005f8

0800b48c <_read_r>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4604      	mov	r4, r0
 800b490:	4d06      	ldr	r5, [pc, #24]	@ (800b4ac <_read_r+0x20>)
 800b492:	4608      	mov	r0, r1
 800b494:	4611      	mov	r1, r2
 800b496:	2200      	movs	r2, #0
 800b498:	602a      	str	r2, [r5, #0]
 800b49a:	461a      	mov	r2, r3
 800b49c:	f7f7 fd6f 	bl	8002f7e <_read>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	d102      	bne.n	800b4aa <_read_r+0x1e>
 800b4a4:	682b      	ldr	r3, [r5, #0]
 800b4a6:	b103      	cbz	r3, 800b4aa <_read_r+0x1e>
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	200005f8 	.word	0x200005f8

0800b4b0 <_sbrk_r>:
 800b4b0:	b538      	push	{r3, r4, r5, lr}
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	4d05      	ldr	r5, [pc, #20]	@ (800b4cc <_sbrk_r+0x1c>)
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	4608      	mov	r0, r1
 800b4ba:	602b      	str	r3, [r5, #0]
 800b4bc:	f7f7 fdcc 	bl	8003058 <_sbrk>
 800b4c0:	1c43      	adds	r3, r0, #1
 800b4c2:	d102      	bne.n	800b4ca <_sbrk_r+0x1a>
 800b4c4:	682b      	ldr	r3, [r5, #0]
 800b4c6:	b103      	cbz	r3, 800b4ca <_sbrk_r+0x1a>
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	bd38      	pop	{r3, r4, r5, pc}
 800b4cc:	200005f8 	.word	0x200005f8

0800b4d0 <_write_r>:
 800b4d0:	b538      	push	{r3, r4, r5, lr}
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	4d06      	ldr	r5, [pc, #24]	@ (800b4f0 <_write_r+0x20>)
 800b4d6:	4608      	mov	r0, r1
 800b4d8:	4611      	mov	r1, r2
 800b4da:	2200      	movs	r2, #0
 800b4dc:	602a      	str	r2, [r5, #0]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	f7f7 fd6a 	bl	8002fb8 <_write>
 800b4e4:	1c43      	adds	r3, r0, #1
 800b4e6:	d102      	bne.n	800b4ee <_write_r+0x1e>
 800b4e8:	682b      	ldr	r3, [r5, #0]
 800b4ea:	b103      	cbz	r3, 800b4ee <_write_r+0x1e>
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	bd38      	pop	{r3, r4, r5, pc}
 800b4f0:	200005f8 	.word	0x200005f8

0800b4f4 <__errno>:
 800b4f4:	4b01      	ldr	r3, [pc, #4]	@ (800b4fc <__errno+0x8>)
 800b4f6:	6818      	ldr	r0, [r3, #0]
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	2000005c 	.word	0x2000005c

0800b500 <__libc_init_array>:
 800b500:	b570      	push	{r4, r5, r6, lr}
 800b502:	4d0d      	ldr	r5, [pc, #52]	@ (800b538 <__libc_init_array+0x38>)
 800b504:	2600      	movs	r6, #0
 800b506:	4c0d      	ldr	r4, [pc, #52]	@ (800b53c <__libc_init_array+0x3c>)
 800b508:	1b64      	subs	r4, r4, r5
 800b50a:	10a4      	asrs	r4, r4, #2
 800b50c:	42a6      	cmp	r6, r4
 800b50e:	d109      	bne.n	800b524 <__libc_init_array+0x24>
 800b510:	4d0b      	ldr	r5, [pc, #44]	@ (800b540 <__libc_init_array+0x40>)
 800b512:	2600      	movs	r6, #0
 800b514:	4c0b      	ldr	r4, [pc, #44]	@ (800b544 <__libc_init_array+0x44>)
 800b516:	f003 fac9 	bl	800eaac <_init>
 800b51a:	1b64      	subs	r4, r4, r5
 800b51c:	10a4      	asrs	r4, r4, #2
 800b51e:	42a6      	cmp	r6, r4
 800b520:	d105      	bne.n	800b52e <__libc_init_array+0x2e>
 800b522:	bd70      	pop	{r4, r5, r6, pc}
 800b524:	f855 3b04 	ldr.w	r3, [r5], #4
 800b528:	3601      	adds	r6, #1
 800b52a:	4798      	blx	r3
 800b52c:	e7ee      	b.n	800b50c <__libc_init_array+0xc>
 800b52e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b532:	3601      	adds	r6, #1
 800b534:	4798      	blx	r3
 800b536:	e7f2      	b.n	800b51e <__libc_init_array+0x1e>
 800b538:	0800f150 	.word	0x0800f150
 800b53c:	0800f150 	.word	0x0800f150
 800b540:	0800f150 	.word	0x0800f150
 800b544:	0800f158 	.word	0x0800f158

0800b548 <__retarget_lock_init_recursive>:
 800b548:	4770      	bx	lr

0800b54a <__retarget_lock_acquire_recursive>:
 800b54a:	4770      	bx	lr

0800b54c <__retarget_lock_release_recursive>:
 800b54c:	4770      	bx	lr

0800b54e <memchr>:
 800b54e:	b2c9      	uxtb	r1, r1
 800b550:	4603      	mov	r3, r0
 800b552:	4402      	add	r2, r0
 800b554:	b510      	push	{r4, lr}
 800b556:	4293      	cmp	r3, r2
 800b558:	4618      	mov	r0, r3
 800b55a:	d101      	bne.n	800b560 <memchr+0x12>
 800b55c:	2000      	movs	r0, #0
 800b55e:	e003      	b.n	800b568 <memchr+0x1a>
 800b560:	7804      	ldrb	r4, [r0, #0]
 800b562:	3301      	adds	r3, #1
 800b564:	428c      	cmp	r4, r1
 800b566:	d1f6      	bne.n	800b556 <memchr+0x8>
 800b568:	bd10      	pop	{r4, pc}
	...

0800b56c <nanf>:
 800b56c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b574 <nanf+0x8>
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	7fc00000 	.word	0x7fc00000

0800b578 <quorem>:
 800b578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	6903      	ldr	r3, [r0, #16]
 800b57e:	4607      	mov	r7, r0
 800b580:	690c      	ldr	r4, [r1, #16]
 800b582:	42a3      	cmp	r3, r4
 800b584:	f2c0 8083 	blt.w	800b68e <quorem+0x116>
 800b588:	3c01      	subs	r4, #1
 800b58a:	f100 0514 	add.w	r5, r0, #20
 800b58e:	f101 0814 	add.w	r8, r1, #20
 800b592:	00a3      	lsls	r3, r4, #2
 800b594:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b598:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5a2:	9301      	str	r3, [sp, #4]
 800b5a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5b0:	d331      	bcc.n	800b616 <quorem+0x9e>
 800b5b2:	f04f 0a00 	mov.w	sl, #0
 800b5b6:	46c4      	mov	ip, r8
 800b5b8:	46ae      	mov	lr, r5
 800b5ba:	46d3      	mov	fp, sl
 800b5bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b5c0:	b298      	uxth	r0, r3
 800b5c2:	45e1      	cmp	r9, ip
 800b5c4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b5c8:	fb06 a000 	mla	r0, r6, r0, sl
 800b5cc:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800b5d0:	b280      	uxth	r0, r0
 800b5d2:	fb06 2303 	mla	r3, r6, r3, r2
 800b5d6:	f8de 2000 	ldr.w	r2, [lr]
 800b5da:	b292      	uxth	r2, r2
 800b5dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5e0:	eba2 0200 	sub.w	r2, r2, r0
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	f8de 0000 	ldr.w	r0, [lr]
 800b5ea:	445a      	add	r2, fp
 800b5ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b5f0:	b292      	uxth	r2, r2
 800b5f2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b5f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b5fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b5fe:	f84e 2b04 	str.w	r2, [lr], #4
 800b602:	d2db      	bcs.n	800b5bc <quorem+0x44>
 800b604:	9b00      	ldr	r3, [sp, #0]
 800b606:	58eb      	ldr	r3, [r5, r3]
 800b608:	b92b      	cbnz	r3, 800b616 <quorem+0x9e>
 800b60a:	9b01      	ldr	r3, [sp, #4]
 800b60c:	3b04      	subs	r3, #4
 800b60e:	429d      	cmp	r5, r3
 800b610:	461a      	mov	r2, r3
 800b612:	d330      	bcc.n	800b676 <quorem+0xfe>
 800b614:	613c      	str	r4, [r7, #16]
 800b616:	4638      	mov	r0, r7
 800b618:	f001 f912 	bl	800c840 <__mcmp>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	db26      	blt.n	800b66e <quorem+0xf6>
 800b620:	4629      	mov	r1, r5
 800b622:	2000      	movs	r0, #0
 800b624:	f858 2b04 	ldr.w	r2, [r8], #4
 800b628:	f8d1 c000 	ldr.w	ip, [r1]
 800b62c:	fa1f fe82 	uxth.w	lr, r2
 800b630:	45c1      	cmp	r9, r8
 800b632:	fa1f f38c 	uxth.w	r3, ip
 800b636:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b63a:	eba3 030e 	sub.w	r3, r3, lr
 800b63e:	4403      	add	r3, r0
 800b640:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b644:	b29b      	uxth	r3, r3
 800b646:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b64a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b64e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b652:	f841 3b04 	str.w	r3, [r1], #4
 800b656:	d2e5      	bcs.n	800b624 <quorem+0xac>
 800b658:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b65c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b660:	b922      	cbnz	r2, 800b66c <quorem+0xf4>
 800b662:	3b04      	subs	r3, #4
 800b664:	429d      	cmp	r5, r3
 800b666:	461a      	mov	r2, r3
 800b668:	d30b      	bcc.n	800b682 <quorem+0x10a>
 800b66a:	613c      	str	r4, [r7, #16]
 800b66c:	3601      	adds	r6, #1
 800b66e:	4630      	mov	r0, r6
 800b670:	b003      	add	sp, #12
 800b672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b676:	6812      	ldr	r2, [r2, #0]
 800b678:	3b04      	subs	r3, #4
 800b67a:	2a00      	cmp	r2, #0
 800b67c:	d1ca      	bne.n	800b614 <quorem+0x9c>
 800b67e:	3c01      	subs	r4, #1
 800b680:	e7c5      	b.n	800b60e <quorem+0x96>
 800b682:	6812      	ldr	r2, [r2, #0]
 800b684:	3b04      	subs	r3, #4
 800b686:	2a00      	cmp	r2, #0
 800b688:	d1ef      	bne.n	800b66a <quorem+0xf2>
 800b68a:	3c01      	subs	r4, #1
 800b68c:	e7ea      	b.n	800b664 <quorem+0xec>
 800b68e:	2000      	movs	r0, #0
 800b690:	e7ee      	b.n	800b670 <quorem+0xf8>
 800b692:	0000      	movs	r0, r0
 800b694:	0000      	movs	r0, r0
	...

0800b698 <_dtoa_r>:
 800b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69c:	69c7      	ldr	r7, [r0, #28]
 800b69e:	b099      	sub	sp, #100	@ 0x64
 800b6a0:	4683      	mov	fp, r0
 800b6a2:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b6a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800b6a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b6aa:	ec55 4b10 	vmov	r4, r5, d0
 800b6ae:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b6b2:	b97f      	cbnz	r7, 800b6d4 <_dtoa_r+0x3c>
 800b6b4:	2010      	movs	r0, #16
 800b6b6:	f7fe fe59 	bl	800a36c <malloc>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	f8cb 001c 	str.w	r0, [fp, #28]
 800b6c0:	b920      	cbnz	r0, 800b6cc <_dtoa_r+0x34>
 800b6c2:	4ba7      	ldr	r3, [pc, #668]	@ (800b960 <_dtoa_r+0x2c8>)
 800b6c4:	21ef      	movs	r1, #239	@ 0xef
 800b6c6:	48a7      	ldr	r0, [pc, #668]	@ (800b964 <_dtoa_r+0x2cc>)
 800b6c8:	f002 fd52 	bl	800e170 <__assert_func>
 800b6cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b6d0:	6007      	str	r7, [r0, #0]
 800b6d2:	60c7      	str	r7, [r0, #12]
 800b6d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b6d8:	6819      	ldr	r1, [r3, #0]
 800b6da:	b159      	cbz	r1, 800b6f4 <_dtoa_r+0x5c>
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	2301      	movs	r3, #1
 800b6e0:	4658      	mov	r0, fp
 800b6e2:	4093      	lsls	r3, r2
 800b6e4:	604a      	str	r2, [r1, #4]
 800b6e6:	608b      	str	r3, [r1, #8]
 800b6e8:	f000 fe24 	bl	800c334 <_Bfree>
 800b6ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	601a      	str	r2, [r3, #0]
 800b6f4:	1e2b      	subs	r3, r5, #0
 800b6f6:	bfb7      	itett	lt
 800b6f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b6fc:	2300      	movge	r3, #0
 800b6fe:	2201      	movlt	r2, #1
 800b700:	9303      	strlt	r3, [sp, #12]
 800b702:	bfa8      	it	ge
 800b704:	6033      	strge	r3, [r6, #0]
 800b706:	9f03      	ldr	r7, [sp, #12]
 800b708:	4b97      	ldr	r3, [pc, #604]	@ (800b968 <_dtoa_r+0x2d0>)
 800b70a:	bfb8      	it	lt
 800b70c:	6032      	strlt	r2, [r6, #0]
 800b70e:	43bb      	bics	r3, r7
 800b710:	d112      	bne.n	800b738 <_dtoa_r+0xa0>
 800b712:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b716:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b718:	6013      	str	r3, [r2, #0]
 800b71a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b71e:	4323      	orrs	r3, r4
 800b720:	f000 854c 	beq.w	800c1bc <_dtoa_r+0xb24>
 800b724:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b726:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b97c <_dtoa_r+0x2e4>
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f000 854e 	beq.w	800c1cc <_dtoa_r+0xb34>
 800b730:	f10a 0303 	add.w	r3, sl, #3
 800b734:	f000 bd48 	b.w	800c1c8 <_dtoa_r+0xb30>
 800b738:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b73c:	2200      	movs	r2, #0
 800b73e:	2300      	movs	r3, #0
 800b740:	ec51 0b17 	vmov	r0, r1, d7
 800b744:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b748:	f7f5 f9ce 	bl	8000ae8 <__aeabi_dcmpeq>
 800b74c:	4680      	mov	r8, r0
 800b74e:	b158      	cbz	r0, 800b768 <_dtoa_r+0xd0>
 800b750:	2301      	movs	r3, #1
 800b752:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b754:	6013      	str	r3, [r2, #0]
 800b756:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b758:	b113      	cbz	r3, 800b760 <_dtoa_r+0xc8>
 800b75a:	4b84      	ldr	r3, [pc, #528]	@ (800b96c <_dtoa_r+0x2d4>)
 800b75c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b75e:	6013      	str	r3, [r2, #0]
 800b760:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800b980 <_dtoa_r+0x2e8>
 800b764:	f000 bd32 	b.w	800c1cc <_dtoa_r+0xb34>
 800b768:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b76c:	aa16      	add	r2, sp, #88	@ 0x58
 800b76e:	a917      	add	r1, sp, #92	@ 0x5c
 800b770:	4658      	mov	r0, fp
 800b772:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b776:	f001 f98b 	bl	800ca90 <__d2b>
 800b77a:	4681      	mov	r9, r0
 800b77c:	2e00      	cmp	r6, #0
 800b77e:	d075      	beq.n	800b86c <_dtoa_r+0x1d4>
 800b780:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b782:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b786:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b78a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b78e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b792:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b796:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b79a:	4619      	mov	r1, r3
 800b79c:	2200      	movs	r2, #0
 800b79e:	4b74      	ldr	r3, [pc, #464]	@ (800b970 <_dtoa_r+0x2d8>)
 800b7a0:	f7f4 fd82 	bl	80002a8 <__aeabi_dsub>
 800b7a4:	a368      	add	r3, pc, #416	@ (adr r3, 800b948 <_dtoa_r+0x2b0>)
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	f7f4 ff35 	bl	8000618 <__aeabi_dmul>
 800b7ae:	a368      	add	r3, pc, #416	@ (adr r3, 800b950 <_dtoa_r+0x2b8>)
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	f7f4 fd7a 	bl	80002ac <__adddf3>
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	460d      	mov	r5, r1
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f7f4 fec1 	bl	8000544 <__aeabi_i2d>
 800b7c2:	a365      	add	r3, pc, #404	@ (adr r3, 800b958 <_dtoa_r+0x2c0>)
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	f7f4 ff26 	bl	8000618 <__aeabi_dmul>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	f7f4 fd6a 	bl	80002ac <__adddf3>
 800b7d8:	4604      	mov	r4, r0
 800b7da:	460d      	mov	r5, r1
 800b7dc:	f7f5 f9cc 	bl	8000b78 <__aeabi_d2iz>
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	4607      	mov	r7, r0
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	f7f5 f987 	bl	8000afc <__aeabi_dcmplt>
 800b7ee:	b140      	cbz	r0, 800b802 <_dtoa_r+0x16a>
 800b7f0:	4638      	mov	r0, r7
 800b7f2:	f7f4 fea7 	bl	8000544 <__aeabi_i2d>
 800b7f6:	4622      	mov	r2, r4
 800b7f8:	462b      	mov	r3, r5
 800b7fa:	f7f5 f975 	bl	8000ae8 <__aeabi_dcmpeq>
 800b7fe:	b900      	cbnz	r0, 800b802 <_dtoa_r+0x16a>
 800b800:	3f01      	subs	r7, #1
 800b802:	2f16      	cmp	r7, #22
 800b804:	d851      	bhi.n	800b8aa <_dtoa_r+0x212>
 800b806:	4b5b      	ldr	r3, [pc, #364]	@ (800b974 <_dtoa_r+0x2dc>)
 800b808:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b80c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	f7f5 f972 	bl	8000afc <__aeabi_dcmplt>
 800b818:	2800      	cmp	r0, #0
 800b81a:	d048      	beq.n	800b8ae <_dtoa_r+0x216>
 800b81c:	3f01      	subs	r7, #1
 800b81e:	2300      	movs	r3, #0
 800b820:	9312      	str	r3, [sp, #72]	@ 0x48
 800b822:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b824:	1b9b      	subs	r3, r3, r6
 800b826:	1e5a      	subs	r2, r3, #1
 800b828:	bf46      	itte	mi
 800b82a:	f1c3 0801 	rsbmi	r8, r3, #1
 800b82e:	2300      	movmi	r3, #0
 800b830:	f04f 0800 	movpl.w	r8, #0
 800b834:	9208      	str	r2, [sp, #32]
 800b836:	bf48      	it	mi
 800b838:	9308      	strmi	r3, [sp, #32]
 800b83a:	2f00      	cmp	r7, #0
 800b83c:	db39      	blt.n	800b8b2 <_dtoa_r+0x21a>
 800b83e:	9b08      	ldr	r3, [sp, #32]
 800b840:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b842:	443b      	add	r3, r7
 800b844:	9308      	str	r3, [sp, #32]
 800b846:	2300      	movs	r3, #0
 800b848:	930a      	str	r3, [sp, #40]	@ 0x28
 800b84a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b84c:	2b09      	cmp	r3, #9
 800b84e:	d864      	bhi.n	800b91a <_dtoa_r+0x282>
 800b850:	2b05      	cmp	r3, #5
 800b852:	bfc5      	ittet	gt
 800b854:	3b04      	subgt	r3, #4
 800b856:	2400      	movgt	r4, #0
 800b858:	2401      	movle	r4, #1
 800b85a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b85c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b85e:	3b02      	subs	r3, #2
 800b860:	2b03      	cmp	r3, #3
 800b862:	d865      	bhi.n	800b930 <_dtoa_r+0x298>
 800b864:	e8df f003 	tbb	[pc, r3]
 800b868:	5737392c 	.word	0x5737392c
 800b86c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b870:	441e      	add	r6, r3
 800b872:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b876:	2b20      	cmp	r3, #32
 800b878:	bfc9      	itett	gt
 800b87a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b87e:	f1c3 0320 	rsble	r3, r3, #32
 800b882:	409f      	lslgt	r7, r3
 800b884:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b888:	bfd8      	it	le
 800b88a:	fa04 f003 	lslle.w	r0, r4, r3
 800b88e:	f106 36ff 	add.w	r6, r6, #4294967295
 800b892:	bfc4      	itt	gt
 800b894:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b898:	ea47 0003 	orrgt.w	r0, r7, r3
 800b89c:	f7f4 fe42 	bl	8000524 <__aeabi_ui2d>
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b8a6:	9214      	str	r2, [sp, #80]	@ 0x50
 800b8a8:	e777      	b.n	800b79a <_dtoa_r+0x102>
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e7b8      	b.n	800b820 <_dtoa_r+0x188>
 800b8ae:	9012      	str	r0, [sp, #72]	@ 0x48
 800b8b0:	e7b7      	b.n	800b822 <_dtoa_r+0x18a>
 800b8b2:	427b      	negs	r3, r7
 800b8b4:	eba8 0807 	sub.w	r8, r8, r7
 800b8b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b8be:	e7c4      	b.n	800b84a <_dtoa_r+0x1b2>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	dc35      	bgt.n	800b936 <_dtoa_r+0x29e>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	9307      	str	r3, [sp, #28]
 800b8d2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8d4:	e00b      	b.n	800b8ee <_dtoa_r+0x256>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e7f3      	b.n	800b8c2 <_dtoa_r+0x22a>
 800b8da:	2300      	movs	r3, #0
 800b8dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8e0:	18fb      	adds	r3, r7, r3
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	9307      	str	r3, [sp, #28]
 800b8ea:	bfb8      	it	lt
 800b8ec:	2301      	movlt	r3, #1
 800b8ee:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	2204      	movs	r2, #4
 800b8f6:	f102 0514 	add.w	r5, r2, #20
 800b8fa:	429d      	cmp	r5, r3
 800b8fc:	d91f      	bls.n	800b93e <_dtoa_r+0x2a6>
 800b8fe:	6041      	str	r1, [r0, #4]
 800b900:	4658      	mov	r0, fp
 800b902:	f000 fcd7 	bl	800c2b4 <_Balloc>
 800b906:	4682      	mov	sl, r0
 800b908:	2800      	cmp	r0, #0
 800b90a:	d13b      	bne.n	800b984 <_dtoa_r+0x2ec>
 800b90c:	4b1a      	ldr	r3, [pc, #104]	@ (800b978 <_dtoa_r+0x2e0>)
 800b90e:	4602      	mov	r2, r0
 800b910:	f240 11af 	movw	r1, #431	@ 0x1af
 800b914:	e6d7      	b.n	800b6c6 <_dtoa_r+0x2e>
 800b916:	2301      	movs	r3, #1
 800b918:	e7e0      	b.n	800b8dc <_dtoa_r+0x244>
 800b91a:	2401      	movs	r4, #1
 800b91c:	2300      	movs	r3, #0
 800b91e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b920:	9309      	str	r3, [sp, #36]	@ 0x24
 800b922:	f04f 33ff 	mov.w	r3, #4294967295
 800b926:	2200      	movs	r2, #0
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	9307      	str	r3, [sp, #28]
 800b92c:	2312      	movs	r3, #18
 800b92e:	e7d0      	b.n	800b8d2 <_dtoa_r+0x23a>
 800b930:	2301      	movs	r3, #1
 800b932:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b934:	e7f5      	b.n	800b922 <_dtoa_r+0x28a>
 800b936:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	9307      	str	r3, [sp, #28]
 800b93c:	e7d7      	b.n	800b8ee <_dtoa_r+0x256>
 800b93e:	3101      	adds	r1, #1
 800b940:	0052      	lsls	r2, r2, #1
 800b942:	e7d8      	b.n	800b8f6 <_dtoa_r+0x25e>
 800b944:	f3af 8000 	nop.w
 800b948:	636f4361 	.word	0x636f4361
 800b94c:	3fd287a7 	.word	0x3fd287a7
 800b950:	8b60c8b3 	.word	0x8b60c8b3
 800b954:	3fc68a28 	.word	0x3fc68a28
 800b958:	509f79fb 	.word	0x509f79fb
 800b95c:	3fd34413 	.word	0x3fd34413
 800b960:	0800ed5e 	.word	0x0800ed5e
 800b964:	0800ed75 	.word	0x0800ed75
 800b968:	7ff00000 	.word	0x7ff00000
 800b96c:	0800ed29 	.word	0x0800ed29
 800b970:	3ff80000 	.word	0x3ff80000
 800b974:	0800ee70 	.word	0x0800ee70
 800b978:	0800edcd 	.word	0x0800edcd
 800b97c:	0800ed5a 	.word	0x0800ed5a
 800b980:	0800ed28 	.word	0x0800ed28
 800b984:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b988:	6018      	str	r0, [r3, #0]
 800b98a:	9b07      	ldr	r3, [sp, #28]
 800b98c:	2b0e      	cmp	r3, #14
 800b98e:	f200 80a4 	bhi.w	800bada <_dtoa_r+0x442>
 800b992:	2c00      	cmp	r4, #0
 800b994:	f000 80a1 	beq.w	800bada <_dtoa_r+0x442>
 800b998:	2f00      	cmp	r7, #0
 800b99a:	dd33      	ble.n	800ba04 <_dtoa_r+0x36c>
 800b99c:	f007 020f 	and.w	r2, r7, #15
 800b9a0:	4bac      	ldr	r3, [pc, #688]	@ (800bc54 <_dtoa_r+0x5bc>)
 800b9a2:	05f8      	lsls	r0, r7, #23
 800b9a4:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b9a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9ac:	ed93 7b00 	vldr	d7, [r3]
 800b9b0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b9b4:	d516      	bpl.n	800b9e4 <_dtoa_r+0x34c>
 800b9b6:	4ba8      	ldr	r3, [pc, #672]	@ (800bc58 <_dtoa_r+0x5c0>)
 800b9b8:	f004 040f 	and.w	r4, r4, #15
 800b9bc:	2603      	movs	r6, #3
 800b9be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9c6:	f7f4 ff51 	bl	800086c <__aeabi_ddiv>
 800b9ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9ce:	4da2      	ldr	r5, [pc, #648]	@ (800bc58 <_dtoa_r+0x5c0>)
 800b9d0:	b954      	cbnz	r4, 800b9e8 <_dtoa_r+0x350>
 800b9d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9da:	f7f4 ff47 	bl	800086c <__aeabi_ddiv>
 800b9de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9e2:	e028      	b.n	800ba36 <_dtoa_r+0x39e>
 800b9e4:	2602      	movs	r6, #2
 800b9e6:	e7f2      	b.n	800b9ce <_dtoa_r+0x336>
 800b9e8:	07e1      	lsls	r1, r4, #31
 800b9ea:	d508      	bpl.n	800b9fe <_dtoa_r+0x366>
 800b9ec:	3601      	adds	r6, #1
 800b9ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b9f6:	f7f4 fe0f 	bl	8000618 <__aeabi_dmul>
 800b9fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9fe:	1064      	asrs	r4, r4, #1
 800ba00:	3508      	adds	r5, #8
 800ba02:	e7e5      	b.n	800b9d0 <_dtoa_r+0x338>
 800ba04:	f000 80d2 	beq.w	800bbac <_dtoa_r+0x514>
 800ba08:	427c      	negs	r4, r7
 800ba0a:	4b92      	ldr	r3, [pc, #584]	@ (800bc54 <_dtoa_r+0x5bc>)
 800ba0c:	4d92      	ldr	r5, [pc, #584]	@ (800bc58 <_dtoa_r+0x5c0>)
 800ba0e:	2602      	movs	r6, #2
 800ba10:	f004 020f 	and.w	r2, r4, #15
 800ba14:	1124      	asrs	r4, r4, #4
 800ba16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba22:	f7f4 fdf9 	bl	8000618 <__aeabi_dmul>
 800ba26:	2300      	movs	r3, #0
 800ba28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba2c:	2c00      	cmp	r4, #0
 800ba2e:	f040 80b2 	bne.w	800bb96 <_dtoa_r+0x4fe>
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d1d3      	bne.n	800b9de <_dtoa_r+0x346>
 800ba36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba38:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f000 80b7 	beq.w	800bbb0 <_dtoa_r+0x518>
 800ba42:	2200      	movs	r2, #0
 800ba44:	4b85      	ldr	r3, [pc, #532]	@ (800bc5c <_dtoa_r+0x5c4>)
 800ba46:	4620      	mov	r0, r4
 800ba48:	4629      	mov	r1, r5
 800ba4a:	f7f5 f857 	bl	8000afc <__aeabi_dcmplt>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	f000 80ae 	beq.w	800bbb0 <_dtoa_r+0x518>
 800ba54:	9b07      	ldr	r3, [sp, #28]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f000 80aa 	beq.w	800bbb0 <_dtoa_r+0x518>
 800ba5c:	9b00      	ldr	r3, [sp, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	dd37      	ble.n	800bad2 <_dtoa_r+0x43a>
 800ba62:	1e7b      	subs	r3, r7, #1
 800ba64:	4620      	mov	r0, r4
 800ba66:	2200      	movs	r2, #0
 800ba68:	4629      	mov	r1, r5
 800ba6a:	9304      	str	r3, [sp, #16]
 800ba6c:	3601      	adds	r6, #1
 800ba6e:	4b7c      	ldr	r3, [pc, #496]	@ (800bc60 <_dtoa_r+0x5c8>)
 800ba70:	f7f4 fdd2 	bl	8000618 <__aeabi_dmul>
 800ba74:	9c00      	ldr	r4, [sp, #0]
 800ba76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	f7f4 fd62 	bl	8000544 <__aeabi_i2d>
 800ba80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba84:	f7f4 fdc8 	bl	8000618 <__aeabi_dmul>
 800ba88:	2200      	movs	r2, #0
 800ba8a:	4b76      	ldr	r3, [pc, #472]	@ (800bc64 <_dtoa_r+0x5cc>)
 800ba8c:	f7f4 fc0e 	bl	80002ac <__adddf3>
 800ba90:	4605      	mov	r5, r0
 800ba92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ba96:	2c00      	cmp	r4, #0
 800ba98:	f040 808d 	bne.w	800bbb6 <_dtoa_r+0x51e>
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	4b72      	ldr	r3, [pc, #456]	@ (800bc68 <_dtoa_r+0x5d0>)
 800baa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baa4:	f7f4 fc00 	bl	80002a8 <__aeabi_dsub>
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bab0:	462a      	mov	r2, r5
 800bab2:	4633      	mov	r3, r6
 800bab4:	f7f5 f840 	bl	8000b38 <__aeabi_dcmpgt>
 800bab8:	2800      	cmp	r0, #0
 800baba:	f040 828b 	bne.w	800bfd4 <_dtoa_r+0x93c>
 800babe:	462a      	mov	r2, r5
 800bac0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bac8:	f7f5 f818 	bl	8000afc <__aeabi_dcmplt>
 800bacc:	2800      	cmp	r0, #0
 800bace:	f040 8128 	bne.w	800bd22 <_dtoa_r+0x68a>
 800bad2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bad6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bada:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800badc:	2b00      	cmp	r3, #0
 800bade:	f2c0 815a 	blt.w	800bd96 <_dtoa_r+0x6fe>
 800bae2:	2f0e      	cmp	r7, #14
 800bae4:	f300 8157 	bgt.w	800bd96 <_dtoa_r+0x6fe>
 800bae8:	4b5a      	ldr	r3, [pc, #360]	@ (800bc54 <_dtoa_r+0x5bc>)
 800baea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800baee:	ed93 7b00 	vldr	d7, [r3]
 800baf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	ed8d 7b00 	vstr	d7, [sp]
 800bafa:	da03      	bge.n	800bb04 <_dtoa_r+0x46c>
 800bafc:	9b07      	ldr	r3, [sp, #28]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f340 8101 	ble.w	800bd06 <_dtoa_r+0x66e>
 800bb04:	4656      	mov	r6, sl
 800bb06:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb0e:	4620      	mov	r0, r4
 800bb10:	4629      	mov	r1, r5
 800bb12:	f7f4 feab 	bl	800086c <__aeabi_ddiv>
 800bb16:	f7f5 f82f 	bl	8000b78 <__aeabi_d2iz>
 800bb1a:	4680      	mov	r8, r0
 800bb1c:	f7f4 fd12 	bl	8000544 <__aeabi_i2d>
 800bb20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb24:	f7f4 fd78 	bl	8000618 <__aeabi_dmul>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bb30:	460b      	mov	r3, r1
 800bb32:	4629      	mov	r1, r5
 800bb34:	f7f4 fbb8 	bl	80002a8 <__aeabi_dsub>
 800bb38:	9d07      	ldr	r5, [sp, #28]
 800bb3a:	f806 4b01 	strb.w	r4, [r6], #1
 800bb3e:	eba6 040a 	sub.w	r4, r6, sl
 800bb42:	4602      	mov	r2, r0
 800bb44:	460b      	mov	r3, r1
 800bb46:	42a5      	cmp	r5, r4
 800bb48:	f040 8117 	bne.w	800bd7a <_dtoa_r+0x6e2>
 800bb4c:	f7f4 fbae 	bl	80002ac <__adddf3>
 800bb50:	4604      	mov	r4, r0
 800bb52:	460d      	mov	r5, r1
 800bb54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb58:	f7f4 ffee 	bl	8000b38 <__aeabi_dcmpgt>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	f040 80f9 	bne.w	800bd54 <_dtoa_r+0x6bc>
 800bb62:	4620      	mov	r0, r4
 800bb64:	4629      	mov	r1, r5
 800bb66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb6a:	f7f4 ffbd 	bl	8000ae8 <__aeabi_dcmpeq>
 800bb6e:	b118      	cbz	r0, 800bb78 <_dtoa_r+0x4e0>
 800bb70:	f018 0f01 	tst.w	r8, #1
 800bb74:	f040 80ee 	bne.w	800bd54 <_dtoa_r+0x6bc>
 800bb78:	4649      	mov	r1, r9
 800bb7a:	4658      	mov	r0, fp
 800bb7c:	f000 fbda 	bl	800c334 <_Bfree>
 800bb80:	2300      	movs	r3, #0
 800bb82:	3701      	adds	r7, #1
 800bb84:	7033      	strb	r3, [r6, #0]
 800bb86:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bb88:	601f      	str	r7, [r3, #0]
 800bb8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 831d 	beq.w	800c1cc <_dtoa_r+0xb34>
 800bb92:	601e      	str	r6, [r3, #0]
 800bb94:	e31a      	b.n	800c1cc <_dtoa_r+0xb34>
 800bb96:	07e2      	lsls	r2, r4, #31
 800bb98:	d505      	bpl.n	800bba6 <_dtoa_r+0x50e>
 800bb9a:	3601      	adds	r6, #1
 800bb9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bba0:	f7f4 fd3a 	bl	8000618 <__aeabi_dmul>
 800bba4:	2301      	movs	r3, #1
 800bba6:	1064      	asrs	r4, r4, #1
 800bba8:	3508      	adds	r5, #8
 800bbaa:	e73f      	b.n	800ba2c <_dtoa_r+0x394>
 800bbac:	2602      	movs	r6, #2
 800bbae:	e742      	b.n	800ba36 <_dtoa_r+0x39e>
 800bbb0:	9c07      	ldr	r4, [sp, #28]
 800bbb2:	9704      	str	r7, [sp, #16]
 800bbb4:	e761      	b.n	800ba7a <_dtoa_r+0x3e2>
 800bbb6:	4b27      	ldr	r3, [pc, #156]	@ (800bc54 <_dtoa_r+0x5bc>)
 800bbb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bbba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bbbe:	4454      	add	r4, sl
 800bbc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbc4:	2900      	cmp	r1, #0
 800bbc6:	d053      	beq.n	800bc70 <_dtoa_r+0x5d8>
 800bbc8:	2000      	movs	r0, #0
 800bbca:	4928      	ldr	r1, [pc, #160]	@ (800bc6c <_dtoa_r+0x5d4>)
 800bbcc:	f7f4 fe4e 	bl	800086c <__aeabi_ddiv>
 800bbd0:	4633      	mov	r3, r6
 800bbd2:	4656      	mov	r6, sl
 800bbd4:	462a      	mov	r2, r5
 800bbd6:	f7f4 fb67 	bl	80002a8 <__aeabi_dsub>
 800bbda:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bbde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbe2:	f7f4 ffc9 	bl	8000b78 <__aeabi_d2iz>
 800bbe6:	4605      	mov	r5, r0
 800bbe8:	f7f4 fcac 	bl	8000544 <__aeabi_i2d>
 800bbec:	4602      	mov	r2, r0
 800bbee:	460b      	mov	r3, r1
 800bbf0:	3530      	adds	r5, #48	@ 0x30
 800bbf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbf6:	f7f4 fb57 	bl	80002a8 <__aeabi_dsub>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	f806 5b01 	strb.w	r5, [r6], #1
 800bc02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc0a:	f7f4 ff77 	bl	8000afc <__aeabi_dcmplt>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d171      	bne.n	800bcf6 <_dtoa_r+0x65e>
 800bc12:	2000      	movs	r0, #0
 800bc14:	4911      	ldr	r1, [pc, #68]	@ (800bc5c <_dtoa_r+0x5c4>)
 800bc16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc1a:	f7f4 fb45 	bl	80002a8 <__aeabi_dsub>
 800bc1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc22:	f7f4 ff6b 	bl	8000afc <__aeabi_dcmplt>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	f040 8095 	bne.w	800bd56 <_dtoa_r+0x6be>
 800bc2c:	42a6      	cmp	r6, r4
 800bc2e:	f43f af50 	beq.w	800bad2 <_dtoa_r+0x43a>
 800bc32:	2200      	movs	r2, #0
 800bc34:	4b0a      	ldr	r3, [pc, #40]	@ (800bc60 <_dtoa_r+0x5c8>)
 800bc36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bc3a:	f7f4 fced 	bl	8000618 <__aeabi_dmul>
 800bc3e:	2200      	movs	r2, #0
 800bc40:	4b07      	ldr	r3, [pc, #28]	@ (800bc60 <_dtoa_r+0x5c8>)
 800bc42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc4a:	f7f4 fce5 	bl	8000618 <__aeabi_dmul>
 800bc4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc52:	e7c4      	b.n	800bbde <_dtoa_r+0x546>
 800bc54:	0800ee70 	.word	0x0800ee70
 800bc58:	0800ee48 	.word	0x0800ee48
 800bc5c:	3ff00000 	.word	0x3ff00000
 800bc60:	40240000 	.word	0x40240000
 800bc64:	401c0000 	.word	0x401c0000
 800bc68:	40140000 	.word	0x40140000
 800bc6c:	3fe00000 	.word	0x3fe00000
 800bc70:	4631      	mov	r1, r6
 800bc72:	4656      	mov	r6, sl
 800bc74:	4628      	mov	r0, r5
 800bc76:	f7f4 fccf 	bl	8000618 <__aeabi_dmul>
 800bc7a:	9415      	str	r4, [sp, #84]	@ 0x54
 800bc7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc84:	f7f4 ff78 	bl	8000b78 <__aeabi_d2iz>
 800bc88:	4605      	mov	r5, r0
 800bc8a:	f7f4 fc5b 	bl	8000544 <__aeabi_i2d>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	3530      	adds	r5, #48	@ 0x30
 800bc92:	460b      	mov	r3, r1
 800bc94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc98:	f7f4 fb06 	bl	80002a8 <__aeabi_dsub>
 800bc9c:	f806 5b01 	strb.w	r5, [r6], #1
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	42a6      	cmp	r6, r4
 800bca6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcaa:	f04f 0200 	mov.w	r2, #0
 800bcae:	d124      	bne.n	800bcfa <_dtoa_r+0x662>
 800bcb0:	4bac      	ldr	r3, [pc, #688]	@ (800bf64 <_dtoa_r+0x8cc>)
 800bcb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bcb6:	f7f4 faf9 	bl	80002ac <__adddf3>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcc2:	f7f4 ff39 	bl	8000b38 <__aeabi_dcmpgt>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d145      	bne.n	800bd56 <_dtoa_r+0x6be>
 800bcca:	2000      	movs	r0, #0
 800bccc:	49a5      	ldr	r1, [pc, #660]	@ (800bf64 <_dtoa_r+0x8cc>)
 800bcce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bcd2:	f7f4 fae9 	bl	80002a8 <__aeabi_dsub>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcde:	f7f4 ff0d 	bl	8000afc <__aeabi_dcmplt>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	f43f aef5 	beq.w	800bad2 <_dtoa_r+0x43a>
 800bce8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bcea:	1e73      	subs	r3, r6, #1
 800bcec:	9315      	str	r3, [sp, #84]	@ 0x54
 800bcee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bcf2:	2b30      	cmp	r3, #48	@ 0x30
 800bcf4:	d0f8      	beq.n	800bce8 <_dtoa_r+0x650>
 800bcf6:	9f04      	ldr	r7, [sp, #16]
 800bcf8:	e73e      	b.n	800bb78 <_dtoa_r+0x4e0>
 800bcfa:	4b9b      	ldr	r3, [pc, #620]	@ (800bf68 <_dtoa_r+0x8d0>)
 800bcfc:	f7f4 fc8c 	bl	8000618 <__aeabi_dmul>
 800bd00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd04:	e7bc      	b.n	800bc80 <_dtoa_r+0x5e8>
 800bd06:	d10c      	bne.n	800bd22 <_dtoa_r+0x68a>
 800bd08:	2200      	movs	r2, #0
 800bd0a:	4b98      	ldr	r3, [pc, #608]	@ (800bf6c <_dtoa_r+0x8d4>)
 800bd0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd10:	f7f4 fc82 	bl	8000618 <__aeabi_dmul>
 800bd14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd18:	f7f4 ff04 	bl	8000b24 <__aeabi_dcmpge>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	f000 8157 	beq.w	800bfd0 <_dtoa_r+0x938>
 800bd22:	2400      	movs	r4, #0
 800bd24:	4625      	mov	r5, r4
 800bd26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd28:	4656      	mov	r6, sl
 800bd2a:	43db      	mvns	r3, r3
 800bd2c:	9304      	str	r3, [sp, #16]
 800bd2e:	2700      	movs	r7, #0
 800bd30:	4621      	mov	r1, r4
 800bd32:	4658      	mov	r0, fp
 800bd34:	f000 fafe 	bl	800c334 <_Bfree>
 800bd38:	2d00      	cmp	r5, #0
 800bd3a:	d0dc      	beq.n	800bcf6 <_dtoa_r+0x65e>
 800bd3c:	b12f      	cbz	r7, 800bd4a <_dtoa_r+0x6b2>
 800bd3e:	42af      	cmp	r7, r5
 800bd40:	d003      	beq.n	800bd4a <_dtoa_r+0x6b2>
 800bd42:	4639      	mov	r1, r7
 800bd44:	4658      	mov	r0, fp
 800bd46:	f000 faf5 	bl	800c334 <_Bfree>
 800bd4a:	4629      	mov	r1, r5
 800bd4c:	4658      	mov	r0, fp
 800bd4e:	f000 faf1 	bl	800c334 <_Bfree>
 800bd52:	e7d0      	b.n	800bcf6 <_dtoa_r+0x65e>
 800bd54:	9704      	str	r7, [sp, #16]
 800bd56:	4633      	mov	r3, r6
 800bd58:	461e      	mov	r6, r3
 800bd5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd5e:	2a39      	cmp	r2, #57	@ 0x39
 800bd60:	d107      	bne.n	800bd72 <_dtoa_r+0x6da>
 800bd62:	459a      	cmp	sl, r3
 800bd64:	d1f8      	bne.n	800bd58 <_dtoa_r+0x6c0>
 800bd66:	9a04      	ldr	r2, [sp, #16]
 800bd68:	3201      	adds	r2, #1
 800bd6a:	9204      	str	r2, [sp, #16]
 800bd6c:	2230      	movs	r2, #48	@ 0x30
 800bd6e:	f88a 2000 	strb.w	r2, [sl]
 800bd72:	781a      	ldrb	r2, [r3, #0]
 800bd74:	3201      	adds	r2, #1
 800bd76:	701a      	strb	r2, [r3, #0]
 800bd78:	e7bd      	b.n	800bcf6 <_dtoa_r+0x65e>
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	4b7a      	ldr	r3, [pc, #488]	@ (800bf68 <_dtoa_r+0x8d0>)
 800bd7e:	f7f4 fc4b 	bl	8000618 <__aeabi_dmul>
 800bd82:	2200      	movs	r2, #0
 800bd84:	2300      	movs	r3, #0
 800bd86:	4604      	mov	r4, r0
 800bd88:	460d      	mov	r5, r1
 800bd8a:	f7f4 fead 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	f43f aebb 	beq.w	800bb0a <_dtoa_r+0x472>
 800bd94:	e6f0      	b.n	800bb78 <_dtoa_r+0x4e0>
 800bd96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd98:	2a00      	cmp	r2, #0
 800bd9a:	f000 80db 	beq.w	800bf54 <_dtoa_r+0x8bc>
 800bd9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bda0:	2a01      	cmp	r2, #1
 800bda2:	f300 80bf 	bgt.w	800bf24 <_dtoa_r+0x88c>
 800bda6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bda8:	2a00      	cmp	r2, #0
 800bdaa:	f000 80b7 	beq.w	800bf1c <_dtoa_r+0x884>
 800bdae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bdb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bdb4:	4646      	mov	r6, r8
 800bdb6:	9a08      	ldr	r2, [sp, #32]
 800bdb8:	2101      	movs	r1, #1
 800bdba:	4658      	mov	r0, fp
 800bdbc:	4498      	add	r8, r3
 800bdbe:	441a      	add	r2, r3
 800bdc0:	9208      	str	r2, [sp, #32]
 800bdc2:	f000 fbb7 	bl	800c534 <__i2b>
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	b15e      	cbz	r6, 800bde2 <_dtoa_r+0x74a>
 800bdca:	9b08      	ldr	r3, [sp, #32]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	dd08      	ble.n	800bde2 <_dtoa_r+0x74a>
 800bdd0:	42b3      	cmp	r3, r6
 800bdd2:	9a08      	ldr	r2, [sp, #32]
 800bdd4:	bfa8      	it	ge
 800bdd6:	4633      	movge	r3, r6
 800bdd8:	eba8 0803 	sub.w	r8, r8, r3
 800bddc:	1af6      	subs	r6, r6, r3
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	9308      	str	r3, [sp, #32]
 800bde2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bde4:	b1f3      	cbz	r3, 800be24 <_dtoa_r+0x78c>
 800bde6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	f000 80b7 	beq.w	800bf5c <_dtoa_r+0x8c4>
 800bdee:	b18c      	cbz	r4, 800be14 <_dtoa_r+0x77c>
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	4622      	mov	r2, r4
 800bdf4:	4658      	mov	r0, fp
 800bdf6:	f000 fc5d 	bl	800c6b4 <__pow5mult>
 800bdfa:	464a      	mov	r2, r9
 800bdfc:	4601      	mov	r1, r0
 800bdfe:	4605      	mov	r5, r0
 800be00:	4658      	mov	r0, fp
 800be02:	f000 fbad 	bl	800c560 <__multiply>
 800be06:	4649      	mov	r1, r9
 800be08:	9004      	str	r0, [sp, #16]
 800be0a:	4658      	mov	r0, fp
 800be0c:	f000 fa92 	bl	800c334 <_Bfree>
 800be10:	9b04      	ldr	r3, [sp, #16]
 800be12:	4699      	mov	r9, r3
 800be14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be16:	1b1a      	subs	r2, r3, r4
 800be18:	d004      	beq.n	800be24 <_dtoa_r+0x78c>
 800be1a:	4649      	mov	r1, r9
 800be1c:	4658      	mov	r0, fp
 800be1e:	f000 fc49 	bl	800c6b4 <__pow5mult>
 800be22:	4681      	mov	r9, r0
 800be24:	2101      	movs	r1, #1
 800be26:	4658      	mov	r0, fp
 800be28:	f000 fb84 	bl	800c534 <__i2b>
 800be2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be2e:	4604      	mov	r4, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	f000 81cf 	beq.w	800c1d4 <_dtoa_r+0xb3c>
 800be36:	461a      	mov	r2, r3
 800be38:	4601      	mov	r1, r0
 800be3a:	4658      	mov	r0, fp
 800be3c:	f000 fc3a 	bl	800c6b4 <__pow5mult>
 800be40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be42:	4604      	mov	r4, r0
 800be44:	2b01      	cmp	r3, #1
 800be46:	f300 8095 	bgt.w	800bf74 <_dtoa_r+0x8dc>
 800be4a:	9b02      	ldr	r3, [sp, #8]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f040 8087 	bne.w	800bf60 <_dtoa_r+0x8c8>
 800be52:	9b03      	ldr	r3, [sp, #12]
 800be54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f040 8089 	bne.w	800bf70 <_dtoa_r+0x8d8>
 800be5e:	9b03      	ldr	r3, [sp, #12]
 800be60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be64:	0d1b      	lsrs	r3, r3, #20
 800be66:	051b      	lsls	r3, r3, #20
 800be68:	b12b      	cbz	r3, 800be76 <_dtoa_r+0x7de>
 800be6a:	9b08      	ldr	r3, [sp, #32]
 800be6c:	f108 0801 	add.w	r8, r8, #1
 800be70:	3301      	adds	r3, #1
 800be72:	9308      	str	r3, [sp, #32]
 800be74:	2301      	movs	r3, #1
 800be76:	930a      	str	r3, [sp, #40]	@ 0x28
 800be78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f000 81b0 	beq.w	800c1e0 <_dtoa_r+0xb48>
 800be80:	6923      	ldr	r3, [r4, #16]
 800be82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be86:	6918      	ldr	r0, [r3, #16]
 800be88:	f000 fb08 	bl	800c49c <__hi0bits>
 800be8c:	f1c0 0020 	rsb	r0, r0, #32
 800be90:	9b08      	ldr	r3, [sp, #32]
 800be92:	4418      	add	r0, r3
 800be94:	f010 001f 	ands.w	r0, r0, #31
 800be98:	d077      	beq.n	800bf8a <_dtoa_r+0x8f2>
 800be9a:	f1c0 0320 	rsb	r3, r0, #32
 800be9e:	2b04      	cmp	r3, #4
 800bea0:	dd6b      	ble.n	800bf7a <_dtoa_r+0x8e2>
 800bea2:	f1c0 001c 	rsb	r0, r0, #28
 800bea6:	9b08      	ldr	r3, [sp, #32]
 800bea8:	4480      	add	r8, r0
 800beaa:	4403      	add	r3, r0
 800beac:	4406      	add	r6, r0
 800beae:	9308      	str	r3, [sp, #32]
 800beb0:	f1b8 0f00 	cmp.w	r8, #0
 800beb4:	dd05      	ble.n	800bec2 <_dtoa_r+0x82a>
 800beb6:	4649      	mov	r1, r9
 800beb8:	4642      	mov	r2, r8
 800beba:	4658      	mov	r0, fp
 800bebc:	f000 fc54 	bl	800c768 <__lshift>
 800bec0:	4681      	mov	r9, r0
 800bec2:	9b08      	ldr	r3, [sp, #32]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	dd05      	ble.n	800bed4 <_dtoa_r+0x83c>
 800bec8:	4621      	mov	r1, r4
 800beca:	461a      	mov	r2, r3
 800becc:	4658      	mov	r0, fp
 800bece:	f000 fc4b 	bl	800c768 <__lshift>
 800bed2:	4604      	mov	r4, r0
 800bed4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d059      	beq.n	800bf8e <_dtoa_r+0x8f6>
 800beda:	4621      	mov	r1, r4
 800bedc:	4648      	mov	r0, r9
 800bede:	f000 fcaf 	bl	800c840 <__mcmp>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	da53      	bge.n	800bf8e <_dtoa_r+0x8f6>
 800bee6:	1e7b      	subs	r3, r7, #1
 800bee8:	4649      	mov	r1, r9
 800beea:	220a      	movs	r2, #10
 800beec:	4658      	mov	r0, fp
 800beee:	9304      	str	r3, [sp, #16]
 800bef0:	2300      	movs	r3, #0
 800bef2:	f000 fa41 	bl	800c378 <__multadd>
 800bef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bef8:	4681      	mov	r9, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 8172 	beq.w	800c1e4 <_dtoa_r+0xb4c>
 800bf00:	2300      	movs	r3, #0
 800bf02:	4629      	mov	r1, r5
 800bf04:	220a      	movs	r2, #10
 800bf06:	4658      	mov	r0, fp
 800bf08:	f000 fa36 	bl	800c378 <__multadd>
 800bf0c:	9b00      	ldr	r3, [sp, #0]
 800bf0e:	4605      	mov	r5, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	dc67      	bgt.n	800bfe4 <_dtoa_r+0x94c>
 800bf14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf16:	2b02      	cmp	r3, #2
 800bf18:	dc41      	bgt.n	800bf9e <_dtoa_r+0x906>
 800bf1a:	e063      	b.n	800bfe4 <_dtoa_r+0x94c>
 800bf1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bf1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bf22:	e746      	b.n	800bdb2 <_dtoa_r+0x71a>
 800bf24:	9b07      	ldr	r3, [sp, #28]
 800bf26:	1e5c      	subs	r4, r3, #1
 800bf28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf2a:	42a3      	cmp	r3, r4
 800bf2c:	bfb7      	itett	lt
 800bf2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bf30:	1b1c      	subge	r4, r3, r4
 800bf32:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bf34:	1ae3      	sublt	r3, r4, r3
 800bf36:	bfbe      	ittt	lt
 800bf38:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bf3a:	2400      	movlt	r4, #0
 800bf3c:	18d2      	addlt	r2, r2, r3
 800bf3e:	9b07      	ldr	r3, [sp, #28]
 800bf40:	bfb8      	it	lt
 800bf42:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	bfb5      	itete	lt
 800bf48:	eba8 0603 	sublt.w	r6, r8, r3
 800bf4c:	4646      	movge	r6, r8
 800bf4e:	2300      	movlt	r3, #0
 800bf50:	9b07      	ldrge	r3, [sp, #28]
 800bf52:	e730      	b.n	800bdb6 <_dtoa_r+0x71e>
 800bf54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf56:	4646      	mov	r6, r8
 800bf58:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bf5a:	e735      	b.n	800bdc8 <_dtoa_r+0x730>
 800bf5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf5e:	e75c      	b.n	800be1a <_dtoa_r+0x782>
 800bf60:	2300      	movs	r3, #0
 800bf62:	e788      	b.n	800be76 <_dtoa_r+0x7de>
 800bf64:	3fe00000 	.word	0x3fe00000
 800bf68:	40240000 	.word	0x40240000
 800bf6c:	40140000 	.word	0x40140000
 800bf70:	9b02      	ldr	r3, [sp, #8]
 800bf72:	e780      	b.n	800be76 <_dtoa_r+0x7de>
 800bf74:	2300      	movs	r3, #0
 800bf76:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf78:	e782      	b.n	800be80 <_dtoa_r+0x7e8>
 800bf7a:	d099      	beq.n	800beb0 <_dtoa_r+0x818>
 800bf7c:	331c      	adds	r3, #28
 800bf7e:	9a08      	ldr	r2, [sp, #32]
 800bf80:	441a      	add	r2, r3
 800bf82:	4498      	add	r8, r3
 800bf84:	441e      	add	r6, r3
 800bf86:	9208      	str	r2, [sp, #32]
 800bf88:	e792      	b.n	800beb0 <_dtoa_r+0x818>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	e7f6      	b.n	800bf7c <_dtoa_r+0x8e4>
 800bf8e:	9b07      	ldr	r3, [sp, #28]
 800bf90:	9704      	str	r7, [sp, #16]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	dc20      	bgt.n	800bfd8 <_dtoa_r+0x940>
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	dd1e      	ble.n	800bfdc <_dtoa_r+0x944>
 800bf9e:	9b00      	ldr	r3, [sp, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f47f aec0 	bne.w	800bd26 <_dtoa_r+0x68e>
 800bfa6:	4621      	mov	r1, r4
 800bfa8:	2205      	movs	r2, #5
 800bfaa:	4658      	mov	r0, fp
 800bfac:	f000 f9e4 	bl	800c378 <__multadd>
 800bfb0:	4601      	mov	r1, r0
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	4648      	mov	r0, r9
 800bfb6:	f000 fc43 	bl	800c840 <__mcmp>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	f77f aeb3 	ble.w	800bd26 <_dtoa_r+0x68e>
 800bfc0:	2331      	movs	r3, #49	@ 0x31
 800bfc2:	4656      	mov	r6, sl
 800bfc4:	f806 3b01 	strb.w	r3, [r6], #1
 800bfc8:	9b04      	ldr	r3, [sp, #16]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	9304      	str	r3, [sp, #16]
 800bfce:	e6ae      	b.n	800bd2e <_dtoa_r+0x696>
 800bfd0:	9c07      	ldr	r4, [sp, #28]
 800bfd2:	9704      	str	r7, [sp, #16]
 800bfd4:	4625      	mov	r5, r4
 800bfd6:	e7f3      	b.n	800bfc0 <_dtoa_r+0x928>
 800bfd8:	9b07      	ldr	r3, [sp, #28]
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f000 8104 	beq.w	800c1ec <_dtoa_r+0xb54>
 800bfe4:	2e00      	cmp	r6, #0
 800bfe6:	dd05      	ble.n	800bff4 <_dtoa_r+0x95c>
 800bfe8:	4629      	mov	r1, r5
 800bfea:	4632      	mov	r2, r6
 800bfec:	4658      	mov	r0, fp
 800bfee:	f000 fbbb 	bl	800c768 <__lshift>
 800bff2:	4605      	mov	r5, r0
 800bff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d05a      	beq.n	800c0b0 <_dtoa_r+0xa18>
 800bffa:	6869      	ldr	r1, [r5, #4]
 800bffc:	4658      	mov	r0, fp
 800bffe:	f000 f959 	bl	800c2b4 <_Balloc>
 800c002:	4606      	mov	r6, r0
 800c004:	b928      	cbnz	r0, 800c012 <_dtoa_r+0x97a>
 800c006:	4b84      	ldr	r3, [pc, #528]	@ (800c218 <_dtoa_r+0xb80>)
 800c008:	4602      	mov	r2, r0
 800c00a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c00e:	f7ff bb5a 	b.w	800b6c6 <_dtoa_r+0x2e>
 800c012:	692a      	ldr	r2, [r5, #16]
 800c014:	f105 010c 	add.w	r1, r5, #12
 800c018:	300c      	adds	r0, #12
 800c01a:	3202      	adds	r2, #2
 800c01c:	0092      	lsls	r2, r2, #2
 800c01e:	f002 f88f 	bl	800e140 <memcpy>
 800c022:	2201      	movs	r2, #1
 800c024:	4631      	mov	r1, r6
 800c026:	4658      	mov	r0, fp
 800c028:	f000 fb9e 	bl	800c768 <__lshift>
 800c02c:	f10a 0301 	add.w	r3, sl, #1
 800c030:	462f      	mov	r7, r5
 800c032:	4605      	mov	r5, r0
 800c034:	9307      	str	r3, [sp, #28]
 800c036:	9b00      	ldr	r3, [sp, #0]
 800c038:	4453      	add	r3, sl
 800c03a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c03c:	9b02      	ldr	r3, [sp, #8]
 800c03e:	f003 0301 	and.w	r3, r3, #1
 800c042:	930a      	str	r3, [sp, #40]	@ 0x28
 800c044:	9b07      	ldr	r3, [sp, #28]
 800c046:	4621      	mov	r1, r4
 800c048:	4648      	mov	r0, r9
 800c04a:	3b01      	subs	r3, #1
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	f7ff fa93 	bl	800b578 <quorem>
 800c052:	4639      	mov	r1, r7
 800c054:	9002      	str	r0, [sp, #8]
 800c056:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c05a:	4648      	mov	r0, r9
 800c05c:	f000 fbf0 	bl	800c840 <__mcmp>
 800c060:	462a      	mov	r2, r5
 800c062:	9008      	str	r0, [sp, #32]
 800c064:	4621      	mov	r1, r4
 800c066:	4658      	mov	r0, fp
 800c068:	f000 fc06 	bl	800c878 <__mdiff>
 800c06c:	68c2      	ldr	r2, [r0, #12]
 800c06e:	4606      	mov	r6, r0
 800c070:	bb02      	cbnz	r2, 800c0b4 <_dtoa_r+0xa1c>
 800c072:	4601      	mov	r1, r0
 800c074:	4648      	mov	r0, r9
 800c076:	f000 fbe3 	bl	800c840 <__mcmp>
 800c07a:	4602      	mov	r2, r0
 800c07c:	4631      	mov	r1, r6
 800c07e:	4658      	mov	r0, fp
 800c080:	920e      	str	r2, [sp, #56]	@ 0x38
 800c082:	f000 f957 	bl	800c334 <_Bfree>
 800c086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c088:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c08a:	9e07      	ldr	r6, [sp, #28]
 800c08c:	ea43 0102 	orr.w	r1, r3, r2
 800c090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c092:	4319      	orrs	r1, r3
 800c094:	d110      	bne.n	800c0b8 <_dtoa_r+0xa20>
 800c096:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c09a:	d029      	beq.n	800c0f0 <_dtoa_r+0xa58>
 800c09c:	9b08      	ldr	r3, [sp, #32]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	dd02      	ble.n	800c0a8 <_dtoa_r+0xa10>
 800c0a2:	9b02      	ldr	r3, [sp, #8]
 800c0a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c0a8:	9b00      	ldr	r3, [sp, #0]
 800c0aa:	f883 8000 	strb.w	r8, [r3]
 800c0ae:	e63f      	b.n	800bd30 <_dtoa_r+0x698>
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	e7bb      	b.n	800c02c <_dtoa_r+0x994>
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	e7e1      	b.n	800c07c <_dtoa_r+0x9e4>
 800c0b8:	9b08      	ldr	r3, [sp, #32]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	db04      	blt.n	800c0c8 <_dtoa_r+0xa30>
 800c0be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c0c0:	430b      	orrs	r3, r1
 800c0c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0c4:	430b      	orrs	r3, r1
 800c0c6:	d120      	bne.n	800c10a <_dtoa_r+0xa72>
 800c0c8:	2a00      	cmp	r2, #0
 800c0ca:	dded      	ble.n	800c0a8 <_dtoa_r+0xa10>
 800c0cc:	4649      	mov	r1, r9
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	4658      	mov	r0, fp
 800c0d2:	f000 fb49 	bl	800c768 <__lshift>
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	4681      	mov	r9, r0
 800c0da:	f000 fbb1 	bl	800c840 <__mcmp>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	dc03      	bgt.n	800c0ea <_dtoa_r+0xa52>
 800c0e2:	d1e1      	bne.n	800c0a8 <_dtoa_r+0xa10>
 800c0e4:	f018 0f01 	tst.w	r8, #1
 800c0e8:	d0de      	beq.n	800c0a8 <_dtoa_r+0xa10>
 800c0ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c0ee:	d1d8      	bne.n	800c0a2 <_dtoa_r+0xa0a>
 800c0f0:	2339      	movs	r3, #57	@ 0x39
 800c0f2:	9a00      	ldr	r2, [sp, #0]
 800c0f4:	7013      	strb	r3, [r2, #0]
 800c0f6:	4633      	mov	r3, r6
 800c0f8:	461e      	mov	r6, r3
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c100:	2a39      	cmp	r2, #57	@ 0x39
 800c102:	d052      	beq.n	800c1aa <_dtoa_r+0xb12>
 800c104:	3201      	adds	r2, #1
 800c106:	701a      	strb	r2, [r3, #0]
 800c108:	e612      	b.n	800bd30 <_dtoa_r+0x698>
 800c10a:	2a00      	cmp	r2, #0
 800c10c:	dd07      	ble.n	800c11e <_dtoa_r+0xa86>
 800c10e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c112:	d0ed      	beq.n	800c0f0 <_dtoa_r+0xa58>
 800c114:	f108 0301 	add.w	r3, r8, #1
 800c118:	9a00      	ldr	r2, [sp, #0]
 800c11a:	7013      	strb	r3, [r2, #0]
 800c11c:	e608      	b.n	800bd30 <_dtoa_r+0x698>
 800c11e:	9b07      	ldr	r3, [sp, #28]
 800c120:	9a07      	ldr	r2, [sp, #28]
 800c122:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c128:	4293      	cmp	r3, r2
 800c12a:	d028      	beq.n	800c17e <_dtoa_r+0xae6>
 800c12c:	4649      	mov	r1, r9
 800c12e:	2300      	movs	r3, #0
 800c130:	220a      	movs	r2, #10
 800c132:	4658      	mov	r0, fp
 800c134:	f000 f920 	bl	800c378 <__multadd>
 800c138:	42af      	cmp	r7, r5
 800c13a:	4681      	mov	r9, r0
 800c13c:	f04f 0300 	mov.w	r3, #0
 800c140:	f04f 020a 	mov.w	r2, #10
 800c144:	4639      	mov	r1, r7
 800c146:	4658      	mov	r0, fp
 800c148:	d107      	bne.n	800c15a <_dtoa_r+0xac2>
 800c14a:	f000 f915 	bl	800c378 <__multadd>
 800c14e:	4607      	mov	r7, r0
 800c150:	4605      	mov	r5, r0
 800c152:	9b07      	ldr	r3, [sp, #28]
 800c154:	3301      	adds	r3, #1
 800c156:	9307      	str	r3, [sp, #28]
 800c158:	e774      	b.n	800c044 <_dtoa_r+0x9ac>
 800c15a:	f000 f90d 	bl	800c378 <__multadd>
 800c15e:	4629      	mov	r1, r5
 800c160:	4607      	mov	r7, r0
 800c162:	2300      	movs	r3, #0
 800c164:	220a      	movs	r2, #10
 800c166:	4658      	mov	r0, fp
 800c168:	f000 f906 	bl	800c378 <__multadd>
 800c16c:	4605      	mov	r5, r0
 800c16e:	e7f0      	b.n	800c152 <_dtoa_r+0xaba>
 800c170:	9b00      	ldr	r3, [sp, #0]
 800c172:	2700      	movs	r7, #0
 800c174:	2b00      	cmp	r3, #0
 800c176:	bfcc      	ite	gt
 800c178:	461e      	movgt	r6, r3
 800c17a:	2601      	movle	r6, #1
 800c17c:	4456      	add	r6, sl
 800c17e:	4649      	mov	r1, r9
 800c180:	2201      	movs	r2, #1
 800c182:	4658      	mov	r0, fp
 800c184:	f000 faf0 	bl	800c768 <__lshift>
 800c188:	4621      	mov	r1, r4
 800c18a:	4681      	mov	r9, r0
 800c18c:	f000 fb58 	bl	800c840 <__mcmp>
 800c190:	2800      	cmp	r0, #0
 800c192:	dcb0      	bgt.n	800c0f6 <_dtoa_r+0xa5e>
 800c194:	d102      	bne.n	800c19c <_dtoa_r+0xb04>
 800c196:	f018 0f01 	tst.w	r8, #1
 800c19a:	d1ac      	bne.n	800c0f6 <_dtoa_r+0xa5e>
 800c19c:	4633      	mov	r3, r6
 800c19e:	461e      	mov	r6, r3
 800c1a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1a4:	2a30      	cmp	r2, #48	@ 0x30
 800c1a6:	d0fa      	beq.n	800c19e <_dtoa_r+0xb06>
 800c1a8:	e5c2      	b.n	800bd30 <_dtoa_r+0x698>
 800c1aa:	459a      	cmp	sl, r3
 800c1ac:	d1a4      	bne.n	800c0f8 <_dtoa_r+0xa60>
 800c1ae:	9b04      	ldr	r3, [sp, #16]
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	9304      	str	r3, [sp, #16]
 800c1b4:	2331      	movs	r3, #49	@ 0x31
 800c1b6:	f88a 3000 	strb.w	r3, [sl]
 800c1ba:	e5b9      	b.n	800bd30 <_dtoa_r+0x698>
 800c1bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c1be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c21c <_dtoa_r+0xb84>
 800c1c2:	b11b      	cbz	r3, 800c1cc <_dtoa_r+0xb34>
 800c1c4:	f10a 0308 	add.w	r3, sl, #8
 800c1c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c1ca:	6013      	str	r3, [r2, #0]
 800c1cc:	4650      	mov	r0, sl
 800c1ce:	b019      	add	sp, #100	@ 0x64
 800c1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	f77f ae37 	ble.w	800be4a <_dtoa_r+0x7b2>
 800c1dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1de:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1e0:	2001      	movs	r0, #1
 800c1e2:	e655      	b.n	800be90 <_dtoa_r+0x7f8>
 800c1e4:	9b00      	ldr	r3, [sp, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f77f aed6 	ble.w	800bf98 <_dtoa_r+0x900>
 800c1ec:	4656      	mov	r6, sl
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	4648      	mov	r0, r9
 800c1f2:	f7ff f9c1 	bl	800b578 <quorem>
 800c1f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c1fa:	9b00      	ldr	r3, [sp, #0]
 800c1fc:	f806 8b01 	strb.w	r8, [r6], #1
 800c200:	eba6 020a 	sub.w	r2, r6, sl
 800c204:	4293      	cmp	r3, r2
 800c206:	ddb3      	ble.n	800c170 <_dtoa_r+0xad8>
 800c208:	4649      	mov	r1, r9
 800c20a:	2300      	movs	r3, #0
 800c20c:	220a      	movs	r2, #10
 800c20e:	4658      	mov	r0, fp
 800c210:	f000 f8b2 	bl	800c378 <__multadd>
 800c214:	4681      	mov	r9, r0
 800c216:	e7ea      	b.n	800c1ee <_dtoa_r+0xb56>
 800c218:	0800edcd 	.word	0x0800edcd
 800c21c:	0800ed51 	.word	0x0800ed51

0800c220 <_free_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	4605      	mov	r5, r0
 800c224:	2900      	cmp	r1, #0
 800c226:	d041      	beq.n	800c2ac <_free_r+0x8c>
 800c228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c22c:	1f0c      	subs	r4, r1, #4
 800c22e:	2b00      	cmp	r3, #0
 800c230:	bfb8      	it	lt
 800c232:	18e4      	addlt	r4, r4, r3
 800c234:	f7fe f94c 	bl	800a4d0 <__malloc_lock>
 800c238:	4a1d      	ldr	r2, [pc, #116]	@ (800c2b0 <_free_r+0x90>)
 800c23a:	6813      	ldr	r3, [r2, #0]
 800c23c:	b933      	cbnz	r3, 800c24c <_free_r+0x2c>
 800c23e:	6063      	str	r3, [r4, #4]
 800c240:	6014      	str	r4, [r2, #0]
 800c242:	4628      	mov	r0, r5
 800c244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c248:	f7fe b948 	b.w	800a4dc <__malloc_unlock>
 800c24c:	42a3      	cmp	r3, r4
 800c24e:	d908      	bls.n	800c262 <_free_r+0x42>
 800c250:	6820      	ldr	r0, [r4, #0]
 800c252:	1821      	adds	r1, r4, r0
 800c254:	428b      	cmp	r3, r1
 800c256:	bf01      	itttt	eq
 800c258:	6819      	ldreq	r1, [r3, #0]
 800c25a:	685b      	ldreq	r3, [r3, #4]
 800c25c:	1809      	addeq	r1, r1, r0
 800c25e:	6021      	streq	r1, [r4, #0]
 800c260:	e7ed      	b.n	800c23e <_free_r+0x1e>
 800c262:	461a      	mov	r2, r3
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	b10b      	cbz	r3, 800c26c <_free_r+0x4c>
 800c268:	42a3      	cmp	r3, r4
 800c26a:	d9fa      	bls.n	800c262 <_free_r+0x42>
 800c26c:	6811      	ldr	r1, [r2, #0]
 800c26e:	1850      	adds	r0, r2, r1
 800c270:	42a0      	cmp	r0, r4
 800c272:	d10b      	bne.n	800c28c <_free_r+0x6c>
 800c274:	6820      	ldr	r0, [r4, #0]
 800c276:	4401      	add	r1, r0
 800c278:	1850      	adds	r0, r2, r1
 800c27a:	6011      	str	r1, [r2, #0]
 800c27c:	4283      	cmp	r3, r0
 800c27e:	d1e0      	bne.n	800c242 <_free_r+0x22>
 800c280:	6818      	ldr	r0, [r3, #0]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	4408      	add	r0, r1
 800c286:	6053      	str	r3, [r2, #4]
 800c288:	6010      	str	r0, [r2, #0]
 800c28a:	e7da      	b.n	800c242 <_free_r+0x22>
 800c28c:	d902      	bls.n	800c294 <_free_r+0x74>
 800c28e:	230c      	movs	r3, #12
 800c290:	602b      	str	r3, [r5, #0]
 800c292:	e7d6      	b.n	800c242 <_free_r+0x22>
 800c294:	6820      	ldr	r0, [r4, #0]
 800c296:	1821      	adds	r1, r4, r0
 800c298:	428b      	cmp	r3, r1
 800c29a:	bf02      	ittt	eq
 800c29c:	6819      	ldreq	r1, [r3, #0]
 800c29e:	685b      	ldreq	r3, [r3, #4]
 800c2a0:	1809      	addeq	r1, r1, r0
 800c2a2:	6063      	str	r3, [r4, #4]
 800c2a4:	bf08      	it	eq
 800c2a6:	6021      	streq	r1, [r4, #0]
 800c2a8:	6054      	str	r4, [r2, #4]
 800c2aa:	e7ca      	b.n	800c242 <_free_r+0x22>
 800c2ac:	bd38      	pop	{r3, r4, r5, pc}
 800c2ae:	bf00      	nop
 800c2b0:	200004b8 	.word	0x200004b8

0800c2b4 <_Balloc>:
 800c2b4:	b570      	push	{r4, r5, r6, lr}
 800c2b6:	69c6      	ldr	r6, [r0, #28]
 800c2b8:	4604      	mov	r4, r0
 800c2ba:	460d      	mov	r5, r1
 800c2bc:	b976      	cbnz	r6, 800c2dc <_Balloc+0x28>
 800c2be:	2010      	movs	r0, #16
 800c2c0:	f7fe f854 	bl	800a36c <malloc>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	61e0      	str	r0, [r4, #28]
 800c2c8:	b920      	cbnz	r0, 800c2d4 <_Balloc+0x20>
 800c2ca:	4b18      	ldr	r3, [pc, #96]	@ (800c32c <_Balloc+0x78>)
 800c2cc:	216b      	movs	r1, #107	@ 0x6b
 800c2ce:	4818      	ldr	r0, [pc, #96]	@ (800c330 <_Balloc+0x7c>)
 800c2d0:	f001 ff4e 	bl	800e170 <__assert_func>
 800c2d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2d8:	6006      	str	r6, [r0, #0]
 800c2da:	60c6      	str	r6, [r0, #12]
 800c2dc:	69e6      	ldr	r6, [r4, #28]
 800c2de:	68f3      	ldr	r3, [r6, #12]
 800c2e0:	b183      	cbz	r3, 800c304 <_Balloc+0x50>
 800c2e2:	69e3      	ldr	r3, [r4, #28]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2ea:	b9b8      	cbnz	r0, 800c31c <_Balloc+0x68>
 800c2ec:	2101      	movs	r1, #1
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	fa01 f605 	lsl.w	r6, r1, r5
 800c2f4:	1d72      	adds	r2, r6, #5
 800c2f6:	0092      	lsls	r2, r2, #2
 800c2f8:	f001 ff58 	bl	800e1ac <_calloc_r>
 800c2fc:	b160      	cbz	r0, 800c318 <_Balloc+0x64>
 800c2fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c302:	e00e      	b.n	800c322 <_Balloc+0x6e>
 800c304:	2221      	movs	r2, #33	@ 0x21
 800c306:	2104      	movs	r1, #4
 800c308:	4620      	mov	r0, r4
 800c30a:	f001 ff4f 	bl	800e1ac <_calloc_r>
 800c30e:	69e3      	ldr	r3, [r4, #28]
 800c310:	60f0      	str	r0, [r6, #12]
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1e4      	bne.n	800c2e2 <_Balloc+0x2e>
 800c318:	2000      	movs	r0, #0
 800c31a:	bd70      	pop	{r4, r5, r6, pc}
 800c31c:	6802      	ldr	r2, [r0, #0]
 800c31e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c322:	2300      	movs	r3, #0
 800c324:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c328:	e7f7      	b.n	800c31a <_Balloc+0x66>
 800c32a:	bf00      	nop
 800c32c:	0800ed5e 	.word	0x0800ed5e
 800c330:	0800edde 	.word	0x0800edde

0800c334 <_Bfree>:
 800c334:	b570      	push	{r4, r5, r6, lr}
 800c336:	69c6      	ldr	r6, [r0, #28]
 800c338:	4605      	mov	r5, r0
 800c33a:	460c      	mov	r4, r1
 800c33c:	b976      	cbnz	r6, 800c35c <_Bfree+0x28>
 800c33e:	2010      	movs	r0, #16
 800c340:	f7fe f814 	bl	800a36c <malloc>
 800c344:	4602      	mov	r2, r0
 800c346:	61e8      	str	r0, [r5, #28]
 800c348:	b920      	cbnz	r0, 800c354 <_Bfree+0x20>
 800c34a:	4b09      	ldr	r3, [pc, #36]	@ (800c370 <_Bfree+0x3c>)
 800c34c:	218f      	movs	r1, #143	@ 0x8f
 800c34e:	4809      	ldr	r0, [pc, #36]	@ (800c374 <_Bfree+0x40>)
 800c350:	f001 ff0e 	bl	800e170 <__assert_func>
 800c354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c358:	6006      	str	r6, [r0, #0]
 800c35a:	60c6      	str	r6, [r0, #12]
 800c35c:	b13c      	cbz	r4, 800c36e <_Bfree+0x3a>
 800c35e:	69eb      	ldr	r3, [r5, #28]
 800c360:	6862      	ldr	r2, [r4, #4]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c368:	6021      	str	r1, [r4, #0]
 800c36a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c36e:	bd70      	pop	{r4, r5, r6, pc}
 800c370:	0800ed5e 	.word	0x0800ed5e
 800c374:	0800edde 	.word	0x0800edde

0800c378 <__multadd>:
 800c378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c37c:	f101 0c14 	add.w	ip, r1, #20
 800c380:	4607      	mov	r7, r0
 800c382:	460c      	mov	r4, r1
 800c384:	461e      	mov	r6, r3
 800c386:	690d      	ldr	r5, [r1, #16]
 800c388:	2000      	movs	r0, #0
 800c38a:	f8dc 3000 	ldr.w	r3, [ip]
 800c38e:	3001      	adds	r0, #1
 800c390:	b299      	uxth	r1, r3
 800c392:	4285      	cmp	r5, r0
 800c394:	fb02 6101 	mla	r1, r2, r1, r6
 800c398:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c39c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800c3a0:	b289      	uxth	r1, r1
 800c3a2:	fb02 3306 	mla	r3, r2, r6, r3
 800c3a6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c3aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c3ae:	f84c 1b04 	str.w	r1, [ip], #4
 800c3b2:	dcea      	bgt.n	800c38a <__multadd+0x12>
 800c3b4:	b30e      	cbz	r6, 800c3fa <__multadd+0x82>
 800c3b6:	68a3      	ldr	r3, [r4, #8]
 800c3b8:	42ab      	cmp	r3, r5
 800c3ba:	dc19      	bgt.n	800c3f0 <__multadd+0x78>
 800c3bc:	6861      	ldr	r1, [r4, #4]
 800c3be:	4638      	mov	r0, r7
 800c3c0:	3101      	adds	r1, #1
 800c3c2:	f7ff ff77 	bl	800c2b4 <_Balloc>
 800c3c6:	4680      	mov	r8, r0
 800c3c8:	b928      	cbnz	r0, 800c3d6 <__multadd+0x5e>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c400 <__multadd+0x88>)
 800c3ce:	21ba      	movs	r1, #186	@ 0xba
 800c3d0:	480c      	ldr	r0, [pc, #48]	@ (800c404 <__multadd+0x8c>)
 800c3d2:	f001 fecd 	bl	800e170 <__assert_func>
 800c3d6:	6922      	ldr	r2, [r4, #16]
 800c3d8:	f104 010c 	add.w	r1, r4, #12
 800c3dc:	300c      	adds	r0, #12
 800c3de:	3202      	adds	r2, #2
 800c3e0:	0092      	lsls	r2, r2, #2
 800c3e2:	f001 fead 	bl	800e140 <memcpy>
 800c3e6:	4621      	mov	r1, r4
 800c3e8:	4644      	mov	r4, r8
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	f7ff ffa2 	bl	800c334 <_Bfree>
 800c3f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3f4:	3501      	adds	r5, #1
 800c3f6:	615e      	str	r6, [r3, #20]
 800c3f8:	6125      	str	r5, [r4, #16]
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c400:	0800edcd 	.word	0x0800edcd
 800c404:	0800edde 	.word	0x0800edde

0800c408 <__s2b>:
 800c408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c40c:	4615      	mov	r5, r2
 800c40e:	461f      	mov	r7, r3
 800c410:	2209      	movs	r2, #9
 800c412:	3308      	adds	r3, #8
 800c414:	460c      	mov	r4, r1
 800c416:	4606      	mov	r6, r0
 800c418:	2100      	movs	r1, #0
 800c41a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c41e:	2201      	movs	r2, #1
 800c420:	429a      	cmp	r2, r3
 800c422:	db09      	blt.n	800c438 <__s2b+0x30>
 800c424:	4630      	mov	r0, r6
 800c426:	f7ff ff45 	bl	800c2b4 <_Balloc>
 800c42a:	b940      	cbnz	r0, 800c43e <__s2b+0x36>
 800c42c:	4602      	mov	r2, r0
 800c42e:	4b19      	ldr	r3, [pc, #100]	@ (800c494 <__s2b+0x8c>)
 800c430:	21d3      	movs	r1, #211	@ 0xd3
 800c432:	4819      	ldr	r0, [pc, #100]	@ (800c498 <__s2b+0x90>)
 800c434:	f001 fe9c 	bl	800e170 <__assert_func>
 800c438:	0052      	lsls	r2, r2, #1
 800c43a:	3101      	adds	r1, #1
 800c43c:	e7f0      	b.n	800c420 <__s2b+0x18>
 800c43e:	9b08      	ldr	r3, [sp, #32]
 800c440:	2d09      	cmp	r5, #9
 800c442:	6143      	str	r3, [r0, #20]
 800c444:	f04f 0301 	mov.w	r3, #1
 800c448:	6103      	str	r3, [r0, #16]
 800c44a:	dd16      	ble.n	800c47a <__s2b+0x72>
 800c44c:	f104 0909 	add.w	r9, r4, #9
 800c450:	442c      	add	r4, r5
 800c452:	46c8      	mov	r8, r9
 800c454:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c458:	4601      	mov	r1, r0
 800c45a:	220a      	movs	r2, #10
 800c45c:	4630      	mov	r0, r6
 800c45e:	3b30      	subs	r3, #48	@ 0x30
 800c460:	f7ff ff8a 	bl	800c378 <__multadd>
 800c464:	45a0      	cmp	r8, r4
 800c466:	d1f5      	bne.n	800c454 <__s2b+0x4c>
 800c468:	f1a5 0408 	sub.w	r4, r5, #8
 800c46c:	444c      	add	r4, r9
 800c46e:	1b2d      	subs	r5, r5, r4
 800c470:	1963      	adds	r3, r4, r5
 800c472:	42bb      	cmp	r3, r7
 800c474:	db04      	blt.n	800c480 <__s2b+0x78>
 800c476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c47a:	340a      	adds	r4, #10
 800c47c:	2509      	movs	r5, #9
 800c47e:	e7f6      	b.n	800c46e <__s2b+0x66>
 800c480:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c484:	4601      	mov	r1, r0
 800c486:	220a      	movs	r2, #10
 800c488:	4630      	mov	r0, r6
 800c48a:	3b30      	subs	r3, #48	@ 0x30
 800c48c:	f7ff ff74 	bl	800c378 <__multadd>
 800c490:	e7ee      	b.n	800c470 <__s2b+0x68>
 800c492:	bf00      	nop
 800c494:	0800edcd 	.word	0x0800edcd
 800c498:	0800edde 	.word	0x0800edde

0800c49c <__hi0bits>:
 800c49c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	bf36      	itet	cc
 800c4a4:	0403      	lslcc	r3, r0, #16
 800c4a6:	2000      	movcs	r0, #0
 800c4a8:	2010      	movcc	r0, #16
 800c4aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c4ae:	bf3c      	itt	cc
 800c4b0:	021b      	lslcc	r3, r3, #8
 800c4b2:	3008      	addcc	r0, #8
 800c4b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4b8:	bf3c      	itt	cc
 800c4ba:	011b      	lslcc	r3, r3, #4
 800c4bc:	3004      	addcc	r0, #4
 800c4be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4c2:	bf3c      	itt	cc
 800c4c4:	009b      	lslcc	r3, r3, #2
 800c4c6:	3002      	addcc	r0, #2
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	db05      	blt.n	800c4d8 <__hi0bits+0x3c>
 800c4cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c4d0:	f100 0001 	add.w	r0, r0, #1
 800c4d4:	bf08      	it	eq
 800c4d6:	2020      	moveq	r0, #32
 800c4d8:	4770      	bx	lr

0800c4da <__lo0bits>:
 800c4da:	6803      	ldr	r3, [r0, #0]
 800c4dc:	4602      	mov	r2, r0
 800c4de:	f013 0007 	ands.w	r0, r3, #7
 800c4e2:	d00b      	beq.n	800c4fc <__lo0bits+0x22>
 800c4e4:	07d9      	lsls	r1, r3, #31
 800c4e6:	d421      	bmi.n	800c52c <__lo0bits+0x52>
 800c4e8:	0798      	lsls	r0, r3, #30
 800c4ea:	bf47      	ittee	mi
 800c4ec:	085b      	lsrmi	r3, r3, #1
 800c4ee:	2001      	movmi	r0, #1
 800c4f0:	089b      	lsrpl	r3, r3, #2
 800c4f2:	2002      	movpl	r0, #2
 800c4f4:	bf4c      	ite	mi
 800c4f6:	6013      	strmi	r3, [r2, #0]
 800c4f8:	6013      	strpl	r3, [r2, #0]
 800c4fa:	4770      	bx	lr
 800c4fc:	b299      	uxth	r1, r3
 800c4fe:	b909      	cbnz	r1, 800c504 <__lo0bits+0x2a>
 800c500:	0c1b      	lsrs	r3, r3, #16
 800c502:	2010      	movs	r0, #16
 800c504:	b2d9      	uxtb	r1, r3
 800c506:	b909      	cbnz	r1, 800c50c <__lo0bits+0x32>
 800c508:	3008      	adds	r0, #8
 800c50a:	0a1b      	lsrs	r3, r3, #8
 800c50c:	0719      	lsls	r1, r3, #28
 800c50e:	bf04      	itt	eq
 800c510:	091b      	lsreq	r3, r3, #4
 800c512:	3004      	addeq	r0, #4
 800c514:	0799      	lsls	r1, r3, #30
 800c516:	bf04      	itt	eq
 800c518:	089b      	lsreq	r3, r3, #2
 800c51a:	3002      	addeq	r0, #2
 800c51c:	07d9      	lsls	r1, r3, #31
 800c51e:	d403      	bmi.n	800c528 <__lo0bits+0x4e>
 800c520:	085b      	lsrs	r3, r3, #1
 800c522:	f100 0001 	add.w	r0, r0, #1
 800c526:	d003      	beq.n	800c530 <__lo0bits+0x56>
 800c528:	6013      	str	r3, [r2, #0]
 800c52a:	4770      	bx	lr
 800c52c:	2000      	movs	r0, #0
 800c52e:	4770      	bx	lr
 800c530:	2020      	movs	r0, #32
 800c532:	4770      	bx	lr

0800c534 <__i2b>:
 800c534:	b510      	push	{r4, lr}
 800c536:	460c      	mov	r4, r1
 800c538:	2101      	movs	r1, #1
 800c53a:	f7ff febb 	bl	800c2b4 <_Balloc>
 800c53e:	4602      	mov	r2, r0
 800c540:	b928      	cbnz	r0, 800c54e <__i2b+0x1a>
 800c542:	4b05      	ldr	r3, [pc, #20]	@ (800c558 <__i2b+0x24>)
 800c544:	f240 1145 	movw	r1, #325	@ 0x145
 800c548:	4804      	ldr	r0, [pc, #16]	@ (800c55c <__i2b+0x28>)
 800c54a:	f001 fe11 	bl	800e170 <__assert_func>
 800c54e:	2301      	movs	r3, #1
 800c550:	6144      	str	r4, [r0, #20]
 800c552:	6103      	str	r3, [r0, #16]
 800c554:	bd10      	pop	{r4, pc}
 800c556:	bf00      	nop
 800c558:	0800edcd 	.word	0x0800edcd
 800c55c:	0800edde 	.word	0x0800edde

0800c560 <__multiply>:
 800c560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c564:	4614      	mov	r4, r2
 800c566:	690a      	ldr	r2, [r1, #16]
 800c568:	460f      	mov	r7, r1
 800c56a:	b085      	sub	sp, #20
 800c56c:	6923      	ldr	r3, [r4, #16]
 800c56e:	429a      	cmp	r2, r3
 800c570:	bfa2      	ittt	ge
 800c572:	4623      	movge	r3, r4
 800c574:	460c      	movge	r4, r1
 800c576:	461f      	movge	r7, r3
 800c578:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c57c:	68a3      	ldr	r3, [r4, #8]
 800c57e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c582:	6861      	ldr	r1, [r4, #4]
 800c584:	eb0a 0609 	add.w	r6, sl, r9
 800c588:	42b3      	cmp	r3, r6
 800c58a:	bfb8      	it	lt
 800c58c:	3101      	addlt	r1, #1
 800c58e:	f7ff fe91 	bl	800c2b4 <_Balloc>
 800c592:	b930      	cbnz	r0, 800c5a2 <__multiply+0x42>
 800c594:	4602      	mov	r2, r0
 800c596:	4b45      	ldr	r3, [pc, #276]	@ (800c6ac <__multiply+0x14c>)
 800c598:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c59c:	4844      	ldr	r0, [pc, #272]	@ (800c6b0 <__multiply+0x150>)
 800c59e:	f001 fde7 	bl	800e170 <__assert_func>
 800c5a2:	f100 0514 	add.w	r5, r0, #20
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c5ac:	462b      	mov	r3, r5
 800c5ae:	4543      	cmp	r3, r8
 800c5b0:	d321      	bcc.n	800c5f6 <__multiply+0x96>
 800c5b2:	f107 0114 	add.w	r1, r7, #20
 800c5b6:	f104 0214 	add.w	r2, r4, #20
 800c5ba:	f104 0715 	add.w	r7, r4, #21
 800c5be:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c5c2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c5c6:	9302      	str	r3, [sp, #8]
 800c5c8:	1b13      	subs	r3, r2, r4
 800c5ca:	3b15      	subs	r3, #21
 800c5cc:	f023 0303 	bic.w	r3, r3, #3
 800c5d0:	3304      	adds	r3, #4
 800c5d2:	42ba      	cmp	r2, r7
 800c5d4:	bf38      	it	cc
 800c5d6:	2304      	movcc	r3, #4
 800c5d8:	9301      	str	r3, [sp, #4]
 800c5da:	9b02      	ldr	r3, [sp, #8]
 800c5dc:	9103      	str	r1, [sp, #12]
 800c5de:	428b      	cmp	r3, r1
 800c5e0:	d80c      	bhi.n	800c5fc <__multiply+0x9c>
 800c5e2:	2e00      	cmp	r6, #0
 800c5e4:	dd03      	ble.n	800c5ee <__multiply+0x8e>
 800c5e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d05b      	beq.n	800c6a6 <__multiply+0x146>
 800c5ee:	6106      	str	r6, [r0, #16]
 800c5f0:	b005      	add	sp, #20
 800c5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f6:	f843 2b04 	str.w	r2, [r3], #4
 800c5fa:	e7d8      	b.n	800c5ae <__multiply+0x4e>
 800c5fc:	f8b1 a000 	ldrh.w	sl, [r1]
 800c600:	f1ba 0f00 	cmp.w	sl, #0
 800c604:	d024      	beq.n	800c650 <__multiply+0xf0>
 800c606:	f104 0e14 	add.w	lr, r4, #20
 800c60a:	46a9      	mov	r9, r5
 800c60c:	f04f 0c00 	mov.w	ip, #0
 800c610:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c614:	f8d9 3000 	ldr.w	r3, [r9]
 800c618:	fa1f fb87 	uxth.w	fp, r7
 800c61c:	4572      	cmp	r2, lr
 800c61e:	b29b      	uxth	r3, r3
 800c620:	fb0a 330b 	mla	r3, sl, fp, r3
 800c624:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c628:	f8d9 7000 	ldr.w	r7, [r9]
 800c62c:	4463      	add	r3, ip
 800c62e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c632:	fb0a c70b 	mla	r7, sl, fp, ip
 800c636:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c640:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c644:	f849 3b04 	str.w	r3, [r9], #4
 800c648:	d8e2      	bhi.n	800c610 <__multiply+0xb0>
 800c64a:	9b01      	ldr	r3, [sp, #4]
 800c64c:	f845 c003 	str.w	ip, [r5, r3]
 800c650:	9b03      	ldr	r3, [sp, #12]
 800c652:	3104      	adds	r1, #4
 800c654:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c658:	f1b9 0f00 	cmp.w	r9, #0
 800c65c:	d021      	beq.n	800c6a2 <__multiply+0x142>
 800c65e:	682b      	ldr	r3, [r5, #0]
 800c660:	f104 0c14 	add.w	ip, r4, #20
 800c664:	46ae      	mov	lr, r5
 800c666:	f04f 0a00 	mov.w	sl, #0
 800c66a:	f8bc b000 	ldrh.w	fp, [ip]
 800c66e:	b29b      	uxth	r3, r3
 800c670:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c674:	fb09 770b 	mla	r7, r9, fp, r7
 800c678:	4457      	add	r7, sl
 800c67a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c67e:	f84e 3b04 	str.w	r3, [lr], #4
 800c682:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c686:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c68a:	f8be 3000 	ldrh.w	r3, [lr]
 800c68e:	4562      	cmp	r2, ip
 800c690:	fb09 330a 	mla	r3, r9, sl, r3
 800c694:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c698:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c69c:	d8e5      	bhi.n	800c66a <__multiply+0x10a>
 800c69e:	9f01      	ldr	r7, [sp, #4]
 800c6a0:	51eb      	str	r3, [r5, r7]
 800c6a2:	3504      	adds	r5, #4
 800c6a4:	e799      	b.n	800c5da <__multiply+0x7a>
 800c6a6:	3e01      	subs	r6, #1
 800c6a8:	e79b      	b.n	800c5e2 <__multiply+0x82>
 800c6aa:	bf00      	nop
 800c6ac:	0800edcd 	.word	0x0800edcd
 800c6b0:	0800edde 	.word	0x0800edde

0800c6b4 <__pow5mult>:
 800c6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6b8:	4615      	mov	r5, r2
 800c6ba:	f012 0203 	ands.w	r2, r2, #3
 800c6be:	4607      	mov	r7, r0
 800c6c0:	460e      	mov	r6, r1
 800c6c2:	d007      	beq.n	800c6d4 <__pow5mult+0x20>
 800c6c4:	3a01      	subs	r2, #1
 800c6c6:	4c25      	ldr	r4, [pc, #148]	@ (800c75c <__pow5mult+0xa8>)
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6ce:	f7ff fe53 	bl	800c378 <__multadd>
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	10ad      	asrs	r5, r5, #2
 800c6d6:	d03d      	beq.n	800c754 <__pow5mult+0xa0>
 800c6d8:	69fc      	ldr	r4, [r7, #28]
 800c6da:	b97c      	cbnz	r4, 800c6fc <__pow5mult+0x48>
 800c6dc:	2010      	movs	r0, #16
 800c6de:	f7fd fe45 	bl	800a36c <malloc>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	61f8      	str	r0, [r7, #28]
 800c6e6:	b928      	cbnz	r0, 800c6f4 <__pow5mult+0x40>
 800c6e8:	4b1d      	ldr	r3, [pc, #116]	@ (800c760 <__pow5mult+0xac>)
 800c6ea:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c6ee:	481d      	ldr	r0, [pc, #116]	@ (800c764 <__pow5mult+0xb0>)
 800c6f0:	f001 fd3e 	bl	800e170 <__assert_func>
 800c6f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6f8:	6004      	str	r4, [r0, #0]
 800c6fa:	60c4      	str	r4, [r0, #12]
 800c6fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c700:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c704:	b94c      	cbnz	r4, 800c71a <__pow5mult+0x66>
 800c706:	f240 2171 	movw	r1, #625	@ 0x271
 800c70a:	4638      	mov	r0, r7
 800c70c:	f7ff ff12 	bl	800c534 <__i2b>
 800c710:	2300      	movs	r3, #0
 800c712:	4604      	mov	r4, r0
 800c714:	f8c8 0008 	str.w	r0, [r8, #8]
 800c718:	6003      	str	r3, [r0, #0]
 800c71a:	f04f 0900 	mov.w	r9, #0
 800c71e:	07eb      	lsls	r3, r5, #31
 800c720:	d50a      	bpl.n	800c738 <__pow5mult+0x84>
 800c722:	4631      	mov	r1, r6
 800c724:	4622      	mov	r2, r4
 800c726:	4638      	mov	r0, r7
 800c728:	f7ff ff1a 	bl	800c560 <__multiply>
 800c72c:	4680      	mov	r8, r0
 800c72e:	4631      	mov	r1, r6
 800c730:	4638      	mov	r0, r7
 800c732:	4646      	mov	r6, r8
 800c734:	f7ff fdfe 	bl	800c334 <_Bfree>
 800c738:	106d      	asrs	r5, r5, #1
 800c73a:	d00b      	beq.n	800c754 <__pow5mult+0xa0>
 800c73c:	6820      	ldr	r0, [r4, #0]
 800c73e:	b938      	cbnz	r0, 800c750 <__pow5mult+0x9c>
 800c740:	4622      	mov	r2, r4
 800c742:	4621      	mov	r1, r4
 800c744:	4638      	mov	r0, r7
 800c746:	f7ff ff0b 	bl	800c560 <__multiply>
 800c74a:	6020      	str	r0, [r4, #0]
 800c74c:	f8c0 9000 	str.w	r9, [r0]
 800c750:	4604      	mov	r4, r0
 800c752:	e7e4      	b.n	800c71e <__pow5mult+0x6a>
 800c754:	4630      	mov	r0, r6
 800c756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c75a:	bf00      	nop
 800c75c:	0800ee38 	.word	0x0800ee38
 800c760:	0800ed5e 	.word	0x0800ed5e
 800c764:	0800edde 	.word	0x0800edde

0800c768 <__lshift>:
 800c768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c76c:	460c      	mov	r4, r1
 800c76e:	4607      	mov	r7, r0
 800c770:	4691      	mov	r9, r2
 800c772:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c776:	6923      	ldr	r3, [r4, #16]
 800c778:	6849      	ldr	r1, [r1, #4]
 800c77a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c77e:	68a3      	ldr	r3, [r4, #8]
 800c780:	f108 0601 	add.w	r6, r8, #1
 800c784:	42b3      	cmp	r3, r6
 800c786:	db0b      	blt.n	800c7a0 <__lshift+0x38>
 800c788:	4638      	mov	r0, r7
 800c78a:	f7ff fd93 	bl	800c2b4 <_Balloc>
 800c78e:	4605      	mov	r5, r0
 800c790:	b948      	cbnz	r0, 800c7a6 <__lshift+0x3e>
 800c792:	4602      	mov	r2, r0
 800c794:	4b28      	ldr	r3, [pc, #160]	@ (800c838 <__lshift+0xd0>)
 800c796:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c79a:	4828      	ldr	r0, [pc, #160]	@ (800c83c <__lshift+0xd4>)
 800c79c:	f001 fce8 	bl	800e170 <__assert_func>
 800c7a0:	3101      	adds	r1, #1
 800c7a2:	005b      	lsls	r3, r3, #1
 800c7a4:	e7ee      	b.n	800c784 <__lshift+0x1c>
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	f100 0114 	add.w	r1, r0, #20
 800c7ac:	f100 0210 	add.w	r2, r0, #16
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	4553      	cmp	r3, sl
 800c7b4:	db33      	blt.n	800c81e <__lshift+0xb6>
 800c7b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7ba:	f104 0314 	add.w	r3, r4, #20
 800c7be:	6920      	ldr	r0, [r4, #16]
 800c7c0:	f019 091f 	ands.w	r9, r9, #31
 800c7c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c7cc:	d02b      	beq.n	800c826 <__lshift+0xbe>
 800c7ce:	f1c9 0e20 	rsb	lr, r9, #32
 800c7d2:	468a      	mov	sl, r1
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	6818      	ldr	r0, [r3, #0]
 800c7d8:	fa00 f009 	lsl.w	r0, r0, r9
 800c7dc:	4310      	orrs	r0, r2
 800c7de:	f84a 0b04 	str.w	r0, [sl], #4
 800c7e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7e6:	459c      	cmp	ip, r3
 800c7e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c7ec:	d8f3      	bhi.n	800c7d6 <__lshift+0x6e>
 800c7ee:	ebac 0304 	sub.w	r3, ip, r4
 800c7f2:	f104 0015 	add.w	r0, r4, #21
 800c7f6:	3b15      	subs	r3, #21
 800c7f8:	f023 0303 	bic.w	r3, r3, #3
 800c7fc:	3304      	adds	r3, #4
 800c7fe:	4584      	cmp	ip, r0
 800c800:	bf38      	it	cc
 800c802:	2304      	movcc	r3, #4
 800c804:	50ca      	str	r2, [r1, r3]
 800c806:	b10a      	cbz	r2, 800c80c <__lshift+0xa4>
 800c808:	f108 0602 	add.w	r6, r8, #2
 800c80c:	3e01      	subs	r6, #1
 800c80e:	4638      	mov	r0, r7
 800c810:	4621      	mov	r1, r4
 800c812:	612e      	str	r6, [r5, #16]
 800c814:	f7ff fd8e 	bl	800c334 <_Bfree>
 800c818:	4628      	mov	r0, r5
 800c81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c81e:	3301      	adds	r3, #1
 800c820:	f842 0f04 	str.w	r0, [r2, #4]!
 800c824:	e7c5      	b.n	800c7b2 <__lshift+0x4a>
 800c826:	3904      	subs	r1, #4
 800c828:	f853 2b04 	ldr.w	r2, [r3], #4
 800c82c:	459c      	cmp	ip, r3
 800c82e:	f841 2f04 	str.w	r2, [r1, #4]!
 800c832:	d8f9      	bhi.n	800c828 <__lshift+0xc0>
 800c834:	e7ea      	b.n	800c80c <__lshift+0xa4>
 800c836:	bf00      	nop
 800c838:	0800edcd 	.word	0x0800edcd
 800c83c:	0800edde 	.word	0x0800edde

0800c840 <__mcmp>:
 800c840:	4603      	mov	r3, r0
 800c842:	690a      	ldr	r2, [r1, #16]
 800c844:	6900      	ldr	r0, [r0, #16]
 800c846:	1a80      	subs	r0, r0, r2
 800c848:	b530      	push	{r4, r5, lr}
 800c84a:	d10e      	bne.n	800c86a <__mcmp+0x2a>
 800c84c:	3314      	adds	r3, #20
 800c84e:	3114      	adds	r1, #20
 800c850:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c854:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c858:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c85c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c860:	4295      	cmp	r5, r2
 800c862:	d003      	beq.n	800c86c <__mcmp+0x2c>
 800c864:	d205      	bcs.n	800c872 <__mcmp+0x32>
 800c866:	f04f 30ff 	mov.w	r0, #4294967295
 800c86a:	bd30      	pop	{r4, r5, pc}
 800c86c:	42a3      	cmp	r3, r4
 800c86e:	d3f3      	bcc.n	800c858 <__mcmp+0x18>
 800c870:	e7fb      	b.n	800c86a <__mcmp+0x2a>
 800c872:	2001      	movs	r0, #1
 800c874:	e7f9      	b.n	800c86a <__mcmp+0x2a>
	...

0800c878 <__mdiff>:
 800c878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c87c:	4689      	mov	r9, r1
 800c87e:	4606      	mov	r6, r0
 800c880:	4611      	mov	r1, r2
 800c882:	4614      	mov	r4, r2
 800c884:	4648      	mov	r0, r9
 800c886:	f7ff ffdb 	bl	800c840 <__mcmp>
 800c88a:	1e05      	subs	r5, r0, #0
 800c88c:	d112      	bne.n	800c8b4 <__mdiff+0x3c>
 800c88e:	4629      	mov	r1, r5
 800c890:	4630      	mov	r0, r6
 800c892:	f7ff fd0f 	bl	800c2b4 <_Balloc>
 800c896:	4602      	mov	r2, r0
 800c898:	b928      	cbnz	r0, 800c8a6 <__mdiff+0x2e>
 800c89a:	4b41      	ldr	r3, [pc, #260]	@ (800c9a0 <__mdiff+0x128>)
 800c89c:	f240 2137 	movw	r1, #567	@ 0x237
 800c8a0:	4840      	ldr	r0, [pc, #256]	@ (800c9a4 <__mdiff+0x12c>)
 800c8a2:	f001 fc65 	bl	800e170 <__assert_func>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8ac:	4610      	mov	r0, r2
 800c8ae:	b003      	add	sp, #12
 800c8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b4:	bfbc      	itt	lt
 800c8b6:	464b      	movlt	r3, r9
 800c8b8:	46a1      	movlt	r9, r4
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	bfb8      	it	lt
 800c8be:	2501      	movlt	r5, #1
 800c8c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c8c4:	bfb4      	ite	lt
 800c8c6:	461c      	movlt	r4, r3
 800c8c8:	2500      	movge	r5, #0
 800c8ca:	f7ff fcf3 	bl	800c2b4 <_Balloc>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	b918      	cbnz	r0, 800c8da <__mdiff+0x62>
 800c8d2:	4b33      	ldr	r3, [pc, #204]	@ (800c9a0 <__mdiff+0x128>)
 800c8d4:	f240 2145 	movw	r1, #581	@ 0x245
 800c8d8:	e7e2      	b.n	800c8a0 <__mdiff+0x28>
 800c8da:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c8de:	f104 0e14 	add.w	lr, r4, #20
 800c8e2:	6926      	ldr	r6, [r4, #16]
 800c8e4:	f100 0b14 	add.w	fp, r0, #20
 800c8e8:	60c5      	str	r5, [r0, #12]
 800c8ea:	f109 0514 	add.w	r5, r9, #20
 800c8ee:	f109 0310 	add.w	r3, r9, #16
 800c8f2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c8f6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c8fa:	46d9      	mov	r9, fp
 800c8fc:	f04f 0c00 	mov.w	ip, #0
 800c900:	9301      	str	r3, [sp, #4]
 800c902:	9b01      	ldr	r3, [sp, #4]
 800c904:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c908:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c90c:	4576      	cmp	r6, lr
 800c90e:	9301      	str	r3, [sp, #4]
 800c910:	fa1f f38a 	uxth.w	r3, sl
 800c914:	4619      	mov	r1, r3
 800c916:	b283      	uxth	r3, r0
 800c918:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800c91c:	eba1 0303 	sub.w	r3, r1, r3
 800c920:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c924:	4463      	add	r3, ip
 800c926:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c930:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c934:	f849 3b04 	str.w	r3, [r9], #4
 800c938:	d8e3      	bhi.n	800c902 <__mdiff+0x8a>
 800c93a:	1b33      	subs	r3, r6, r4
 800c93c:	3415      	adds	r4, #21
 800c93e:	3b15      	subs	r3, #21
 800c940:	f023 0303 	bic.w	r3, r3, #3
 800c944:	3304      	adds	r3, #4
 800c946:	42a6      	cmp	r6, r4
 800c948:	bf38      	it	cc
 800c94a:	2304      	movcc	r3, #4
 800c94c:	441d      	add	r5, r3
 800c94e:	445b      	add	r3, fp
 800c950:	462c      	mov	r4, r5
 800c952:	461e      	mov	r6, r3
 800c954:	4544      	cmp	r4, r8
 800c956:	d30e      	bcc.n	800c976 <__mdiff+0xfe>
 800c958:	f108 0103 	add.w	r1, r8, #3
 800c95c:	1b49      	subs	r1, r1, r5
 800c95e:	3d03      	subs	r5, #3
 800c960:	f021 0103 	bic.w	r1, r1, #3
 800c964:	45a8      	cmp	r8, r5
 800c966:	bf38      	it	cc
 800c968:	2100      	movcc	r1, #0
 800c96a:	440b      	add	r3, r1
 800c96c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c970:	b199      	cbz	r1, 800c99a <__mdiff+0x122>
 800c972:	6117      	str	r7, [r2, #16]
 800c974:	e79a      	b.n	800c8ac <__mdiff+0x34>
 800c976:	f854 1b04 	ldr.w	r1, [r4], #4
 800c97a:	46e6      	mov	lr, ip
 800c97c:	fa1f fc81 	uxth.w	ip, r1
 800c980:	0c08      	lsrs	r0, r1, #16
 800c982:	4471      	add	r1, lr
 800c984:	44f4      	add	ip, lr
 800c986:	b289      	uxth	r1, r1
 800c988:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c98c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c990:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c994:	f846 1b04 	str.w	r1, [r6], #4
 800c998:	e7dc      	b.n	800c954 <__mdiff+0xdc>
 800c99a:	3f01      	subs	r7, #1
 800c99c:	e7e6      	b.n	800c96c <__mdiff+0xf4>
 800c99e:	bf00      	nop
 800c9a0:	0800edcd 	.word	0x0800edcd
 800c9a4:	0800edde 	.word	0x0800edde

0800c9a8 <__ulp>:
 800c9a8:	b082      	sub	sp, #8
 800c9aa:	4b11      	ldr	r3, [pc, #68]	@ (800c9f0 <__ulp+0x48>)
 800c9ac:	ed8d 0b00 	vstr	d0, [sp]
 800c9b0:	9a01      	ldr	r2, [sp, #4]
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	dc08      	bgt.n	800c9ce <__ulp+0x26>
 800c9bc:	425b      	negs	r3, r3
 800c9be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c9c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c9c6:	da04      	bge.n	800c9d2 <__ulp+0x2a>
 800c9c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c9cc:	4113      	asrs	r3, r2
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	e008      	b.n	800c9e4 <__ulp+0x3c>
 800c9d2:	f1a2 0314 	sub.w	r3, r2, #20
 800c9d6:	2b1e      	cmp	r3, #30
 800c9d8:	bfd6      	itet	le
 800c9da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c9de:	2201      	movgt	r2, #1
 800c9e0:	40da      	lsrle	r2, r3
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	4610      	mov	r0, r2
 800c9e8:	ec41 0b10 	vmov	d0, r0, r1
 800c9ec:	b002      	add	sp, #8
 800c9ee:	4770      	bx	lr
 800c9f0:	7ff00000 	.word	0x7ff00000

0800c9f4 <__b2d>:
 800c9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f8:	6906      	ldr	r6, [r0, #16]
 800c9fa:	f100 0814 	add.w	r8, r0, #20
 800c9fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ca02:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ca06:	1f37      	subs	r7, r6, #4
 800ca08:	4610      	mov	r0, r2
 800ca0a:	f7ff fd47 	bl	800c49c <__hi0bits>
 800ca0e:	f1c0 0320 	rsb	r3, r0, #32
 800ca12:	280a      	cmp	r0, #10
 800ca14:	600b      	str	r3, [r1, #0]
 800ca16:	491d      	ldr	r1, [pc, #116]	@ (800ca8c <__b2d+0x98>)
 800ca18:	dc16      	bgt.n	800ca48 <__b2d+0x54>
 800ca1a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ca1e:	45b8      	cmp	r8, r7
 800ca20:	f100 0015 	add.w	r0, r0, #21
 800ca24:	fa22 f30c 	lsr.w	r3, r2, ip
 800ca28:	fa02 f000 	lsl.w	r0, r2, r0
 800ca2c:	ea43 0501 	orr.w	r5, r3, r1
 800ca30:	bf34      	ite	cc
 800ca32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ca36:	2300      	movcs	r3, #0
 800ca38:	fa23 f30c 	lsr.w	r3, r3, ip
 800ca3c:	4303      	orrs	r3, r0
 800ca3e:	461c      	mov	r4, r3
 800ca40:	ec45 4b10 	vmov	d0, r4, r5
 800ca44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca48:	45b8      	cmp	r8, r7
 800ca4a:	bf3a      	itte	cc
 800ca4c:	f1a6 0708 	subcc.w	r7, r6, #8
 800ca50:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ca54:	2300      	movcs	r3, #0
 800ca56:	380b      	subs	r0, #11
 800ca58:	d014      	beq.n	800ca84 <__b2d+0x90>
 800ca5a:	f1c0 0120 	rsb	r1, r0, #32
 800ca5e:	4082      	lsls	r2, r0
 800ca60:	4547      	cmp	r7, r8
 800ca62:	fa23 f401 	lsr.w	r4, r3, r1
 800ca66:	fa03 f300 	lsl.w	r3, r3, r0
 800ca6a:	ea42 0204 	orr.w	r2, r2, r4
 800ca6e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ca72:	bf8c      	ite	hi
 800ca74:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ca78:	2200      	movls	r2, #0
 800ca7a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ca7e:	40ca      	lsrs	r2, r1
 800ca80:	4313      	orrs	r3, r2
 800ca82:	e7dc      	b.n	800ca3e <__b2d+0x4a>
 800ca84:	ea42 0501 	orr.w	r5, r2, r1
 800ca88:	e7d9      	b.n	800ca3e <__b2d+0x4a>
 800ca8a:	bf00      	nop
 800ca8c:	3ff00000 	.word	0x3ff00000

0800ca90 <__d2b>:
 800ca90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca94:	460f      	mov	r7, r1
 800ca96:	2101      	movs	r1, #1
 800ca98:	4616      	mov	r6, r2
 800ca9a:	ec59 8b10 	vmov	r8, r9, d0
 800ca9e:	f7ff fc09 	bl	800c2b4 <_Balloc>
 800caa2:	4604      	mov	r4, r0
 800caa4:	b930      	cbnz	r0, 800cab4 <__d2b+0x24>
 800caa6:	4602      	mov	r2, r0
 800caa8:	4b23      	ldr	r3, [pc, #140]	@ (800cb38 <__d2b+0xa8>)
 800caaa:	f240 310f 	movw	r1, #783	@ 0x30f
 800caae:	4823      	ldr	r0, [pc, #140]	@ (800cb3c <__d2b+0xac>)
 800cab0:	f001 fb5e 	bl	800e170 <__assert_func>
 800cab4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cab8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cabc:	b10d      	cbz	r5, 800cac2 <__d2b+0x32>
 800cabe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cac2:	9301      	str	r3, [sp, #4]
 800cac4:	f1b8 0300 	subs.w	r3, r8, #0
 800cac8:	d023      	beq.n	800cb12 <__d2b+0x82>
 800caca:	4668      	mov	r0, sp
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	f7ff fd04 	bl	800c4da <__lo0bits>
 800cad2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cad6:	b1d0      	cbz	r0, 800cb0e <__d2b+0x7e>
 800cad8:	f1c0 0320 	rsb	r3, r0, #32
 800cadc:	fa02 f303 	lsl.w	r3, r2, r3
 800cae0:	40c2      	lsrs	r2, r0
 800cae2:	430b      	orrs	r3, r1
 800cae4:	9201      	str	r2, [sp, #4]
 800cae6:	6163      	str	r3, [r4, #20]
 800cae8:	9b01      	ldr	r3, [sp, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	61a3      	str	r3, [r4, #24]
 800caee:	bf0c      	ite	eq
 800caf0:	2201      	moveq	r2, #1
 800caf2:	2202      	movne	r2, #2
 800caf4:	6122      	str	r2, [r4, #16]
 800caf6:	b1a5      	cbz	r5, 800cb22 <__d2b+0x92>
 800caf8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cafc:	4405      	add	r5, r0
 800cafe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cb02:	603d      	str	r5, [r7, #0]
 800cb04:	6030      	str	r0, [r6, #0]
 800cb06:	4620      	mov	r0, r4
 800cb08:	b003      	add	sp, #12
 800cb0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb0e:	6161      	str	r1, [r4, #20]
 800cb10:	e7ea      	b.n	800cae8 <__d2b+0x58>
 800cb12:	a801      	add	r0, sp, #4
 800cb14:	f7ff fce1 	bl	800c4da <__lo0bits>
 800cb18:	9b01      	ldr	r3, [sp, #4]
 800cb1a:	3020      	adds	r0, #32
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	6163      	str	r3, [r4, #20]
 800cb20:	e7e8      	b.n	800caf4 <__d2b+0x64>
 800cb22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cb26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb2a:	6038      	str	r0, [r7, #0]
 800cb2c:	6918      	ldr	r0, [r3, #16]
 800cb2e:	f7ff fcb5 	bl	800c49c <__hi0bits>
 800cb32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb36:	e7e5      	b.n	800cb04 <__d2b+0x74>
 800cb38:	0800edcd 	.word	0x0800edcd
 800cb3c:	0800edde 	.word	0x0800edde

0800cb40 <__ratio>:
 800cb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb44:	b085      	sub	sp, #20
 800cb46:	e9cd 1000 	strd	r1, r0, [sp]
 800cb4a:	a902      	add	r1, sp, #8
 800cb4c:	f7ff ff52 	bl	800c9f4 <__b2d>
 800cb50:	a903      	add	r1, sp, #12
 800cb52:	9800      	ldr	r0, [sp, #0]
 800cb54:	ec55 4b10 	vmov	r4, r5, d0
 800cb58:	f7ff ff4c 	bl	800c9f4 <__b2d>
 800cb5c:	9b01      	ldr	r3, [sp, #4]
 800cb5e:	462f      	mov	r7, r5
 800cb60:	4620      	mov	r0, r4
 800cb62:	6919      	ldr	r1, [r3, #16]
 800cb64:	9b00      	ldr	r3, [sp, #0]
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	1ac9      	subs	r1, r1, r3
 800cb6a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cb6e:	ec5b ab10 	vmov	sl, fp, d0
 800cb72:	1a9b      	subs	r3, r3, r2
 800cb74:	46d9      	mov	r9, fp
 800cb76:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	bfcd      	iteet	gt
 800cb7e:	462a      	movgt	r2, r5
 800cb80:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cb84:	465a      	movle	r2, fp
 800cb86:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cb8a:	bfd8      	it	le
 800cb8c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cb90:	4652      	mov	r2, sl
 800cb92:	4639      	mov	r1, r7
 800cb94:	464b      	mov	r3, r9
 800cb96:	f7f3 fe69 	bl	800086c <__aeabi_ddiv>
 800cb9a:	ec41 0b10 	vmov	d0, r0, r1
 800cb9e:	b005      	add	sp, #20
 800cba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cba4 <__copybits>:
 800cba4:	3901      	subs	r1, #1
 800cba6:	f102 0314 	add.w	r3, r2, #20
 800cbaa:	1149      	asrs	r1, r1, #5
 800cbac:	b570      	push	{r4, r5, r6, lr}
 800cbae:	3101      	adds	r1, #1
 800cbb0:	6914      	ldr	r4, [r2, #16]
 800cbb2:	1f05      	subs	r5, r0, #4
 800cbb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cbb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cbbc:	42a3      	cmp	r3, r4
 800cbbe:	d30c      	bcc.n	800cbda <__copybits+0x36>
 800cbc0:	1aa3      	subs	r3, r4, r2
 800cbc2:	3211      	adds	r2, #17
 800cbc4:	3b11      	subs	r3, #17
 800cbc6:	f023 0303 	bic.w	r3, r3, #3
 800cbca:	42a2      	cmp	r2, r4
 800cbcc:	bf88      	it	hi
 800cbce:	2300      	movhi	r3, #0
 800cbd0:	4418      	add	r0, r3
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	4288      	cmp	r0, r1
 800cbd6:	d305      	bcc.n	800cbe4 <__copybits+0x40>
 800cbd8:	bd70      	pop	{r4, r5, r6, pc}
 800cbda:	f853 6b04 	ldr.w	r6, [r3], #4
 800cbde:	f845 6f04 	str.w	r6, [r5, #4]!
 800cbe2:	e7eb      	b.n	800cbbc <__copybits+0x18>
 800cbe4:	f840 3b04 	str.w	r3, [r0], #4
 800cbe8:	e7f4      	b.n	800cbd4 <__copybits+0x30>

0800cbea <__any_on>:
 800cbea:	f100 0214 	add.w	r2, r0, #20
 800cbee:	114b      	asrs	r3, r1, #5
 800cbf0:	6900      	ldr	r0, [r0, #16]
 800cbf2:	4298      	cmp	r0, r3
 800cbf4:	b510      	push	{r4, lr}
 800cbf6:	db11      	blt.n	800cc1c <__any_on+0x32>
 800cbf8:	dd0a      	ble.n	800cc10 <__any_on+0x26>
 800cbfa:	f011 011f 	ands.w	r1, r1, #31
 800cbfe:	d007      	beq.n	800cc10 <__any_on+0x26>
 800cc00:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cc04:	fa24 f001 	lsr.w	r0, r4, r1
 800cc08:	fa00 f101 	lsl.w	r1, r0, r1
 800cc0c:	428c      	cmp	r4, r1
 800cc0e:	d10b      	bne.n	800cc28 <__any_on+0x3e>
 800cc10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d803      	bhi.n	800cc20 <__any_on+0x36>
 800cc18:	2000      	movs	r0, #0
 800cc1a:	bd10      	pop	{r4, pc}
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	e7f7      	b.n	800cc10 <__any_on+0x26>
 800cc20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc24:	2900      	cmp	r1, #0
 800cc26:	d0f5      	beq.n	800cc14 <__any_on+0x2a>
 800cc28:	2001      	movs	r0, #1
 800cc2a:	e7f6      	b.n	800cc1a <__any_on+0x30>

0800cc2c <sulp>:
 800cc2c:	b570      	push	{r4, r5, r6, lr}
 800cc2e:	4604      	mov	r4, r0
 800cc30:	460d      	mov	r5, r1
 800cc32:	4616      	mov	r6, r2
 800cc34:	ec45 4b10 	vmov	d0, r4, r5
 800cc38:	f7ff feb6 	bl	800c9a8 <__ulp>
 800cc3c:	ec51 0b10 	vmov	r0, r1, d0
 800cc40:	b17e      	cbz	r6, 800cc62 <sulp+0x36>
 800cc42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cc46:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	dd09      	ble.n	800cc62 <sulp+0x36>
 800cc4e:	051b      	lsls	r3, r3, #20
 800cc50:	2400      	movs	r4, #0
 800cc52:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cc56:	4622      	mov	r2, r4
 800cc58:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cc5c:	462b      	mov	r3, r5
 800cc5e:	f7f3 fcdb 	bl	8000618 <__aeabi_dmul>
 800cc62:	ec41 0b10 	vmov	d0, r0, r1
 800cc66:	bd70      	pop	{r4, r5, r6, pc}

0800cc68 <_strtod_l>:
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	b09f      	sub	sp, #124	@ 0x7c
 800cc6e:	460c      	mov	r4, r1
 800cc70:	f04f 0a00 	mov.w	sl, #0
 800cc74:	f04f 0b00 	mov.w	fp, #0
 800cc78:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	9005      	str	r0, [sp, #20]
 800cc7e:	921a      	str	r2, [sp, #104]	@ 0x68
 800cc80:	460a      	mov	r2, r1
 800cc82:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc84:	7811      	ldrb	r1, [r2, #0]
 800cc86:	292b      	cmp	r1, #43	@ 0x2b
 800cc88:	d04a      	beq.n	800cd20 <_strtod_l+0xb8>
 800cc8a:	d838      	bhi.n	800ccfe <_strtod_l+0x96>
 800cc8c:	290d      	cmp	r1, #13
 800cc8e:	d832      	bhi.n	800ccf6 <_strtod_l+0x8e>
 800cc90:	2908      	cmp	r1, #8
 800cc92:	d832      	bhi.n	800ccfa <_strtod_l+0x92>
 800cc94:	2900      	cmp	r1, #0
 800cc96:	d03b      	beq.n	800cd10 <_strtod_l+0xa8>
 800cc98:	2200      	movs	r2, #0
 800cc9a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cc9c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cc9e:	782a      	ldrb	r2, [r5, #0]
 800cca0:	2a30      	cmp	r2, #48	@ 0x30
 800cca2:	f040 80b3 	bne.w	800ce0c <_strtod_l+0x1a4>
 800cca6:	786a      	ldrb	r2, [r5, #1]
 800cca8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ccac:	2a58      	cmp	r2, #88	@ 0x58
 800ccae:	d16e      	bne.n	800cd8e <_strtod_l+0x126>
 800ccb0:	9302      	str	r3, [sp, #8]
 800ccb2:	a919      	add	r1, sp, #100	@ 0x64
 800ccb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccb6:	4a90      	ldr	r2, [pc, #576]	@ (800cef8 <_strtod_l+0x290>)
 800ccb8:	9301      	str	r3, [sp, #4]
 800ccba:	ab1a      	add	r3, sp, #104	@ 0x68
 800ccbc:	9805      	ldr	r0, [sp, #20]
 800ccbe:	9300      	str	r3, [sp, #0]
 800ccc0:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ccc2:	f001 faed 	bl	800e2a0 <__gethex>
 800ccc6:	f010 060f 	ands.w	r6, r0, #15
 800ccca:	4604      	mov	r4, r0
 800cccc:	d005      	beq.n	800ccda <_strtod_l+0x72>
 800ccce:	2e06      	cmp	r6, #6
 800ccd0:	d128      	bne.n	800cd24 <_strtod_l+0xbc>
 800ccd2:	3501      	adds	r5, #1
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	9519      	str	r5, [sp, #100]	@ 0x64
 800ccd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f040 858e 	bne.w	800d7fe <_strtod_l+0xb96>
 800cce2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cce4:	b1cb      	cbz	r3, 800cd1a <_strtod_l+0xb2>
 800cce6:	4652      	mov	r2, sl
 800cce8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ccec:	ec43 2b10 	vmov	d0, r2, r3
 800ccf0:	b01f      	add	sp, #124	@ 0x7c
 800ccf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf6:	2920      	cmp	r1, #32
 800ccf8:	d1ce      	bne.n	800cc98 <_strtod_l+0x30>
 800ccfa:	3201      	adds	r2, #1
 800ccfc:	e7c1      	b.n	800cc82 <_strtod_l+0x1a>
 800ccfe:	292d      	cmp	r1, #45	@ 0x2d
 800cd00:	d1ca      	bne.n	800cc98 <_strtod_l+0x30>
 800cd02:	2101      	movs	r1, #1
 800cd04:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cd06:	1c51      	adds	r1, r2, #1
 800cd08:	9119      	str	r1, [sp, #100]	@ 0x64
 800cd0a:	7852      	ldrb	r2, [r2, #1]
 800cd0c:	2a00      	cmp	r2, #0
 800cd0e:	d1c5      	bne.n	800cc9c <_strtod_l+0x34>
 800cd10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cd12:	9419      	str	r4, [sp, #100]	@ 0x64
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	f040 8570 	bne.w	800d7fa <_strtod_l+0xb92>
 800cd1a:	4652      	mov	r2, sl
 800cd1c:	465b      	mov	r3, fp
 800cd1e:	e7e5      	b.n	800ccec <_strtod_l+0x84>
 800cd20:	2100      	movs	r1, #0
 800cd22:	e7ef      	b.n	800cd04 <_strtod_l+0x9c>
 800cd24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cd26:	b13a      	cbz	r2, 800cd38 <_strtod_l+0xd0>
 800cd28:	2135      	movs	r1, #53	@ 0x35
 800cd2a:	a81c      	add	r0, sp, #112	@ 0x70
 800cd2c:	f7ff ff3a 	bl	800cba4 <__copybits>
 800cd30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd32:	9805      	ldr	r0, [sp, #20]
 800cd34:	f7ff fafe 	bl	800c334 <_Bfree>
 800cd38:	3e01      	subs	r6, #1
 800cd3a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cd3c:	2e04      	cmp	r6, #4
 800cd3e:	d806      	bhi.n	800cd4e <_strtod_l+0xe6>
 800cd40:	e8df f006 	tbb	[pc, r6]
 800cd44:	201d0314 	.word	0x201d0314
 800cd48:	14          	.byte	0x14
 800cd49:	00          	.byte	0x00
 800cd4a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cd4e:	05e1      	lsls	r1, r4, #23
 800cd50:	bf48      	it	mi
 800cd52:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cd56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd5a:	0d1b      	lsrs	r3, r3, #20
 800cd5c:	051b      	lsls	r3, r3, #20
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1bb      	bne.n	800ccda <_strtod_l+0x72>
 800cd62:	f7fe fbc7 	bl	800b4f4 <__errno>
 800cd66:	2322      	movs	r3, #34	@ 0x22
 800cd68:	6003      	str	r3, [r0, #0]
 800cd6a:	e7b6      	b.n	800ccda <_strtod_l+0x72>
 800cd6c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cd70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cd74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cd78:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cd7c:	e7e7      	b.n	800cd4e <_strtod_l+0xe6>
 800cd7e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800cf00 <_strtod_l+0x298>
 800cd82:	e7e4      	b.n	800cd4e <_strtod_l+0xe6>
 800cd84:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cd88:	f04f 3aff 	mov.w	sl, #4294967295
 800cd8c:	e7df      	b.n	800cd4e <_strtod_l+0xe6>
 800cd8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd90:	1c5a      	adds	r2, r3, #1
 800cd92:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd94:	785b      	ldrb	r3, [r3, #1]
 800cd96:	2b30      	cmp	r3, #48	@ 0x30
 800cd98:	d0f9      	beq.n	800cd8e <_strtod_l+0x126>
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d09d      	beq.n	800ccda <_strtod_l+0x72>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cda2:	220a      	movs	r2, #10
 800cda4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cda6:	930c      	str	r3, [sp, #48]	@ 0x30
 800cda8:	2300      	movs	r3, #0
 800cdaa:	461f      	mov	r7, r3
 800cdac:	9308      	str	r3, [sp, #32]
 800cdae:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdb0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cdb2:	7805      	ldrb	r5, [r0, #0]
 800cdb4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cdb8:	b2d9      	uxtb	r1, r3
 800cdba:	2909      	cmp	r1, #9
 800cdbc:	d928      	bls.n	800ce10 <_strtod_l+0x1a8>
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	494e      	ldr	r1, [pc, #312]	@ (800cefc <_strtod_l+0x294>)
 800cdc2:	f001 f9ab 	bl	800e11c <strncmp>
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d033      	beq.n	800ce32 <_strtod_l+0x1ca>
 800cdca:	2000      	movs	r0, #0
 800cdcc:	462a      	mov	r2, r5
 800cdce:	463d      	mov	r5, r7
 800cdd0:	4681      	mov	r9, r0
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2a65      	cmp	r2, #101	@ 0x65
 800cdd6:	d001      	beq.n	800cddc <_strtod_l+0x174>
 800cdd8:	2a45      	cmp	r2, #69	@ 0x45
 800cdda:	d114      	bne.n	800ce06 <_strtod_l+0x19e>
 800cddc:	b91d      	cbnz	r5, 800cde6 <_strtod_l+0x17e>
 800cdde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cde0:	4302      	orrs	r2, r0
 800cde2:	d095      	beq.n	800cd10 <_strtod_l+0xa8>
 800cde4:	2500      	movs	r5, #0
 800cde6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cde8:	1c62      	adds	r2, r4, #1
 800cdea:	9219      	str	r2, [sp, #100]	@ 0x64
 800cdec:	7862      	ldrb	r2, [r4, #1]
 800cdee:	2a2b      	cmp	r2, #43	@ 0x2b
 800cdf0:	d078      	beq.n	800cee4 <_strtod_l+0x27c>
 800cdf2:	2a2d      	cmp	r2, #45	@ 0x2d
 800cdf4:	d07c      	beq.n	800cef0 <_strtod_l+0x288>
 800cdf6:	f04f 0c00 	mov.w	ip, #0
 800cdfa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cdfe:	2909      	cmp	r1, #9
 800ce00:	f240 8084 	bls.w	800cf0c <_strtod_l+0x2a4>
 800ce04:	9419      	str	r4, [sp, #100]	@ 0x64
 800ce06:	f04f 0800 	mov.w	r8, #0
 800ce0a:	e0a4      	b.n	800cf56 <_strtod_l+0x2ee>
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	e7c7      	b.n	800cda0 <_strtod_l+0x138>
 800ce10:	2f08      	cmp	r7, #8
 800ce12:	f100 0001 	add.w	r0, r0, #1
 800ce16:	f107 0701 	add.w	r7, r7, #1
 800ce1a:	bfd5      	itete	le
 800ce1c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ce1e:	9908      	ldrgt	r1, [sp, #32]
 800ce20:	fb02 3301 	mlale	r3, r2, r1, r3
 800ce24:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ce28:	bfd4      	ite	le
 800ce2a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ce2c:	9308      	strgt	r3, [sp, #32]
 800ce2e:	9019      	str	r0, [sp, #100]	@ 0x64
 800ce30:	e7be      	b.n	800cdb0 <_strtod_l+0x148>
 800ce32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce34:	1c5a      	adds	r2, r3, #1
 800ce36:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce38:	785a      	ldrb	r2, [r3, #1]
 800ce3a:	b37f      	cbz	r7, 800ce9c <_strtod_l+0x234>
 800ce3c:	4681      	mov	r9, r0
 800ce3e:	463d      	mov	r5, r7
 800ce40:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ce44:	2b09      	cmp	r3, #9
 800ce46:	d912      	bls.n	800ce6e <_strtod_l+0x206>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e7c3      	b.n	800cdd4 <_strtod_l+0x16c>
 800ce4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce4e:	3001      	adds	r0, #1
 800ce50:	1c5a      	adds	r2, r3, #1
 800ce52:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce54:	785a      	ldrb	r2, [r3, #1]
 800ce56:	2a30      	cmp	r2, #48	@ 0x30
 800ce58:	d0f8      	beq.n	800ce4c <_strtod_l+0x1e4>
 800ce5a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ce5e:	2b08      	cmp	r3, #8
 800ce60:	f200 84d2 	bhi.w	800d808 <_strtod_l+0xba0>
 800ce64:	4681      	mov	r9, r0
 800ce66:	2000      	movs	r0, #0
 800ce68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce6a:	4605      	mov	r5, r0
 800ce6c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce6e:	3a30      	subs	r2, #48	@ 0x30
 800ce70:	f100 0301 	add.w	r3, r0, #1
 800ce74:	d02a      	beq.n	800cecc <_strtod_l+0x264>
 800ce76:	4499      	add	r9, r3
 800ce78:	eb00 0c05 	add.w	ip, r0, r5
 800ce7c:	462b      	mov	r3, r5
 800ce7e:	210a      	movs	r1, #10
 800ce80:	4563      	cmp	r3, ip
 800ce82:	d10d      	bne.n	800cea0 <_strtod_l+0x238>
 800ce84:	1c69      	adds	r1, r5, #1
 800ce86:	4401      	add	r1, r0
 800ce88:	4428      	add	r0, r5
 800ce8a:	2808      	cmp	r0, #8
 800ce8c:	dc16      	bgt.n	800cebc <_strtod_l+0x254>
 800ce8e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ce90:	230a      	movs	r3, #10
 800ce92:	fb03 2300 	mla	r3, r3, r0, r2
 800ce96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce98:	2300      	movs	r3, #0
 800ce9a:	e018      	b.n	800cece <_strtod_l+0x266>
 800ce9c:	4638      	mov	r0, r7
 800ce9e:	e7da      	b.n	800ce56 <_strtod_l+0x1ee>
 800cea0:	2b08      	cmp	r3, #8
 800cea2:	f103 0301 	add.w	r3, r3, #1
 800cea6:	dc03      	bgt.n	800ceb0 <_strtod_l+0x248>
 800cea8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ceaa:	434e      	muls	r6, r1
 800ceac:	960a      	str	r6, [sp, #40]	@ 0x28
 800ceae:	e7e7      	b.n	800ce80 <_strtod_l+0x218>
 800ceb0:	2b10      	cmp	r3, #16
 800ceb2:	bfde      	ittt	le
 800ceb4:	9e08      	ldrle	r6, [sp, #32]
 800ceb6:	434e      	mulle	r6, r1
 800ceb8:	9608      	strle	r6, [sp, #32]
 800ceba:	e7e1      	b.n	800ce80 <_strtod_l+0x218>
 800cebc:	280f      	cmp	r0, #15
 800cebe:	dceb      	bgt.n	800ce98 <_strtod_l+0x230>
 800cec0:	9808      	ldr	r0, [sp, #32]
 800cec2:	230a      	movs	r3, #10
 800cec4:	fb03 2300 	mla	r3, r3, r0, r2
 800cec8:	9308      	str	r3, [sp, #32]
 800ceca:	e7e5      	b.n	800ce98 <_strtod_l+0x230>
 800cecc:	4629      	mov	r1, r5
 800cece:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ced0:	460d      	mov	r5, r1
 800ced2:	1c50      	adds	r0, r2, #1
 800ced4:	9019      	str	r0, [sp, #100]	@ 0x64
 800ced6:	4618      	mov	r0, r3
 800ced8:	7852      	ldrb	r2, [r2, #1]
 800ceda:	e7b1      	b.n	800ce40 <_strtod_l+0x1d8>
 800cedc:	f04f 0900 	mov.w	r9, #0
 800cee0:	2301      	movs	r3, #1
 800cee2:	e77c      	b.n	800cdde <_strtod_l+0x176>
 800cee4:	f04f 0c00 	mov.w	ip, #0
 800cee8:	1ca2      	adds	r2, r4, #2
 800ceea:	9219      	str	r2, [sp, #100]	@ 0x64
 800ceec:	78a2      	ldrb	r2, [r4, #2]
 800ceee:	e784      	b.n	800cdfa <_strtod_l+0x192>
 800cef0:	f04f 0c01 	mov.w	ip, #1
 800cef4:	e7f8      	b.n	800cee8 <_strtod_l+0x280>
 800cef6:	bf00      	nop
 800cef8:	0800ef50 	.word	0x0800ef50
 800cefc:	0800ef38 	.word	0x0800ef38
 800cf00:	7ff00000 	.word	0x7ff00000
 800cf04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf06:	1c51      	adds	r1, r2, #1
 800cf08:	9119      	str	r1, [sp, #100]	@ 0x64
 800cf0a:	7852      	ldrb	r2, [r2, #1]
 800cf0c:	2a30      	cmp	r2, #48	@ 0x30
 800cf0e:	d0f9      	beq.n	800cf04 <_strtod_l+0x29c>
 800cf10:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cf14:	2908      	cmp	r1, #8
 800cf16:	f63f af76 	bhi.w	800ce06 <_strtod_l+0x19e>
 800cf1a:	3a30      	subs	r2, #48	@ 0x30
 800cf1c:	f04f 080a 	mov.w	r8, #10
 800cf20:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf24:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cf26:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf28:	1c56      	adds	r6, r2, #1
 800cf2a:	9619      	str	r6, [sp, #100]	@ 0x64
 800cf2c:	7852      	ldrb	r2, [r2, #1]
 800cf2e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cf32:	f1be 0f09 	cmp.w	lr, #9
 800cf36:	d939      	bls.n	800cfac <_strtod_l+0x344>
 800cf38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cf3a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cf3e:	1a76      	subs	r6, r6, r1
 800cf40:	2e08      	cmp	r6, #8
 800cf42:	dc03      	bgt.n	800cf4c <_strtod_l+0x2e4>
 800cf44:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cf46:	4588      	cmp	r8, r1
 800cf48:	bfa8      	it	ge
 800cf4a:	4688      	movge	r8, r1
 800cf4c:	f1bc 0f00 	cmp.w	ip, #0
 800cf50:	d001      	beq.n	800cf56 <_strtod_l+0x2ee>
 800cf52:	f1c8 0800 	rsb	r8, r8, #0
 800cf56:	2d00      	cmp	r5, #0
 800cf58:	d14e      	bne.n	800cff8 <_strtod_l+0x390>
 800cf5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf5c:	4308      	orrs	r0, r1
 800cf5e:	f47f aebc 	bne.w	800ccda <_strtod_l+0x72>
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	f47f aed4 	bne.w	800cd10 <_strtod_l+0xa8>
 800cf68:	2a69      	cmp	r2, #105	@ 0x69
 800cf6a:	d028      	beq.n	800cfbe <_strtod_l+0x356>
 800cf6c:	dc25      	bgt.n	800cfba <_strtod_l+0x352>
 800cf6e:	2a49      	cmp	r2, #73	@ 0x49
 800cf70:	d025      	beq.n	800cfbe <_strtod_l+0x356>
 800cf72:	2a4e      	cmp	r2, #78	@ 0x4e
 800cf74:	f47f aecc 	bne.w	800cd10 <_strtod_l+0xa8>
 800cf78:	499b      	ldr	r1, [pc, #620]	@ (800d1e8 <_strtod_l+0x580>)
 800cf7a:	a819      	add	r0, sp, #100	@ 0x64
 800cf7c:	f001 fbb0 	bl	800e6e0 <__match>
 800cf80:	2800      	cmp	r0, #0
 800cf82:	f43f aec5 	beq.w	800cd10 <_strtod_l+0xa8>
 800cf86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	2b28      	cmp	r3, #40	@ 0x28
 800cf8c:	d12e      	bne.n	800cfec <_strtod_l+0x384>
 800cf8e:	aa1c      	add	r2, sp, #112	@ 0x70
 800cf90:	4996      	ldr	r1, [pc, #600]	@ (800d1ec <_strtod_l+0x584>)
 800cf92:	a819      	add	r0, sp, #100	@ 0x64
 800cf94:	f001 fbb8 	bl	800e708 <__hexnan>
 800cf98:	2805      	cmp	r0, #5
 800cf9a:	d127      	bne.n	800cfec <_strtod_l+0x384>
 800cf9c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cf9e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cfa2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cfa6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cfaa:	e696      	b.n	800ccda <_strtod_l+0x72>
 800cfac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cfae:	fb08 2101 	mla	r1, r8, r1, r2
 800cfb2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cfb6:	920e      	str	r2, [sp, #56]	@ 0x38
 800cfb8:	e7b5      	b.n	800cf26 <_strtod_l+0x2be>
 800cfba:	2a6e      	cmp	r2, #110	@ 0x6e
 800cfbc:	e7da      	b.n	800cf74 <_strtod_l+0x30c>
 800cfbe:	498c      	ldr	r1, [pc, #560]	@ (800d1f0 <_strtod_l+0x588>)
 800cfc0:	a819      	add	r0, sp, #100	@ 0x64
 800cfc2:	f001 fb8d 	bl	800e6e0 <__match>
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	f43f aea2 	beq.w	800cd10 <_strtod_l+0xa8>
 800cfcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfce:	a819      	add	r0, sp, #100	@ 0x64
 800cfd0:	4988      	ldr	r1, [pc, #544]	@ (800d1f4 <_strtod_l+0x58c>)
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	9319      	str	r3, [sp, #100]	@ 0x64
 800cfd6:	f001 fb83 	bl	800e6e0 <__match>
 800cfda:	b910      	cbnz	r0, 800cfe2 <_strtod_l+0x37a>
 800cfdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfde:	3301      	adds	r3, #1
 800cfe0:	9319      	str	r3, [sp, #100]	@ 0x64
 800cfe2:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d204 <_strtod_l+0x59c>
 800cfe6:	f04f 0a00 	mov.w	sl, #0
 800cfea:	e676      	b.n	800ccda <_strtod_l+0x72>
 800cfec:	4882      	ldr	r0, [pc, #520]	@ (800d1f8 <_strtod_l+0x590>)
 800cfee:	f001 f8b7 	bl	800e160 <nan>
 800cff2:	ec5b ab10 	vmov	sl, fp, d0
 800cff6:	e670      	b.n	800ccda <_strtod_l+0x72>
 800cff8:	eba8 0309 	sub.w	r3, r8, r9
 800cffc:	2f00      	cmp	r7, #0
 800cffe:	bf08      	it	eq
 800d000:	462f      	moveq	r7, r5
 800d002:	2d10      	cmp	r5, #16
 800d004:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d006:	462c      	mov	r4, r5
 800d008:	9309      	str	r3, [sp, #36]	@ 0x24
 800d00a:	bfa8      	it	ge
 800d00c:	2410      	movge	r4, #16
 800d00e:	f7f3 fa89 	bl	8000524 <__aeabi_ui2d>
 800d012:	2d09      	cmp	r5, #9
 800d014:	4682      	mov	sl, r0
 800d016:	468b      	mov	fp, r1
 800d018:	dc13      	bgt.n	800d042 <_strtod_l+0x3da>
 800d01a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f43f ae5c 	beq.w	800ccda <_strtod_l+0x72>
 800d022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d024:	dd78      	ble.n	800d118 <_strtod_l+0x4b0>
 800d026:	2b16      	cmp	r3, #22
 800d028:	dc5f      	bgt.n	800d0ea <_strtod_l+0x482>
 800d02a:	4974      	ldr	r1, [pc, #464]	@ (800d1fc <_strtod_l+0x594>)
 800d02c:	4652      	mov	r2, sl
 800d02e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d032:	465b      	mov	r3, fp
 800d034:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d038:	f7f3 faee 	bl	8000618 <__aeabi_dmul>
 800d03c:	4682      	mov	sl, r0
 800d03e:	468b      	mov	fp, r1
 800d040:	e64b      	b.n	800ccda <_strtod_l+0x72>
 800d042:	4b6e      	ldr	r3, [pc, #440]	@ (800d1fc <_strtod_l+0x594>)
 800d044:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d048:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d04c:	f7f3 fae4 	bl	8000618 <__aeabi_dmul>
 800d050:	4682      	mov	sl, r0
 800d052:	468b      	mov	fp, r1
 800d054:	9808      	ldr	r0, [sp, #32]
 800d056:	f7f3 fa65 	bl	8000524 <__aeabi_ui2d>
 800d05a:	4602      	mov	r2, r0
 800d05c:	460b      	mov	r3, r1
 800d05e:	4650      	mov	r0, sl
 800d060:	4659      	mov	r1, fp
 800d062:	f7f3 f923 	bl	80002ac <__adddf3>
 800d066:	2d0f      	cmp	r5, #15
 800d068:	4682      	mov	sl, r0
 800d06a:	468b      	mov	fp, r1
 800d06c:	ddd5      	ble.n	800d01a <_strtod_l+0x3b2>
 800d06e:	1b2c      	subs	r4, r5, r4
 800d070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d072:	441c      	add	r4, r3
 800d074:	2c00      	cmp	r4, #0
 800d076:	f340 8096 	ble.w	800d1a6 <_strtod_l+0x53e>
 800d07a:	f014 030f 	ands.w	r3, r4, #15
 800d07e:	d00a      	beq.n	800d096 <_strtod_l+0x42e>
 800d080:	495e      	ldr	r1, [pc, #376]	@ (800d1fc <_strtod_l+0x594>)
 800d082:	4652      	mov	r2, sl
 800d084:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d088:	465b      	mov	r3, fp
 800d08a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d08e:	f7f3 fac3 	bl	8000618 <__aeabi_dmul>
 800d092:	4682      	mov	sl, r0
 800d094:	468b      	mov	fp, r1
 800d096:	f034 040f 	bics.w	r4, r4, #15
 800d09a:	d073      	beq.n	800d184 <_strtod_l+0x51c>
 800d09c:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d0a0:	dd48      	ble.n	800d134 <_strtod_l+0x4cc>
 800d0a2:	2400      	movs	r4, #0
 800d0a4:	46a0      	mov	r8, r4
 800d0a6:	46a1      	mov	r9, r4
 800d0a8:	940a      	str	r4, [sp, #40]	@ 0x28
 800d0aa:	2322      	movs	r3, #34	@ 0x22
 800d0ac:	9a05      	ldr	r2, [sp, #20]
 800d0ae:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d204 <_strtod_l+0x59c>
 800d0b2:	f04f 0a00 	mov.w	sl, #0
 800d0b6:	6013      	str	r3, [r2, #0]
 800d0b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f43f ae0d 	beq.w	800ccda <_strtod_l+0x72>
 800d0c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0c2:	9805      	ldr	r0, [sp, #20]
 800d0c4:	f7ff f936 	bl	800c334 <_Bfree>
 800d0c8:	4649      	mov	r1, r9
 800d0ca:	9805      	ldr	r0, [sp, #20]
 800d0cc:	f7ff f932 	bl	800c334 <_Bfree>
 800d0d0:	4641      	mov	r1, r8
 800d0d2:	9805      	ldr	r0, [sp, #20]
 800d0d4:	f7ff f92e 	bl	800c334 <_Bfree>
 800d0d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d0da:	9805      	ldr	r0, [sp, #20]
 800d0dc:	f7ff f92a 	bl	800c334 <_Bfree>
 800d0e0:	4621      	mov	r1, r4
 800d0e2:	9805      	ldr	r0, [sp, #20]
 800d0e4:	f7ff f926 	bl	800c334 <_Bfree>
 800d0e8:	e5f7      	b.n	800ccda <_strtod_l+0x72>
 800d0ea:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d0ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	dbbc      	blt.n	800d06e <_strtod_l+0x406>
 800d0f4:	f1c5 050f 	rsb	r5, r5, #15
 800d0f8:	4c40      	ldr	r4, [pc, #256]	@ (800d1fc <_strtod_l+0x594>)
 800d0fa:	4652      	mov	r2, sl
 800d0fc:	465b      	mov	r3, fp
 800d0fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d102:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d106:	f7f3 fa87 	bl	8000618 <__aeabi_dmul>
 800d10a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d10c:	1b5d      	subs	r5, r3, r5
 800d10e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d112:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d116:	e78f      	b.n	800d038 <_strtod_l+0x3d0>
 800d118:	3316      	adds	r3, #22
 800d11a:	dba8      	blt.n	800d06e <_strtod_l+0x406>
 800d11c:	eba9 0808 	sub.w	r8, r9, r8
 800d120:	4b36      	ldr	r3, [pc, #216]	@ (800d1fc <_strtod_l+0x594>)
 800d122:	4650      	mov	r0, sl
 800d124:	4659      	mov	r1, fp
 800d126:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d12a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d12e:	f7f3 fb9d 	bl	800086c <__aeabi_ddiv>
 800d132:	e783      	b.n	800d03c <_strtod_l+0x3d4>
 800d134:	4b32      	ldr	r3, [pc, #200]	@ (800d200 <_strtod_l+0x598>)
 800d136:	1124      	asrs	r4, r4, #4
 800d138:	4650      	mov	r0, sl
 800d13a:	4659      	mov	r1, fp
 800d13c:	9308      	str	r3, [sp, #32]
 800d13e:	2300      	movs	r3, #0
 800d140:	461e      	mov	r6, r3
 800d142:	2c01      	cmp	r4, #1
 800d144:	dc21      	bgt.n	800d18a <_strtod_l+0x522>
 800d146:	b10b      	cbz	r3, 800d14c <_strtod_l+0x4e4>
 800d148:	4682      	mov	sl, r0
 800d14a:	468b      	mov	fp, r1
 800d14c:	492c      	ldr	r1, [pc, #176]	@ (800d200 <_strtod_l+0x598>)
 800d14e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d152:	4652      	mov	r2, sl
 800d154:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d158:	465b      	mov	r3, fp
 800d15a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d15e:	f7f3 fa5b 	bl	8000618 <__aeabi_dmul>
 800d162:	4b28      	ldr	r3, [pc, #160]	@ (800d204 <_strtod_l+0x59c>)
 800d164:	460a      	mov	r2, r1
 800d166:	4682      	mov	sl, r0
 800d168:	400b      	ands	r3, r1
 800d16a:	4927      	ldr	r1, [pc, #156]	@ (800d208 <_strtod_l+0x5a0>)
 800d16c:	428b      	cmp	r3, r1
 800d16e:	d898      	bhi.n	800d0a2 <_strtod_l+0x43a>
 800d170:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d174:	428b      	cmp	r3, r1
 800d176:	bf86      	itte	hi
 800d178:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d20c <_strtod_l+0x5a4>
 800d17c:	f04f 3aff 	movhi.w	sl, #4294967295
 800d180:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d184:	2300      	movs	r3, #0
 800d186:	9308      	str	r3, [sp, #32]
 800d188:	e07a      	b.n	800d280 <_strtod_l+0x618>
 800d18a:	07e2      	lsls	r2, r4, #31
 800d18c:	d505      	bpl.n	800d19a <_strtod_l+0x532>
 800d18e:	9b08      	ldr	r3, [sp, #32]
 800d190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d194:	f7f3 fa40 	bl	8000618 <__aeabi_dmul>
 800d198:	2301      	movs	r3, #1
 800d19a:	9a08      	ldr	r2, [sp, #32]
 800d19c:	3601      	adds	r6, #1
 800d19e:	1064      	asrs	r4, r4, #1
 800d1a0:	3208      	adds	r2, #8
 800d1a2:	9208      	str	r2, [sp, #32]
 800d1a4:	e7cd      	b.n	800d142 <_strtod_l+0x4da>
 800d1a6:	d0ed      	beq.n	800d184 <_strtod_l+0x51c>
 800d1a8:	4264      	negs	r4, r4
 800d1aa:	f014 020f 	ands.w	r2, r4, #15
 800d1ae:	d00a      	beq.n	800d1c6 <_strtod_l+0x55e>
 800d1b0:	4b12      	ldr	r3, [pc, #72]	@ (800d1fc <_strtod_l+0x594>)
 800d1b2:	4650      	mov	r0, sl
 800d1b4:	4659      	mov	r1, fp
 800d1b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1be:	f7f3 fb55 	bl	800086c <__aeabi_ddiv>
 800d1c2:	4682      	mov	sl, r0
 800d1c4:	468b      	mov	fp, r1
 800d1c6:	1124      	asrs	r4, r4, #4
 800d1c8:	d0dc      	beq.n	800d184 <_strtod_l+0x51c>
 800d1ca:	2c1f      	cmp	r4, #31
 800d1cc:	dd20      	ble.n	800d210 <_strtod_l+0x5a8>
 800d1ce:	2400      	movs	r4, #0
 800d1d0:	46a0      	mov	r8, r4
 800d1d2:	46a1      	mov	r9, r4
 800d1d4:	940a      	str	r4, [sp, #40]	@ 0x28
 800d1d6:	2322      	movs	r3, #34	@ 0x22
 800d1d8:	9a05      	ldr	r2, [sp, #20]
 800d1da:	f04f 0a00 	mov.w	sl, #0
 800d1de:	f04f 0b00 	mov.w	fp, #0
 800d1e2:	6013      	str	r3, [r2, #0]
 800d1e4:	e768      	b.n	800d0b8 <_strtod_l+0x450>
 800d1e6:	bf00      	nop
 800d1e8:	0800ed25 	.word	0x0800ed25
 800d1ec:	0800ef3c 	.word	0x0800ef3c
 800d1f0:	0800ed1d 	.word	0x0800ed1d
 800d1f4:	0800ed54 	.word	0x0800ed54
 800d1f8:	0800f0e5 	.word	0x0800f0e5
 800d1fc:	0800ee70 	.word	0x0800ee70
 800d200:	0800ee48 	.word	0x0800ee48
 800d204:	7ff00000 	.word	0x7ff00000
 800d208:	7ca00000 	.word	0x7ca00000
 800d20c:	7fefffff 	.word	0x7fefffff
 800d210:	f014 0310 	ands.w	r3, r4, #16
 800d214:	4650      	mov	r0, sl
 800d216:	4659      	mov	r1, fp
 800d218:	4ea9      	ldr	r6, [pc, #676]	@ (800d4c0 <_strtod_l+0x858>)
 800d21a:	bf18      	it	ne
 800d21c:	236a      	movne	r3, #106	@ 0x6a
 800d21e:	9308      	str	r3, [sp, #32]
 800d220:	2300      	movs	r3, #0
 800d222:	07e2      	lsls	r2, r4, #31
 800d224:	d504      	bpl.n	800d230 <_strtod_l+0x5c8>
 800d226:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d22a:	f7f3 f9f5 	bl	8000618 <__aeabi_dmul>
 800d22e:	2301      	movs	r3, #1
 800d230:	1064      	asrs	r4, r4, #1
 800d232:	f106 0608 	add.w	r6, r6, #8
 800d236:	d1f4      	bne.n	800d222 <_strtod_l+0x5ba>
 800d238:	b10b      	cbz	r3, 800d23e <_strtod_l+0x5d6>
 800d23a:	4682      	mov	sl, r0
 800d23c:	468b      	mov	fp, r1
 800d23e:	9b08      	ldr	r3, [sp, #32]
 800d240:	b1b3      	cbz	r3, 800d270 <_strtod_l+0x608>
 800d242:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d246:	4659      	mov	r1, fp
 800d248:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	dd0f      	ble.n	800d270 <_strtod_l+0x608>
 800d250:	2b1f      	cmp	r3, #31
 800d252:	dd55      	ble.n	800d300 <_strtod_l+0x698>
 800d254:	2b34      	cmp	r3, #52	@ 0x34
 800d256:	f04f 0a00 	mov.w	sl, #0
 800d25a:	bfdb      	ittet	le
 800d25c:	f04f 33ff 	movle.w	r3, #4294967295
 800d260:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d264:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d268:	4093      	lslle	r3, r2
 800d26a:	bfd8      	it	le
 800d26c:	ea03 0b01 	andle.w	fp, r3, r1
 800d270:	2200      	movs	r2, #0
 800d272:	2300      	movs	r3, #0
 800d274:	4650      	mov	r0, sl
 800d276:	4659      	mov	r1, fp
 800d278:	f7f3 fc36 	bl	8000ae8 <__aeabi_dcmpeq>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d1a6      	bne.n	800d1ce <_strtod_l+0x566>
 800d280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d282:	463a      	mov	r2, r7
 800d284:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d286:	9300      	str	r3, [sp, #0]
 800d288:	462b      	mov	r3, r5
 800d28a:	9805      	ldr	r0, [sp, #20]
 800d28c:	f7ff f8bc 	bl	800c408 <__s2b>
 800d290:	900a      	str	r0, [sp, #40]	@ 0x28
 800d292:	2800      	cmp	r0, #0
 800d294:	f43f af05 	beq.w	800d0a2 <_strtod_l+0x43a>
 800d298:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d29a:	eba9 0308 	sub.w	r3, r9, r8
 800d29e:	2400      	movs	r4, #0
 800d2a0:	2a00      	cmp	r2, #0
 800d2a2:	46a0      	mov	r8, r4
 800d2a4:	bfa8      	it	ge
 800d2a6:	2300      	movge	r3, #0
 800d2a8:	9312      	str	r3, [sp, #72]	@ 0x48
 800d2aa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d2ae:	9316      	str	r3, [sp, #88]	@ 0x58
 800d2b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2b2:	9805      	ldr	r0, [sp, #20]
 800d2b4:	6859      	ldr	r1, [r3, #4]
 800d2b6:	f7fe fffd 	bl	800c2b4 <_Balloc>
 800d2ba:	4681      	mov	r9, r0
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	f43f aef4 	beq.w	800d0aa <_strtod_l+0x442>
 800d2c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2c4:	300c      	adds	r0, #12
 800d2c6:	691a      	ldr	r2, [r3, #16]
 800d2c8:	f103 010c 	add.w	r1, r3, #12
 800d2cc:	3202      	adds	r2, #2
 800d2ce:	0092      	lsls	r2, r2, #2
 800d2d0:	f000 ff36 	bl	800e140 <memcpy>
 800d2d4:	aa1c      	add	r2, sp, #112	@ 0x70
 800d2d6:	a91b      	add	r1, sp, #108	@ 0x6c
 800d2d8:	9805      	ldr	r0, [sp, #20]
 800d2da:	ec4b ab10 	vmov	d0, sl, fp
 800d2de:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d2e2:	f7ff fbd5 	bl	800ca90 <__d2b>
 800d2e6:	901a      	str	r0, [sp, #104]	@ 0x68
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	f43f aede 	beq.w	800d0aa <_strtod_l+0x442>
 800d2ee:	2101      	movs	r1, #1
 800d2f0:	9805      	ldr	r0, [sp, #20]
 800d2f2:	f7ff f91f 	bl	800c534 <__i2b>
 800d2f6:	4680      	mov	r8, r0
 800d2f8:	b948      	cbnz	r0, 800d30e <_strtod_l+0x6a6>
 800d2fa:	f04f 0800 	mov.w	r8, #0
 800d2fe:	e6d4      	b.n	800d0aa <_strtod_l+0x442>
 800d300:	f04f 32ff 	mov.w	r2, #4294967295
 800d304:	fa02 f303 	lsl.w	r3, r2, r3
 800d308:	ea03 0a0a 	and.w	sl, r3, sl
 800d30c:	e7b0      	b.n	800d270 <_strtod_l+0x608>
 800d30e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d310:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d312:	2d00      	cmp	r5, #0
 800d314:	bfa9      	itett	ge
 800d316:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d318:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d31a:	18ef      	addge	r7, r5, r3
 800d31c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d31e:	bfb8      	it	lt
 800d320:	1b5e      	sublt	r6, r3, r5
 800d322:	9b08      	ldr	r3, [sp, #32]
 800d324:	bfb8      	it	lt
 800d326:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d328:	1aed      	subs	r5, r5, r3
 800d32a:	4b66      	ldr	r3, [pc, #408]	@ (800d4c4 <_strtod_l+0x85c>)
 800d32c:	4415      	add	r5, r2
 800d32e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d332:	3d01      	subs	r5, #1
 800d334:	429d      	cmp	r5, r3
 800d336:	da4f      	bge.n	800d3d8 <_strtod_l+0x770>
 800d338:	1b5b      	subs	r3, r3, r5
 800d33a:	2101      	movs	r1, #1
 800d33c:	2b1f      	cmp	r3, #31
 800d33e:	eba2 0203 	sub.w	r2, r2, r3
 800d342:	dc3d      	bgt.n	800d3c0 <_strtod_l+0x758>
 800d344:	fa01 f303 	lsl.w	r3, r1, r3
 800d348:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d34a:	2300      	movs	r3, #0
 800d34c:	9310      	str	r3, [sp, #64]	@ 0x40
 800d34e:	18bd      	adds	r5, r7, r2
 800d350:	9b08      	ldr	r3, [sp, #32]
 800d352:	4416      	add	r6, r2
 800d354:	42af      	cmp	r7, r5
 800d356:	441e      	add	r6, r3
 800d358:	463b      	mov	r3, r7
 800d35a:	bfa8      	it	ge
 800d35c:	462b      	movge	r3, r5
 800d35e:	42b3      	cmp	r3, r6
 800d360:	bfa8      	it	ge
 800d362:	4633      	movge	r3, r6
 800d364:	2b00      	cmp	r3, #0
 800d366:	bfc2      	ittt	gt
 800d368:	1aed      	subgt	r5, r5, r3
 800d36a:	1af6      	subgt	r6, r6, r3
 800d36c:	1aff      	subgt	r7, r7, r3
 800d36e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d370:	2b00      	cmp	r3, #0
 800d372:	dd16      	ble.n	800d3a2 <_strtod_l+0x73a>
 800d374:	4641      	mov	r1, r8
 800d376:	461a      	mov	r2, r3
 800d378:	9805      	ldr	r0, [sp, #20]
 800d37a:	f7ff f99b 	bl	800c6b4 <__pow5mult>
 800d37e:	4680      	mov	r8, r0
 800d380:	2800      	cmp	r0, #0
 800d382:	d0ba      	beq.n	800d2fa <_strtod_l+0x692>
 800d384:	4601      	mov	r1, r0
 800d386:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d388:	9805      	ldr	r0, [sp, #20]
 800d38a:	f7ff f8e9 	bl	800c560 <__multiply>
 800d38e:	900e      	str	r0, [sp, #56]	@ 0x38
 800d390:	2800      	cmp	r0, #0
 800d392:	f43f ae8a 	beq.w	800d0aa <_strtod_l+0x442>
 800d396:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d398:	9805      	ldr	r0, [sp, #20]
 800d39a:	f7fe ffcb 	bl	800c334 <_Bfree>
 800d39e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3a2:	2d00      	cmp	r5, #0
 800d3a4:	dc1d      	bgt.n	800d3e2 <_strtod_l+0x77a>
 800d3a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	dd23      	ble.n	800d3f4 <_strtod_l+0x78c>
 800d3ac:	4649      	mov	r1, r9
 800d3ae:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d3b0:	9805      	ldr	r0, [sp, #20]
 800d3b2:	f7ff f97f 	bl	800c6b4 <__pow5mult>
 800d3b6:	4681      	mov	r9, r0
 800d3b8:	b9e0      	cbnz	r0, 800d3f4 <_strtod_l+0x78c>
 800d3ba:	f04f 0900 	mov.w	r9, #0
 800d3be:	e674      	b.n	800d0aa <_strtod_l+0x442>
 800d3c0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d3c4:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d3c6:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d3ca:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d3ce:	35e2      	adds	r5, #226	@ 0xe2
 800d3d0:	fa01 f305 	lsl.w	r3, r1, r5
 800d3d4:	9310      	str	r3, [sp, #64]	@ 0x40
 800d3d6:	e7ba      	b.n	800d34e <_strtod_l+0x6e6>
 800d3d8:	2300      	movs	r3, #0
 800d3da:	9310      	str	r3, [sp, #64]	@ 0x40
 800d3dc:	2301      	movs	r3, #1
 800d3de:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d3e0:	e7b5      	b.n	800d34e <_strtod_l+0x6e6>
 800d3e2:	462a      	mov	r2, r5
 800d3e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d3e6:	9805      	ldr	r0, [sp, #20]
 800d3e8:	f7ff f9be 	bl	800c768 <__lshift>
 800d3ec:	901a      	str	r0, [sp, #104]	@ 0x68
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	d1d9      	bne.n	800d3a6 <_strtod_l+0x73e>
 800d3f2:	e65a      	b.n	800d0aa <_strtod_l+0x442>
 800d3f4:	2e00      	cmp	r6, #0
 800d3f6:	dd07      	ble.n	800d408 <_strtod_l+0x7a0>
 800d3f8:	4649      	mov	r1, r9
 800d3fa:	4632      	mov	r2, r6
 800d3fc:	9805      	ldr	r0, [sp, #20]
 800d3fe:	f7ff f9b3 	bl	800c768 <__lshift>
 800d402:	4681      	mov	r9, r0
 800d404:	2800      	cmp	r0, #0
 800d406:	d0d8      	beq.n	800d3ba <_strtod_l+0x752>
 800d408:	2f00      	cmp	r7, #0
 800d40a:	dd08      	ble.n	800d41e <_strtod_l+0x7b6>
 800d40c:	4641      	mov	r1, r8
 800d40e:	463a      	mov	r2, r7
 800d410:	9805      	ldr	r0, [sp, #20]
 800d412:	f7ff f9a9 	bl	800c768 <__lshift>
 800d416:	4680      	mov	r8, r0
 800d418:	2800      	cmp	r0, #0
 800d41a:	f43f ae46 	beq.w	800d0aa <_strtod_l+0x442>
 800d41e:	464a      	mov	r2, r9
 800d420:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d422:	9805      	ldr	r0, [sp, #20]
 800d424:	f7ff fa28 	bl	800c878 <__mdiff>
 800d428:	4604      	mov	r4, r0
 800d42a:	2800      	cmp	r0, #0
 800d42c:	f43f ae3d 	beq.w	800d0aa <_strtod_l+0x442>
 800d430:	68c3      	ldr	r3, [r0, #12]
 800d432:	4641      	mov	r1, r8
 800d434:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d436:	2300      	movs	r3, #0
 800d438:	60c3      	str	r3, [r0, #12]
 800d43a:	f7ff fa01 	bl	800c840 <__mcmp>
 800d43e:	2800      	cmp	r0, #0
 800d440:	da46      	bge.n	800d4d0 <_strtod_l+0x868>
 800d442:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d444:	ea53 030a 	orrs.w	r3, r3, sl
 800d448:	d16c      	bne.n	800d524 <_strtod_l+0x8bc>
 800d44a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d168      	bne.n	800d524 <_strtod_l+0x8bc>
 800d452:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d456:	0d1b      	lsrs	r3, r3, #20
 800d458:	051b      	lsls	r3, r3, #20
 800d45a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d45e:	d961      	bls.n	800d524 <_strtod_l+0x8bc>
 800d460:	6963      	ldr	r3, [r4, #20]
 800d462:	b913      	cbnz	r3, 800d46a <_strtod_l+0x802>
 800d464:	6923      	ldr	r3, [r4, #16]
 800d466:	2b01      	cmp	r3, #1
 800d468:	dd5c      	ble.n	800d524 <_strtod_l+0x8bc>
 800d46a:	4621      	mov	r1, r4
 800d46c:	2201      	movs	r2, #1
 800d46e:	9805      	ldr	r0, [sp, #20]
 800d470:	f7ff f97a 	bl	800c768 <__lshift>
 800d474:	4641      	mov	r1, r8
 800d476:	4604      	mov	r4, r0
 800d478:	f7ff f9e2 	bl	800c840 <__mcmp>
 800d47c:	2800      	cmp	r0, #0
 800d47e:	dd51      	ble.n	800d524 <_strtod_l+0x8bc>
 800d480:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d484:	9a08      	ldr	r2, [sp, #32]
 800d486:	0d1b      	lsrs	r3, r3, #20
 800d488:	051b      	lsls	r3, r3, #20
 800d48a:	2a00      	cmp	r2, #0
 800d48c:	d06b      	beq.n	800d566 <_strtod_l+0x8fe>
 800d48e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d492:	d868      	bhi.n	800d566 <_strtod_l+0x8fe>
 800d494:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d498:	f67f ae9d 	bls.w	800d1d6 <_strtod_l+0x56e>
 800d49c:	4b0a      	ldr	r3, [pc, #40]	@ (800d4c8 <_strtod_l+0x860>)
 800d49e:	4650      	mov	r0, sl
 800d4a0:	4659      	mov	r1, fp
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f7f3 f8b8 	bl	8000618 <__aeabi_dmul>
 800d4a8:	4b08      	ldr	r3, [pc, #32]	@ (800d4cc <_strtod_l+0x864>)
 800d4aa:	4682      	mov	sl, r0
 800d4ac:	468b      	mov	fp, r1
 800d4ae:	400b      	ands	r3, r1
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f47f ae05 	bne.w	800d0c0 <_strtod_l+0x458>
 800d4b6:	2322      	movs	r3, #34	@ 0x22
 800d4b8:	9a05      	ldr	r2, [sp, #20]
 800d4ba:	6013      	str	r3, [r2, #0]
 800d4bc:	e600      	b.n	800d0c0 <_strtod_l+0x458>
 800d4be:	bf00      	nop
 800d4c0:	0800ef68 	.word	0x0800ef68
 800d4c4:	fffffc02 	.word	0xfffffc02
 800d4c8:	39500000 	.word	0x39500000
 800d4cc:	7ff00000 	.word	0x7ff00000
 800d4d0:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d4d4:	d165      	bne.n	800d5a2 <_strtod_l+0x93a>
 800d4d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d4d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4dc:	b35a      	cbz	r2, 800d536 <_strtod_l+0x8ce>
 800d4de:	4a9e      	ldr	r2, [pc, #632]	@ (800d758 <_strtod_l+0xaf0>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d12b      	bne.n	800d53c <_strtod_l+0x8d4>
 800d4e4:	9b08      	ldr	r3, [sp, #32]
 800d4e6:	4651      	mov	r1, sl
 800d4e8:	b303      	cbz	r3, 800d52c <_strtod_l+0x8c4>
 800d4ea:	465a      	mov	r2, fp
 800d4ec:	4b9b      	ldr	r3, [pc, #620]	@ (800d75c <_strtod_l+0xaf4>)
 800d4ee:	4013      	ands	r3, r2
 800d4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d4f8:	d81b      	bhi.n	800d532 <_strtod_l+0x8ca>
 800d4fa:	0d1b      	lsrs	r3, r3, #20
 800d4fc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d500:	fa02 f303 	lsl.w	r3, r2, r3
 800d504:	4299      	cmp	r1, r3
 800d506:	d119      	bne.n	800d53c <_strtod_l+0x8d4>
 800d508:	4b95      	ldr	r3, [pc, #596]	@ (800d760 <_strtod_l+0xaf8>)
 800d50a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d102      	bne.n	800d516 <_strtod_l+0x8ae>
 800d510:	3101      	adds	r1, #1
 800d512:	f43f adca 	beq.w	800d0aa <_strtod_l+0x442>
 800d516:	4b91      	ldr	r3, [pc, #580]	@ (800d75c <_strtod_l+0xaf4>)
 800d518:	f04f 0a00 	mov.w	sl, #0
 800d51c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d51e:	401a      	ands	r2, r3
 800d520:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d524:	9b08      	ldr	r3, [sp, #32]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1b8      	bne.n	800d49c <_strtod_l+0x834>
 800d52a:	e5c9      	b.n	800d0c0 <_strtod_l+0x458>
 800d52c:	f04f 33ff 	mov.w	r3, #4294967295
 800d530:	e7e8      	b.n	800d504 <_strtod_l+0x89c>
 800d532:	4613      	mov	r3, r2
 800d534:	e7e6      	b.n	800d504 <_strtod_l+0x89c>
 800d536:	ea53 030a 	orrs.w	r3, r3, sl
 800d53a:	d0a1      	beq.n	800d480 <_strtod_l+0x818>
 800d53c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d53e:	b1db      	cbz	r3, 800d578 <_strtod_l+0x910>
 800d540:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d542:	4213      	tst	r3, r2
 800d544:	d0ee      	beq.n	800d524 <_strtod_l+0x8bc>
 800d546:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d548:	4650      	mov	r0, sl
 800d54a:	9a08      	ldr	r2, [sp, #32]
 800d54c:	4659      	mov	r1, fp
 800d54e:	b1bb      	cbz	r3, 800d580 <_strtod_l+0x918>
 800d550:	f7ff fb6c 	bl	800cc2c <sulp>
 800d554:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d558:	ec53 2b10 	vmov	r2, r3, d0
 800d55c:	f7f2 fea6 	bl	80002ac <__adddf3>
 800d560:	4682      	mov	sl, r0
 800d562:	468b      	mov	fp, r1
 800d564:	e7de      	b.n	800d524 <_strtod_l+0x8bc>
 800d566:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d56a:	f04f 3aff 	mov.w	sl, #4294967295
 800d56e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d572:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d576:	e7d5      	b.n	800d524 <_strtod_l+0x8bc>
 800d578:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d57a:	ea13 0f0a 	tst.w	r3, sl
 800d57e:	e7e1      	b.n	800d544 <_strtod_l+0x8dc>
 800d580:	f7ff fb54 	bl	800cc2c <sulp>
 800d584:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d588:	ec53 2b10 	vmov	r2, r3, d0
 800d58c:	f7f2 fe8c 	bl	80002a8 <__aeabi_dsub>
 800d590:	2200      	movs	r2, #0
 800d592:	2300      	movs	r3, #0
 800d594:	4682      	mov	sl, r0
 800d596:	468b      	mov	fp, r1
 800d598:	f7f3 faa6 	bl	8000ae8 <__aeabi_dcmpeq>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d0c1      	beq.n	800d524 <_strtod_l+0x8bc>
 800d5a0:	e619      	b.n	800d1d6 <_strtod_l+0x56e>
 800d5a2:	4641      	mov	r1, r8
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	f7ff facb 	bl	800cb40 <__ratio>
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d5b0:	ec57 6b10 	vmov	r6, r7, d0
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	4639      	mov	r1, r7
 800d5b8:	f7f3 faaa 	bl	8000b10 <__aeabi_dcmple>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	d06f      	beq.n	800d6a0 <_strtod_l+0xa38>
 800d5c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d17a      	bne.n	800d6bc <_strtod_l+0xa54>
 800d5c6:	f1ba 0f00 	cmp.w	sl, #0
 800d5ca:	d158      	bne.n	800d67e <_strtod_l+0xa16>
 800d5cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d15a      	bne.n	800d68c <_strtod_l+0xa24>
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	4b62      	ldr	r3, [pc, #392]	@ (800d764 <_strtod_l+0xafc>)
 800d5da:	4630      	mov	r0, r6
 800d5dc:	4639      	mov	r1, r7
 800d5de:	f7f3 fa8d 	bl	8000afc <__aeabi_dcmplt>
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d159      	bne.n	800d69a <_strtod_l+0xa32>
 800d5e6:	4630      	mov	r0, r6
 800d5e8:	4639      	mov	r1, r7
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	4b5e      	ldr	r3, [pc, #376]	@ (800d768 <_strtod_l+0xb00>)
 800d5ee:	f7f3 f813 	bl	8000618 <__aeabi_dmul>
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	460f      	mov	r7, r1
 800d5f6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d5fa:	9606      	str	r6, [sp, #24]
 800d5fc:	9307      	str	r3, [sp, #28]
 800d5fe:	4d57      	ldr	r5, [pc, #348]	@ (800d75c <_strtod_l+0xaf4>)
 800d600:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d604:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d60a:	401d      	ands	r5, r3
 800d60c:	4b57      	ldr	r3, [pc, #348]	@ (800d76c <_strtod_l+0xb04>)
 800d60e:	429d      	cmp	r5, r3
 800d610:	f040 80b0 	bne.w	800d774 <_strtod_l+0xb0c>
 800d614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d616:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d61a:	ec4b ab10 	vmov	d0, sl, fp
 800d61e:	f7ff f9c3 	bl	800c9a8 <__ulp>
 800d622:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d626:	ec51 0b10 	vmov	r0, r1, d0
 800d62a:	f7f2 fff5 	bl	8000618 <__aeabi_dmul>
 800d62e:	4652      	mov	r2, sl
 800d630:	465b      	mov	r3, fp
 800d632:	f7f2 fe3b 	bl	80002ac <__adddf3>
 800d636:	460b      	mov	r3, r1
 800d638:	4948      	ldr	r1, [pc, #288]	@ (800d75c <_strtod_l+0xaf4>)
 800d63a:	4682      	mov	sl, r0
 800d63c:	4a4c      	ldr	r2, [pc, #304]	@ (800d770 <_strtod_l+0xb08>)
 800d63e:	4019      	ands	r1, r3
 800d640:	4291      	cmp	r1, r2
 800d642:	d942      	bls.n	800d6ca <_strtod_l+0xa62>
 800d644:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d646:	4b46      	ldr	r3, [pc, #280]	@ (800d760 <_strtod_l+0xaf8>)
 800d648:	429a      	cmp	r2, r3
 800d64a:	d103      	bne.n	800d654 <_strtod_l+0x9ec>
 800d64c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d64e:	3301      	adds	r3, #1
 800d650:	f43f ad2b 	beq.w	800d0aa <_strtod_l+0x442>
 800d654:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800d760 <_strtod_l+0xaf8>
 800d658:	f04f 3aff 	mov.w	sl, #4294967295
 800d65c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d65e:	9805      	ldr	r0, [sp, #20]
 800d660:	f7fe fe68 	bl	800c334 <_Bfree>
 800d664:	4649      	mov	r1, r9
 800d666:	9805      	ldr	r0, [sp, #20]
 800d668:	f7fe fe64 	bl	800c334 <_Bfree>
 800d66c:	4641      	mov	r1, r8
 800d66e:	9805      	ldr	r0, [sp, #20]
 800d670:	f7fe fe60 	bl	800c334 <_Bfree>
 800d674:	4621      	mov	r1, r4
 800d676:	9805      	ldr	r0, [sp, #20]
 800d678:	f7fe fe5c 	bl	800c334 <_Bfree>
 800d67c:	e618      	b.n	800d2b0 <_strtod_l+0x648>
 800d67e:	f1ba 0f01 	cmp.w	sl, #1
 800d682:	d103      	bne.n	800d68c <_strtod_l+0xa24>
 800d684:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d686:	2b00      	cmp	r3, #0
 800d688:	f43f ada5 	beq.w	800d1d6 <_strtod_l+0x56e>
 800d68c:	2600      	movs	r6, #0
 800d68e:	4f35      	ldr	r7, [pc, #212]	@ (800d764 <_strtod_l+0xafc>)
 800d690:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800d738 <_strtod_l+0xad0>
 800d694:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d698:	e7b1      	b.n	800d5fe <_strtod_l+0x996>
 800d69a:	2600      	movs	r6, #0
 800d69c:	4f32      	ldr	r7, [pc, #200]	@ (800d768 <_strtod_l+0xb00>)
 800d69e:	e7aa      	b.n	800d5f6 <_strtod_l+0x98e>
 800d6a0:	4b31      	ldr	r3, [pc, #196]	@ (800d768 <_strtod_l+0xb00>)
 800d6a2:	4630      	mov	r0, r6
 800d6a4:	4639      	mov	r1, r7
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f7f2 ffb6 	bl	8000618 <__aeabi_dmul>
 800d6ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6ae:	4606      	mov	r6, r0
 800d6b0:	460f      	mov	r7, r1
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d09f      	beq.n	800d5f6 <_strtod_l+0x98e>
 800d6b6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d6ba:	e7a0      	b.n	800d5fe <_strtod_l+0x996>
 800d6bc:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800d740 <_strtod_l+0xad8>
 800d6c0:	ec57 6b17 	vmov	r6, r7, d7
 800d6c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d6c8:	e799      	b.n	800d5fe <_strtod_l+0x996>
 800d6ca:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d6ce:	9b08      	ldr	r3, [sp, #32]
 800d6d0:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d1c1      	bne.n	800d65c <_strtod_l+0x9f4>
 800d6d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d6dc:	0d1b      	lsrs	r3, r3, #20
 800d6de:	051b      	lsls	r3, r3, #20
 800d6e0:	429d      	cmp	r5, r3
 800d6e2:	d1bb      	bne.n	800d65c <_strtod_l+0x9f4>
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	4639      	mov	r1, r7
 800d6e8:	f7f3 faf6 	bl	8000cd8 <__aeabi_d2lz>
 800d6ec:	f7f2 ff66 	bl	80005bc <__aeabi_l2d>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	4630      	mov	r0, r6
 800d6f6:	4639      	mov	r1, r7
 800d6f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d6fc:	f7f2 fdd4 	bl	80002a8 <__aeabi_dsub>
 800d700:	460b      	mov	r3, r1
 800d702:	4602      	mov	r2, r0
 800d704:	ea46 060a 	orr.w	r6, r6, sl
 800d708:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d70c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d70e:	431e      	orrs	r6, r3
 800d710:	d06d      	beq.n	800d7ee <_strtod_l+0xb86>
 800d712:	a30d      	add	r3, pc, #52	@ (adr r3, 800d748 <_strtod_l+0xae0>)
 800d714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d718:	f7f3 f9f0 	bl	8000afc <__aeabi_dcmplt>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	f47f accf 	bne.w	800d0c0 <_strtod_l+0x458>
 800d722:	a30b      	add	r3, pc, #44	@ (adr r3, 800d750 <_strtod_l+0xae8>)
 800d724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d72c:	f7f3 fa04 	bl	8000b38 <__aeabi_dcmpgt>
 800d730:	2800      	cmp	r0, #0
 800d732:	d093      	beq.n	800d65c <_strtod_l+0x9f4>
 800d734:	e4c4      	b.n	800d0c0 <_strtod_l+0x458>
 800d736:	bf00      	nop
 800d738:	00000000 	.word	0x00000000
 800d73c:	bff00000 	.word	0xbff00000
 800d740:	00000000 	.word	0x00000000
 800d744:	3ff00000 	.word	0x3ff00000
 800d748:	94a03595 	.word	0x94a03595
 800d74c:	3fdfffff 	.word	0x3fdfffff
 800d750:	35afe535 	.word	0x35afe535
 800d754:	3fe00000 	.word	0x3fe00000
 800d758:	000fffff 	.word	0x000fffff
 800d75c:	7ff00000 	.word	0x7ff00000
 800d760:	7fefffff 	.word	0x7fefffff
 800d764:	3ff00000 	.word	0x3ff00000
 800d768:	3fe00000 	.word	0x3fe00000
 800d76c:	7fe00000 	.word	0x7fe00000
 800d770:	7c9fffff 	.word	0x7c9fffff
 800d774:	9b08      	ldr	r3, [sp, #32]
 800d776:	b323      	cbz	r3, 800d7c2 <_strtod_l+0xb5a>
 800d778:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d77c:	d821      	bhi.n	800d7c2 <_strtod_l+0xb5a>
 800d77e:	4630      	mov	r0, r6
 800d780:	4639      	mov	r1, r7
 800d782:	a327      	add	r3, pc, #156	@ (adr r3, 800d820 <_strtod_l+0xbb8>)
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d788:	f7f3 f9c2 	bl	8000b10 <__aeabi_dcmple>
 800d78c:	b1a0      	cbz	r0, 800d7b8 <_strtod_l+0xb50>
 800d78e:	4639      	mov	r1, r7
 800d790:	4630      	mov	r0, r6
 800d792:	f7f3 fa19 	bl	8000bc8 <__aeabi_d2uiz>
 800d796:	2801      	cmp	r0, #1
 800d798:	bf38      	it	cc
 800d79a:	2001      	movcc	r0, #1
 800d79c:	f7f2 fec2 	bl	8000524 <__aeabi_ui2d>
 800d7a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7a2:	4606      	mov	r6, r0
 800d7a4:	460f      	mov	r7, r1
 800d7a6:	b9fb      	cbnz	r3, 800d7e8 <_strtod_l+0xb80>
 800d7a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d7ac:	9014      	str	r0, [sp, #80]	@ 0x50
 800d7ae:	9315      	str	r3, [sp, #84]	@ 0x54
 800d7b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d7b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d7b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d7ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d7be:	1b5b      	subs	r3, r3, r5
 800d7c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d7c2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d7c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d7ca:	f7ff f8ed 	bl	800c9a8 <__ulp>
 800d7ce:	4650      	mov	r0, sl
 800d7d0:	4659      	mov	r1, fp
 800d7d2:	ec53 2b10 	vmov	r2, r3, d0
 800d7d6:	f7f2 ff1f 	bl	8000618 <__aeabi_dmul>
 800d7da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d7de:	f7f2 fd65 	bl	80002ac <__adddf3>
 800d7e2:	4682      	mov	sl, r0
 800d7e4:	468b      	mov	fp, r1
 800d7e6:	e772      	b.n	800d6ce <_strtod_l+0xa66>
 800d7e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d7ec:	e7e0      	b.n	800d7b0 <_strtod_l+0xb48>
 800d7ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800d828 <_strtod_l+0xbc0>)
 800d7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f4:	f7f3 f982 	bl	8000afc <__aeabi_dcmplt>
 800d7f8:	e79a      	b.n	800d730 <_strtod_l+0xac8>
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d800:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d802:	6013      	str	r3, [r2, #0]
 800d804:	f7ff ba6d 	b.w	800cce2 <_strtod_l+0x7a>
 800d808:	2a65      	cmp	r2, #101	@ 0x65
 800d80a:	f43f ab67 	beq.w	800cedc <_strtod_l+0x274>
 800d80e:	2a45      	cmp	r2, #69	@ 0x45
 800d810:	f43f ab64 	beq.w	800cedc <_strtod_l+0x274>
 800d814:	2301      	movs	r3, #1
 800d816:	f7ff bba0 	b.w	800cf5a <_strtod_l+0x2f2>
 800d81a:	bf00      	nop
 800d81c:	f3af 8000 	nop.w
 800d820:	ffc00000 	.word	0xffc00000
 800d824:	41dfffff 	.word	0x41dfffff
 800d828:	94a03595 	.word	0x94a03595
 800d82c:	3fcfffff 	.word	0x3fcfffff

0800d830 <_strtod_r>:
 800d830:	4b01      	ldr	r3, [pc, #4]	@ (800d838 <_strtod_r+0x8>)
 800d832:	f7ff ba19 	b.w	800cc68 <_strtod_l>
 800d836:	bf00      	nop
 800d838:	200000ac 	.word	0x200000ac

0800d83c <_strtol_l.constprop.0>:
 800d83c:	2b24      	cmp	r3, #36	@ 0x24
 800d83e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d842:	4686      	mov	lr, r0
 800d844:	4690      	mov	r8, r2
 800d846:	d801      	bhi.n	800d84c <_strtol_l.constprop.0+0x10>
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d106      	bne.n	800d85a <_strtol_l.constprop.0+0x1e>
 800d84c:	f7fd fe52 	bl	800b4f4 <__errno>
 800d850:	2316      	movs	r3, #22
 800d852:	6003      	str	r3, [r0, #0]
 800d854:	2000      	movs	r0, #0
 800d856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d85a:	460d      	mov	r5, r1
 800d85c:	4833      	ldr	r0, [pc, #204]	@ (800d92c <_strtol_l.constprop.0+0xf0>)
 800d85e:	462a      	mov	r2, r5
 800d860:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d864:	5d06      	ldrb	r6, [r0, r4]
 800d866:	f016 0608 	ands.w	r6, r6, #8
 800d86a:	d1f8      	bne.n	800d85e <_strtol_l.constprop.0+0x22>
 800d86c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d86e:	d12d      	bne.n	800d8cc <_strtol_l.constprop.0+0x90>
 800d870:	782c      	ldrb	r4, [r5, #0]
 800d872:	2601      	movs	r6, #1
 800d874:	1c95      	adds	r5, r2, #2
 800d876:	f033 0210 	bics.w	r2, r3, #16
 800d87a:	d109      	bne.n	800d890 <_strtol_l.constprop.0+0x54>
 800d87c:	2c30      	cmp	r4, #48	@ 0x30
 800d87e:	d12a      	bne.n	800d8d6 <_strtol_l.constprop.0+0x9a>
 800d880:	782a      	ldrb	r2, [r5, #0]
 800d882:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d886:	2a58      	cmp	r2, #88	@ 0x58
 800d888:	d125      	bne.n	800d8d6 <_strtol_l.constprop.0+0x9a>
 800d88a:	786c      	ldrb	r4, [r5, #1]
 800d88c:	2310      	movs	r3, #16
 800d88e:	3502      	adds	r5, #2
 800d890:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d894:	2200      	movs	r2, #0
 800d896:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d89a:	4610      	mov	r0, r2
 800d89c:	fbbc f9f3 	udiv	r9, ip, r3
 800d8a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800d8a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d8a8:	2f09      	cmp	r7, #9
 800d8aa:	d81b      	bhi.n	800d8e4 <_strtol_l.constprop.0+0xa8>
 800d8ac:	463c      	mov	r4, r7
 800d8ae:	42a3      	cmp	r3, r4
 800d8b0:	dd27      	ble.n	800d902 <_strtol_l.constprop.0+0xc6>
 800d8b2:	1c57      	adds	r7, r2, #1
 800d8b4:	d007      	beq.n	800d8c6 <_strtol_l.constprop.0+0x8a>
 800d8b6:	4581      	cmp	r9, r0
 800d8b8:	d320      	bcc.n	800d8fc <_strtol_l.constprop.0+0xc0>
 800d8ba:	d101      	bne.n	800d8c0 <_strtol_l.constprop.0+0x84>
 800d8bc:	45a2      	cmp	sl, r4
 800d8be:	db1d      	blt.n	800d8fc <_strtol_l.constprop.0+0xc0>
 800d8c0:	fb00 4003 	mla	r0, r0, r3, r4
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8ca:	e7eb      	b.n	800d8a4 <_strtol_l.constprop.0+0x68>
 800d8cc:	2c2b      	cmp	r4, #43	@ 0x2b
 800d8ce:	bf04      	itt	eq
 800d8d0:	782c      	ldrbeq	r4, [r5, #0]
 800d8d2:	1c95      	addeq	r5, r2, #2
 800d8d4:	e7cf      	b.n	800d876 <_strtol_l.constprop.0+0x3a>
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d1da      	bne.n	800d890 <_strtol_l.constprop.0+0x54>
 800d8da:	2c30      	cmp	r4, #48	@ 0x30
 800d8dc:	bf0c      	ite	eq
 800d8de:	2308      	moveq	r3, #8
 800d8e0:	230a      	movne	r3, #10
 800d8e2:	e7d5      	b.n	800d890 <_strtol_l.constprop.0+0x54>
 800d8e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d8e8:	2f19      	cmp	r7, #25
 800d8ea:	d801      	bhi.n	800d8f0 <_strtol_l.constprop.0+0xb4>
 800d8ec:	3c37      	subs	r4, #55	@ 0x37
 800d8ee:	e7de      	b.n	800d8ae <_strtol_l.constprop.0+0x72>
 800d8f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d8f4:	2f19      	cmp	r7, #25
 800d8f6:	d804      	bhi.n	800d902 <_strtol_l.constprop.0+0xc6>
 800d8f8:	3c57      	subs	r4, #87	@ 0x57
 800d8fa:	e7d8      	b.n	800d8ae <_strtol_l.constprop.0+0x72>
 800d8fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d900:	e7e1      	b.n	800d8c6 <_strtol_l.constprop.0+0x8a>
 800d902:	1c53      	adds	r3, r2, #1
 800d904:	d108      	bne.n	800d918 <_strtol_l.constprop.0+0xdc>
 800d906:	2322      	movs	r3, #34	@ 0x22
 800d908:	4660      	mov	r0, ip
 800d90a:	f8ce 3000 	str.w	r3, [lr]
 800d90e:	f1b8 0f00 	cmp.w	r8, #0
 800d912:	d0a0      	beq.n	800d856 <_strtol_l.constprop.0+0x1a>
 800d914:	1e69      	subs	r1, r5, #1
 800d916:	e006      	b.n	800d926 <_strtol_l.constprop.0+0xea>
 800d918:	b106      	cbz	r6, 800d91c <_strtol_l.constprop.0+0xe0>
 800d91a:	4240      	negs	r0, r0
 800d91c:	f1b8 0f00 	cmp.w	r8, #0
 800d920:	d099      	beq.n	800d856 <_strtol_l.constprop.0+0x1a>
 800d922:	2a00      	cmp	r2, #0
 800d924:	d1f6      	bne.n	800d914 <_strtol_l.constprop.0+0xd8>
 800d926:	f8c8 1000 	str.w	r1, [r8]
 800d92a:	e794      	b.n	800d856 <_strtol_l.constprop.0+0x1a>
 800d92c:	0800ef91 	.word	0x0800ef91

0800d930 <_strtol_r>:
 800d930:	f7ff bf84 	b.w	800d83c <_strtol_l.constprop.0>

0800d934 <__ssputs_r>:
 800d934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d938:	461f      	mov	r7, r3
 800d93a:	688e      	ldr	r6, [r1, #8]
 800d93c:	4682      	mov	sl, r0
 800d93e:	460c      	mov	r4, r1
 800d940:	42be      	cmp	r6, r7
 800d942:	4690      	mov	r8, r2
 800d944:	680b      	ldr	r3, [r1, #0]
 800d946:	d82d      	bhi.n	800d9a4 <__ssputs_r+0x70>
 800d948:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d94c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d950:	d026      	beq.n	800d9a0 <__ssputs_r+0x6c>
 800d952:	6965      	ldr	r5, [r4, #20]
 800d954:	6909      	ldr	r1, [r1, #16]
 800d956:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d95a:	eba3 0901 	sub.w	r9, r3, r1
 800d95e:	1c7b      	adds	r3, r7, #1
 800d960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d964:	444b      	add	r3, r9
 800d966:	106d      	asrs	r5, r5, #1
 800d968:	429d      	cmp	r5, r3
 800d96a:	bf38      	it	cc
 800d96c:	461d      	movcc	r5, r3
 800d96e:	0553      	lsls	r3, r2, #21
 800d970:	d527      	bpl.n	800d9c2 <__ssputs_r+0x8e>
 800d972:	4629      	mov	r1, r5
 800d974:	f7fc fd2c 	bl	800a3d0 <_malloc_r>
 800d978:	4606      	mov	r6, r0
 800d97a:	b360      	cbz	r0, 800d9d6 <__ssputs_r+0xa2>
 800d97c:	464a      	mov	r2, r9
 800d97e:	6921      	ldr	r1, [r4, #16]
 800d980:	f000 fbde 	bl	800e140 <memcpy>
 800d984:	89a3      	ldrh	r3, [r4, #12]
 800d986:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d98a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d98e:	81a3      	strh	r3, [r4, #12]
 800d990:	6126      	str	r6, [r4, #16]
 800d992:	444e      	add	r6, r9
 800d994:	6165      	str	r5, [r4, #20]
 800d996:	eba5 0509 	sub.w	r5, r5, r9
 800d99a:	6026      	str	r6, [r4, #0]
 800d99c:	463e      	mov	r6, r7
 800d99e:	60a5      	str	r5, [r4, #8]
 800d9a0:	42be      	cmp	r6, r7
 800d9a2:	d900      	bls.n	800d9a6 <__ssputs_r+0x72>
 800d9a4:	463e      	mov	r6, r7
 800d9a6:	4632      	mov	r2, r6
 800d9a8:	4641      	mov	r1, r8
 800d9aa:	6820      	ldr	r0, [r4, #0]
 800d9ac:	f000 fb9c 	bl	800e0e8 <memmove>
 800d9b0:	68a3      	ldr	r3, [r4, #8]
 800d9b2:	2000      	movs	r0, #0
 800d9b4:	1b9b      	subs	r3, r3, r6
 800d9b6:	60a3      	str	r3, [r4, #8]
 800d9b8:	6823      	ldr	r3, [r4, #0]
 800d9ba:	4433      	add	r3, r6
 800d9bc:	6023      	str	r3, [r4, #0]
 800d9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9c2:	462a      	mov	r2, r5
 800d9c4:	f000 ff4d 	bl	800e862 <_realloc_r>
 800d9c8:	4606      	mov	r6, r0
 800d9ca:	2800      	cmp	r0, #0
 800d9cc:	d1e0      	bne.n	800d990 <__ssputs_r+0x5c>
 800d9ce:	6921      	ldr	r1, [r4, #16]
 800d9d0:	4650      	mov	r0, sl
 800d9d2:	f7fe fc25 	bl	800c220 <_free_r>
 800d9d6:	230c      	movs	r3, #12
 800d9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9dc:	f8ca 3000 	str.w	r3, [sl]
 800d9e0:	89a3      	ldrh	r3, [r4, #12]
 800d9e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9e6:	81a3      	strh	r3, [r4, #12]
 800d9e8:	e7e9      	b.n	800d9be <__ssputs_r+0x8a>
	...

0800d9ec <_svfiprintf_r>:
 800d9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f0:	4698      	mov	r8, r3
 800d9f2:	898b      	ldrh	r3, [r1, #12]
 800d9f4:	b09d      	sub	sp, #116	@ 0x74
 800d9f6:	4607      	mov	r7, r0
 800d9f8:	061b      	lsls	r3, r3, #24
 800d9fa:	460d      	mov	r5, r1
 800d9fc:	4614      	mov	r4, r2
 800d9fe:	d510      	bpl.n	800da22 <_svfiprintf_r+0x36>
 800da00:	690b      	ldr	r3, [r1, #16]
 800da02:	b973      	cbnz	r3, 800da22 <_svfiprintf_r+0x36>
 800da04:	2140      	movs	r1, #64	@ 0x40
 800da06:	f7fc fce3 	bl	800a3d0 <_malloc_r>
 800da0a:	6028      	str	r0, [r5, #0]
 800da0c:	6128      	str	r0, [r5, #16]
 800da0e:	b930      	cbnz	r0, 800da1e <_svfiprintf_r+0x32>
 800da10:	230c      	movs	r3, #12
 800da12:	603b      	str	r3, [r7, #0]
 800da14:	f04f 30ff 	mov.w	r0, #4294967295
 800da18:	b01d      	add	sp, #116	@ 0x74
 800da1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da1e:	2340      	movs	r3, #64	@ 0x40
 800da20:	616b      	str	r3, [r5, #20]
 800da22:	2300      	movs	r3, #0
 800da24:	f8cd 800c 	str.w	r8, [sp, #12]
 800da28:	f04f 0901 	mov.w	r9, #1
 800da2c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800dbd0 <_svfiprintf_r+0x1e4>
 800da30:	9309      	str	r3, [sp, #36]	@ 0x24
 800da32:	2320      	movs	r3, #32
 800da34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da38:	2330      	movs	r3, #48	@ 0x30
 800da3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da3e:	4623      	mov	r3, r4
 800da40:	469a      	mov	sl, r3
 800da42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da46:	b10a      	cbz	r2, 800da4c <_svfiprintf_r+0x60>
 800da48:	2a25      	cmp	r2, #37	@ 0x25
 800da4a:	d1f9      	bne.n	800da40 <_svfiprintf_r+0x54>
 800da4c:	ebba 0b04 	subs.w	fp, sl, r4
 800da50:	d00b      	beq.n	800da6a <_svfiprintf_r+0x7e>
 800da52:	465b      	mov	r3, fp
 800da54:	4622      	mov	r2, r4
 800da56:	4629      	mov	r1, r5
 800da58:	4638      	mov	r0, r7
 800da5a:	f7ff ff6b 	bl	800d934 <__ssputs_r>
 800da5e:	3001      	adds	r0, #1
 800da60:	f000 80a7 	beq.w	800dbb2 <_svfiprintf_r+0x1c6>
 800da64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da66:	445a      	add	r2, fp
 800da68:	9209      	str	r2, [sp, #36]	@ 0x24
 800da6a:	f89a 3000 	ldrb.w	r3, [sl]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	f000 809f 	beq.w	800dbb2 <_svfiprintf_r+0x1c6>
 800da74:	2300      	movs	r3, #0
 800da76:	f04f 32ff 	mov.w	r2, #4294967295
 800da7a:	f10a 0a01 	add.w	sl, sl, #1
 800da7e:	9304      	str	r3, [sp, #16]
 800da80:	9307      	str	r3, [sp, #28]
 800da82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da86:	931a      	str	r3, [sp, #104]	@ 0x68
 800da88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da8c:	4654      	mov	r4, sl
 800da8e:	2205      	movs	r2, #5
 800da90:	484f      	ldr	r0, [pc, #316]	@ (800dbd0 <_svfiprintf_r+0x1e4>)
 800da92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da96:	f7fd fd5a 	bl	800b54e <memchr>
 800da9a:	9a04      	ldr	r2, [sp, #16]
 800da9c:	b9d8      	cbnz	r0, 800dad6 <_svfiprintf_r+0xea>
 800da9e:	06d0      	lsls	r0, r2, #27
 800daa0:	bf44      	itt	mi
 800daa2:	2320      	movmi	r3, #32
 800daa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800daa8:	0711      	lsls	r1, r2, #28
 800daaa:	bf44      	itt	mi
 800daac:	232b      	movmi	r3, #43	@ 0x2b
 800daae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dab2:	f89a 3000 	ldrb.w	r3, [sl]
 800dab6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dab8:	d015      	beq.n	800dae6 <_svfiprintf_r+0xfa>
 800daba:	9a07      	ldr	r2, [sp, #28]
 800dabc:	4654      	mov	r4, sl
 800dabe:	2000      	movs	r0, #0
 800dac0:	f04f 0c0a 	mov.w	ip, #10
 800dac4:	4621      	mov	r1, r4
 800dac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daca:	3b30      	subs	r3, #48	@ 0x30
 800dacc:	2b09      	cmp	r3, #9
 800dace:	d94b      	bls.n	800db68 <_svfiprintf_r+0x17c>
 800dad0:	b1b0      	cbz	r0, 800db00 <_svfiprintf_r+0x114>
 800dad2:	9207      	str	r2, [sp, #28]
 800dad4:	e014      	b.n	800db00 <_svfiprintf_r+0x114>
 800dad6:	eba0 0308 	sub.w	r3, r0, r8
 800dada:	46a2      	mov	sl, r4
 800dadc:	fa09 f303 	lsl.w	r3, r9, r3
 800dae0:	4313      	orrs	r3, r2
 800dae2:	9304      	str	r3, [sp, #16]
 800dae4:	e7d2      	b.n	800da8c <_svfiprintf_r+0xa0>
 800dae6:	9b03      	ldr	r3, [sp, #12]
 800dae8:	1d19      	adds	r1, r3, #4
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	9103      	str	r1, [sp, #12]
 800daf0:	bfbb      	ittet	lt
 800daf2:	425b      	neglt	r3, r3
 800daf4:	f042 0202 	orrlt.w	r2, r2, #2
 800daf8:	9307      	strge	r3, [sp, #28]
 800dafa:	9307      	strlt	r3, [sp, #28]
 800dafc:	bfb8      	it	lt
 800dafe:	9204      	strlt	r2, [sp, #16]
 800db00:	7823      	ldrb	r3, [r4, #0]
 800db02:	2b2e      	cmp	r3, #46	@ 0x2e
 800db04:	d10a      	bne.n	800db1c <_svfiprintf_r+0x130>
 800db06:	7863      	ldrb	r3, [r4, #1]
 800db08:	2b2a      	cmp	r3, #42	@ 0x2a
 800db0a:	d132      	bne.n	800db72 <_svfiprintf_r+0x186>
 800db0c:	9b03      	ldr	r3, [sp, #12]
 800db0e:	3402      	adds	r4, #2
 800db10:	1d1a      	adds	r2, r3, #4
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db18:	9203      	str	r2, [sp, #12]
 800db1a:	9305      	str	r3, [sp, #20]
 800db1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dbe0 <_svfiprintf_r+0x1f4>
 800db20:	2203      	movs	r2, #3
 800db22:	7821      	ldrb	r1, [r4, #0]
 800db24:	4650      	mov	r0, sl
 800db26:	f7fd fd12 	bl	800b54e <memchr>
 800db2a:	b138      	cbz	r0, 800db3c <_svfiprintf_r+0x150>
 800db2c:	eba0 000a 	sub.w	r0, r0, sl
 800db30:	2240      	movs	r2, #64	@ 0x40
 800db32:	9b04      	ldr	r3, [sp, #16]
 800db34:	3401      	adds	r4, #1
 800db36:	4082      	lsls	r2, r0
 800db38:	4313      	orrs	r3, r2
 800db3a:	9304      	str	r3, [sp, #16]
 800db3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db40:	2206      	movs	r2, #6
 800db42:	4824      	ldr	r0, [pc, #144]	@ (800dbd4 <_svfiprintf_r+0x1e8>)
 800db44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db48:	f7fd fd01 	bl	800b54e <memchr>
 800db4c:	2800      	cmp	r0, #0
 800db4e:	d036      	beq.n	800dbbe <_svfiprintf_r+0x1d2>
 800db50:	4b21      	ldr	r3, [pc, #132]	@ (800dbd8 <_svfiprintf_r+0x1ec>)
 800db52:	bb1b      	cbnz	r3, 800db9c <_svfiprintf_r+0x1b0>
 800db54:	9b03      	ldr	r3, [sp, #12]
 800db56:	3307      	adds	r3, #7
 800db58:	f023 0307 	bic.w	r3, r3, #7
 800db5c:	3308      	adds	r3, #8
 800db5e:	9303      	str	r3, [sp, #12]
 800db60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db62:	4433      	add	r3, r6
 800db64:	9309      	str	r3, [sp, #36]	@ 0x24
 800db66:	e76a      	b.n	800da3e <_svfiprintf_r+0x52>
 800db68:	fb0c 3202 	mla	r2, ip, r2, r3
 800db6c:	460c      	mov	r4, r1
 800db6e:	2001      	movs	r0, #1
 800db70:	e7a8      	b.n	800dac4 <_svfiprintf_r+0xd8>
 800db72:	2300      	movs	r3, #0
 800db74:	3401      	adds	r4, #1
 800db76:	f04f 0c0a 	mov.w	ip, #10
 800db7a:	4619      	mov	r1, r3
 800db7c:	9305      	str	r3, [sp, #20]
 800db7e:	4620      	mov	r0, r4
 800db80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db84:	3a30      	subs	r2, #48	@ 0x30
 800db86:	2a09      	cmp	r2, #9
 800db88:	d903      	bls.n	800db92 <_svfiprintf_r+0x1a6>
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d0c6      	beq.n	800db1c <_svfiprintf_r+0x130>
 800db8e:	9105      	str	r1, [sp, #20]
 800db90:	e7c4      	b.n	800db1c <_svfiprintf_r+0x130>
 800db92:	fb0c 2101 	mla	r1, ip, r1, r2
 800db96:	4604      	mov	r4, r0
 800db98:	2301      	movs	r3, #1
 800db9a:	e7f0      	b.n	800db7e <_svfiprintf_r+0x192>
 800db9c:	ab03      	add	r3, sp, #12
 800db9e:	462a      	mov	r2, r5
 800dba0:	a904      	add	r1, sp, #16
 800dba2:	4638      	mov	r0, r7
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	4b0d      	ldr	r3, [pc, #52]	@ (800dbdc <_svfiprintf_r+0x1f0>)
 800dba8:	f7fc fd3c 	bl	800a624 <_printf_float>
 800dbac:	1c42      	adds	r2, r0, #1
 800dbae:	4606      	mov	r6, r0
 800dbb0:	d1d6      	bne.n	800db60 <_svfiprintf_r+0x174>
 800dbb2:	89ab      	ldrh	r3, [r5, #12]
 800dbb4:	065b      	lsls	r3, r3, #25
 800dbb6:	f53f af2d 	bmi.w	800da14 <_svfiprintf_r+0x28>
 800dbba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbbc:	e72c      	b.n	800da18 <_svfiprintf_r+0x2c>
 800dbbe:	ab03      	add	r3, sp, #12
 800dbc0:	462a      	mov	r2, r5
 800dbc2:	a904      	add	r1, sp, #16
 800dbc4:	4638      	mov	r0, r7
 800dbc6:	9300      	str	r3, [sp, #0]
 800dbc8:	4b04      	ldr	r3, [pc, #16]	@ (800dbdc <_svfiprintf_r+0x1f0>)
 800dbca:	f7fc ffc7 	bl	800ab5c <_printf_i>
 800dbce:	e7ed      	b.n	800dbac <_svfiprintf_r+0x1c0>
 800dbd0:	0800f091 	.word	0x0800f091
 800dbd4:	0800f09b 	.word	0x0800f09b
 800dbd8:	0800a625 	.word	0x0800a625
 800dbdc:	0800d935 	.word	0x0800d935
 800dbe0:	0800f097 	.word	0x0800f097

0800dbe4 <__sfputc_r>:
 800dbe4:	6893      	ldr	r3, [r2, #8]
 800dbe6:	3b01      	subs	r3, #1
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	6093      	str	r3, [r2, #8]
 800dbec:	b410      	push	{r4}
 800dbee:	da08      	bge.n	800dc02 <__sfputc_r+0x1e>
 800dbf0:	6994      	ldr	r4, [r2, #24]
 800dbf2:	42a3      	cmp	r3, r4
 800dbf4:	db01      	blt.n	800dbfa <__sfputc_r+0x16>
 800dbf6:	290a      	cmp	r1, #10
 800dbf8:	d103      	bne.n	800dc02 <__sfputc_r+0x1e>
 800dbfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbfe:	f000 b9df 	b.w	800dfc0 <__swbuf_r>
 800dc02:	6813      	ldr	r3, [r2, #0]
 800dc04:	1c58      	adds	r0, r3, #1
 800dc06:	6010      	str	r0, [r2, #0]
 800dc08:	4608      	mov	r0, r1
 800dc0a:	7019      	strb	r1, [r3, #0]
 800dc0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc10:	4770      	bx	lr

0800dc12 <__sfputs_r>:
 800dc12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc14:	4606      	mov	r6, r0
 800dc16:	460f      	mov	r7, r1
 800dc18:	4614      	mov	r4, r2
 800dc1a:	18d5      	adds	r5, r2, r3
 800dc1c:	42ac      	cmp	r4, r5
 800dc1e:	d101      	bne.n	800dc24 <__sfputs_r+0x12>
 800dc20:	2000      	movs	r0, #0
 800dc22:	e007      	b.n	800dc34 <__sfputs_r+0x22>
 800dc24:	463a      	mov	r2, r7
 800dc26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc2a:	4630      	mov	r0, r6
 800dc2c:	f7ff ffda 	bl	800dbe4 <__sfputc_r>
 800dc30:	1c43      	adds	r3, r0, #1
 800dc32:	d1f3      	bne.n	800dc1c <__sfputs_r+0xa>
 800dc34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc38 <_vfiprintf_r>:
 800dc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc3c:	460d      	mov	r5, r1
 800dc3e:	b09d      	sub	sp, #116	@ 0x74
 800dc40:	4614      	mov	r4, r2
 800dc42:	4698      	mov	r8, r3
 800dc44:	4606      	mov	r6, r0
 800dc46:	b118      	cbz	r0, 800dc50 <_vfiprintf_r+0x18>
 800dc48:	6a03      	ldr	r3, [r0, #32]
 800dc4a:	b90b      	cbnz	r3, 800dc50 <_vfiprintf_r+0x18>
 800dc4c:	f7fd fb44 	bl	800b2d8 <__sinit>
 800dc50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc52:	07d9      	lsls	r1, r3, #31
 800dc54:	d405      	bmi.n	800dc62 <_vfiprintf_r+0x2a>
 800dc56:	89ab      	ldrh	r3, [r5, #12]
 800dc58:	059a      	lsls	r2, r3, #22
 800dc5a:	d402      	bmi.n	800dc62 <_vfiprintf_r+0x2a>
 800dc5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc5e:	f7fd fc74 	bl	800b54a <__retarget_lock_acquire_recursive>
 800dc62:	89ab      	ldrh	r3, [r5, #12]
 800dc64:	071b      	lsls	r3, r3, #28
 800dc66:	d501      	bpl.n	800dc6c <_vfiprintf_r+0x34>
 800dc68:	692b      	ldr	r3, [r5, #16]
 800dc6a:	b99b      	cbnz	r3, 800dc94 <_vfiprintf_r+0x5c>
 800dc6c:	4629      	mov	r1, r5
 800dc6e:	4630      	mov	r0, r6
 800dc70:	f000 f9e4 	bl	800e03c <__swsetup_r>
 800dc74:	b170      	cbz	r0, 800dc94 <_vfiprintf_r+0x5c>
 800dc76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc78:	07dc      	lsls	r4, r3, #31
 800dc7a:	d504      	bpl.n	800dc86 <_vfiprintf_r+0x4e>
 800dc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc80:	b01d      	add	sp, #116	@ 0x74
 800dc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc86:	89ab      	ldrh	r3, [r5, #12]
 800dc88:	0598      	lsls	r0, r3, #22
 800dc8a:	d4f7      	bmi.n	800dc7c <_vfiprintf_r+0x44>
 800dc8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc8e:	f7fd fc5d 	bl	800b54c <__retarget_lock_release_recursive>
 800dc92:	e7f3      	b.n	800dc7c <_vfiprintf_r+0x44>
 800dc94:	2300      	movs	r3, #0
 800dc96:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc9a:	f04f 0901 	mov.w	r9, #1
 800dc9e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800de54 <_vfiprintf_r+0x21c>
 800dca2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dca4:	2320      	movs	r3, #32
 800dca6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dcaa:	2330      	movs	r3, #48	@ 0x30
 800dcac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dcb0:	4623      	mov	r3, r4
 800dcb2:	469a      	mov	sl, r3
 800dcb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcb8:	b10a      	cbz	r2, 800dcbe <_vfiprintf_r+0x86>
 800dcba:	2a25      	cmp	r2, #37	@ 0x25
 800dcbc:	d1f9      	bne.n	800dcb2 <_vfiprintf_r+0x7a>
 800dcbe:	ebba 0b04 	subs.w	fp, sl, r4
 800dcc2:	d00b      	beq.n	800dcdc <_vfiprintf_r+0xa4>
 800dcc4:	465b      	mov	r3, fp
 800dcc6:	4622      	mov	r2, r4
 800dcc8:	4629      	mov	r1, r5
 800dcca:	4630      	mov	r0, r6
 800dccc:	f7ff ffa1 	bl	800dc12 <__sfputs_r>
 800dcd0:	3001      	adds	r0, #1
 800dcd2:	f000 80a7 	beq.w	800de24 <_vfiprintf_r+0x1ec>
 800dcd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcd8:	445a      	add	r2, fp
 800dcda:	9209      	str	r2, [sp, #36]	@ 0x24
 800dcdc:	f89a 3000 	ldrb.w	r3, [sl]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	f000 809f 	beq.w	800de24 <_vfiprintf_r+0x1ec>
 800dce6:	2300      	movs	r3, #0
 800dce8:	f04f 32ff 	mov.w	r2, #4294967295
 800dcec:	f10a 0a01 	add.w	sl, sl, #1
 800dcf0:	9304      	str	r3, [sp, #16]
 800dcf2:	9307      	str	r3, [sp, #28]
 800dcf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dcf8:	931a      	str	r3, [sp, #104]	@ 0x68
 800dcfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcfe:	4654      	mov	r4, sl
 800dd00:	2205      	movs	r2, #5
 800dd02:	4854      	ldr	r0, [pc, #336]	@ (800de54 <_vfiprintf_r+0x21c>)
 800dd04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd08:	f7fd fc21 	bl	800b54e <memchr>
 800dd0c:	9a04      	ldr	r2, [sp, #16]
 800dd0e:	b9d8      	cbnz	r0, 800dd48 <_vfiprintf_r+0x110>
 800dd10:	06d1      	lsls	r1, r2, #27
 800dd12:	bf44      	itt	mi
 800dd14:	2320      	movmi	r3, #32
 800dd16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd1a:	0713      	lsls	r3, r2, #28
 800dd1c:	bf44      	itt	mi
 800dd1e:	232b      	movmi	r3, #43	@ 0x2b
 800dd20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd24:	f89a 3000 	ldrb.w	r3, [sl]
 800dd28:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd2a:	d015      	beq.n	800dd58 <_vfiprintf_r+0x120>
 800dd2c:	9a07      	ldr	r2, [sp, #28]
 800dd2e:	4654      	mov	r4, sl
 800dd30:	2000      	movs	r0, #0
 800dd32:	f04f 0c0a 	mov.w	ip, #10
 800dd36:	4621      	mov	r1, r4
 800dd38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd3c:	3b30      	subs	r3, #48	@ 0x30
 800dd3e:	2b09      	cmp	r3, #9
 800dd40:	d94b      	bls.n	800ddda <_vfiprintf_r+0x1a2>
 800dd42:	b1b0      	cbz	r0, 800dd72 <_vfiprintf_r+0x13a>
 800dd44:	9207      	str	r2, [sp, #28]
 800dd46:	e014      	b.n	800dd72 <_vfiprintf_r+0x13a>
 800dd48:	eba0 0308 	sub.w	r3, r0, r8
 800dd4c:	46a2      	mov	sl, r4
 800dd4e:	fa09 f303 	lsl.w	r3, r9, r3
 800dd52:	4313      	orrs	r3, r2
 800dd54:	9304      	str	r3, [sp, #16]
 800dd56:	e7d2      	b.n	800dcfe <_vfiprintf_r+0xc6>
 800dd58:	9b03      	ldr	r3, [sp, #12]
 800dd5a:	1d19      	adds	r1, r3, #4
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	9103      	str	r1, [sp, #12]
 800dd62:	bfbb      	ittet	lt
 800dd64:	425b      	neglt	r3, r3
 800dd66:	f042 0202 	orrlt.w	r2, r2, #2
 800dd6a:	9307      	strge	r3, [sp, #28]
 800dd6c:	9307      	strlt	r3, [sp, #28]
 800dd6e:	bfb8      	it	lt
 800dd70:	9204      	strlt	r2, [sp, #16]
 800dd72:	7823      	ldrb	r3, [r4, #0]
 800dd74:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd76:	d10a      	bne.n	800dd8e <_vfiprintf_r+0x156>
 800dd78:	7863      	ldrb	r3, [r4, #1]
 800dd7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd7c:	d132      	bne.n	800dde4 <_vfiprintf_r+0x1ac>
 800dd7e:	9b03      	ldr	r3, [sp, #12]
 800dd80:	3402      	adds	r4, #2
 800dd82:	1d1a      	adds	r2, r3, #4
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd8a:	9203      	str	r2, [sp, #12]
 800dd8c:	9305      	str	r3, [sp, #20]
 800dd8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800de64 <_vfiprintf_r+0x22c>
 800dd92:	2203      	movs	r2, #3
 800dd94:	7821      	ldrb	r1, [r4, #0]
 800dd96:	4650      	mov	r0, sl
 800dd98:	f7fd fbd9 	bl	800b54e <memchr>
 800dd9c:	b138      	cbz	r0, 800ddae <_vfiprintf_r+0x176>
 800dd9e:	eba0 000a 	sub.w	r0, r0, sl
 800dda2:	2240      	movs	r2, #64	@ 0x40
 800dda4:	9b04      	ldr	r3, [sp, #16]
 800dda6:	3401      	adds	r4, #1
 800dda8:	4082      	lsls	r2, r0
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	9304      	str	r3, [sp, #16]
 800ddae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddb2:	2206      	movs	r2, #6
 800ddb4:	4828      	ldr	r0, [pc, #160]	@ (800de58 <_vfiprintf_r+0x220>)
 800ddb6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ddba:	f7fd fbc8 	bl	800b54e <memchr>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d03f      	beq.n	800de42 <_vfiprintf_r+0x20a>
 800ddc2:	4b26      	ldr	r3, [pc, #152]	@ (800de5c <_vfiprintf_r+0x224>)
 800ddc4:	bb1b      	cbnz	r3, 800de0e <_vfiprintf_r+0x1d6>
 800ddc6:	9b03      	ldr	r3, [sp, #12]
 800ddc8:	3307      	adds	r3, #7
 800ddca:	f023 0307 	bic.w	r3, r3, #7
 800ddce:	3308      	adds	r3, #8
 800ddd0:	9303      	str	r3, [sp, #12]
 800ddd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddd4:	443b      	add	r3, r7
 800ddd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddd8:	e76a      	b.n	800dcb0 <_vfiprintf_r+0x78>
 800ddda:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddde:	460c      	mov	r4, r1
 800dde0:	2001      	movs	r0, #1
 800dde2:	e7a8      	b.n	800dd36 <_vfiprintf_r+0xfe>
 800dde4:	2300      	movs	r3, #0
 800dde6:	3401      	adds	r4, #1
 800dde8:	f04f 0c0a 	mov.w	ip, #10
 800ddec:	4619      	mov	r1, r3
 800ddee:	9305      	str	r3, [sp, #20]
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddf6:	3a30      	subs	r2, #48	@ 0x30
 800ddf8:	2a09      	cmp	r2, #9
 800ddfa:	d903      	bls.n	800de04 <_vfiprintf_r+0x1cc>
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d0c6      	beq.n	800dd8e <_vfiprintf_r+0x156>
 800de00:	9105      	str	r1, [sp, #20]
 800de02:	e7c4      	b.n	800dd8e <_vfiprintf_r+0x156>
 800de04:	fb0c 2101 	mla	r1, ip, r1, r2
 800de08:	4604      	mov	r4, r0
 800de0a:	2301      	movs	r3, #1
 800de0c:	e7f0      	b.n	800ddf0 <_vfiprintf_r+0x1b8>
 800de0e:	ab03      	add	r3, sp, #12
 800de10:	462a      	mov	r2, r5
 800de12:	a904      	add	r1, sp, #16
 800de14:	4630      	mov	r0, r6
 800de16:	9300      	str	r3, [sp, #0]
 800de18:	4b11      	ldr	r3, [pc, #68]	@ (800de60 <_vfiprintf_r+0x228>)
 800de1a:	f7fc fc03 	bl	800a624 <_printf_float>
 800de1e:	4607      	mov	r7, r0
 800de20:	1c78      	adds	r0, r7, #1
 800de22:	d1d6      	bne.n	800ddd2 <_vfiprintf_r+0x19a>
 800de24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de26:	07d9      	lsls	r1, r3, #31
 800de28:	d405      	bmi.n	800de36 <_vfiprintf_r+0x1fe>
 800de2a:	89ab      	ldrh	r3, [r5, #12]
 800de2c:	059a      	lsls	r2, r3, #22
 800de2e:	d402      	bmi.n	800de36 <_vfiprintf_r+0x1fe>
 800de30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de32:	f7fd fb8b 	bl	800b54c <__retarget_lock_release_recursive>
 800de36:	89ab      	ldrh	r3, [r5, #12]
 800de38:	065b      	lsls	r3, r3, #25
 800de3a:	f53f af1f 	bmi.w	800dc7c <_vfiprintf_r+0x44>
 800de3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de40:	e71e      	b.n	800dc80 <_vfiprintf_r+0x48>
 800de42:	ab03      	add	r3, sp, #12
 800de44:	462a      	mov	r2, r5
 800de46:	a904      	add	r1, sp, #16
 800de48:	4630      	mov	r0, r6
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	4b04      	ldr	r3, [pc, #16]	@ (800de60 <_vfiprintf_r+0x228>)
 800de4e:	f7fc fe85 	bl	800ab5c <_printf_i>
 800de52:	e7e4      	b.n	800de1e <_vfiprintf_r+0x1e6>
 800de54:	0800f091 	.word	0x0800f091
 800de58:	0800f09b 	.word	0x0800f09b
 800de5c:	0800a625 	.word	0x0800a625
 800de60:	0800dc13 	.word	0x0800dc13
 800de64:	0800f097 	.word	0x0800f097

0800de68 <__sflush_r>:
 800de68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de70:	0716      	lsls	r6, r2, #28
 800de72:	4605      	mov	r5, r0
 800de74:	460c      	mov	r4, r1
 800de76:	d454      	bmi.n	800df22 <__sflush_r+0xba>
 800de78:	684b      	ldr	r3, [r1, #4]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	dc02      	bgt.n	800de84 <__sflush_r+0x1c>
 800de7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800de80:	2b00      	cmp	r3, #0
 800de82:	dd48      	ble.n	800df16 <__sflush_r+0xae>
 800de84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de86:	2e00      	cmp	r6, #0
 800de88:	d045      	beq.n	800df16 <__sflush_r+0xae>
 800de8a:	2300      	movs	r3, #0
 800de8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800de90:	682f      	ldr	r7, [r5, #0]
 800de92:	6a21      	ldr	r1, [r4, #32]
 800de94:	602b      	str	r3, [r5, #0]
 800de96:	d030      	beq.n	800defa <__sflush_r+0x92>
 800de98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800de9a:	89a3      	ldrh	r3, [r4, #12]
 800de9c:	0759      	lsls	r1, r3, #29
 800de9e:	d505      	bpl.n	800deac <__sflush_r+0x44>
 800dea0:	6863      	ldr	r3, [r4, #4]
 800dea2:	1ad2      	subs	r2, r2, r3
 800dea4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dea6:	b10b      	cbz	r3, 800deac <__sflush_r+0x44>
 800dea8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800deaa:	1ad2      	subs	r2, r2, r3
 800deac:	2300      	movs	r3, #0
 800deae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800deb0:	6a21      	ldr	r1, [r4, #32]
 800deb2:	4628      	mov	r0, r5
 800deb4:	47b0      	blx	r6
 800deb6:	1c43      	adds	r3, r0, #1
 800deb8:	89a3      	ldrh	r3, [r4, #12]
 800deba:	d106      	bne.n	800deca <__sflush_r+0x62>
 800debc:	6829      	ldr	r1, [r5, #0]
 800debe:	291d      	cmp	r1, #29
 800dec0:	d82b      	bhi.n	800df1a <__sflush_r+0xb2>
 800dec2:	4a2a      	ldr	r2, [pc, #168]	@ (800df6c <__sflush_r+0x104>)
 800dec4:	410a      	asrs	r2, r1
 800dec6:	07d6      	lsls	r6, r2, #31
 800dec8:	d427      	bmi.n	800df1a <__sflush_r+0xb2>
 800deca:	2200      	movs	r2, #0
 800decc:	04d9      	lsls	r1, r3, #19
 800dece:	6062      	str	r2, [r4, #4]
 800ded0:	6922      	ldr	r2, [r4, #16]
 800ded2:	6022      	str	r2, [r4, #0]
 800ded4:	d504      	bpl.n	800dee0 <__sflush_r+0x78>
 800ded6:	1c42      	adds	r2, r0, #1
 800ded8:	d101      	bne.n	800dede <__sflush_r+0x76>
 800deda:	682b      	ldr	r3, [r5, #0]
 800dedc:	b903      	cbnz	r3, 800dee0 <__sflush_r+0x78>
 800dede:	6560      	str	r0, [r4, #84]	@ 0x54
 800dee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dee2:	602f      	str	r7, [r5, #0]
 800dee4:	b1b9      	cbz	r1, 800df16 <__sflush_r+0xae>
 800dee6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800deea:	4299      	cmp	r1, r3
 800deec:	d002      	beq.n	800def4 <__sflush_r+0x8c>
 800deee:	4628      	mov	r0, r5
 800def0:	f7fe f996 	bl	800c220 <_free_r>
 800def4:	2300      	movs	r3, #0
 800def6:	6363      	str	r3, [r4, #52]	@ 0x34
 800def8:	e00d      	b.n	800df16 <__sflush_r+0xae>
 800defa:	2301      	movs	r3, #1
 800defc:	4628      	mov	r0, r5
 800defe:	47b0      	blx	r6
 800df00:	4602      	mov	r2, r0
 800df02:	1c50      	adds	r0, r2, #1
 800df04:	d1c9      	bne.n	800de9a <__sflush_r+0x32>
 800df06:	682b      	ldr	r3, [r5, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d0c6      	beq.n	800de9a <__sflush_r+0x32>
 800df0c:	2b1d      	cmp	r3, #29
 800df0e:	d001      	beq.n	800df14 <__sflush_r+0xac>
 800df10:	2b16      	cmp	r3, #22
 800df12:	d11d      	bne.n	800df50 <__sflush_r+0xe8>
 800df14:	602f      	str	r7, [r5, #0]
 800df16:	2000      	movs	r0, #0
 800df18:	e021      	b.n	800df5e <__sflush_r+0xf6>
 800df1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df1e:	b21b      	sxth	r3, r3
 800df20:	e01a      	b.n	800df58 <__sflush_r+0xf0>
 800df22:	690f      	ldr	r7, [r1, #16]
 800df24:	2f00      	cmp	r7, #0
 800df26:	d0f6      	beq.n	800df16 <__sflush_r+0xae>
 800df28:	0793      	lsls	r3, r2, #30
 800df2a:	680e      	ldr	r6, [r1, #0]
 800df2c:	600f      	str	r7, [r1, #0]
 800df2e:	bf0c      	ite	eq
 800df30:	694b      	ldreq	r3, [r1, #20]
 800df32:	2300      	movne	r3, #0
 800df34:	eba6 0807 	sub.w	r8, r6, r7
 800df38:	608b      	str	r3, [r1, #8]
 800df3a:	f1b8 0f00 	cmp.w	r8, #0
 800df3e:	ddea      	ble.n	800df16 <__sflush_r+0xae>
 800df40:	4643      	mov	r3, r8
 800df42:	463a      	mov	r2, r7
 800df44:	6a21      	ldr	r1, [r4, #32]
 800df46:	4628      	mov	r0, r5
 800df48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800df4a:	47b0      	blx	r6
 800df4c:	2800      	cmp	r0, #0
 800df4e:	dc08      	bgt.n	800df62 <__sflush_r+0xfa>
 800df50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df58:	f04f 30ff 	mov.w	r0, #4294967295
 800df5c:	81a3      	strh	r3, [r4, #12]
 800df5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df62:	4407      	add	r7, r0
 800df64:	eba8 0800 	sub.w	r8, r8, r0
 800df68:	e7e7      	b.n	800df3a <__sflush_r+0xd2>
 800df6a:	bf00      	nop
 800df6c:	dfbffffe 	.word	0xdfbffffe

0800df70 <_fflush_r>:
 800df70:	b538      	push	{r3, r4, r5, lr}
 800df72:	690b      	ldr	r3, [r1, #16]
 800df74:	4605      	mov	r5, r0
 800df76:	460c      	mov	r4, r1
 800df78:	b913      	cbnz	r3, 800df80 <_fflush_r+0x10>
 800df7a:	2500      	movs	r5, #0
 800df7c:	4628      	mov	r0, r5
 800df7e:	bd38      	pop	{r3, r4, r5, pc}
 800df80:	b118      	cbz	r0, 800df8a <_fflush_r+0x1a>
 800df82:	6a03      	ldr	r3, [r0, #32]
 800df84:	b90b      	cbnz	r3, 800df8a <_fflush_r+0x1a>
 800df86:	f7fd f9a7 	bl	800b2d8 <__sinit>
 800df8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d0f3      	beq.n	800df7a <_fflush_r+0xa>
 800df92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800df94:	07d0      	lsls	r0, r2, #31
 800df96:	d404      	bmi.n	800dfa2 <_fflush_r+0x32>
 800df98:	0599      	lsls	r1, r3, #22
 800df9a:	d402      	bmi.n	800dfa2 <_fflush_r+0x32>
 800df9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df9e:	f7fd fad4 	bl	800b54a <__retarget_lock_acquire_recursive>
 800dfa2:	4628      	mov	r0, r5
 800dfa4:	4621      	mov	r1, r4
 800dfa6:	f7ff ff5f 	bl	800de68 <__sflush_r>
 800dfaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dfac:	4605      	mov	r5, r0
 800dfae:	07da      	lsls	r2, r3, #31
 800dfb0:	d4e4      	bmi.n	800df7c <_fflush_r+0xc>
 800dfb2:	89a3      	ldrh	r3, [r4, #12]
 800dfb4:	059b      	lsls	r3, r3, #22
 800dfb6:	d4e1      	bmi.n	800df7c <_fflush_r+0xc>
 800dfb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfba:	f7fd fac7 	bl	800b54c <__retarget_lock_release_recursive>
 800dfbe:	e7dd      	b.n	800df7c <_fflush_r+0xc>

0800dfc0 <__swbuf_r>:
 800dfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfc2:	460e      	mov	r6, r1
 800dfc4:	4614      	mov	r4, r2
 800dfc6:	4605      	mov	r5, r0
 800dfc8:	b118      	cbz	r0, 800dfd2 <__swbuf_r+0x12>
 800dfca:	6a03      	ldr	r3, [r0, #32]
 800dfcc:	b90b      	cbnz	r3, 800dfd2 <__swbuf_r+0x12>
 800dfce:	f7fd f983 	bl	800b2d8 <__sinit>
 800dfd2:	69a3      	ldr	r3, [r4, #24]
 800dfd4:	60a3      	str	r3, [r4, #8]
 800dfd6:	89a3      	ldrh	r3, [r4, #12]
 800dfd8:	071a      	lsls	r2, r3, #28
 800dfda:	d501      	bpl.n	800dfe0 <__swbuf_r+0x20>
 800dfdc:	6923      	ldr	r3, [r4, #16]
 800dfde:	b943      	cbnz	r3, 800dff2 <__swbuf_r+0x32>
 800dfe0:	4621      	mov	r1, r4
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	f000 f82a 	bl	800e03c <__swsetup_r>
 800dfe8:	b118      	cbz	r0, 800dff2 <__swbuf_r+0x32>
 800dfea:	f04f 37ff 	mov.w	r7, #4294967295
 800dfee:	4638      	mov	r0, r7
 800dff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dff2:	6823      	ldr	r3, [r4, #0]
 800dff4:	b2f6      	uxtb	r6, r6
 800dff6:	6922      	ldr	r2, [r4, #16]
 800dff8:	4637      	mov	r7, r6
 800dffa:	1a98      	subs	r0, r3, r2
 800dffc:	6963      	ldr	r3, [r4, #20]
 800dffe:	4283      	cmp	r3, r0
 800e000:	dc05      	bgt.n	800e00e <__swbuf_r+0x4e>
 800e002:	4621      	mov	r1, r4
 800e004:	4628      	mov	r0, r5
 800e006:	f7ff ffb3 	bl	800df70 <_fflush_r>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	d1ed      	bne.n	800dfea <__swbuf_r+0x2a>
 800e00e:	68a3      	ldr	r3, [r4, #8]
 800e010:	3b01      	subs	r3, #1
 800e012:	60a3      	str	r3, [r4, #8]
 800e014:	6823      	ldr	r3, [r4, #0]
 800e016:	1c5a      	adds	r2, r3, #1
 800e018:	6022      	str	r2, [r4, #0]
 800e01a:	701e      	strb	r6, [r3, #0]
 800e01c:	1c43      	adds	r3, r0, #1
 800e01e:	6962      	ldr	r2, [r4, #20]
 800e020:	429a      	cmp	r2, r3
 800e022:	d004      	beq.n	800e02e <__swbuf_r+0x6e>
 800e024:	89a3      	ldrh	r3, [r4, #12]
 800e026:	07db      	lsls	r3, r3, #31
 800e028:	d5e1      	bpl.n	800dfee <__swbuf_r+0x2e>
 800e02a:	2e0a      	cmp	r6, #10
 800e02c:	d1df      	bne.n	800dfee <__swbuf_r+0x2e>
 800e02e:	4621      	mov	r1, r4
 800e030:	4628      	mov	r0, r5
 800e032:	f7ff ff9d 	bl	800df70 <_fflush_r>
 800e036:	2800      	cmp	r0, #0
 800e038:	d0d9      	beq.n	800dfee <__swbuf_r+0x2e>
 800e03a:	e7d6      	b.n	800dfea <__swbuf_r+0x2a>

0800e03c <__swsetup_r>:
 800e03c:	b538      	push	{r3, r4, r5, lr}
 800e03e:	4b29      	ldr	r3, [pc, #164]	@ (800e0e4 <__swsetup_r+0xa8>)
 800e040:	4605      	mov	r5, r0
 800e042:	460c      	mov	r4, r1
 800e044:	6818      	ldr	r0, [r3, #0]
 800e046:	b118      	cbz	r0, 800e050 <__swsetup_r+0x14>
 800e048:	6a03      	ldr	r3, [r0, #32]
 800e04a:	b90b      	cbnz	r3, 800e050 <__swsetup_r+0x14>
 800e04c:	f7fd f944 	bl	800b2d8 <__sinit>
 800e050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e054:	0719      	lsls	r1, r3, #28
 800e056:	d422      	bmi.n	800e09e <__swsetup_r+0x62>
 800e058:	06da      	lsls	r2, r3, #27
 800e05a:	d407      	bmi.n	800e06c <__swsetup_r+0x30>
 800e05c:	2209      	movs	r2, #9
 800e05e:	602a      	str	r2, [r5, #0]
 800e060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e064:	f04f 30ff 	mov.w	r0, #4294967295
 800e068:	81a3      	strh	r3, [r4, #12]
 800e06a:	e033      	b.n	800e0d4 <__swsetup_r+0x98>
 800e06c:	0758      	lsls	r0, r3, #29
 800e06e:	d512      	bpl.n	800e096 <__swsetup_r+0x5a>
 800e070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e072:	b141      	cbz	r1, 800e086 <__swsetup_r+0x4a>
 800e074:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e078:	4299      	cmp	r1, r3
 800e07a:	d002      	beq.n	800e082 <__swsetup_r+0x46>
 800e07c:	4628      	mov	r0, r5
 800e07e:	f7fe f8cf 	bl	800c220 <_free_r>
 800e082:	2300      	movs	r3, #0
 800e084:	6363      	str	r3, [r4, #52]	@ 0x34
 800e086:	89a3      	ldrh	r3, [r4, #12]
 800e088:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e08c:	81a3      	strh	r3, [r4, #12]
 800e08e:	2300      	movs	r3, #0
 800e090:	6063      	str	r3, [r4, #4]
 800e092:	6923      	ldr	r3, [r4, #16]
 800e094:	6023      	str	r3, [r4, #0]
 800e096:	89a3      	ldrh	r3, [r4, #12]
 800e098:	f043 0308 	orr.w	r3, r3, #8
 800e09c:	81a3      	strh	r3, [r4, #12]
 800e09e:	6923      	ldr	r3, [r4, #16]
 800e0a0:	b94b      	cbnz	r3, 800e0b6 <__swsetup_r+0x7a>
 800e0a2:	89a3      	ldrh	r3, [r4, #12]
 800e0a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e0a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0ac:	d003      	beq.n	800e0b6 <__swsetup_r+0x7a>
 800e0ae:	4621      	mov	r1, r4
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	f000 fc48 	bl	800e946 <__smakebuf_r>
 800e0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ba:	f013 0201 	ands.w	r2, r3, #1
 800e0be:	d00a      	beq.n	800e0d6 <__swsetup_r+0x9a>
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	60a2      	str	r2, [r4, #8]
 800e0c4:	6962      	ldr	r2, [r4, #20]
 800e0c6:	4252      	negs	r2, r2
 800e0c8:	61a2      	str	r2, [r4, #24]
 800e0ca:	6922      	ldr	r2, [r4, #16]
 800e0cc:	b942      	cbnz	r2, 800e0e0 <__swsetup_r+0xa4>
 800e0ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e0d2:	d1c5      	bne.n	800e060 <__swsetup_r+0x24>
 800e0d4:	bd38      	pop	{r3, r4, r5, pc}
 800e0d6:	0799      	lsls	r1, r3, #30
 800e0d8:	bf58      	it	pl
 800e0da:	6962      	ldrpl	r2, [r4, #20]
 800e0dc:	60a2      	str	r2, [r4, #8]
 800e0de:	e7f4      	b.n	800e0ca <__swsetup_r+0x8e>
 800e0e0:	2000      	movs	r0, #0
 800e0e2:	e7f7      	b.n	800e0d4 <__swsetup_r+0x98>
 800e0e4:	2000005c 	.word	0x2000005c

0800e0e8 <memmove>:
 800e0e8:	4288      	cmp	r0, r1
 800e0ea:	b510      	push	{r4, lr}
 800e0ec:	eb01 0402 	add.w	r4, r1, r2
 800e0f0:	d902      	bls.n	800e0f8 <memmove+0x10>
 800e0f2:	4284      	cmp	r4, r0
 800e0f4:	4623      	mov	r3, r4
 800e0f6:	d807      	bhi.n	800e108 <memmove+0x20>
 800e0f8:	1e43      	subs	r3, r0, #1
 800e0fa:	42a1      	cmp	r1, r4
 800e0fc:	d008      	beq.n	800e110 <memmove+0x28>
 800e0fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e102:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e106:	e7f8      	b.n	800e0fa <memmove+0x12>
 800e108:	4402      	add	r2, r0
 800e10a:	4601      	mov	r1, r0
 800e10c:	428a      	cmp	r2, r1
 800e10e:	d100      	bne.n	800e112 <memmove+0x2a>
 800e110:	bd10      	pop	{r4, pc}
 800e112:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e116:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e11a:	e7f7      	b.n	800e10c <memmove+0x24>

0800e11c <strncmp>:
 800e11c:	b510      	push	{r4, lr}
 800e11e:	b16a      	cbz	r2, 800e13c <strncmp+0x20>
 800e120:	3901      	subs	r1, #1
 800e122:	1884      	adds	r4, r0, r2
 800e124:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e128:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d103      	bne.n	800e138 <strncmp+0x1c>
 800e130:	42a0      	cmp	r0, r4
 800e132:	d001      	beq.n	800e138 <strncmp+0x1c>
 800e134:	2a00      	cmp	r2, #0
 800e136:	d1f5      	bne.n	800e124 <strncmp+0x8>
 800e138:	1ad0      	subs	r0, r2, r3
 800e13a:	bd10      	pop	{r4, pc}
 800e13c:	4610      	mov	r0, r2
 800e13e:	e7fc      	b.n	800e13a <strncmp+0x1e>

0800e140 <memcpy>:
 800e140:	440a      	add	r2, r1
 800e142:	1e43      	subs	r3, r0, #1
 800e144:	4291      	cmp	r1, r2
 800e146:	d100      	bne.n	800e14a <memcpy+0xa>
 800e148:	4770      	bx	lr
 800e14a:	b510      	push	{r4, lr}
 800e14c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e150:	4291      	cmp	r1, r2
 800e152:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e156:	d1f9      	bne.n	800e14c <memcpy+0xc>
 800e158:	bd10      	pop	{r4, pc}
 800e15a:	0000      	movs	r0, r0
 800e15c:	0000      	movs	r0, r0
	...

0800e160 <nan>:
 800e160:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e168 <nan+0x8>
 800e164:	4770      	bx	lr
 800e166:	bf00      	nop
 800e168:	00000000 	.word	0x00000000
 800e16c:	7ff80000 	.word	0x7ff80000

0800e170 <__assert_func>:
 800e170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e172:	4614      	mov	r4, r2
 800e174:	461a      	mov	r2, r3
 800e176:	4b09      	ldr	r3, [pc, #36]	@ (800e19c <__assert_func+0x2c>)
 800e178:	4605      	mov	r5, r0
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	68d8      	ldr	r0, [r3, #12]
 800e17e:	b954      	cbnz	r4, 800e196 <__assert_func+0x26>
 800e180:	4b07      	ldr	r3, [pc, #28]	@ (800e1a0 <__assert_func+0x30>)
 800e182:	461c      	mov	r4, r3
 800e184:	9100      	str	r1, [sp, #0]
 800e186:	4907      	ldr	r1, [pc, #28]	@ (800e1a4 <__assert_func+0x34>)
 800e188:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e18c:	462b      	mov	r3, r5
 800e18e:	f000 fba3 	bl	800e8d8 <fiprintf>
 800e192:	f000 fc37 	bl	800ea04 <abort>
 800e196:	4b04      	ldr	r3, [pc, #16]	@ (800e1a8 <__assert_func+0x38>)
 800e198:	e7f4      	b.n	800e184 <__assert_func+0x14>
 800e19a:	bf00      	nop
 800e19c:	2000005c 	.word	0x2000005c
 800e1a0:	0800f0e5 	.word	0x0800f0e5
 800e1a4:	0800f0b7 	.word	0x0800f0b7
 800e1a8:	0800f0aa 	.word	0x0800f0aa

0800e1ac <_calloc_r>:
 800e1ac:	b570      	push	{r4, r5, r6, lr}
 800e1ae:	fba1 5402 	umull	r5, r4, r1, r2
 800e1b2:	b93c      	cbnz	r4, 800e1c4 <_calloc_r+0x18>
 800e1b4:	4629      	mov	r1, r5
 800e1b6:	f7fc f90b 	bl	800a3d0 <_malloc_r>
 800e1ba:	4606      	mov	r6, r0
 800e1bc:	b928      	cbnz	r0, 800e1ca <_calloc_r+0x1e>
 800e1be:	2600      	movs	r6, #0
 800e1c0:	4630      	mov	r0, r6
 800e1c2:	bd70      	pop	{r4, r5, r6, pc}
 800e1c4:	220c      	movs	r2, #12
 800e1c6:	6002      	str	r2, [r0, #0]
 800e1c8:	e7f9      	b.n	800e1be <_calloc_r+0x12>
 800e1ca:	462a      	mov	r2, r5
 800e1cc:	4621      	mov	r1, r4
 800e1ce:	f7fd f92e 	bl	800b42e <memset>
 800e1d2:	e7f5      	b.n	800e1c0 <_calloc_r+0x14>

0800e1d4 <rshift>:
 800e1d4:	6903      	ldr	r3, [r0, #16]
 800e1d6:	114a      	asrs	r2, r1, #5
 800e1d8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e1dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1e0:	f100 0414 	add.w	r4, r0, #20
 800e1e4:	dd45      	ble.n	800e272 <rshift+0x9e>
 800e1e6:	f011 011f 	ands.w	r1, r1, #31
 800e1ea:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e1ee:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e1f2:	d10c      	bne.n	800e20e <rshift+0x3a>
 800e1f4:	f100 0710 	add.w	r7, r0, #16
 800e1f8:	4629      	mov	r1, r5
 800e1fa:	42b1      	cmp	r1, r6
 800e1fc:	d334      	bcc.n	800e268 <rshift+0x94>
 800e1fe:	1a9b      	subs	r3, r3, r2
 800e200:	1eea      	subs	r2, r5, #3
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	4296      	cmp	r6, r2
 800e206:	bf38      	it	cc
 800e208:	2300      	movcc	r3, #0
 800e20a:	4423      	add	r3, r4
 800e20c:	e015      	b.n	800e23a <rshift+0x66>
 800e20e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e212:	f1c1 0820 	rsb	r8, r1, #32
 800e216:	f105 0e04 	add.w	lr, r5, #4
 800e21a:	46a1      	mov	r9, r4
 800e21c:	40cf      	lsrs	r7, r1
 800e21e:	4576      	cmp	r6, lr
 800e220:	46f4      	mov	ip, lr
 800e222:	d815      	bhi.n	800e250 <rshift+0x7c>
 800e224:	1a9a      	subs	r2, r3, r2
 800e226:	3501      	adds	r5, #1
 800e228:	0092      	lsls	r2, r2, #2
 800e22a:	3a04      	subs	r2, #4
 800e22c:	42ae      	cmp	r6, r5
 800e22e:	bf38      	it	cc
 800e230:	2200      	movcc	r2, #0
 800e232:	18a3      	adds	r3, r4, r2
 800e234:	50a7      	str	r7, [r4, r2]
 800e236:	b107      	cbz	r7, 800e23a <rshift+0x66>
 800e238:	3304      	adds	r3, #4
 800e23a:	1b1a      	subs	r2, r3, r4
 800e23c:	42a3      	cmp	r3, r4
 800e23e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e242:	bf08      	it	eq
 800e244:	2300      	moveq	r3, #0
 800e246:	6102      	str	r2, [r0, #16]
 800e248:	bf08      	it	eq
 800e24a:	6143      	streq	r3, [r0, #20]
 800e24c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e250:	f8dc c000 	ldr.w	ip, [ip]
 800e254:	fa0c fc08 	lsl.w	ip, ip, r8
 800e258:	ea4c 0707 	orr.w	r7, ip, r7
 800e25c:	f849 7b04 	str.w	r7, [r9], #4
 800e260:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e264:	40cf      	lsrs	r7, r1
 800e266:	e7da      	b.n	800e21e <rshift+0x4a>
 800e268:	f851 cb04 	ldr.w	ip, [r1], #4
 800e26c:	f847 cf04 	str.w	ip, [r7, #4]!
 800e270:	e7c3      	b.n	800e1fa <rshift+0x26>
 800e272:	4623      	mov	r3, r4
 800e274:	e7e1      	b.n	800e23a <rshift+0x66>

0800e276 <__hexdig_fun>:
 800e276:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e27a:	2b09      	cmp	r3, #9
 800e27c:	d802      	bhi.n	800e284 <__hexdig_fun+0xe>
 800e27e:	3820      	subs	r0, #32
 800e280:	b2c0      	uxtb	r0, r0
 800e282:	4770      	bx	lr
 800e284:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e288:	2b05      	cmp	r3, #5
 800e28a:	d801      	bhi.n	800e290 <__hexdig_fun+0x1a>
 800e28c:	3847      	subs	r0, #71	@ 0x47
 800e28e:	e7f7      	b.n	800e280 <__hexdig_fun+0xa>
 800e290:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e294:	2b05      	cmp	r3, #5
 800e296:	d801      	bhi.n	800e29c <__hexdig_fun+0x26>
 800e298:	3827      	subs	r0, #39	@ 0x27
 800e29a:	e7f1      	b.n	800e280 <__hexdig_fun+0xa>
 800e29c:	2000      	movs	r0, #0
 800e29e:	4770      	bx	lr

0800e2a0 <__gethex>:
 800e2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a4:	b085      	sub	sp, #20
 800e2a6:	468a      	mov	sl, r1
 800e2a8:	4690      	mov	r8, r2
 800e2aa:	9302      	str	r3, [sp, #8]
 800e2ac:	680b      	ldr	r3, [r1, #0]
 800e2ae:	9001      	str	r0, [sp, #4]
 800e2b0:	1c9c      	adds	r4, r3, #2
 800e2b2:	46a1      	mov	r9, r4
 800e2b4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e2b8:	2830      	cmp	r0, #48	@ 0x30
 800e2ba:	d0fa      	beq.n	800e2b2 <__gethex+0x12>
 800e2bc:	eba9 0303 	sub.w	r3, r9, r3
 800e2c0:	f1a3 0b02 	sub.w	fp, r3, #2
 800e2c4:	f7ff ffd7 	bl	800e276 <__hexdig_fun>
 800e2c8:	4605      	mov	r5, r0
 800e2ca:	2800      	cmp	r0, #0
 800e2cc:	d166      	bne.n	800e39c <__gethex+0xfc>
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	499e      	ldr	r1, [pc, #632]	@ (800e54c <__gethex+0x2ac>)
 800e2d2:	4648      	mov	r0, r9
 800e2d4:	f7ff ff22 	bl	800e11c <strncmp>
 800e2d8:	4607      	mov	r7, r0
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	d165      	bne.n	800e3aa <__gethex+0x10a>
 800e2de:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e2e2:	4626      	mov	r6, r4
 800e2e4:	f7ff ffc7 	bl	800e276 <__hexdig_fun>
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	d060      	beq.n	800e3ae <__gethex+0x10e>
 800e2ec:	4623      	mov	r3, r4
 800e2ee:	7818      	ldrb	r0, [r3, #0]
 800e2f0:	4699      	mov	r9, r3
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	2830      	cmp	r0, #48	@ 0x30
 800e2f6:	d0fa      	beq.n	800e2ee <__gethex+0x4e>
 800e2f8:	f7ff ffbd 	bl	800e276 <__hexdig_fun>
 800e2fc:	fab0 f580 	clz	r5, r0
 800e300:	f04f 0b01 	mov.w	fp, #1
 800e304:	096d      	lsrs	r5, r5, #5
 800e306:	464a      	mov	r2, r9
 800e308:	4616      	mov	r6, r2
 800e30a:	3201      	adds	r2, #1
 800e30c:	7830      	ldrb	r0, [r6, #0]
 800e30e:	f7ff ffb2 	bl	800e276 <__hexdig_fun>
 800e312:	2800      	cmp	r0, #0
 800e314:	d1f8      	bne.n	800e308 <__gethex+0x68>
 800e316:	2201      	movs	r2, #1
 800e318:	498c      	ldr	r1, [pc, #560]	@ (800e54c <__gethex+0x2ac>)
 800e31a:	4630      	mov	r0, r6
 800e31c:	f7ff fefe 	bl	800e11c <strncmp>
 800e320:	2800      	cmp	r0, #0
 800e322:	d13e      	bne.n	800e3a2 <__gethex+0x102>
 800e324:	b944      	cbnz	r4, 800e338 <__gethex+0x98>
 800e326:	1c74      	adds	r4, r6, #1
 800e328:	4622      	mov	r2, r4
 800e32a:	4616      	mov	r6, r2
 800e32c:	3201      	adds	r2, #1
 800e32e:	7830      	ldrb	r0, [r6, #0]
 800e330:	f7ff ffa1 	bl	800e276 <__hexdig_fun>
 800e334:	2800      	cmp	r0, #0
 800e336:	d1f8      	bne.n	800e32a <__gethex+0x8a>
 800e338:	1ba4      	subs	r4, r4, r6
 800e33a:	00a7      	lsls	r7, r4, #2
 800e33c:	7833      	ldrb	r3, [r6, #0]
 800e33e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e342:	2b50      	cmp	r3, #80	@ 0x50
 800e344:	d13d      	bne.n	800e3c2 <__gethex+0x122>
 800e346:	7873      	ldrb	r3, [r6, #1]
 800e348:	2b2b      	cmp	r3, #43	@ 0x2b
 800e34a:	d032      	beq.n	800e3b2 <__gethex+0x112>
 800e34c:	2b2d      	cmp	r3, #45	@ 0x2d
 800e34e:	d033      	beq.n	800e3b8 <__gethex+0x118>
 800e350:	1c71      	adds	r1, r6, #1
 800e352:	2400      	movs	r4, #0
 800e354:	7808      	ldrb	r0, [r1, #0]
 800e356:	f7ff ff8e 	bl	800e276 <__hexdig_fun>
 800e35a:	1e43      	subs	r3, r0, #1
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	2b18      	cmp	r3, #24
 800e360:	d82f      	bhi.n	800e3c2 <__gethex+0x122>
 800e362:	f1a0 0210 	sub.w	r2, r0, #16
 800e366:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e36a:	f7ff ff84 	bl	800e276 <__hexdig_fun>
 800e36e:	f100 3cff 	add.w	ip, r0, #4294967295
 800e372:	230a      	movs	r3, #10
 800e374:	fa5f fc8c 	uxtb.w	ip, ip
 800e378:	f1bc 0f18 	cmp.w	ip, #24
 800e37c:	d91e      	bls.n	800e3bc <__gethex+0x11c>
 800e37e:	b104      	cbz	r4, 800e382 <__gethex+0xe2>
 800e380:	4252      	negs	r2, r2
 800e382:	4417      	add	r7, r2
 800e384:	f8ca 1000 	str.w	r1, [sl]
 800e388:	b1ed      	cbz	r5, 800e3c6 <__gethex+0x126>
 800e38a:	f1bb 0f00 	cmp.w	fp, #0
 800e38e:	bf0c      	ite	eq
 800e390:	2506      	moveq	r5, #6
 800e392:	2500      	movne	r5, #0
 800e394:	4628      	mov	r0, r5
 800e396:	b005      	add	sp, #20
 800e398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e39c:	2500      	movs	r5, #0
 800e39e:	462c      	mov	r4, r5
 800e3a0:	e7b1      	b.n	800e306 <__gethex+0x66>
 800e3a2:	2c00      	cmp	r4, #0
 800e3a4:	d1c8      	bne.n	800e338 <__gethex+0x98>
 800e3a6:	4627      	mov	r7, r4
 800e3a8:	e7c8      	b.n	800e33c <__gethex+0x9c>
 800e3aa:	464e      	mov	r6, r9
 800e3ac:	462f      	mov	r7, r5
 800e3ae:	2501      	movs	r5, #1
 800e3b0:	e7c4      	b.n	800e33c <__gethex+0x9c>
 800e3b2:	2400      	movs	r4, #0
 800e3b4:	1cb1      	adds	r1, r6, #2
 800e3b6:	e7cd      	b.n	800e354 <__gethex+0xb4>
 800e3b8:	2401      	movs	r4, #1
 800e3ba:	e7fb      	b.n	800e3b4 <__gethex+0x114>
 800e3bc:	fb03 0002 	mla	r0, r3, r2, r0
 800e3c0:	e7cf      	b.n	800e362 <__gethex+0xc2>
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	e7de      	b.n	800e384 <__gethex+0xe4>
 800e3c6:	eba6 0309 	sub.w	r3, r6, r9
 800e3ca:	4629      	mov	r1, r5
 800e3cc:	3b01      	subs	r3, #1
 800e3ce:	2b07      	cmp	r3, #7
 800e3d0:	dc0a      	bgt.n	800e3e8 <__gethex+0x148>
 800e3d2:	9801      	ldr	r0, [sp, #4]
 800e3d4:	f7fd ff6e 	bl	800c2b4 <_Balloc>
 800e3d8:	4604      	mov	r4, r0
 800e3da:	b940      	cbnz	r0, 800e3ee <__gethex+0x14e>
 800e3dc:	4b5c      	ldr	r3, [pc, #368]	@ (800e550 <__gethex+0x2b0>)
 800e3de:	4602      	mov	r2, r0
 800e3e0:	21e4      	movs	r1, #228	@ 0xe4
 800e3e2:	485c      	ldr	r0, [pc, #368]	@ (800e554 <__gethex+0x2b4>)
 800e3e4:	f7ff fec4 	bl	800e170 <__assert_func>
 800e3e8:	3101      	adds	r1, #1
 800e3ea:	105b      	asrs	r3, r3, #1
 800e3ec:	e7ef      	b.n	800e3ce <__gethex+0x12e>
 800e3ee:	f100 0a14 	add.w	sl, r0, #20
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	4655      	mov	r5, sl
 800e3f6:	469b      	mov	fp, r3
 800e3f8:	45b1      	cmp	r9, r6
 800e3fa:	d337      	bcc.n	800e46c <__gethex+0x1cc>
 800e3fc:	f845 bb04 	str.w	fp, [r5], #4
 800e400:	eba5 050a 	sub.w	r5, r5, sl
 800e404:	4658      	mov	r0, fp
 800e406:	10ad      	asrs	r5, r5, #2
 800e408:	6125      	str	r5, [r4, #16]
 800e40a:	016d      	lsls	r5, r5, #5
 800e40c:	f7fe f846 	bl	800c49c <__hi0bits>
 800e410:	f8d8 6000 	ldr.w	r6, [r8]
 800e414:	1a2d      	subs	r5, r5, r0
 800e416:	42b5      	cmp	r5, r6
 800e418:	dd54      	ble.n	800e4c4 <__gethex+0x224>
 800e41a:	1bad      	subs	r5, r5, r6
 800e41c:	4620      	mov	r0, r4
 800e41e:	4629      	mov	r1, r5
 800e420:	f7fe fbe3 	bl	800cbea <__any_on>
 800e424:	4681      	mov	r9, r0
 800e426:	b178      	cbz	r0, 800e448 <__gethex+0x1a8>
 800e428:	1e6b      	subs	r3, r5, #1
 800e42a:	f04f 0901 	mov.w	r9, #1
 800e42e:	1159      	asrs	r1, r3, #5
 800e430:	f003 021f 	and.w	r2, r3, #31
 800e434:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e438:	fa09 f202 	lsl.w	r2, r9, r2
 800e43c:	420a      	tst	r2, r1
 800e43e:	d003      	beq.n	800e448 <__gethex+0x1a8>
 800e440:	454b      	cmp	r3, r9
 800e442:	dc36      	bgt.n	800e4b2 <__gethex+0x212>
 800e444:	f04f 0902 	mov.w	r9, #2
 800e448:	442f      	add	r7, r5
 800e44a:	4629      	mov	r1, r5
 800e44c:	4620      	mov	r0, r4
 800e44e:	f7ff fec1 	bl	800e1d4 <rshift>
 800e452:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e456:	42bb      	cmp	r3, r7
 800e458:	da42      	bge.n	800e4e0 <__gethex+0x240>
 800e45a:	4621      	mov	r1, r4
 800e45c:	9801      	ldr	r0, [sp, #4]
 800e45e:	f7fd ff69 	bl	800c334 <_Bfree>
 800e462:	2300      	movs	r3, #0
 800e464:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e466:	25a3      	movs	r5, #163	@ 0xa3
 800e468:	6013      	str	r3, [r2, #0]
 800e46a:	e793      	b.n	800e394 <__gethex+0xf4>
 800e46c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e470:	2a2e      	cmp	r2, #46	@ 0x2e
 800e472:	d012      	beq.n	800e49a <__gethex+0x1fa>
 800e474:	2b20      	cmp	r3, #32
 800e476:	d104      	bne.n	800e482 <__gethex+0x1e2>
 800e478:	f845 bb04 	str.w	fp, [r5], #4
 800e47c:	f04f 0b00 	mov.w	fp, #0
 800e480:	465b      	mov	r3, fp
 800e482:	7830      	ldrb	r0, [r6, #0]
 800e484:	9303      	str	r3, [sp, #12]
 800e486:	f7ff fef6 	bl	800e276 <__hexdig_fun>
 800e48a:	9b03      	ldr	r3, [sp, #12]
 800e48c:	f000 000f 	and.w	r0, r0, #15
 800e490:	4098      	lsls	r0, r3
 800e492:	3304      	adds	r3, #4
 800e494:	ea4b 0b00 	orr.w	fp, fp, r0
 800e498:	e7ae      	b.n	800e3f8 <__gethex+0x158>
 800e49a:	45b1      	cmp	r9, r6
 800e49c:	d8ea      	bhi.n	800e474 <__gethex+0x1d4>
 800e49e:	2201      	movs	r2, #1
 800e4a0:	492a      	ldr	r1, [pc, #168]	@ (800e54c <__gethex+0x2ac>)
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	9303      	str	r3, [sp, #12]
 800e4a6:	f7ff fe39 	bl	800e11c <strncmp>
 800e4aa:	9b03      	ldr	r3, [sp, #12]
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	d1e1      	bne.n	800e474 <__gethex+0x1d4>
 800e4b0:	e7a2      	b.n	800e3f8 <__gethex+0x158>
 800e4b2:	1ea9      	subs	r1, r5, #2
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	f7fe fb98 	bl	800cbea <__any_on>
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	d0c2      	beq.n	800e444 <__gethex+0x1a4>
 800e4be:	f04f 0903 	mov.w	r9, #3
 800e4c2:	e7c1      	b.n	800e448 <__gethex+0x1a8>
 800e4c4:	da09      	bge.n	800e4da <__gethex+0x23a>
 800e4c6:	1b75      	subs	r5, r6, r5
 800e4c8:	4621      	mov	r1, r4
 800e4ca:	9801      	ldr	r0, [sp, #4]
 800e4cc:	462a      	mov	r2, r5
 800e4ce:	1b7f      	subs	r7, r7, r5
 800e4d0:	f7fe f94a 	bl	800c768 <__lshift>
 800e4d4:	4604      	mov	r4, r0
 800e4d6:	f100 0a14 	add.w	sl, r0, #20
 800e4da:	f04f 0900 	mov.w	r9, #0
 800e4de:	e7b8      	b.n	800e452 <__gethex+0x1b2>
 800e4e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e4e4:	42bd      	cmp	r5, r7
 800e4e6:	dd6f      	ble.n	800e5c8 <__gethex+0x328>
 800e4e8:	1bed      	subs	r5, r5, r7
 800e4ea:	42ae      	cmp	r6, r5
 800e4ec:	dc34      	bgt.n	800e558 <__gethex+0x2b8>
 800e4ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e4f2:	2b02      	cmp	r3, #2
 800e4f4:	d022      	beq.n	800e53c <__gethex+0x29c>
 800e4f6:	2b03      	cmp	r3, #3
 800e4f8:	d024      	beq.n	800e544 <__gethex+0x2a4>
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d115      	bne.n	800e52a <__gethex+0x28a>
 800e4fe:	42ae      	cmp	r6, r5
 800e500:	d113      	bne.n	800e52a <__gethex+0x28a>
 800e502:	2e01      	cmp	r6, #1
 800e504:	d10b      	bne.n	800e51e <__gethex+0x27e>
 800e506:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e50a:	2562      	movs	r5, #98	@ 0x62
 800e50c:	9a02      	ldr	r2, [sp, #8]
 800e50e:	6013      	str	r3, [r2, #0]
 800e510:	2301      	movs	r3, #1
 800e512:	6123      	str	r3, [r4, #16]
 800e514:	f8ca 3000 	str.w	r3, [sl]
 800e518:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e51a:	601c      	str	r4, [r3, #0]
 800e51c:	e73a      	b.n	800e394 <__gethex+0xf4>
 800e51e:	1e71      	subs	r1, r6, #1
 800e520:	4620      	mov	r0, r4
 800e522:	f7fe fb62 	bl	800cbea <__any_on>
 800e526:	2800      	cmp	r0, #0
 800e528:	d1ed      	bne.n	800e506 <__gethex+0x266>
 800e52a:	4621      	mov	r1, r4
 800e52c:	9801      	ldr	r0, [sp, #4]
 800e52e:	f7fd ff01 	bl	800c334 <_Bfree>
 800e532:	2300      	movs	r3, #0
 800e534:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e536:	2550      	movs	r5, #80	@ 0x50
 800e538:	6013      	str	r3, [r2, #0]
 800e53a:	e72b      	b.n	800e394 <__gethex+0xf4>
 800e53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d1f3      	bne.n	800e52a <__gethex+0x28a>
 800e542:	e7e0      	b.n	800e506 <__gethex+0x266>
 800e544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e546:	2b00      	cmp	r3, #0
 800e548:	d1dd      	bne.n	800e506 <__gethex+0x266>
 800e54a:	e7ee      	b.n	800e52a <__gethex+0x28a>
 800e54c:	0800ef38 	.word	0x0800ef38
 800e550:	0800edcd 	.word	0x0800edcd
 800e554:	0800f0e6 	.word	0x0800f0e6
 800e558:	1e6f      	subs	r7, r5, #1
 800e55a:	f1b9 0f00 	cmp.w	r9, #0
 800e55e:	d130      	bne.n	800e5c2 <__gethex+0x322>
 800e560:	b127      	cbz	r7, 800e56c <__gethex+0x2cc>
 800e562:	4639      	mov	r1, r7
 800e564:	4620      	mov	r0, r4
 800e566:	f7fe fb40 	bl	800cbea <__any_on>
 800e56a:	4681      	mov	r9, r0
 800e56c:	117a      	asrs	r2, r7, #5
 800e56e:	2301      	movs	r3, #1
 800e570:	f007 071f 	and.w	r7, r7, #31
 800e574:	4629      	mov	r1, r5
 800e576:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e57a:	4620      	mov	r0, r4
 800e57c:	40bb      	lsls	r3, r7
 800e57e:	1b76      	subs	r6, r6, r5
 800e580:	2502      	movs	r5, #2
 800e582:	4213      	tst	r3, r2
 800e584:	bf18      	it	ne
 800e586:	f049 0902 	orrne.w	r9, r9, #2
 800e58a:	f7ff fe23 	bl	800e1d4 <rshift>
 800e58e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e592:	f1b9 0f00 	cmp.w	r9, #0
 800e596:	d047      	beq.n	800e628 <__gethex+0x388>
 800e598:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e59c:	2b02      	cmp	r3, #2
 800e59e:	d015      	beq.n	800e5cc <__gethex+0x32c>
 800e5a0:	2b03      	cmp	r3, #3
 800e5a2:	d017      	beq.n	800e5d4 <__gethex+0x334>
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	d109      	bne.n	800e5bc <__gethex+0x31c>
 800e5a8:	f019 0f02 	tst.w	r9, #2
 800e5ac:	d006      	beq.n	800e5bc <__gethex+0x31c>
 800e5ae:	f8da 3000 	ldr.w	r3, [sl]
 800e5b2:	ea49 0903 	orr.w	r9, r9, r3
 800e5b6:	f019 0f01 	tst.w	r9, #1
 800e5ba:	d10e      	bne.n	800e5da <__gethex+0x33a>
 800e5bc:	f045 0510 	orr.w	r5, r5, #16
 800e5c0:	e032      	b.n	800e628 <__gethex+0x388>
 800e5c2:	f04f 0901 	mov.w	r9, #1
 800e5c6:	e7d1      	b.n	800e56c <__gethex+0x2cc>
 800e5c8:	2501      	movs	r5, #1
 800e5ca:	e7e2      	b.n	800e592 <__gethex+0x2f2>
 800e5cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5ce:	f1c3 0301 	rsb	r3, r3, #1
 800e5d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d0f0      	beq.n	800e5bc <__gethex+0x31c>
 800e5da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e5de:	f104 0314 	add.w	r3, r4, #20
 800e5e2:	f04f 0c00 	mov.w	ip, #0
 800e5e6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e5ea:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e5f8:	d01b      	beq.n	800e632 <__gethex+0x392>
 800e5fa:	3201      	adds	r2, #1
 800e5fc:	6002      	str	r2, [r0, #0]
 800e5fe:	2d02      	cmp	r5, #2
 800e600:	f104 0314 	add.w	r3, r4, #20
 800e604:	d13c      	bne.n	800e680 <__gethex+0x3e0>
 800e606:	f8d8 2000 	ldr.w	r2, [r8]
 800e60a:	3a01      	subs	r2, #1
 800e60c:	42b2      	cmp	r2, r6
 800e60e:	d109      	bne.n	800e624 <__gethex+0x384>
 800e610:	1171      	asrs	r1, r6, #5
 800e612:	2201      	movs	r2, #1
 800e614:	f006 061f 	and.w	r6, r6, #31
 800e618:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e61c:	fa02 f606 	lsl.w	r6, r2, r6
 800e620:	421e      	tst	r6, r3
 800e622:	d13a      	bne.n	800e69a <__gethex+0x3fa>
 800e624:	f045 0520 	orr.w	r5, r5, #32
 800e628:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e62a:	601c      	str	r4, [r3, #0]
 800e62c:	9b02      	ldr	r3, [sp, #8]
 800e62e:	601f      	str	r7, [r3, #0]
 800e630:	e6b0      	b.n	800e394 <__gethex+0xf4>
 800e632:	4299      	cmp	r1, r3
 800e634:	f843 cc04 	str.w	ip, [r3, #-4]
 800e638:	d8d9      	bhi.n	800e5ee <__gethex+0x34e>
 800e63a:	68a3      	ldr	r3, [r4, #8]
 800e63c:	459b      	cmp	fp, r3
 800e63e:	db17      	blt.n	800e670 <__gethex+0x3d0>
 800e640:	6861      	ldr	r1, [r4, #4]
 800e642:	9801      	ldr	r0, [sp, #4]
 800e644:	3101      	adds	r1, #1
 800e646:	f7fd fe35 	bl	800c2b4 <_Balloc>
 800e64a:	4681      	mov	r9, r0
 800e64c:	b918      	cbnz	r0, 800e656 <__gethex+0x3b6>
 800e64e:	4b1a      	ldr	r3, [pc, #104]	@ (800e6b8 <__gethex+0x418>)
 800e650:	4602      	mov	r2, r0
 800e652:	2184      	movs	r1, #132	@ 0x84
 800e654:	e6c5      	b.n	800e3e2 <__gethex+0x142>
 800e656:	6922      	ldr	r2, [r4, #16]
 800e658:	f104 010c 	add.w	r1, r4, #12
 800e65c:	300c      	adds	r0, #12
 800e65e:	3202      	adds	r2, #2
 800e660:	0092      	lsls	r2, r2, #2
 800e662:	f7ff fd6d 	bl	800e140 <memcpy>
 800e666:	4621      	mov	r1, r4
 800e668:	464c      	mov	r4, r9
 800e66a:	9801      	ldr	r0, [sp, #4]
 800e66c:	f7fd fe62 	bl	800c334 <_Bfree>
 800e670:	6923      	ldr	r3, [r4, #16]
 800e672:	1c5a      	adds	r2, r3, #1
 800e674:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e678:	6122      	str	r2, [r4, #16]
 800e67a:	2201      	movs	r2, #1
 800e67c:	615a      	str	r2, [r3, #20]
 800e67e:	e7be      	b.n	800e5fe <__gethex+0x35e>
 800e680:	6922      	ldr	r2, [r4, #16]
 800e682:	455a      	cmp	r2, fp
 800e684:	dd0b      	ble.n	800e69e <__gethex+0x3fe>
 800e686:	2101      	movs	r1, #1
 800e688:	4620      	mov	r0, r4
 800e68a:	f7ff fda3 	bl	800e1d4 <rshift>
 800e68e:	3701      	adds	r7, #1
 800e690:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e694:	42bb      	cmp	r3, r7
 800e696:	f6ff aee0 	blt.w	800e45a <__gethex+0x1ba>
 800e69a:	2501      	movs	r5, #1
 800e69c:	e7c2      	b.n	800e624 <__gethex+0x384>
 800e69e:	f016 061f 	ands.w	r6, r6, #31
 800e6a2:	d0fa      	beq.n	800e69a <__gethex+0x3fa>
 800e6a4:	4453      	add	r3, sl
 800e6a6:	f1c6 0620 	rsb	r6, r6, #32
 800e6aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e6ae:	f7fd fef5 	bl	800c49c <__hi0bits>
 800e6b2:	42b0      	cmp	r0, r6
 800e6b4:	dbe7      	blt.n	800e686 <__gethex+0x3e6>
 800e6b6:	e7f0      	b.n	800e69a <__gethex+0x3fa>
 800e6b8:	0800edcd 	.word	0x0800edcd

0800e6bc <L_shift>:
 800e6bc:	f1c2 0208 	rsb	r2, r2, #8
 800e6c0:	0092      	lsls	r2, r2, #2
 800e6c2:	b570      	push	{r4, r5, r6, lr}
 800e6c4:	f1c2 0620 	rsb	r6, r2, #32
 800e6c8:	6843      	ldr	r3, [r0, #4]
 800e6ca:	6804      	ldr	r4, [r0, #0]
 800e6cc:	fa03 f506 	lsl.w	r5, r3, r6
 800e6d0:	40d3      	lsrs	r3, r2
 800e6d2:	432c      	orrs	r4, r5
 800e6d4:	6004      	str	r4, [r0, #0]
 800e6d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e6da:	4288      	cmp	r0, r1
 800e6dc:	d3f4      	bcc.n	800e6c8 <L_shift+0xc>
 800e6de:	bd70      	pop	{r4, r5, r6, pc}

0800e6e0 <__match>:
 800e6e0:	6803      	ldr	r3, [r0, #0]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	b530      	push	{r4, r5, lr}
 800e6e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6ea:	b914      	cbnz	r4, 800e6f2 <__match+0x12>
 800e6ec:	6003      	str	r3, [r0, #0]
 800e6ee:	2001      	movs	r0, #1
 800e6f0:	bd30      	pop	{r4, r5, pc}
 800e6f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e6fa:	2d19      	cmp	r5, #25
 800e6fc:	bf98      	it	ls
 800e6fe:	3220      	addls	r2, #32
 800e700:	42a2      	cmp	r2, r4
 800e702:	d0f0      	beq.n	800e6e6 <__match+0x6>
 800e704:	2000      	movs	r0, #0
 800e706:	e7f3      	b.n	800e6f0 <__match+0x10>

0800e708 <__hexnan>:
 800e708:	680b      	ldr	r3, [r1, #0]
 800e70a:	6801      	ldr	r1, [r0, #0]
 800e70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e710:	115e      	asrs	r6, r3, #5
 800e712:	f013 031f 	ands.w	r3, r3, #31
 800e716:	f04f 0500 	mov.w	r5, #0
 800e71a:	b087      	sub	sp, #28
 800e71c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e720:	4682      	mov	sl, r0
 800e722:	4690      	mov	r8, r2
 800e724:	46ab      	mov	fp, r5
 800e726:	bf18      	it	ne
 800e728:	3604      	addne	r6, #4
 800e72a:	9301      	str	r3, [sp, #4]
 800e72c:	9502      	str	r5, [sp, #8]
 800e72e:	1f37      	subs	r7, r6, #4
 800e730:	f846 5c04 	str.w	r5, [r6, #-4]
 800e734:	46b9      	mov	r9, r7
 800e736:	463c      	mov	r4, r7
 800e738:	1c4b      	adds	r3, r1, #1
 800e73a:	784a      	ldrb	r2, [r1, #1]
 800e73c:	9303      	str	r3, [sp, #12]
 800e73e:	b342      	cbz	r2, 800e792 <__hexnan+0x8a>
 800e740:	4610      	mov	r0, r2
 800e742:	9105      	str	r1, [sp, #20]
 800e744:	9204      	str	r2, [sp, #16]
 800e746:	f7ff fd96 	bl	800e276 <__hexdig_fun>
 800e74a:	2800      	cmp	r0, #0
 800e74c:	d151      	bne.n	800e7f2 <__hexnan+0xea>
 800e74e:	9a04      	ldr	r2, [sp, #16]
 800e750:	9905      	ldr	r1, [sp, #20]
 800e752:	2a20      	cmp	r2, #32
 800e754:	d818      	bhi.n	800e788 <__hexnan+0x80>
 800e756:	9b02      	ldr	r3, [sp, #8]
 800e758:	459b      	cmp	fp, r3
 800e75a:	dd13      	ble.n	800e784 <__hexnan+0x7c>
 800e75c:	454c      	cmp	r4, r9
 800e75e:	d206      	bcs.n	800e76e <__hexnan+0x66>
 800e760:	2d07      	cmp	r5, #7
 800e762:	dc04      	bgt.n	800e76e <__hexnan+0x66>
 800e764:	462a      	mov	r2, r5
 800e766:	4649      	mov	r1, r9
 800e768:	4620      	mov	r0, r4
 800e76a:	f7ff ffa7 	bl	800e6bc <L_shift>
 800e76e:	4544      	cmp	r4, r8
 800e770:	d951      	bls.n	800e816 <__hexnan+0x10e>
 800e772:	2300      	movs	r3, #0
 800e774:	f1a4 0904 	sub.w	r9, r4, #4
 800e778:	f8cd b008 	str.w	fp, [sp, #8]
 800e77c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e780:	461d      	mov	r5, r3
 800e782:	464c      	mov	r4, r9
 800e784:	9903      	ldr	r1, [sp, #12]
 800e786:	e7d7      	b.n	800e738 <__hexnan+0x30>
 800e788:	2a29      	cmp	r2, #41	@ 0x29
 800e78a:	d156      	bne.n	800e83a <__hexnan+0x132>
 800e78c:	3102      	adds	r1, #2
 800e78e:	f8ca 1000 	str.w	r1, [sl]
 800e792:	f1bb 0f00 	cmp.w	fp, #0
 800e796:	d050      	beq.n	800e83a <__hexnan+0x132>
 800e798:	454c      	cmp	r4, r9
 800e79a:	d206      	bcs.n	800e7aa <__hexnan+0xa2>
 800e79c:	2d07      	cmp	r5, #7
 800e79e:	dc04      	bgt.n	800e7aa <__hexnan+0xa2>
 800e7a0:	462a      	mov	r2, r5
 800e7a2:	4649      	mov	r1, r9
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	f7ff ff89 	bl	800e6bc <L_shift>
 800e7aa:	4544      	cmp	r4, r8
 800e7ac:	d935      	bls.n	800e81a <__hexnan+0x112>
 800e7ae:	f1a8 0204 	sub.w	r2, r8, #4
 800e7b2:	4623      	mov	r3, r4
 800e7b4:	f853 1b04 	ldr.w	r1, [r3], #4
 800e7b8:	429f      	cmp	r7, r3
 800e7ba:	f842 1f04 	str.w	r1, [r2, #4]!
 800e7be:	d2f9      	bcs.n	800e7b4 <__hexnan+0xac>
 800e7c0:	1b3b      	subs	r3, r7, r4
 800e7c2:	3e03      	subs	r6, #3
 800e7c4:	3401      	adds	r4, #1
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f023 0303 	bic.w	r3, r3, #3
 800e7cc:	3304      	adds	r3, #4
 800e7ce:	42b4      	cmp	r4, r6
 800e7d0:	bf88      	it	hi
 800e7d2:	2304      	movhi	r3, #4
 800e7d4:	4443      	add	r3, r8
 800e7d6:	f843 2b04 	str.w	r2, [r3], #4
 800e7da:	429f      	cmp	r7, r3
 800e7dc:	d2fb      	bcs.n	800e7d6 <__hexnan+0xce>
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	b91b      	cbnz	r3, 800e7ea <__hexnan+0xe2>
 800e7e2:	4547      	cmp	r7, r8
 800e7e4:	d127      	bne.n	800e836 <__hexnan+0x12e>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	603b      	str	r3, [r7, #0]
 800e7ea:	2005      	movs	r0, #5
 800e7ec:	b007      	add	sp, #28
 800e7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f2:	3501      	adds	r5, #1
 800e7f4:	f10b 0b01 	add.w	fp, fp, #1
 800e7f8:	2d08      	cmp	r5, #8
 800e7fa:	dd05      	ble.n	800e808 <__hexnan+0x100>
 800e7fc:	4544      	cmp	r4, r8
 800e7fe:	d9c1      	bls.n	800e784 <__hexnan+0x7c>
 800e800:	2300      	movs	r3, #0
 800e802:	3c04      	subs	r4, #4
 800e804:	2501      	movs	r5, #1
 800e806:	6023      	str	r3, [r4, #0]
 800e808:	6822      	ldr	r2, [r4, #0]
 800e80a:	f000 000f 	and.w	r0, r0, #15
 800e80e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e812:	6020      	str	r0, [r4, #0]
 800e814:	e7b6      	b.n	800e784 <__hexnan+0x7c>
 800e816:	2508      	movs	r5, #8
 800e818:	e7b4      	b.n	800e784 <__hexnan+0x7c>
 800e81a:	9b01      	ldr	r3, [sp, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d0de      	beq.n	800e7de <__hexnan+0xd6>
 800e820:	f1c3 0320 	rsb	r3, r3, #32
 800e824:	f04f 32ff 	mov.w	r2, #4294967295
 800e828:	40da      	lsrs	r2, r3
 800e82a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e82e:	4013      	ands	r3, r2
 800e830:	f846 3c04 	str.w	r3, [r6, #-4]
 800e834:	e7d3      	b.n	800e7de <__hexnan+0xd6>
 800e836:	3f04      	subs	r7, #4
 800e838:	e7d1      	b.n	800e7de <__hexnan+0xd6>
 800e83a:	2004      	movs	r0, #4
 800e83c:	e7d6      	b.n	800e7ec <__hexnan+0xe4>

0800e83e <__ascii_mbtowc>:
 800e83e:	b082      	sub	sp, #8
 800e840:	b901      	cbnz	r1, 800e844 <__ascii_mbtowc+0x6>
 800e842:	a901      	add	r1, sp, #4
 800e844:	b142      	cbz	r2, 800e858 <__ascii_mbtowc+0x1a>
 800e846:	b14b      	cbz	r3, 800e85c <__ascii_mbtowc+0x1e>
 800e848:	7813      	ldrb	r3, [r2, #0]
 800e84a:	600b      	str	r3, [r1, #0]
 800e84c:	7812      	ldrb	r2, [r2, #0]
 800e84e:	1e10      	subs	r0, r2, #0
 800e850:	bf18      	it	ne
 800e852:	2001      	movne	r0, #1
 800e854:	b002      	add	sp, #8
 800e856:	4770      	bx	lr
 800e858:	4610      	mov	r0, r2
 800e85a:	e7fb      	b.n	800e854 <__ascii_mbtowc+0x16>
 800e85c:	f06f 0001 	mvn.w	r0, #1
 800e860:	e7f8      	b.n	800e854 <__ascii_mbtowc+0x16>

0800e862 <_realloc_r>:
 800e862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e866:	4680      	mov	r8, r0
 800e868:	4615      	mov	r5, r2
 800e86a:	460c      	mov	r4, r1
 800e86c:	b921      	cbnz	r1, 800e878 <_realloc_r+0x16>
 800e86e:	4611      	mov	r1, r2
 800e870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e874:	f7fb bdac 	b.w	800a3d0 <_malloc_r>
 800e878:	b92a      	cbnz	r2, 800e886 <_realloc_r+0x24>
 800e87a:	f7fd fcd1 	bl	800c220 <_free_r>
 800e87e:	2400      	movs	r4, #0
 800e880:	4620      	mov	r0, r4
 800e882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e886:	f000 f8c4 	bl	800ea12 <_malloc_usable_size_r>
 800e88a:	4285      	cmp	r5, r0
 800e88c:	4606      	mov	r6, r0
 800e88e:	d802      	bhi.n	800e896 <_realloc_r+0x34>
 800e890:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e894:	d8f4      	bhi.n	800e880 <_realloc_r+0x1e>
 800e896:	4629      	mov	r1, r5
 800e898:	4640      	mov	r0, r8
 800e89a:	f7fb fd99 	bl	800a3d0 <_malloc_r>
 800e89e:	4607      	mov	r7, r0
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	d0ec      	beq.n	800e87e <_realloc_r+0x1c>
 800e8a4:	42b5      	cmp	r5, r6
 800e8a6:	462a      	mov	r2, r5
 800e8a8:	4621      	mov	r1, r4
 800e8aa:	bf28      	it	cs
 800e8ac:	4632      	movcs	r2, r6
 800e8ae:	f7ff fc47 	bl	800e140 <memcpy>
 800e8b2:	4621      	mov	r1, r4
 800e8b4:	4640      	mov	r0, r8
 800e8b6:	463c      	mov	r4, r7
 800e8b8:	f7fd fcb2 	bl	800c220 <_free_r>
 800e8bc:	e7e0      	b.n	800e880 <_realloc_r+0x1e>

0800e8be <__ascii_wctomb>:
 800e8be:	4603      	mov	r3, r0
 800e8c0:	4608      	mov	r0, r1
 800e8c2:	b141      	cbz	r1, 800e8d6 <__ascii_wctomb+0x18>
 800e8c4:	2aff      	cmp	r2, #255	@ 0xff
 800e8c6:	d904      	bls.n	800e8d2 <__ascii_wctomb+0x14>
 800e8c8:	228a      	movs	r2, #138	@ 0x8a
 800e8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ce:	601a      	str	r2, [r3, #0]
 800e8d0:	4770      	bx	lr
 800e8d2:	2001      	movs	r0, #1
 800e8d4:	700a      	strb	r2, [r1, #0]
 800e8d6:	4770      	bx	lr

0800e8d8 <fiprintf>:
 800e8d8:	b40e      	push	{r1, r2, r3}
 800e8da:	b503      	push	{r0, r1, lr}
 800e8dc:	ab03      	add	r3, sp, #12
 800e8de:	4601      	mov	r1, r0
 800e8e0:	4805      	ldr	r0, [pc, #20]	@ (800e8f8 <fiprintf+0x20>)
 800e8e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8e6:	6800      	ldr	r0, [r0, #0]
 800e8e8:	9301      	str	r3, [sp, #4]
 800e8ea:	f7ff f9a5 	bl	800dc38 <_vfiprintf_r>
 800e8ee:	b002      	add	sp, #8
 800e8f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8f4:	b003      	add	sp, #12
 800e8f6:	4770      	bx	lr
 800e8f8:	2000005c 	.word	0x2000005c

0800e8fc <__swhatbuf_r>:
 800e8fc:	b570      	push	{r4, r5, r6, lr}
 800e8fe:	460c      	mov	r4, r1
 800e900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e904:	b096      	sub	sp, #88	@ 0x58
 800e906:	4615      	mov	r5, r2
 800e908:	2900      	cmp	r1, #0
 800e90a:	461e      	mov	r6, r3
 800e90c:	da0c      	bge.n	800e928 <__swhatbuf_r+0x2c>
 800e90e:	89a3      	ldrh	r3, [r4, #12]
 800e910:	2100      	movs	r1, #0
 800e912:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e916:	bf14      	ite	ne
 800e918:	2340      	movne	r3, #64	@ 0x40
 800e91a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e91e:	2000      	movs	r0, #0
 800e920:	6031      	str	r1, [r6, #0]
 800e922:	602b      	str	r3, [r5, #0]
 800e924:	b016      	add	sp, #88	@ 0x58
 800e926:	bd70      	pop	{r4, r5, r6, pc}
 800e928:	466a      	mov	r2, sp
 800e92a:	f000 f849 	bl	800e9c0 <_fstat_r>
 800e92e:	2800      	cmp	r0, #0
 800e930:	dbed      	blt.n	800e90e <__swhatbuf_r+0x12>
 800e932:	9901      	ldr	r1, [sp, #4]
 800e934:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e938:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e93c:	4259      	negs	r1, r3
 800e93e:	4159      	adcs	r1, r3
 800e940:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e944:	e7eb      	b.n	800e91e <__swhatbuf_r+0x22>

0800e946 <__smakebuf_r>:
 800e946:	898b      	ldrh	r3, [r1, #12]
 800e948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e94a:	079d      	lsls	r5, r3, #30
 800e94c:	4606      	mov	r6, r0
 800e94e:	460c      	mov	r4, r1
 800e950:	d507      	bpl.n	800e962 <__smakebuf_r+0x1c>
 800e952:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e956:	6023      	str	r3, [r4, #0]
 800e958:	6123      	str	r3, [r4, #16]
 800e95a:	2301      	movs	r3, #1
 800e95c:	6163      	str	r3, [r4, #20]
 800e95e:	b003      	add	sp, #12
 800e960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e962:	ab01      	add	r3, sp, #4
 800e964:	466a      	mov	r2, sp
 800e966:	f7ff ffc9 	bl	800e8fc <__swhatbuf_r>
 800e96a:	9f00      	ldr	r7, [sp, #0]
 800e96c:	4605      	mov	r5, r0
 800e96e:	4630      	mov	r0, r6
 800e970:	4639      	mov	r1, r7
 800e972:	f7fb fd2d 	bl	800a3d0 <_malloc_r>
 800e976:	b948      	cbnz	r0, 800e98c <__smakebuf_r+0x46>
 800e978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e97c:	059a      	lsls	r2, r3, #22
 800e97e:	d4ee      	bmi.n	800e95e <__smakebuf_r+0x18>
 800e980:	f023 0303 	bic.w	r3, r3, #3
 800e984:	f043 0302 	orr.w	r3, r3, #2
 800e988:	81a3      	strh	r3, [r4, #12]
 800e98a:	e7e2      	b.n	800e952 <__smakebuf_r+0xc>
 800e98c:	89a3      	ldrh	r3, [r4, #12]
 800e98e:	6020      	str	r0, [r4, #0]
 800e990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e994:	81a3      	strh	r3, [r4, #12]
 800e996:	9b01      	ldr	r3, [sp, #4]
 800e998:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e99c:	b15b      	cbz	r3, 800e9b6 <__smakebuf_r+0x70>
 800e99e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f000 f81e 	bl	800e9e4 <_isatty_r>
 800e9a8:	b128      	cbz	r0, 800e9b6 <__smakebuf_r+0x70>
 800e9aa:	89a3      	ldrh	r3, [r4, #12]
 800e9ac:	f023 0303 	bic.w	r3, r3, #3
 800e9b0:	f043 0301 	orr.w	r3, r3, #1
 800e9b4:	81a3      	strh	r3, [r4, #12]
 800e9b6:	89a3      	ldrh	r3, [r4, #12]
 800e9b8:	431d      	orrs	r5, r3
 800e9ba:	81a5      	strh	r5, [r4, #12]
 800e9bc:	e7cf      	b.n	800e95e <__smakebuf_r+0x18>
	...

0800e9c0 <_fstat_r>:
 800e9c0:	b538      	push	{r3, r4, r5, lr}
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	4d06      	ldr	r5, [pc, #24]	@ (800e9e0 <_fstat_r+0x20>)
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	4608      	mov	r0, r1
 800e9ca:	4611      	mov	r1, r2
 800e9cc:	602b      	str	r3, [r5, #0]
 800e9ce:	f7f4 fb1b 	bl	8003008 <_fstat>
 800e9d2:	1c43      	adds	r3, r0, #1
 800e9d4:	d102      	bne.n	800e9dc <_fstat_r+0x1c>
 800e9d6:	682b      	ldr	r3, [r5, #0]
 800e9d8:	b103      	cbz	r3, 800e9dc <_fstat_r+0x1c>
 800e9da:	6023      	str	r3, [r4, #0]
 800e9dc:	bd38      	pop	{r3, r4, r5, pc}
 800e9de:	bf00      	nop
 800e9e0:	200005f8 	.word	0x200005f8

0800e9e4 <_isatty_r>:
 800e9e4:	b538      	push	{r3, r4, r5, lr}
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	4d05      	ldr	r5, [pc, #20]	@ (800ea00 <_isatty_r+0x1c>)
 800e9ea:	4604      	mov	r4, r0
 800e9ec:	4608      	mov	r0, r1
 800e9ee:	602b      	str	r3, [r5, #0]
 800e9f0:	f7f4 fb1a 	bl	8003028 <_isatty>
 800e9f4:	1c43      	adds	r3, r0, #1
 800e9f6:	d102      	bne.n	800e9fe <_isatty_r+0x1a>
 800e9f8:	682b      	ldr	r3, [r5, #0]
 800e9fa:	b103      	cbz	r3, 800e9fe <_isatty_r+0x1a>
 800e9fc:	6023      	str	r3, [r4, #0]
 800e9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ea00:	200005f8 	.word	0x200005f8

0800ea04 <abort>:
 800ea04:	2006      	movs	r0, #6
 800ea06:	b508      	push	{r3, lr}
 800ea08:	f000 f834 	bl	800ea74 <raise>
 800ea0c:	2001      	movs	r0, #1
 800ea0e:	f7f4 faab 	bl	8002f68 <_exit>

0800ea12 <_malloc_usable_size_r>:
 800ea12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea16:	1f18      	subs	r0, r3, #4
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	bfbc      	itt	lt
 800ea1c:	580b      	ldrlt	r3, [r1, r0]
 800ea1e:	18c0      	addlt	r0, r0, r3
 800ea20:	4770      	bx	lr

0800ea22 <_raise_r>:
 800ea22:	291f      	cmp	r1, #31
 800ea24:	b538      	push	{r3, r4, r5, lr}
 800ea26:	4605      	mov	r5, r0
 800ea28:	460c      	mov	r4, r1
 800ea2a:	d904      	bls.n	800ea36 <_raise_r+0x14>
 800ea2c:	2316      	movs	r3, #22
 800ea2e:	6003      	str	r3, [r0, #0]
 800ea30:	f04f 30ff 	mov.w	r0, #4294967295
 800ea34:	bd38      	pop	{r3, r4, r5, pc}
 800ea36:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ea38:	b112      	cbz	r2, 800ea40 <_raise_r+0x1e>
 800ea3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea3e:	b94b      	cbnz	r3, 800ea54 <_raise_r+0x32>
 800ea40:	4628      	mov	r0, r5
 800ea42:	f000 f831 	bl	800eaa8 <_getpid_r>
 800ea46:	4622      	mov	r2, r4
 800ea48:	4601      	mov	r1, r0
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea50:	f000 b818 	b.w	800ea84 <_kill_r>
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d00a      	beq.n	800ea6e <_raise_r+0x4c>
 800ea58:	1c59      	adds	r1, r3, #1
 800ea5a:	d103      	bne.n	800ea64 <_raise_r+0x42>
 800ea5c:	2316      	movs	r3, #22
 800ea5e:	6003      	str	r3, [r0, #0]
 800ea60:	2001      	movs	r0, #1
 800ea62:	e7e7      	b.n	800ea34 <_raise_r+0x12>
 800ea64:	2100      	movs	r1, #0
 800ea66:	4620      	mov	r0, r4
 800ea68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ea6c:	4798      	blx	r3
 800ea6e:	2000      	movs	r0, #0
 800ea70:	e7e0      	b.n	800ea34 <_raise_r+0x12>
	...

0800ea74 <raise>:
 800ea74:	4b02      	ldr	r3, [pc, #8]	@ (800ea80 <raise+0xc>)
 800ea76:	4601      	mov	r1, r0
 800ea78:	6818      	ldr	r0, [r3, #0]
 800ea7a:	f7ff bfd2 	b.w	800ea22 <_raise_r>
 800ea7e:	bf00      	nop
 800ea80:	2000005c 	.word	0x2000005c

0800ea84 <_kill_r>:
 800ea84:	b538      	push	{r3, r4, r5, lr}
 800ea86:	2300      	movs	r3, #0
 800ea88:	4d06      	ldr	r5, [pc, #24]	@ (800eaa4 <_kill_r+0x20>)
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	4608      	mov	r0, r1
 800ea8e:	4611      	mov	r1, r2
 800ea90:	602b      	str	r3, [r5, #0]
 800ea92:	f7f4 fa59 	bl	8002f48 <_kill>
 800ea96:	1c43      	adds	r3, r0, #1
 800ea98:	d102      	bne.n	800eaa0 <_kill_r+0x1c>
 800ea9a:	682b      	ldr	r3, [r5, #0]
 800ea9c:	b103      	cbz	r3, 800eaa0 <_kill_r+0x1c>
 800ea9e:	6023      	str	r3, [r4, #0]
 800eaa0:	bd38      	pop	{r3, r4, r5, pc}
 800eaa2:	bf00      	nop
 800eaa4:	200005f8 	.word	0x200005f8

0800eaa8 <_getpid_r>:
 800eaa8:	f7f4 ba46 	b.w	8002f38 <_getpid>

0800eaac <_init>:
 800eaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaae:	bf00      	nop
 800eab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eab2:	bc08      	pop	{r3}
 800eab4:	469e      	mov	lr, r3
 800eab6:	4770      	bx	lr

0800eab8 <_fini>:
 800eab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaba:	bf00      	nop
 800eabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eabe:	bc08      	pop	{r3}
 800eac0:	469e      	mov	lr, r3
 800eac2:	4770      	bx	lr
