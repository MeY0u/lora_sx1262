
hitan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010494  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007de  080106e8  080106e8  000116e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010ec8  08010ec8  00011ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08010ed0  08010ed0  00011ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  08010ed8  08010ed8  00011ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000248  20000000  08010ee0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004ca  20000248  08011128  00012248  2**3
                  ALLOC
  8 ._user_heap_stack 00000606  20000712  08011128  00012712  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00012248  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a634  00000000  00000000  0001227e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004ce1  00000000  00000000  0003c8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e58  00000000  00000000  00041598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001748  00000000  00000000  000433f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040131  00000000  00000000  00044b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000253bd  00000000  00000000  00084c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016f175  00000000  00000000  000aa026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021919b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009660  00000000  00000000  002191e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00000112  00000000  00000000  00222840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006d  00000000  00000000  00222952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000248 	.word	0x20000248
 800026c:	00000000 	.word	0x00000000
 8000270:	080106cc 	.word	0x080106cc

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000024c 	.word	0x2000024c
 800028c:	080106cc 	.word	0x080106cc

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9b4 	b.w	8001028 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	2200      	movs	r2, #0
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d48:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14d      	bne.n	8000dec <__udivmoddi4+0xa8>
 8000d50:	428a      	cmp	r2, r1
 8000d52:	460f      	mov	r7, r1
 8000d54:	4684      	mov	ip, r0
 8000d56:	4696      	mov	lr, r2
 8000d58:	fab2 f382 	clz	r3, r2
 8000d5c:	d960      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5e:	b14b      	cbz	r3, 8000d74 <__udivmoddi4+0x30>
 8000d60:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d72:	4317      	orrs	r7, r2
 8000d74:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d78:	fa1f f48e 	uxth.w	r4, lr
 8000d7c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d80:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d84:	fb06 7711 	mls	r7, r6, r1, r7
 8000d88:	fb01 f004 	mul.w	r0, r1, r4
 8000d8c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d90:	4290      	cmp	r0, r2
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d94:	eb1e 0202 	adds.w	r2, lr, r2
 8000d98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x60>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f200 812d 	bhi.w	8000ffe <__udivmoddi4+0x2ba>
 8000da4:	4639      	mov	r1, r7
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	fa1f fc8c 	uxth.w	ip, ip
 8000dac:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db0:	fb06 2210 	mls	r2, r6, r0, r2
 8000db4:	fb00 f404 	mul.w	r4, r0, r4
 8000db8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dbc:	4564      	cmp	r4, ip
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dc0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x8c>
 8000dca:	4564      	cmp	r4, ip
 8000dcc:	f200 811a 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	ebac 0c04 	sub.w	ip, ip, r4
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b125      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000dde:	fa2c f303 	lsr.w	r3, ip, r3
 8000de2:	2200      	movs	r2, #0
 8000de4:	e9c5 3200 	strd	r3, r2, [r5]
 8000de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d905      	bls.n	8000dfc <__udivmoddi4+0xb8>
 8000df0:	b10d      	cbz	r5, 8000df6 <__udivmoddi4+0xb2>
 8000df2:	e9c5 0100 	strd	r0, r1, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	4608      	mov	r0, r1
 8000dfa:	e7f5      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000dfc:	fab3 f183 	clz	r1, r3
 8000e00:	2900      	cmp	r1, #0
 8000e02:	d14d      	bne.n	8000ea0 <__udivmoddi4+0x15c>
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	f0c0 80f2 	bcc.w	8000fee <__udivmoddi4+0x2aa>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f080 80ef 	bcs.w	8000fee <__udivmoddi4+0x2aa>
 8000e10:	4606      	mov	r6, r0
 8000e12:	4623      	mov	r3, r4
 8000e14:	4608      	mov	r0, r1
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e6      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e1a:	e9c5 6300 	strd	r6, r3, [r5]
 8000e1e:	e7e3      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f040 80a2 	bne.w	8000f6a <__udivmoddi4+0x226>
 8000e26:	1a8a      	subs	r2, r1, r2
 8000e28:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e2c:	fa1f f68e 	uxth.w	r6, lr
 8000e30:	2101      	movs	r1, #1
 8000e32:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e36:	fb07 2014 	mls	r0, r7, r4, r2
 8000e3a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e42:	fb06 f004 	mul.w	r0, r6, r4
 8000e46:	4290      	cmp	r0, r2
 8000e48:	d90f      	bls.n	8000e6a <__udivmoddi4+0x126>
 8000e4a:	eb1e 0202 	adds.w	r2, lr, r2
 8000e4e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e52:	bf2c      	ite	cs
 8000e54:	f04f 0901 	movcs.w	r9, #1
 8000e58:	f04f 0900 	movcc.w	r9, #0
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d903      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e60:	f1b9 0f00 	cmp.w	r9, #0
 8000e64:	f000 80c8 	beq.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e68:	4644      	mov	r4, r8
 8000e6a:	1a12      	subs	r2, r2, r0
 8000e6c:	fa1f fc8c 	uxth.w	ip, ip
 8000e70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e74:	fb07 2210 	mls	r2, r7, r0, r2
 8000e78:	fb00 f606 	mul.w	r6, r0, r6
 8000e7c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e80:	4566      	cmp	r6, ip
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x152>
 8000e84:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e8c:	d202      	bcs.n	8000e94 <__udivmoddi4+0x150>
 8000e8e:	4566      	cmp	r6, ip
 8000e90:	f200 80bb 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e94:	4610      	mov	r0, r2
 8000e96:	ebac 0c06 	sub.w	ip, ip, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	e79d      	b.n	8000ddc <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb2:	40f4      	lsrs	r4, r6
 8000eb4:	408a      	lsls	r2, r1
 8000eb6:	431f      	orrs	r7, r3
 8000eb8:	ea4e 030c 	orr.w	r3, lr, ip
 8000ebc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fa1f fc87 	uxth.w	ip, r7
 8000ecc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb00 f90c 	mul.w	r9, r0, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	d90e      	bls.n	8000efe <__udivmoddi4+0x1ba>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	bf2c      	ite	cs
 8000ee8:	f04f 0b01 	movcs.w	fp, #1
 8000eec:	f04f 0b00 	movcc.w	fp, #0
 8000ef0:	45a1      	cmp	r9, r4
 8000ef2:	d903      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ef4:	f1bb 0f00 	cmp.w	fp, #0
 8000ef8:	f000 8093 	beq.w	8001022 <__udivmoddi4+0x2de>
 8000efc:	4650      	mov	r0, sl
 8000efe:	eba4 0409 	sub.w	r4, r4, r9
 8000f02:	fa1f f983 	uxth.w	r9, r3
 8000f06:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f0a:	fb08 4413 	mls	r4, r8, r3, r4
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	d906      	bls.n	8000f28 <__udivmoddi4+0x1e4>
 8000f1a:	193c      	adds	r4, r7, r4
 8000f1c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f20:	d201      	bcs.n	8000f26 <__udivmoddi4+0x1e2>
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d87a      	bhi.n	800101c <__udivmoddi4+0x2d8>
 8000f26:	4643      	mov	r3, r8
 8000f28:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f2c:	eba4 040c 	sub.w	r4, r4, ip
 8000f30:	fba0 9802 	umull	r9, r8, r0, r2
 8000f34:	4544      	cmp	r4, r8
 8000f36:	46cc      	mov	ip, r9
 8000f38:	4643      	mov	r3, r8
 8000f3a:	d302      	bcc.n	8000f42 <__udivmoddi4+0x1fe>
 8000f3c:	d106      	bne.n	8000f4c <__udivmoddi4+0x208>
 8000f3e:	45ce      	cmp	lr, r9
 8000f40:	d204      	bcs.n	8000f4c <__udivmoddi4+0x208>
 8000f42:	3801      	subs	r0, #1
 8000f44:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f48:	eb68 0307 	sbc.w	r3, r8, r7
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x222>
 8000f4e:	ebbe 020c 	subs.w	r2, lr, ip
 8000f52:	eb64 0403 	sbc.w	r4, r4, r3
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	431e      	orrs	r6, r3
 8000f62:	e9c5 6400 	strd	r6, r4, [r5]
 8000f66:	2100      	movs	r1, #0
 8000f68:	e73e      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000f6a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f6e:	f1c3 0120 	rsb	r1, r3, #32
 8000f72:	fa04 f203 	lsl.w	r2, r4, r3
 8000f76:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f7a:	40cc      	lsrs	r4, r1
 8000f7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f80:	fa20 f101 	lsr.w	r1, r0, r1
 8000f84:	fa1f f68e 	uxth.w	r6, lr
 8000f88:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fb07 4410 	mls	r4, r7, r0, r4
 8000f92:	0c11      	lsrs	r1, r2, #16
 8000f94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f98:	fb00 f406 	mul.w	r4, r0, r6
 8000f9c:	428c      	cmp	r4, r1
 8000f9e:	d90e      	bls.n	8000fbe <__udivmoddi4+0x27a>
 8000fa0:	eb1e 0101 	adds.w	r1, lr, r1
 8000fa4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa8:	bf2c      	ite	cs
 8000faa:	f04f 0901 	movcs.w	r9, #1
 8000fae:	f04f 0900 	movcc.w	r9, #0
 8000fb2:	428c      	cmp	r4, r1
 8000fb4:	d902      	bls.n	8000fbc <__udivmoddi4+0x278>
 8000fb6:	f1b9 0f00 	cmp.w	r9, #0
 8000fba:	d02c      	beq.n	8001016 <__udivmoddi4+0x2d2>
 8000fbc:	4640      	mov	r0, r8
 8000fbe:	1b09      	subs	r1, r1, r4
 8000fc0:	b292      	uxth	r2, r2
 8000fc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000fca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fce:	fb04 f106 	mul.w	r1, r4, r6
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x2a2>
 8000fd6:	eb1e 0202 	adds.w	r2, lr, r2
 8000fda:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fde:	d201      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d815      	bhi.n	8001010 <__udivmoddi4+0x2cc>
 8000fe4:	4644      	mov	r4, r8
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000fec:	e721      	b.n	8000e32 <__udivmoddi4+0xee>
 8000fee:	1a86      	subs	r6, r0, r2
 8000ff0:	eb64 0303 	sbc.w	r3, r4, r3
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	e70e      	b.n	8000e16 <__udivmoddi4+0xd2>
 8000ff8:	3c02      	subs	r4, #2
 8000ffa:	4472      	add	r2, lr
 8000ffc:	e735      	b.n	8000e6a <__udivmoddi4+0x126>
 8000ffe:	3902      	subs	r1, #2
 8001000:	4472      	add	r2, lr
 8001002:	e6d0      	b.n	8000da6 <__udivmoddi4+0x62>
 8001004:	44f4      	add	ip, lr
 8001006:	3802      	subs	r0, #2
 8001008:	e6e3      	b.n	8000dd2 <__udivmoddi4+0x8e>
 800100a:	44f4      	add	ip, lr
 800100c:	3802      	subs	r0, #2
 800100e:	e742      	b.n	8000e96 <__udivmoddi4+0x152>
 8001010:	3c02      	subs	r4, #2
 8001012:	4472      	add	r2, lr
 8001014:	e7e7      	b.n	8000fe6 <__udivmoddi4+0x2a2>
 8001016:	3802      	subs	r0, #2
 8001018:	4471      	add	r1, lr
 800101a:	e7d0      	b.n	8000fbe <__udivmoddi4+0x27a>
 800101c:	3b02      	subs	r3, #2
 800101e:	443c      	add	r4, r7
 8001020:	e782      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8001022:	3802      	subs	r0, #2
 8001024:	443c      	add	r4, r7
 8001026:	e76a      	b.n	8000efe <__udivmoddi4+0x1ba>

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <_ZN5RadioC1EP16RadioCallbacks_t>:
     *
     * \param [in]  callbacks     The structure of callbacks function pointers
     *                            to be called on radio interrupts
     *
     */
    Radio( RadioCallbacks_t *callbacks )
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
    {
 8001036:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <_ZN5RadioC1EP16RadioCallbacks_t+0x68>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	601a      	str	r2, [r3, #0]
        this->txDone = callbacks->txDone;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	605a      	str	r2, [r3, #4]
        this->rxDone = callbacks->rxDone;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]
        this->rxPreambleDetect = callbacks->rxPreambleDetect;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60da      	str	r2, [r3, #12]
        this->rxSyncWordDone = callbacks->rxSyncWordDone;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	611a      	str	r2, [r3, #16]
        this->rxHeaderDone = callbacks->rxHeaderDone;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	615a      	str	r2, [r3, #20]
        this->txTimeout = callbacks->txTimeout;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
        this->rxTimeout = callbacks->rxTimeout;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	699a      	ldr	r2, [r3, #24]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	61da      	str	r2, [r3, #28]
        this->rxError = callbacks->rxError;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	69da      	ldr	r2, [r3, #28]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	621a      	str	r2, [r3, #32]
        this->cadDone = callbacks->cadDone;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	6a1a      	ldr	r2, [r3, #32]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	625a      	str	r2, [r3, #36]	@ 0x24
    }
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	08010860 	.word	0x08010860

08001098 <_ZN5RadioD1Ev>:
    virtual ~Radio( void ){ };
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <_ZN5RadioD1Ev+0x1c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	08010860 	.word	0x08010860

080010b8 <_ZN5RadioD0Ev>:
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ffe9 	bl	8001098 <_ZN5RadioD1Ev>
 80010c6:	2128      	movs	r1, #40	@ 0x28
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f00a fef2 	bl	800beb2 <_ZdlPvj>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_ZN6SX126xC1EP16RadioCallbacks_t>:
    /*!
     * \brief Instantiates a SX126x object and provides API functions to communicates with the radio
     * \param [in]  callbacks      Pointer to the callbacks structure defining
     *                             all callbacks function pointers
     */
    SX126x( RadioCallbacks_t *callbacks ):
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
        Radio( callbacks )
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6839      	ldr	r1, [r7, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffa0 	bl	800102c <_ZN5RadioC1EP16RadioCallbacks_t>
 80010ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001120 <_ZN6SX126xC1EP16RadioCallbacks_t+0x48>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	601a      	str	r2, [r3, #0]
    {
        this->dioIrq      = &SX126x::OnDioIrq;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001124 <_ZN6SX126xC1EP16RadioCallbacks_t+0x4c>)
 80010f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	631a      	str	r2, [r3, #48]	@ 0x30
        this->PacketType  = PACKET_TYPE_NONE;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	220f      	movs	r2, #15
 8001102:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        this->PollingMode = false;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        this->IrqState    = false;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    }
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	08010898 	.word	0x08010898
 8001124:	08002289 	.word	0x08002289

08001128 <_ZN6SX126xD1Ev>:

    virtual ~SX126x( )
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    {
 8001130:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <_ZN6SX126xD1Ev+0x20>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
    }
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffad 	bl	8001098 <_ZN5RadioD1Ev>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	08010898 	.word	0x08010898

0800114c <_ZN6SX126xD0Ev>:
    virtual ~SX126x( )
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    }
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffe7 	bl	8001128 <_ZN6SX126xD1Ev>
 800115a:	2138      	movs	r1, #56	@ 0x38
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f00a fea8 	bl	800beb2 <_ZdlPvj>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_ZN9SX126xHalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tmmS3_tP16RadioCallbacks_t>:
#define __SX126x_HAL_CPP__

#include "sx126x-hal.hpp"
#include <cstring>

SX126xHal::SX126xHal(SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *nssPort, uint16_t nssPin,
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	807b      	strh	r3, [r7, #2]
					 uint32_t deviceChannel, GPIO_TypeDef *antSwPort, uint16_t antSwPin,
                     RadioCallbacks_t *callbacks)
    : SX126x(callbacks), hspi(spiHandle), nssPort(nssPort), nssPin(nssPin), busyPort(busyPort), busyPin(busyPin),
      dio1Port(dio1Port), dio1Pin(dio1Pin), dio2Port(dio2Port), dio2Pin(dio2Pin), dio3Port(dio3Port), dio3Pin(dio3Pin),
      rstPort(rstPort), rstPin(rstPin), freqChannel(freqChannel), deviceChannel(deviceChannel),
      antSwPort(antSwPort), antSwPin(antSwPin) {}
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffaa 	bl	80010d8 <_ZN6SX126xC1EP16RadioCallbacks_t>
 8001184:	4a21      	ldr	r2, [pc, #132]	@ (800120c <_ZN9SX126xHalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tmmS3_tP16RadioCallbacks_t+0xa0>)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]
    : SX126x(callbacks), hspi(spiHandle), nssPort(nssPort), nssPin(nssPin), busyPort(busyPort), busyPin(busyPin),
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	645a      	str	r2, [r3, #68]	@ 0x44
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	887a      	ldrh	r2, [r7, #2]
 800119a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	8bba      	ldrh	r2, [r7, #28]
 80011a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
      dio1Port(dio1Port), dio1Pin(dio1Pin), dio2Port(dio2Port), dio2Pin(dio2Pin), dio3Port(dio3Port), dio3Pin(dio3Pin),
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6a3a      	ldr	r2, [r7, #32]
 80011b0:	655a      	str	r2, [r3, #84]	@ 0x54
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80011b6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80011c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011cc:	665a      	str	r2, [r3, #100]	@ 0x64
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80011d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
      rstPort(rstPort), rstPin(rstPin), freqChannel(freqChannel), deviceChannel(deviceChannel),
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011da:	66da      	str	r2, [r3, #108]	@ 0x6c
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80011e0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80011e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011ee:	679a      	str	r2, [r3, #120]	@ 0x78
      antSwPort(antSwPort), antSwPin(antSwPin) {}
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80011f4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80011fc:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	08010800 	.word	0x08010800

08001210 <_ZN9SX126xHalD1Ev>:

SX126xHal::~SX126xHal(void) {}
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	4a05      	ldr	r2, [pc, #20]	@ (8001230 <_ZN9SX126xHalD1Ev+0x20>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff81 	bl	8001128 <_ZN6SX126xD1Ev>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	08010800 	.word	0x08010800

08001234 <_ZN9SX126xHalD0Ev>:
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffe7 	bl	8001210 <_ZN9SX126xHalD1Ev>
 8001242:	2184      	movs	r1, #132	@ 0x84
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f00a fe34 	bl	800beb2 <_ZdlPvj>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN9SX126xHal7SpiInitEv>:

void SX126xHal::SpiInit(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001266:	2201      	movs	r2, #1
 8001268:	4619      	mov	r1, r3
 800126a:	f004 fb5f 	bl	800592c <HAL_GPIO_WritePin>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_ZN9SX126xHal9IoIrqInitEM6SX126xFvvE>:
//  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
    HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0); // Set the priority for EXTI11
    HAL_NVIC_EnableIRQ(EXTI11_IRQn); // Enable interrupt for EXTI line 11
}
*/
void SX126xHal::IoIrqInit(DioIrqHandler irqHandler) {
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	e883 0006 	stmia.w	r3, {r1, r2}
    assert_param(irqHandler != NULL);

    // Configure DIO1 pin with interrupt
    // Enable interrupt for the pin and set the priority
     HAL_NVIC_SetPriority(EXTI11_IRQn, 2, 0); // Set the priority for EXTI11
 8001284:	2200      	movs	r2, #0
 8001286:	2102      	movs	r1, #2
 8001288:	2016      	movs	r0, #22
 800128a:	f003 fffb 	bl	8005284 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(EXTI11_IRQn); // Enable interrupt for EXTI line 11
 800128e:	2016      	movs	r0, #22
 8001290:	f004 f812 	bl	80052b8 <HAL_NVIC_EnableIRQ>
     this->dio1IrqHandler = irqHandler;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3338      	adds	r3, #56	@ 0x38
 8001298:	1d3a      	adds	r2, r7, #4
 800129a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800129e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <_ZN9SX126xHal5ResetEv>:

void SX126xHal::Reset(void) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_RESET);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	f004 fb34 	bl	800592c <HAL_GPIO_WritePin>
    	HAL_Delay(50);
 80012c4:	2032      	movs	r0, #50	@ 0x32
 80012c6:	f003 ff01 	bl	80050cc <HAL_Delay>
    	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_SET);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80012d4:	2201      	movs	r2, #1
 80012d6:	4619      	mov	r1, r3
 80012d8:	f004 fb28 	bl	800592c <HAL_GPIO_WritePin>
    	HAL_Delay(20);
 80012dc:	2014      	movs	r0, #20
 80012de:	f003 fef5 	bl	80050cc <HAL_Delay>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <_ZN9SX126xHal6WakeupEv>:

void SX126xHal::Wakeup(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80012fe:	2200      	movs	r2, #0
 8001300:	4619      	mov	r1, r3
 8001302:	f004 fb13 	bl	800592c <HAL_GPIO_WritePin>
    uint8_t dummy[2] = {RADIO_GET_STATUS, 0};
 8001306:	23c0      	movs	r3, #192	@ 0xc0
 8001308:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(hspi, dummy, 2, HAL_MAX_DELAY);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800130e:	f107 010c 	add.w	r1, r7, #12
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	2202      	movs	r2, #2
 8001318:	f008 ffa6 	bl	800a268 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001326:	2201      	movs	r2, #1
 8001328:	4619      	mov	r1, r3
 800132a:	f004 faff 	bl	800592c <HAL_GPIO_WritePin>
    WaitOnBusy();
 800132e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001332:	480b      	ldr	r0, [pc, #44]	@ (8001360 <_ZN9SX126xHal6WakeupEv+0x74>)
 8001334:	f004 fae2 	bl	80058fc <HAL_GPIO_ReadPin>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	bf0c      	ite	eq
 800133e:	2301      	moveq	r3, #1
 8001340:	2300      	movne	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f2      	bne.n	800132e <_ZN9SX126xHal6WakeupEv+0x42>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001348:	b662      	cpsie	i
}
 800134a:	bf00      	nop
    __enable_irq();
    AntSwOn();
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	334c      	adds	r3, #76	@ 0x4c
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	4798      	blx	r3
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	42021000 	.word	0x42021000

08001364 <_ZN9SX126xHal12WriteCommandE15RadioCommands_ePht>:

void SX126xHal::WriteCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	461a      	mov	r2, r3
 8001370:	460b      	mov	r3, r1
 8001372:	72fb      	strb	r3, [r7, #11]
 8001374:	4613      	mov	r3, r2
 8001376:	813b      	strh	r3, [r7, #8]
	WaitOnBusy();
 8001378:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800137c:	4818      	ldr	r0, [pc, #96]	@ (80013e0 <_ZN9SX126xHal12WriteCommandE15RadioCommands_ePht+0x7c>)
 800137e:	f004 fabd 	bl	80058fc <HAL_GPIO_ReadPin>
 8001382:	4603      	mov	r3, r0
 8001384:	2b01      	cmp	r3, #1
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f2      	bne.n	8001378 <_ZN9SX126xHal12WriteCommandE15RadioCommands_ePht+0x14>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	f004 fac4 	bl	800592c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, (uint8_t *)&command, 1, HAL_MAX_DELAY);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80013a8:	f107 010b 	add.w	r1, r7, #11
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	2201      	movs	r2, #1
 80013b2:	f008 ff59 	bl	800a268 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, buffer, size, HAL_MAX_DELAY);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80013ba:	893a      	ldrh	r2, [r7, #8]
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	f008 ff51 	bl	800a268 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013d0:	2201      	movs	r2, #1
 80013d2:	4619      	mov	r1, r3
 80013d4:	f004 faaa 	bl	800592c <HAL_GPIO_WritePin>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	42021000 	.word	0x42021000

080013e4 <_ZN9SX126xHal11ReadCommandE15RadioCommands_ePht>:

void SX126xHal::ReadCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	461a      	mov	r2, r3
 80013f0:	460b      	mov	r3, r1
 80013f2:	72fb      	strb	r3, [r7, #11]
 80013f4:	4613      	mov	r3, r2
 80013f6:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	f004 fa91 	bl	800592c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, (uint8_t *)&command, 1, HAL_MAX_DELAY);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800140e:	f107 010b 	add.w	r1, r7, #11
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	2201      	movs	r2, #1
 8001418:	f008 ff26 	bl	800a268 <HAL_SPI_Transmit>
    uint8_t dummy = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(hspi, &dummy, 1, HAL_MAX_DELAY);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001424:	f107 0117 	add.w	r1, r7, #23
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	2201      	movs	r2, #1
 800142e:	f008 ff1b 	bl	800a268 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, size, HAL_MAX_DELAY);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001436:	893a      	ldrh	r2, [r7, #8]
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	f009 f923 	bl	800a688 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800144c:	2201      	movs	r2, #1
 800144e:	4619      	mov	r1, r3
 8001450:	f004 fa6c 	bl	800592c <HAL_GPIO_WritePin>
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_ZN9SX126xHal13WriteRegisterEtPht>:

void SX126xHal::WriteRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	461a      	mov	r2, r3
 8001468:	460b      	mov	r3, r1
 800146a:	817b      	strh	r3, [r7, #10]
 800146c:	4613      	mov	r3, r2
 800146e:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800147a:	2200      	movs	r2, #0
 800147c:	4619      	mov	r1, r3
 800147e:	f004 fa55 	bl	800592c <HAL_GPIO_WritePin>
    uint8_t header[3] = {RADIO_WRITE_REGISTER, (uint8_t)((address >> 8) & 0xFF), (uint8_t)(address & 0xFF)};
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	2100      	movs	r1, #0
 8001488:	460a      	mov	r2, r1
 800148a:	801a      	strh	r2, [r3, #0]
 800148c:	460a      	mov	r2, r1
 800148e:	709a      	strb	r2, [r3, #2]
 8001490:	230d      	movs	r3, #13
 8001492:	753b      	strb	r3, [r7, #20]
 8001494:	897b      	ldrh	r3, [r7, #10]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	757b      	strb	r3, [r7, #21]
 800149e:	897b      	ldrh	r3, [r7, #10]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	75bb      	strb	r3, [r7, #22]
    HAL_SPI_Transmit(hspi, header, 3, HAL_MAX_DELAY);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80014a8:	f107 0114 	add.w	r1, r7, #20
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	2203      	movs	r2, #3
 80014b2:	f008 fed9 	bl	800a268 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, buffer, size, HAL_MAX_DELAY);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80014ba:	893a      	ldrh	r2, [r7, #8]
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	f008 fed1 	bl	800a268 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014d0:	2201      	movs	r2, #1
 80014d2:	4619      	mov	r1, r3
 80014d4:	f004 fa2a 	bl	800592c <HAL_GPIO_WritePin>
}
 80014d8:	bf00      	nop
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_ZN9SX126xHal8WriteRegEth>:

void SX126xHal::WriteReg(uint16_t address, uint8_t value) {
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
    WriteRegister(address, &value, 1);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3318      	adds	r3, #24
 80014f6:	681c      	ldr	r4, [r3, #0]
 80014f8:	1c7a      	adds	r2, r7, #1
 80014fa:	8879      	ldrh	r1, [r7, #2]
 80014fc:	2301      	movs	r3, #1
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	47a0      	blx	r4
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bd90      	pop	{r4, r7, pc}

0800150a <_ZN9SX126xHal12ReadRegisterEtPht>:

void SX126xHal::ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	461a      	mov	r2, r3
 8001516:	460b      	mov	r3, r1
 8001518:	817b      	strh	r3, [r7, #10]
 800151a:	4613      	mov	r3, r2
 800151c:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	f004 f9fe 	bl	800592c <HAL_GPIO_WritePin>
    uint8_t header[3] = {RADIO_READ_REGISTER, (uint8_t)((address >> 8) & 0xFF), (uint8_t)(address & 0xFF)};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2100      	movs	r1, #0
 8001536:	460a      	mov	r2, r1
 8001538:	801a      	strh	r2, [r3, #0]
 800153a:	460a      	mov	r2, r1
 800153c:	709a      	strb	r2, [r3, #2]
 800153e:	231d      	movs	r3, #29
 8001540:	753b      	strb	r3, [r7, #20]
 8001542:	897b      	ldrh	r3, [r7, #10]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	b29b      	uxth	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	757b      	strb	r3, [r7, #21]
 800154c:	897b      	ldrh	r3, [r7, #10]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	75bb      	strb	r3, [r7, #22]
    HAL_SPI_Transmit(hspi, header, 3, HAL_MAX_DELAY);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001556:	f107 0114 	add.w	r1, r7, #20
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	2203      	movs	r2, #3
 8001560:	f008 fe82 	bl	800a268 <HAL_SPI_Transmit>
    uint8_t dummy = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	74fb      	strb	r3, [r7, #19]
    HAL_SPI_Transmit(hspi, &dummy, 1, HAL_MAX_DELAY);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800156c:	f107 0113 	add.w	r1, r7, #19
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	2201      	movs	r2, #1
 8001576:	f008 fe77 	bl	800a268 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, size, HAL_MAX_DELAY);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800157e:	893a      	ldrh	r2, [r7, #8]
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	f009 f87f 	bl	800a688 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001594:	2201      	movs	r2, #1
 8001596:	4619      	mov	r1, r3
 8001598:	f004 f9c8 	bl	800592c <HAL_GPIO_WritePin>
}
 800159c:	bf00      	nop
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_ZN9SX126xHal7ReadRegEt>:

uint8_t SX126xHal::ReadReg(uint16_t address) {
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
    uint8_t value;
    ReadRegister(address, &value, 1);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3320      	adds	r3, #32
 80015b6:	681c      	ldr	r4, [r3, #0]
 80015b8:	f107 020f 	add.w	r2, r7, #15
 80015bc:	8879      	ldrh	r1, [r7, #2]
 80015be:	2301      	movs	r3, #1
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	47a0      	blx	r4
    return value;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd90      	pop	{r4, r7, pc}

080015ce <_ZN9SX126xHal11WriteBufferEhPhh>:

void SX126xHal::WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	461a      	mov	r2, r3
 80015da:	460b      	mov	r3, r1
 80015dc:	72fb      	strb	r3, [r7, #11]
 80015de:	4613      	mov	r3, r2
 80015e0:	72bb      	strb	r3, [r7, #10]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80015ec:	2200      	movs	r2, #0
 80015ee:	4619      	mov	r1, r3
 80015f0:	f004 f99c 	bl	800592c <HAL_GPIO_WritePin>
    uint8_t header[2] = {RADIO_WRITE_BUFFER, offset};
 80015f4:	2300      	movs	r3, #0
 80015f6:	82bb      	strh	r3, [r7, #20]
 80015f8:	230e      	movs	r3, #14
 80015fa:	753b      	strb	r3, [r7, #20]
 80015fc:	7afb      	ldrb	r3, [r7, #11]
 80015fe:	757b      	strb	r3, [r7, #21]
    HAL_SPI_Transmit(hspi, header, 2, HAL_MAX_DELAY);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001604:	f107 0114 	add.w	r1, r7, #20
 8001608:	f04f 33ff 	mov.w	r3, #4294967295
 800160c:	2202      	movs	r2, #2
 800160e:	f008 fe2b 	bl	800a268 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, buffer, size, HAL_MAX_DELAY);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001616:	7abb      	ldrb	r3, [r7, #10]
 8001618:	b29a      	uxth	r2, r3
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f008 fe22 	bl	800a268 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800162e:	2201      	movs	r2, #1
 8001630:	4619      	mov	r1, r3
 8001632:	f004 f97b 	bl	800592c <HAL_GPIO_WritePin>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_ZN9SX126xHal10ReadBufferEhPhh>:

void SX126xHal::ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	461a      	mov	r2, r3
 800164a:	460b      	mov	r3, r1
 800164c:	72fb      	strb	r3, [r7, #11]
 800164e:	4613      	mov	r3, r2
 8001650:	72bb      	strb	r3, [r7, #10]
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_RESET);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	f004 f964 	bl	800592c <HAL_GPIO_WritePin>
    uint8_t header[2] = {RADIO_READ_BUFFER, offset};
 8001664:	2300      	movs	r3, #0
 8001666:	82bb      	strh	r3, [r7, #20]
 8001668:	231e      	movs	r3, #30
 800166a:	753b      	strb	r3, [r7, #20]
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	757b      	strb	r3, [r7, #21]
    HAL_SPI_Transmit(hspi, header, 2, HAL_MAX_DELAY);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001674:	f107 0114 	add.w	r1, r7, #20
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
 800167c:	2202      	movs	r2, #2
 800167e:	f008 fdf3 	bl	800a268 <HAL_SPI_Transmit>
    uint8_t dummy = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	74fb      	strb	r3, [r7, #19]
    HAL_SPI_Transmit(hspi, &dummy, 1, HAL_MAX_DELAY);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800168a:	f107 0113 	add.w	r1, r7, #19
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	2201      	movs	r2, #1
 8001694:	f008 fde8 	bl	800a268 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, size, HAL_MAX_DELAY);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800169c:	7abb      	ldrb	r3, [r7, #10]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	f008 ffef 	bl	800a688 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(nssPort, nssPin, GPIO_PIN_SET);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80016b4:	2201      	movs	r2, #1
 80016b6:	4619      	mov	r1, r3
 80016b8:	f004 f938 	bl	800592c <HAL_GPIO_WritePin>
}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_ZN9SX126xHal12GetDioStatusEv>:

uint8_t SX126xHal::GetDioStatus(void) {
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
    return (HAL_GPIO_ReadPin(dio3Port, dio3Pin) << 3) | (HAL_GPIO_ReadPin(dio2Port, dio2Pin) << 2) |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80016d6:	4619      	mov	r1, r3
 80016d8:	4610      	mov	r0, r2
 80016da:	f004 f90f 	bl	80058fc <HAL_GPIO_ReadPin>
 80016de:	4603      	mov	r3, r0
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	b25c      	sxtb	r4, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80016ee:	4619      	mov	r1, r3
 80016f0:	4610      	mov	r0, r2
 80016f2:	f004 f903 	bl	80058fc <HAL_GPIO_ReadPin>
 80016f6:	4603      	mov	r3, r0
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	4323      	orrs	r3, r4
 80016fe:	b25c      	sxtb	r4, r3
           (HAL_GPIO_ReadPin(dio1Port, dio1Pin) << 1) | (HAL_GPIO_ReadPin(busyPort, busyPin));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800170a:	4619      	mov	r1, r3
 800170c:	4610      	mov	r0, r2
 800170e:	f004 f8f5 	bl	80058fc <HAL_GPIO_ReadPin>
 8001712:	4603      	mov	r3, r0
 8001714:	005b      	lsls	r3, r3, #1
    return (HAL_GPIO_ReadPin(dio3Port, dio3Pin) << 3) | (HAL_GPIO_ReadPin(dio2Port, dio2Pin) << 2) |
 8001716:	b25b      	sxtb	r3, r3
 8001718:	4323      	orrs	r3, r4
 800171a:	b25c      	sxtb	r4, r3
           (HAL_GPIO_ReadPin(dio1Port, dio1Pin) << 1) | (HAL_GPIO_ReadPin(busyPort, busyPin));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001726:	4619      	mov	r1, r3
 8001728:	4610      	mov	r0, r2
 800172a:	f004 f8e7 	bl	80058fc <HAL_GPIO_ReadPin>
 800172e:	4603      	mov	r3, r0
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4323      	orrs	r3, r4
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2db      	uxtb	r3, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bd90      	pop	{r4, r7, pc}

08001740 <_ZN9SX126xHal13GetDeviceTypeEv>:

uint8_t SX126xHal::GetDeviceType(void) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
        return SX1262;
 8001748:	2301      	movs	r3, #1
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_ZN9SX126xHal13GetFreqSelectEv>:

uint8_t SX126xHal::GetFreqSelect(void) {
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
        return MATCHING_FREQ_868;
 800175e:	2306      	movs	r3, #6
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_ZN9SX126xHal7AntSwOnEv>:

void SX126xHal::AntSwOn(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(antSwPort, antSwPin, GPIO_PIN_SET);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800177e:	2201      	movs	r2, #1
 8001780:	4619      	mov	r1, r3
 8001782:	f004 f8d3 	bl	800592c <HAL_GPIO_WritePin>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <_ZN9SX126xHal8AntSwOffEv>:

void SX126xHal::AntSwOff(void) {
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(antSwPort, antSwPin, GPIO_PIN_RESET);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80017a0:	2200      	movs	r2, #0
 80017a2:	4619      	mov	r1, r3
 80017a4:	f004 f8c2 	bl	800592c <HAL_GPIO_WritePin>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_ZN9SX126xHal13InvokeHandlerEv>:

// Method to invoke the handler
void SX126xHal::InvokeHandler(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	if (this->dio1IrqHandler) { // Check if the handler is set
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <_ZN9SX126xHal13InvokeHandlerEv+0x20>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <_ZN9SX126xHal13InvokeHandlerEv+0x20>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <_ZN9SX126xHal13InvokeHandlerEv+0x22>
 80017d0:	2300      	movs	r3, #0
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d01a      	beq.n	800180c <_ZN9SX126xHal13InvokeHandlerEv+0x5c>
		(this->*dio1IrqHandler)(); // Call the member function
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017dc:	1052      	asrs	r2, r2, #1
 80017de:	1899      	adds	r1, r3, r2
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <_ZN9SX126xHal13InvokeHandlerEv+0x42>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f0:	e009      	b.n	8001806 <_ZN9SX126xHal13InvokeHandlerEv+0x56>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017f8:	1052      	asrs	r2, r2, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001802:	4413      	add	r3, r2
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4608      	mov	r0, r1
 8001808:	4798      	blx	r3
    } else {
    	printf("No IRQ handler assigned!");
    }
}
 800180a:	e002      	b.n	8001812 <_ZN9SX126xHal13InvokeHandlerEv+0x62>
    	printf("No IRQ handler assigned!");
 800180c:	4803      	ldr	r0, [pc, #12]	@ (800181c <_ZN9SX126xHal13InvokeHandlerEv+0x6c>)
 800180e:	f00b fb41 	bl	800ce94 <iprintf>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	080106e8 	.word	0x080106e8

08001820 <_ZN6SX126x4InitEv>:
 */
static bool ImageCalibrated = false;


void SX126x::Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
    CalibrationParams_t calibParam;

    Reset();
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3308      	adds	r3, #8
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
    /*
    uint32_t value = ReadReg(0x08D8);
    value = value | 0x1E;
    WriteReg(0x08D8, value);
	*/
    IoIrqInit(dioIrq);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3330      	adds	r3, #48	@ 0x30
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	322c      	adds	r2, #44	@ 0x2c
 8001840:	ca06      	ldmia	r2, {r1, r2}
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3

    Wakeup();
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	333c      	adds	r3, #60	@ 0x3c
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	4798      	blx	r3
    SetStandby(STDBY_RC);
 8001852:	2100      	movs	r1, #0
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f8ed 	bl	8001a34 <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t>

    // Configure TCXO or XTAL based on hardware detection logic

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 800185a:	2101      	movs	r1, #1
 800185c:	4820      	ldr	r0, [pc, #128]	@ (80018e0 <_ZN6SX126x4InitEv+0xc0>)
 800185e:	f004 f84d 	bl	80058fc <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <_ZN6SX126x4InitEv+0x6a>
    {
        SetDio3AsTcxoCtrl(TCXO_CTRL_1_7V, 320); // 5 ms
 8001872:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001876:	2101      	movs	r1, #1
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f9b7 	bl	8001bec <_ZN6SX126x17SetDio3AsTcxoCtrlE22RadioTcxoCtrlVoltage_tm>
        calibParam.Value = 0x7F;
 800187e:	237f      	movs	r3, #127	@ 0x7f
 8001880:	733b      	strb	r3, [r7, #12]
        Calibrate(calibParam);
 8001882:	7b39      	ldrb	r1, [r7, #12]
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f913 	bl	8001ab0 <_ZN6SX126x9CalibrateE19CalibrationParams_t>
    }

    SetPollingMode();
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fce0 	bl	8002250 <_ZN6SX126x14SetPollingModeEv>

    AntSwOn();
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	334c      	adds	r3, #76	@ 0x4c
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	4798      	blx	r3
    SetDio2AsRfSwitchCtrl(true);
 800189c:	2101      	movs	r1, #1
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f991 	bl	8001bc6 <_ZN6SX126x21SetDio2AsRfSwitchCtrlEh>

    OperatingMode = MODE_STDBY_RC;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    SetPacketType(PACKET_TYPE_LORA);
 80018ac:	2101      	movs	r1, #1
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f9fa 	bl	8001ca8 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>

#ifdef USE_CONFIG_PUBLIC_NETWORK
    WriteReg(REG_LR_SYNCWORD, (LORA_MAC_PUBLIC_SYNCWORD >> 8) & 0xFF);
    WriteReg(REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF);
#else
    WriteReg(REG_LR_SYNCWORD, (LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	331c      	adds	r3, #28
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2214      	movs	r2, #20
 80018be:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
    WriteReg(REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	331c      	adds	r3, #28
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2224      	movs	r2, #36	@ 0x24
 80018d0:	f240 7141 	movw	r1, #1857	@ 0x741
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4798      	blx	r3
#endif
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	42020400 	.word	0x42020400

080018e4 <_ZN6SX126x16CheckDeviceReadyEv>:
{

}

void SX126x::CheckDeviceReady(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    if ((GetOperatingMode() == MODE_SLEEP) || (GetOperatingMode() == MODE_RX_DC))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3334      	adds	r3, #52	@ 0x34
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	4798      	blx	r3
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <_ZN6SX126x16CheckDeviceReadyEv+0x2c>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3334      	adds	r3, #52	@ 0x34
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	4798      	blx	r3
 800190a:	4603      	mov	r3, r0
 800190c:	2b06      	cmp	r3, #6
 800190e:	d101      	bne.n	8001914 <_ZN6SX126x16CheckDeviceReadyEv+0x30>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <_ZN6SX126x16CheckDeviceReadyEv+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <_ZN6SX126x16CheckDeviceReadyEv+0x4e>
    {
        Wakeup();
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	333c      	adds	r3, #60	@ 0x3c
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	4798      	blx	r3
        AntSwOn();
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	334c      	adds	r3, #76	@ 0x4c
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
    }
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_ZN6SX126x16GetOperatingModeEv>:

RadioOperatingModes_t SX126x::GetOperatingMode( void )
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
    return OperatingMode;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_ZN6SX126x10GetPayloadEPhS0_h>:
{
    WriteBuffer( 0x00, payload, size );
}

uint8_t SX126x::GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	70fb      	strb	r3, [r7, #3]
    uint8_t offset = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	75fb      	strb	r3, [r7, #23]

    GetRxBufferStatus( size, &offset );
 8001966:	f107 0317 	add.w	r3, r7, #23
 800196a:	461a      	mov	r2, r3
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 fba5 	bl	80020be <_ZN6SX126x17GetRxBufferStatusEPhS0_>
    if( *size > maxSize )
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	429a      	cmp	r2, r3
 800197c:	d201      	bcs.n	8001982 <_ZN6SX126x10GetPayloadEPhS0_h+0x2e>
    {
        return 1;
 800197e:	2301      	movs	r3, #1
 8001980:	e00a      	b.n	8001998 <_ZN6SX126x10GetPayloadEPhS0_h+0x44>
    }
    ReadBuffer( offset, buffer, *size );
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	332c      	adds	r3, #44	@ 0x2c
 8001988:	681c      	ldr	r4, [r3, #0]
 800198a:	7df9      	ldrb	r1, [r7, #23]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	47a0      	blx	r4
    return 0;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd90      	pop	{r4, r7, pc}

080019a0 <_ZN6SX126x10SetCrcSeedEt>:
    WriteRegister( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SX126x::SetCrcSeed( uint16_t seed )
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80019ac:	887b      	ldrh	r3, [r7, #2]
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80019b6:	887b      	ldrh	r3, [r7, #2]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	737b      	strb	r3, [r7, #13]

    switch( GetPacketType( ) )
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f98a 	bl	8001cd6 <_ZN6SX126x13GetPacketTypeEv>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10b      	bne.n	80019e0 <_ZN6SX126x10SetCrcSeedEt+0x40>
    {
        case PACKET_TYPE_GFSK:
            WriteRegister( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3318      	adds	r3, #24
 80019ce:	681c      	ldr	r4, [r3, #0]
 80019d0:	f107 020c 	add.w	r2, r7, #12
 80019d4:	2302      	movs	r3, #2
 80019d6:	f240 61bc 	movw	r1, #1724	@ 0x6bc
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	47a0      	blx	r4
            break;
 80019de:	e000      	b.n	80019e2 <_ZN6SX126x10SetCrcSeedEt+0x42>

        default:
            break;
 80019e0:	bf00      	nop
    }
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd90      	pop	{r4, r7, pc}

080019ea <_ZN6SX126x16SetCrcPolynomialEt>:

void SX126x::SetCrcPolynomial( uint16_t polynomial )
{
 80019ea:	b590      	push	{r4, r7, lr}
 80019ec:	b085      	sub	sp, #20
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80019f6:	887b      	ldrh	r3, [r7, #2]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	737b      	strb	r3, [r7, #13]

    switch( GetPacketType( ) )
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f965 	bl	8001cd6 <_ZN6SX126x13GetPacketTypeEv>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10b      	bne.n	8001a2a <_ZN6SX126x16SetCrcPolynomialEt+0x40>
    {
        case PACKET_TYPE_GFSK:
            WriteRegister( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	3318      	adds	r3, #24
 8001a18:	681c      	ldr	r4, [r3, #0]
 8001a1a:	f107 020c 	add.w	r2, r7, #12
 8001a1e:	2302      	movs	r3, #2
 8001a20:	f240 61be 	movw	r1, #1726	@ 0x6be
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	47a0      	blx	r4
            break;
 8001a28:	e000      	b.n	8001a2c <_ZN6SX126x16SetCrcPolynomialEt+0x42>

        default:
            break;
 8001a2a:	bf00      	nop
    }
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}

08001a34 <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t>:
    WriteCommand(RADIO_SET_SLEEP, &sleepConfig.Value, 1);
    OperatingMode = MODE_SLEEP;
}

void SX126x::SetStandby(RadioStandbyModes_t standbyConfig)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	70fb      	strb	r3, [r7, #3]
    WriteCommand(RADIO_SET_STANDBY, (uint8_t *)&standbyConfig, 1);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3310      	adds	r3, #16
 8001a46:	681c      	ldr	r4, [r3, #0]
 8001a48:	1cfa      	adds	r2, r7, #3
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	2180      	movs	r1, #128	@ 0x80
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	47a0      	blx	r4
    OperatingMode = (standbyConfig == STDBY_RC) ? MODE_STDBY_RC : MODE_STDBY_XOSC;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t+0x28>
 8001a58:	2201      	movs	r2, #1
 8001a5a:	e000      	b.n	8001a5e <_ZN6SX126x10SetStandbyE19RadioStandbyModes_t+0x2a>
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}

08001a6c <_ZN6SX126x5SetRxEm>:
    buf[2] = ( uint8_t )( timeout & 0xFF );
    WriteCommand( RADIO_SET_RX, buf, 3 );
}

void SX126x::SetRx(uint32_t timeout)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2205      	movs	r2, #5
 8001a7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t)(timeout & 0xFF);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	73bb      	strb	r3, [r7, #14]
    WriteCommand(RADIO_SET_RX, buf, 3);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3310      	adds	r3, #16
 8001a9a:	681c      	ldr	r4, [r3, #0]
 8001a9c:	f107 020c 	add.w	r2, r7, #12
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	2182      	movs	r1, #130	@ 0x82
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	47a0      	blx	r4
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}

08001ab0 <_ZN6SX126x9CalibrateE19CalibrationParams_t>:
#endif
    WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}

void SX126x::Calibrate( CalibrationParams_t calibParam )
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	7039      	strb	r1, [r7, #0]
    WriteCommand( RADIO_CALIBRATE, &calibParam.Value, 1 );
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3310      	adds	r3, #16
 8001ac0:	681c      	ldr	r4, [r3, #0]
 8001ac2:	463a      	mov	r2, r7
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	2189      	movs	r1, #137	@ 0x89
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	47a0      	blx	r4
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}

08001ad4 <_ZN6SX126x11SetPaConfigEhhhh>:
    }
    WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
}

void SX126x::SetPaConfig( uint8_t paDutyCycle, uint8_t HpMax, uint8_t deviceSel, uint8_t paLUT )
{
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	4608      	mov	r0, r1
 8001ade:	4611      	mov	r1, r2
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	70fb      	strb	r3, [r7, #3]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	70bb      	strb	r3, [r7, #2]
 8001aea:	4613      	mov	r3, r2
 8001aec:	707b      	strb	r3, [r7, #1]

#ifdef ADV_DEBUG
    printf("SetPaConfig ");
#endif

    buf[0] = paDutyCycle;
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	733b      	strb	r3, [r7, #12]
    buf[1] = HpMax;
 8001af2:	78bb      	ldrb	r3, [r7, #2]
 8001af4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8001af6:	787b      	ldrb	r3, [r7, #1]
 8001af8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLUT;
 8001afa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001afe:	73fb      	strb	r3, [r7, #15]
    WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3310      	adds	r3, #16
 8001b06:	681c      	ldr	r4, [r3, #0]
 8001b08:	f107 020c 	add.w	r2, r7, #12
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	2195      	movs	r1, #149	@ 0x95
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	47a0      	blx	r4
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd90      	pop	{r4, r7, pc}

08001b1c <_ZN6SX126x15SetDioIrqParamsEtttt>:
{
    WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SX126x::SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	4608      	mov	r0, r1
 8001b26:	4611      	mov	r1, r2
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	817b      	strh	r3, [r7, #10]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	813b      	strh	r3, [r7, #8]
 8001b32:	4613      	mov	r3, r2
 8001b34:	80fb      	strh	r3, [r7, #6]

#ifdef ADV_DEBUG
    printf("SetDioIrqParams ");
#endif

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8001b36:	897b      	ldrh	r3, [r7, #10]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	743b      	strb	r3, [r7, #16]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8001b40:	897b      	ldrh	r3, [r7, #10]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8001b46:	893b      	ldrh	r3, [r7, #8]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001b50:	893b      	ldrh	r3, [r7, #8]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8001b66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	75bb      	strb	r3, [r7, #22]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001b70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	75fb      	strb	r3, [r7, #23]
    WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3310      	adds	r3, #16
 8001b7c:	681c      	ldr	r4, [r3, #0]
 8001b7e:	f107 0210 	add.w	r2, r7, #16
 8001b82:	2308      	movs	r3, #8
 8001b84:	2108      	movs	r1, #8
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	47a0      	blx	r4
}
 8001b8a:	bf00      	nop
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}

08001b92 <_ZN6SX126x12GetIrqStatusEv>:

uint16_t SX126x::GetIrqStatus( void )
{
 8001b92:	b590      	push	{r4, r7, lr}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
    uint8_t irqStatus[2];

    ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3314      	adds	r3, #20
 8001ba0:	681c      	ldr	r4, [r3, #0]
 8001ba2:	f107 020c 	add.w	r2, r7, #12
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	2112      	movs	r1, #18
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	47a0      	blx	r4
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 8001bae:	7b3b      	ldrb	r3, [r7, #12]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	7b7b      	ldrb	r3, [r7, #13]
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	b29b      	uxth	r3, r3
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd90      	pop	{r4, r7, pc}

08001bc6 <_ZN6SX126x21SetDio2AsRfSwitchCtrlEh>:

void SX126x::SetDio2AsRfSwitchCtrl( uint8_t enable )
{
 8001bc6:	b590      	push	{r4, r7, lr}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	70fb      	strb	r3, [r7, #3]
#ifdef ADV_DEBUG
    printf("SetDio2AsRfSwitchCtrl ");
#endif
    WriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3310      	adds	r3, #16
 8001bd8:	681c      	ldr	r4, [r3, #0]
 8001bda:	1cfa      	adds	r2, r7, #3
 8001bdc:	2301      	movs	r3, #1
 8001bde:	219d      	movs	r1, #157	@ 0x9d
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	47a0      	blx	r4
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}

08001bec <_ZN6SX126x17SetDio3AsTcxoCtrlE22RadioTcxoCtrlVoltage_tm>:

void SX126x::SetDio3AsTcxoCtrl(RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8001bfa:	7afb      	ldrb	r3, [r7, #11]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	753b      	strb	r3, [r7, #20]
    buf[1] = (uint8_t)((timeout >> 16) & 0xFF);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	0c1b      	lsrs	r3, r3, #16
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	757b      	strb	r3, [r7, #21]
    buf[2] = (uint8_t)((timeout >> 8) & 0xFF);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	75bb      	strb	r3, [r7, #22]
    buf[3] = (uint8_t)(timeout & 0xFF);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	75fb      	strb	r3, [r7, #23]
    WriteCommand(RADIO_SET_TCXOMODE, buf, 4);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3310      	adds	r3, #16
 8001c20:	681c      	ldr	r4, [r3, #0]
 8001c22:	f107 0214 	add.w	r2, r7, #20
 8001c26:	2304      	movs	r3, #4
 8001c28:	2197      	movs	r1, #151	@ 0x97
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	47a0      	blx	r4
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}
	...

08001c38 <_ZN6SX126x14SetRfFrequencyEm>:

void SX126x::SetRfFrequency(uint32_t frequency)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
    uint8_t buf[4];
    uint32_t freq = (uint32_t)((double)frequency / (double)FREQ_STEP);
 8001c42:	6838      	ldr	r0, [r7, #0]
 8001c44:	f7fe fc6e 	bl	8000524 <__aeabi_ui2d>
 8001c48:	a315      	add	r3, pc, #84	@ (adr r3, 8001ca0 <_ZN6SX126x14SetRfFrequencyEm+0x68>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	f7fe fe0d 	bl	800086c <__aeabi_ddiv>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ffb5 	bl	8000bc8 <__aeabi_d2uiz>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	60fb      	str	r3, [r7, #12]

    buf[0] = (uint8_t)((freq >> 24) & 0xFF);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	0e1b      	lsrs	r3, r3, #24
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)((freq >> 16) & 0xFF);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	0c1b      	lsrs	r3, r3, #16
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	727b      	strb	r3, [r7, #9]
    buf[2] = (uint8_t)((freq >> 8) & 0xFF);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	72bb      	strb	r3, [r7, #10]
    buf[3] = (uint8_t)(freq & 0xFF);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	72fb      	strb	r3, [r7, #11]
    WriteCommand(RADIO_SET_RFFREQUENCY, buf, 4);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3310      	adds	r3, #16
 8001c86:	681c      	ldr	r4, [r3, #0]
 8001c88:	f107 0208 	add.w	r2, r7, #8
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	2186      	movs	r1, #134	@ 0x86
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	47a0      	blx	r4
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd90      	pop	{r4, r7, pc}
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	00000000 	.word	0x00000000
 8001ca4:	3fee8480 	.word	0x3fee8480

08001ca8 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>:

void SX126x::SetPacketType( RadioPacketTypes_t packetType )
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
#ifdef ADV_DEBUG
    printf("SetPacketType ");
#endif

    // Save packet type internally to avoid questioning the radio
    this->PacketType = packetType;
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	3310      	adds	r3, #16
 8001cc2:	681c      	ldr	r4, [r3, #0]
 8001cc4:	1cfa      	adds	r2, r7, #3
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	218a      	movs	r1, #138	@ 0x8a
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	47a0      	blx	r4
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd90      	pop	{r4, r7, pc}

08001cd6 <_ZN6SX126x13GetPacketTypeEv>:

RadioPacketTypes_t SX126x::GetPacketType( void )
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
    return this->PacketType;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <_ZN6SX126x11SetTxParamsEa16RadioRampTimes_t>:

void SX126x::SetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	70fb      	strb	r3, [r7, #3]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];

	SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8001d00:	2301      	movs	r3, #1
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2300      	movs	r3, #0
 8001d06:	2207      	movs	r2, #7
 8001d08:	2104      	movs	r1, #4
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fee2 	bl	8001ad4 <_ZN6SX126x11SetPaConfigEhhhh>
	power = 22;
 8001d10:	2316      	movs	r3, #22
 8001d12:	70fb      	strb	r3, [r7, #3]
	WriteReg( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	331c      	adds	r3, #28
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2238      	movs	r2, #56	@ 0x38
 8001d1e:	f640 01e7 	movw	r1, #2279	@ 0x8e7
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	4798      	blx	r3
	buf[0] = power;
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	733b      	strb	r3, [r7, #12]
	buf[1] = RADIO_RAMP_200_US;
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	737b      	strb	r3, [r7, #13]

	WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	3310      	adds	r3, #16
 8001d34:	681c      	ldr	r4, [r3, #0]
 8001d36:	f107 020c 	add.w	r2, r7, #12
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	218e      	movs	r1, #142	@ 0x8e
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	47a0      	blx	r4
}
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd90      	pop	{r4, r7, pc}
 8001d4a:	0000      	movs	r0, r0
 8001d4c:	0000      	movs	r0, r0
	...

08001d50 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t>:

void SX126x::SetModulationParams( ModulationParams_t *modulationParams )
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    uint8_t n;
    uint32_t tempVal = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001d5e:	4a72      	ldr	r2, [pc, #456]	@ (8001f28 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1d8>)
 8001d60:	f107 0308 	add.w	r3, r7, #8
 8001d64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d68:	e883 0003 	stmia.w	r3, {r0, r1}
    printf("SetModulationParams ");
#endif

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != modulationParams->PacketType )
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d005      	beq.n	8001d86 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x36>
    {
        this->SetPacketType( modulationParams->PacketType );
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff91 	bl	8001ca8 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( modulationParams->PacketType )
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x44>
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d04e      	beq.n	8001e30 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0xe0>
        buf[2] = modulationParams->Params.LoRa.CodingRate;
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
        break;
    default:
    case PACKET_TYPE_NONE:
        return;
 8001d92:	e0be      	b.n	8001f12 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1c2>
        n = 8;
 8001d94:	2308      	movs	r3, #8
 8001d96:	75fb      	strb	r3, [r7, #23]
        tempVal = ( uint32_t )( 32 * ( ( double )XTAL_FREQ / ( double )modulationParams->Params.Gfsk.BitRate ) );
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbc1 	bl	8000524 <__aeabi_ui2d>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	a15c      	add	r1, pc, #368	@ (adr r1, 8001f18 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1c8>)
 8001da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dac:	f7fe fd5e 	bl	800086c <__aeabi_ddiv>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8001f2c <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1dc>)
 8001dbe:	f7fe fc2b 	bl	8000618 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe fefd 	bl	8000bc8 <__aeabi_d2uiz>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	613b      	str	r3, [r7, #16]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	7b1b      	ldrb	r3, [r3, #12]
 8001dec:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	7b5b      	ldrb	r3, [r3, #13]
 8001df2:	733b      	strb	r3, [r7, #12]
        tempVal = ( uint32_t )( ( double )modulationParams->Params.Gfsk.Fdev / ( double )FREQ_STEP );
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fb93 	bl	8000524 <__aeabi_ui2d>
 8001dfe:	a348      	add	r3, pc, #288	@ (adr r3, 8001f20 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1d0>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe fd32 	bl	800086c <__aeabi_ddiv>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe feda 	bl	8000bc8 <__aeabi_d2uiz>
 8001e14:	4603      	mov	r3, r0
 8001e16:	613b      	str	r3, [r7, #16]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	0c1b      	lsrs	r3, r3, #16
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	73fb      	strb	r3, [r7, #15]
        break;
 8001e2e:	e065      	b.n	8001efc <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x1ac>
        n = 4;
 8001e30:	2304      	movs	r3, #4
 8001e32:	75fb      	strb	r3, [r7, #23]
        switch( modulationParams->Params.LoRa.Bandwidth )
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	7c5b      	ldrb	r3, [r3, #17]
 8001e38:	2b0a      	cmp	r3, #10
 8001e3a:	d851      	bhi.n	8001ee0 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x190>
 8001e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e44 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0xf4>)
 8001e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e42:	bf00      	nop
 8001e44:	08001ed9 	.word	0x08001ed9
 8001e48:	08001ed9 	.word	0x08001ed9
 8001e4c:	08001ed9 	.word	0x08001ed9
 8001e50:	08001ea9 	.word	0x08001ea9
 8001e54:	08001e91 	.word	0x08001e91
 8001e58:	08001e79 	.word	0x08001e79
 8001e5c:	08001e71 	.word	0x08001e71
 8001e60:	08001ee1 	.word	0x08001ee1
 8001e64:	08001ed9 	.word	0x08001ed9
 8001e68:	08001ed9 	.word	0x08001ed9
 8001e6c:	08001ec1 	.word	0x08001ec1
                 modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	74da      	strb	r2, [r3, #19]
                break;
 8001e76:	e034      	b.n	8001ee2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                if( modulationParams->Params.LoRa.SpreadingFactor == 12 )
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	7c1b      	ldrb	r3, [r3, #16]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	d103      	bne.n	8001e88 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x138>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2201      	movs	r2, #1
 8001e84:	74da      	strb	r2, [r3, #19]
                break;
 8001e86:	e02c      	b.n	8001ee2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	74da      	strb	r2, [r3, #19]
                break;
 8001e8e:	e028      	b.n	8001ee2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                if( modulationParams->Params.LoRa.SpreadingFactor >= 11 )
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	7c1b      	ldrb	r3, [r3, #16]
 8001e94:	2b0a      	cmp	r3, #10
 8001e96:	d903      	bls.n	8001ea0 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x150>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	74da      	strb	r2, [r3, #19]
                break;
 8001e9e:	e020      	b.n	8001ee2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	74da      	strb	r2, [r3, #19]
                break;
 8001ea6:	e01c      	b.n	8001ee2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                if( modulationParams->Params.LoRa.SpreadingFactor >= 10 )
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	7c1b      	ldrb	r3, [r3, #16]
 8001eac:	2b09      	cmp	r3, #9
 8001eae:	d903      	bls.n	8001eb8 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x168>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	74da      	strb	r2, [r3, #19]
                break;
 8001eb6:	e014      	b.n	8001ee2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	74da      	strb	r2, [r3, #19]
                break;
 8001ebe:	e010      	b.n	8001ee2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                if( modulationParams->Params.LoRa.SpreadingFactor >= 9 )
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	7c1b      	ldrb	r3, [r3, #16]
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d903      	bls.n	8001ed0 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x180>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	74da      	strb	r2, [r3, #19]
                break;
 8001ece:	e008      	b.n	8001ee2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	74da      	strb	r2, [r3, #19]
                break;
 8001ed6:	e004      	b.n	8001ee2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2201      	movs	r2, #1
 8001edc:	74da      	strb	r2, [r3, #19]
                break;
 8001ede:	e000      	b.n	8001ee2 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t+0x192>
                break;
 8001ee0:	bf00      	nop
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	7c1b      	ldrb	r3, [r3, #16]
 8001ee6:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	7c5b      	ldrb	r3, [r3, #17]
 8001eec:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	7c9b      	ldrb	r3, [r3, #18]
 8001ef2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	7cdb      	ldrb	r3, [r3, #19]
 8001ef8:	72fb      	strb	r3, [r7, #11]
        break;
 8001efa:	bf00      	nop
    }
    WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3310      	adds	r3, #16
 8001f02:	681c      	ldr	r4, [r3, #0]
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	f107 0208 	add.w	r2, r7, #8
 8001f0c:	218b      	movs	r1, #139	@ 0x8b
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	47a0      	blx	r4
}
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd90      	pop	{r4, r7, pc}
 8001f18:	00000000 	.word	0x00000000
 8001f1c:	417e8480 	.word	0x417e8480
 8001f20:	00000000 	.word	0x00000000
 8001f24:	3fee8480 	.word	0x3fee8480
 8001f28:	08010704 	.word	0x08010704
 8001f2c:	40400000 	.word	0x40400000

08001f30 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t>:

void SX126x::SetPacketParams( PacketParams_t *packetParams )
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
    uint8_t n;
    uint8_t crcVal = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001f3e:	4a47      	ldr	r2, [pc, #284]	@ (800205c <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x12c>)
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f46:	c303      	stmia	r3!, {r0, r1}
 8001f48:	701a      	strb	r2, [r3, #0]
    printf("SetPacketParams ");
#endif

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != packetParams->PacketType )
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d005      	beq.n	8001f64 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x34>
    {
        this->SetPacketType( packetParams->PacketType );
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff fea2 	bl	8001ca8 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( packetParams->PacketType )
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x42>
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d04e      	beq.n	800200e <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0xde>
        buf[4] = packetParams->Params.LoRa.CrcMode;
        buf[5] = packetParams->Params.LoRa.InvertIQ;
        break;
    default:
    case PACKET_TYPE_NONE:
        return;
 8001f70:	e071      	b.n	8002056 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x126>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	7a5b      	ldrb	r3, [r3, #9]
 8001f76:	2bf1      	cmp	r3, #241	@ 0xf1
 8001f78:	d10c      	bne.n	8001f94 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x64>
            SetCrcSeed( CRC_IBM_SEED );
 8001f7a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fd0e 	bl	80019a0 <_ZN6SX126x10SetCrcSeedEt>
            SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8001f84:	f248 0105 	movw	r1, #32773	@ 0x8005
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fd2e 	bl	80019ea <_ZN6SX126x16SetCrcPolynomialEt>
            crcVal = RADIO_CRC_2_BYTES;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	75bb      	strb	r3, [r7, #22]
 8001f92:	e013      	b.n	8001fbc <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x8c>
        else if(  packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	7a5b      	ldrb	r3, [r3, #9]
 8001f98:	2bf2      	cmp	r3, #242	@ 0xf2
 8001f9a:	d10c      	bne.n	8001fb6 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x86>
            SetCrcSeed( CRC_CCITT_SEED );
 8001f9c:	f641 510f 	movw	r1, #7439	@ 0x1d0f
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff fcfd 	bl	80019a0 <_ZN6SX126x10SetCrcSeedEt>
            SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8001fa6:	f241 0121 	movw	r1, #4129	@ 0x1021
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fd1d 	bl	80019ea <_ZN6SX126x16SetCrcPolynomialEt>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8001fb0:	2306      	movs	r3, #6
 8001fb2:	75bb      	strb	r3, [r7, #22]
 8001fb4:	e002      	b.n	8001fbc <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x8c>
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	7a5b      	ldrb	r3, [r3, #9]
 8001fba:	75bb      	strb	r3, [r7, #22]
        n = 9;
 8001fbc:	2309      	movs	r3, #9
 8001fbe:	75fb      	strb	r3, [r7, #23]
        packetParams->Params.Gfsk.PreambleLength = packetParams->Params.Gfsk.PreambleLength << 3;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	885b      	ldrh	r3, [r3, #2]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	805a      	strh	r2, [r3, #2]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	885b      	ldrh	r3, [r3, #2]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	885b      	ldrh	r3, [r3, #2]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	791b      	ldrb	r3, [r3, #4]
 8001fe4:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength << 3 ); // convert from byte to bit
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	795b      	ldrb	r3, [r3, #5]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	799b      	ldrb	r3, [r3, #6]
 8001ff4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	79db      	ldrb	r3, [r3, #7]
 8001ffa:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	7a1b      	ldrb	r3, [r3, #8]
 8002000:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8002002:	7dbb      	ldrb	r3, [r7, #22]
 8002004:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	7a9b      	ldrb	r3, [r3, #10]
 800200a:	753b      	strb	r3, [r7, #20]
        break;
 800200c:	e018      	b.n	8002040 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t+0x110>
        n = 6;
 800200e:	2306      	movs	r3, #6
 8002010:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	899b      	ldrh	r3, [r3, #12]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	b29b      	uxth	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	899b      	ldrh	r3, [r3, #12]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.LoRa.HeaderType;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	7b9b      	ldrb	r3, [r3, #14]
 800202a:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	7bdb      	ldrb	r3, [r3, #15]
 8002030:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	7c1b      	ldrb	r3, [r3, #16]
 8002036:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	7c5b      	ldrb	r3, [r3, #17]
 800203c:	747b      	strb	r3, [r7, #17]
        break;
 800203e:	bf00      	nop
    }
    WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3310      	adds	r3, #16
 8002046:	681c      	ldr	r4, [r3, #0]
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	b29b      	uxth	r3, r3
 800204c:	f107 020c 	add.w	r2, r7, #12
 8002050:	218c      	movs	r1, #140	@ 0x8c
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	47a0      	blx	r4
}
 8002056:	371c      	adds	r7, #28
 8002058:	46bd      	mov	sp, r7
 800205a:	bd90      	pop	{r4, r7, pc}
 800205c:	0801070c 	.word	0x0801070c

08002060 <_ZN6SX126x9GetStatusEv>:
    buf[1] = rxBaseAddress;
    WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
}

RadioStatus_t SX126x::GetStatus( void )
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
    uint8_t stat = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]
    RadioStatus_t status;

    ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3314      	adds	r3, #20
 8002072:	681c      	ldr	r4, [r3, #0]
 8002074:	f107 020f 	add.w	r2, r7, #15
 8002078:	2301      	movs	r3, #1
 800207a:	21c0      	movs	r1, #192	@ 0xc0
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	47a0      	blx	r4
    status.Value = stat;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	733b      	strb	r3, [r7, #12]
    return status;
 8002084:	7b3b      	ldrb	r3, [r7, #12]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bd90      	pop	{r4, r7, pc}

0800208e <_ZN6SX126x11GetRssiInstEv>:

int8_t SX126x::GetRssiInst( void )
{
 800208e:	b590      	push	{r4, r7, lr}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
    uint8_t rssi;

    ReadCommand( RADIO_GET_RSSIINST, ( uint8_t* )&rssi, 1 );
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	3314      	adds	r3, #20
 800209c:	681c      	ldr	r4, [r3, #0]
 800209e:	f107 020f 	add.w	r2, r7, #15
 80020a2:	2301      	movs	r3, #1
 80020a4:	2115      	movs	r1, #21
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	47a0      	blx	r4
    return( -( rssi / 2 ) );
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	085b      	lsrs	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	425b      	negs	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	b25b      	sxtb	r3, r3
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd90      	pop	{r4, r7, pc}

080020be <_ZN6SX126x17GetRxBufferStatusEPhS0_>:

void SX126x::GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80020be:	b590      	push	{r4, r7, lr}
 80020c0:	b087      	sub	sp, #28
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
    uint8_t status[2];

    ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3314      	adds	r3, #20
 80020d0:	681c      	ldr	r4, [r3, #0]
 80020d2:	f107 0214 	add.w	r2, r7, #20
 80020d6:	2302      	movs	r3, #2
 80020d8:	2113      	movs	r1, #19
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	47a0      	blx	r4

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( this->GetPacketType( ) == PACKET_TYPE_LORA ) && ( ReadReg( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f7ff fdf9 	bl	8001cd6 <_ZN6SX126x13GetPacketTypeEv>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d10e      	bne.n	8002108 <_ZN6SX126x17GetRxBufferStatusEPhS0_+0x4a>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	3324      	adds	r3, #36	@ 0x24
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f240 7104 	movw	r1, #1796	@ 0x704
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	4798      	blx	r3
 80020fa:	4603      	mov	r3, r0
 80020fc:	09db      	lsrs	r3, r3, #7
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <_ZN6SX126x17GetRxBufferStatusEPhS0_+0x4a>
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <_ZN6SX126x17GetRxBufferStatusEPhS0_+0x4c>
 8002108:	2300      	movs	r3, #0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00c      	beq.n	8002128 <_ZN6SX126x17GetRxBufferStatusEPhS0_+0x6a>
    {
        *payloadLength = ReadReg( REG_LR_PAYLOADLENGTH );
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3324      	adds	r3, #36	@ 0x24
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f240 7102 	movw	r1, #1794	@ 0x702
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	4798      	blx	r3
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e002      	b.n	800212e <_ZN6SX126x17GetRxBufferStatusEPhS0_+0x70>
    }
    else
    {
        *payloadLength = status[0];
 8002128:	7d3a      	ldrb	r2, [r7, #20]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800212e:	7d7a      	ldrb	r2, [r7, #21]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	701a      	strb	r2, [r3, #0]
}
 8002134:	bf00      	nop
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	bd90      	pop	{r4, r7, pc}

0800213c <_ZN6SX126x15GetPacketStatusEP14PacketStatus_t>:

void SX126x::GetPacketStatus( PacketStatus_t *pktStatus )
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
    uint8_t status[3];

    ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3314      	adds	r3, #20
 800214c:	681c      	ldr	r4, [r3, #0]
 800214e:	f107 020c 	add.w	r2, r7, #12
 8002152:	2303      	movs	r3, #3
 8002154:	2114      	movs	r1, #20
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	47a0      	blx	r4

    pktStatus->packetType = this -> GetPacketType( );
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff fdbb 	bl	8001cd6 <_ZN6SX126x13GetPacketTypeEv>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <_ZN6SX126x15GetPacketStatusEP14PacketStatus_t+0x3a>
 8002170:	2b01      	cmp	r3, #1
 8002172:	d017      	beq.n	80021a4 <_ZN6SX126x15GetPacketStatusEP14PacketStatus_t+0x68>
 8002174:	e040      	b.n	80021f8 <_ZN6SX126x15GetPacketStatusEP14PacketStatus_t+0xbc>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8002176:	7b3a      	ldrb	r2, [r7, #12]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] / 2;
 800217c:	7b7b      	ldrb	r3, [r7, #13]
 800217e:	0fda      	lsrs	r2, r3, #31
 8002180:	4413      	add	r3, r2
 8002182:	105b      	asrs	r3, r3, #1
 8002184:	425b      	negs	r3, r3
 8002186:	b25a      	sxtb	r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] / 2;
 800218c:	7bbb      	ldrb	r3, [r7, #14]
 800218e:	0fda      	lsrs	r2, r3, #31
 8002190:	4413      	add	r3, r2
 8002192:	105b      	asrs	r3, r3, #1
 8002194:	425b      	negs	r3, r3
 8002196:	b25a      	sxtb	r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
            break;
 80021a2:	e032      	b.n	800220a <_ZN6SX126x15GetPacketStatusEP14PacketStatus_t+0xce>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] / 2;
 80021a4:	7b3b      	ldrb	r3, [r7, #12]
 80021a6:	0fda      	lsrs	r2, r3, #31
 80021a8:	4413      	add	r3, r2
 80021aa:	105b      	asrs	r3, r3, #1
 80021ac:	425b      	negs	r3, r3
 80021ae:	b25a      	sxtb	r2, r3
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	731a      	strb	r2, [r3, #12]
            ( status[1] < 128 ) ? ( pktStatus->Params.LoRa.SnrPkt = status[1] / 4 ) : ( pktStatus->Params.LoRa.SnrPkt = ( ( status[1] - 256 ) /4 ) );
 80021b4:	7b7b      	ldrb	r3, [r7, #13]
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db06      	blt.n	80021ca <_ZN6SX126x15GetPacketStatusEP14PacketStatus_t+0x8e>
 80021bc:	7b7b      	ldrb	r3, [r7, #13]
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	b25a      	sxtb	r2, r3
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	735a      	strb	r2, [r3, #13]
 80021c8:	e009      	b.n	80021de <_ZN6SX126x15GetPacketStatusEP14PacketStatus_t+0xa2>
 80021ca:	7b7b      	ldrb	r3, [r7, #13]
 80021cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	da00      	bge.n	80021d6 <_ZN6SX126x15GetPacketStatusEP14PacketStatus_t+0x9a>
 80021d4:	3303      	adds	r3, #3
 80021d6:	109b      	asrs	r3, r3, #2
 80021d8:	b25a      	sxtb	r2, r3
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] / 2;
 80021de:	7bbb      	ldrb	r3, [r7, #14]
 80021e0:	0fda      	lsrs	r2, r3, #31
 80021e2:	4413      	add	r3, r2
 80021e4:	105b      	asrs	r3, r3, #1
 80021e6:	425b      	negs	r3, r3
 80021e8:	b25a      	sxtb	r2, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80021ee:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <_ZN6SX126x15GetPacketStatusEP14PacketStatus_t+0xd8>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	611a      	str	r2, [r3, #16]
            break;
 80021f6:	e008      	b.n	800220a <_ZN6SX126x15GetPacketStatusEP14PacketStatus_t+0xce>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 80021f8:	2214      	movs	r2, #20
 80021fa:	2100      	movs	r1, #0
 80021fc:	6838      	ldr	r0, [r7, #0]
 80021fe:	f00a ffc1 	bl	800d184 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	220f      	movs	r2, #15
 8002206:	701a      	strb	r2, [r3, #0]
            break;
 8002208:	bf00      	nop
    }
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bd90      	pop	{r4, r7, pc}
 8002212:	bf00      	nop
 8002214:	20000264 	.word	0x20000264

08002218 <_ZN6SX126x14ClearIrqStatusEt>:
    ReadCommand( RADIO_GET_ERROR, ( uint8_t * )&error, 2 );
    return error;
}

void SX126x::ClearIrqStatus( uint16_t irq )
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];
#ifdef ADV_DEBUG
    printf("ClearIrqStatus ");
#endif
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 8002224:	887b      	ldrh	r3, [r7, #2]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	b29b      	uxth	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 800222e:	887b      	ldrh	r3, [r7, #2]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3310      	adds	r3, #16
 800223a:	681c      	ldr	r4, [r3, #0]
 800223c:	f107 020c 	add.w	r2, r7, #12
 8002240:	2302      	movs	r3, #2
 8002242:	2102      	movs	r1, #2
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	47a0      	blx	r4
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bd90      	pop	{r4, r7, pc}

08002250 <_ZN6SX126x14SetPollingModeEv>:

void SX126x::SetPollingMode( void )
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    this->PollingMode = true;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_ZN6SX126x16SetInterruptModeEv>:

void SX126x::SetInterruptMode( void )
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
    this->PollingMode = false;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_ZN6SX126x8OnDioIrqEv>:

void SX126x::OnDioIrq( void )
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
    /*
     * When polling mode is activated, it is up to the application to call
     * ProcessIrqs( ). Otherwise, the driver automatically calls ProcessIrqs( )
     * on radio interrupt.
     */
    if( this->PollingMode == true )
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002296:	2b01      	cmp	r3, #1
 8002298:	d104      	bne.n	80022a4 <_ZN6SX126x8OnDioIrqEv+0x1c>
    {
        this->IrqState = true;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    }
    else
    {
        this->ProcessIrqs( );
    }
}
 80022a2:	e002      	b.n	80022aa <_ZN6SX126x8OnDioIrqEv+0x22>
        this->ProcessIrqs( );
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f805 	bl	80022b4 <_ZN6SX126x11ProcessIrqsEv>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <_ZN6SX126x11ProcessIrqsEv>:

void SX126x::ProcessIrqs( void )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    if( this->PollingMode == true )
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10d      	bne.n	80022e2 <_ZN6SX126x11ProcessIrqsEv+0x2e>
    {
        if( this->IrqState == true )
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	f040 809d 	bne.w	800240c <_ZN6SX126x11ProcessIrqsEv+0x158>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d2:	b672      	cpsid	i
}
 80022d4:	bf00      	nop
        {
            __disable_irq( );
            this->IrqState = false;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022de:	b662      	cpsie	i
}
 80022e0:	bf00      	nop
        {
            return;
        }
    }

    uint16_t irqRegs = GetIrqStatus( );
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fc55 	bl	8001b92 <_ZN6SX126x12GetIrqStatusEv>
 80022e8:	4603      	mov	r3, r0
 80022ea:	81fb      	strh	r3, [r7, #14]
    ClearIrqStatus( IRQ_RADIO_ALL );
 80022ec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ff91 	bl	8002218 <_ZN6SX126x14ClearIrqStatusEt>

#ifdef ADV_DEBUG
    printf("0x%04x\n\r", irqRegs );
#endif

    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 80022f6:	89fb      	ldrh	r3, [r7, #14]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d02b      	beq.n	8002358 <_ZN6SX126x11ProcessIrqsEv+0xa4>
    {
        // LoRa Only
        FrequencyError = 0x000000 | ( ( 0x0F & ReadReg( REG_FREQUENCY_ERRORBASEADDR ) ) << 16 );
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3324      	adds	r3, #36	@ 0x24
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f240 716b 	movw	r1, #1899	@ 0x76b
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
 8002310:	4603      	mov	r3, r0
 8002312:	041b      	lsls	r3, r3, #16
 8002314:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002318:	4a3e      	ldr	r2, [pc, #248]	@ (8002414 <_ZN6SX126x11ProcessIrqsEv+0x160>)
 800231a:	6013      	str	r3, [r2, #0]
        FrequencyError = FrequencyError | ( ReadReg( REG_FREQUENCY_ERRORBASEADDR + 1 ) << 8 );
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3324      	adds	r3, #36	@ 0x24
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f240 716c 	movw	r1, #1900	@ 0x76c
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4798      	blx	r3
 800232c:	4603      	mov	r3, r0
 800232e:	021a      	lsls	r2, r3, #8
 8002330:	4b38      	ldr	r3, [pc, #224]	@ (8002414 <_ZN6SX126x11ProcessIrqsEv+0x160>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4313      	orrs	r3, r2
 8002336:	4a37      	ldr	r2, [pc, #220]	@ (8002414 <_ZN6SX126x11ProcessIrqsEv+0x160>)
 8002338:	6013      	str	r3, [r2, #0]
        FrequencyError = FrequencyError | ( ReadReg( REG_FREQUENCY_ERRORBASEADDR + 2 ) );
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3324      	adds	r3, #36	@ 0x24
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f240 716d 	movw	r1, #1901	@ 0x76d
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	4798      	blx	r3
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	4b31      	ldr	r3, [pc, #196]	@ (8002414 <_ZN6SX126x11ProcessIrqsEv+0x160>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	4a2f      	ldr	r2, [pc, #188]	@ (8002414 <_ZN6SX126x11ProcessIrqsEv+0x160>)
 8002356:	6013      	str	r3, [r2, #0]
    }

    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 8002358:	89fb      	ldrh	r3, [r7, #14]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <_ZN6SX126x11ProcessIrqsEv+0xbc>
    {
        if( txDone != NULL )
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <_ZN6SX126x11ProcessIrqsEv+0xbc>
        {
            txDone( );
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4798      	blx	r3
        }
    }

    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 8002370:	89fb      	ldrh	r3, [r7, #14]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d014      	beq.n	80023a4 <_ZN6SX126x11ProcessIrqsEv+0xf0>
    {
        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 800237a:	89fb      	ldrh	r3, [r7, #14]
 800237c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <_ZN6SX126x11ProcessIrqsEv+0xe2>
        {
            if( rxError != NULL )
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00b      	beq.n	80023a4 <_ZN6SX126x11ProcessIrqsEv+0xf0>
            {
                rxError( IRQ_CRC_ERROR_CODE );
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	2004      	movs	r0, #4
 8002392:	4798      	blx	r3
 8002394:	e006      	b.n	80023a4 <_ZN6SX126x11ProcessIrqsEv+0xf0>
            }
        }
        else
        {
            if( rxDone != NULL )
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <_ZN6SX126x11ProcessIrqsEv+0xf0>
            {
                rxDone( );
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	4798      	blx	r3
            }
        }
    }

    if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 80023a4:	89fb      	ldrh	r3, [r7, #14]
 80023a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00f      	beq.n	80023ce <_ZN6SX126x11ProcessIrqsEv+0x11a>
    {
        if( cadDone != NULL )
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <_ZN6SX126x11ProcessIrqsEv+0x11a>
        {
            cadDone( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED );
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ba:	89fa      	ldrh	r2, [r7, #14]
 80023bc:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80023c0:	2a00      	cmp	r2, #0
 80023c2:	bf14      	ite	ne
 80023c4:	2201      	movne	r2, #1
 80023c6:	2200      	moveq	r2, #0
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	4610      	mov	r0, r2
 80023cc:	4798      	blx	r3
        }
    }

    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80023ce:	89fb      	ldrh	r3, [r7, #14]
 80023d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01a      	beq.n	800240e <_ZN6SX126x11ProcessIrqsEv+0x15a>
    {
        if( ( txTimeout != NULL ) && ( OperatingMode == MODE_TX ) )
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <_ZN6SX126x11ProcessIrqsEv+0x13e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d103      	bne.n	80023f2 <_ZN6SX126x11ProcessIrqsEv+0x13e>
        {
            txTimeout( );
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	4798      	blx	r3
 80023f0:	e00d      	b.n	800240e <_ZN6SX126x11ProcessIrqsEv+0x15a>
        }
        else if( ( rxTimeout != NULL ) && ( OperatingMode == MODE_RX ) )
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <_ZN6SX126x11ProcessIrqsEv+0x15a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002400:	2b05      	cmp	r3, #5
 8002402:	d104      	bne.n	800240e <_ZN6SX126x11ProcessIrqsEv+0x15a>
        {
            rxTimeout( );
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	4798      	blx	r3
 800240a:	e000      	b.n	800240e <_ZN6SX126x11ProcessIrqsEv+0x15a>
            return;
 800240c:	bf00      	nop
        {
            rxError( IRQ_HEADER_ERROR_CODE );
        }
    }  
*/
}
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000264 	.word	0x20000264

08002418 <Lora_init>:




void Lora_init()
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
	RxState = RECEIVE_PACKET;
 800241c:	4b14      	ldr	r3, [pc, #80]	@ (8002470 <Lora_init+0x58>)
 800241e:	2202      	movs	r2, #2
 8002420:	701a      	strb	r2, [r3, #0]
	Radio.Init();
 8002422:	4814      	ldr	r0, [pc, #80]	@ (8002474 <Lora_init+0x5c>)
 8002424:	f7ff f9fc 	bl	8001820 <_ZN6SX126x4InitEv>
	SetConfiguration(&radioConfiguration);
 8002428:	4813      	ldr	r0, [pc, #76]	@ (8002478 <Lora_init+0x60>)
 800242a:	f000 f92f 	bl	800268c <SetConfiguration>
	ConfigureGeneralRadio(&Radio, &radioConfiguration);
 800242e:	4912      	ldr	r1, [pc, #72]	@ (8002478 <Lora_init+0x60>)
 8002430:	4810      	ldr	r0, [pc, #64]	@ (8002474 <Lora_init+0x5c>)
 8002432:	f000 f975 	bl	8002720 <ConfigureGeneralRadio>
	Radio.SetRx(radioConfiguration.rxTimeout);
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <Lora_init+0x60>)
 8002438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243a:	4619      	mov	r1, r3
 800243c:	480d      	ldr	r0, [pc, #52]	@ (8002474 <Lora_init+0x5c>)
 800243e:	f7ff fb15 	bl	8001a6c <_ZN6SX126x5SetRxEm>

	rxInfo.buffer[0] = 0;
 8002442:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <Lora_init+0x64>)
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
	rxInfo.buffer[1] = 0;
 8002448:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <Lora_init+0x64>)
 800244a:	2200      	movs	r2, #0
 800244c:	705a      	strb	r2, [r3, #1]
	rxInfo.buffer_length = RX_BUFFER_SIZE;
 800244e:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <Lora_init+0x64>)
 8002450:	2202      	movs	r2, #2
 8002452:	709a      	strb	r2, [r3, #2]
	rxInfo.rssi = 0;
 8002454:	4b09      	ldr	r3, [pc, #36]	@ (800247c <Lora_init+0x64>)
 8002456:	2200      	movs	r2, #0
 8002458:	70da      	strb	r2, [r3, #3]
	rxInfo.snr = 0;
 800245a:	4b08      	ldr	r3, [pc, #32]	@ (800247c <Lora_init+0x64>)
 800245c:	2200      	movs	r2, #0
 800245e:	711a      	strb	r2, [r3, #4]
	rxInfo.TxCounter = 0;
 8002460:	4b06      	ldr	r3, [pc, #24]	@ (800247c <Lora_init+0x64>)
 8002462:	2200      	movs	r2, #0
 8002464:	719a      	strb	r2, [r3, #6]
	rxInfo.new_data = false;
 8002466:	4b05      	ldr	r3, [pc, #20]	@ (800247c <Lora_init+0x64>)
 8002468:	2200      	movs	r2, #0
 800246a:	715a      	strb	r2, [r3, #5]
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000024 	.word	0x20000024
 8002474:	200002ac 	.word	0x200002ac
 8002478:	20000268 	.word	0x20000268
 800247c:	20000514 	.word	0x20000514

08002480 <RunRXStateMachine>:
	while(true){
		RunRXStateMachine();
	}
}

void RunRXStateMachine(){
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
	static uint8_t uart_buf = 0;
	static uint8_t led = 0;
	switch(RxState){
 8002484:	4b3d      	ldr	r3, [pc, #244]	@ (800257c <RunRXStateMachine+0xfc>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b04      	cmp	r3, #4
 800248c:	d04b      	beq.n	8002526 <RunRXStateMachine+0xa6>
 800248e:	2b04      	cmp	r3, #4
 8002490:	dc71      	bgt.n	8002576 <RunRXStateMachine+0xf6>
 8002492:	2b02      	cmp	r3, #2
 8002494:	d002      	beq.n	800249c <RunRXStateMachine+0x1c>
 8002496:	2b03      	cmp	r3, #3
 8002498:	d00e      	beq.n	80024b8 <RunRXStateMachine+0x38>

	    	__enable_irq();
	    	break;
	    }
	}
}
 800249a:	e06c      	b.n	8002576 <RunRXStateMachine+0xf6>
			ConfigureRadioRx(&Radio, &radioConfiguration);
 800249c:	4938      	ldr	r1, [pc, #224]	@ (8002580 <RunRXStateMachine+0x100>)
 800249e:	4839      	ldr	r0, [pc, #228]	@ (8002584 <RunRXStateMachine+0x104>)
 80024a0:	f000 f882 	bl	80025a8 <ConfigureRadioRx>
			Radio.SetRx(radioConfiguration.rxTimeout);
 80024a4:	4b36      	ldr	r3, [pc, #216]	@ (8002580 <RunRXStateMachine+0x100>)
 80024a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a8:	4619      	mov	r1, r3
 80024aa:	4836      	ldr	r0, [pc, #216]	@ (8002584 <RunRXStateMachine+0x104>)
 80024ac:	f7ff fade 	bl	8001a6c <_ZN6SX126x5SetRxEm>
			RxState = WAIT_RECEIVE_DONE;
 80024b0:	4b32      	ldr	r3, [pc, #200]	@ (800257c <RunRXStateMachine+0xfc>)
 80024b2:	2203      	movs	r2, #3
 80024b4:	701a      	strb	r2, [r3, #0]
			break;
 80024b6:	e05e      	b.n	8002576 <RunRXStateMachine+0xf6>
			if(radioFlags.rxDone == true){
 80024b8:	4b33      	ldr	r3, [pc, #204]	@ (8002588 <RunRXStateMachine+0x108>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d127      	bne.n	8002510 <RunRXStateMachine+0x90>
				if(++led % 2)
 80024c0:	4b32      	ldr	r3, [pc, #200]	@ (800258c <RunRXStateMachine+0x10c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b30      	ldr	r3, [pc, #192]	@ (800258c <RunRXStateMachine+0x10c>)
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	4b2f      	ldr	r3, [pc, #188]	@ (800258c <RunRXStateMachine+0x10c>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf14      	ite	ne
 80024d8:	2301      	movne	r3, #1
 80024da:	2300      	moveq	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <RunRXStateMachine+0x6e>
					HAL_GPIO_WritePin(SX_LED_TX_GPIO_Port, SX_LED_TX_Pin, GPIO_PIN_SET); // Turn LED ON
 80024e2:	2201      	movs	r2, #1
 80024e4:	2102      	movs	r1, #2
 80024e6:	482a      	ldr	r0, [pc, #168]	@ (8002590 <RunRXStateMachine+0x110>)
 80024e8:	f003 fa20 	bl	800592c <HAL_GPIO_WritePin>
 80024ec:	e007      	b.n	80024fe <RunRXStateMachine+0x7e>
					led = 0;
 80024ee:	4b27      	ldr	r3, [pc, #156]	@ (800258c <RunRXStateMachine+0x10c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(SX_LED_TX_GPIO_Port, SX_LED_TX_Pin, GPIO_PIN_RESET); // Turn LED ON
 80024f4:	2200      	movs	r2, #0
 80024f6:	2102      	movs	r1, #2
 80024f8:	4825      	ldr	r0, [pc, #148]	@ (8002590 <RunRXStateMachine+0x110>)
 80024fa:	f003 fa17 	bl	800592c <HAL_GPIO_WritePin>
				radioFlags.rxDone = false;
 80024fe:	4b22      	ldr	r3, [pc, #136]	@ (8002588 <RunRXStateMachine+0x108>)
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
				RxState = PACKET_RECEIVED;
 8002504:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <RunRXStateMachine+0xfc>)
 8002506:	2204      	movs	r2, #4
 8002508:	701a      	strb	r2, [r3, #0]
				free(rxInfo.buffer);
 800250a:	4822      	ldr	r0, [pc, #136]	@ (8002594 <RunRXStateMachine+0x114>)
 800250c:	f009 fcde 	bl	800becc <free>
			if(radioFlags.rxTimeout == true){
 8002510:	4b1d      	ldr	r3, [pc, #116]	@ (8002588 <RunRXStateMachine+0x108>)
 8002512:	78db      	ldrb	r3, [r3, #3]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d12d      	bne.n	8002574 <RunRXStateMachine+0xf4>
				radioFlags.rxTimeout = false;
 8002518:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <RunRXStateMachine+0x108>)
 800251a:	2200      	movs	r2, #0
 800251c:	70da      	strb	r2, [r3, #3]
				RxState = RECEIVE_PACKET;
 800251e:	4b17      	ldr	r3, [pc, #92]	@ (800257c <RunRXStateMachine+0xfc>)
 8002520:	2202      	movs	r2, #2
 8002522:	701a      	strb	r2, [r3, #0]
			break;
 8002524:	e026      	b.n	8002574 <RunRXStateMachine+0xf4>
  __ASM volatile ("cpsid i" : : : "memory");
 8002526:	b672      	cpsid	i
}
 8002528:	bf00      	nop
	    	Radio.GetPayload( rxInfo.buffer, &rxInfo.buffer_length, RX_BUFFER_SIZE );
 800252a:	2302      	movs	r3, #2
 800252c:	4a1a      	ldr	r2, [pc, #104]	@ (8002598 <RunRXStateMachine+0x118>)
 800252e:	4919      	ldr	r1, [pc, #100]	@ (8002594 <RunRXStateMachine+0x114>)
 8002530:	4814      	ldr	r0, [pc, #80]	@ (8002584 <RunRXStateMachine+0x104>)
 8002532:	f7ff fa0f 	bl	8001954 <_ZN6SX126x10GetPayloadEPhS0_h>
	    	rxInfo.rssi = Radio.GetRssiInst();
 8002536:	4813      	ldr	r0, [pc, #76]	@ (8002584 <RunRXStateMachine+0x104>)
 8002538:	f7ff fda9 	bl	800208e <_ZN6SX126x11GetRssiInstEv>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <RunRXStateMachine+0x114>)
 8002542:	70da      	strb	r2, [r3, #3]
	    	rxInfo.new_data = true;
 8002544:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <RunRXStateMachine+0x114>)
 8002546:	2201      	movs	r2, #1
 8002548:	715a      	strb	r2, [r3, #5]
	    	GetRssiSnr(&rxInfo.rssi, &rxInfo.snr);
 800254a:	4914      	ldr	r1, [pc, #80]	@ (800259c <RunRXStateMachine+0x11c>)
 800254c:	4814      	ldr	r0, [pc, #80]	@ (80025a0 <RunRXStateMachine+0x120>)
 800254e:	f000 f937 	bl	80027c0 <GetRssiSnr>
	    	RxState = RECEIVE_PACKET;
 8002552:	4b0a      	ldr	r3, [pc, #40]	@ (800257c <RunRXStateMachine+0xfc>)
 8002554:	2202      	movs	r2, #2
 8002556:	701a      	strb	r2, [r3, #0]
	    	printf("%d , %d \n", rxInfo.rssi,rxInfo.snr);
 8002558:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <RunRXStateMachine+0x114>)
 800255a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800255e:	4619      	mov	r1, r3
 8002560:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <RunRXStateMachine+0x114>)
 8002562:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002566:	461a      	mov	r2, r3
 8002568:	480e      	ldr	r0, [pc, #56]	@ (80025a4 <RunRXStateMachine+0x124>)
 800256a:	f00a fc93 	bl	800ce94 <iprintf>
  __ASM volatile ("cpsie i" : : : "memory");
 800256e:	b662      	cpsie	i
}
 8002570:	bf00      	nop
	    	break;
 8002572:	e000      	b.n	8002576 <RunRXStateMachine+0xf6>
			break;
 8002574:	bf00      	nop
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000024 	.word	0x20000024
 8002580:	20000268 	.word	0x20000268
 8002584:	200002ac 	.word	0x200002ac
 8002588:	200002a4 	.word	0x200002a4
 800258c:	20000330 	.word	0x20000330
 8002590:	42020800 	.word	0x42020800
 8002594:	20000514 	.word	0x20000514
 8002598:	20000516 	.word	0x20000516
 800259c:	20000518 	.word	0x20000518
 80025a0:	20000517 	.word	0x20000517
 80025a4:	08010718 	.word	0x08010718

080025a8 <ConfigureRadioRx>:

void ConfigureRadioTx(SX126xHal *radio, RadioConfigurations_t *config){
    radio->SetDioIrqParams(config->irqTx, config->irqTx, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
}

void ConfigureRadioRx(SX126xHal *radio, RadioConfigurations_t *config){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
    radio->SetDioIrqParams(config->irqRx, config->irqRx, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	8e59      	ldrh	r1, [r3, #50]	@ 0x32
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80025bc:	2300      	movs	r3, #0
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2300      	movs	r3, #0
 80025c2:	f7ff faab 	bl	8001b1c <_ZN6SX126x15SetDioIrqParamsEtttt>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <OnRxDone>:
void PrepareBuffer(SX126xHal *radio, const Messages_t *messageToSend){
    radio->SetPayload((uint8_t*)messageToSend, MESSAGE_SIZE);
}

void OnRxDone( void )
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SX_LED_RX_GPIO_Port, SX_LED_RX_Pin, GPIO_PIN_SET); // Turn LED On
 80025d4:	2201      	movs	r2, #1
 80025d6:	2101      	movs	r1, #1
 80025d8:	4809      	ldr	r0, [pc, #36]	@ (8002600 <OnRxDone+0x30>)
 80025da:	f003 f9a7 	bl	800592c <HAL_GPIO_WritePin>
    radioFlags.rxDone= true;
 80025de:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <OnRxDone+0x34>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
	Radio.GetPayload( rxInfo.buffer, &rxInfo.buffer_length, RX_BUFFER_SIZE );
 80025e4:	2302      	movs	r3, #2
 80025e6:	4a08      	ldr	r2, [pc, #32]	@ (8002608 <OnRxDone+0x38>)
 80025e8:	4908      	ldr	r1, [pc, #32]	@ (800260c <OnRxDone+0x3c>)
 80025ea:	4809      	ldr	r0, [pc, #36]	@ (8002610 <OnRxDone+0x40>)
 80025ec:	f7ff f9b2 	bl	8001954 <_ZN6SX126x10GetPayloadEPhS0_h>
    HAL_GPIO_WritePin(SX_LED_RX_GPIO_Port, SX_LED_RX_Pin, GPIO_PIN_RESET); // Turn LED On
 80025f0:	2200      	movs	r2, #0
 80025f2:	2101      	movs	r1, #1
 80025f4:	4802      	ldr	r0, [pc, #8]	@ (8002600 <OnRxDone+0x30>)
 80025f6:	f003 f999 	bl	800592c <HAL_GPIO_WritePin>
//	RunRXStateMachine();


}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	42020800 	.word	0x42020800
 8002604:	200002a4 	.word	0x200002a4
 8002608:	20000516 	.word	0x20000516
 800260c:	20000514 	.word	0x20000514
 8002610:	200002ac 	.word	0x200002ac

08002614 <OnRxTimeout>:

void OnRxTimeout( void )
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
    radioFlags.rxTimeout = true;
 8002618:	4b03      	ldr	r3, [pc, #12]	@ (8002628 <OnRxTimeout+0x14>)
 800261a:	2201      	movs	r2, #1
 800261c:	70da      	strb	r2, [r3, #3]
}
 800261e:	bf00      	nop
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	200002a4 	.word	0x200002a4

0800262c <OnRxError>:

void OnRxError( IrqErrorCode_t errCode )
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
    radioFlags.rxError = true;
 8002636:	4b04      	ldr	r3, [pc, #16]	@ (8002648 <OnRxError+0x1c>)
 8002638:	2201      	movs	r2, #1
 800263a:	705a      	strb	r2, [r3, #1]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	200002a4 	.word	0x200002a4

0800264c <OnTxDone>:

void OnTxDone( void )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
    radioFlags.txDone = true;
 8002650:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <OnTxDone+0x18>)
 8002652:	2201      	movs	r2, #1
 8002654:	709a      	strb	r2, [r3, #2]
    HAL_GPIO_WritePin(SX_LED_TX_GPIO_Port, SX_LED_TX_Pin, GPIO_PIN_RESET); // Turn LED On
 8002656:	2200      	movs	r2, #0
 8002658:	2102      	movs	r1, #2
 800265a:	4803      	ldr	r0, [pc, #12]	@ (8002668 <OnTxDone+0x1c>)
 800265c:	f003 f966 	bl	800592c <HAL_GPIO_WritePin>
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	200002a4 	.word	0x200002a4
 8002668:	42020800 	.word	0x42020800

0800266c <OnTxTimeout>:

void OnTxTimeout( void )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
    radioFlags.txTimeout = true;
 8002670:	4b04      	ldr	r3, [pc, #16]	@ (8002684 <OnTxTimeout+0x18>)
 8002672:	2201      	movs	r2, #1
 8002674:	711a      	strb	r2, [r3, #4]
    HAL_GPIO_WritePin(SX_LED_TX_GPIO_Port, SX_LED_TX_Pin, GPIO_PIN_RESET); // Turn LED On
 8002676:	2200      	movs	r2, #0
 8002678:	2102      	movs	r1, #2
 800267a:	4803      	ldr	r0, [pc, #12]	@ (8002688 <OnTxTimeout+0x1c>)
 800267c:	f003 f956 	bl	800592c <HAL_GPIO_WritePin>
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200002a4 	.word	0x200002a4
 8002688:	42020800 	.word	0x42020800

0800268c <SetConfiguration>:

void SetConfiguration(RadioConfigurations_t *config){
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
    config->irqRx = IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f240 2202 	movw	r2, #514	@ 0x202
 800269a:	865a      	strh	r2, [r3, #50]	@ 0x32
    config->irqTx = IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f240 2201 	movw	r2, #513	@ 0x201
 80026a2:	861a      	strh	r2, [r3, #48]	@ 0x30
    config->rfFrequency = RF_FREQUENCY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a1d      	ldr	r2, [pc, #116]	@ (800271c <SetConfiguration+0x90>)
 80026a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    config->rxTimeout = RX_TIMEOUT_US;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80026b0:	639a      	str	r2, [r3, #56]	@ 0x38
    config->txPower = TX_OUTPUT_POWER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2216      	movs	r2, #22
 80026b6:	705a      	strb	r2, [r3, #1]
    config->txRampTime = RADIO_RAMP_10_US;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	709a      	strb	r2, [r3, #2]
    config->packetType = PACKET_TYPE_LORA;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
    config->modParams.PacketType = PACKET_TYPE_LORA;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	711a      	strb	r2, [r3, #4]
    config->modParams.Params.LoRa.Bandwidth = LORA_BANDWIDTH;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2206      	movs	r2, #6
 80026ce:	755a      	strb	r2, [r3, #21]
    config->modParams.Params.LoRa.CodingRate = LORA_CODINGRATE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	759a      	strb	r2, [r3, #22]
    config->modParams.Params.LoRa.LowDatarateOptimize = LORA_LOWDATARATEOPTIMIZE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	75da      	strb	r2, [r3, #23]
    config->modParams.Params.LoRa.SpreadingFactor = LORA_SPREADING_FACTOR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2207      	movs	r2, #7
 80026e0:	751a      	strb	r2, [r3, #20]
    config->packetParams.PacketType = PACKET_TYPE_LORA;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	761a      	strb	r2, [r3, #24]
    config->packetParams.Params.LoRa.CrcMode = LORA_CRC_MODE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    config->packetParams.Params.LoRa.HeaderType = LORA_HEADER_TYPE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    config->packetParams.Params.LoRa.InvertIQ = LORA_IQ;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    config->packetParams.Params.LoRa.PayloadLength = BUFFER_SIZE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2204      	movs	r2, #4
 8002704:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    config->packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2210      	movs	r2, #16
 800270c:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	33bca100 	.word	0x33bca100

08002720 <ConfigureGeneralRadio>:
void ChangeConfigurations(RadioConfigurations_t *config, RadioLoRaBandwidths_t bw, RadioLoRaCodingRates_t cr, RadioLoRaSpreadingFactors_t sf){
	config->modParams.Params.LoRa.Bandwidth = bw;
	config->modParams.Params.LoRa.CodingRate = cr;
    config->modParams.Params.LoRa.SpreadingFactor = sf;
}
void ConfigureGeneralRadio(SX126xHal *radio, RadioConfigurations_t *config){
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
    radio->SetPacketType(config->packetType);
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	4610      	mov	r0, r2
 8002734:	f7ff fab8 	bl	8001ca8 <_ZN6SX126x13SetPacketTypeE18RadioPacketTypes_t>
    radio->SetPacketParams(&config->packetParams);
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	3318      	adds	r3, #24
 800273e:	4619      	mov	r1, r3
 8002740:	4610      	mov	r0, r2
 8002742:	f7ff fbf5 	bl	8001f30 <_ZN6SX126x15SetPacketParamsEP14PacketParams_t>
    radio->SetModulationParams(&config->modParams);
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	3304      	adds	r3, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f7ff fafe 	bl	8001d50 <_ZN6SX126x19SetModulationParamsEP18ModulationParams_t>
    radio->SetRfFrequency(config->rfFrequency);
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275a:	4619      	mov	r1, r3
 800275c:	4610      	mov	r0, r2
 800275e:	f7ff fa6b 	bl	8001c38 <_ZN6SX126x14SetRfFrequencyEm>
    radio->SetTxParams(config->txPower, config->txRampTime);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	f993 1001 	ldrsb.w	r1, [r3, #1]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	789b      	ldrb	r3, [r3, #2]
 800276e:	461a      	mov	r2, r3
 8002770:	f7ff fabe 	bl	8001cf0 <_ZN6SX126x11SetTxParamsEa16RadioRampTimes_t>
    radio->SetInterruptMode();
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fd78 	bl	800226c <_ZN6SX126x16SetInterruptModeEv>
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
  if(GPIO_Pin == SX_DIO1_Pin){
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002794:	d10c      	bne.n	80027b0 <HAL_GPIO_EXTI_Rising_Callback+0x2c>
	  Radio.InvokeHandler();
 8002796:	4808      	ldr	r0, [pc, #32]	@ (80027b8 <HAL_GPIO_EXTI_Rising_Callback+0x34>)
 8002798:	f7ff f80a 	bl	80017b0 <_ZN9SX126xHal13InvokeHandlerEv>
	  ConfigureRadioRx(&Radio, &radioConfiguration);
 800279c:	4907      	ldr	r1, [pc, #28]	@ (80027bc <HAL_GPIO_EXTI_Rising_Callback+0x38>)
 800279e:	4806      	ldr	r0, [pc, #24]	@ (80027b8 <HAL_GPIO_EXTI_Rising_Callback+0x34>)
 80027a0:	f7ff ff02 	bl	80025a8 <ConfigureRadioRx>
	  Radio.SetRx(radioConfiguration.rxTimeout);
 80027a4:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <HAL_GPIO_EXTI_Rising_Callback+0x38>)
 80027a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a8:	4619      	mov	r1, r3
 80027aa:	4803      	ldr	r0, [pc, #12]	@ (80027b8 <HAL_GPIO_EXTI_Rising_Callback+0x34>)
 80027ac:	f7ff f95e 	bl	8001a6c <_ZN6SX126x5SetRxEm>
  }
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200002ac 	.word	0x200002ac
 80027bc:	20000268 	.word	0x20000268

080027c0 <GetRssiSnr>:

void GetRssiSnr(int8_t *rssi, int8_t *snr)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
    PacketStatus_t pkt_stat;
    Radio.GetPacketStatus(&pkt_stat);
 80027ca:	f107 030c 	add.w	r3, r7, #12
 80027ce:	4619      	mov	r1, r3
 80027d0:	4807      	ldr	r0, [pc, #28]	@ (80027f0 <GetRssiSnr+0x30>)
 80027d2:	f7ff fcb3 	bl	800213c <_ZN6SX126x15GetPacketStatusEP14PacketStatus_t>
    *rssi = pkt_stat.Params.LoRa.RssiPkt;
 80027d6:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	701a      	strb	r2, [r3, #0]
    *snr = pkt_stat.Params.LoRa.SnrPkt;
 80027de:	f997 2019 	ldrsb.w	r2, [r7, #25]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	701a      	strb	r2, [r3, #0]

}
 80027e6:	bf00      	nop
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200002ac 	.word	0x200002ac

080027f4 <_Z41__static_initialization_and_destruction_0ii>:
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b092      	sub	sp, #72	@ 0x48
 80027f8:	af10      	add	r7, sp, #64	@ 0x40
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d12c      	bne.n	800285e <_Z41__static_initialization_and_destruction_0ii+0x6a>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800280a:	4293      	cmp	r3, r2
 800280c:	d127      	bne.n	800285e <_Z41__static_initialization_and_destruction_0ii+0x6a>
				SX_ANT_SW_GPIO_Port, SX_ANT_SW_Pin, &RadioEvents);
 800280e:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002810:	930e      	str	r3, [sp, #56]	@ 0x38
 8002812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002816:	930d      	str	r3, [sp, #52]	@ 0x34
 8002818:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800281a:	930c      	str	r3, [sp, #48]	@ 0x30
 800281c:	2308      	movs	r3, #8
 800281e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002820:	2304      	movs	r3, #4
 8002822:	930a      	str	r3, [sp, #40]	@ 0x28
 8002824:	2308      	movs	r3, #8
 8002826:	9309      	str	r3, [sp, #36]	@ 0x24
 8002828:	4b16      	ldr	r3, [pc, #88]	@ (8002884 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800282a:	9308      	str	r3, [sp, #32]
 800282c:	2300      	movs	r3, #0
 800282e:	9307      	str	r3, [sp, #28]
 8002830:	2300      	movs	r3, #0
 8002832:	9306      	str	r3, [sp, #24]
 8002834:	2300      	movs	r3, #0
 8002836:	9305      	str	r3, [sp, #20]
 8002838:	2300      	movs	r3, #0
 800283a:	9304      	str	r3, [sp, #16]
 800283c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002840:	9303      	str	r3, [sp, #12]
 8002842:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002844:	9302      	str	r3, [sp, #8]
 8002846:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002854:	4a0a      	ldr	r2, [pc, #40]	@ (8002880 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002856:	490d      	ldr	r1, [pc, #52]	@ (800288c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002858:	480d      	ldr	r0, [pc, #52]	@ (8002890 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800285a:	f7fe fc87 	bl	800116c <_ZN9SX126xHalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tmmS3_tP16RadioCallbacks_t>
SX126xHal Radio(&hspi1, SX_SPI1_CS_GPIO_Port, SX_SPI1_CS_Pin,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d107      	bne.n	8002874 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800286a:	4293      	cmp	r3, r2
 800286c:	d102      	bne.n	8002874 <_Z41__static_initialization_and_destruction_0ii+0x80>
 800286e:	4808      	ldr	r0, [pc, #32]	@ (8002890 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002870:	f7fe fcce 	bl	8001210 <_ZN9SX126xHalD1Ev>
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000000 	.word	0x20000000
 8002880:	42021400 	.word	0x42021400
 8002884:	42020000 	.word	0x42020000
 8002888:	42021000 	.word	0x42021000
 800288c:	200003a8 	.word	0x200003a8
 8002890:	200002ac 	.word	0x200002ac

08002894 <_GLOBAL__sub_I_TxState>:
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
 8002898:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800289c:	2001      	movs	r0, #1
 800289e:	f7ff ffa9 	bl	80027f4 <_Z41__static_initialization_and_destruction_0ii>
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_GLOBAL__sub_D_TxState>:
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7ff ffa1 	bl	80027f4 <_Z41__static_initialization_and_destruction_0ii>
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80028c4:	4b9f      	ldr	r3, [pc, #636]	@ (8002b44 <dwt_initialise+0x290>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80028cc:	4b9d      	ldr	r3, [pc, #628]	@ (8002b44 <dwt_initialise+0x290>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2200      	movs	r2, #0
 80028d2:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80028d4:	4b9b      	ldr	r3, [pc, #620]	@ (8002b44 <dwt_initialise+0x290>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2200      	movs	r2, #0
 80028da:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80028dc:	4b99      	ldr	r3, [pc, #612]	@ (8002b44 <dwt_initialise+0x290>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2200      	movs	r2, #0
 80028e2:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 80028e4:	4b97      	ldr	r3, [pc, #604]	@ (8002b44 <dwt_initialise+0x290>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2200      	movs	r2, #0
 80028ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 80028ec:	4b95      	ldr	r3, [pc, #596]	@ (8002b44 <dwt_initialise+0x290>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 80028f4:	4b93      	ldr	r3, [pc, #588]	@ (8002b44 <dwt_initialise+0x290>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2200      	movs	r2, #0
 80028fa:	635a      	str	r2, [r3, #52]	@ 0x34

#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    uint32 ID = dwt_readdevid();
 80028fc:	f000 f94e 	bl	8002b9c <dwt_readdevid>
 8002900:	60f8      	str	r0, [r7, #12]
    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != ID ) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4a90      	ldr	r2, [pc, #576]	@ (8002b48 <dwt_initialise+0x294>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d002      	beq.n	8002910 <dwt_initialise+0x5c>
    {
        return DWT_ERROR;
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	e115      	b.n	8002b3c <dwt_initialise+0x288>
    }

    //printf("ID  =  %08x\n\r", ID);

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <dwt_initialise+0x6a>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 800291a:	f000 ff09 	bl	8003730 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d004      	beq.n	8002932 <dwt_initialise+0x7e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d102      	bne.n	8002938 <dwt_initialise+0x84>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8002932:	2000      	movs	r0, #0
 8002934:	f000 fdb6 	bl	80034a4 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8002938:	2204      	movs	r2, #4
 800293a:	2100      	movs	r1, #0
 800293c:	2024      	movs	r0, #36	@ 0x24
 800293e:	f000 fc54 	bl	80031ea <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d116      	bne.n	800297a <dwt_initialise+0xc6>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800294c:	2004      	movs	r0, #4
 800294e:	f000 fca2 	bl	8003296 <_dwt_otpread>
 8002952:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01f      	beq.n	800299c <dwt_initialise+0xe8>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800295c:	2202      	movs	r2, #2
 800295e:	2112      	movs	r1, #18
 8002960:	202d      	movs	r0, #45	@ 0x2d
 8002962:	f000 fc42 	bl	80031ea <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8002966:	4b77      	ldr	r3, [pc, #476]	@ (8002b44 <dwt_initialise+0x290>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	8ada      	ldrh	r2, [r3, #22]
 800296c:	4b75      	ldr	r3, [pc, #468]	@ (8002b44 <dwt_initialise+0x290>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002974:	b292      	uxth	r2, r2
 8002976:	82da      	strh	r2, [r3, #22]
 8002978:	e010      	b.n	800299c <dwt_initialise+0xe8>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800297a:	2130      	movs	r1, #48	@ 0x30
 800297c:	2028      	movs	r0, #40	@ 0x28
 800297e:	f000 fbdf 	bl	8003140 <dwt_read32bitoffsetreg>
 8002982:	4603      	mov	r3, r0
 8002984:	f1b3 3f88 	cmp.w	r3, #2290649224	@ 0x88888888
 8002988:	d008      	beq.n	800299c <dwt_initialise+0xe8>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800298a:	4b6e      	ldr	r3, [pc, #440]	@ (8002b44 <dwt_initialise+0x290>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	8ada      	ldrh	r2, [r3, #22]
 8002990:	4b6c      	ldr	r3, [pc, #432]	@ (8002b44 <dwt_initialise+0x290>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002998:	b292      	uxth	r2, r2
 800299a:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <dwt_initialise+0x106>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d011      	beq.n	80029d4 <dwt_initialise+0x120>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00c      	beq.n	80029d4 <dwt_initialise+0x120>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80029ba:	201e      	movs	r0, #30
 80029bc:	f000 fc6b 	bl	8003296 <_dwt_otpread>
 80029c0:	4603      	mov	r3, r0
 80029c2:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80029c4:	8afb      	ldrh	r3, [r7, #22]
 80029c6:	0a1b      	lsrs	r3, r3, #8
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	4b5e      	ldr	r3, [pc, #376]	@ (8002b44 <dwt_initialise+0x290>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	72da      	strb	r2, [r3, #11]
 80029d2:	e003      	b.n	80029dc <dwt_initialise+0x128>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80029d4:	4b5b      	ldr	r3, [pc, #364]	@ (8002b44 <dwt_initialise+0x290>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2200      	movs	r2, #0
 80029da:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10b      	bne.n	80029fe <dwt_initialise+0x14a>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80029e6:	8afb      	ldrh	r3, [r7, #22]
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <dwt_initialise+0x140>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80029f0:	2310      	movs	r3, #16
 80029f2:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80029f4:	8afb      	ldrh	r3, [r7, #22]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 febf 	bl	800377c <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <dwt_initialise+0x164>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8002a08:	4b4e      	ldr	r3, [pc, #312]	@ (8002b44 <dwt_initialise+0x290>)
 8002a0a:	681c      	ldr	r4, [r3, #0]
 8002a0c:	2006      	movs	r0, #6
 8002a0e:	f000 fc42 	bl	8003296 <_dwt_otpread>
 8002a12:	4603      	mov	r3, r0
 8002a14:	6023      	str	r3, [r4, #0]
 8002a16:	e003      	b.n	8002a20 <dwt_initialise+0x16c>
    }
    else
    {
        pdw1000local->partID = 0;
 8002a18:	4b4a      	ldr	r3, [pc, #296]	@ (8002b44 <dwt_initialise+0x290>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d007      	beq.n	8002a3a <dwt_initialise+0x186>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8002a2a:	4b46      	ldr	r3, [pc, #280]	@ (8002b44 <dwt_initialise+0x290>)
 8002a2c:	681c      	ldr	r4, [r3, #0]
 8002a2e:	2007      	movs	r0, #7
 8002a30:	f000 fc31 	bl	8003296 <_dwt_otpread>
 8002a34:	4603      	mov	r3, r0
 8002a36:	6063      	str	r3, [r4, #4]
 8002a38:	e003      	b.n	8002a42 <dwt_initialise+0x18e>
    }
    else
    {
        pdw1000local->lotID = 0;
 8002a3a:	4b42      	ldr	r3, [pc, #264]	@ (8002b44 <dwt_initialise+0x290>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <dwt_initialise+0x1aa>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8002a4c:	2008      	movs	r0, #8
 8002a4e:	f000 fc22 	bl	8003296 <_dwt_otpread>
 8002a52:	4602      	mov	r2, r0
 8002a54:	4b3b      	ldr	r3, [pc, #236]	@ (8002b44 <dwt_initialise+0x290>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	721a      	strb	r2, [r3, #8]
 8002a5c:	e003      	b.n	8002a66 <dwt_initialise+0x1b2>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8002a5e:	4b39      	ldr	r3, [pc, #228]	@ (8002b44 <dwt_initialise+0x290>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2200      	movs	r2, #0
 8002a64:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <dwt_initialise+0x1ce>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8002a70:	2009      	movs	r0, #9
 8002a72:	f000 fc10 	bl	8003296 <_dwt_otpread>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b32      	ldr	r3, [pc, #200]	@ (8002b44 <dwt_initialise+0x290>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	725a      	strb	r2, [r3, #9]
 8002a80:	e003      	b.n	8002a8a <dwt_initialise+0x1d6>
    }
    else
    {
        pdw1000local->tempP = 0;
 8002a82:	4b30      	ldr	r3, [pc, #192]	@ (8002b44 <dwt_initialise+0x290>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d121      	bne.n	8002ad8 <dwt_initialise+0x224>
    {
        if(DWT_LOADUCODE & config)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <dwt_initialise+0x202>
        {
            _dwt_loaducodefromrom();
 8002a9e:	f000 fc47 	bl	8003330 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8002aa2:	4b28      	ldr	r3, [pc, #160]	@ (8002b44 <dwt_initialise+0x290>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	8ada      	ldrh	r2, [r3, #22]
 8002aa8:	4b26      	ldr	r3, [pc, #152]	@ (8002b44 <dwt_initialise+0x290>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ab0:	b292      	uxth	r2, r2
 8002ab2:	82da      	strh	r2, [r3, #22]
 8002ab4:	e01e      	b.n	8002af4 <dwt_initialise+0x240>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8002ab6:	2105      	movs	r1, #5
 8002ab8:	2036      	movs	r0, #54	@ 0x36
 8002aba:	f000 fb68 	bl	800318e <dwt_read16bitoffsetreg>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	817b      	strh	r3, [r7, #10]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8002ac2:	897b      	ldrh	r3, [r7, #10]
 8002ac4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ac8:	817b      	strh	r3, [r7, #10]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8002aca:	897b      	ldrh	r3, [r7, #10]
 8002acc:	461a      	mov	r2, r3
 8002ace:	2105      	movs	r1, #5
 8002ad0:	2036      	movs	r0, #54	@ 0x36
 8002ad2:	f000 fb9d 	bl	8003210 <dwt_write16bitoffsetreg>
 8002ad6:	e00d      	b.n	8002af4 <dwt_initialise+0x240>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d108      	bne.n	8002af4 <dwt_initialise+0x240>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8002ae2:	4b18      	ldr	r3, [pc, #96]	@ (8002b44 <dwt_initialise+0x290>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	8ada      	ldrh	r2, [r3, #22]
 8002ae8:	4b16      	ldr	r3, [pc, #88]	@ (8002b44 <dwt_initialise+0x290>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002af0:	b292      	uxth	r2, r2
 8002af2:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8002af4:	2001      	movs	r0, #1
 8002af6:	f000 fcd5 	bl	80034a4 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8002afa:	2200      	movs	r2, #0
 8002afc:	210a      	movs	r1, #10
 8002afe:	202c      	movs	r0, #44	@ 0x2c
 8002b00:	f000 fb73 	bl	80031ea <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8002b04:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <dwt_initialise+0x290>)
 8002b06:	681c      	ldr	r4, [r3, #0]
 8002b08:	2100      	movs	r1, #0
 8002b0a:	2004      	movs	r0, #4
 8002b0c:	f000 fb18 	bl	8003140 <dwt_read32bitoffsetreg>
 8002b10:	4603      	mov	r3, r0
 8002b12:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <dwt_initialise+0x290>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	0c1b      	lsrs	r3, r3, #16
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <dwt_initialise+0x290>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f002 0203 	and.w	r2, r2, #3
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <dwt_initialise+0x290>)
 8002b2c:	681c      	ldr	r4, [r3, #0]
 8002b2e:	2100      	movs	r1, #0
 8002b30:	2008      	movs	r0, #8
 8002b32:	f000 fb05 	bl	8003140 <dwt_read32bitoffsetreg>
 8002b36:	4603      	mov	r3, r0
 8002b38:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8002b3a:	2300      	movs	r3, #0

} // end dwt_initialise()
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd90      	pop	{r4, r7, pc}
 8002b44:	20000028 	.word	0x20000028
 8002b48:	deca0130 	.word	0xdeca0130

08002b4c <dwt_setlnapamode>:
 *                          : to disable LNA/PA set the bits to 0
 *
 * no return value
 */
void dwt_setlnapamode(int lna_pa)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    uint32 gpio_mode = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 8002b54:	2100      	movs	r1, #0
 8002b56:	2026      	movs	r0, #38	@ 0x26
 8002b58:	f000 faf2 	bl	8003140 <dwt_read32bitoffsetreg>
 8002b5c:	60f8      	str	r0, [r7, #12]
    gpio_mode &= ~(GPIO_MSGP4_MASK | GPIO_MSGP5_MASK | GPIO_MSGP6_MASK);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f423 237c 	bic.w	r3, r3, #1032192	@ 0xfc000
 8002b64:	60fb      	str	r3, [r7, #12]
    if (lna_pa & DWT_LNA_ENABLE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <dwt_setlnapamode+0x2c>
    {
        gpio_mode |= GPIO_PIN6_EXTRXE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b76:	60fb      	str	r3, [r7, #12]
    }
    if (lna_pa & DWT_PA_ENABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <dwt_setlnapamode+0x3e>
    {
        gpio_mode |= (GPIO_PIN5_EXTTXE | GPIO_PIN4_EXTPA);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f443 33a0 	orr.w	r3, r3, #81920	@ 0x14000
 8002b88:	60fb      	str	r3, [r7, #12]
    }
    dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, gpio_mode);
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	2026      	movs	r0, #38	@ 0x26
 8002b90:	f000 fb5a 	bl	8003248 <dwt_write32bitoffsetreg>
}
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID, 0);
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f000 facc 	bl	8003140 <dwt_read32bitoffsetreg>
 8002ba8:	4603      	mov	r3, r0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	795b      	ldrb	r3, [r3, #5]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4ba1      	ldr	r3, [pc, #644]	@ (8002e54 <dwt_configure+0x2a4>)
 8002bce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002bd2:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	785b      	ldrb	r3, [r3, #1]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d002      	beq.n	8002be8 <dwt_configure+0x38>
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	2b07      	cmp	r3, #7
 8002be6:	d101      	bne.n	8002bec <dwt_configure+0x3c>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <dwt_configure+0x3e>
 8002bec:	2300      	movs	r3, #0
 8002bee:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	79db      	ldrb	r3, [r3, #7]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10b      	bne.n	8002c10 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8002bf8:	4b97      	ldr	r3, [pc, #604]	@ (8002e58 <dwt_configure+0x2a8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	4b96      	ldr	r3, [pc, #600]	@ (8002e58 <dwt_configure+0x2a8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002c06:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8002c08:	8abb      	ldrh	r3, [r7, #20]
 8002c0a:	08db      	lsrs	r3, r3, #3
 8002c0c:	82bb      	strh	r3, [r7, #20]
 8002c0e:	e007      	b.n	8002c20 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8002c10:	4b91      	ldr	r3, [pc, #580]	@ (8002e58 <dwt_configure+0x2a8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	4b90      	ldr	r3, [pc, #576]	@ (8002e58 <dwt_configure+0x2a8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8002c1e:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8002c20:	4b8d      	ldr	r3, [pc, #564]	@ (8002e58 <dwt_configure+0x2a8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	7a12      	ldrb	r2, [r2, #8]
 8002c28:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8002c2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002e58 <dwt_configure+0x2a8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	4b89      	ldr	r3, [pc, #548]	@ (8002e58 <dwt_configure+0x2a8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002c38:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8002c3a:	4b87      	ldr	r3, [pc, #540]	@ (8002e58 <dwt_configure+0x2a8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6919      	ldr	r1, [r3, #16]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7a1b      	ldrb	r3, [r3, #8]
 8002c44:	041b      	lsls	r3, r3, #16
 8002c46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c4a:	4b83      	ldr	r3, [pc, #524]	@ (8002e58 <dwt_configure+0x2a8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID, pdw1000local->sysCFGreg) ;
 8002c52:	4b81      	ldr	r3, [pc, #516]	@ (8002e58 <dwt_configure+0x2a8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	2004      	movs	r0, #4
 8002c5e:	f000 faf3 	bl	8003248 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 8002c62:	8abb      	ldrh	r3, [r7, #20]
 8002c64:	461a      	mov	r2, r3
 8002c66:	f642 0104 	movw	r1, #10244	@ 0x2804
 8002c6a:	202e      	movs	r0, #46	@ 0x2e
 8002c6c:	f000 fad0 	bl	8003210 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8002c70:	7cbb      	ldrb	r3, [r7, #18]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fb3c 	bl	80032f0 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8002c78:	7cfb      	ldrb	r3, [r7, #19]
 8002c7a:	4a78      	ldr	r2, [pc, #480]	@ (8002e5c <dwt_configure+0x2ac>)
 8002c7c:	5cd3      	ldrb	r3, [r2, r3]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4b77      	ldr	r3, [pc, #476]	@ (8002e60 <dwt_configure+0x2b0>)
 8002c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c86:	461a      	mov	r2, r3
 8002c88:	2107      	movs	r1, #7
 8002c8a:	202b      	movs	r0, #43	@ 0x2b
 8002c8c:	f000 fadc 	bl	8003248 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	4a72      	ldr	r2, [pc, #456]	@ (8002e5c <dwt_configure+0x2ac>)
 8002c94:	5cd3      	ldrb	r3, [r2, r3]
 8002c96:	461a      	mov	r2, r3
 8002c98:	4b72      	ldr	r3, [pc, #456]	@ (8002e64 <dwt_configure+0x2b4>)
 8002c9a:	5c9b      	ldrb	r3, [r3, r2]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	210b      	movs	r1, #11
 8002ca0:	202b      	movs	r0, #43	@ 0x2b
 8002ca2:	f000 faa2 	bl	80031ea <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8002ca6:	7c7b      	ldrb	r3, [r7, #17]
 8002ca8:	4a6f      	ldr	r2, [pc, #444]	@ (8002e68 <dwt_configure+0x2b8>)
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	461a      	mov	r2, r3
 8002cae:	210b      	movs	r1, #11
 8002cb0:	2028      	movs	r0, #40	@ 0x28
 8002cb2:	f000 fa9a 	bl	80031ea <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	4a68      	ldr	r2, [pc, #416]	@ (8002e5c <dwt_configure+0x2ac>)
 8002cba:	5cd3      	ldrb	r3, [r2, r3]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4b6b      	ldr	r3, [pc, #428]	@ (8002e6c <dwt_configure+0x2bc>)
 8002cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	210c      	movs	r1, #12
 8002cc8:	2028      	movs	r0, #40	@ 0x28
 8002cca:	f000 fabd 	bl	8003248 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	79db      	ldrb	r3, [r3, #7]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	799b      	ldrb	r3, [r3, #6]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4a65      	ldr	r2, [pc, #404]	@ (8002e70 <dwt_configure+0x2c0>)
 8002cdc:	0043      	lsls	r3, r0, #1
 8002cde:	440b      	add	r3, r1
 8002ce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	2027      	movs	r0, #39	@ 0x27
 8002cea:	f000 fa91 	bl	8003210 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8002cee:	7cbb      	ldrb	r3, [r7, #18]
 8002cf0:	4a60      	ldr	r2, [pc, #384]	@ (8002e74 <dwt_configure+0x2c4>)
 8002cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	2027      	movs	r0, #39	@ 0x27
 8002cfc:	f000 fa88 	bl	8003210 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	79db      	ldrb	r3, [r3, #7]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8002d08:	2264      	movs	r2, #100	@ 0x64
 8002d0a:	2106      	movs	r1, #6
 8002d0c:	2027      	movs	r0, #39	@ 0x27
 8002d0e:	f000 fa7f 	bl	8003210 <dwt_write16bitoffsetreg>
 8002d12:	e018      	b.n	8002d46 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	789b      	ldrb	r3, [r3, #2]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d10a      	bne.n	8002d32 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	2106      	movs	r1, #6
 8002d20:	2027      	movs	r0, #39	@ 0x27
 8002d22:	f000 fa75 	bl	8003210 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8002d26:	2210      	movs	r2, #16
 8002d28:	2126      	movs	r1, #38	@ 0x26
 8002d2a:	2027      	movs	r0, #39	@ 0x27
 8002d2c:	f000 fa5d 	bl	80031ea <dwt_write8bitoffsetreg>
 8002d30:	e009      	b.n	8002d46 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 8002d32:	2220      	movs	r2, #32
 8002d34:	2106      	movs	r1, #6
 8002d36:	2027      	movs	r0, #39	@ 0x27
 8002d38:	f000 fa6a 	bl	8003210 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8002d3c:	2228      	movs	r2, #40	@ 0x28
 8002d3e:	2126      	movs	r1, #38	@ 0x26
 8002d40:	2027      	movs	r0, #39	@ 0x27
 8002d42:	f000 fa52 	bl	80031ea <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8002d46:	7cbb      	ldrb	r3, [r7, #18]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	78d2      	ldrb	r2, [r2, #3]
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4a4a      	ldr	r2, [pc, #296]	@ (8002e78 <dwt_configure+0x2c8>)
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2108      	movs	r1, #8
 8002d5c:	2027      	movs	r0, #39	@ 0x27
 8002d5e:	f000 fa73 	bl	8003248 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	895b      	ldrh	r3, [r3, #10]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d103      	bne.n	8002d72 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f241 0241 	movw	r2, #4161	@ 0x1041
 8002d70:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	895b      	ldrh	r3, [r3, #10]
 8002d76:	461a      	mov	r2, r3
 8002d78:	2120      	movs	r1, #32
 8002d7a:	2027      	movs	r0, #39	@ 0x27
 8002d7c:	f000 fa48 	bl	8003210 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8002d80:	4b3e      	ldr	r3, [pc, #248]	@ (8002e7c <dwt_configure+0x2cc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	210c      	movs	r1, #12
 8002d88:	2023      	movs	r0, #35	@ 0x23
 8002d8a:	f000 fa5d 	bl	8003248 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8002d8e:	7cbb      	ldrb	r3, [r7, #18]
 8002d90:	4a3a      	ldr	r2, [pc, #232]	@ (8002e7c <dwt_configure+0x2cc>)
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	889b      	ldrh	r3, [r3, #4]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2104      	movs	r1, #4
 8002d9c:	2023      	movs	r0, #35	@ 0x23
 8002d9e:	f000 fa37 	bl	8003210 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	799b      	ldrb	r3, [r3, #6]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00d      	beq.n	8002dc6 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	79db      	ldrb	r3, [r3, #7]
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b33      	ldr	r3, [pc, #204]	@ (8002e80 <dwt_configure+0x2d0>)
 8002db2:	5c9b      	ldrb	r3, [r3, r2]
 8002db4:	461a      	mov	r2, r3
 8002db6:	2100      	movs	r1, #0
 8002db8:	2021      	movs	r0, #33	@ 0x21
 8002dba:	f000 fa16 	bl	80031ea <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002dd2:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	785b      	ldrb	r3, [r3, #1]
 8002dd8:	049b      	lsls	r3, r3, #18
 8002dda:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8002dde:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	051b      	lsls	r3, r3, #20
 8002de4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8002de8:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8002dea:	7dbb      	ldrb	r3, [r7, #22]
 8002dec:	045b      	lsls	r3, r3, #17
 8002dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8002df2:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	791b      	ldrb	r3, [r3, #4]
 8002df8:	059b      	lsls	r3, r3, #22
 8002dfa:	f003 63f8 	and.w	r3, r3, #130023424	@ 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8002dfe:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	795b      	ldrb	r3, [r3, #5]
 8002e04:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	201f      	movs	r0, #31
 8002e10:	f000 fa1a 	bl	8003248 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	789a      	ldrb	r2, [r3, #2]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	785b      	ldrb	r3, [r3, #1]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	0419      	lsls	r1, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	79db      	ldrb	r3, [r3, #7]
 8002e26:	035a      	lsls	r2, r3, #13
 8002e28:	4b0b      	ldr	r3, [pc, #44]	@ (8002e58 <dwt_configure+0x2a8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8002e30:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <dwt_configure+0x2a8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	461a      	mov	r2, r3
 8002e38:	2100      	movs	r1, #0
 8002e3a:	2008      	movs	r0, #8
 8002e3c:	f000 fa04 	bl	8003248 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8002e40:	2242      	movs	r2, #66	@ 0x42
 8002e42:	2100      	movs	r1, #0
 8002e44:	200d      	movs	r0, #13
 8002e46:	f000 f9d0 	bl	80031ea <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	0801096c 	.word	0x0801096c
 8002e58:	20000028 	.word	0x20000028
 8002e5c:	080108ec 	.word	0x080108ec
 8002e60:	0801090c 	.word	0x0801090c
 8002e64:	08010924 	.word	0x08010924
 8002e68:	0801092c 	.word	0x0801092c
 8002e6c:	080108f4 	.word	0x080108f4
 8002e70:	0801093c 	.word	0x0801093c
 8002e74:	08010948 	.word	0x08010948
 8002e78:	0801094c 	.word	0x0801094c
 8002e7c:	08010930 	.word	0x08010930
 8002e80:	08010938 	.word	0x08010938

08002e84 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	461a      	mov	r2, r3
 8002e92:	f641 0104 	movw	r1, #6148	@ 0x1804
 8002e96:	202e      	movs	r0, #46	@ 0x2e
 8002e98:	f000 f9ba 	bl	8003210 <dwt_write16bitoffsetreg>
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	2018      	movs	r0, #24
 8002eb6:	f000 f9ab 	bl	8003210 <dwt_write16bitoffsetreg>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	6039      	str	r1, [r7, #0]
 8002ecc:	80fb      	strh	r3, [r7, #6]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8002ed2:	88ba      	ldrh	r2, [r7, #4]
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002edc:	dc09      	bgt.n	8002ef2 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	3b02      	subs	r3, #2
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	88b9      	ldrh	r1, [r7, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2009      	movs	r0, #9
 8002eea:	f000 f87e 	bl	8002fea <dwt_writetodevice>
        return DWT_SUCCESS;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e001      	b.n	8002ef6 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8002ef2:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	603a      	str	r2, [r7, #0]
 8002f0a:	80fb      	strh	r3, [r7, #6]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8002f10:	4b0a      	ldr	r3, [pc, #40]	@ (8002f3c <dwt_writetxfctrl+0x3c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	88bb      	ldrh	r3, [r7, #4]
 8002f1c:	059b      	lsls	r3, r3, #22
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	03db      	lsls	r3, r3, #15
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	2008      	movs	r0, #8
 8002f2e:	f000 f98b 	bl	8003248 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000028 	.word	0x20000028

08002f40 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	807b      	strh	r3, [r7, #2]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8002f50:	887a      	ldrh	r2, [r7, #2]
 8002f52:	8839      	ldrh	r1, [r7, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2011      	movs	r0, #17
 8002f58:	f000 f89e 	bl	8003098 <dwt_readfromdevice>
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <dwt_readcarrierintegrator>:

#define B20_SIGN_EXTEND_TEST (0x00100000UL)
#define B20_SIGN_EXTEND_MASK (0xFFF00000UL)

int32 dwt_readcarrierintegrator(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
    uint32  regval = 0 ;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
    int     j ;
    uint8   buffer[DRX_CARRIER_INT_LEN] ;

    /* Read 3 bytes into buffer (21-bit quantity) */

    dwt_readfromdevice(DRX_CONF_ID,DRX_CARRIER_INT_OFFSET,DRX_CARRIER_INT_LEN, buffer) ;
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	2203      	movs	r2, #3
 8002f72:	2128      	movs	r1, #40	@ 0x28
 8002f74:	2027      	movs	r0, #39	@ 0x27
 8002f76:	f000 f88f 	bl	8003098 <dwt_readfromdevice>

    for (j = 2 ; j >= 0 ; j --)  // arrange the three bytes into an unsigned integer value
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	e00a      	b.n	8002f96 <dwt_readcarrierintegrator+0x32>
    {
        regval = (regval << 8) + buffer[j] ;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	1d39      	adds	r1, r7, #4
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	440a      	add	r2, r1
 8002f8a:	7812      	ldrb	r2, [r2, #0]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
    for (j = 2 ; j >= 0 ; j --)  // arrange the three bytes into an unsigned integer value
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	daf1      	bge.n	8002f80 <dwt_readcarrierintegrator+0x1c>
    }

    if (regval & B20_SIGN_EXTEND_TEST) regval |= B20_SIGN_EXTEND_MASK ; // sign extend bit #20 to whole word
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d006      	beq.n	8002fb4 <dwt_readcarrierintegrator+0x50>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8002fac:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e003      	b.n	8002fbc <dwt_readcarrierintegrator+0x58>
    else regval &= DRX_CARRIER_INT_MASK ;                               // make sure upper bits are clear if not sign extending
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8002fba:	60fb      	str	r3, [r7, #12]

    return (int32) regval ; // cast unsigned value to signed quantity.
 8002fbc:	68fb      	ldr	r3, [r7, #12]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <dwt_readtxtimestamplo32>:
 * output parameters
 *
 * returns low 32-bits of TX timestamp
 */
uint32 dwt_readtxtimestamplo32(void)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	af00      	add	r7, sp, #0
    return dwt_read32bitreg(TX_TIME_ID); // Read TX TIME as a 32-bit register to get the 4 lower bytes out of 5
 8002fca:	2100      	movs	r1, #0
 8002fcc:	2017      	movs	r0, #23
 8002fce:	f000 f8b7 	bl	8003140 <dwt_read32bitoffsetreg>
 8002fd2:	4603      	mov	r3, r0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <dwt_readrxtimestamplo32>:
 * output parameters
 *
 * returns low 32-bits of RX timestamp
 */
uint32 dwt_readrxtimestamplo32(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
    return dwt_read32bitreg(RX_TIME_ID); // Read RX TIME as a 32-bit register to get the 4 lower bytes out of 5
 8002fdc:	2100      	movs	r1, #0
 8002fde:	2015      	movs	r0, #21
 8002fe0:	f000 f8ae 	bl	8003140 <dwt_read32bitoffsetreg>
 8002fe4:	4603      	mov	r3, r0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60ba      	str	r2, [r7, #8]
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	81fb      	strh	r3, [r7, #14]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8003000:	89bb      	ldrh	r3, [r7, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10c      	bne.n	8003020 <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8003006:	89fb      	ldrh	r3, [r7, #14]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	1c59      	adds	r1, r3, #1
 800300e:	6179      	str	r1, [r7, #20]
 8003010:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	3318      	adds	r3, #24
 8003018:	443b      	add	r3, r7
 800301a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800301e:	e02f      	b.n	8003080 <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8003020:	89fb      	ldrh	r3, [r7, #14]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	1c59      	adds	r1, r3, #1
 8003028:	6179      	str	r1, [r7, #20]
 800302a:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	3318      	adds	r3, #24
 8003032:	443b      	add	r3, r7
 8003034:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8003038:	89bb      	ldrh	r3, [r7, #12]
 800303a:	2b7f      	cmp	r3, #127	@ 0x7f
 800303c:	d809      	bhi.n	8003052 <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	617a      	str	r2, [r7, #20]
 8003044:	89ba      	ldrh	r2, [r7, #12]
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	3318      	adds	r3, #24
 800304a:	443b      	add	r3, r7
 800304c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003050:	e016      	b.n	8003080 <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8003052:	89bb      	ldrh	r3, [r7, #12]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	1c59      	adds	r1, r3, #1
 800305a:	6179      	str	r1, [r7, #20]
 800305c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	3318      	adds	r3, #24
 8003064:	443b      	add	r3, r7
 8003066:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800306a:	89bb      	ldrh	r3, [r7, #12]
 800306c:	09db      	lsrs	r3, r3, #7
 800306e:	b299      	uxth	r1, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	617a      	str	r2, [r7, #20]
 8003076:	b2ca      	uxtb	r2, r1
 8003078:	3318      	adds	r3, #24
 800307a:	443b      	add	r3, r7
 800307c:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	b298      	uxth	r0, r3
 8003084:	f107 0110 	add.w	r1, r7, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	f001 fbd8 	bl	8004840 <writetospi>
} // end dwt_writetodevice()
 8003090:	bf00      	nop
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60ba      	str	r2, [r7, #8]
 80030a0:	607b      	str	r3, [r7, #4]
 80030a2:	4603      	mov	r3, r0
 80030a4:	81fb      	strh	r3, [r7, #14]
 80030a6:	460b      	mov	r3, r1
 80030a8:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80030ae:	89bb      	ldrh	r3, [r7, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	617a      	str	r2, [r7, #20]
 80030ba:	89fa      	ldrh	r2, [r7, #14]
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	3318      	adds	r3, #24
 80030c0:	443b      	add	r3, r7
 80030c2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80030c6:	e02f      	b.n	8003128 <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80030c8:	89fb      	ldrh	r3, [r7, #14]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	1c59      	adds	r1, r3, #1
 80030d0:	6179      	str	r1, [r7, #20]
 80030d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	3318      	adds	r3, #24
 80030da:	443b      	add	r3, r7
 80030dc:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80030e0:	89bb      	ldrh	r3, [r7, #12]
 80030e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80030e4:	d809      	bhi.n	80030fa <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	617a      	str	r2, [r7, #20]
 80030ec:	89ba      	ldrh	r2, [r7, #12]
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	3318      	adds	r3, #24
 80030f2:	443b      	add	r3, r7
 80030f4:	f803 2c08 	strb.w	r2, [r3, #-8]
 80030f8:	e016      	b.n	8003128 <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80030fa:	89bb      	ldrh	r3, [r7, #12]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	1c59      	adds	r1, r3, #1
 8003102:	6179      	str	r1, [r7, #20]
 8003104:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	3318      	adds	r3, #24
 800310c:	443b      	add	r3, r7
 800310e:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8003112:	89bb      	ldrh	r3, [r7, #12]
 8003114:	09db      	lsrs	r3, r3, #7
 8003116:	b299      	uxth	r1, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	617a      	str	r2, [r7, #20]
 800311e:	b2ca      	uxtb	r2, r1
 8003120:	3318      	adds	r3, #24
 8003122:	443b      	add	r3, r7
 8003124:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	b298      	uxth	r0, r3
 800312c:	f107 0110 	add.w	r1, r7, #16
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	f001 fbb8 	bl	80048a8 <readfromspi>
} // end dwt_readfromdevice()
 8003138:	bf00      	nop
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	b298      	uxth	r0, r3
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	b299      	uxth	r1, r3
 8003156:	f107 030c 	add.w	r3, r7, #12
 800315a:	2204      	movs	r2, #4
 800315c:	f7ff ff9c 	bl	8003098 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8003160:	2303      	movs	r3, #3
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	e00b      	b.n	800317e <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	f107 010c 	add.w	r1, r7, #12
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	440a      	add	r2, r1
 8003172:	7812      	ldrb	r2, [r2, #0]
 8003174:	4413      	add	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	3b01      	subs	r3, #1
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	daf0      	bge.n	8003166 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8003184:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8003198:	2300      	movs	r3, #0
 800319a:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	b298      	uxth	r0, r3
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	b299      	uxth	r1, r3
 80031a4:	f107 030c 	add.w	r3, r7, #12
 80031a8:	2202      	movs	r2, #2
 80031aa:	f7ff ff75 	bl	8003098 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 80031ae:	7b7b      	ldrb	r3, [r7, #13]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	7b3a      	ldrb	r2, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	81fb      	strh	r3, [r7, #14]
    return regval ;
 80031ba:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	b298      	uxth	r0, r3
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	b299      	uxth	r1, r3
 80031d6:	f107 030f 	add.w	r3, r7, #15
 80031da:	2201      	movs	r2, #1
 80031dc:	f7ff ff5c 	bl	8003098 <dwt_readfromdevice>

    return regval ;
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	4613      	mov	r3, r2
 80031f6:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	b298      	uxth	r0, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	b299      	uxth	r1, r3
 8003200:	1dfb      	adds	r3, r7, #7
 8003202:	2201      	movs	r2, #1
 8003204:	f7ff fef1 	bl	8002fea <dwt_writetodevice>
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	b29b      	uxth	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	b298      	uxth	r0, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	b299      	uxth	r1, r3
 8003236:	f107 0314 	add.w	r3, r7, #20
 800323a:	2202      	movs	r2, #2
 800323c:	f7ff fed5 	bl	8002fea <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8003240:	bf00      	nop
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	e00d      	b.n	8003276 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	b2d9      	uxtb	r1, r3
 800325e:	f107 0210 	add.w	r2, r7, #16
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	4413      	add	r3, r2
 8003266:	460a      	mov	r2, r1
 8003268:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3301      	adds	r3, #1
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b03      	cmp	r3, #3
 800327a:	ddee      	ble.n	800325a <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	b298      	uxth	r0, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	b299      	uxth	r1, r3
 8003284:	f107 0310 	add.w	r3, r7, #16
 8003288:	2204      	movs	r2, #4
 800328a:	f7ff feae 	bl	8002fea <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 800328e:	bf00      	nop
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	461a      	mov	r2, r3
 80032a4:	2104      	movs	r1, #4
 80032a6:	202d      	movs	r0, #45	@ 0x2d
 80032a8:	f7ff ffb2 	bl	8003210 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 80032ac:	2203      	movs	r2, #3
 80032ae:	2106      	movs	r1, #6
 80032b0:	202d      	movs	r0, #45	@ 0x2d
 80032b2:	f7ff ff9a 	bl	80031ea <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 80032b6:	2200      	movs	r2, #0
 80032b8:	2106      	movs	r1, #6
 80032ba:	202d      	movs	r0, #45	@ 0x2d
 80032bc:	f7ff ff95 	bl	80031ea <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 80032c0:	210a      	movs	r1, #10
 80032c2:	202d      	movs	r0, #45	@ 0x2d
 80032c4:	f7ff ff3c 	bl	8003140 <dwt_read32bitoffsetreg>
 80032c8:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 80032ca:	68fb      	ldr	r3, [r7, #12]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 80032d8:	2200      	movs	r2, #0
 80032da:	2102      	movs	r1, #2
 80032dc:	202c      	movs	r0, #44	@ 0x2c
 80032de:	f7ff ff84 	bl	80031ea <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 80032e2:	2202      	movs	r2, #2
 80032e4:	2102      	movs	r1, #2
 80032e6:	202c      	movs	r0, #44	@ 0x2c
 80032e8:	f7ff ff7f 	bl	80031ea <dwt_write8bitoffsetreg>
}
 80032ec:	bf00      	nop
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 80032f8:	226d      	movs	r2, #109	@ 0x6d
 80032fa:	f640 0106 	movw	r1, #2054	@ 0x806
 80032fe:	202e      	movs	r0, #46	@ 0x2e
 8003300:	f7ff ff73 	bl	80031ea <dwt_write8bitoffsetreg>

    if(prfIndex)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 800330a:	f240 6207 	movw	r2, #1543	@ 0x607
 800330e:	f641 0106 	movw	r1, #6150	@ 0x1806
 8003312:	202e      	movs	r0, #46	@ 0x2e
 8003314:	f7ff ff7c 	bl	8003210 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8003318:	e006      	b.n	8003328 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 800331a:	f241 6207 	movw	r2, #5639	@ 0x1607
 800331e:	f641 0106 	movw	r1, #6150	@ 0x1806
 8003322:	202e      	movs	r0, #46	@ 0x2e
 8003324:	f7ff ff74 	bl	8003210 <dwt_write16bitoffsetreg>
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8003334:	200e      	movs	r0, #14
 8003336:	f000 f8b5 	bl	80034a4 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 800333a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800333e:	2106      	movs	r1, #6
 8003340:	202d      	movs	r0, #45	@ 0x2d
 8003342:	f7ff ff65 	bl	8003210 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8003346:	2001      	movs	r0, #1
 8003348:	f001 fa6e 	bl	8004828 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800334c:	2001      	movs	r0, #1
 800334e:	f000 f8a9 	bl	80034a4 <_dwt_enableclocks>
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <dwt_setsmarttxpower>:
 * output parameters
 *
 * no return value
 */
void dwt_setsmarttxpower(int enable)
{
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
    // Config system register
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8003360:	4b13      	ldr	r3, [pc, #76]	@ (80033b0 <dwt_setsmarttxpower+0x58>)
 8003362:	681c      	ldr	r4, [r3, #0]
 8003364:	2100      	movs	r1, #0
 8003366:	2004      	movs	r0, #4
 8003368:	f7ff feea 	bl	8003140 <dwt_read32bitoffsetreg>
 800336c:	4603      	mov	r3, r0
 800336e:	6123      	str	r3, [r4, #16]

    // Disable smart power configuration
    if(enable)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <dwt_setsmarttxpower+0x30>
    {
        pdw1000local->sysCFGreg &= ~(SYS_CFG_DIS_STXP) ;
 8003376:	4b0e      	ldr	r3, [pc, #56]	@ (80033b0 <dwt_setsmarttxpower+0x58>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <dwt_setsmarttxpower+0x58>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003384:	611a      	str	r2, [r3, #16]
 8003386:	e007      	b.n	8003398 <dwt_setsmarttxpower+0x40>
    }
    else
    {
        pdw1000local->sysCFGreg |= SYS_CFG_DIS_STXP ;
 8003388:	4b09      	ldr	r3, [pc, #36]	@ (80033b0 <dwt_setsmarttxpower+0x58>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	4b08      	ldr	r3, [pc, #32]	@ (80033b0 <dwt_setsmarttxpower+0x58>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003396:	611a      	str	r2, [r3, #16]
    }

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 8003398:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <dwt_setsmarttxpower+0x58>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	461a      	mov	r2, r3
 80033a0:	2100      	movs	r1, #0
 80033a2:	2004      	movs	r0, #4
 80033a4:	f7ff ff50 	bl	8003248 <dwt_write32bitoffsetreg>
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd90      	pop	{r4, r7, pc}
 80033b0:	20000028 	.word	0x20000028

080033b4 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 80033bc:	2100      	movs	r1, #0
 80033be:	201a      	movs	r0, #26
 80033c0:	f7ff febe 	bl	8003140 <dwt_read32bitoffsetreg>
 80033c4:	60f8      	str	r0, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	0d1b      	lsrs	r3, r3, #20
 80033ca:	051b      	lsls	r3, r3, #20
 80033cc:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	2100      	movs	r1, #0
 80033de:	201a      	movs	r0, #26
 80033e0:	f7ff ff32 	bl	8003248 <dwt_write32bitoffsetreg>
}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d03f      	beq.n	8003480 <dwt_setleds+0x94>
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 8003400:	2100      	movs	r1, #0
 8003402:	2026      	movs	r0, #38	@ 0x26
 8003404:	f7ff fe9c 	bl	8003140 <dwt_read32bitoffsetreg>
 8003408:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8003410:	60fb      	str	r3, [r7, #12]
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8003418:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	2100      	movs	r1, #0
 800341e:	2026      	movs	r0, #38	@ 0x26
 8003420:	f7ff ff12 	bl	8003248 <dwt_write32bitoffsetreg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET);
 8003424:	2100      	movs	r1, #0
 8003426:	2036      	movs	r0, #54	@ 0x36
 8003428:	f7ff fe8a 	bl	8003140 <dwt_read32bitoffsetreg>
 800342c:	60f8      	str	r0, [r7, #12]
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f443 0304 	orr.w	r3, r3, #8650752	@ 0x840000
 8003434:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg);
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	2100      	movs	r1, #0
 800343a:	2036      	movs	r0, #54	@ 0x36
 800343c:	f7ff ff04 	bl	8003248 <dwt_write32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
 8003440:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003444:	60fb      	str	r3, [r7, #12]
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <dwt_setleds+0x6c>
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8003456:	60fb      	str	r3, [r7, #12]
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	2128      	movs	r1, #40	@ 0x28
 800345c:	2036      	movs	r0, #54	@ 0x36
 800345e:	f7ff fef3 	bl	8003248 <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d017      	beq.n	800349c <dwt_setleds+0xb0>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8003472:	60fb      	str	r3, [r7, #12]
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	2128      	movs	r1, #40	@ 0x28
 8003478:	2036      	movs	r0, #54	@ 0x36
 800347a:	f7ff fee5 	bl	8003248 <dwt_write32bitoffsetreg>
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
    }
}
 800347e:	e00d      	b.n	800349c <dwt_setleds+0xb0>
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 8003480:	2100      	movs	r1, #0
 8003482:	2026      	movs	r0, #38	@ 0x26
 8003484:	f7ff fe5c 	bl	8003140 <dwt_read32bitoffsetreg>
 8003488:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8003490:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	2100      	movs	r1, #0
 8003496:	2026      	movs	r0, #38	@ 0x26
 8003498:	f7ff fed6 	bl	8003248 <dwt_write32bitoffsetreg>
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 80034ac:	f107 030c 	add.w	r3, r7, #12
 80034b0:	2202      	movs	r2, #2
 80034b2:	2100      	movs	r1, #0
 80034b4:	2036      	movs	r0, #54	@ 0x36
 80034b6:	f7ff fdef 	bl	8003098 <dwt_readfromdevice>
    switch(clocks)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b0e      	cmp	r3, #14
 80034be:	d876      	bhi.n	80035ae <_dwt_enableclocks+0x10a>
 80034c0:	a201      	add	r2, pc, #4	@ (adr r2, 80034c8 <_dwt_enableclocks+0x24>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	08003515 	.word	0x08003515
 80034cc:	08003505 	.word	0x08003505
 80034d0:	0800352b 	.word	0x0800352b
 80034d4:	080035af 	.word	0x080035af
 80034d8:	080035af 	.word	0x080035af
 80034dc:	080035af 	.word	0x080035af
 80034e0:	080035af 	.word	0x080035af
 80034e4:	08003541 	.word	0x08003541
 80034e8:	08003561 	.word	0x08003561
 80034ec:	080035af 	.word	0x080035af
 80034f0:	080035af 	.word	0x080035af
 80034f4:	08003577 	.word	0x08003577
 80034f8:	08003583 	.word	0x08003583
 80034fc:	0800358f 	.word	0x0800358f
 8003500:	080035a5 	.word	0x080035a5
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8003504:	2300      	movs	r3, #0
 8003506:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8003508:	7b7b      	ldrb	r3, [r7, #13]
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	b2db      	uxtb	r3, r3
 8003510:	737b      	strb	r3, [r7, #13]
        }
        break;
 8003512:	e04d      	b.n	80035b0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8003514:	7b3b      	ldrb	r3, [r7, #12]
 8003516:	b25b      	sxtb	r3, r3
 8003518:	f023 0303 	bic.w	r3, r3, #3
 800351c:	b25b      	sxtb	r3, r3
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	b25b      	sxtb	r3, r3
 8003524:	b2db      	uxtb	r3, r3
 8003526:	733b      	strb	r3, [r7, #12]
        }
        break;
 8003528:	e042      	b.n	80035b0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800352a:	7b3b      	ldrb	r3, [r7, #12]
 800352c:	b25b      	sxtb	r3, r3
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	b25b      	sxtb	r3, r3
 8003534:	f043 0302 	orr.w	r3, r3, #2
 8003538:	b25b      	sxtb	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	733b      	strb	r3, [r7, #12]
        }
        break;
 800353e:	e037      	b.n	80035b0 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8003540:	7b3b      	ldrb	r3, [r7, #12]
 8003542:	b25b      	sxtb	r3, r3
 8003544:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 8003548:	b25b      	sxtb	r3, r3
 800354a:	f043 0348 	orr.w	r3, r3, #72	@ 0x48
 800354e:	b25b      	sxtb	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8003554:	7b7b      	ldrb	r3, [r7, #13]
 8003556:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800355a:	b2db      	uxtb	r3, r3
 800355c:	737b      	strb	r3, [r7, #13]
        }
        break;
 800355e:	e027      	b.n	80035b0 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8003560:	7b3b      	ldrb	r3, [r7, #12]
 8003562:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 8003566:	b2db      	uxtb	r3, r3
 8003568:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 800356a:	7b7b      	ldrb	r3, [r7, #13]
 800356c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003570:	b2db      	uxtb	r3, r3
 8003572:	737b      	strb	r3, [r7, #13]
        }
        break;
 8003574:	e01c      	b.n	80035b0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8003576:	7b7b      	ldrb	r3, [r7, #13]
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	b2db      	uxtb	r3, r3
 800357e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8003580:	e016      	b.n	80035b0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8003582:	7b7b      	ldrb	r3, [r7, #13]
 8003584:	f023 0302 	bic.w	r3, r3, #2
 8003588:	b2db      	uxtb	r3, r3
 800358a:	737b      	strb	r3, [r7, #13]
        }
        break;
 800358c:	e010      	b.n	80035b0 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 800358e:	7b3b      	ldrb	r3, [r7, #12]
 8003590:	b25b      	sxtb	r3, r3
 8003592:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003596:	b25b      	sxtb	r3, r3
 8003598:	f043 0320 	orr.w	r3, r3, #32
 800359c:	b25b      	sxtb	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	733b      	strb	r3, [r7, #12]
        }
        break;
 80035a2:	e005      	b.n	80035b0 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 80035a4:	2301      	movs	r3, #1
 80035a6:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 80035a8:	2303      	movs	r3, #3
 80035aa:	737b      	strb	r3, [r7, #13]
        }
        break;
 80035ac:	e000      	b.n	80035b0 <_dwt_enableclocks+0x10c>
        default:
        break;
 80035ae:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 80035b0:	f107 030c 	add.w	r3, r7, #12
 80035b4:	2201      	movs	r2, #1
 80035b6:	2100      	movs	r1, #0
 80035b8:	2036      	movs	r0, #54	@ 0x36
 80035ba:	f7ff fd16 	bl	8002fea <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 80035be:	f107 030c 	add.w	r3, r7, #12
 80035c2:	3301      	adds	r3, #1
 80035c4:	2201      	movs	r2, #1
 80035c6:	2101      	movs	r1, #1
 80035c8:	2036      	movs	r0, #54	@ 0x36
 80035ca:	f7ff fd0e 	bl	8002fea <dwt_writetodevice>

} // end _dwt_enableclocks()
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop

080035d8 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 80035dc:	2000      	movs	r0, #0
 80035de:	f7ff ff61 	bl	80034a4 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 80035e2:	2200      	movs	r2, #0
 80035e4:	2104      	movs	r1, #4
 80035e6:	2036      	movs	r0, #54	@ 0x36
 80035e8:	f7ff fe12 	bl	8003210 <dwt_write16bitoffsetreg>
}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 80035fe:	2300      	movs	r3, #0
 8003600:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8003602:	2300      	movs	r3, #0
 8003604:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8003610:	2380      	movs	r3, #128	@ 0x80
 8003612:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8003614:	4b1d      	ldr	r3, [pc, #116]	@ (800368c <dwt_starttx+0x9c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2201      	movs	r2, #1
 800361a:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d023      	beq.n	800366e <dwt_starttx+0x7e>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8003626:	7afb      	ldrb	r3, [r7, #11]
 8003628:	f043 0306 	orr.w	r3, r3, #6
 800362c:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800362e:	7afb      	ldrb	r3, [r7, #11]
 8003630:	461a      	mov	r2, r3
 8003632:	2100      	movs	r1, #0
 8003634:	200d      	movs	r0, #13
 8003636:	f7ff fdd8 	bl	80031ea <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800363a:	2103      	movs	r1, #3
 800363c:	200f      	movs	r0, #15
 800363e:	f7ff fda6 	bl	800318e <dwt_read16bitoffsetreg>
 8003642:	4603      	mov	r3, r0
 8003644:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8003646:	893b      	ldrh	r3, [r7, #8]
 8003648:	f403 6381 	and.w	r3, r3, #1032	@ 0x408
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	e015      	b.n	8003682 <dwt_starttx+0x92>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8003656:	2240      	movs	r2, #64	@ 0x40
 8003658:	2100      	movs	r1, #0
 800365a:	200d      	movs	r0, #13
 800365c:	f7ff fdc5 	bl	80031ea <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8003660:	f04f 33ff 	mov.w	r3, #4294967295
 8003664:	60fb      	str	r3, [r7, #12]
            printf("error tx from init\n\r");
 8003666:	480a      	ldr	r0, [pc, #40]	@ (8003690 <dwt_starttx+0xa0>)
 8003668:	f009 fc14 	bl	800ce94 <iprintf>
 800366c:	e009      	b.n	8003682 <dwt_starttx+0x92>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 800366e:	7afb      	ldrb	r3, [r7, #11]
 8003670:	f043 0302 	orr.w	r3, r3, #2
 8003674:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8003676:	7afb      	ldrb	r3, [r7, #11]
 8003678:	461a      	mov	r2, r3
 800367a:	2100      	movs	r1, #0
 800367c:	200d      	movs	r0, #13
 800367e:	f7ff fdb4 	bl	80031ea <dwt_write8bitoffsetreg>
    }

    return retval;
 8003682:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000028 	.word	0x20000028
 8003690:	08010730 	.word	0x08010730

08003694 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 800369e:	2103      	movs	r1, #3
 80036a0:	2004      	movs	r0, #4
 80036a2:	f7ff fd8f 	bl	80031c4 <dwt_read8bitoffsetreg>
 80036a6:	4603      	mov	r3, r0
 80036a8:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d018      	beq.n	80036e2 <dwt_setrxtimeout+0x4e>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	461a      	mov	r2, r3
 80036b4:	2100      	movs	r1, #0
 80036b6:	200c      	movs	r0, #12
 80036b8:	f7ff fdaa 	bl	8003210 <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	f043 0310 	orr.w	r3, r3, #16
 80036c2:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 80036c4:	4b12      	ldr	r3, [pc, #72]	@ (8003710 <dwt_setrxtimeout+0x7c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	4b11      	ldr	r3, [pc, #68]	@ (8003710 <dwt_setrxtimeout+0x7c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80036d2:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	461a      	mov	r2, r3
 80036d8:	2103      	movs	r1, #3
 80036da:	2004      	movs	r0, #4
 80036dc:	f7ff fd85 	bl	80031ea <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 80036e0:	e011      	b.n	8003706 <dwt_setrxtimeout+0x72>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	f023 0310 	bic.w	r3, r3, #16
 80036e8:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 80036ea:	4b09      	ldr	r3, [pc, #36]	@ (8003710 <dwt_setrxtimeout+0x7c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	4b07      	ldr	r3, [pc, #28]	@ (8003710 <dwt_setrxtimeout+0x7c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80036f8:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	461a      	mov	r2, r3
 80036fe:	2103      	movs	r1, #3
 8003700:	2004      	movs	r0, #4
 8003702:	f7ff fd72 	bl	80031ea <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000028 	.word	0x20000028

08003714 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 8003718:	22e0      	movs	r2, #224	@ 0xe0
 800371a:	2103      	movs	r1, #3
 800371c:	2036      	movs	r0, #54	@ 0x36
 800371e:	f7ff fd64 	bl	80031ea <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8003722:	22f0      	movs	r2, #240	@ 0xf0
 8003724:	2103      	movs	r1, #3
 8003726:	2036      	movs	r0, #54	@ 0x36
 8003728:	f7ff fd5f 	bl	80031ea <dwt_write8bitoffsetreg>
}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}

08003730 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8003734:	f7ff ff50 	bl	80035d8 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8003738:	2200      	movs	r2, #0
 800373a:	2100      	movs	r1, #0
 800373c:	202c      	movs	r0, #44	@ 0x2c
 800373e:	f7ff fd67 	bl	8003210 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8003742:	2200      	movs	r2, #0
 8003744:	2106      	movs	r1, #6
 8003746:	202c      	movs	r0, #44	@ 0x2c
 8003748:	f7ff fd4f 	bl	80031ea <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 800374c:	f7ff fdc2 	bl	80032d4 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8003750:	2200      	movs	r2, #0
 8003752:	2103      	movs	r1, #3
 8003754:	2036      	movs	r0, #54	@ 0x36
 8003756:	f7ff fd48 	bl	80031ea <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800375a:	2001      	movs	r0, #1
 800375c:	f001 f864 	bl	8004828 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8003760:	22f0      	movs	r2, #240	@ 0xf0
 8003762:	2103      	movs	r1, #3
 8003764:	2036      	movs	r0, #54	@ 0x36
 8003766:	f7ff fd40 	bl	80031ea <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800376a:	4b03      	ldr	r3, [pc, #12]	@ (8003778 <dwt_softreset+0x48>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2200      	movs	r2, #0
 8003770:	755a      	strb	r2, [r3, #21]
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000028 	.word	0x20000028

0800377c <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	f003 031f 	and.w	r3, r3, #31
 800378e:	b25b      	sxtb	r3, r3
 8003790:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003794:	b25b      	sxtb	r3, r3
 8003796:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	461a      	mov	r2, r3
 800379c:	210e      	movs	r1, #14
 800379e:	202b      	movs	r0, #43	@ 0x2b
 80037a0:	f7ff fd23 	bl	80031ea <dwt_write8bitoffsetreg>
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <dwmInit>:
#include "dw1000.h"
#include "main.h"
extern LoraRxInfo_t rxInfo;


int	dwmInit(){
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
	/* Reset and initialise DW1000.
	     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
	     * performance. */
	    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 80037b0:	f001 f930 	bl	8004a14 <reset_DW1000>
	    port_set_dw1000_slowrate();
 80037b4:	f001 f95e 	bl	8004a74 <port_set_dw1000_slowrate>
	    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 80037b8:	2001      	movs	r0, #1
 80037ba:	f7ff f87b 	bl	80028b4 <dwt_initialise>
 80037be:	4603      	mov	r3, r0
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d101      	bne.n	80037ca <dwmInit+0x1e>
	    {
	        //lcd_display_str("INIT FAILED");
	        return 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <dwmInit+0x20>
	    }

	    //dwt_setlnapamode(0x03); //While using PA LNA Enable
	    return 1;
 80037ca:	2301      	movs	r3, #1
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <dwConfig>:

void dwConfig(dwt_config_t *config){
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	dwt_setlnapamode(0x03); //While using PA LNA Enable
 80037d8:	2003      	movs	r0, #3
 80037da:	f7ff f9b7 	bl	8002b4c <dwt_setlnapamode>


	    port_set_dw1000_fastrate();
 80037de:	f001 f957 	bl	8004a90 <port_set_dw1000_fastrate>

	    /* Configure DW1000. See NOTE 6 below. */
	    dwt_configure(config);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff f9e4 	bl	8002bb0 <dwt_configure>
//	    dwt_configure(&config);

	    /* Apply default antenna delay value. See NOTE 2 below. */
	    dwt_setrxantennadelay(RX_ANT_DLY);
 80037e8:	f244 0074 	movw	r0, #16500	@ 0x4074
 80037ec:	f7ff fb4a 	bl	8002e84 <dwt_setrxantennadelay>
	    dwt_settxantennadelay(TX_ANT_DLY);
 80037f0:	f244 00a6 	movw	r0, #16550	@ 0x40a6
 80037f4:	f7ff fb56 	bl	8002ea4 <dwt_settxantennadelay>


	    //printf("0x04 = %x\n\r",dwt_read32bitreg(SYS_CFG_ID));
	    dwt_setsmarttxpower(DISABLE);
 80037f8:	2000      	movs	r0, #0
 80037fa:	f7ff fdad 	bl	8003358 <dwt_setsmarttxpower>
	    //printf("0x04 = %x\n\r",dwt_read32bitreg(SYS_CFG_ID));
	    dwt_write32bitreg(TX_POWER_ID,MAX_POWER); //max power refer user manual pg.106
 80037fe:	f04f 321f 	mov.w	r2, #522133279	@ 0x1f1f1f1f
 8003802:	2100      	movs	r1, #0
 8003804:	201e      	movs	r0, #30
 8003806:	f7ff fd1f 	bl	8003248 <dwt_write32bitoffsetreg>
	    //printf("0x1E = %x\n\r",dwt_read32bitreg(TX_POWER_ID));
	    dwt_setleds(LEDS_ON);
 800380a:	2001      	movs	r0, #1
 800380c:	f7ff fdee 	bl	80033ec <dwt_setleds>

	    if(config->prf==DWT_PRF_16M){ //set lower SNR treshould for NLOS operation
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	785b      	ldrb	r3, [r3, #1]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d10b      	bne.n	8003830 <dwConfig+0x60>
		   dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, 0x07); //refer user manual pg.175
 8003818:	2207      	movs	r2, #7
 800381a:	f640 0106 	movw	r1, #2054	@ 0x806
 800381e:	202e      	movs	r0, #46	@ 0x2e
 8003820:	f7ff fce3 	bl	80031ea <dwt_write8bitoffsetreg>
		   dwt_write16bitoffsetreg(LDE_IF_ID, LDE_CFG2_OFFSET, 0x0003); //refer user manual pg.177
 8003824:	2203      	movs	r2, #3
 8003826:	f641 0106 	movw	r1, #6150	@ 0x1806
 800382a:	202e      	movs	r0, #46	@ 0x2e
 800382c:	f7ff fcf0 	bl	8003210 <dwt_write16bitoffsetreg>
		}
	    /* Set expected response's delay and timeout. See NOTE 1 and 5 below.
	     * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
	    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 8003830:	2000      	movs	r0, #0
 8003832:	f7ff fdbf 	bl	80033b4 <dwt_setrxaftertxdelay>
	    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 8003836:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 800383a:	f7ff ff2b 	bl	8003694 <dwt_setrxtimeout>

}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <dwRange>:
int dwRange(void)
{
 8003848:	b5b0      	push	{r4, r5, r7, lr}
 800384a:	b090      	sub	sp, #64	@ 0x40
 800384c:	af06      	add	r7, sp, #24
	uint8_t tag_dest;
	HAL_UART_Receive(hcom_uart,(uint8_t*)&tag_dest,sizeof(tag_dest),HAL_MAX_DELAY);
 800384e:	f107 010f 	add.w	r1, r7, #15
 8003852:	f04f 33ff 	mov.w	r3, #4294967295
 8003856:	2201      	movs	r2, #1
 8003858:	48af      	ldr	r0, [pc, #700]	@ (8003b18 <dwRange+0x2d0>)
 800385a:	f007 fe95 	bl	800b588 <HAL_UART_Receive>
	//WDT_Refresh(); //Refresh the Watchdog counter

	tx_poll_msg[TAG_DEST_POLL_IDX7] = tag_dest;
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	4bae      	ldr	r3, [pc, #696]	@ (8003b1c <dwRange+0x2d4>)
 8003862:	71da      	strb	r2, [r3, #7]
	tx_poll_msg[TAG_DEST_POLL_IDX8] = tag_dest;
 8003864:	7bfa      	ldrb	r2, [r7, #15]
 8003866:	4bad      	ldr	r3, [pc, #692]	@ (8003b1c <dwRange+0x2d4>)
 8003868:	721a      	strb	r2, [r3, #8]
	rx_resp_msg[TAG_DEST_RESP_IDX6] = tag_dest;
 800386a:	7bfa      	ldrb	r2, [r7, #15]
 800386c:	4bac      	ldr	r3, [pc, #688]	@ (8003b20 <dwRange+0x2d8>)
 800386e:	719a      	strb	r2, [r3, #6]
	rx_resp_msg[TAG_DEST_RESP_IDX5] = tag_dest;
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	4bab      	ldr	r3, [pc, #684]	@ (8003b20 <dwRange+0x2d8>)
 8003874:	715a      	strb	r2, [r3, #5]
	//HAL_GPIO_TogglePin(TIMING_GPIO_GPIO_Port, TIMING_GPIO_Pin);
	/* Write frame data to DW1000 and prepare transmission. See NOTE 7 below. */
	tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8003876:	4bab      	ldr	r3, [pc, #684]	@ (8003b24 <dwRange+0x2dc>)
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	4ba8      	ldr	r3, [pc, #672]	@ (8003b1c <dwRange+0x2d4>)
 800387c:	709a      	strb	r2, [r3, #2]
	dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 800387e:	2280      	movs	r2, #128	@ 0x80
 8003880:	2100      	movs	r1, #0
 8003882:	200f      	movs	r0, #15
 8003884:	f7ff fce0 	bl	8003248 <dwt_write32bitoffsetreg>
	dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 8003888:	2200      	movs	r2, #0
 800388a:	49a4      	ldr	r1, [pc, #656]	@ (8003b1c <dwRange+0x2d4>)
 800388c:	200c      	movs	r0, #12
 800388e:	f7ff fb18 	bl	8002ec2 <dwt_writetxdata>
	dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8003892:	2201      	movs	r2, #1
 8003894:	2100      	movs	r1, #0
 8003896:	200c      	movs	r0, #12
 8003898:	f7ff fb32 	bl	8002f00 <dwt_writetxfctrl>

	/* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
	 * set by dwt_setrxaftertxdelay() has elapsed. */
	dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 800389c:	2002      	movs	r0, #2
 800389e:	f7ff fea7 	bl	80035f0 <dwt_starttx>

	/* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 8 below. */
	while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR))) {
 80038a2:	bf00      	nop
 80038a4:	2100      	movs	r1, #0
 80038a6:	200f      	movs	r0, #15
 80038a8:	f7ff fc4a 	bl	8003140 <dwt_read32bitoffsetreg>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4a9e      	ldr	r2, [pc, #632]	@ (8003b28 <dwRange+0x2e0>)
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4b9d      	ldr	r3, [pc, #628]	@ (8003b28 <dwRange+0x2e0>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	4b9d      	ldr	r3, [pc, #628]	@ (8003b2c <dwRange+0x2e4>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f2      	beq.n	80038a4 <dwRange+0x5c>
		//WDT_Refresh();
	};

	/* Increment frame sequence number after transmission of the poll message (modulo 256). */
	frame_seq_nb++;
 80038be:	4b99      	ldr	r3, [pc, #612]	@ (8003b24 <dwRange+0x2dc>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	3301      	adds	r3, #1
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	4b97      	ldr	r3, [pc, #604]	@ (8003b24 <dwRange+0x2dc>)
 80038c8:	701a      	strb	r2, [r3, #0]

	if (status_reg & SYS_STATUS_RXFCG) {
 80038ca:	4b97      	ldr	r3, [pc, #604]	@ (8003b28 <dwRange+0x2e0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80ef 	beq.w	8003ab6 <dwRange+0x26e>
		uint32 frame_len;
		/* Clear good RX frame event in the DW1000 status register. */
		dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 80038d8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80038dc:	2100      	movs	r1, #0
 80038de:	200f      	movs	r0, #15
 80038e0:	f7ff fcb2 	bl	8003248 <dwt_write32bitoffsetreg>

		/* A frame has been received, read it into the local buffer. */
		frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 80038e4:	2100      	movs	r1, #0
 80038e6:	2010      	movs	r0, #16
 80038e8:	f7ff fc2a 	bl	8003140 <dwt_read32bitoffsetreg>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (frame_len <= RX_BUF_LEN) {
 80038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f6:	2b14      	cmp	r3, #20
 80038f8:	d806      	bhi.n	8003908 <dwRange+0xc0>
			dwt_readrxdata(rx_buffer, frame_len, 0);
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2200      	movs	r2, #0
 8003900:	4619      	mov	r1, r3
 8003902:	488b      	ldr	r0, [pc, #556]	@ (8003b30 <dwRange+0x2e8>)
 8003904:	f7ff fb1c 	bl	8002f40 <dwt_readrxdata>
		}

		/* Check that the frame is the expected response from the companion "SS TWR responder" example.
		 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
		rx_buffer[ALL_MSG_SN_IDX] = 0;
 8003908:	4b89      	ldr	r3, [pc, #548]	@ (8003b30 <dwRange+0x2e8>)
 800390a:	2200      	movs	r2, #0
 800390c:	709a      	strb	r2, [r3, #2]
		if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0) {
 800390e:	220a      	movs	r2, #10
 8003910:	4983      	ldr	r1, [pc, #524]	@ (8003b20 <dwRange+0x2d8>)
 8003912:	4887      	ldr	r0, [pc, #540]	@ (8003b30 <dwRange+0x2e8>)
 8003914:	f009 fc26 	bl	800d164 <memcmp>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	f040 809e 	bne.w	8003a5c <dwRange+0x214>
			uint32 poll_tx_ts, resp_rx_ts, poll_rx_ts, resp_tx_ts;
			int32 rtd_init, rtd_resp;
			float clockOffsetRatio ;

			/* Retrieve poll transmission and response reception timestamps. See NOTE 9 below. */
			poll_tx_ts = dwt_readtxtimestamplo32();
 8003920:	f7ff fb51 	bl	8002fc6 <dwt_readtxtimestamplo32>
 8003924:	6238      	str	r0, [r7, #32]
			resp_rx_ts = dwt_readrxtimestamplo32();
 8003926:	f7ff fb57 	bl	8002fd8 <dwt_readrxtimestamplo32>
 800392a:	61f8      	str	r0, [r7, #28]

			/* Read carrier integrator value and calculate clock offset ratio. See NOTE 11 below. */
			clockOffsetRatio = dwt_readcarrierintegrator() * (FREQ_OFFSET_MULTIPLIER * HERTZ_TO_PPM_MULTIPLIER_CHAN_2 / 1.0e6) ;
 800392c:	f7ff fb1a 	bl	8002f64 <dwt_readcarrierintegrator>
 8003930:	4603      	mov	r3, r0
 8003932:	4618      	mov	r0, r3
 8003934:	f7fc fe06 	bl	8000544 <__aeabi_i2d>
 8003938:	f04f 32ff 	mov.w	r2, #4294967295
 800393c:	4b7d      	ldr	r3, [pc, #500]	@ (8003b34 <dwRange+0x2ec>)
 800393e:	f7fc fe6b 	bl	8000618 <__aeabi_dmul>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4610      	mov	r0, r2
 8003948:	4619      	mov	r1, r3
 800394a:	f7fd f95d 	bl	8000c08 <__aeabi_d2f>
 800394e:	4603      	mov	r3, r0
 8003950:	61bb      	str	r3, [r7, #24]

			/* Get timestamps embedded in response message. */
			resp_msg_get_ts(&rx_buffer[RESP_MSG_POLL_RX_TS_IDX], &poll_rx_ts);
 8003952:	f107 0308 	add.w	r3, r7, #8
 8003956:	4619      	mov	r1, r3
 8003958:	4877      	ldr	r0, [pc, #476]	@ (8003b38 <dwRange+0x2f0>)
 800395a:	f000 f915 	bl	8003b88 <resp_msg_get_ts>
			resp_msg_get_ts(&rx_buffer[RESP_MSG_RESP_TX_TS_IDX], &resp_tx_ts);
 800395e:	1d3b      	adds	r3, r7, #4
 8003960:	4619      	mov	r1, r3
 8003962:	4876      	ldr	r0, [pc, #472]	@ (8003b3c <dwRange+0x2f4>)
 8003964:	f000 f910 	bl	8003b88 <resp_msg_get_ts>

			/* Compute time of flight and distance, using clock offset ratio to correct for differing local and remote clock rates */
			rtd_init = resp_rx_ts - poll_tx_ts;
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	617b      	str	r3, [r7, #20]
			rtd_resp = resp_tx_ts - poll_rx_ts;
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	613b      	str	r3, [r7, #16]

			tof = ((rtd_init - rtd_resp * (1 - clockOffsetRatio)) / 2.0) * DWT_TIME_UNITS;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	ee07 3a90 	vmov	s15, r3
 8003988:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800398c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003990:	edd7 7a06 	vldr	s15, [r7, #24]
 8003994:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800399c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a0:	ee17 0a90 	vmov	r0, s15
 80039a4:	f7fc fde0 	bl	8000568 <__aeabi_f2d>
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80039b0:	f7fc ff5c 	bl	800086c <__aeabi_ddiv>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4610      	mov	r0, r2
 80039ba:	4619      	mov	r1, r3
 80039bc:	a352      	add	r3, pc, #328	@ (adr r3, 8003b08 <dwRange+0x2c0>)
 80039be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c2:	f7fc fe29 	bl	8000618 <__aeabi_dmul>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	495d      	ldr	r1, [pc, #372]	@ (8003b40 <dwRange+0x2f8>)
 80039cc:	e9c1 2300 	strd	r2, r3, [r1]
			distance = tof * SPEED_OF_LIGHT;
 80039d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003b40 <dwRange+0x2f8>)
 80039d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039d6:	a34e      	add	r3, pc, #312	@ (adr r3, 8003b10 <dwRange+0x2c8>)
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	f7fc fe1c 	bl	8000618 <__aeabi_dmul>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4957      	ldr	r1, [pc, #348]	@ (8003b44 <dwRange+0x2fc>)
 80039e6:	e9c1 2300 	strd	r2, r3, [r1]
			if (rxInfo.new_data){
 80039ea:	4b57      	ldr	r3, [pc, #348]	@ (8003b48 <dwRange+0x300>)
 80039ec:	795b      	ldrb	r3, [r3, #5]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d024      	beq.n	8003a3c <dwRange+0x1f4>
  __ASM volatile ("cpsid i" : : : "memory");
 80039f2:	b672      	cpsid	i
}
 80039f4:	bf00      	nop
				__disable_irq();
				printf("*0x%x:0x%x:%3.2f|0x%x:%3.1f:%d:%d#\n\r",ANCHOR_NUM, tag_dest, distance,ANCHOR_NUM,rxInfo.rssi,rxInfo.snr,*rxInfo.buffer);
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	461d      	mov	r5, r3
 80039fa:	4b52      	ldr	r3, [pc, #328]	@ (8003b44 <dwRange+0x2fc>)
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	4951      	ldr	r1, [pc, #324]	@ (8003b48 <dwRange+0x300>)
 8003a02:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8003a06:	4608      	mov	r0, r1
 8003a08:	494f      	ldr	r1, [pc, #316]	@ (8003b48 <dwRange+0x300>)
 8003a0a:	f991 1004 	ldrsb.w	r1, [r1, #4]
 8003a0e:	460c      	mov	r4, r1
 8003a10:	494d      	ldr	r1, [pc, #308]	@ (8003b48 <dwRange+0x300>)
 8003a12:	7809      	ldrb	r1, [r1, #0]
 8003a14:	9105      	str	r1, [sp, #20]
 8003a16:	9404      	str	r4, [sp, #16]
 8003a18:	9003      	str	r0, [sp, #12]
 8003a1a:	2102      	movs	r1, #2
 8003a1c:	9102      	str	r1, [sp, #8]
 8003a1e:	e9cd 2300 	strd	r2, r3, [sp]
 8003a22:	462a      	mov	r2, r5
 8003a24:	2102      	movs	r1, #2
 8003a26:	4849      	ldr	r0, [pc, #292]	@ (8003b4c <dwRange+0x304>)
 8003a28:	f009 fa34 	bl	800ce94 <iprintf>
				rxInfo.new_data = false;
 8003a2c:	4b46      	ldr	r3, [pc, #280]	@ (8003b48 <dwRange+0x300>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	715a      	strb	r2, [r3, #5]
				free(rxInfo.buffer);
 8003a32:	4845      	ldr	r0, [pc, #276]	@ (8003b48 <dwRange+0x300>)
 8003a34:	f008 fa4a 	bl	800becc <free>
  __ASM volatile ("cpsie i" : : : "memory");
 8003a38:	b662      	cpsie	i
}
 8003a3a:	e09d      	b.n	8003b78 <dwRange+0x330>
  __ASM volatile ("cpsid i" : : : "memory");
 8003a3c:	b672      	cpsid	i
}
 8003a3e:	bf00      	nop
				__enable_irq();
			}
			else {
				__disable_irq();
				printf("*0x%x:0x%x:%3.2f#\n\r",ANCHOR_NUM, tag_dest, distance);
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	4619      	mov	r1, r3
 8003a44:	4b3f      	ldr	r3, [pc, #252]	@ (8003b44 <dwRange+0x2fc>)
 8003a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4a:	e9cd 2300 	strd	r2, r3, [sp]
 8003a4e:	460a      	mov	r2, r1
 8003a50:	2102      	movs	r1, #2
 8003a52:	483f      	ldr	r0, [pc, #252]	@ (8003b50 <dwRange+0x308>)
 8003a54:	f009 fa1e 	bl	800ce94 <iprintf>
  __ASM volatile ("cpsie i" : : : "memory");
 8003a58:	b662      	cpsie	i
}
 8003a5a:	e08d      	b.n	8003b78 <dwRange+0x330>
				__enable_irq();
			}
		}
		else{
			if (rxInfo.new_data){
 8003a5c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b48 <dwRange+0x300>)
 8003a5e:	795b      	ldrb	r3, [r3, #5]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01e      	beq.n	8003aa2 <dwRange+0x25a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003a64:	b672      	cpsid	i
}
 8003a66:	bf00      	nop
				__disable_irq();
				printf("*0x%x:0x%x:0000|0x%x:%3.1f:%d:%d#\n\r",ANCHOR_NUM, tag_dest,ANCHOR_NUM,rxInfo.rssi,rxInfo.snr,*rxInfo.buffer);
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	4b36      	ldr	r3, [pc, #216]	@ (8003b48 <dwRange+0x300>)
 8003a6e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003a72:	461a      	mov	r2, r3
 8003a74:	4b34      	ldr	r3, [pc, #208]	@ (8003b48 <dwRange+0x300>)
 8003a76:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4b32      	ldr	r3, [pc, #200]	@ (8003b48 <dwRange+0x300>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	9302      	str	r3, [sp, #8]
 8003a82:	9101      	str	r1, [sp, #4]
 8003a84:	9200      	str	r2, [sp, #0]
 8003a86:	2302      	movs	r3, #2
 8003a88:	4602      	mov	r2, r0
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4831      	ldr	r0, [pc, #196]	@ (8003b54 <dwRange+0x30c>)
 8003a8e:	f009 fa01 	bl	800ce94 <iprintf>
				rxInfo.new_data = false;
 8003a92:	4b2d      	ldr	r3, [pc, #180]	@ (8003b48 <dwRange+0x300>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	715a      	strb	r2, [r3, #5]
				free(rxInfo.buffer);
 8003a98:	482b      	ldr	r0, [pc, #172]	@ (8003b48 <dwRange+0x300>)
 8003a9a:	f008 fa17 	bl	800becc <free>
  __ASM volatile ("cpsie i" : : : "memory");
 8003a9e:	b662      	cpsie	i
}
 8003aa0:	e06a      	b.n	8003b78 <dwRange+0x330>
  __ASM volatile ("cpsid i" : : : "memory");
 8003aa2:	b672      	cpsid	i
}
 8003aa4:	bf00      	nop
				__enable_irq();
			}
			else {
				__disable_irq();
				printf("*0x%x:0x%x:0000#\n\r",ANCHOR_NUM, tag_dest);
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2102      	movs	r1, #2
 8003aac:	482a      	ldr	r0, [pc, #168]	@ (8003b58 <dwRange+0x310>)
 8003aae:	f009 f9f1 	bl	800ce94 <iprintf>
  __ASM volatile ("cpsie i" : : : "memory");
 8003ab2:	b662      	cpsie	i
}
 8003ab4:	e060      	b.n	8003b78 <dwRange+0x330>
		}
	}
	else {

		/* Clear RX error/timeout events in the DW1000 status register. */
		dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8003ab6:	4a29      	ldr	r2, [pc, #164]	@ (8003b5c <dwRange+0x314>)
 8003ab8:	2100      	movs	r1, #0
 8003aba:	200f      	movs	r0, #15
 8003abc:	f7ff fbc4 	bl	8003248 <dwt_write32bitoffsetreg>
		if (rxInfo.new_data){
 8003ac0:	4b21      	ldr	r3, [pc, #132]	@ (8003b48 <dwRange+0x300>)
 8003ac2:	795b      	ldrb	r3, [r3, #5]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d04b      	beq.n	8003b60 <dwRange+0x318>
  __ASM volatile ("cpsid i" : : : "memory");
 8003ac8:	b672      	cpsid	i
}
 8003aca:	bf00      	nop
				__disable_irq();
				printf("*0x%x:0x%x:0000|0x%x:%3.1f:%d:%d#\n\r",ANCHOR_NUM, tag_dest,ANCHOR_NUM,rxInfo.rssi,rxInfo.snr,*rxInfo.buffer);
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b48 <dwRange+0x300>)
 8003ad2:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b48 <dwRange+0x300>)
 8003ada:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4b19      	ldr	r3, [pc, #100]	@ (8003b48 <dwRange+0x300>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	9302      	str	r3, [sp, #8]
 8003ae6:	9101      	str	r1, [sp, #4]
 8003ae8:	9200      	str	r2, [sp, #0]
 8003aea:	2302      	movs	r3, #2
 8003aec:	4602      	mov	r2, r0
 8003aee:	2102      	movs	r1, #2
 8003af0:	4818      	ldr	r0, [pc, #96]	@ (8003b54 <dwRange+0x30c>)
 8003af2:	f009 f9cf 	bl	800ce94 <iprintf>
				rxInfo.new_data = false;
 8003af6:	4b14      	ldr	r3, [pc, #80]	@ (8003b48 <dwRange+0x300>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	715a      	strb	r2, [r3, #5]
				free(rxInfo.buffer);
 8003afc:	4812      	ldr	r0, [pc, #72]	@ (8003b48 <dwRange+0x300>)
 8003afe:	f008 f9e5 	bl	800becc <free>
  __ASM volatile ("cpsie i" : : : "memory");
 8003b02:	b662      	cpsie	i
}
 8003b04:	e036      	b.n	8003b74 <dwRange+0x32c>
 8003b06:	bf00      	nop
 8003b08:	3bce48fa 	.word	0x3bce48fa
 8003b0c:	3db13518 	.word	0x3db13518
 8003b10:	13000000 	.word	0x13000000
 8003b14:	41b1dd19 	.word	0x41b1dd19
 8003b18:	2000052c 	.word	0x2000052c
 8003b1c:	2000002c 	.word	0x2000002c
 8003b20:	20000038 	.word	0x20000038
 8003b24:	2000036c 	.word	0x2000036c
 8003b28:	20000384 	.word	0x20000384
 8003b2c:	2427d000 	.word	0x2427d000
 8003b30:	20000370 	.word	0x20000370
 8003b34:	be0fffff 	.word	0xbe0fffff
 8003b38:	2000037a 	.word	0x2000037a
 8003b3c:	2000037e 	.word	0x2000037e
 8003b40:	20000388 	.word	0x20000388
 8003b44:	20000390 	.word	0x20000390
 8003b48:	20000514 	.word	0x20000514
 8003b4c:	08010748 	.word	0x08010748
 8003b50:	08010770 	.word	0x08010770
 8003b54:	08010784 	.word	0x08010784
 8003b58:	080107a8 	.word	0x080107a8
 8003b5c:	24279000 	.word	0x24279000
  __ASM volatile ("cpsid i" : : : "memory");
 8003b60:	b672      	cpsid	i
}
 8003b62:	bf00      	nop
				__enable_irq();
			}
			else {
				__disable_irq();
				printf("*0x%x:0x%x:0000#\n\r",ANCHOR_NUM, tag_dest);
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	461a      	mov	r2, r3
 8003b68:	2102      	movs	r1, #2
 8003b6a:	4806      	ldr	r0, [pc, #24]	@ (8003b84 <dwRange+0x33c>)
 8003b6c:	f009 f992 	bl	800ce94 <iprintf>
  __ASM volatile ("cpsie i" : : : "memory");
 8003b70:	b662      	cpsie	i
}
 8003b72:	bf00      	nop
				__enable_irq();
			}
		/* Reset RX to properly reinitialize LDE operation. */
		dwt_rxreset();
 8003b74:	f7ff fdce 	bl	8003714 <dwt_rxreset>

	/* Execute a delay between ranging exchanges. */
	//Sleep(RNG_DELAY_MS);
	//HAL_GPIO_TogglePin(TIMING_GPIO_GPIO_Port, TIMING_GPIO_Pin);

}
 8003b78:	bf00      	nop
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3728      	adds	r7, #40	@ 0x28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bdb0      	pop	{r4, r5, r7, pc}
 8003b82:	bf00      	nop
 8003b84:	080107a8 	.word	0x080107a8

08003b88 <resp_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void resp_msg_get_ts(uint8 *ts_field, uint32 *ts)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	e010      	b.n	8003bc0 <resp_msg_get_ts+0x38>
    {
        *ts += ts_field[i] << (i * 8);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	440a      	add	r2, r1
 8003ba8:	7812      	ldrb	r2, [r2, #0]
 8003baa:	4611      	mov	r1, r2
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	00d2      	lsls	r2, r2, #3
 8003bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb4:	441a      	add	r2, r3
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	ddeb      	ble.n	8003b9e <resp_msg_get_ts+0x16>
    }
}
 8003bc6:	bf00      	nop
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bd8:	f001 f9b2 	bl	8004f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bdc:	f000 f85c 	bl	8003c98 <_Z18SystemClock_Configv>

  /* Configure the System Power */
  SystemPower_Config();
 8003be0:	f000 f8c5 	bl	8003d6e <_ZL18SystemPower_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003be4:	f000 fa40 	bl	8004068 <_ZL12MX_GPIO_Initv>
  MX_ICACHE_Init();
 8003be8:	f000 f8d4 	bl	8003d94 <_ZL14MX_ICACHE_Initv>
  MX_SPI1_Init();
 8003bec:	f000 f8f0 	bl	8003dd0 <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 8003bf0:	f000 f9de 	bl	8003fb0 <_ZL12MX_TIM2_Initv>
  MX_SPI3_Init();
 8003bf4:	f000 f964 	bl	8003ec0 <_ZL12MX_SPI3_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	f000 ff97 	bl	8004b2c <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f000 ff94 	bl	8004b2c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8003c04:	2002      	movs	r0, #2
 8003c06:	f000 ff91 	bl	8004b2c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f001 f81d 	bl	8004c4c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8003c12:	4b1d      	ldr	r3, [pc, #116]	@ (8003c88 <main+0xb4>)
 8003c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c18:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8003c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c88 <main+0xb4>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8003c20:	4b19      	ldr	r3, [pc, #100]	@ (8003c88 <main+0xb4>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8003c26:	4b18      	ldr	r3, [pc, #96]	@ (8003c88 <main+0xb4>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8003c2c:	4b16      	ldr	r3, [pc, #88]	@ (8003c88 <main+0xb4>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8003c32:	4915      	ldr	r1, [pc, #84]	@ (8003c88 <main+0xb4>)
 8003c34:	2000      	movs	r0, #0
 8003c36:	f001 f8a3 	bl	8004d80 <BSP_COM_Init>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <main+0x7a>
  {
    Error_Handler();
 8003c4a:	f000 fb81 	bl	8004350 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  	  Lora_Operation_TX();
//  Lora_Operation_RX();

  	  if(!dwmInit()) {// init failed
 8003c4e:	f7ff fdad 	bl	80037ac <dwmInit>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf0c      	ite	eq
 8003c58:	2301      	moveq	r3, #1
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d004      	beq.n	8003c6c <main+0x98>
  		  printf("Init Failed\r\n");
 8003c62:	480a      	ldr	r0, [pc, #40]	@ (8003c8c <main+0xb8>)
 8003c64:	f009 f97e 	bl	800cf64 <puts>
  		  while (1);
 8003c68:	bf00      	nop
 8003c6a:	e7fd      	b.n	8003c68 <main+0x94>
  	   }
  	   else{
  		  printf("Init DW1000 Succeed\r\n");
 8003c6c:	4808      	ldr	r0, [pc, #32]	@ (8003c90 <main+0xbc>)
 8003c6e:	f009 f979 	bl	800cf64 <puts>
  	  }

  	  dwConfig(&config);
 8003c72:	4808      	ldr	r0, [pc, #32]	@ (8003c94 <main+0xc0>)
 8003c74:	f7ff fdac 	bl	80037d0 <dwConfig>
  	  Lora_init();
 8003c78:	f7fe fbce 	bl	8002418 <Lora_init>
  	  //dw_main();

  	  while (1)
  	  {
  	//	  Lora_Receive();
  		  dwRange();
 8003c7c:	f7ff fde4 	bl	8003848 <dwRange>
  		  RunRXStateMachine();
 8003c80:	f7fe fbfe 	bl	8002480 <RunRXStateMachine>
  		  dwRange();
 8003c84:	bf00      	nop
 8003c86:	e7f9      	b.n	8003c7c <main+0xa8>
 8003c88:	20000398 	.word	0x20000398
 8003c8c:	080107bc 	.word	0x080107bc
 8003c90:	080107cc 	.word	0x080107cc
 8003c94:	2000004c 	.word	0x2000004c

08003c98 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b09e      	sub	sp, #120	@ 0x78
 8003c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c9e:	f107 0318 	add.w	r3, r7, #24
 8003ca2:	2260      	movs	r2, #96	@ 0x60
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f009 fa6c 	bl	800d184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cac:	463b      	mov	r3, r7
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	609a      	str	r2, [r3, #8]
 8003cb6:	60da      	str	r2, [r3, #12]
 8003cb8:	611a      	str	r2, [r3, #16]
 8003cba:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003cbc:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8003cc0:	f001 feae 	bl	8005a20 <HAL_PWREx_ControlVoltageScaling>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	bf14      	ite	ne
 8003cca:	2301      	movne	r3, #1
 8003ccc:	2300      	moveq	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <_Z18SystemClock_Configv+0x40>
  {
    Error_Handler();
 8003cd4:	f000 fb3c 	bl	8004350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003cd8:	2310      	movs	r3, #16
 8003cda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003cec:	2301      	movs	r3, #1
 8003cee:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8003cf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003cfa:	230a      	movs	r3, #10
 8003cfc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8003cfe:	2308      	movs	r3, #8
 8003d00:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003d02:	2302      	movs	r3, #2
 8003d04:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8003d06:	2301      	movs	r3, #1
 8003d08:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8003d0a:	230c      	movs	r3, #12
 8003d0c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d12:	f107 0318 	add.w	r3, r7, #24
 8003d16:	4618      	mov	r0, r3
 8003d18:	f001 ff7e 	bl	8005c18 <HAL_RCC_OscConfig>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bf14      	ite	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	2300      	moveq	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 8003d2c:	f000 fb10 	bl	8004350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d30:	231f      	movs	r3, #31
 8003d32:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d34:	2303      	movs	r3, #3
 8003d36:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003d40:	2350      	movs	r3, #80	@ 0x50
 8003d42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003d48:	463b      	mov	r3, r7
 8003d4a:	2104      	movs	r1, #4
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f002 fe3f 	bl	80069d0 <HAL_RCC_ClockConfig>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf14      	ite	ne
 8003d58:	2301      	movne	r3, #1
 8003d5a:	2300      	moveq	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 8003d62:	f000 faf5 	bl	8004350 <Error_Handler>
  }
}
 8003d66:	bf00      	nop
 8003d68:	3778      	adds	r7, #120	@ 0x78
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <_ZL18SystemPower_Configv>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003d72:	f001 ff41 	bl	8005bf8 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8003d76:	2002      	movs	r0, #2
 8003d78:	f001 fede 	bl	8005b38 <HAL_PWREx_ConfigSupply>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bf14      	ite	ne
 8003d82:	2301      	movne	r3, #1
 8003d84:	2300      	moveq	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <_ZL18SystemPower_Configv+0x22>
  {
    Error_Handler();
 8003d8c:	f000 fae0 	bl	8004350 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8003d90:	bf00      	nop
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8003d98:	2000      	movs	r0, #0
 8003d9a:	f001 fe11 	bl	80059c0 <HAL_ICACHE_ConfigAssociativityMode>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bf14      	ite	ne
 8003da4:	2301      	movne	r3, #1
 8003da6:	2300      	moveq	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 8003dae:	f000 facf 	bl	8004350 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8003db2:	f001 fe25 	bl	8005a00 <HAL_ICACHE_Enable>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 8003dc6:	f000 fac3 	bl	8004350 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003de0:	4b35      	ldr	r3, [pc, #212]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003de2:	4a36      	ldr	r2, [pc, #216]	@ (8003ebc <_ZL12MX_SPI1_Initv+0xec>)
 8003de4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003de6:	4b34      	ldr	r3, [pc, #208]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003de8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003dec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003dee:	4b32      	ldr	r3, [pc, #200]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003df4:	4b30      	ldr	r3, [pc, #192]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003df6:	2207      	movs	r2, #7
 8003df8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e00:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e06:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e08:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003e0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e14:	4b28      	ldr	r3, [pc, #160]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e1a:	4b27      	ldr	r3, [pc, #156]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e20:	4b25      	ldr	r3, [pc, #148]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8003e26:	4b24      	ldr	r3, [pc, #144]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e28:	2207      	movs	r2, #7
 8003e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003e2c:	4b22      	ldr	r3, [pc, #136]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e32:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003e34:	4b20      	ldr	r3, [pc, #128]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003e40:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003e46:	4b1c      	ldr	r3, [pc, #112]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003e52:	4b19      	ldr	r3, [pc, #100]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003e58:	4b17      	ldr	r3, [pc, #92]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003e5e:	4b16      	ldr	r3, [pc, #88]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8003e64:	4b14      	ldr	r3, [pc, #80]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e6a:	4813      	ldr	r0, [pc, #76]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e6c:	f006 f8e6 	bl	800a03c <HAL_SPI_Init>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	bf14      	ite	ne
 8003e76:	2301      	movne	r3, #1
 8003e78:	2300      	moveq	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <_ZL12MX_SPI1_Initv+0xb4>
  {
    Error_Handler();
 8003e80:	f000 fa66 	bl	8004350 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8003e88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003e8c:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8003e92:	1d3b      	adds	r3, r7, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	4808      	ldr	r0, [pc, #32]	@ (8003eb8 <_ZL12MX_SPI1_Initv+0xe8>)
 8003e98:	f006 fe8f 	bl	800abba <HAL_SPIEx_SetConfigAutonomousMode>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bf14      	ite	ne
 8003ea2:	2301      	movne	r3, #1
 8003ea4:	2300      	moveq	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <_ZL12MX_SPI1_Initv+0xe0>
  {
    Error_Handler();
 8003eac:	f000 fa50 	bl	8004350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	200003a8 	.word	0x200003a8
 8003ebc:	40013000 	.word	0x40013000

08003ec0 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003ed0:	4b35      	ldr	r3, [pc, #212]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003ed2:	4a36      	ldr	r2, [pc, #216]	@ (8003fac <_ZL12MX_SPI3_Initv+0xec>)
 8003ed4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003ed6:	4b34      	ldr	r3, [pc, #208]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003ed8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003edc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003ede:	4b32      	ldr	r3, [pc, #200]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ee4:	4b30      	ldr	r3, [pc, #192]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003ee6:	2207      	movs	r2, #7
 8003ee8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eea:	4b2f      	ldr	r3, [pc, #188]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003ef8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003efc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003efe:	4b2a      	ldr	r3, [pc, #168]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f04:	4b28      	ldr	r3, [pc, #160]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f0a:	4b27      	ldr	r3, [pc, #156]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f10:	4b25      	ldr	r3, [pc, #148]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 8003f16:	4b24      	ldr	r3, [pc, #144]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f18:	2207      	movs	r2, #7
 8003f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f1c:	4b22      	ldr	r3, [pc, #136]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003f22:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003f24:	4b20      	ldr	r3, [pc, #128]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003f30:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003f36:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003f42:	4b19      	ldr	r3, [pc, #100]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003f48:	4b17      	ldr	r3, [pc, #92]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003f4e:	4b16      	ldr	r3, [pc, #88]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8003f54:	4b14      	ldr	r3, [pc, #80]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003f5a:	4813      	ldr	r0, [pc, #76]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f5c:	f006 f86e 	bl	800a03c <HAL_SPI_Init>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	bf14      	ite	ne
 8003f66:	2301      	movne	r3, #1
 8003f68:	2300      	moveq	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <_ZL12MX_SPI3_Initv+0xb4>
  {
    Error_Handler();
 8003f70:	f000 f9ee 	bl	8004350 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 8003f78:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003f7c:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8003f82:	1d3b      	adds	r3, r7, #4
 8003f84:	4619      	mov	r1, r3
 8003f86:	4808      	ldr	r0, [pc, #32]	@ (8003fa8 <_ZL12MX_SPI3_Initv+0xe8>)
 8003f88:	f006 fe17 	bl	800abba <HAL_SPIEx_SetConfigAutonomousMode>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bf14      	ite	ne
 8003f92:	2301      	movne	r3, #1
 8003f94:	2300      	moveq	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <_ZL12MX_SPI3_Initv+0xe0>
  {
    Error_Handler();
 8003f9c:	f000 f9d8 	bl	8004350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20000438 	.word	0x20000438
 8003fac:	46002000 	.word	0x46002000

08003fb0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fb6:	f107 0310 	add.w	r3, r7, #16
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	605a      	str	r2, [r3, #4]
 8003fcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003fce:	4b25      	ldr	r3, [pc, #148]	@ (8004064 <_ZL12MX_TIM2_Initv+0xb4>)
 8003fd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003fd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003fd6:	4b23      	ldr	r3, [pc, #140]	@ (8004064 <_ZL12MX_TIM2_Initv+0xb4>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fdc:	4b21      	ldr	r3, [pc, #132]	@ (8004064 <_ZL12MX_TIM2_Initv+0xb4>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003fe2:	4b20      	ldr	r3, [pc, #128]	@ (8004064 <_ZL12MX_TIM2_Initv+0xb4>)
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fea:	4b1e      	ldr	r3, [pc, #120]	@ (8004064 <_ZL12MX_TIM2_Initv+0xb4>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8004064 <_ZL12MX_TIM2_Initv+0xb4>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ff6:	481b      	ldr	r0, [pc, #108]	@ (8004064 <_ZL12MX_TIM2_Initv+0xb4>)
 8003ff8:	f006 fe20 	bl	800ac3c <HAL_TIM_Base_Init>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bf14      	ite	ne
 8004002:	2301      	movne	r3, #1
 8004004:	2300      	moveq	r3, #0
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 800400c:	f000 f9a0 	bl	8004350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004014:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004016:	f107 0310 	add.w	r3, r7, #16
 800401a:	4619      	mov	r1, r3
 800401c:	4811      	ldr	r0, [pc, #68]	@ (8004064 <_ZL12MX_TIM2_Initv+0xb4>)
 800401e:	f006 fe65 	bl	800acec <HAL_TIM_ConfigClockSource>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8004032:	f000 f98d 	bl	8004350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800403e:	1d3b      	adds	r3, r7, #4
 8004040:	4619      	mov	r1, r3
 8004042:	4808      	ldr	r0, [pc, #32]	@ (8004064 <_ZL12MX_TIM2_Initv+0xb4>)
 8004044:	f007 f8f6 	bl	800b234 <HAL_TIMEx_MasterConfigSynchronization>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8004058:	f000 f97a 	bl	8004350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800405c:	bf00      	nop
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	200004c8 	.word	0x200004c8

08004068 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08c      	sub	sp, #48	@ 0x30
 800406c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406e:	f107 031c 	add.w	r3, r7, #28
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	605a      	str	r2, [r3, #4]
 8004078:	609a      	str	r2, [r3, #8]
 800407a:	60da      	str	r2, [r3, #12]
 800407c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800407e:	4bac      	ldr	r3, [pc, #688]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 8004080:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004084:	4aaa      	ldr	r2, [pc, #680]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 8004086:	f043 0304 	orr.w	r3, r3, #4
 800408a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800408e:	4ba8      	ldr	r3, [pc, #672]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 8004090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800409c:	4ba4      	ldr	r3, [pc, #656]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 800409e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040a2:	4aa3      	ldr	r2, [pc, #652]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 80040a4:	f043 0320 	orr.w	r3, r3, #32
 80040a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80040ac:	4ba0      	ldr	r3, [pc, #640]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 80040ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040ba:	4b9d      	ldr	r3, [pc, #628]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 80040bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040c0:	4a9b      	ldr	r2, [pc, #620]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 80040c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80040ca:	4b99      	ldr	r3, [pc, #612]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 80040cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d8:	4b95      	ldr	r3, [pc, #596]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 80040da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040de:	4a94      	ldr	r2, [pc, #592]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80040e8:	4b91      	ldr	r3, [pc, #580]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 80040ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f6:	4b8e      	ldr	r3, [pc, #568]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 80040f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040fc:	4a8c      	ldr	r2, [pc, #560]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 80040fe:	f043 0302 	orr.w	r3, r3, #2
 8004102:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004106:	4b8a      	ldr	r3, [pc, #552]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 8004108:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004114:	4b86      	ldr	r3, [pc, #536]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 8004116:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800411a:	4a85      	ldr	r2, [pc, #532]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 800411c:	f043 0310 	orr.w	r3, r3, #16
 8004120:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004124:	4b82      	ldr	r3, [pc, #520]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 8004126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	607b      	str	r3, [r7, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004132:	4b7f      	ldr	r3, [pc, #508]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 8004134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004138:	4a7d      	ldr	r2, [pc, #500]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 800413a:	f043 0308 	orr.w	r3, r3, #8
 800413e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004142:	4b7b      	ldr	r3, [pc, #492]	@ (8004330 <_ZL12MX_GPIO_Initv+0x2c8>)
 8004144:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SX_LED_RX_Pin|SX_LED_TX_Pin|SX_Mode_SX126X_Pin|SKU_RESET_Pin, GPIO_PIN_RESET);
 8004150:	2200      	movs	r2, #0
 8004152:	f240 110b 	movw	r1, #267	@ 0x10b
 8004156:	4877      	ldr	r0, [pc, #476]	@ (8004334 <_ZL12MX_GPIO_Initv+0x2cc>)
 8004158:	f001 fbe8 	bl	800592c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_RESET_GPIO_Port, SX_RESET_Pin, GPIO_PIN_RESET);
 800415c:	2200      	movs	r2, #0
 800415e:	2108      	movs	r1, #8
 8004160:	4875      	ldr	r0, [pc, #468]	@ (8004338 <_ZL12MX_GPIO_Initv+0x2d0>)
 8004162:	f001 fbe3 	bl	800592c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SX_ANT_SW_Pin|SX_SPI1_CS_Pin, GPIO_PIN_RESET);
 8004166:	2200      	movs	r2, #0
 8004168:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800416c:	4873      	ldr	r0, [pc, #460]	@ (800433c <_ZL12MX_GPIO_Initv+0x2d4>)
 800416e:	f001 fbdd 	bl	800592c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(SKU_CS_GPIO_Port, SKU_CS_Pin, GPIO_PIN_RESET);
 8004172:	2200      	movs	r2, #0
 8004174:	2104      	movs	r1, #4
 8004176:	4872      	ldr	r0, [pc, #456]	@ (8004340 <_ZL12MX_GPIO_Initv+0x2d8>)
 8004178:	f001 fbd8 	bl	800592c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 800417c:	2200      	movs	r2, #0
 800417e:	2120      	movs	r1, #32
 8004180:	4870      	ldr	r0, [pc, #448]	@ (8004344 <_ZL12MX_GPIO_Initv+0x2dc>)
 8004182:	f001 fbd3 	bl	800592c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SKU_WAKEUP_Pin */
  GPIO_InitStruct.Pin = SKU_WAKEUP_Pin;
 8004186:	2308      	movs	r3, #8
 8004188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800418a:	2300      	movs	r3, #0
 800418c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	2300      	movs	r3, #0
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SKU_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8004192:	f107 031c 	add.w	r3, r7, #28
 8004196:	4619      	mov	r1, r3
 8004198:	4868      	ldr	r0, [pc, #416]	@ (800433c <_ZL12MX_GPIO_Initv+0x2d4>)
 800419a:	f001 f9d7 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pins : SX_LED_RX_Pin SX_LED_TX_Pin SX_Mode_SX126X_Pin SKU_RESET_Pin */
  GPIO_InitStruct.Pin = SX_LED_RX_Pin|SX_LED_TX_Pin|SX_Mode_SX126X_Pin|SKU_RESET_Pin;
 800419e:	f240 130b 	movw	r3, #267	@ 0x10b
 80041a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041a4:	2301      	movs	r3, #1
 80041a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ac:	2300      	movs	r3, #0
 80041ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041b0:	f107 031c 	add.w	r3, r7, #28
 80041b4:	4619      	mov	r1, r3
 80041b6:	485f      	ldr	r0, [pc, #380]	@ (8004334 <_ZL12MX_GPIO_Initv+0x2cc>)
 80041b8:	f001 f9c8 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80041bc:	2304      	movs	r3, #4
 80041be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041c0:	2303      	movs	r3, #3
 80041c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80041c8:	f107 031c 	add.w	r3, r7, #28
 80041cc:	4619      	mov	r1, r3
 80041ce:	4859      	ldr	r0, [pc, #356]	@ (8004334 <_ZL12MX_GPIO_Initv+0x2cc>)
 80041d0:	f001 f9bc 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_Mode_FRx_Pin */
  GPIO_InitStruct.Pin = SX_Mode_FRx_Pin;
 80041d4:	2304      	movs	r3, #4
 80041d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041d8:	2300      	movs	r3, #0
 80041da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SX_Mode_FRx_GPIO_Port, &GPIO_InitStruct);
 80041e0:	f107 031c 	add.w	r3, r7, #28
 80041e4:	4619      	mov	r1, r3
 80041e6:	4854      	ldr	r0, [pc, #336]	@ (8004338 <_ZL12MX_GPIO_Initv+0x2d0>)
 80041e8:	f001 f9b0 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_RESET_Pin */
  GPIO_InitStruct.Pin = SX_RESET_Pin;
 80041ec:	2308      	movs	r3, #8
 80041ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041f0:	2301      	movs	r3, #1
 80041f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f8:	2300      	movs	r3, #0
 80041fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SX_RESET_GPIO_Port, &GPIO_InitStruct);
 80041fc:	f107 031c 	add.w	r3, r7, #28
 8004200:	4619      	mov	r1, r3
 8004202:	484d      	ldr	r0, [pc, #308]	@ (8004338 <_ZL12MX_GPIO_Initv+0x2d0>)
 8004204:	f001 f9a2 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pins : SX_OPT_Pin UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = SX_OPT_Pin|UCPD_FLT_Pin;
 8004208:	f244 0301 	movw	r3, #16385	@ 0x4001
 800420c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800420e:	2300      	movs	r3, #0
 8004210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004212:	2300      	movs	r3, #0
 8004214:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004216:	f107 031c 	add.w	r3, r7, #28
 800421a:	4619      	mov	r1, r3
 800421c:	4849      	ldr	r0, [pc, #292]	@ (8004344 <_ZL12MX_GPIO_Initv+0x2dc>)
 800421e:	f001 f995 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pins : SX_ANT_SW_Pin SX_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SX_ANT_SW_Pin|SX_SPI1_CS_Pin;
 8004222:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004228:	2301      	movs	r3, #1
 800422a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422c:	2300      	movs	r3, #0
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004230:	2300      	movs	r3, #0
 8004232:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004234:	f107 031c 	add.w	r3, r7, #28
 8004238:	4619      	mov	r1, r3
 800423a:	4840      	ldr	r0, [pc, #256]	@ (800433c <_ZL12MX_GPIO_Initv+0x2d4>)
 800423c:	f001 f986 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_DIO1_Pin */
  GPIO_InitStruct.Pin = SX_DIO1_Pin;
 8004240:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004246:	4b40      	ldr	r3, [pc, #256]	@ (8004348 <_ZL12MX_GPIO_Initv+0x2e0>)
 8004248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424a:	2300      	movs	r3, #0
 800424c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SX_DIO1_GPIO_Port, &GPIO_InitStruct);
 800424e:	f107 031c 	add.w	r3, r7, #28
 8004252:	4619      	mov	r1, r3
 8004254:	483d      	ldr	r0, [pc, #244]	@ (800434c <_ZL12MX_GPIO_Initv+0x2e4>)
 8004256:	f001 f979 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BUSY_Pin */
  GPIO_InitStruct.Pin = SX_BUSY_Pin;
 800425a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800425e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004260:	2300      	movs	r3, #0
 8004262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004264:	2300      	movs	r3, #0
 8004266:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SX_BUSY_GPIO_Port, &GPIO_InitStruct);
 8004268:	f107 031c 	add.w	r3, r7, #28
 800426c:	4619      	mov	r1, r3
 800426e:	4837      	ldr	r0, [pc, #220]	@ (800434c <_ZL12MX_GPIO_Initv+0x2e4>)
 8004270:	f001 f96c 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004274:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800427a:	2303      	movs	r3, #3
 800427c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427e:	2300      	movs	r3, #0
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004282:	f107 031c 	add.w	r3, r7, #28
 8004286:	4619      	mov	r1, r3
 8004288:	482e      	ldr	r0, [pc, #184]	@ (8004344 <_ZL12MX_GPIO_Initv+0x2dc>)
 800428a:	f001 f95f 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : SKU_IRQ_Pin */
  GPIO_InitStruct.Pin = SKU_IRQ_Pin;
 800428e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004294:	2300      	movs	r3, #0
 8004296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004298:	2300      	movs	r3, #0
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SKU_IRQ_GPIO_Port, &GPIO_InitStruct);
 800429c:	f107 031c 	add.w	r3, r7, #28
 80042a0:	4619      	mov	r1, r3
 80042a2:	4824      	ldr	r0, [pc, #144]	@ (8004334 <_ZL12MX_GPIO_Initv+0x2cc>)
 80042a4:	f001 f952 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80042a8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80042ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ae:	2302      	movs	r3, #2
 80042b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b6:	2300      	movs	r3, #0
 80042b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ba:	f107 031c 	add.w	r3, r7, #28
 80042be:	4619      	mov	r1, r3
 80042c0:	481d      	ldr	r0, [pc, #116]	@ (8004338 <_ZL12MX_GPIO_Initv+0x2d0>)
 80042c2:	f001 f943 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80042c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042cc:	2303      	movs	r3, #3
 80042ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d4:	f107 031c 	add.w	r3, r7, #28
 80042d8:	4619      	mov	r1, r3
 80042da:	4817      	ldr	r0, [pc, #92]	@ (8004338 <_ZL12MX_GPIO_Initv+0x2d0>)
 80042dc:	f001 f936 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : SKU_CS_Pin */
  GPIO_InitStruct.Pin = SKU_CS_Pin;
 80042e0:	2304      	movs	r3, #4
 80042e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042e4:	2301      	movs	r3, #1
 80042e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ec:	2300      	movs	r3, #0
 80042ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SKU_CS_GPIO_Port, &GPIO_InitStruct);
 80042f0:	f107 031c 	add.w	r3, r7, #28
 80042f4:	4619      	mov	r1, r3
 80042f6:	4812      	ldr	r0, [pc, #72]	@ (8004340 <_ZL12MX_GPIO_Initv+0x2d8>)
 80042f8:	f001 f928 	bl	800554c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 80042fc:	2320      	movs	r3, #32
 80042fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004300:	2301      	movs	r3, #1
 8004302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004304:	2300      	movs	r3, #0
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004308:	2300      	movs	r3, #0
 800430a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 800430c:	f107 031c 	add.w	r3, r7, #28
 8004310:	4619      	mov	r1, r3
 8004312:	480c      	ldr	r0, [pc, #48]	@ (8004344 <_ZL12MX_GPIO_Initv+0x2dc>)
 8004314:	f001 f91a 	bl	800554c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8004318:	2200      	movs	r2, #0
 800431a:	2100      	movs	r1, #0
 800431c:	2016      	movs	r0, #22
 800431e:	f000 ffb1 	bl	8005284 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8004322:	2016      	movs	r0, #22
 8004324:	f000 ffc8 	bl	80052b8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004328:	bf00      	nop
 800432a:	3730      	adds	r7, #48	@ 0x30
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	46020c00 	.word	0x46020c00
 8004334:	42020800 	.word	0x42020800
 8004338:	42020000 	.word	0x42020000
 800433c:	42021400 	.word	0x42021400
 8004340:	42020c00 	.word	0x42020c00
 8004344:	42020400 	.word	0x42020400
 8004348:	10110000 	.word	0x10110000
 800434c:	42021000 	.word	0x42021000

08004350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004354:	b672      	cpsid	i
}
 8004356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004358:	bf00      	nop
 800435a:	e7fd      	b.n	8004358 <Error_Handler+0x8>

0800435c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004362:	4b0a      	ldr	r3, [pc, #40]	@ (800438c <HAL_MspInit+0x30>)
 8004364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004368:	4a08      	ldr	r2, [pc, #32]	@ (800438c <HAL_MspInit+0x30>)
 800436a:	f043 0304 	orr.w	r3, r3, #4
 800436e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004372:	4b06      	ldr	r3, [pc, #24]	@ (800438c <HAL_MspInit+0x30>)
 8004374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	46020c00 	.word	0x46020c00

08004390 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b0c2      	sub	sp, #264	@ 0x108
 8004394:	af00      	add	r7, sp, #0
 8004396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800439a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800439e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	609a      	str	r2, [r3, #8]
 80043ac:	60da      	str	r2, [r3, #12]
 80043ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043b0:	f107 0318 	add.w	r3, r7, #24
 80043b4:	22d8      	movs	r2, #216	@ 0xd8
 80043b6:	2100      	movs	r1, #0
 80043b8:	4618      	mov	r0, r3
 80043ba:	f008 fee3 	bl	800d184 <memset>
  if(hspi->Instance==SPI1)
 80043be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a53      	ldr	r2, [pc, #332]	@ (8004518 <HAL_SPI_MspInit+0x188>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d146      	bne.n	800445e <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80043d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 80043dc:	2300      	movs	r3, #0
 80043de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043e2:	f107 0318 	add.w	r3, r7, #24
 80043e6:	4618      	mov	r0, r3
 80043e8:	f002 fec6 	bl	8007178 <HAL_RCCEx_PeriphCLKConfig>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_SPI_MspInit+0x66>
    {
      Error_Handler();
 80043f2:	f7ff ffad 	bl	8004350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80043f6:	4b49      	ldr	r3, [pc, #292]	@ (800451c <HAL_SPI_MspInit+0x18c>)
 80043f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043fc:	4a47      	ldr	r2, [pc, #284]	@ (800451c <HAL_SPI_MspInit+0x18c>)
 80043fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004402:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004406:	4b45      	ldr	r3, [pc, #276]	@ (800451c <HAL_SPI_MspInit+0x18c>)
 8004408:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800440c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004414:	4b41      	ldr	r3, [pc, #260]	@ (800451c <HAL_SPI_MspInit+0x18c>)
 8004416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800441a:	4a40      	ldr	r2, [pc, #256]	@ (800451c <HAL_SPI_MspInit+0x18c>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004424:	4b3d      	ldr	r3, [pc, #244]	@ (800451c <HAL_SPI_MspInit+0x18c>)
 8004426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SX_SPI1_SCK_Pin|SX_SPI1_MISO_Pin|SX_SPI1_MOSI_Pin;
 8004432:	23e0      	movs	r3, #224	@ 0xe0
 8004434:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004438:	2302      	movs	r3, #2
 800443a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443e:	2300      	movs	r3, #0
 8004440:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004444:	2300      	movs	r3, #0
 8004446:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800444a:	2305      	movs	r3, #5
 800444c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004450:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8004454:	4619      	mov	r1, r3
 8004456:	4832      	ldr	r0, [pc, #200]	@ (8004520 <HAL_SPI_MspInit+0x190>)
 8004458:	f001 f878 	bl	800554c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800445c:	e057      	b.n	800450e <HAL_SPI_MspInit+0x17e>
  else if(hspi->Instance==SPI3)
 800445e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004462:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a2e      	ldr	r2, [pc, #184]	@ (8004524 <HAL_SPI_MspInit+0x194>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d14e      	bne.n	800450e <HAL_SPI_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004470:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_SYSCLK;
 800447c:	2308      	movs	r3, #8
 800447e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004482:	f107 0318 	add.w	r3, r7, #24
 8004486:	4618      	mov	r0, r3
 8004488:	f002 fe76 	bl	8007178 <HAL_RCCEx_PeriphCLKConfig>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_SPI_MspInit+0x106>
      Error_Handler();
 8004492:	f7ff ff5d 	bl	8004350 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004496:	4b21      	ldr	r3, [pc, #132]	@ (800451c <HAL_SPI_MspInit+0x18c>)
 8004498:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800449c:	4a1f      	ldr	r2, [pc, #124]	@ (800451c <HAL_SPI_MspInit+0x18c>)
 800449e:	f043 0320 	orr.w	r3, r3, #32
 80044a2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80044a6:	4b1d      	ldr	r3, [pc, #116]	@ (800451c <HAL_SPI_MspInit+0x18c>)
 80044a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044b4:	4b19      	ldr	r3, [pc, #100]	@ (800451c <HAL_SPI_MspInit+0x18c>)
 80044b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044ba:	4a18      	ldr	r2, [pc, #96]	@ (800451c <HAL_SPI_MspInit+0x18c>)
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80044c4:	4b15      	ldr	r3, [pc, #84]	@ (800451c <HAL_SPI_MspInit+0x18c>)
 80044c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044ca:	f003 0204 	and.w	r2, r3, #4
 80044ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044d2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80044e0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SKU_SPI3_SCK_Pin|SKU_SPI3_MISO_Pin|SKU_SPI3_MOSI_Pin;
 80044e2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80044e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ea:	2302      	movs	r3, #2
 80044ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80044fc:	2306      	movs	r3, #6
 80044fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004502:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8004506:	4619      	mov	r1, r3
 8004508:	4807      	ldr	r0, [pc, #28]	@ (8004528 <HAL_SPI_MspInit+0x198>)
 800450a:	f001 f81f 	bl	800554c <HAL_GPIO_Init>
}
 800450e:	bf00      	nop
 8004510:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40013000 	.word	0x40013000
 800451c:	46020c00 	.word	0x46020c00
 8004520:	42020000 	.word	0x42020000
 8004524:	46002000 	.word	0x46002000
 8004528:	42020800 	.word	0x42020800

0800452c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453c:	d10e      	bne.n	800455c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800453e:	4b0a      	ldr	r3, [pc, #40]	@ (8004568 <HAL_TIM_Base_MspInit+0x3c>)
 8004540:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004544:	4a08      	ldr	r2, [pc, #32]	@ (8004568 <HAL_TIM_Base_MspInit+0x3c>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800454e:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <HAL_TIM_Base_MspInit+0x3c>)
 8004550:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800455c:	bf00      	nop
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	46020c00 	.word	0x46020c00

0800456c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004570:	bf00      	nop
 8004572:	e7fd      	b.n	8004570 <NMI_Handler+0x4>

08004574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault Handler\n\r");
 8004578:	4801      	ldr	r0, [pc, #4]	@ (8004580 <HardFault_Handler+0xc>)
 800457a:	f008 fc8b 	bl	800ce94 <iprintf>
 800457e:	e7fb      	b.n	8004578 <HardFault_Handler+0x4>
 8004580:	080107e4 	.word	0x080107e4

08004584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004588:	bf00      	nop
 800458a:	e7fd      	b.n	8004588 <MemManage_Handler+0x4>

0800458c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004590:	bf00      	nop
 8004592:	e7fd      	b.n	8004590 <BusFault_Handler+0x4>

08004594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <UsageFault_Handler+0x4>

0800459c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045a0:	bf00      	nop
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045aa:	b480      	push	{r7}
 80045ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045bc:	bf00      	nop
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045ca:	f000 fd5f 	bl	800508c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045ce:	bf00      	nop
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SX_DIO1_Pin);
 80045d6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80045da:	f001 f9bf 	bl	800595c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80045e6:	2000      	movs	r0, #0
 80045e8:	f000 fba8 	bl	8004d3c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80045ec:	bf00      	nop
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  return 1;
 80045f4:	2301      	movs	r3, #1
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <_kill>:

int _kill(int pid, int sig)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800460a:	f008 fe1d 	bl	800d248 <__errno>
 800460e:	4603      	mov	r3, r0
 8004610:	2216      	movs	r2, #22
 8004612:	601a      	str	r2, [r3, #0]
  return -1;
 8004614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <_exit>:

void _exit (int status)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004628:	f04f 31ff 	mov.w	r1, #4294967295
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff ffe7 	bl	8004600 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004632:	bf00      	nop
 8004634:	e7fd      	b.n	8004632 <_exit+0x12>

08004636 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b086      	sub	sp, #24
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	e00a      	b.n	800465e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004648:	f3af 8000 	nop.w
 800464c:	4601      	mov	r1, r0
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	60ba      	str	r2, [r7, #8]
 8004654:	b2ca      	uxtb	r2, r1
 8004656:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	3301      	adds	r3, #1
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	429a      	cmp	r2, r3
 8004664:	dbf0      	blt.n	8004648 <_read+0x12>
  }

  return len;
 8004666:	687b      	ldr	r3, [r7, #4]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e009      	b.n	8004696 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	60ba      	str	r2, [r7, #8]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fbdc 	bl	8004e48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	3301      	adds	r3, #1
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	429a      	cmp	r2, r3
 800469c:	dbf1      	blt.n	8004682 <_write+0x12>
  }
  return len;
 800469e:	687b      	ldr	r3, [r7, #4]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <_close>:

int _close(int file)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80046b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046d0:	605a      	str	r2, [r3, #4]
  return 0;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <_isatty>:

int _isatty(int file)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046e8:	2301      	movs	r3, #1
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b085      	sub	sp, #20
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004718:	4a14      	ldr	r2, [pc, #80]	@ (800476c <_sbrk+0x5c>)
 800471a:	4b15      	ldr	r3, [pc, #84]	@ (8004770 <_sbrk+0x60>)
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004724:	4b13      	ldr	r3, [pc, #76]	@ (8004774 <_sbrk+0x64>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800472c:	4b11      	ldr	r3, [pc, #68]	@ (8004774 <_sbrk+0x64>)
 800472e:	4a12      	ldr	r2, [pc, #72]	@ (8004778 <_sbrk+0x68>)
 8004730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004732:	4b10      	ldr	r3, [pc, #64]	@ (8004774 <_sbrk+0x64>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4413      	add	r3, r2
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	429a      	cmp	r2, r3
 800473e:	d207      	bcs.n	8004750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004740:	f008 fd82 	bl	800d248 <__errno>
 8004744:	4603      	mov	r3, r0
 8004746:	220c      	movs	r2, #12
 8004748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800474a:	f04f 33ff 	mov.w	r3, #4294967295
 800474e:	e009      	b.n	8004764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004750:	4b08      	ldr	r3, [pc, #32]	@ (8004774 <_sbrk+0x64>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004756:	4b07      	ldr	r3, [pc, #28]	@ (8004774 <_sbrk+0x64>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	4a05      	ldr	r2, [pc, #20]	@ (8004774 <_sbrk+0x64>)
 8004760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004762:	68fb      	ldr	r3, [r7, #12]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20270000 	.word	0x20270000
 8004770:	00000400 	.word	0x00000400
 8004774:	2000051c 	.word	0x2000051c
 8004778:	20000718 	.word	0x20000718

0800477c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004780:	4b18      	ldr	r3, [pc, #96]	@ (80047e4 <SystemInit+0x68>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004786:	4a17      	ldr	r2, [pc, #92]	@ (80047e4 <SystemInit+0x68>)
 8004788:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800478c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8004790:	4b15      	ldr	r3, [pc, #84]	@ (80047e8 <SystemInit+0x6c>)
 8004792:	2201      	movs	r2, #1
 8004794:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8004796:	4b14      	ldr	r3, [pc, #80]	@ (80047e8 <SystemInit+0x6c>)
 8004798:	2200      	movs	r2, #0
 800479a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800479c:	4b12      	ldr	r3, [pc, #72]	@ (80047e8 <SystemInit+0x6c>)
 800479e:	2200      	movs	r2, #0
 80047a0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80047a2:	4b11      	ldr	r3, [pc, #68]	@ (80047e8 <SystemInit+0x6c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80047a8:	4b0f      	ldr	r3, [pc, #60]	@ (80047e8 <SystemInit+0x6c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a0e      	ldr	r2, [pc, #56]	@ (80047e8 <SystemInit+0x6c>)
 80047ae:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80047b2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80047b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80047b8:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <SystemInit+0x6c>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80047be:	4b0a      	ldr	r3, [pc, #40]	@ (80047e8 <SystemInit+0x6c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a09      	ldr	r2, [pc, #36]	@ (80047e8 <SystemInit+0x6c>)
 80047c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80047ca:	4b07      	ldr	r3, [pc, #28]	@ (80047e8 <SystemInit+0x6c>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047d0:	4b04      	ldr	r3, [pc, #16]	@ (80047e4 <SystemInit+0x68>)
 80047d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80047d6:	609a      	str	r2, [r3, #8]
  #endif
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	e000ed00 	.word	0xe000ed00
 80047e8:	46020c00 	.word	0x46020c00

080047ec <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80047f2:	f000 f969 	bl	8004ac8 <port_GetEXT_IRQStatus>
 80047f6:	4603      	mov	r3, r0
 80047f8:	607b      	str	r3, [r7, #4]

	if(s) {
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8004800:	f000 f954 	bl	8004aac <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8004804:	687b      	ldr	r3, [r7, #4]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 800481c:	f000 f94d 	bl	8004aba <port_EnableEXT_IRQ>
	}
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <deca_sleep>:
#include "port.h"
#include "sleep.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f8c5 	bl	80049c0 <Sleep>
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8004840:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8004844:	4683      	mov	fp, r0
 8004846:	468a      	mov	sl, r1
 8004848:	4690      	mov	r8, r2
 800484a:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800484c:	f7ff ffce 	bl	80047ec <decamutexon>
 8004850:	4606      	mov	r6, r0

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8004852:	4d13      	ldr	r5, [pc, #76]	@ (80048a0 <writetospi+0x60>)
 8004854:	4628      	mov	r0, r5
 8004856:	f006 f8b9 	bl	800a9cc <HAL_SPI_GetState>
 800485a:	2801      	cmp	r0, #1
 800485c:	4604      	mov	r4, r0
 800485e:	d1f9      	bne.n	8004854 <writetospi+0x14>

    HAL_GPIO_WritePin(SKU_CS_GPIO_Port, SKU_CS_Pin, GPIO_PIN_RESET);
 8004860:	2200      	movs	r2, #0
 8004862:	2104      	movs	r1, #4
 8004864:	480f      	ldr	r0, [pc, #60]	@ (80048a4 <writetospi+0x64>)
 8004866:	f001 f861 	bl	800592c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);//HAL_MAX_DELAY);    /* Send header in polling mode */
 800486a:	465a      	mov	r2, fp
 800486c:	4651      	mov	r1, sl
 800486e:	f04f 33ff 	mov.w	r3, #4294967295
 8004872:	480b      	ldr	r0, [pc, #44]	@ (80048a0 <writetospi+0x60>)
 8004874:	f005 fcf8 	bl	800a268 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);//HAL_MAX_DELAY);        /* Send data in polling mode */
 8004878:	f04f 33ff 	mov.w	r3, #4294967295
 800487c:	4649      	mov	r1, r9
 800487e:	fa1f f288 	uxth.w	r2, r8
 8004882:	4807      	ldr	r0, [pc, #28]	@ (80048a0 <writetospi+0x60>)
 8004884:	f005 fcf0 	bl	800a268 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(SKU_CS_GPIO_Port, SKU_CS_Pin, GPIO_PIN_SET);
 8004888:	4622      	mov	r2, r4
 800488a:	2104      	movs	r1, #4
 800488c:	4805      	ldr	r0, [pc, #20]	@ (80048a4 <writetospi+0x64>)
 800488e:	f001 f84d 	bl	800592c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8004892:	4630      	mov	r0, r6
 8004894:	f7ff ffbb 	bl	800480e <decamutexoff>

    return 0;
} // end writetospi()
 8004898:	2000      	movs	r0, #0
 800489a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800489e:	bf00      	nop
 80048a0:	20000438 	.word	0x20000438
 80048a4:	42020c00 	.word	0x42020c00

080048a8 <readfromspi>:
//#pragma GCC optimize ("O3")


//#pragma GCC optimize ("O3")
int readfromspi(uint16 headerLength, const uint8 *headerBuffer, uint32 readlength, uint8 *readBuffer)
{
 80048a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ac:	4604      	mov	r4, r0
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	4615      	mov	r5, r2
 80048b2:	4698      	mov	r8, r3
 80048b4:	4689      	mov	r9, r1
	decaIrqStatus_t stat;
	stat = decamutexon();
 80048b6:	f7ff ff99 	bl	80047ec <decamutexon>

	uint8_t headBuf[headerLength]; //make a copy
 80048ba:	466a      	mov	r2, sp
 80048bc:	1de3      	adds	r3, r4, #7
 80048be:	08db      	lsrs	r3, r3, #3
 80048c0:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 80048c4:	469d      	mov	sp, r3
	stat = decamutexon();
 80048c6:	4606      	mov	r6, r0
	uint8_t headBuf[headerLength]; //make a copy
 80048c8:	46ea      	mov	sl, sp
	for (int i = 0; i < headerLength; ++i)
 80048ca:	b124      	cbz	r4, 80048d6 <readfromspi+0x2e>
	{
		headBuf[i] = headerBuffer[i];
 80048cc:	4649      	mov	r1, r9
 80048ce:	4622      	mov	r2, r4
 80048d0:	4668      	mov	r0, sp
 80048d2:	f008 fcf4 	bl	800d2be <memcpy>
	}

	for (int i = 0; i < readlength; ++i)
 80048d6:	b125      	cbz	r5, 80048e2 <readfromspi+0x3a>
	{
		readBuffer[i] = 0;
 80048d8:	462a      	mov	r2, r5
 80048da:	2100      	movs	r1, #0
 80048dc:	4640      	mov	r0, r8
 80048de:	f008 fc51 	bl	800d184 <memset>
	}

	HAL_GPIO_WritePin(SKU_CS_GPIO_Port, SKU_CS_Pin, GPIO_PIN_RESET);
 80048e2:	2200      	movs	r2, #0
 80048e4:	2104      	movs	r1, #4
 80048e6:	4813      	ldr	r0, [pc, #76]	@ (8004934 <readfromspi+0x8c>)
 80048e8:	f001 f820 	bl	800592c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, headBuf, headerLength, 5);
 80048ec:	4622      	mov	r2, r4
 80048ee:	2305      	movs	r3, #5
 80048f0:	4651      	mov	r1, sl
 80048f2:	4811      	ldr	r0, [pc, #68]	@ (8004938 <readfromspi+0x90>)
 80048f4:	f005 fcb8 	bl	800a268 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, headBuf, headerLength, HAL_MAX_DELAY);
	while(HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_BUSY) {}
 80048f8:	4c0f      	ldr	r4, [pc, #60]	@ (8004938 <readfromspi+0x90>)
 80048fa:	4620      	mov	r0, r4
 80048fc:	f006 f866 	bl	800a9cc <HAL_SPI_GetState>
 8004900:	2802      	cmp	r0, #2
 8004902:	d0fa      	beq.n	80048fa <readfromspi+0x52>

	HAL_SPI_Receive(&hspi3, readBuffer, readlength, 5);
 8004904:	2305      	movs	r3, #5
 8004906:	4641      	mov	r1, r8
 8004908:	480b      	ldr	r0, [pc, #44]	@ (8004938 <readfromspi+0x90>)
 800490a:	b2aa      	uxth	r2, r5
 800490c:	f005 febc 	bl	800a688 <HAL_SPI_Receive>
//	HAL_SPI_Receive(&hspi3, readBuffer, readlength, HAL_MAX_DELAY);
	while(HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_BUSY) {}
 8004910:	4c09      	ldr	r4, [pc, #36]	@ (8004938 <readfromspi+0x90>)
 8004912:	4620      	mov	r0, r4
 8004914:	f006 f85a 	bl	800a9cc <HAL_SPI_GetState>
 8004918:	2802      	cmp	r0, #2
 800491a:	d0fa      	beq.n	8004912 <readfromspi+0x6a>

	HAL_GPIO_WritePin(SKU_CS_GPIO_Port, SKU_CS_Pin, GPIO_PIN_SET);
 800491c:	2201      	movs	r2, #1
 800491e:	2104      	movs	r1, #4
 8004920:	4804      	ldr	r0, [pc, #16]	@ (8004934 <readfromspi+0x8c>)
 8004922:	f001 f803 	bl	800592c <HAL_GPIO_WritePin>

	decamutexoff(stat);
 8004926:	4630      	mov	r0, r6
 8004928:	f7ff ff71 	bl	800480e <decamutexoff>

	return 0;
}
 800492c:	2000      	movs	r0, #0
 800492e:	46bd      	mov	sp, r7
 8004930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004934:	42020c00 	.word	0x42020c00
 8004938:	20000438 	.word	0x20000438

0800493c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800494a:	2b00      	cmp	r3, #0
 800494c:	db0b      	blt.n	8004966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	4907      	ldr	r1, [pc, #28]	@ (8004974 <__NVIC_EnableIRQ+0x38>)
 8004956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	2001      	movs	r0, #1
 800495e:	fa00 f202 	lsl.w	r2, r0, r2
 8004962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	e000e100 	.word	0xe000e100

08004978 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004986:	2b00      	cmp	r3, #0
 8004988:	db12      	blt.n	80049b0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	f003 021f 	and.w	r2, r3, #31
 8004990:	490a      	ldr	r1, [pc, #40]	@ (80049bc <__NVIC_DisableIRQ+0x44>)
 8004992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	2001      	movs	r0, #1
 800499a:	fa00 f202 	lsl.w	r2, r0, r2
 800499e:	3320      	adds	r3, #32
 80049a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80049a4:	f3bf 8f4f 	dsb	sy
}
 80049a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049aa:	f3bf 8f6f 	isb	sy
}
 80049ae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	e000e100 	.word	0xe000e100

080049c0 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fb7f 	bl	80050cc <HAL_Delay>
}
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 80049e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004a10 <EXTI_GetITEnStatus+0x38>)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	095b      	lsrs	r3, r3, #5
 80049e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bf14      	ite	ne
 80049fc:	2301      	movne	r3, #1
 80049fe:	2300      	moveq	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	e000e100 	.word	0xe000e100

08004a14 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = SKU_RESET_Pin;
 8004a1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a1e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004a20:	2311      	movs	r3, #17
 8004a22:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(SKU_RESET_GPIO_Port, &GPIO_InitStruct);
 8004a28:	1d3b      	adds	r3, r7, #4
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4810      	ldr	r0, [pc, #64]	@ (8004a70 <reset_DW1000+0x5c>)
 8004a2e:	f000 fd8d 	bl	800554c <HAL_GPIO_Init>

	//drive the RSTn pin low
    HAL_GPIO_WritePin(SKU_RESET_GPIO_Port, SKU_RESET_Pin, GPIO_PIN_RESET);
 8004a32:	2200      	movs	r2, #0
 8004a34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a38:	480d      	ldr	r0, [pc, #52]	@ (8004a70 <reset_DW1000+0x5c>)
 8004a3a:	f000 ff77 	bl	800592c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8004a3e:	2001      	movs	r0, #1
 8004a40:	f000 fb44 	bl	80050cc <HAL_Delay>

    GPIO_InitStruct.Pin = SKU_RESET_Pin;
 8004a44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a48:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a52:	2300      	movs	r3, #0
 8004a54:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SKU_RESET_GPIO_Port, &GPIO_InitStruct);
 8004a56:	1d3b      	adds	r3, r7, #4
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4805      	ldr	r0, [pc, #20]	@ (8004a70 <reset_DW1000+0x5c>)
 8004a5c:	f000 fd76 	bl	800554c <HAL_GPIO_Init>

	HAL_Delay(2);
 8004a60:	2002      	movs	r0, #2
 8004a62:	f000 fb33 	bl	80050cc <HAL_Delay>

    //put the pin back to output open-drain (not active)
//    setup_DW1000RSTnIRQ(0);

}
 8004a66:	bf00      	nop
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	42020800 	.word	0x42020800

08004a74 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi3 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
    hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004a78:	4b04      	ldr	r3, [pc, #16]	@ (8004a8c <port_set_dw1000_slowrate+0x18>)
 8004a7a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004a7e:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi3);
 8004a80:	4802      	ldr	r0, [pc, #8]	@ (8004a8c <port_set_dw1000_slowrate+0x18>)
 8004a82:	f005 fadb 	bl	800a03c <HAL_SPI_Init>
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000438 	.word	0x20000438

08004a90 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi3 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
    hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;//16; //20MHz should be 8 because our base rate is 160MHz
 8004a94:	4b04      	ldr	r3, [pc, #16]	@ (8004aa8 <port_set_dw1000_fastrate+0x18>)
 8004a96:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004a9a:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi3);
 8004a9c:	4802      	ldr	r0, [pc, #8]	@ (8004aa8 <port_set_dw1000_fastrate+0x18>)
 8004a9e:	f005 facd 	bl	800a03c <HAL_SPI_Init>
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000438 	.word	0x20000438

08004aac <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8004ab0:	2017      	movs	r0, #23
 8004ab2:	f7ff ff61 	bl	8004978 <__NVIC_DisableIRQ>
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8004abe:	2017      	movs	r0, #23
 8004ac0:	f7ff ff3c 	bl	800493c <__NVIC_EnableIRQ>
}
 8004ac4:	bf00      	nop
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8004acc:	2017      	movs	r0, #23
 8004ace:	f7ff ff83 	bl	80049d8 <EXTI_GetITEnStatus>
 8004ad2:	4603      	mov	r3, r0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8004ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004b10 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004adc:	f7ff fe4e 	bl	800477c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004ae0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004ae2:	e003      	b.n	8004aec <LoopCopyDataInit>

08004ae4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004ae6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004ae8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004aea:	3104      	adds	r1, #4

08004aec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004aec:	480a      	ldr	r0, [pc, #40]	@ (8004b18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004aee:	4b0b      	ldr	r3, [pc, #44]	@ (8004b1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8004af0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004af2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004af4:	d3f6      	bcc.n	8004ae4 <CopyDataInit>
	ldr	r2, =_sbss
 8004af6:	4a0a      	ldr	r2, [pc, #40]	@ (8004b20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004af8:	e002      	b.n	8004b00 <LoopFillZerobss>

08004afa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004afa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004afc:	f842 3b04 	str.w	r3, [r2], #4

08004b00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004b00:	4b08      	ldr	r3, [pc, #32]	@ (8004b24 <LoopForever+0x16>)
	cmp	r2, r3
 8004b02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004b04:	d3f9      	bcc.n	8004afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b06:	f008 fba5 	bl	800d254 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b0a:	f7ff f863 	bl	8003bd4 <main>

08004b0e <LoopForever>:

LoopForever:
    b LoopForever
 8004b0e:	e7fe      	b.n	8004b0e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8004b10:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8004b14:	08010ee0 	.word	0x08010ee0
	ldr	r0, =_sdata
 8004b18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004b1c:	20000248 	.word	0x20000248
	ldr	r2, =_sbss
 8004b20:	20000248 	.word	0x20000248
	ldr	r3, = _ebss
 8004b24:	20000712 	.word	0x20000712

08004b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b28:	e7fe      	b.n	8004b28 <ADC1_2_IRQHandler>
	...

08004b2c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	@ 0x38
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d009      	beq.n	8004b58 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d006      	beq.n	8004b58 <BSP_LED_Init+0x2c>
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d003      	beq.n	8004b58 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004b50:	f06f 0301 	mvn.w	r3, #1
 8004b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b56:	e06e      	b.n	8004c36 <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d10f      	bne.n	8004b7e <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 8004b5e:	4b38      	ldr	r3, [pc, #224]	@ (8004c40 <BSP_LED_Init+0x114>)
 8004b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b64:	4a36      	ldr	r2, [pc, #216]	@ (8004c40 <BSP_LED_Init+0x114>)
 8004b66:	f043 0302 	orr.w	r3, r3, #2
 8004b6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004b6e:	4b34      	ldr	r3, [pc, #208]	@ (8004c40 <BSP_LED_Init+0x114>)
 8004b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	e046      	b.n	8004c0c <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10f      	bne.n	8004ba4 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8004b84:	4b2e      	ldr	r3, [pc, #184]	@ (8004c40 <BSP_LED_Init+0x114>)
 8004b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8004c40 <BSP_LED_Init+0x114>)
 8004b8c:	f043 0304 	orr.w	r3, r3, #4
 8004b90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004b94:	4b2a      	ldr	r3, [pc, #168]	@ (8004c40 <BSP_LED_Init+0x114>)
 8004b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	e033      	b.n	8004c0c <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ba4:	4b26      	ldr	r3, [pc, #152]	@ (8004c40 <BSP_LED_Init+0x114>)
 8004ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d110      	bne.n	8004bd4 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004bb2:	4b23      	ldr	r3, [pc, #140]	@ (8004c40 <BSP_LED_Init+0x114>)
 8004bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bb8:	4a21      	ldr	r2, [pc, #132]	@ (8004c40 <BSP_LED_Init+0x114>)
 8004bba:	f043 0304 	orr.w	r3, r3, #4
 8004bbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c40 <BSP_LED_Init+0x114>)
 8004bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8004bd4:	f001 f800 	bl	8005bd8 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d107      	bne.n	8004bee <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004bde:	4b18      	ldr	r3, [pc, #96]	@ (8004c40 <BSP_LED_Init+0x114>)
 8004be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004be4:	4a16      	ldr	r2, [pc, #88]	@ (8004c40 <BSP_LED_Init+0x114>)
 8004be6:	f023 0304 	bic.w	r3, r3, #4
 8004bea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8004bee:	4b14      	ldr	r3, [pc, #80]	@ (8004c40 <BSP_LED_Init+0x114>)
 8004bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bf4:	4a12      	ldr	r2, [pc, #72]	@ (8004c40 <BSP_LED_Init+0x114>)
 8004bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bfa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004bfe:	4b10      	ldr	r3, [pc, #64]	@ (8004c40 <BSP_LED_Init+0x114>)
 8004c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8004c44 <BSP_LED_Init+0x118>)
 8004c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c14:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004c16:	2301      	movs	r3, #1
 8004c18:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	4a08      	ldr	r2, [pc, #32]	@ (8004c48 <BSP_LED_Init+0x11c>)
 8004c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c2a:	f107 021c 	add.w	r2, r7, #28
 8004c2e:	4611      	mov	r1, r2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fc8b 	bl	800554c <HAL_GPIO_Init>
  }

  return ret;
 8004c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3738      	adds	r7, #56	@ 0x38
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	46020c00 	.word	0x46020c00
 8004c44:	080109f8 	.word	0x080109f8
 8004c48:	20000060 	.word	0x20000060

08004c4c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	460a      	mov	r2, r1
 8004c56:	71fb      	strb	r3, [r7, #7]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8004c5c:	4b30      	ldr	r3, [pc, #192]	@ (8004d20 <BSP_PB_Init+0xd4>)
 8004c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c62:	4a2f      	ldr	r2, [pc, #188]	@ (8004d20 <BSP_PB_Init+0xd4>)
 8004c64:	f043 0304 	orr.w	r3, r3, #4
 8004c68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8004d20 <BSP_PB_Init+0xd4>)
 8004c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8004c7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c7e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8004c80:	2302      	movs	r3, #2
 8004c82:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c84:	2302      	movs	r3, #2
 8004c86:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8004c88:	79bb      	ldrb	r3, [r7, #6]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10c      	bne.n	8004ca8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	4a23      	ldr	r2, [pc, #140]	@ (8004d24 <BSP_PB_Init+0xd8>)
 8004c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9a:	f107 020c 	add.w	r2, r7, #12
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fc53 	bl	800554c <HAL_GPIO_Init>
 8004ca6:	e036      	b.n	8004d16 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8004ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8004d28 <BSP_PB_Init+0xdc>)
 8004caa:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	4a1d      	ldr	r2, [pc, #116]	@ (8004d24 <BSP_PB_Init+0xd8>)
 8004cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb4:	f107 020c 	add.w	r2, r7, #12
 8004cb8:	4611      	mov	r1, r2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fc46 	bl	800554c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8004cc0:	79fa      	ldrb	r2, [r7, #7]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4a18      	ldr	r2, [pc, #96]	@ (8004d2c <BSP_PB_Init+0xe0>)
 8004ccc:	441a      	add	r2, r3
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	4917      	ldr	r1, [pc, #92]	@ (8004d30 <BSP_PB_Init+0xe4>)
 8004cd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f000 fbdb 	bl	8005494 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8004cde:	79fa      	ldrb	r2, [r7, #7]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4a10      	ldr	r2, [pc, #64]	@ (8004d2c <BSP_PB_Init+0xe0>)
 8004cea:	1898      	adds	r0, r3, r2
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	4a11      	ldr	r2, [pc, #68]	@ (8004d34 <BSP_PB_Init+0xe8>)
 8004cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	f000 fba0 	bl	800543c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8004cfc:	2018      	movs	r0, #24
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	4a0d      	ldr	r2, [pc, #52]	@ (8004d38 <BSP_PB_Init+0xec>)
 8004d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d06:	2200      	movs	r2, #0
 8004d08:	4619      	mov	r1, r3
 8004d0a:	f000 fabb 	bl	8005284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8004d0e:	2318      	movs	r3, #24
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fad1 	bl	80052b8 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	46020c00 	.word	0x46020c00
 8004d24:	2000006c 	.word	0x2000006c
 8004d28:	10110000 	.word	0x10110000
 8004d2c:	20000520 	.word	0x20000520
 8004d30:	08010a00 	.word	0x08010a00
 8004d34:	20000070 	.word	0x20000070
 8004d38:	20000074 	.word	0x20000074

08004d3c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8004d46:	79fa      	ldrb	r2, [r7, #7]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4a04      	ldr	r2, [pc, #16]	@ (8004d64 <BSP_PB_IRQHandler+0x28>)
 8004d52:	4413      	add	r3, r2
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fbb1 	bl	80054bc <HAL_EXTI_IRQHandler>
}
 8004d5a:	bf00      	nop
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000520 	.word	0x20000520

08004d68 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
	...

08004d80 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	6039      	str	r1, [r7, #0]
 8004d8a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004d96:	f06f 0301 	mvn.w	r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	e018      	b.n	8004dd0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	2294      	movs	r2, #148	@ 0x94
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	4a0d      	ldr	r2, [pc, #52]	@ (8004ddc <BSP_COM_Init+0x5c>)
 8004da8:	4413      	add	r3, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 f870 	bl	8004e90 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8004db0:	79fb      	ldrb	r3, [r7, #7]
 8004db2:	2294      	movs	r2, #148	@ 0x94
 8004db4:	fb02 f303 	mul.w	r3, r2, r3
 8004db8:	4a08      	ldr	r2, [pc, #32]	@ (8004ddc <BSP_COM_Init+0x5c>)
 8004dba:	4413      	add	r3, r2
 8004dbc:	6839      	ldr	r1, [r7, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 f80e 	bl	8004de0 <MX_USART1_Init>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004dca:	f06f 0303 	mvn.w	r3, #3
 8004dce:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	2000052c 	.word	0x2000052c

08004de0 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8004dea:	4b16      	ldr	r3, [pc, #88]	@ (8004e44 <MX_USART1_Init+0x64>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	220c      	movs	r2, #12
 8004dfe:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	895b      	ldrh	r3, [r3, #10]
 8004e04:	461a      	mov	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	891b      	ldrh	r3, [r3, #8]
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	899b      	ldrh	r3, [r3, #12]
 8004e20:	461a      	mov	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004e2c:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f006 fabf 	bl	800b3b8 <HAL_UART_Init>
 8004e3a:	4603      	mov	r3, r0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	2000005c 	.word	0x2000005c

08004e48 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8004e50:	4b09      	ldr	r3, [pc, #36]	@ (8004e78 <__io_putchar+0x30>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	2394      	movs	r3, #148	@ 0x94
 8004e58:	fb02 f303 	mul.w	r3, r2, r3
 8004e5c:	4a07      	ldr	r2, [pc, #28]	@ (8004e7c <__io_putchar+0x34>)
 8004e5e:	1898      	adds	r0, r3, r2
 8004e60:	1d39      	adds	r1, r7, #4
 8004e62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e66:	2201      	movs	r2, #1
 8004e68:	f006 fb00 	bl	800b46c <HAL_UART_Transmit>
  return ch;
 8004e6c:	687b      	ldr	r3, [r7, #4]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	200005c0 	.word	0x200005c0
 8004e7c:	2000052c 	.word	0x2000052c

08004e80 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8004e84:	2000      	movs	r0, #0
 8004e86:	f7ff ff6f 	bl	8004d68 <BSP_PB_Callback>
}
 8004e8a:	bf00      	nop
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	@ 0x28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8004e98:	4b27      	ldr	r3, [pc, #156]	@ (8004f38 <COM1_MspInit+0xa8>)
 8004e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e9e:	4a26      	ldr	r2, [pc, #152]	@ (8004f38 <COM1_MspInit+0xa8>)
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004ea8:	4b23      	ldr	r3, [pc, #140]	@ (8004f38 <COM1_MspInit+0xa8>)
 8004eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	613b      	str	r3, [r7, #16]
 8004eb4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8004eb6:	4b20      	ldr	r3, [pc, #128]	@ (8004f38 <COM1_MspInit+0xa8>)
 8004eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8004f38 <COM1_MspInit+0xa8>)
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f38 <COM1_MspInit+0xa8>)
 8004ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8004ed4:	4b18      	ldr	r3, [pc, #96]	@ (8004f38 <COM1_MspInit+0xa8>)
 8004ed6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004eda:	4a17      	ldr	r2, [pc, #92]	@ (8004f38 <COM1_MspInit+0xa8>)
 8004edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ee0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004ee4:	4b14      	ldr	r3, [pc, #80]	@ (8004f38 <COM1_MspInit+0xa8>)
 8004ee6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8004ef2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ef6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004efc:	2302      	movs	r3, #2
 8004efe:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004f00:	2301      	movs	r3, #1
 8004f02:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8004f04:	2307      	movs	r3, #7
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8004f08:	f107 0314 	add.w	r3, r7, #20
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	480b      	ldr	r0, [pc, #44]	@ (8004f3c <COM1_MspInit+0xac>)
 8004f10:	f000 fb1c 	bl	800554c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8004f14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f18:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8004f1e:	2307      	movs	r3, #7
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8004f22:	f107 0314 	add.w	r3, r7, #20
 8004f26:	4619      	mov	r1, r3
 8004f28:	4804      	ldr	r0, [pc, #16]	@ (8004f3c <COM1_MspInit+0xac>)
 8004f2a:	f000 fb0f 	bl	800554c <HAL_GPIO_Init>
}
 8004f2e:	bf00      	nop
 8004f30:	3728      	adds	r7, #40	@ 0x28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	46020c00 	.word	0x46020c00
 8004f3c:	42020000 	.word	0x42020000

08004f40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f44:	4b12      	ldr	r3, [pc, #72]	@ (8004f90 <HAL_Init+0x50>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a11      	ldr	r2, [pc, #68]	@ (8004f90 <HAL_Init+0x50>)
 8004f4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f50:	2003      	movs	r0, #3
 8004f52:	f000 f98c 	bl	800526e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004f56:	f001 ff2d 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f94 <HAL_Init+0x54>)
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	490c      	ldr	r1, [pc, #48]	@ (8004f98 <HAL_Init+0x58>)
 8004f66:	5ccb      	ldrb	r3, [r1, r3]
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8004f9c <HAL_Init+0x5c>)
 8004f6e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004f70:	2004      	movs	r0, #4
 8004f72:	f000 f9d1 	bl	8005318 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f76:	200f      	movs	r0, #15
 8004f78:	f000 f812 	bl	8004fa0 <HAL_InitTick>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e002      	b.n	8004f8c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004f86:	f7ff f9e9 	bl	800435c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40022000 	.word	0x40022000
 8004f94:	46020c00 	.word	0x46020c00
 8004f98:	080109a0 	.word	0x080109a0
 8004f9c:	20000058 	.word	0x20000058

08004fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8004fac:	4b33      	ldr	r3, [pc, #204]	@ (800507c <HAL_InitTick+0xdc>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e05c      	b.n	8005072 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8004fb8:	4b31      	ldr	r3, [pc, #196]	@ (8005080 <HAL_InitTick+0xe0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d10c      	bne.n	8004fde <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8004fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8005084 <HAL_InitTick+0xe4>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800507c <HAL_InitTick+0xdc>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e037      	b.n	800504e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8004fde:	f000 f9f3 	bl	80053c8 <HAL_SYSTICK_GetCLKSourceConfig>
 8004fe2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d023      	beq.n	8005032 <HAL_InitTick+0x92>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d82d      	bhi.n	800504c <HAL_InitTick+0xac>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_InitTick+0x5e>
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d00d      	beq.n	8005018 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8004ffc:	e026      	b.n	800504c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8004ffe:	4b21      	ldr	r3, [pc, #132]	@ (8005084 <HAL_InitTick+0xe4>)
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b1e      	ldr	r3, [pc, #120]	@ (800507c <HAL_InitTick+0xdc>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	4619      	mov	r1, r3
 8005008:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800500c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	60fb      	str	r3, [r7, #12]
        break;
 8005016:	e01a      	b.n	800504e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005018:	4b18      	ldr	r3, [pc, #96]	@ (800507c <HAL_InitTick+0xdc>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	461a      	mov	r2, r3
 800501e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005022:	fbb3 f3f2 	udiv	r3, r3, r2
 8005026:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800502a:	fbb2 f3f3 	udiv	r3, r2, r3
 800502e:	60fb      	str	r3, [r7, #12]
        break;
 8005030:	e00d      	b.n	800504e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005032:	4b12      	ldr	r3, [pc, #72]	@ (800507c <HAL_InitTick+0xdc>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800503c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005040:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005044:	fbb2 f3f3 	udiv	r3, r2, r3
 8005048:	60fb      	str	r3, [r7, #12]
        break;
 800504a:	e000      	b.n	800504e <HAL_InitTick+0xae>
        break;
 800504c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f940 	bl	80052d4 <HAL_SYSTICK_Config>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e009      	b.n	8005072 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800505e:	2200      	movs	r2, #0
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	f04f 30ff 	mov.w	r0, #4294967295
 8005066:	f000 f90d 	bl	8005284 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800506a:	4a07      	ldr	r2, [pc, #28]	@ (8005088 <HAL_InitTick+0xe8>)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	2000007c 	.word	0x2000007c
 8005080:	e000e010 	.word	0xe000e010
 8005084:	20000058 	.word	0x20000058
 8005088:	20000078 	.word	0x20000078

0800508c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005090:	4b06      	ldr	r3, [pc, #24]	@ (80050ac <HAL_IncTick+0x20>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	4b06      	ldr	r3, [pc, #24]	@ (80050b0 <HAL_IncTick+0x24>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4413      	add	r3, r2
 800509c:	4a04      	ldr	r2, [pc, #16]	@ (80050b0 <HAL_IncTick+0x24>)
 800509e:	6013      	str	r3, [r2, #0]
}
 80050a0:	bf00      	nop
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	2000007c 	.word	0x2000007c
 80050b0:	200005c4 	.word	0x200005c4

080050b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  return uwTick;
 80050b8:	4b03      	ldr	r3, [pc, #12]	@ (80050c8 <HAL_GetTick+0x14>)
 80050ba:	681b      	ldr	r3, [r3, #0]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	200005c4 	.word	0x200005c4

080050cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050d4:	f7ff ffee 	bl	80050b4 <HAL_GetTick>
 80050d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d005      	beq.n	80050f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005110 <HAL_Delay+0x44>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050f2:	bf00      	nop
 80050f4:	f7ff ffde 	bl	80050b4 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	429a      	cmp	r2, r3
 8005102:	d8f7      	bhi.n	80050f4 <HAL_Delay+0x28>
  {
  }
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	2000007c 	.word	0x2000007c

08005114 <__NVIC_SetPriorityGrouping>:
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005124:	4b0c      	ldr	r3, [pc, #48]	@ (8005158 <__NVIC_SetPriorityGrouping+0x44>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005130:	4013      	ands	r3, r2
 8005132:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800513c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005146:	4a04      	ldr	r2, [pc, #16]	@ (8005158 <__NVIC_SetPriorityGrouping+0x44>)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	60d3      	str	r3, [r2, #12]
}
 800514c:	bf00      	nop
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	e000ed00 	.word	0xe000ed00

0800515c <__NVIC_GetPriorityGrouping>:
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005160:	4b04      	ldr	r3, [pc, #16]	@ (8005174 <__NVIC_GetPriorityGrouping+0x18>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	0a1b      	lsrs	r3, r3, #8
 8005166:	f003 0307 	and.w	r3, r3, #7
}
 800516a:	4618      	mov	r0, r3
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	e000ed00 	.word	0xe000ed00

08005178 <__NVIC_EnableIRQ>:
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005186:	2b00      	cmp	r3, #0
 8005188:	db0b      	blt.n	80051a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	f003 021f 	and.w	r2, r3, #31
 8005190:	4907      	ldr	r1, [pc, #28]	@ (80051b0 <__NVIC_EnableIRQ+0x38>)
 8005192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	2001      	movs	r0, #1
 800519a:	fa00 f202 	lsl.w	r2, r0, r2
 800519e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	e000e100 	.word	0xe000e100

080051b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	6039      	str	r1, [r7, #0]
 80051be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	db0a      	blt.n	80051de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	490c      	ldr	r1, [pc, #48]	@ (8005200 <__NVIC_SetPriority+0x4c>)
 80051ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051d2:	0112      	lsls	r2, r2, #4
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	440b      	add	r3, r1
 80051d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051dc:	e00a      	b.n	80051f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	4908      	ldr	r1, [pc, #32]	@ (8005204 <__NVIC_SetPriority+0x50>)
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	3b04      	subs	r3, #4
 80051ec:	0112      	lsls	r2, r2, #4
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	440b      	add	r3, r1
 80051f2:	761a      	strb	r2, [r3, #24]
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	e000e100 	.word	0xe000e100
 8005204:	e000ed00 	.word	0xe000ed00

08005208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005208:	b480      	push	{r7}
 800520a:	b089      	sub	sp, #36	@ 0x24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f1c3 0307 	rsb	r3, r3, #7
 8005222:	2b04      	cmp	r3, #4
 8005224:	bf28      	it	cs
 8005226:	2304      	movcs	r3, #4
 8005228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	3304      	adds	r3, #4
 800522e:	2b06      	cmp	r3, #6
 8005230:	d902      	bls.n	8005238 <NVIC_EncodePriority+0x30>
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3b03      	subs	r3, #3
 8005236:	e000      	b.n	800523a <NVIC_EncodePriority+0x32>
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800523c:	f04f 32ff 	mov.w	r2, #4294967295
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	43da      	mvns	r2, r3
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	401a      	ands	r2, r3
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005250:	f04f 31ff 	mov.w	r1, #4294967295
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	fa01 f303 	lsl.w	r3, r1, r3
 800525a:	43d9      	mvns	r1, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005260:	4313      	orrs	r3, r2
         );
}
 8005262:	4618      	mov	r0, r3
 8005264:	3724      	adds	r7, #36	@ 0x24
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b082      	sub	sp, #8
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff ff4c 	bl	8005114 <__NVIC_SetPriorityGrouping>
}
 800527c:	bf00      	nop
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	4603      	mov	r3, r0
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005292:	f7ff ff63 	bl	800515c <__NVIC_GetPriorityGrouping>
 8005296:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	6978      	ldr	r0, [r7, #20]
 800529e:	f7ff ffb3 	bl	8005208 <NVIC_EncodePriority>
 80052a2:	4602      	mov	r2, r0
 80052a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052a8:	4611      	mov	r1, r2
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff ff82 	bl	80051b4 <__NVIC_SetPriority>
}
 80052b0:	bf00      	nop
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff ff56 	bl	8005178 <__NVIC_EnableIRQ>
}
 80052cc:	bf00      	nop
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3b01      	subs	r3, #1
 80052e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052e4:	d301      	bcc.n	80052ea <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80052e6:	2301      	movs	r3, #1
 80052e8:	e00d      	b.n	8005306 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80052ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005314 <HAL_SYSTICK_Config+0x40>)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80052f2:	4b08      	ldr	r3, [pc, #32]	@ (8005314 <HAL_SYSTICK_Config+0x40>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80052f8:	4b06      	ldr	r3, [pc, #24]	@ (8005314 <HAL_SYSTICK_Config+0x40>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a05      	ldr	r2, [pc, #20]	@ (8005314 <HAL_SYSTICK_Config+0x40>)
 80052fe:	f043 0303 	orr.w	r3, r3, #3
 8005302:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	e000e010 	.word	0xe000e010

08005318 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b04      	cmp	r3, #4
 8005324:	d844      	bhi.n	80053b0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005326:	a201      	add	r2, pc, #4	@ (adr r2, 800532c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532c:	0800534f 	.word	0x0800534f
 8005330:	0800536d 	.word	0x0800536d
 8005334:	0800538f 	.word	0x0800538f
 8005338:	080053b1 	.word	0x080053b1
 800533c:	08005341 	.word	0x08005341
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005340:	4b1f      	ldr	r3, [pc, #124]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1e      	ldr	r2, [pc, #120]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005346:	f043 0304 	orr.w	r3, r3, #4
 800534a:	6013      	str	r3, [r2, #0]
      break;
 800534c:	e031      	b.n	80053b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800534e:	4b1c      	ldr	r3, [pc, #112]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1b      	ldr	r2, [pc, #108]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005354:	f023 0304 	bic.w	r3, r3, #4
 8005358:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800535a:	4b1a      	ldr	r3, [pc, #104]	@ (80053c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800535c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005360:	4a18      	ldr	r2, [pc, #96]	@ (80053c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005362:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005366:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800536a:	e022      	b.n	80053b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800536c:	4b14      	ldr	r3, [pc, #80]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a13      	ldr	r2, [pc, #76]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005372:	f023 0304 	bic.w	r3, r3, #4
 8005376:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005378:	4b12      	ldr	r3, [pc, #72]	@ (80053c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800537a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800537e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005382:	4a10      	ldr	r2, [pc, #64]	@ (80053c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005384:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005388:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800538c:	e011      	b.n	80053b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800538e:	4b0c      	ldr	r3, [pc, #48]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a0b      	ldr	r2, [pc, #44]	@ (80053c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005394:	f023 0304 	bic.w	r3, r3, #4
 8005398:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800539a:	4b0a      	ldr	r3, [pc, #40]	@ (80053c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800539c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053a0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80053a4:	4a07      	ldr	r2, [pc, #28]	@ (80053c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80053ae:	e000      	b.n	80053b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80053b0:	bf00      	nop
  }
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	e000e010 	.word	0xe000e010
 80053c4:	46020c00 	.word	0x46020c00

080053c8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80053ce:	4b19      	ldr	r3, [pc, #100]	@ (8005434 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80053da:	2304      	movs	r3, #4
 80053dc:	607b      	str	r3, [r7, #4]
 80053de:	e021      	b.n	8005424 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80053e0:	4b15      	ldr	r3, [pc, #84]	@ (8005438 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80053e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053e6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80053ea:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053f2:	d011      	beq.n	8005418 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053fa:	d810      	bhi.n	800541e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005408:	d003      	beq.n	8005412 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800540a:	e008      	b.n	800541e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800540c:	2300      	movs	r3, #0
 800540e:	607b      	str	r3, [r7, #4]
        break;
 8005410:	e008      	b.n	8005424 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005412:	2301      	movs	r3, #1
 8005414:	607b      	str	r3, [r7, #4]
        break;
 8005416:	e005      	b.n	8005424 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005418:	2302      	movs	r3, #2
 800541a:	607b      	str	r3, [r7, #4]
        break;
 800541c:	e002      	b.n	8005424 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800541e:	2300      	movs	r3, #0
 8005420:	607b      	str	r3, [r7, #4]
        break;
 8005422:	bf00      	nop
    }
  }
  return systick_source;
 8005424:	687b      	ldr	r3, [r7, #4]
}
 8005426:	4618      	mov	r0, r3
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	e000e010 	.word	0xe000e010
 8005438:	46020c00 	.word	0x46020c00

0800543c <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	460b      	mov	r3, r1
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800544e:	7afb      	ldrb	r3, [r7, #11]
 8005450:	2b02      	cmp	r3, #2
 8005452:	d011      	beq.n	8005478 <HAL_EXTI_RegisterCallback+0x3c>
 8005454:	2b02      	cmp	r3, #2
 8005456:	dc13      	bgt.n	8005480 <HAL_EXTI_RegisterCallback+0x44>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <HAL_EXTI_RegisterCallback+0x26>
 800545c:	2b01      	cmp	r3, #1
 800545e:	d007      	beq.n	8005470 <HAL_EXTI_RegisterCallback+0x34>
 8005460:	e00e      	b.n	8005480 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	609a      	str	r2, [r3, #8]
      break;
 800546e:	e00a      	b.n	8005486 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	605a      	str	r2, [r3, #4]
      break;
 8005476:	e006      	b.n	8005486 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	609a      	str	r2, [r3, #8]
      break;
 800547e:	e002      	b.n	8005486 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	75fb      	strb	r3, [r7, #23]
      break;
 8005484:	bf00      	nop
  }

  return status;
 8005486:	7dfb      	ldrb	r3, [r7, #23]
}
 8005488:	4618      	mov	r0, r3
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e003      	b.n	80054b0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80054ae:	2300      	movs	r3, #0
  }
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 031f 	and.w	r3, r3, #31
 80054d8:	2201      	movs	r2, #1
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	4b17      	ldr	r3, [pc, #92]	@ (8005544 <HAL_EXTI_IRQHandler+0x88>)
 80054e6:	4413      	add	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4013      	ands	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	4b0d      	ldr	r3, [pc, #52]	@ (8005548 <HAL_EXTI_IRQHandler+0x8c>)
 8005514:	4413      	add	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4013      	ands	r3, r2
 8005520:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d009      	beq.n	800553c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	4798      	blx	r3
    }
  }
}
 800553c:	bf00      	nop
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	4602200c 	.word	0x4602200c
 8005548:	46022010 	.word	0x46022010

0800554c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800554c:	b480      	push	{r7}
 800554e:	b089      	sub	sp, #36	@ 0x24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800555e:	e1ba      	b.n	80058d6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	2101      	movs	r1, #1
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	fa01 f303 	lsl.w	r3, r1, r3
 800556c:	4013      	ands	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 81aa 	beq.w	80058d0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a55      	ldr	r2, [pc, #340]	@ (80056d4 <HAL_GPIO_Init+0x188>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d15d      	bne.n	8005640 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800558a:	2201      	movs	r2, #1
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	43db      	mvns	r3, r3
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	4013      	ands	r3, r2
 8005598:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f003 0201 	and.w	r2, r3, #1
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80055b4:	4a48      	ldr	r2, [pc, #288]	@ (80056d8 <HAL_GPIO_Init+0x18c>)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055bc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80055be:	4a46      	ldr	r2, [pc, #280]	@ (80056d8 <HAL_GPIO_Init+0x18c>)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	4413      	add	r3, r2
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	08da      	lsrs	r2, r3, #3
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	3208      	adds	r2, #8
 80055d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	220f      	movs	r2, #15
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	43db      	mvns	r3, r3
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	4013      	ands	r3, r2
 80055ec:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	220b      	movs	r2, #11
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	4313      	orrs	r3, r2
 8005600:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	08da      	lsrs	r2, r3, #3
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	3208      	adds	r2, #8
 800560a:	69f9      	ldr	r1, [r7, #28]
 800560c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	2203      	movs	r2, #3
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43db      	mvns	r3, r3
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	4013      	ands	r3, r2
 8005626:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	2202      	movs	r2, #2
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	4313      	orrs	r3, r2
 8005636:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	e067      	b.n	8005710 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d003      	beq.n	8005650 <HAL_GPIO_Init+0x104>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2b12      	cmp	r3, #18
 800564e:	d145      	bne.n	80056dc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	08da      	lsrs	r2, r3, #3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3208      	adds	r2, #8
 8005658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	220f      	movs	r2, #15
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	69fa      	ldr	r2, [r7, #28]
 8005670:	4013      	ands	r3, r2
 8005672:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	f003 020f 	and.w	r2, r3, #15
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	4313      	orrs	r3, r2
 800568c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	08da      	lsrs	r2, r3, #3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3208      	adds	r2, #8
 8005696:	69f9      	ldr	r1, [r7, #28]
 8005698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	2203      	movs	r2, #3
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	43db      	mvns	r3, r3
 80056ae:	69fa      	ldr	r2, [r7, #28]
 80056b0:	4013      	ands	r3, r2
 80056b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f003 0203 	and.w	r2, r3, #3
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	69fa      	ldr	r2, [r7, #28]
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	e01e      	b.n	8005710 <HAL_GPIO_Init+0x1c4>
 80056d2:	bf00      	nop
 80056d4:	46020000 	.word	0x46020000
 80056d8:	08010a04 	.word	0x08010a04
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	2203      	movs	r2, #3
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	43db      	mvns	r3, r3
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	4013      	ands	r3, r2
 80056f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f003 0203 	and.w	r2, r3, #3
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	4313      	orrs	r3, r2
 8005708:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d00b      	beq.n	8005730 <HAL_GPIO_Init+0x1e4>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2b02      	cmp	r3, #2
 800571e:	d007      	beq.n	8005730 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005724:	2b11      	cmp	r3, #17
 8005726:	d003      	beq.n	8005730 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b12      	cmp	r3, #18
 800572e:	d130      	bne.n	8005792 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	2203      	movs	r2, #3
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	43db      	mvns	r3, r3
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	4013      	ands	r3, r2
 8005746:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	4313      	orrs	r3, r2
 8005758:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8005766:	2201      	movs	r2, #1
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	43db      	mvns	r3, r3
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	4013      	ands	r3, r2
 8005774:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	091b      	lsrs	r3, r3, #4
 800577c:	f003 0201 	and.w	r2, r3, #1
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	4313      	orrs	r3, r2
 800578a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b03      	cmp	r3, #3
 8005798:	d017      	beq.n	80057ca <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	2203      	movs	r2, #3
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43db      	mvns	r3, r3
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	4013      	ands	r3, r2
 80057b0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d07c      	beq.n	80058d0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80057d6:	4a47      	ldr	r2, [pc, #284]	@ (80058f4 <HAL_GPIO_Init+0x3a8>)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	089b      	lsrs	r3, r3, #2
 80057dc:	3318      	adds	r3, #24
 80057de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	220f      	movs	r2, #15
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	4013      	ands	r3, r2
 80057f8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	0a9a      	lsrs	r2, r3, #10
 80057fe:	4b3e      	ldr	r3, [pc, #248]	@ (80058f8 <HAL_GPIO_Init+0x3ac>)
 8005800:	4013      	ands	r3, r2
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	f002 0203 	and.w	r2, r2, #3
 8005808:	00d2      	lsls	r2, r2, #3
 800580a:	4093      	lsls	r3, r2
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	4313      	orrs	r3, r2
 8005810:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005812:	4938      	ldr	r1, [pc, #224]	@ (80058f4 <HAL_GPIO_Init+0x3a8>)
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	089b      	lsrs	r3, r3, #2
 8005818:	3318      	adds	r3, #24
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005820:	4b34      	ldr	r3, [pc, #208]	@ (80058f4 <HAL_GPIO_Init+0x3a8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	43db      	mvns	r3, r3
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	4013      	ands	r3, r2
 800582e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005844:	4a2b      	ldr	r2, [pc, #172]	@ (80058f4 <HAL_GPIO_Init+0x3a8>)
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800584a:	4b2a      	ldr	r3, [pc, #168]	@ (80058f4 <HAL_GPIO_Init+0x3a8>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	43db      	mvns	r3, r3
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	4013      	ands	r3, r2
 8005858:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800586e:	4a21      	ldr	r2, [pc, #132]	@ (80058f4 <HAL_GPIO_Init+0x3a8>)
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005874:	4b1f      	ldr	r3, [pc, #124]	@ (80058f4 <HAL_GPIO_Init+0x3a8>)
 8005876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800587a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	43db      	mvns	r3, r3
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	4013      	ands	r3, r2
 8005884:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800589a:	4a16      	ldr	r2, [pc, #88]	@ (80058f4 <HAL_GPIO_Init+0x3a8>)
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80058a2:	4b14      	ldr	r3, [pc, #80]	@ (80058f4 <HAL_GPIO_Init+0x3a8>)
 80058a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	43db      	mvns	r3, r3
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	4013      	ands	r3, r2
 80058b2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80058c8:	4a0a      	ldr	r2, [pc, #40]	@ (80058f4 <HAL_GPIO_Init+0x3a8>)
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	3301      	adds	r3, #1
 80058d4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	fa22 f303 	lsr.w	r3, r2, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f47f ae3d 	bne.w	8005560 <HAL_GPIO_Init+0x14>
  }
}
 80058e6:	bf00      	nop
 80058e8:	bf00      	nop
 80058ea:	3724      	adds	r7, #36	@ 0x24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	46022000 	.word	0x46022000
 80058f8:	002f7f7f 	.word	0x002f7f7f

080058fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	887b      	ldrh	r3, [r7, #2]
 800590e:	4013      	ands	r3, r2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005914:	2301      	movs	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]
 8005918:	e001      	b.n	800591e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	807b      	strh	r3, [r7, #2]
 8005938:	4613      	mov	r3, r2
 800593a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800593c:	787b      	ldrb	r3, [r7, #1]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005942:	887a      	ldrh	r2, [r7, #2]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8005948:	e002      	b.n	8005950 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800594a:	887a      	ldrh	r2, [r7, #2]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8005966:	4b0f      	ldr	r3, [pc, #60]	@ (80059a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	4013      	ands	r3, r2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d006      	beq.n	8005980 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005972:	4a0c      	ldr	r2, [pc, #48]	@ (80059a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005978:	88fb      	ldrh	r3, [r7, #6]
 800597a:	4618      	mov	r0, r3
 800597c:	f7fc ff02 	bl	8002784 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8005980:	4b08      	ldr	r3, [pc, #32]	@ (80059a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	88fb      	ldrh	r3, [r7, #6]
 8005986:	4013      	ands	r3, r2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d006      	beq.n	800599a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800598c:	4a05      	ldr	r2, [pc, #20]	@ (80059a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	4618      	mov	r0, r3
 8005996:	f000 f807 	bl	80059a8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	46022000 	.word	0x46022000

080059a8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
	...

080059c0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80059cc:	4b0b      	ldr	r3, [pc, #44]	@ (80059fc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	73fb      	strb	r3, [r7, #15]
 80059dc:	e007      	b.n	80059ee <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80059de:	4b07      	ldr	r3, [pc, #28]	@ (80059fc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f023 0204 	bic.w	r2, r3, #4
 80059e6:	4905      	ldr	r1, [pc, #20]	@ (80059fc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	600b      	str	r3, [r1, #0]
  }

  return status;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	40030400 	.word	0x40030400

08005a00 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005a04:	4b05      	ldr	r3, [pc, #20]	@ (8005a1c <HAL_ICACHE_Enable+0x1c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a04      	ldr	r2, [pc, #16]	@ (8005a1c <HAL_ICACHE_Enable+0x1c>)
 8005a0a:	f043 0301 	orr.w	r3, r3, #1
 8005a0e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	40030400 	.word	0x40030400

08005a20 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005a28:	4b39      	ldr	r3, [pc, #228]	@ (8005b10 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a30:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d10b      	bne.n	8005a52 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a40:	d905      	bls.n	8005a4e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005a42:	4b33      	ldr	r3, [pc, #204]	@ (8005b10 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	4a32      	ldr	r2, [pc, #200]	@ (8005b10 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a4c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	e057      	b.n	8005b02 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a58:	d90a      	bls.n	8005a70 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8005b10 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	4a2a      	ldr	r2, [pc, #168]	@ (8005b10 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a6c:	60d3      	str	r3, [r2, #12]
 8005a6e:	e007      	b.n	8005a80 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005a70:	4b27      	ldr	r3, [pc, #156]	@ (8005b10 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005a78:	4925      	ldr	r1, [pc, #148]	@ (8005b10 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005a80:	4b24      	ldr	r3, [pc, #144]	@ (8005b14 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a24      	ldr	r2, [pc, #144]	@ (8005b18 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	099b      	lsrs	r3, r3, #6
 8005a8c:	2232      	movs	r2, #50	@ 0x32
 8005a8e:	fb02 f303 	mul.w	r3, r2, r3
 8005a92:	4a21      	ldr	r2, [pc, #132]	@ (8005b18 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005a94:	fba2 2303 	umull	r2, r3, r2, r3
 8005a98:	099b      	lsrs	r3, r3, #6
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005a9e:	e002      	b.n	8005aa6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b10 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <HAL_PWREx_ControlVoltageScaling+0x98>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1f3      	bne.n	8005aa0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d01b      	beq.n	8005af6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005abe:	4b15      	ldr	r3, [pc, #84]	@ (8005b14 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a15      	ldr	r2, [pc, #84]	@ (8005b18 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	099b      	lsrs	r3, r3, #6
 8005aca:	2232      	movs	r2, #50	@ 0x32
 8005acc:	fb02 f303 	mul.w	r3, r2, r3
 8005ad0:	4a11      	ldr	r2, [pc, #68]	@ (8005b18 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	099b      	lsrs	r3, r3, #6
 8005ad8:	3301      	adds	r3, #1
 8005ada:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005adc:	e002      	b.n	8005ae4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b10 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f3      	bne.n	8005ade <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e000      	b.n	8005b02 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	46020800 	.word	0x46020800
 8005b14:	20000058 	.word	0x20000058
 8005b18:	10624dd3 	.word	0x10624dd3

08005b1c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8005b20:	4b04      	ldr	r3, [pc, #16]	@ (8005b34 <HAL_PWREx_GetVoltageRange+0x18>)
 8005b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	46020800 	.word	0x46020800

08005b38 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005b40:	4b22      	ldr	r3, [pc, #136]	@ (8005bcc <HAL_PWREx_ConfigSupply+0x94>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a22      	ldr	r2, [pc, #136]	@ (8005bd0 <HAL_PWREx_ConfigSupply+0x98>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	099b      	lsrs	r3, r3, #6
 8005b4c:	2232      	movs	r2, #50	@ 0x32
 8005b4e:	fb02 f303 	mul.w	r3, r2, r3
 8005b52:	4a1f      	ldr	r2, [pc, #124]	@ (8005bd0 <HAL_PWREx_ConfigSupply+0x98>)
 8005b54:	fba2 2303 	umull	r2, r3, r2, r3
 8005b58:	099b      	lsrs	r3, r3, #6
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d113      	bne.n	8005b8c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005b64:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd4 <HAL_PWREx_ConfigSupply+0x9c>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	4a1a      	ldr	r2, [pc, #104]	@ (8005bd4 <HAL_PWREx_ConfigSupply+0x9c>)
 8005b6a:	f023 0302 	bic.w	r3, r3, #2
 8005b6e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005b70:	e002      	b.n	8005b78 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005b78:	4b16      	ldr	r3, [pc, #88]	@ (8005bd4 <HAL_PWREx_ConfigSupply+0x9c>)
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d116      	bne.n	8005bb2 <HAL_PWREx_ConfigSupply+0x7a>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f3      	bne.n	8005b72 <HAL_PWREx_ConfigSupply+0x3a>
 8005b8a:	e012      	b.n	8005bb2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005b8c:	4b11      	ldr	r3, [pc, #68]	@ (8005bd4 <HAL_PWREx_ConfigSupply+0x9c>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	4a10      	ldr	r2, [pc, #64]	@ (8005bd4 <HAL_PWREx_ConfigSupply+0x9c>)
 8005b92:	f043 0302 	orr.w	r3, r3, #2
 8005b96:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005b98:	e002      	b.n	8005ba0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd4 <HAL_PWREx_ConfigSupply+0x9c>)
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d102      	bne.n	8005bb2 <HAL_PWREx_ConfigSupply+0x7a>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1f3      	bne.n	8005b9a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e000      	b.n	8005bbe <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	20000058 	.word	0x20000058
 8005bd0:	10624dd3 	.word	0x10624dd3
 8005bd4:	46020800 	.word	0x46020800

08005bd8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8005bdc:	4b05      	ldr	r3, [pc, #20]	@ (8005bf4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	4a04      	ldr	r2, [pc, #16]	@ (8005bf4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005be2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005be6:	6113      	str	r3, [r2, #16]
}
 8005be8:	bf00      	nop
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	46020800 	.word	0x46020800

08005bf8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8005bfc:	4b05      	ldr	r3, [pc, #20]	@ (8005c14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c00:	4a04      	ldr	r2, [pc, #16]	@ (8005c14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8005c08:	bf00      	nop
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	46020800 	.word	0x46020800

08005c18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08e      	sub	sp, #56	@ 0x38
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005c20:	2300      	movs	r3, #0
 8005c22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d102      	bne.n	8005c32 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	f000 bec8 	b.w	80069c2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c32:	4b99      	ldr	r3, [pc, #612]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	f003 030c 	and.w	r3, r3, #12
 8005c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c3c:	4b96      	ldr	r3, [pc, #600]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0310 	and.w	r3, r3, #16
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 816c 	beq.w	8005f2c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <HAL_RCC_OscConfig+0x52>
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5c:	2b0c      	cmp	r3, #12
 8005c5e:	f040 80de 	bne.w	8005e1e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	f040 80da 	bne.w	8005e1e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d102      	bne.n	8005c78 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	f000 bea5 	b.w	80069c2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c7c:	4b86      	ldr	r3, [pc, #536]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <HAL_RCC_OscConfig+0x7a>
 8005c88:	4b83      	ldr	r3, [pc, #524]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005c90:	e005      	b.n	8005c9e <HAL_RCC_OscConfig+0x86>
 8005c92:	4b81      	ldr	r3, [pc, #516]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c98:	041b      	lsls	r3, r3, #16
 8005c9a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d255      	bcs.n	8005d4e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cac:	4618      	mov	r0, r3
 8005cae:	f001 f9dd 	bl	800706c <RCC_SetFlashLatencyFromMSIRange>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f000 be82 	b.w	80069c2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005cbe:	4b76      	ldr	r3, [pc, #472]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	4a75      	ldr	r2, [pc, #468]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005cc4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005cc8:	6093      	str	r3, [r2, #8]
 8005cca:	4b73      	ldr	r3, [pc, #460]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd6:	4970      	ldr	r1, [pc, #448]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005ce4:	d309      	bcc.n	8005cfa <HAL_RCC_OscConfig+0xe2>
 8005ce6:	4b6c      	ldr	r3, [pc, #432]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f023 021f 	bic.w	r2, r3, #31
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	4969      	ldr	r1, [pc, #420]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60cb      	str	r3, [r1, #12]
 8005cf8:	e07e      	b.n	8005df8 <HAL_RCC_OscConfig+0x1e0>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	da0a      	bge.n	8005d18 <HAL_RCC_OscConfig+0x100>
 8005d02:	4b65      	ldr	r3, [pc, #404]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	015b      	lsls	r3, r3, #5
 8005d10:	4961      	ldr	r1, [pc, #388]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60cb      	str	r3, [r1, #12]
 8005d16:	e06f      	b.n	8005df8 <HAL_RCC_OscConfig+0x1e0>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d20:	d30a      	bcc.n	8005d38 <HAL_RCC_OscConfig+0x120>
 8005d22:	4b5d      	ldr	r3, [pc, #372]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	029b      	lsls	r3, r3, #10
 8005d30:	4959      	ldr	r1, [pc, #356]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60cb      	str	r3, [r1, #12]
 8005d36:	e05f      	b.n	8005df8 <HAL_RCC_OscConfig+0x1e0>
 8005d38:	4b57      	ldr	r3, [pc, #348]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	03db      	lsls	r3, r3, #15
 8005d46:	4954      	ldr	r1, [pc, #336]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60cb      	str	r3, [r1, #12]
 8005d4c:	e054      	b.n	8005df8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005d4e:	4b52      	ldr	r3, [pc, #328]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	4a51      	ldr	r2, [pc, #324]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005d54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d58:	6093      	str	r3, [r2, #8]
 8005d5a:	4b4f      	ldr	r3, [pc, #316]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d66:	494c      	ldr	r1, [pc, #304]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d70:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005d74:	d309      	bcc.n	8005d8a <HAL_RCC_OscConfig+0x172>
 8005d76:	4b48      	ldr	r3, [pc, #288]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f023 021f 	bic.w	r2, r3, #31
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	4945      	ldr	r1, [pc, #276]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60cb      	str	r3, [r1, #12]
 8005d88:	e028      	b.n	8005ddc <HAL_RCC_OscConfig+0x1c4>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	da0a      	bge.n	8005da8 <HAL_RCC_OscConfig+0x190>
 8005d92:	4b41      	ldr	r3, [pc, #260]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	015b      	lsls	r3, r3, #5
 8005da0:	493d      	ldr	r1, [pc, #244]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60cb      	str	r3, [r1, #12]
 8005da6:	e019      	b.n	8005ddc <HAL_RCC_OscConfig+0x1c4>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005db0:	d30a      	bcc.n	8005dc8 <HAL_RCC_OscConfig+0x1b0>
 8005db2:	4b39      	ldr	r3, [pc, #228]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	029b      	lsls	r3, r3, #10
 8005dc0:	4935      	ldr	r1, [pc, #212]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60cb      	str	r3, [r1, #12]
 8005dc6:	e009      	b.n	8005ddc <HAL_RCC_OscConfig+0x1c4>
 8005dc8:	4b33      	ldr	r3, [pc, #204]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	03db      	lsls	r3, r3, #15
 8005dd6:	4930      	ldr	r1, [pc, #192]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 f940 	bl	800706c <RCC_SetFlashLatencyFromMSIRange>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	f000 bde5 	b.w	80069c2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005df8:	f001 f8e2 	bl	8006fc0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005dfc:	4b27      	ldr	r3, [pc, #156]	@ (8005e9c <HAL_RCC_OscConfig+0x284>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff f8cd 	bl	8004fa0 <HAL_InitTick>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 808a 	beq.w	8005f2a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005e16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e1a:	f000 bdd2 	b.w	80069c2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d066      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005e26:	4b1c      	ldr	r3, [pc, #112]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005e2c:	f043 0301 	orr.w	r3, r3, #1
 8005e30:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005e32:	f7ff f93f 	bl	80050b4 <HAL_GetTick>
 8005e36:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005e38:	e009      	b.n	8005e4e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e3a:	f7ff f93b 	bl	80050b4 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d902      	bls.n	8005e4e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	f000 bdba 	b.w	80069c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005e4e:	4b12      	ldr	r3, [pc, #72]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0ef      	beq.n	8005e3a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005e60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e64:	6093      	str	r3, [r2, #8]
 8005e66:	4b0c      	ldr	r3, [pc, #48]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e72:	4909      	ldr	r1, [pc, #36]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005e80:	d30e      	bcc.n	8005ea0 <HAL_RCC_OscConfig+0x288>
 8005e82:	4b05      	ldr	r3, [pc, #20]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f023 021f 	bic.w	r2, r3, #31
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	4902      	ldr	r1, [pc, #8]	@ (8005e98 <HAL_RCC_OscConfig+0x280>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60cb      	str	r3, [r1, #12]
 8005e94:	e04a      	b.n	8005f2c <HAL_RCC_OscConfig+0x314>
 8005e96:	bf00      	nop
 8005e98:	46020c00 	.word	0x46020c00
 8005e9c:	20000078 	.word	0x20000078
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	da0a      	bge.n	8005ebe <HAL_RCC_OscConfig+0x2a6>
 8005ea8:	4b98      	ldr	r3, [pc, #608]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	015b      	lsls	r3, r3, #5
 8005eb6:	4995      	ldr	r1, [pc, #596]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60cb      	str	r3, [r1, #12]
 8005ebc:	e036      	b.n	8005f2c <HAL_RCC_OscConfig+0x314>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec6:	d30a      	bcc.n	8005ede <HAL_RCC_OscConfig+0x2c6>
 8005ec8:	4b90      	ldr	r3, [pc, #576]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	029b      	lsls	r3, r3, #10
 8005ed6:	498d      	ldr	r1, [pc, #564]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60cb      	str	r3, [r1, #12]
 8005edc:	e026      	b.n	8005f2c <HAL_RCC_OscConfig+0x314>
 8005ede:	4b8b      	ldr	r3, [pc, #556]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	03db      	lsls	r3, r3, #15
 8005eec:	4987      	ldr	r1, [pc, #540]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60cb      	str	r3, [r1, #12]
 8005ef2:	e01b      	b.n	8005f2c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005ef4:	4b85      	ldr	r3, [pc, #532]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a84      	ldr	r2, [pc, #528]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005efa:	f023 0301 	bic.w	r3, r3, #1
 8005efe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005f00:	f7ff f8d8 	bl	80050b4 <HAL_GetTick>
 8005f04:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005f06:	e009      	b.n	8005f1c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f08:	f7ff f8d4 	bl	80050b4 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d902      	bls.n	8005f1c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	f000 bd53 	b.w	80069c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005f1c:	4b7b      	ldr	r3, [pc, #492]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1ef      	bne.n	8005f08 <HAL_RCC_OscConfig+0x2f0>
 8005f28:	e000      	b.n	8005f2c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005f2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 808b 	beq.w	8006050 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d005      	beq.n	8005f4c <HAL_RCC_OscConfig+0x334>
 8005f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f42:	2b0c      	cmp	r3, #12
 8005f44:	d109      	bne.n	8005f5a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d106      	bne.n	8005f5a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d17d      	bne.n	8006050 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	f000 bd34 	b.w	80069c2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f62:	d106      	bne.n	8005f72 <HAL_RCC_OscConfig+0x35a>
 8005f64:	4b69      	ldr	r3, [pc, #420]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a68      	ldr	r2, [pc, #416]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	e041      	b.n	8005ff6 <HAL_RCC_OscConfig+0x3de>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f7a:	d112      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x38a>
 8005f7c:	4b63      	ldr	r3, [pc, #396]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a62      	ldr	r2, [pc, #392]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005f82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	4b60      	ldr	r3, [pc, #384]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a5f      	ldr	r2, [pc, #380]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005f8e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	4b5d      	ldr	r3, [pc, #372]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a5c      	ldr	r2, [pc, #368]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	e029      	b.n	8005ff6 <HAL_RCC_OscConfig+0x3de>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005faa:	d112      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x3ba>
 8005fac:	4b57      	ldr	r3, [pc, #348]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a56      	ldr	r2, [pc, #344]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005fb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	4b54      	ldr	r3, [pc, #336]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a53      	ldr	r2, [pc, #332]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	4b51      	ldr	r3, [pc, #324]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a50      	ldr	r2, [pc, #320]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	e011      	b.n	8005ff6 <HAL_RCC_OscConfig+0x3de>
 8005fd2:	4b4e      	ldr	r3, [pc, #312]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a4d      	ldr	r2, [pc, #308]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	4b4b      	ldr	r3, [pc, #300]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a4a      	ldr	r2, [pc, #296]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005fe4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	4b48      	ldr	r3, [pc, #288]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a47      	ldr	r2, [pc, #284]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8005ff0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005ff4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d014      	beq.n	8006028 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005ffe:	f7ff f859 	bl	80050b4 <HAL_GetTick>
 8006002:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006004:	e009      	b.n	800601a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006006:	f7ff f855 	bl	80050b4 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b64      	cmp	r3, #100	@ 0x64
 8006012:	d902      	bls.n	800601a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	f000 bcd4 	b.w	80069c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800601a:	4b3c      	ldr	r3, [pc, #240]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0ef      	beq.n	8006006 <HAL_RCC_OscConfig+0x3ee>
 8006026:	e013      	b.n	8006050 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006028:	f7ff f844 	bl	80050b4 <HAL_GetTick>
 800602c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800602e:	e009      	b.n	8006044 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006030:	f7ff f840 	bl	80050b4 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b64      	cmp	r3, #100	@ 0x64
 800603c:	d902      	bls.n	8006044 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	f000 bcbf 	b.w	80069c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006044:	4b31      	ldr	r3, [pc, #196]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1ef      	bne.n	8006030 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d05f      	beq.n	800611c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800605c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605e:	2b04      	cmp	r3, #4
 8006060:	d005      	beq.n	800606e <HAL_RCC_OscConfig+0x456>
 8006062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006064:	2b0c      	cmp	r3, #12
 8006066:	d114      	bne.n	8006092 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606a:	2b02      	cmp	r3, #2
 800606c:	d111      	bne.n	8006092 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d102      	bne.n	800607c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f000 bca3 	b.w	80069c2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800607c:	4b23      	ldr	r3, [pc, #140]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	4920      	ldr	r1, [pc, #128]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 800608c:	4313      	orrs	r3, r2
 800608e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006090:	e044      	b.n	800611c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d024      	beq.n	80060e4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800609a:	4b1c      	ldr	r3, [pc, #112]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1b      	ldr	r2, [pc, #108]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 80060a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060a4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80060a6:	f7ff f805 	bl	80050b4 <HAL_GetTick>
 80060aa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060ac:	e009      	b.n	80060c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060ae:	f7ff f801 	bl	80050b4 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d902      	bls.n	80060c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	f000 bc80 	b.w	80069c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060c2:	4b12      	ldr	r3, [pc, #72]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0ef      	beq.n	80060ae <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80060ce:	4b0f      	ldr	r3, [pc, #60]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	041b      	lsls	r3, r3, #16
 80060dc:	490b      	ldr	r1, [pc, #44]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	610b      	str	r3, [r1, #16]
 80060e2:	e01b      	b.n	800611c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80060e4:	4b09      	ldr	r3, [pc, #36]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a08      	ldr	r2, [pc, #32]	@ (800610c <HAL_RCC_OscConfig+0x4f4>)
 80060ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80060f0:	f7fe ffe0 	bl	80050b4 <HAL_GetTick>
 80060f4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060f6:	e00b      	b.n	8006110 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060f8:	f7fe ffdc 	bl	80050b4 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d904      	bls.n	8006110 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	f000 bc5b 	b.w	80069c2 <HAL_RCC_OscConfig+0xdaa>
 800610c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006110:	4baf      	ldr	r3, [pc, #700]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1ed      	bne.n	80060f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 80c8 	beq.w	80062ba <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800612a:	2300      	movs	r3, #0
 800612c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006130:	4ba7      	ldr	r3, [pc, #668]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 8006132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b00      	cmp	r3, #0
 800613c:	d111      	bne.n	8006162 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800613e:	4ba4      	ldr	r3, [pc, #656]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 8006140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006144:	4aa2      	ldr	r2, [pc, #648]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 8006146:	f043 0304 	orr.w	r3, r3, #4
 800614a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800614e:	4ba0      	ldr	r3, [pc, #640]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 8006150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800615c:	2301      	movs	r3, #1
 800615e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006162:	4b9c      	ldr	r3, [pc, #624]	@ (80063d4 <HAL_RCC_OscConfig+0x7bc>)
 8006164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d119      	bne.n	80061a2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800616e:	4b99      	ldr	r3, [pc, #612]	@ (80063d4 <HAL_RCC_OscConfig+0x7bc>)
 8006170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006172:	4a98      	ldr	r2, [pc, #608]	@ (80063d4 <HAL_RCC_OscConfig+0x7bc>)
 8006174:	f043 0301 	orr.w	r3, r3, #1
 8006178:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800617a:	f7fe ff9b 	bl	80050b4 <HAL_GetTick>
 800617e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006180:	e009      	b.n	8006196 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006182:	f7fe ff97 	bl	80050b4 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d902      	bls.n	8006196 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	f000 bc16 	b.w	80069c2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006196:	4b8f      	ldr	r3, [pc, #572]	@ (80063d4 <HAL_RCC_OscConfig+0x7bc>)
 8006198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0ef      	beq.n	8006182 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d05f      	beq.n	800626a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80061aa:	4b89      	ldr	r3, [pc, #548]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 80061ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061b0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061bc:	429a      	cmp	r2, r3
 80061be:	d037      	beq.n	8006230 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d006      	beq.n	80061d8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e3f4      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01b      	beq.n	800621a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80061e2:	4b7b      	ldr	r3, [pc, #492]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 80061e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061e8:	4a79      	ldr	r2, [pc, #484]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 80061ea:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80061ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80061f2:	f7fe ff5f 	bl	80050b4 <HAL_GetTick>
 80061f6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80061f8:	e008      	b.n	800620c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061fa:	f7fe ff5b 	bl	80050b4 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b05      	cmp	r3, #5
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e3da      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800620c:	4b70      	ldr	r3, [pc, #448]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 800620e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006212:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1ef      	bne.n	80061fa <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800621a:	4b6d      	ldr	r3, [pc, #436]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 800621c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006220:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	4969      	ldr	r1, [pc, #420]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 800622a:	4313      	orrs	r3, r2
 800622c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006230:	4b67      	ldr	r3, [pc, #412]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 8006232:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006236:	4a66      	ldr	r2, [pc, #408]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 8006238:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800623c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006240:	f7fe ff38 	bl	80050b4 <HAL_GetTick>
 8006244:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006248:	f7fe ff34 	bl	80050b4 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b05      	cmp	r3, #5
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e3b3      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800625a:	4b5d      	ldr	r3, [pc, #372]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 800625c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0ef      	beq.n	8006248 <HAL_RCC_OscConfig+0x630>
 8006268:	e01b      	b.n	80062a2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800626a:	4b59      	ldr	r3, [pc, #356]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 800626c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006270:	4a57      	ldr	r2, [pc, #348]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 8006272:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006276:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800627a:	f7fe ff1b 	bl	80050b4 <HAL_GetTick>
 800627e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006280:	e008      	b.n	8006294 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006282:	f7fe ff17 	bl	80050b4 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b05      	cmp	r3, #5
 800628e:	d901      	bls.n	8006294 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e396      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006294:	4b4e      	ldr	r3, [pc, #312]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 8006296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800629a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1ef      	bne.n	8006282 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062a2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d107      	bne.n	80062ba <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062aa:	4b49      	ldr	r3, [pc, #292]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 80062ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062b0:	4a47      	ldr	r2, [pc, #284]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 80062b2:	f023 0304 	bic.w	r3, r3, #4
 80062b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 8111 	beq.w	80064ea <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80062c8:	2300      	movs	r3, #0
 80062ca:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062ce:	4b40      	ldr	r3, [pc, #256]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 80062d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d111      	bne.n	8006300 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062dc:	4b3c      	ldr	r3, [pc, #240]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 80062de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062e2:	4a3b      	ldr	r2, [pc, #236]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 80062e4:	f043 0304 	orr.w	r3, r3, #4
 80062e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80062ec:	4b38      	ldr	r3, [pc, #224]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 80062ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062f2:	f003 0304 	and.w	r3, r3, #4
 80062f6:	613b      	str	r3, [r7, #16]
 80062f8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80062fa:	2301      	movs	r3, #1
 80062fc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006300:	4b34      	ldr	r3, [pc, #208]	@ (80063d4 <HAL_RCC_OscConfig+0x7bc>)
 8006302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d118      	bne.n	800633e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800630c:	4b31      	ldr	r3, [pc, #196]	@ (80063d4 <HAL_RCC_OscConfig+0x7bc>)
 800630e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006310:	4a30      	ldr	r2, [pc, #192]	@ (80063d4 <HAL_RCC_OscConfig+0x7bc>)
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006318:	f7fe fecc 	bl	80050b4 <HAL_GetTick>
 800631c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006320:	f7fe fec8 	bl	80050b4 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e347      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006332:	4b28      	ldr	r3, [pc, #160]	@ (80063d4 <HAL_RCC_OscConfig+0x7bc>)
 8006334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0f0      	beq.n	8006320 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01f      	beq.n	800638a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	2b00      	cmp	r3, #0
 8006354:	d010      	beq.n	8006378 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006356:	4b1e      	ldr	r3, [pc, #120]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 8006358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800635c:	4a1c      	ldr	r2, [pc, #112]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 800635e:	f043 0304 	orr.w	r3, r3, #4
 8006362:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006366:	4b1a      	ldr	r3, [pc, #104]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 8006368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800636c:	4a18      	ldr	r2, [pc, #96]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 800636e:	f043 0301 	orr.w	r3, r3, #1
 8006372:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006376:	e018      	b.n	80063aa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006378:	4b15      	ldr	r3, [pc, #84]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 800637a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800637e:	4a14      	ldr	r2, [pc, #80]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 8006380:	f043 0301 	orr.w	r3, r3, #1
 8006384:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006388:	e00f      	b.n	80063aa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800638a:	4b11      	ldr	r3, [pc, #68]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 800638c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006390:	4a0f      	ldr	r2, [pc, #60]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 8006392:	f023 0301 	bic.w	r3, r3, #1
 8006396:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800639a:	4b0d      	ldr	r3, [pc, #52]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 800639c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063a0:	4a0b      	ldr	r2, [pc, #44]	@ (80063d0 <HAL_RCC_OscConfig+0x7b8>)
 80063a2:	f023 0304 	bic.w	r3, r3, #4
 80063a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d057      	beq.n	8006462 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80063b2:	f7fe fe7f 	bl	80050b4 <HAL_GetTick>
 80063b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063b8:	e00e      	b.n	80063d8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ba:	f7fe fe7b 	bl	80050b4 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d905      	bls.n	80063d8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e2f8      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
 80063d0:	46020c00 	.word	0x46020c00
 80063d4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063d8:	4b9c      	ldr	r3, [pc, #624]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 80063da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0e9      	beq.n	80063ba <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d01b      	beq.n	800642a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80063f2:	4b96      	ldr	r3, [pc, #600]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 80063f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063f8:	4a94      	ldr	r2, [pc, #592]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 80063fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006402:	e00a      	b.n	800641a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006404:	f7fe fe56 	bl	80050b4 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006412:	4293      	cmp	r3, r2
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e2d3      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800641a:	4b8c      	ldr	r3, [pc, #560]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 800641c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0ed      	beq.n	8006404 <HAL_RCC_OscConfig+0x7ec>
 8006428:	e053      	b.n	80064d2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800642a:	4b88      	ldr	r3, [pc, #544]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 800642c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006430:	4a86      	ldr	r2, [pc, #536]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 8006432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006436:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800643a:	e00a      	b.n	8006452 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800643c:	f7fe fe3a 	bl	80050b4 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800644a:	4293      	cmp	r3, r2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e2b7      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006452:	4b7e      	ldr	r3, [pc, #504]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 8006454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1ed      	bne.n	800643c <HAL_RCC_OscConfig+0x824>
 8006460:	e037      	b.n	80064d2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006462:	f7fe fe27 	bl	80050b4 <HAL_GetTick>
 8006466:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006468:	e00a      	b.n	8006480 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800646a:	f7fe fe23 	bl	80050b4 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006478:	4293      	cmp	r3, r2
 800647a:	d901      	bls.n	8006480 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e2a0      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006480:	4b72      	ldr	r3, [pc, #456]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 8006482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1ed      	bne.n	800646a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800648e:	4b6f      	ldr	r3, [pc, #444]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 8006490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01a      	beq.n	80064d2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800649c:	4b6b      	ldr	r3, [pc, #428]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 800649e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064a2:	4a6a      	ldr	r2, [pc, #424]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 80064a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80064ac:	e00a      	b.n	80064c4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ae:	f7fe fe01 	bl	80050b4 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064bc:	4293      	cmp	r3, r2
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e27e      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80064c4:	4b61      	ldr	r3, [pc, #388]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 80064c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1ed      	bne.n	80064ae <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064d2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d107      	bne.n	80064ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064da:	4b5c      	ldr	r3, [pc, #368]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 80064dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064e0:	4a5a      	ldr	r2, [pc, #360]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 80064e2:	f023 0304 	bic.w	r3, r3, #4
 80064e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d036      	beq.n	8006564 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d019      	beq.n	8006532 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80064fe:	4b53      	ldr	r3, [pc, #332]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a52      	ldr	r2, [pc, #328]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 8006504:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006508:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800650a:	f7fe fdd3 	bl	80050b4 <HAL_GetTick>
 800650e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006510:	e008      	b.n	8006524 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006512:	f7fe fdcf 	bl	80050b4 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	2b02      	cmp	r3, #2
 800651e:	d901      	bls.n	8006524 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e24e      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006524:	4b49      	ldr	r3, [pc, #292]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0f0      	beq.n	8006512 <HAL_RCC_OscConfig+0x8fa>
 8006530:	e018      	b.n	8006564 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006532:	4b46      	ldr	r3, [pc, #280]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a45      	ldr	r2, [pc, #276]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 8006538:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800653c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800653e:	f7fe fdb9 	bl	80050b4 <HAL_GetTick>
 8006542:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006544:	e008      	b.n	8006558 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006546:	f7fe fdb5 	bl	80050b4 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	d901      	bls.n	8006558 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e234      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006558:	4b3c      	ldr	r3, [pc, #240]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1f0      	bne.n	8006546 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800656c:	2b00      	cmp	r3, #0
 800656e:	d036      	beq.n	80065de <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006574:	2b00      	cmp	r3, #0
 8006576:	d019      	beq.n	80065ac <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006578:	4b34      	ldr	r3, [pc, #208]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a33      	ldr	r2, [pc, #204]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 800657e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006582:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006584:	f7fe fd96 	bl	80050b4 <HAL_GetTick>
 8006588:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800658c:	f7fe fd92 	bl	80050b4 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e211      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800659e:	4b2b      	ldr	r3, [pc, #172]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0f0      	beq.n	800658c <HAL_RCC_OscConfig+0x974>
 80065aa:	e018      	b.n	80065de <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80065ac:	4b27      	ldr	r3, [pc, #156]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a26      	ldr	r2, [pc, #152]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 80065b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80065b8:	f7fe fd7c 	bl	80050b4 <HAL_GetTick>
 80065bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80065c0:	f7fe fd78 	bl	80050b4 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e1f7      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80065d2:	4b1e      	ldr	r3, [pc, #120]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d07f      	beq.n	80066ea <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d062      	beq.n	80066b8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80065f2:	4b16      	ldr	r3, [pc, #88]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	4a15      	ldr	r2, [pc, #84]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 80065f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80065fc:	6093      	str	r3, [r2, #8]
 80065fe:	4b13      	ldr	r3, [pc, #76]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660a:	4910      	ldr	r1, [pc, #64]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 800660c:	4313      	orrs	r3, r2
 800660e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006614:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006618:	d309      	bcc.n	800662e <HAL_RCC_OscConfig+0xa16>
 800661a:	4b0c      	ldr	r3, [pc, #48]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f023 021f 	bic.w	r2, r3, #31
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	4909      	ldr	r1, [pc, #36]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 8006628:	4313      	orrs	r3, r2
 800662a:	60cb      	str	r3, [r1, #12]
 800662c:	e02a      	b.n	8006684 <HAL_RCC_OscConfig+0xa6c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	da0c      	bge.n	8006650 <HAL_RCC_OscConfig+0xa38>
 8006636:	4b05      	ldr	r3, [pc, #20]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	015b      	lsls	r3, r3, #5
 8006644:	4901      	ldr	r1, [pc, #4]	@ (800664c <HAL_RCC_OscConfig+0xa34>)
 8006646:	4313      	orrs	r3, r2
 8006648:	60cb      	str	r3, [r1, #12]
 800664a:	e01b      	b.n	8006684 <HAL_RCC_OscConfig+0xa6c>
 800664c:	46020c00 	.word	0x46020c00
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006658:	d30a      	bcc.n	8006670 <HAL_RCC_OscConfig+0xa58>
 800665a:	4ba1      	ldr	r3, [pc, #644]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	029b      	lsls	r3, r3, #10
 8006668:	499d      	ldr	r1, [pc, #628]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 800666a:	4313      	orrs	r3, r2
 800666c:	60cb      	str	r3, [r1, #12]
 800666e:	e009      	b.n	8006684 <HAL_RCC_OscConfig+0xa6c>
 8006670:	4b9b      	ldr	r3, [pc, #620]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	03db      	lsls	r3, r3, #15
 800667e:	4998      	ldr	r1, [pc, #608]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006680:	4313      	orrs	r3, r2
 8006682:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006684:	4b96      	ldr	r3, [pc, #600]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a95      	ldr	r2, [pc, #596]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 800668a:	f043 0310 	orr.w	r3, r3, #16
 800668e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006690:	f7fe fd10 	bl	80050b4 <HAL_GetTick>
 8006694:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006698:	f7fe fd0c 	bl	80050b4 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e18b      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80066aa:	4b8d      	ldr	r3, [pc, #564]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0f0      	beq.n	8006698 <HAL_RCC_OscConfig+0xa80>
 80066b6:	e018      	b.n	80066ea <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80066b8:	4b89      	ldr	r3, [pc, #548]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a88      	ldr	r2, [pc, #544]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 80066be:	f023 0310 	bic.w	r3, r3, #16
 80066c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80066c4:	f7fe fcf6 	bl	80050b4 <HAL_GetTick>
 80066c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80066cc:	f7fe fcf2 	bl	80050b4 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e171      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80066de:	4b80      	ldr	r3, [pc, #512]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f0      	bne.n	80066cc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 8166 	beq.w	80069c0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80066f4:	2300      	movs	r3, #0
 80066f6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066fa:	4b79      	ldr	r3, [pc, #484]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f003 030c 	and.w	r3, r3, #12
 8006702:	2b0c      	cmp	r3, #12
 8006704:	f000 80f2 	beq.w	80068ec <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670c:	2b02      	cmp	r3, #2
 800670e:	f040 80c5 	bne.w	800689c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006712:	4b73      	ldr	r3, [pc, #460]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a72      	ldr	r2, [pc, #456]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006718:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800671c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800671e:	f7fe fcc9 	bl	80050b4 <HAL_GetTick>
 8006722:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006724:	e008      	b.n	8006738 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006726:	f7fe fcc5 	bl	80050b4 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d901      	bls.n	8006738 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e144      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006738:	4b69      	ldr	r3, [pc, #420]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1f0      	bne.n	8006726 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006744:	4b66      	ldr	r3, [pc, #408]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006746:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800674a:	f003 0304 	and.w	r3, r3, #4
 800674e:	2b00      	cmp	r3, #0
 8006750:	d111      	bne.n	8006776 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006752:	4b63      	ldr	r3, [pc, #396]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006758:	4a61      	ldr	r2, [pc, #388]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 800675a:	f043 0304 	orr.w	r3, r3, #4
 800675e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006762:	4b5f      	ldr	r3, [pc, #380]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006770:	2301      	movs	r3, #1
 8006772:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006776:	4b5b      	ldr	r3, [pc, #364]	@ (80068e4 <HAL_RCC_OscConfig+0xccc>)
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800677e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006782:	d102      	bne.n	800678a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006784:	2301      	movs	r3, #1
 8006786:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800678a:	4b56      	ldr	r3, [pc, #344]	@ (80068e4 <HAL_RCC_OscConfig+0xccc>)
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	4a55      	ldr	r2, [pc, #340]	@ (80068e4 <HAL_RCC_OscConfig+0xccc>)
 8006790:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006794:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006796:	4b52      	ldr	r3, [pc, #328]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800679e:	f023 0303 	bic.w	r3, r3, #3
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80067aa:	3a01      	subs	r2, #1
 80067ac:	0212      	lsls	r2, r2, #8
 80067ae:	4311      	orrs	r1, r2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80067b4:	430a      	orrs	r2, r1
 80067b6:	494a      	ldr	r1, [pc, #296]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80067bc:	4b48      	ldr	r3, [pc, #288]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 80067be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067c0:	4b49      	ldr	r3, [pc, #292]	@ (80068e8 <HAL_RCC_OscConfig+0xcd0>)
 80067c2:	4013      	ands	r3, r2
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80067c8:	3a01      	subs	r2, #1
 80067ca:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80067d2:	3a01      	subs	r2, #1
 80067d4:	0252      	lsls	r2, r2, #9
 80067d6:	b292      	uxth	r2, r2
 80067d8:	4311      	orrs	r1, r2
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80067de:	3a01      	subs	r2, #1
 80067e0:	0412      	lsls	r2, r2, #16
 80067e2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80067e6:	4311      	orrs	r1, r2
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80067ec:	3a01      	subs	r2, #1
 80067ee:	0612      	lsls	r2, r2, #24
 80067f0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80067f4:	430a      	orrs	r2, r1
 80067f6:	493a      	ldr	r1, [pc, #232]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80067fc:	4b38      	ldr	r3, [pc, #224]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 80067fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006800:	4a37      	ldr	r2, [pc, #220]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006802:	f023 0310 	bic.w	r3, r3, #16
 8006806:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800680c:	4a34      	ldr	r2, [pc, #208]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006812:	4b33      	ldr	r3, [pc, #204]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006816:	4a32      	ldr	r2, [pc, #200]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006818:	f043 0310 	orr.w	r3, r3, #16
 800681c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800681e:	4b30      	ldr	r3, [pc, #192]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006822:	f023 020c 	bic.w	r2, r3, #12
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800682a:	492d      	ldr	r1, [pc, #180]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 800682c:	4313      	orrs	r3, r2
 800682e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006830:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006834:	2b01      	cmp	r3, #1
 8006836:	d105      	bne.n	8006844 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006838:	4b2a      	ldr	r3, [pc, #168]	@ (80068e4 <HAL_RCC_OscConfig+0xccc>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	4a29      	ldr	r2, [pc, #164]	@ (80068e4 <HAL_RCC_OscConfig+0xccc>)
 800683e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006842:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006844:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006848:	2b01      	cmp	r3, #1
 800684a:	d107      	bne.n	800685c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800684c:	4b24      	ldr	r3, [pc, #144]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 800684e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006852:	4a23      	ldr	r2, [pc, #140]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006854:	f023 0304 	bic.w	r3, r3, #4
 8006858:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800685c:	4b20      	ldr	r3, [pc, #128]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a1f      	ldr	r2, [pc, #124]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006866:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006868:	f7fe fc24 	bl	80050b4 <HAL_GetTick>
 800686c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800686e:	e008      	b.n	8006882 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006870:	f7fe fc20 	bl	80050b4 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e09f      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006882:	4b17      	ldr	r3, [pc, #92]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0f0      	beq.n	8006870 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800688e:	4b14      	ldr	r3, [pc, #80]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006892:	4a13      	ldr	r2, [pc, #76]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 8006894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006898:	6293      	str	r3, [r2, #40]	@ 0x28
 800689a:	e091      	b.n	80069c0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800689c:	4b10      	ldr	r3, [pc, #64]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a0f      	ldr	r2, [pc, #60]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 80068a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80068a8:	f7fe fc04 	bl	80050b4 <HAL_GetTick>
 80068ac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b0:	f7fe fc00 	bl	80050b4 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e07f      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80068c2:	4b07      	ldr	r3, [pc, #28]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f0      	bne.n	80068b0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80068ce:	4b04      	ldr	r3, [pc, #16]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 80068d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d2:	4a03      	ldr	r2, [pc, #12]	@ (80068e0 <HAL_RCC_OscConfig+0xcc8>)
 80068d4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80068d8:	f023 0303 	bic.w	r3, r3, #3
 80068dc:	6293      	str	r3, [r2, #40]	@ 0x28
 80068de:	e06f      	b.n	80069c0 <HAL_RCC_OscConfig+0xda8>
 80068e0:	46020c00 	.word	0x46020c00
 80068e4:	46020800 	.word	0x46020800
 80068e8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80068ec:	4b37      	ldr	r3, [pc, #220]	@ (80069cc <HAL_RCC_OscConfig+0xdb4>)
 80068ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80068f2:	4b36      	ldr	r3, [pc, #216]	@ (80069cc <HAL_RCC_OscConfig+0xdb4>)
 80068f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068f6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d039      	beq.n	8006974 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	f003 0203 	and.w	r2, r3, #3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800690a:	429a      	cmp	r2, r3
 800690c:	d132      	bne.n	8006974 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	0a1b      	lsrs	r3, r3, #8
 8006912:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800691c:	429a      	cmp	r2, r3
 800691e:	d129      	bne.n	8006974 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800692a:	429a      	cmp	r2, r3
 800692c:	d122      	bne.n	8006974 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006938:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800693a:	429a      	cmp	r2, r3
 800693c:	d11a      	bne.n	8006974 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	0a5b      	lsrs	r3, r3, #9
 8006942:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800694a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800694c:	429a      	cmp	r2, r3
 800694e:	d111      	bne.n	8006974 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	0c1b      	lsrs	r3, r3, #16
 8006954:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800695c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800695e:	429a      	cmp	r2, r3
 8006960:	d108      	bne.n	8006974 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	0e1b      	lsrs	r3, r3, #24
 8006966:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800696e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006970:	429a      	cmp	r2, r3
 8006972:	d001      	beq.n	8006978 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e024      	b.n	80069c2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006978:	4b14      	ldr	r3, [pc, #80]	@ (80069cc <HAL_RCC_OscConfig+0xdb4>)
 800697a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697c:	08db      	lsrs	r3, r3, #3
 800697e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006986:	429a      	cmp	r2, r3
 8006988:	d01a      	beq.n	80069c0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800698a:	4b10      	ldr	r3, [pc, #64]	@ (80069cc <HAL_RCC_OscConfig+0xdb4>)
 800698c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698e:	4a0f      	ldr	r2, [pc, #60]	@ (80069cc <HAL_RCC_OscConfig+0xdb4>)
 8006990:	f023 0310 	bic.w	r3, r3, #16
 8006994:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006996:	f7fe fb8d 	bl	80050b4 <HAL_GetTick>
 800699a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800699c:	bf00      	nop
 800699e:	f7fe fb89 	bl	80050b4 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d0f9      	beq.n	800699e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ae:	4a07      	ldr	r2, [pc, #28]	@ (80069cc <HAL_RCC_OscConfig+0xdb4>)
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80069b4:	4b05      	ldr	r3, [pc, #20]	@ (80069cc <HAL_RCC_OscConfig+0xdb4>)
 80069b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b8:	4a04      	ldr	r2, [pc, #16]	@ (80069cc <HAL_RCC_OscConfig+0xdb4>)
 80069ba:	f043 0310 	orr.w	r3, r3, #16
 80069be:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3738      	adds	r7, #56	@ 0x38
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	46020c00 	.word	0x46020c00

080069d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e1d9      	b.n	8006d98 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069e4:	4b9b      	ldr	r3, [pc, #620]	@ (8006c54 <HAL_RCC_ClockConfig+0x284>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d910      	bls.n	8006a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069f2:	4b98      	ldr	r3, [pc, #608]	@ (8006c54 <HAL_RCC_ClockConfig+0x284>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f023 020f 	bic.w	r2, r3, #15
 80069fa:	4996      	ldr	r1, [pc, #600]	@ (8006c54 <HAL_RCC_ClockConfig+0x284>)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a02:	4b94      	ldr	r3, [pc, #592]	@ (8006c54 <HAL_RCC_ClockConfig+0x284>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d001      	beq.n	8006a14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e1c1      	b.n	8006d98 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0310 	and.w	r3, r3, #16
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d010      	beq.n	8006a42 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	695a      	ldr	r2, [r3, #20]
 8006a24:	4b8c      	ldr	r3, [pc, #560]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d908      	bls.n	8006a42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006a30:	4b89      	ldr	r3, [pc, #548]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	4986      	ldr	r1, [pc, #536]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0308 	and.w	r3, r3, #8
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d012      	beq.n	8006a74 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691a      	ldr	r2, [r3, #16]
 8006a52:	4b81      	ldr	r3, [pc, #516]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	091b      	lsrs	r3, r3, #4
 8006a58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d909      	bls.n	8006a74 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006a60:	4b7d      	ldr	r3, [pc, #500]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	497a      	ldr	r1, [pc, #488]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d010      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	4b74      	ldr	r3, [pc, #464]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d908      	bls.n	8006aa2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006a90:	4b71      	ldr	r3, [pc, #452]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	496e      	ldr	r1, [pc, #440]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d010      	beq.n	8006ad0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	4b69      	ldr	r3, [pc, #420]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d908      	bls.n	8006ad0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006abe:	4b66      	ldr	r3, [pc, #408]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	f023 020f 	bic.w	r2, r3, #15
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	4963      	ldr	r1, [pc, #396]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80d2 	beq.w	8006c82 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d143      	bne.n	8006b72 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aea:	4b5b      	ldr	r3, [pc, #364]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d110      	bne.n	8006b1a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006af8:	4b57      	ldr	r3, [pc, #348]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006afe:	4a56      	ldr	r2, [pc, #344]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006b00:	f043 0304 	orr.w	r3, r3, #4
 8006b04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006b08:	4b53      	ldr	r3, [pc, #332]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	60bb      	str	r3, [r7, #8]
 8006b14:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006b16:	2301      	movs	r3, #1
 8006b18:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006b1a:	f7fe facb 	bl	80050b4 <HAL_GetTick>
 8006b1e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006b20:	4b4e      	ldr	r3, [pc, #312]	@ (8006c5c <HAL_RCC_ClockConfig+0x28c>)
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00f      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006b2c:	e008      	b.n	8006b40 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006b2e:	f7fe fac1 	bl	80050b4 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e12b      	b.n	8006d98 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006b40:	4b46      	ldr	r3, [pc, #280]	@ (8006c5c <HAL_RCC_ClockConfig+0x28c>)
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0f0      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d107      	bne.n	8006b62 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006b52:	4b41      	ldr	r3, [pc, #260]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b58:	4a3f      	ldr	r2, [pc, #252]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006b5a:	f023 0304 	bic.w	r3, r3, #4
 8006b5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006b62:	4b3d      	ldr	r3, [pc, #244]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d121      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e112      	b.n	8006d98 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d107      	bne.n	8006b8a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b7a:	4b37      	ldr	r3, [pc, #220]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d115      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e106      	b.n	8006d98 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d107      	bne.n	8006ba2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006b92:	4b31      	ldr	r3, [pc, #196]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e0fa      	b.n	8006d98 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e0f2      	b.n	8006d98 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006bb2:	4b29      	ldr	r3, [pc, #164]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f023 0203 	bic.w	r2, r3, #3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	4926      	ldr	r1, [pc, #152]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006bc4:	f7fe fa76 	bl	80050b4 <HAL_GetTick>
 8006bc8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d112      	bne.n	8006bf8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bd2:	e00a      	b.n	8006bea <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bd4:	f7fe fa6e 	bl	80050b4 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e0d6      	b.n	8006d98 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bea:	4b1b      	ldr	r3, [pc, #108]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f003 030c 	and.w	r3, r3, #12
 8006bf2:	2b0c      	cmp	r3, #12
 8006bf4:	d1ee      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0x204>
 8006bf6:	e044      	b.n	8006c82 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d112      	bne.n	8006c26 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c00:	e00a      	b.n	8006c18 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c02:	f7fe fa57 	bl	80050b4 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d901      	bls.n	8006c18 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e0bf      	b.n	8006d98 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c18:	4b0f      	ldr	r3, [pc, #60]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f003 030c 	and.w	r3, r3, #12
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d1ee      	bne.n	8006c02 <HAL_RCC_ClockConfig+0x232>
 8006c24:	e02d      	b.n	8006c82 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d123      	bne.n	8006c76 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006c2e:	e00a      	b.n	8006c46 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c30:	f7fe fa40 	bl	80050b4 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e0a8      	b.n	8006d98 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006c46:	4b04      	ldr	r3, [pc, #16]	@ (8006c58 <HAL_RCC_ClockConfig+0x288>)
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	f003 030c 	and.w	r3, r3, #12
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1ee      	bne.n	8006c30 <HAL_RCC_ClockConfig+0x260>
 8006c52:	e016      	b.n	8006c82 <HAL_RCC_ClockConfig+0x2b2>
 8006c54:	40022000 	.word	0x40022000
 8006c58:	46020c00 	.word	0x46020c00
 8006c5c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c60:	f7fe fa28 	bl	80050b4 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e090      	b.n	8006d98 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c76:	4b4a      	ldr	r3, [pc, #296]	@ (8006da0 <HAL_RCC_ClockConfig+0x3d0>)
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f003 030c 	and.w	r3, r3, #12
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d1ee      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d010      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	4b43      	ldr	r3, [pc, #268]	@ (8006da0 <HAL_RCC_ClockConfig+0x3d0>)
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f003 030f 	and.w	r3, r3, #15
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d208      	bcs.n	8006cb0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006c9e:	4b40      	ldr	r3, [pc, #256]	@ (8006da0 <HAL_RCC_ClockConfig+0x3d0>)
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f023 020f 	bic.w	r2, r3, #15
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	493d      	ldr	r1, [pc, #244]	@ (8006da0 <HAL_RCC_ClockConfig+0x3d0>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8006da4 <HAL_RCC_ClockConfig+0x3d4>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d210      	bcs.n	8006ce0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cbe:	4b39      	ldr	r3, [pc, #228]	@ (8006da4 <HAL_RCC_ClockConfig+0x3d4>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f023 020f 	bic.w	r2, r3, #15
 8006cc6:	4937      	ldr	r1, [pc, #220]	@ (8006da4 <HAL_RCC_ClockConfig+0x3d4>)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cce:	4b35      	ldr	r3, [pc, #212]	@ (8006da4 <HAL_RCC_ClockConfig+0x3d4>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d001      	beq.n	8006ce0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e05b      	b.n	8006d98 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d010      	beq.n	8006d0e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8006da0 <HAL_RCC_ClockConfig+0x3d0>)
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d208      	bcs.n	8006d0e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006cfc:	4b28      	ldr	r3, [pc, #160]	@ (8006da0 <HAL_RCC_ClockConfig+0x3d0>)
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	4925      	ldr	r1, [pc, #148]	@ (8006da0 <HAL_RCC_ClockConfig+0x3d0>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d012      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	691a      	ldr	r2, [r3, #16]
 8006d1e:	4b20      	ldr	r3, [pc, #128]	@ (8006da0 <HAL_RCC_ClockConfig+0x3d0>)
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	091b      	lsrs	r3, r3, #4
 8006d24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d209      	bcs.n	8006d40 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8006da0 <HAL_RCC_ClockConfig+0x3d0>)
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	011b      	lsls	r3, r3, #4
 8006d3a:	4919      	ldr	r1, [pc, #100]	@ (8006da0 <HAL_RCC_ClockConfig+0x3d0>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0310 	and.w	r3, r3, #16
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d010      	beq.n	8006d6e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	695a      	ldr	r2, [r3, #20]
 8006d50:	4b13      	ldr	r3, [pc, #76]	@ (8006da0 <HAL_RCC_ClockConfig+0x3d0>)
 8006d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d208      	bcs.n	8006d6e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006d5c:	4b10      	ldr	r3, [pc, #64]	@ (8006da0 <HAL_RCC_ClockConfig+0x3d0>)
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	490d      	ldr	r1, [pc, #52]	@ (8006da0 <HAL_RCC_ClockConfig+0x3d0>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006d6e:	f000 f821 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8006d72:	4602      	mov	r2, r0
 8006d74:	4b0a      	ldr	r3, [pc, #40]	@ (8006da0 <HAL_RCC_ClockConfig+0x3d0>)
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	f003 030f 	and.w	r3, r3, #15
 8006d7c:	490a      	ldr	r1, [pc, #40]	@ (8006da8 <HAL_RCC_ClockConfig+0x3d8>)
 8006d7e:	5ccb      	ldrb	r3, [r1, r3]
 8006d80:	fa22 f303 	lsr.w	r3, r2, r3
 8006d84:	4a09      	ldr	r2, [pc, #36]	@ (8006dac <HAL_RCC_ClockConfig+0x3dc>)
 8006d86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006d88:	4b09      	ldr	r3, [pc, #36]	@ (8006db0 <HAL_RCC_ClockConfig+0x3e0>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe f907 	bl	8004fa0 <HAL_InitTick>
 8006d92:	4603      	mov	r3, r0
 8006d94:	73fb      	strb	r3, [r7, #15]

  return status;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3718      	adds	r7, #24
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	46020c00 	.word	0x46020c00
 8006da4:	40022000 	.word	0x40022000
 8006da8:	080109a0 	.word	0x080109a0
 8006dac:	20000058 	.word	0x20000058
 8006db0:	20000078 	.word	0x20000078

08006db4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b08b      	sub	sp, #44	@ 0x2c
 8006db8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dc2:	4b78      	ldr	r3, [pc, #480]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	f003 030c 	and.w	r3, r3, #12
 8006dca:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dcc:	4b75      	ldr	r3, [pc, #468]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <HAL_RCC_GetSysClockFreq+0x34>
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	2b0c      	cmp	r3, #12
 8006de0:	d121      	bne.n	8006e26 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d11e      	bne.n	8006e26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006de8:	4b6e      	ldr	r3, [pc, #440]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d107      	bne.n	8006e04 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006df4:	4b6b      	ldr	r3, [pc, #428]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006dfa:	0b1b      	lsrs	r3, r3, #12
 8006dfc:	f003 030f 	and.w	r3, r3, #15
 8006e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e02:	e005      	b.n	8006e10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006e04:	4b67      	ldr	r3, [pc, #412]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	0f1b      	lsrs	r3, r3, #28
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e10:	4a65      	ldr	r2, [pc, #404]	@ (8006fa8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e18:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d110      	bne.n	8006e42 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e22:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006e24:	e00d      	b.n	8006e42 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e26:	4b5f      	ldr	r3, [pc, #380]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	f003 030c 	and.w	r3, r3, #12
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d102      	bne.n	8006e38 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e32:	4b5e      	ldr	r3, [pc, #376]	@ (8006fac <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006e34:	623b      	str	r3, [r7, #32]
 8006e36:	e004      	b.n	8006e42 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d101      	bne.n	8006e42 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8006fb0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006e40:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	2b0c      	cmp	r3, #12
 8006e46:	f040 80a5 	bne.w	8006f94 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006e4a:	4b56      	ldr	r3, [pc, #344]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006e54:	4b53      	ldr	r3, [pc, #332]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e58:	0a1b      	lsrs	r3, r3, #8
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	3301      	adds	r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006e62:	4b50      	ldr	r3, [pc, #320]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e66:	091b      	lsrs	r3, r3, #4
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006e6e:	4b4d      	ldr	r3, [pc, #308]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e72:	08db      	lsrs	r3, r3, #3
 8006e74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	fb02 f303 	mul.w	r3, r2, r3
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d003      	beq.n	8006e98 <HAL_RCC_GetSysClockFreq+0xe4>
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d022      	beq.n	8006edc <HAL_RCC_GetSysClockFreq+0x128>
 8006e96:	e043      	b.n	8006f20 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea2:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8006fb4 <HAL_RCC_GetSysClockFreq+0x200>
 8006ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006eba:	ed97 6a01 	vldr	s12, [r7, #4]
 8006ebe:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006fb8 <HAL_RCC_GetSysClockFreq+0x204>
 8006ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eda:	e046      	b.n	8006f6a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee6:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8006fbc <HAL_RCC_GetSysClockFreq+0x208>
 8006eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eee:	4b2d      	ldr	r3, [pc, #180]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006efe:	ed97 6a01 	vldr	s12, [r7, #4]
 8006f02:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006fb8 <HAL_RCC_GetSysClockFreq+0x204>
 8006f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f1e:	e024      	b.n	8006f6a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	ee07 3a90 	vmov	s15, r3
 8006f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f38:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f40:	ee07 3a90 	vmov	s15, r3
 8006f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006f48:	ed97 6a01 	vldr	s12, [r7, #4]
 8006f4c:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8006fb8 <HAL_RCC_GetSysClockFreq+0x204>
 8006f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006f58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f68:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f6e:	0e1b      	lsrs	r3, r3, #24
 8006f70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f74:	3301      	adds	r3, #1
 8006f76:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f8e:	ee17 3a90 	vmov	r3, s15
 8006f92:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8006f94:	6a3b      	ldr	r3, [r7, #32]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	372c      	adds	r7, #44	@ 0x2c
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	46020c00 	.word	0x46020c00
 8006fa8:	080109b8 	.word	0x080109b8
 8006fac:	00f42400 	.word	0x00f42400
 8006fb0:	007a1200 	.word	0x007a1200
 8006fb4:	4b742400 	.word	0x4b742400
 8006fb8:	46000000 	.word	0x46000000
 8006fbc:	4af42400 	.word	0x4af42400

08006fc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006fc4:	f7ff fef6 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	4b07      	ldr	r3, [pc, #28]	@ (8006fe8 <HAL_RCC_GetHCLKFreq+0x28>)
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	4906      	ldr	r1, [pc, #24]	@ (8006fec <HAL_RCC_GetHCLKFreq+0x2c>)
 8006fd4:	5ccb      	ldrb	r3, [r1, r3]
 8006fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fda:	4a05      	ldr	r2, [pc, #20]	@ (8006ff0 <HAL_RCC_GetHCLKFreq+0x30>)
 8006fdc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006fde:	4b04      	ldr	r3, [pc, #16]	@ (8006ff0 <HAL_RCC_GetHCLKFreq+0x30>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	46020c00 	.word	0x46020c00
 8006fec:	080109a0 	.word	0x080109a0
 8006ff0:	20000058 	.word	0x20000058

08006ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006ff8:	f7ff ffe2 	bl	8006fc0 <HAL_RCC_GetHCLKFreq>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	4b05      	ldr	r3, [pc, #20]	@ (8007014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	091b      	lsrs	r3, r3, #4
 8007004:	f003 0307 	and.w	r3, r3, #7
 8007008:	4903      	ldr	r1, [pc, #12]	@ (8007018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800700a:	5ccb      	ldrb	r3, [r1, r3]
 800700c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007010:	4618      	mov	r0, r3
 8007012:	bd80      	pop	{r7, pc}
 8007014:	46020c00 	.word	0x46020c00
 8007018:	080109b0 	.word	0x080109b0

0800701c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007020:	f7ff ffce 	bl	8006fc0 <HAL_RCC_GetHCLKFreq>
 8007024:	4602      	mov	r2, r0
 8007026:	4b05      	ldr	r3, [pc, #20]	@ (800703c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	0a1b      	lsrs	r3, r3, #8
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	4903      	ldr	r1, [pc, #12]	@ (8007040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007032:	5ccb      	ldrb	r3, [r1, r3]
 8007034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007038:	4618      	mov	r0, r3
 800703a:	bd80      	pop	{r7, pc}
 800703c:	46020c00 	.word	0x46020c00
 8007040:	080109b0 	.word	0x080109b0

08007044 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007048:	f7ff ffba 	bl	8006fc0 <HAL_RCC_GetHCLKFreq>
 800704c:	4602      	mov	r2, r0
 800704e:	4b05      	ldr	r3, [pc, #20]	@ (8007064 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007052:	091b      	lsrs	r3, r3, #4
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	4903      	ldr	r1, [pc, #12]	@ (8007068 <HAL_RCC_GetPCLK3Freq+0x24>)
 800705a:	5ccb      	ldrb	r3, [r1, r3]
 800705c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007060:	4618      	mov	r0, r3
 8007062:	bd80      	pop	{r7, pc}
 8007064:	46020c00 	.word	0x46020c00
 8007068:	080109b0 	.word	0x080109b0

0800706c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007074:	4b3e      	ldr	r3, [pc, #248]	@ (8007170 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800707a:	f003 0304 	and.w	r3, r3, #4
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007082:	f7fe fd4b 	bl	8005b1c <HAL_PWREx_GetVoltageRange>
 8007086:	6178      	str	r0, [r7, #20]
 8007088:	e019      	b.n	80070be <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800708a:	4b39      	ldr	r3, [pc, #228]	@ (8007170 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800708c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007090:	4a37      	ldr	r2, [pc, #220]	@ (8007170 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007092:	f043 0304 	orr.w	r3, r3, #4
 8007096:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800709a:	4b35      	ldr	r3, [pc, #212]	@ (8007170 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800709c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80070a8:	f7fe fd38 	bl	8005b1c <HAL_PWREx_GetVoltageRange>
 80070ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80070ae:	4b30      	ldr	r3, [pc, #192]	@ (8007170 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80070b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070b4:	4a2e      	ldr	r2, [pc, #184]	@ (8007170 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80070b6:	f023 0304 	bic.w	r3, r3, #4
 80070ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070c4:	d003      	beq.n	80070ce <RCC_SetFlashLatencyFromMSIRange+0x62>
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070cc:	d109      	bne.n	80070e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070d4:	d202      	bcs.n	80070dc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80070d6:	2301      	movs	r3, #1
 80070d8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80070da:	e033      	b.n	8007144 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80070dc:	2300      	movs	r3, #0
 80070de:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80070e0:	e030      	b.n	8007144 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070e8:	d208      	bcs.n	80070fc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070f0:	d102      	bne.n	80070f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80070f2:	2303      	movs	r3, #3
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	e025      	b.n	8007144 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e035      	b.n	8007168 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007102:	d90f      	bls.n	8007124 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d109      	bne.n	800711e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007110:	d902      	bls.n	8007118 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007112:	2300      	movs	r3, #0
 8007114:	613b      	str	r3, [r7, #16]
 8007116:	e015      	b.n	8007144 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007118:	2301      	movs	r3, #1
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	e012      	b.n	8007144 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800711e:	2300      	movs	r3, #0
 8007120:	613b      	str	r3, [r7, #16]
 8007122:	e00f      	b.n	8007144 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800712a:	d109      	bne.n	8007140 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007132:	d102      	bne.n	800713a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007134:	2301      	movs	r3, #1
 8007136:	613b      	str	r3, [r7, #16]
 8007138:	e004      	b.n	8007144 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800713a:	2302      	movs	r3, #2
 800713c:	613b      	str	r3, [r7, #16]
 800713e:	e001      	b.n	8007144 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007140:	2301      	movs	r3, #1
 8007142:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007144:	4b0b      	ldr	r3, [pc, #44]	@ (8007174 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f023 020f 	bic.w	r2, r3, #15
 800714c:	4909      	ldr	r1, [pc, #36]	@ (8007174 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	4313      	orrs	r3, r2
 8007152:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007154:	4b07      	ldr	r3, [pc, #28]	@ (8007174 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 030f 	and.w	r3, r3, #15
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	429a      	cmp	r2, r3
 8007160:	d001      	beq.n	8007166 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e000      	b.n	8007168 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	46020c00 	.word	0x46020c00
 8007174:	40022000 	.word	0x40022000

08007178 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800717c:	b0c4      	sub	sp, #272	@ 0x110
 800717e:	af00      	add	r7, sp, #0
 8007180:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007184:	2300      	movs	r3, #0
 8007186:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800718a:	2300      	movs	r3, #0
 800718c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	f002 0401 	and.w	r4, r2, #1
 800719c:	2500      	movs	r5, #0
 800719e:	ea54 0305 	orrs.w	r3, r4, r5
 80071a2:	d00b      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80071a4:	4bd5      	ldr	r3, [pc, #852]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80071a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071aa:	f023 0103 	bic.w	r1, r3, #3
 80071ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071b4:	4ad1      	ldr	r2, [pc, #836]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80071b6:	430b      	orrs	r3, r1
 80071b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	f002 0802 	and.w	r8, r2, #2
 80071c8:	f04f 0900 	mov.w	r9, #0
 80071cc:	ea58 0309 	orrs.w	r3, r8, r9
 80071d0:	d00b      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80071d2:	4bca      	ldr	r3, [pc, #808]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80071d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071d8:	f023 010c 	bic.w	r1, r3, #12
 80071dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071e2:	4ac6      	ldr	r2, [pc, #792]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80071e4:	430b      	orrs	r3, r1
 80071e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f002 0a04 	and.w	sl, r2, #4
 80071f6:	f04f 0b00 	mov.w	fp, #0
 80071fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80071fe:	d00b      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007200:	4bbe      	ldr	r3, [pc, #760]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007206:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800720a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800720e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007210:	4aba      	ldr	r2, [pc, #744]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007212:	430b      	orrs	r3, r1
 8007214:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	f002 0308 	and.w	r3, r2, #8
 8007224:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007228:	2300      	movs	r3, #0
 800722a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800722e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007232:	460b      	mov	r3, r1
 8007234:	4313      	orrs	r3, r2
 8007236:	d00b      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007238:	4bb0      	ldr	r3, [pc, #704]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800723a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800723e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007248:	4aac      	ldr	r2, [pc, #688]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800724a:	430b      	orrs	r3, r1
 800724c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f002 0310 	and.w	r3, r2, #16
 800725c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007260:	2300      	movs	r3, #0
 8007262:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007266:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800726a:	460b      	mov	r3, r1
 800726c:	4313      	orrs	r3, r2
 800726e:	d00b      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007270:	4ba2      	ldr	r3, [pc, #648]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007276:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800727a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800727e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007280:	4a9e      	ldr	r2, [pc, #632]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007282:	430b      	orrs	r3, r1
 8007284:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007294:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007298:	2300      	movs	r3, #0
 800729a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800729e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4313      	orrs	r3, r2
 80072a6:	d00b      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80072a8:	4b94      	ldr	r3, [pc, #592]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80072aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80072ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80072b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072b8:	4a90      	ldr	r2, [pc, #576]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80072ba:	430b      	orrs	r3, r1
 80072bc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	f002 0320 	and.w	r3, r2, #32
 80072cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072d0:	2300      	movs	r3, #0
 80072d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80072d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072da:	460b      	mov	r3, r1
 80072dc:	4313      	orrs	r3, r2
 80072de:	d00b      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80072e0:	4b86      	ldr	r3, [pc, #536]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80072e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072e6:	f023 0107 	bic.w	r1, r3, #7
 80072ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072f0:	4a82      	ldr	r2, [pc, #520]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80072f2:	430b      	orrs	r3, r1
 80072f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007300:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007304:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007308:	2300      	movs	r3, #0
 800730a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800730e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007312:	460b      	mov	r3, r1
 8007314:	4313      	orrs	r3, r2
 8007316:	d00b      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007318:	4b78      	ldr	r3, [pc, #480]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800731a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800731e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007328:	4a74      	ldr	r2, [pc, #464]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800732a:	430b      	orrs	r3, r1
 800732c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800733c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007340:	2300      	movs	r3, #0
 8007342:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007346:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800734a:	460b      	mov	r3, r1
 800734c:	4313      	orrs	r3, r2
 800734e:	d00b      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007350:	4b6a      	ldr	r3, [pc, #424]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007356:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800735a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800735e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007360:	4a66      	ldr	r2, [pc, #408]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007362:	430b      	orrs	r3, r1
 8007364:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007374:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007378:	2300      	movs	r3, #0
 800737a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800737e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007382:	460b      	mov	r3, r1
 8007384:	4313      	orrs	r3, r2
 8007386:	d00b      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007388:	4b5c      	ldr	r3, [pc, #368]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800738a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800738e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007398:	4a58      	ldr	r2, [pc, #352]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800739a:	430b      	orrs	r3, r1
 800739c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80073ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073b0:	2300      	movs	r3, #0
 80073b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80073b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80073ba:	460b      	mov	r3, r1
 80073bc:	4313      	orrs	r3, r2
 80073be:	d00b      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80073c0:	4b4e      	ldr	r3, [pc, #312]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80073c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073c6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80073ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073d0:	4a4a      	ldr	r2, [pc, #296]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80073d2:	430b      	orrs	r3, r1
 80073d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 80073d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80073e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073e8:	2300      	movs	r3, #0
 80073ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4313      	orrs	r3, r2
 80073f6:	d00b      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80073f8:	4b40      	ldr	r3, [pc, #256]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80073fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073fe:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8007402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007406:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007408:	4a3c      	ldr	r2, [pc, #240]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800740a:	430b      	orrs	r3, r1
 800740c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8007410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007418:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800741c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007420:	2300      	movs	r3, #0
 8007422:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007426:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800742a:	460b      	mov	r3, r1
 800742c:	4313      	orrs	r3, r2
 800742e:	d00c      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8007430:	4b32      	ldr	r3, [pc, #200]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007432:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007436:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800743a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800743e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007442:	4a2e      	ldr	r2, [pc, #184]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007444:	430b      	orrs	r3, r1
 8007446:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800744a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800745a:	2300      	movs	r3, #0
 800745c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007460:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007464:	460b      	mov	r3, r1
 8007466:	4313      	orrs	r3, r2
 8007468:	d00c      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800746a:	4b24      	ldr	r3, [pc, #144]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800746c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007470:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800747c:	4a1f      	ldr	r2, [pc, #124]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800747e:	430b      	orrs	r3, r1
 8007480:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007490:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007494:	2300      	movs	r3, #0
 8007496:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800749a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800749e:	460b      	mov	r3, r1
 80074a0:	4313      	orrs	r3, r2
 80074a2:	d00c      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80074a4:	4b15      	ldr	r3, [pc, #84]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80074a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074aa:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80074ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074b6:	4a11      	ldr	r2, [pc, #68]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80074b8:	430b      	orrs	r3, r1
 80074ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80074be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80074ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074ce:	2300      	movs	r3, #0
 80074d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074d4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80074d8:	460b      	mov	r3, r1
 80074da:	4313      	orrs	r3, r2
 80074dc:	d010      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80074de:	4b07      	ldr	r3, [pc, #28]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80074e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80074e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074f0:	4a02      	ldr	r2, [pc, #8]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80074f2:	430b      	orrs	r3, r1
 80074f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80074f8:	e002      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80074fa:	bf00      	nop
 80074fc:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800750c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007510:	2300      	movs	r3, #0
 8007512:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007516:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800751a:	460b      	mov	r3, r1
 800751c:	4313      	orrs	r3, r2
 800751e:	d04c      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007524:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007528:	2b80      	cmp	r3, #128	@ 0x80
 800752a:	d02d      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800752c:	2b80      	cmp	r3, #128	@ 0x80
 800752e:	d827      	bhi.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007530:	2b60      	cmp	r3, #96	@ 0x60
 8007532:	d02b      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007534:	2b60      	cmp	r3, #96	@ 0x60
 8007536:	d823      	bhi.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007538:	2b40      	cmp	r3, #64	@ 0x40
 800753a:	d006      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800753c:	2b40      	cmp	r3, #64	@ 0x40
 800753e:	d81f      	bhi.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d009      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007544:	2b20      	cmp	r3, #32
 8007546:	d011      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007548:	e01a      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800754a:	4bbe      	ldr	r3, [pc, #760]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800754c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754e:	4abd      	ldr	r2, [pc, #756]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007554:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007556:	e01a      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800755c:	3308      	adds	r3, #8
 800755e:	4618      	mov	r0, r3
 8007560:	f002 fc3c 	bl	8009ddc <RCCEx_PLL2_Config>
 8007564:	4603      	mov	r3, r0
 8007566:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800756a:	e010      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800756c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007570:	332c      	adds	r3, #44	@ 0x2c
 8007572:	4618      	mov	r0, r3
 8007574:	f002 fcca 	bl	8009f0c <RCCEx_PLL3_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800757e:	e006      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007586:	e002      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8007588:	bf00      	nop
 800758a:	e000      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800758c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800758e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10d      	bne.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007596:	4bab      	ldr	r3, [pc, #684]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007598:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800759c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80075a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075a8:	4aa6      	ldr	r2, [pc, #664]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075aa:	430b      	orrs	r3, r1
 80075ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80075b0:	e003      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80075b6:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80075ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80075c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075ca:	2300      	movs	r3, #0
 80075cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075d0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80075d4:	460b      	mov	r3, r1
 80075d6:	4313      	orrs	r3, r2
 80075d8:	d053      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80075da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075e6:	d033      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80075e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075ec:	d82c      	bhi.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80075ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075f2:	d02f      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 80075f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075f8:	d826      	bhi.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80075fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075fe:	d008      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8007600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007604:	d820      	bhi.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00a      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800760a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800760e:	d011      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007610:	e01a      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007612:	4b8c      	ldr	r3, [pc, #560]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007616:	4a8b      	ldr	r2, [pc, #556]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800761c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800761e:	e01a      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007624:	3308      	adds	r3, #8
 8007626:	4618      	mov	r0, r3
 8007628:	f002 fbd8 	bl	8009ddc <RCCEx_PLL2_Config>
 800762c:	4603      	mov	r3, r0
 800762e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007632:	e010      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007638:	332c      	adds	r3, #44	@ 0x2c
 800763a:	4618      	mov	r0, r3
 800763c:	f002 fc66 	bl	8009f0c <RCCEx_PLL3_Config>
 8007640:	4603      	mov	r3, r0
 8007642:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007646:	e006      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800764e:	e002      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8007650:	bf00      	nop
 8007652:	e000      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8007654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007656:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10d      	bne.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800765e:	4b79      	ldr	r3, [pc, #484]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007660:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007664:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800766c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007670:	4a74      	ldr	r2, [pc, #464]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007672:	430b      	orrs	r3, r1
 8007674:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007678:	e003      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800767e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800768e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007690:	2300      	movs	r3, #0
 8007692:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007694:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007698:	460b      	mov	r3, r1
 800769a:	4313      	orrs	r3, r2
 800769c:	d046      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800769e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076a6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80076aa:	d028      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x586>
 80076ac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80076b0:	d821      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80076b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076b6:	d022      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x586>
 80076b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076bc:	d81b      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80076be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076c2:	d01c      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x586>
 80076c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076c8:	d815      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80076ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ce:	d008      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 80076d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076d4:	d80f      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d011      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x586>
 80076da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076de:	d00e      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x586>
 80076e0:	e009      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076e6:	3308      	adds	r3, #8
 80076e8:	4618      	mov	r0, r3
 80076ea:	f002 fb77 	bl	8009ddc <RCCEx_PLL2_Config>
 80076ee:	4603      	mov	r3, r0
 80076f0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80076f4:	e004      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80076fc:	e000      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 80076fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007700:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10d      	bne.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007708:	4b4e      	ldr	r3, [pc, #312]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800770a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800770e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007716:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800771a:	4a4a      	ldr	r2, [pc, #296]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800771c:	430b      	orrs	r3, r1
 800771e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007722:	e003      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007724:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007728:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800772c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007734:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007738:	673b      	str	r3, [r7, #112]	@ 0x70
 800773a:	2300      	movs	r3, #0
 800773c:	677b      	str	r3, [r7, #116]	@ 0x74
 800773e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007742:	460b      	mov	r3, r1
 8007744:	4313      	orrs	r3, r2
 8007746:	d03f      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800774c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007750:	2b04      	cmp	r3, #4
 8007752:	d81e      	bhi.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8007754:	a201      	add	r2, pc, #4	@ (adr r2, 800775c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775a:	bf00      	nop
 800775c:	0800779b 	.word	0x0800779b
 8007760:	08007771 	.word	0x08007771
 8007764:	0800777f 	.word	0x0800777f
 8007768:	0800779b 	.word	0x0800779b
 800776c:	0800779b 	.word	0x0800779b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007770:	4b34      	ldr	r3, [pc, #208]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007774:	4a33      	ldr	r2, [pc, #204]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800777a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800777c:	e00e      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800777e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007782:	332c      	adds	r3, #44	@ 0x2c
 8007784:	4618      	mov	r0, r3
 8007786:	f002 fbc1 	bl	8009f0c <RCCEx_PLL3_Config>
 800778a:	4603      	mov	r3, r0
 800778c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007790:	e004      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007798:	e000      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 800779a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800779c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10d      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80077a4:	4b27      	ldr	r3, [pc, #156]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077aa:	f023 0107 	bic.w	r1, r3, #7
 80077ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077b6:	4a23      	ldr	r2, [pc, #140]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077b8:	430b      	orrs	r3, r1
 80077ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80077be:	e003      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80077c4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80077c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80077d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077d6:	2300      	movs	r3, #0
 80077d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80077de:	460b      	mov	r3, r1
 80077e0:	4313      	orrs	r3, r2
 80077e2:	d04c      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80077e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077f0:	d02a      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80077f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077f6:	d821      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80077f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80077fc:	d026      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 80077fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007802:	d81b      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8007804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007808:	d00e      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800780a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800780e:	d815      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8007810:	2b00      	cmp	r3, #0
 8007812:	d01d      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8007814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007818:	d110      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800781a:	4b0a      	ldr	r3, [pc, #40]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800781c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781e:	4a09      	ldr	r2, [pc, #36]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007824:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007826:	e014      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800782c:	332c      	adds	r3, #44	@ 0x2c
 800782e:	4618      	mov	r0, r3
 8007830:	f002 fb6c 	bl	8009f0c <RCCEx_PLL3_Config>
 8007834:	4603      	mov	r3, r0
 8007836:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800783a:	e00a      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007842:	e006      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8007844:	46020c00 	.word	0x46020c00
        break;
 8007848:	bf00      	nop
 800784a:	e002      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 800784c:	bf00      	nop
 800784e:	e000      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8007850:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007852:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10d      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800785a:	4baf      	ldr	r3, [pc, #700]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800785c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007860:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007868:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800786c:	4aaa      	ldr	r2, [pc, #680]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800786e:	430b      	orrs	r3, r1
 8007870:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007874:	e003      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007876:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800787a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800787e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800788a:	663b      	str	r3, [r7, #96]	@ 0x60
 800788c:	2300      	movs	r3, #0
 800788e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007890:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007894:	460b      	mov	r3, r1
 8007896:	4313      	orrs	r3, r2
 8007898:	f000 80b5 	beq.w	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800789c:	2300      	movs	r3, #0
 800789e:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078a2:	4b9d      	ldr	r3, [pc, #628]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80078a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d113      	bne.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078b0:	4b99      	ldr	r3, [pc, #612]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80078b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078b6:	4a98      	ldr	r2, [pc, #608]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80078b8:	f043 0304 	orr.w	r3, r3, #4
 80078bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80078c0:	4b95      	ldr	r3, [pc, #596]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80078c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80078ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 80078d2:	2301      	movs	r3, #1
 80078d4:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80078d8:	4b90      	ldr	r3, [pc, #576]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80078da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078dc:	4a8f      	ldr	r2, [pc, #572]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80078de:	f043 0301 	orr.w	r3, r3, #1
 80078e2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078e4:	f7fd fbe6 	bl	80050b4 <HAL_GetTick>
 80078e8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80078ec:	e00b      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078ee:	f7fd fbe1 	bl	80050b4 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d903      	bls.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007904:	e005      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007906:	4b85      	ldr	r3, [pc, #532]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8007908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d0ed      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8007912:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007916:	2b00      	cmp	r3, #0
 8007918:	d165      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800791a:	4b7f      	ldr	r3, [pc, #508]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800791c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007920:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007924:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d023      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8007930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007934:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007938:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800793c:	4293      	cmp	r3, r2
 800793e:	d01b      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007940:	4b75      	ldr	r3, [pc, #468]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800794a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800794e:	4b72      	ldr	r3, [pc, #456]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007950:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007954:	4a70      	ldr	r2, [pc, #448]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800795a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800795e:	4b6e      	ldr	r3, [pc, #440]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007964:	4a6c      	ldr	r2, [pc, #432]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800796a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800796e:	4a6a      	ldr	r2, [pc, #424]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007974:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	2b00      	cmp	r3, #0
 8007982:	d019      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007984:	f7fd fb96 	bl	80050b4 <HAL_GetTick>
 8007988:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800798c:	e00d      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800798e:	f7fd fb91 	bl	80050b4 <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007998:	1ad2      	subs	r2, r2, r3
 800799a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800799e:	429a      	cmp	r2, r3
 80079a0:	d903      	bls.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 80079a8:	e006      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079aa:	4b5b      	ldr	r3, [pc, #364]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80079ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0ea      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 80079b8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10d      	bne.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80079c0:	4b55      	ldr	r3, [pc, #340]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80079c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80079ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80079d2:	4a51      	ldr	r2, [pc, #324]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80079d4:	430b      	orrs	r3, r1
 80079d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80079da:	e008      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079dc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80079e0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 80079e4:	e003      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80079ea:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80079ee:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d107      	bne.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079f6:	4b48      	ldr	r3, [pc, #288]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80079f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079fc:	4a46      	ldr	r2, [pc, #280]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80079fe:	f023 0304 	bic.w	r3, r3, #4
 8007a02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007a12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a14:	2300      	movs	r3, #0
 8007a16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a18:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	d042      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007a2a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007a2e:	d022      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8007a30:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007a34:	d81b      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8007a36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a3a:	d011      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8007a3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a40:	d815      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d019      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x902>
 8007a46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a4a:	d110      	bne.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a50:	3308      	adds	r3, #8
 8007a52:	4618      	mov	r0, r3
 8007a54:	f002 f9c2 	bl	8009ddc <RCCEx_PLL2_Config>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007a5e:	e00d      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a60:	4b2d      	ldr	r3, [pc, #180]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a64:	4a2c      	ldr	r2, [pc, #176]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a6a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007a6c:	e006      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007a74:	e002      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8007a76:	bf00      	nop
 8007a78:	e000      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8007a7a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007a7c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10d      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007a84:	4b24      	ldr	r3, [pc, #144]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a8a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007a96:	4a20      	ldr	r2, [pc, #128]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a9e:	e003      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007aa4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007ab4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007aba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	d031      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ac8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007acc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ad0:	d00b      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ad6:	d804      	bhi.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d008      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ae0:	d007      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007ae8:	e004      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8007aea:	bf00      	nop
 8007aec:	e002      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8007aee:	bf00      	nop
 8007af0:	e000      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8007af2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007af4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d111      	bne.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007afc:	4b06      	ldr	r3, [pc, #24]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007afe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007b0e:	4a02      	ldr	r2, [pc, #8]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007b10:	430b      	orrs	r3, r1
 8007b12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007b16:	e007      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8007b18:	46020c00 	.word	0x46020c00
 8007b1c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b20:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007b24:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8007b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007b34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b36:	2300      	movs	r3, #0
 8007b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b3a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4313      	orrs	r3, r2
 8007b42:	d00c      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8007b44:	4bb2      	ldr	r3, [pc, #712]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007b46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b4a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8007b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b56:	4aae      	ldr	r2, [pc, #696]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b66:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007b6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b70:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007b74:	460b      	mov	r3, r1
 8007b76:	4313      	orrs	r3, r2
 8007b78:	d019      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b86:	d105      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b88:	4ba1      	ldr	r3, [pc, #644]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8c:	4aa0      	ldr	r2, [pc, #640]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b92:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007b94:	4b9e      	ldr	r3, [pc, #632]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007b96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b9a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ba2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ba6:	4a9a      	ldr	r2, [pc, #616]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007ba8:	430b      	orrs	r3, r1
 8007baa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bc0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	d00c      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007bca:	4b91      	ldr	r3, [pc, #580]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bd0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bd8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007bdc:	4a8c      	ldr	r2, [pc, #560]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007bde:	430b      	orrs	r3, r1
 8007be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bf6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	d00c      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007c00:	4b83      	ldr	r3, [pc, #524]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c06:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c0e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007c12:	4a7f      	ldr	r2, [pc, #508]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007c14:	430b      	orrs	r3, r1
 8007c16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007c26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c28:	2300      	movs	r3, #0
 8007c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c2c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007c30:	460b      	mov	r3, r1
 8007c32:	4313      	orrs	r3, r2
 8007c34:	d00c      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007c36:	4b76      	ldr	r3, [pc, #472]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c3c:	f023 0218 	bic.w	r2, r3, #24
 8007c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c44:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007c48:	4971      	ldr	r1, [pc, #452]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007c5c:	623b      	str	r3, [r7, #32]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c62:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c66:	460b      	mov	r3, r1
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	d032      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c70:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007c74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c78:	d105      	bne.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c7a:	4b65      	ldr	r3, [pc, #404]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c7e:	4a64      	ldr	r2, [pc, #400]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c84:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8007c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007c8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c92:	d108      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c98:	3308      	adds	r3, #8
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f002 f89e 	bl	8009ddc <RCCEx_PLL2_Config>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8007ca6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10d      	bne.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007cae:	4b58      	ldr	r3, [pc, #352]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007cb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007cb4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cbc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007cc0:	4953      	ldr	r1, [pc, #332]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007cc8:	e003      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cca:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007cce:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8007cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	2100      	movs	r1, #0
 8007cdc:	61b9      	str	r1, [r7, #24]
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4313      	orrs	r3, r2
 8007cec:	d04a      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8007cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cf2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007cf6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007cfa:	d01e      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8007cfc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007d00:	d825      	bhi.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8007d02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d06:	d00e      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8007d08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d0c:	d81f      	bhi.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d021      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8007d12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d16:	d11a      	bne.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d18:	4b3d      	ldr	r3, [pc, #244]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1c:	4a3c      	ldr	r2, [pc, #240]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d22:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007d24:	e018      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f002 f855 	bl	8009ddc <RCCEx_PLL2_Config>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007d38:	e00e      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d3e:	332c      	adds	r3, #44	@ 0x2c
 8007d40:	4618      	mov	r0, r3
 8007d42:	f002 f8e3 	bl	8009f0c <RCCEx_PLL3_Config>
 8007d46:	4603      	mov	r3, r0
 8007d48:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007d4c:	e004      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007d54:	e000      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8007d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d58:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10d      	bne.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8007d60:	4b2b      	ldr	r3, [pc, #172]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007d62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d72:	4927      	ldr	r1, [pc, #156]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007d7a:	e003      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d7c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007d80:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007d90:	613b      	str	r3, [r7, #16]
 8007d92:	2300      	movs	r3, #0
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	d03d      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dac:	d00e      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007dae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007db2:	d815      	bhi.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d017      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dbc:	d110      	bne.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dbe:	4b14      	ldr	r3, [pc, #80]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc2:	4a13      	ldr	r2, [pc, #76]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dc8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007dca:	e00e      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f002 f802 	bl	8009ddc <RCCEx_PLL2_Config>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007dde:	e004      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007de6:	e000      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8007de8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007dea:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d110      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007df2:	4b07      	ldr	r3, [pc, #28]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007df8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e04:	4902      	ldr	r1, [pc, #8]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007e0c:	e006      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8007e0e:	bf00      	nop
 8007e10:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e14:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007e18:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e24:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007e28:	60bb      	str	r3, [r7, #8]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60fb      	str	r3, [r7, #12]
 8007e2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007e32:	460b      	mov	r3, r1
 8007e34:	4313      	orrs	r3, r2
 8007e36:	d00c      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007e38:	4b2c      	ldr	r3, [pc, #176]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e3e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007e4a:	4928      	ldr	r1, [pc, #160]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8007e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	6039      	str	r1, [r7, #0]
 8007e5e:	f003 0308 	and.w	r3, r3, #8
 8007e62:	607b      	str	r3, [r7, #4]
 8007e64:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	d036      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8007e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007e76:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007e7a:	d00d      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007e7c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007e80:	d811      	bhi.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8007e82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e86:	d012      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007e88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e8c:	d80b      	bhi.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00d      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e96:	d106      	bne.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e98:	4b14      	ldr	r3, [pc, #80]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9c:	4a13      	ldr	r2, [pc, #76]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ea2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8007ea4:	e004      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007eac:	e000      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8007eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10d      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007eba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ebe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ec6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007eca:	4908      	ldr	r1, [pc, #32]	@ (8007eec <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007ed2:	e003      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007ed8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007edc:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eec:	46020c00 	.word	0x46020c00

08007ef0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b089      	sub	sp, #36	@ 0x24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007ef8:	4ba6      	ldr	r3, [pc, #664]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f00:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007f02:	4ba4      	ldr	r3, [pc, #656]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f06:	f003 0303 	and.w	r3, r3, #3
 8007f0a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007f0c:	4ba1      	ldr	r3, [pc, #644]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f10:	0a1b      	lsrs	r3, r3, #8
 8007f12:	f003 030f 	and.w	r3, r3, #15
 8007f16:	3301      	adds	r3, #1
 8007f18:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007f1a:	4b9e      	ldr	r3, [pc, #632]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1e:	091b      	lsrs	r3, r3, #4
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007f26:	4b9b      	ldr	r3, [pc, #620]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2a:	08db      	lsrs	r3, r3, #3
 8007f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	fb02 f303 	mul.w	r3, r2, r3
 8007f36:	ee07 3a90 	vmov	s15, r3
 8007f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f3e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d062      	beq.n	800800e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	f200 8081 	bhi.w	8008052 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d024      	beq.n	8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d17a      	bne.n	8008052 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	ee07 3a90 	vmov	s15, r3
 8007f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f66:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008198 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f6e:	4b89      	ldr	r3, [pc, #548]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f76:	ee07 3a90 	vmov	s15, r3
 8007f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f82:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800819c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f9e:	e08f      	b.n	80080c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007fa0:	4b7c      	ldr	r3, [pc, #496]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d005      	beq.n	8007fb8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007fac:	4b79      	ldr	r3, [pc, #484]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	0f1b      	lsrs	r3, r3, #28
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	e006      	b.n	8007fc6 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8007fb8:	4b76      	ldr	r3, [pc, #472]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007fba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007fbe:	041b      	lsls	r3, r3, #16
 8007fc0:	0f1b      	lsrs	r3, r3, #28
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	4a76      	ldr	r2, [pc, #472]	@ (80081a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fcc:	ee07 3a90 	vmov	s15, r3
 8007fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	ee07 3a90 	vmov	s15, r3
 8007fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	ee07 3a90 	vmov	s15, r3
 8007fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fec:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ff0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800819c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008000:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008008:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800800c:	e058      	b.n	80080c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	ee07 3a90 	vmov	s15, r3
 8008014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008018:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80081a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 800801c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008020:	4b5c      	ldr	r3, [pc, #368]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008028:	ee07 3a90 	vmov	s15, r3
 800802c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008030:	ed97 6a02 	vldr	s12, [r7, #8]
 8008034:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800819c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008038:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800803c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008040:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008044:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008050:	e036      	b.n	80080c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008052:	4b50      	ldr	r3, [pc, #320]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d005      	beq.n	800806a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800805e:	4b4d      	ldr	r3, [pc, #308]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	0f1b      	lsrs	r3, r3, #28
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	e006      	b.n	8008078 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800806a:	4b4a      	ldr	r3, [pc, #296]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800806c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008070:	041b      	lsls	r3, r3, #16
 8008072:	0f1b      	lsrs	r3, r3, #28
 8008074:	f003 030f 	and.w	r3, r3, #15
 8008078:	4a49      	ldr	r2, [pc, #292]	@ (80081a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800807a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800807e:	ee07 3a90 	vmov	s15, r3
 8008082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	ee07 3a90 	vmov	s15, r3
 800808c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	ee07 3a90 	vmov	s15, r3
 800809a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800809e:	ed97 6a02 	vldr	s12, [r7, #8]
 80080a2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800819c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80080a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80080b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080be:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80080c0:	4b34      	ldr	r3, [pc, #208]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80080c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d017      	beq.n	80080fc <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80080cc:	4b31      	ldr	r3, [pc, #196]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80080ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080d0:	0a5b      	lsrs	r3, r3, #9
 80080d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80080de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080e2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80080e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80080ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080f2:	ee17 2a90 	vmov	r2, s15
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	e002      	b.n	8008102 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008102:	4b24      	ldr	r3, [pc, #144]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d017      	beq.n	800813e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800810e:	4b21      	ldr	r3, [pc, #132]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008112:	0c1b      	lsrs	r3, r3, #16
 8008114:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008118:	ee07 3a90 	vmov	s15, r3
 800811c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008120:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008124:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008128:	edd7 6a07 	vldr	s13, [r7, #28]
 800812c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008134:	ee17 2a90 	vmov	r2, s15
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	605a      	str	r2, [r3, #4]
 800813c:	e002      	b.n	8008144 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008144:	4b13      	ldr	r3, [pc, #76]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008148:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d017      	beq.n	8008180 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008150:	4b10      	ldr	r3, [pc, #64]	@ (8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008154:	0e1b      	lsrs	r3, r3, #24
 8008156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8008162:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008166:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800816a:	edd7 6a07 	vldr	s13, [r7, #28]
 800816e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008176:	ee17 2a90 	vmov	r2, s15
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800817e:	e002      	b.n	8008186 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	609a      	str	r2, [r3, #8]
}
 8008186:	bf00      	nop
 8008188:	3724      	adds	r7, #36	@ 0x24
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	46020c00 	.word	0x46020c00
 8008198:	4b742400 	.word	0x4b742400
 800819c:	46000000 	.word	0x46000000
 80081a0:	080109b8 	.word	0x080109b8
 80081a4:	4af42400 	.word	0x4af42400

080081a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b089      	sub	sp, #36	@ 0x24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80081b0:	4ba6      	ldr	r3, [pc, #664]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80081ba:	4ba4      	ldr	r3, [pc, #656]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081be:	f003 0303 	and.w	r3, r3, #3
 80081c2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80081c4:	4ba1      	ldr	r3, [pc, #644]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c8:	0a1b      	lsrs	r3, r3, #8
 80081ca:	f003 030f 	and.w	r3, r3, #15
 80081ce:	3301      	adds	r3, #1
 80081d0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80081d2:	4b9e      	ldr	r3, [pc, #632]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d6:	091b      	lsrs	r3, r3, #4
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80081de:	4b9b      	ldr	r3, [pc, #620]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e2:	08db      	lsrs	r3, r3, #3
 80081e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	fb02 f303 	mul.w	r3, r2, r3
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d062      	beq.n	80082c6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	2b03      	cmp	r3, #3
 8008204:	f200 8081 	bhi.w	800830a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d024      	beq.n	8008258 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d17a      	bne.n	800830a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	ee07 3a90 	vmov	s15, r3
 800821a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008226:	4b89      	ldr	r3, [pc, #548]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800822a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008236:	ed97 6a02 	vldr	s12, [r7, #8]
 800823a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800823e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008242:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800824a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800824e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008252:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008256:	e08f      	b.n	8008378 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008258:	4b7c      	ldr	r3, [pc, #496]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d005      	beq.n	8008270 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008264:	4b79      	ldr	r3, [pc, #484]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	0f1b      	lsrs	r3, r3, #28
 800826a:	f003 030f 	and.w	r3, r3, #15
 800826e:	e006      	b.n	800827e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008270:	4b76      	ldr	r3, [pc, #472]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008272:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008276:	041b      	lsls	r3, r3, #16
 8008278:	0f1b      	lsrs	r3, r3, #28
 800827a:	f003 030f 	and.w	r3, r3, #15
 800827e:	4a76      	ldr	r2, [pc, #472]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008284:	ee07 3a90 	vmov	s15, r3
 8008288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	ee07 3a90 	vmov	s15, r3
 8008292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	ee07 3a90 	vmov	s15, r3
 80082a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80082a8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80082ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80082bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082c4:	e058      	b.n	8008378 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	ee07 3a90 	vmov	s15, r3
 80082cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d0:	eddf 6a62 	vldr	s13, [pc, #392]	@ 800845c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 80082d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082d8:	4b5c      	ldr	r3, [pc, #368]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80082da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e0:	ee07 3a90 	vmov	s15, r3
 80082e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80082e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80082ec:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80082f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80082f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80082f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008304:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008308:	e036      	b.n	8008378 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800830a:	4b50      	ldr	r3, [pc, #320]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d005      	beq.n	8008322 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8008316:	4b4d      	ldr	r3, [pc, #308]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	0f1b      	lsrs	r3, r3, #28
 800831c:	f003 030f 	and.w	r3, r3, #15
 8008320:	e006      	b.n	8008330 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8008322:	4b4a      	ldr	r3, [pc, #296]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008324:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008328:	041b      	lsls	r3, r3, #16
 800832a:	0f1b      	lsrs	r3, r3, #28
 800832c:	f003 030f 	and.w	r3, r3, #15
 8008330:	4a49      	ldr	r2, [pc, #292]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008336:	ee07 3a90 	vmov	s15, r3
 800833a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	ee07 3a90 	vmov	s15, r3
 8008344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008356:	ed97 6a02 	vldr	s12, [r7, #8]
 800835a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800835e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800836a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800836e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008372:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008376:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008378:	4b34      	ldr	r3, [pc, #208]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800837a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d017      	beq.n	80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008384:	4b31      	ldr	r3, [pc, #196]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008388:	0a5b      	lsrs	r3, r3, #9
 800838a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008396:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800839a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800839e:	edd7 6a07 	vldr	s13, [r7, #28]
 80083a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083aa:	ee17 2a90 	vmov	r2, s15
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	e002      	b.n	80083ba <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80083ba:	4b24      	ldr	r3, [pc, #144]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80083bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d017      	beq.n	80083f6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80083c6:	4b21      	ldr	r3, [pc, #132]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80083c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ca:	0c1b      	lsrs	r3, r3, #16
 80083cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083d0:	ee07 3a90 	vmov	s15, r3
 80083d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80083d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083dc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80083e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ec:	ee17 2a90 	vmov	r2, s15
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	605a      	str	r2, [r3, #4]
 80083f4:	e002      	b.n	80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80083fc:	4b13      	ldr	r3, [pc, #76]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80083fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d017      	beq.n	8008438 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008408:	4b10      	ldr	r3, [pc, #64]	@ (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800840a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800840c:	0e1b      	lsrs	r3, r3, #24
 800840e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008412:	ee07 3a90 	vmov	s15, r3
 8008416:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800841a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800841e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008422:	edd7 6a07 	vldr	s13, [r7, #28]
 8008426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800842a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800842e:	ee17 2a90 	vmov	r2, s15
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008436:	e002      	b.n	800843e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	609a      	str	r2, [r3, #8]
}
 800843e:	bf00      	nop
 8008440:	3724      	adds	r7, #36	@ 0x24
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	46020c00 	.word	0x46020c00
 8008450:	4b742400 	.word	0x4b742400
 8008454:	46000000 	.word	0x46000000
 8008458:	080109b8 	.word	0x080109b8
 800845c:	4af42400 	.word	0x4af42400

08008460 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008460:	b480      	push	{r7}
 8008462:	b089      	sub	sp, #36	@ 0x24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008468:	4ba6      	ldr	r3, [pc, #664]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800846a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800846c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008470:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008472:	4ba4      	ldr	r3, [pc, #656]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008476:	f003 0303 	and.w	r3, r3, #3
 800847a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800847c:	4ba1      	ldr	r3, [pc, #644]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800847e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008480:	0a1b      	lsrs	r3, r3, #8
 8008482:	f003 030f 	and.w	r3, r3, #15
 8008486:	3301      	adds	r3, #1
 8008488:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800848a:	4b9e      	ldr	r3, [pc, #632]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800848c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800848e:	091b      	lsrs	r3, r3, #4
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008496:	4b9b      	ldr	r3, [pc, #620]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800849a:	08db      	lsrs	r3, r3, #3
 800849c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	fb02 f303 	mul.w	r3, r2, r3
 80084a6:	ee07 3a90 	vmov	s15, r3
 80084aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	d062      	beq.n	800857e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	f200 8081 	bhi.w	80085c2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d024      	beq.n	8008510 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d17a      	bne.n	80085c2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	ee07 3a90 	vmov	s15, r3
 80084d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80084da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084de:	4b89      	ldr	r3, [pc, #548]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80084e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80084ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80084f2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800870c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80084f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80084fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80084fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008502:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800850a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800850e:	e08f      	b.n	8008630 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008510:	4b7c      	ldr	r3, [pc, #496]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800851c:	4b79      	ldr	r3, [pc, #484]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	0f1b      	lsrs	r3, r3, #28
 8008522:	f003 030f 	and.w	r3, r3, #15
 8008526:	e006      	b.n	8008536 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008528:	4b76      	ldr	r3, [pc, #472]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800852a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800852e:	041b      	lsls	r3, r3, #16
 8008530:	0f1b      	lsrs	r3, r3, #28
 8008532:	f003 030f 	and.w	r3, r3, #15
 8008536:	4a76      	ldr	r2, [pc, #472]	@ (8008710 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800853c:	ee07 3a90 	vmov	s15, r3
 8008540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	ee07 3a90 	vmov	s15, r3
 8008558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800855c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008560:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800870c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008564:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008568:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800856c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008570:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008578:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800857c:	e058      	b.n	8008630 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	ee07 3a90 	vmov	s15, r3
 8008584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008588:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 800858c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008590:	4b5c      	ldr	r3, [pc, #368]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80085a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80085a4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800870c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80085a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80085ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80085b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80085b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085c0:	e036      	b.n	8008630 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80085c2:	4b50      	ldr	r3, [pc, #320]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d005      	beq.n	80085da <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80085ce:	4b4d      	ldr	r3, [pc, #308]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	0f1b      	lsrs	r3, r3, #28
 80085d4:	f003 030f 	and.w	r3, r3, #15
 80085d8:	e006      	b.n	80085e8 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80085da:	4b4a      	ldr	r3, [pc, #296]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80085dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80085e0:	041b      	lsls	r3, r3, #16
 80085e2:	0f1b      	lsrs	r3, r3, #28
 80085e4:	f003 030f 	and.w	r3, r3, #15
 80085e8:	4a49      	ldr	r2, [pc, #292]	@ (8008710 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80085ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ee:	ee07 3a90 	vmov	s15, r3
 80085f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	ee07 3a90 	vmov	s15, r3
 80085fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800860e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008612:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800870c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800861a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800861e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008622:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800862a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800862e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008630:	4b34      	ldr	r3, [pc, #208]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d017      	beq.n	800866c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800863c:	4b31      	ldr	r3, [pc, #196]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800863e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008640:	0a5b      	lsrs	r3, r3, #9
 8008642:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800864e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008652:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008656:	edd7 6a07 	vldr	s13, [r7, #28]
 800865a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800865e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008662:	ee17 2a90 	vmov	r2, s15
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	e002      	b.n	8008672 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008672:	4b24      	ldr	r3, [pc, #144]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d017      	beq.n	80086ae <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800867e:	4b21      	ldr	r3, [pc, #132]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008682:	0c1b      	lsrs	r3, r3, #16
 8008684:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008688:	ee07 3a90 	vmov	s15, r3
 800868c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008690:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008694:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008698:	edd7 6a07 	vldr	s13, [r7, #28]
 800869c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a4:	ee17 2a90 	vmov	r2, s15
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	605a      	str	r2, [r3, #4]
 80086ac:	e002      	b.n	80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80086b4:	4b13      	ldr	r3, [pc, #76]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d017      	beq.n	80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80086c0:	4b10      	ldr	r3, [pc, #64]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086c4:	0e1b      	lsrs	r3, r3, #24
 80086c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ca:	ee07 3a90 	vmov	s15, r3
 80086ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80086d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086d6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80086da:	edd7 6a07 	vldr	s13, [r7, #28]
 80086de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086e6:	ee17 2a90 	vmov	r2, s15
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086ee:	e002      	b.n	80086f6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	609a      	str	r2, [r3, #8]
}
 80086f6:	bf00      	nop
 80086f8:	3724      	adds	r7, #36	@ 0x24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	46020c00 	.word	0x46020c00
 8008708:	4b742400 	.word	0x4b742400
 800870c:	46000000 	.word	0x46000000
 8008710:	080109b8 	.word	0x080109b8
 8008714:	4af42400 	.word	0x4af42400

08008718 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08e      	sub	sp, #56	@ 0x38
 800871c:	af00      	add	r7, sp, #0
 800871e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008726:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800872a:	430b      	orrs	r3, r1
 800872c:	d145      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800872e:	4ba7      	ldr	r3, [pc, #668]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008734:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008738:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800873a:	4ba4      	ldr	r3, [pc, #656]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800873c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b02      	cmp	r3, #2
 8008746:	d108      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800874e:	d104      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008750:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008754:	637b      	str	r3, [r7, #52]	@ 0x34
 8008756:	f001 bb35 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800875a:	4b9c      	ldr	r3, [pc, #624]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800875c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008768:	d114      	bne.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800876a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008770:	d110      	bne.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008772:	4b96      	ldr	r3, [pc, #600]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800877c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008780:	d103      	bne.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8008782:	23fa      	movs	r3, #250	@ 0xfa
 8008784:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008786:	f001 bb1d 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 800878a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800878e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008790:	f001 bb18 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008794:	4b8d      	ldr	r3, [pc, #564]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800879c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087a0:	d107      	bne.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80087a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087a8:	d103      	bne.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80087aa:	4b89      	ldr	r3, [pc, #548]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80087ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ae:	f001 bb09 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80087b6:	f001 bb05 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80087ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087be:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80087c2:	430b      	orrs	r3, r1
 80087c4:	d151      	bne.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80087c6:	4b81      	ldr	r3, [pc, #516]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80087c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80087cc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80087d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	2b80      	cmp	r3, #128	@ 0x80
 80087d6:	d035      	beq.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80087d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087da:	2b80      	cmp	r3, #128	@ 0x80
 80087dc:	d841      	bhi.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80087de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e0:	2b60      	cmp	r3, #96	@ 0x60
 80087e2:	d02a      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80087e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e6:	2b60      	cmp	r3, #96	@ 0x60
 80087e8:	d83b      	bhi.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80087ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ec:	2b40      	cmp	r3, #64	@ 0x40
 80087ee:	d009      	beq.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80087f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f2:	2b40      	cmp	r3, #64	@ 0x40
 80087f4:	d835      	bhi.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80087f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00c      	beq.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80087fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fe:	2b20      	cmp	r3, #32
 8008800:	d012      	beq.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008802:	e02e      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008808:	4618      	mov	r0, r3
 800880a:	f7ff fb71 	bl	8007ef0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008810:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008812:	f001 bad7 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008816:	f107 0318 	add.w	r3, r7, #24
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff fcc4 	bl	80081a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008824:	f001 bace 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008828:	f107 030c 	add.w	r3, r7, #12
 800882c:	4618      	mov	r0, r3
 800882e:	f7ff fe17 	bl	8008460 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008836:	f001 bac5 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800883a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800883e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008840:	f001 bac0 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008844:	4b61      	ldr	r3, [pc, #388]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800884c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008850:	d103      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8008852:	4b60      	ldr	r3, [pc, #384]	@ (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008854:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008856:	f001 bab5 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800885e:	f001 bab1 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :
      {
        frequency = 0U;
 8008862:	2300      	movs	r3, #0
 8008864:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008866:	f001 baad 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800886a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800886e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008872:	430b      	orrs	r3, r1
 8008874:	d158      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008876:	4b55      	ldr	r3, [pc, #340]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008878:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800887c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008880:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008888:	d03b      	beq.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800888a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008890:	d846      	bhi.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008898:	d02e      	beq.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088a0:	d83e      	bhi.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088a8:	d00b      	beq.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088b0:	d836      	bhi.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00d      	beq.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088be:	d012      	beq.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80088c0:	e02e      	b.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff fb12 	bl	8007ef0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80088cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088d0:	f001 ba78 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088d4:	f107 0318 	add.w	r3, r7, #24
 80088d8:	4618      	mov	r0, r3
 80088da:	f7ff fc65 	bl	80081a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088e2:	f001 ba6f 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088e6:	f107 030c 	add.w	r3, r7, #12
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff fdb8 	bl	8008460 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088f4:	f001 ba66 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80088f8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80088fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088fe:	f001 ba61 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008902:	4b32      	ldr	r3, [pc, #200]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800890a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800890e:	d103      	bne.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008910:	4b30      	ldr	r3, [pc, #192]	@ (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008912:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008914:	f001 ba56 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800891c:	f001 ba52 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008924:	f001 ba4e 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800892c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008930:	430b      	orrs	r3, r1
 8008932:	d126      	bne.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8008934:	4b25      	ldr	r3, [pc, #148]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008936:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800893a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800893e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8008940:	4b22      	ldr	r3, [pc, #136]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800894c:	d106      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800894e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008950:	2b00      	cmp	r3, #0
 8008952:	d103      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8008954:	4b1f      	ldr	r3, [pc, #124]	@ (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008956:	637b      	str	r3, [r7, #52]	@ 0x34
 8008958:	f001 ba34 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800895c:	4b1b      	ldr	r3, [pc, #108]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008968:	d107      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800896a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008970:	d103      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8008972:	4b19      	ldr	r3, [pc, #100]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008974:	637b      	str	r3, [r7, #52]	@ 0x34
 8008976:	f001 ba25 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	637b      	str	r3, [r7, #52]	@ 0x34
 800897e:	f001 ba21 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8008982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008986:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800898a:	430b      	orrs	r3, r1
 800898c:	d16e      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800898e:	4b0f      	ldr	r3, [pc, #60]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008994:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008998:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800899a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80089a0:	d03d      	beq.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80089a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80089a8:	d85c      	bhi.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80089aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089b0:	d014      	beq.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80089b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089b8:	d854      	bhi.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d01f      	beq.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80089c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089c6:	d012      	beq.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80089c8:	e04c      	b.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80089ca:	bf00      	nop
 80089cc:	46020c00 	.word	0x46020c00
 80089d0:	0003d090 	.word	0x0003d090
 80089d4:	00f42400 	.word	0x00f42400
 80089d8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7ff fa85 	bl	8007ef0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80089e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089ea:	f001 b9eb 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089ee:	f107 0318 	add.w	r3, r7, #24
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff fbd8 	bl	80081a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089fc:	f001 b9e2 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008a00:	4ba7      	ldr	r3, [pc, #668]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a0c:	d103      	bne.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8008a0e:	4ba5      	ldr	r3, [pc, #660]	@ (8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a10:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a12:	f001 b9d7 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a1a:	f001 b9d3 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008a1e:	4ba0      	ldr	r3, [pc, #640]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0320 	and.w	r3, r3, #32
 8008a26:	2b20      	cmp	r3, #32
 8008a28:	d118      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a2a:	4b9d      	ldr	r3, [pc, #628]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d005      	beq.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008a36:	4b9a      	ldr	r3, [pc, #616]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	0e1b      	lsrs	r3, r3, #24
 8008a3c:	f003 030f 	and.w	r3, r3, #15
 8008a40:	e006      	b.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008a42:	4b97      	ldr	r3, [pc, #604]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a48:	041b      	lsls	r3, r3, #16
 8008a4a:	0e1b      	lsrs	r3, r3, #24
 8008a4c:	f003 030f 	and.w	r3, r3, #15
 8008a50:	4a95      	ldr	r2, [pc, #596]	@ (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a56:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a58:	f001 b9b4 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a60:	f001 b9b0 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a68:	f001 b9ac 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a70:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8008a74:	430b      	orrs	r3, r1
 8008a76:	d17f      	bne.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008a78:	4b89      	ldr	r3, [pc, #548]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a82:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d165      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008a8a:	4b85      	ldr	r3, [pc, #532]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a90:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008a94:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8008a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a98:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008a9c:	d034      	beq.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008aa4:	d853      	bhi.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008aac:	d00b      	beq.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8008aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ab4:	d84b      	bhi.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d016      	beq.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8008abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ac2:	d009      	beq.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008ac4:	e043      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7ff fa10 	bl	8007ef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008ad4:	f001 b976 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ad8:	f107 0318 	add.w	r3, r7, #24
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff fb63 	bl	80081a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008ae6:	f001 b96d 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008aea:	4b6d      	ldr	r3, [pc, #436]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008af6:	d103      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8008af8:	4b6a      	ldr	r3, [pc, #424]	@ (8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008afa:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008afc:	f001 b962 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008b04:	f001 b95e 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008b08:	4b65      	ldr	r3, [pc, #404]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0320 	and.w	r3, r3, #32
 8008b10:	2b20      	cmp	r3, #32
 8008b12:	d118      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008b14:	4b62      	ldr	r3, [pc, #392]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d005      	beq.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8008b20:	4b5f      	ldr	r3, [pc, #380]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	0e1b      	lsrs	r3, r3, #24
 8008b26:	f003 030f 	and.w	r3, r3, #15
 8008b2a:	e006      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008b2c:	4b5c      	ldr	r3, [pc, #368]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008b2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b32:	041b      	lsls	r3, r3, #16
 8008b34:	0e1b      	lsrs	r3, r3, #24
 8008b36:	f003 030f 	and.w	r3, r3, #15
 8008b3a:	4a5b      	ldr	r2, [pc, #364]	@ (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b40:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008b42:	f001 b93f 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008b4a:	f001 b93b 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        default :
        {
          frequency = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008b52:	f001 b937 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8008b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b5c:	d108      	bne.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7ff f9c4 	bl	8007ef0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b6c:	f001 b92a 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else
    {
      frequency = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b74:	f001 b926 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b7c:	1e51      	subs	r1, r2, #1
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	d136      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008b82:	4b47      	ldr	r3, [pc, #284]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b88:	f003 0303 	and.w	r3, r3, #3
 8008b8c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d104      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008b94:	f7fe fa42 	bl	800701c <HAL_RCC_GetPCLK2Freq>
 8008b98:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b9a:	f001 b913 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d104      	bne.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008ba4:	f7fe f906 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8008ba8:	6378      	str	r0, [r7, #52]	@ 0x34
 8008baa:	f001 b90b 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008bae:	4b3c      	ldr	r3, [pc, #240]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bba:	d106      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d103      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8008bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bc6:	f001 b8fd 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008bca:	4b35      	ldr	r3, [pc, #212]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d107      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bda:	2b03      	cmp	r3, #3
 8008bdc:	d104      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8008bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008be4:	f001 b8ee 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bec:	f001 b8ea 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8008bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bf4:	1e91      	subs	r1, r2, #2
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	d136      	bne.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008bfa:	4b29      	ldr	r3, [pc, #164]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c00:	f003 030c 	and.w	r3, r3, #12
 8008c04:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d104      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008c0c:	f7fe f9f2 	bl	8006ff4 <HAL_RCC_GetPCLK1Freq>
 8008c10:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c12:	f001 b8d7 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c18:	2b04      	cmp	r3, #4
 8008c1a:	d104      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008c1c:	f7fe f8ca 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8008c20:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c22:	f001 b8cf 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008c26:	4b1e      	ldr	r3, [pc, #120]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c32:	d106      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c36:	2b08      	cmp	r3, #8
 8008c38:	d103      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8008c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c3e:	f001 b8c1 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008c42:	4b17      	ldr	r3, [pc, #92]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c48:	f003 0302 	and.w	r3, r3, #2
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d107      	bne.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c52:	2b0c      	cmp	r3, #12
 8008c54:	d104      	bne.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8008c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c5c:	f001 b8b2 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008c60:	2300      	movs	r3, #0
 8008c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c64:	f001 b8ae 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c6c:	1f11      	subs	r1, r2, #4
 8008c6e:	430b      	orrs	r3, r1
 8008c70:	d13f      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008c72:	4b0b      	ldr	r3, [pc, #44]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008c7c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d104      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008c84:	f7fe f9b6 	bl	8006ff4 <HAL_RCC_GetPCLK1Freq>
 8008c88:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c8a:	f001 b89b 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c90:	2b10      	cmp	r3, #16
 8008c92:	d10d      	bne.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008c94:	f7fe f88e 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8008c98:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c9a:	f001 b893 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8008c9e:	bf00      	nop
 8008ca0:	46020c00 	.word	0x46020c00
 8008ca4:	02dc6c00 	.word	0x02dc6c00
 8008ca8:	080109b8 	.word	0x080109b8
 8008cac:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008cb0:	4ba8      	ldr	r3, [pc, #672]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cbc:	d106      	bne.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc0:	2b20      	cmp	r3, #32
 8008cc2:	d103      	bne.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8008cc4:	4ba4      	ldr	r3, [pc, #656]	@ (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cc8:	f001 b87c 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008ccc:	4ba1      	ldr	r3, [pc, #644]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008cce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cd2:	f003 0302 	and.w	r3, r3, #2
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d107      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cdc:	2b30      	cmp	r3, #48	@ 0x30
 8008cde:	d104      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8008ce0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ce6:	f001 b86d 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cee:	f001 b869 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cf6:	f1a2 0108 	sub.w	r1, r2, #8
 8008cfa:	430b      	orrs	r3, r1
 8008cfc:	d136      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008cfe:	4b95      	ldr	r3, [pc, #596]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d04:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008d08:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d104      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008d10:	f7fe f970 	bl	8006ff4 <HAL_RCC_GetPCLK1Freq>
 8008d14:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d16:	f001 b855 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1c:	2b40      	cmp	r3, #64	@ 0x40
 8008d1e:	d104      	bne.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008d20:	f7fe f848 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8008d24:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d26:	f001 b84d 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008d2a:	4b8a      	ldr	r3, [pc, #552]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d36:	d106      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8008d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3a:	2b80      	cmp	r3, #128	@ 0x80
 8008d3c:	d103      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8008d3e:	4b86      	ldr	r3, [pc, #536]	@ (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d42:	f001 b83f 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008d46:	4b83      	ldr	r3, [pc, #524]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d4c:	f003 0302 	and.w	r3, r3, #2
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d107      	bne.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d56:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d58:	d104      	bne.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8008d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d60:	f001 b830 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d68:	f001 b82c 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8008d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d70:	f1a2 0110 	sub.w	r1, r2, #16
 8008d74:	430b      	orrs	r3, r1
 8008d76:	d139      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008d78:	4b76      	ldr	r3, [pc, #472]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d82:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d104      	bne.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008d8a:	f7fe f933 	bl	8006ff4 <HAL_RCC_GetPCLK1Freq>
 8008d8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d90:	f001 b818 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d9a:	d104      	bne.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008d9c:	f7fe f80a 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8008da0:	6378      	str	r0, [r7, #52]	@ 0x34
 8008da2:	f001 b80f 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008da6:	4b6b      	ldr	r3, [pc, #428]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008db2:	d107      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8008db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dba:	d103      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8008dbc:	4b66      	ldr	r3, [pc, #408]	@ (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dc0:	f001 b800 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008dc4:	4b63      	ldr	r3, [pc, #396]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dca:	f003 0302 	and.w	r3, r3, #2
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d108      	bne.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dd8:	d104      	bne.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8008dda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de0:	f000 bff0 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de8:	f000 bfec 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8008dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008df0:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8008df4:	430b      	orrs	r3, r1
 8008df6:	d139      	bne.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008df8:	4b56      	ldr	r3, [pc, #344]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008dfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008dfe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008e02:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d104      	bne.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008e0a:	f7fe f8f3 	bl	8006ff4 <HAL_RCC_GetPCLK1Freq>
 8008e0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e10:	f000 bfd8 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8008e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e1a:	d104      	bne.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008e1c:	f7fd ffca 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8008e20:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e22:	f000 bfcf 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008e26:	4b4b      	ldr	r3, [pc, #300]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e32:	d107      	bne.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8008e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e3a:	d103      	bne.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8008e3c:	4b46      	ldr	r3, [pc, #280]	@ (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e40:	f000 bfc0 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008e44:	4b43      	ldr	r3, [pc, #268]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008e46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e4a:	f003 0302 	and.w	r3, r3, #2
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d108      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8008e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e58:	d104      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8008e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e60:	f000 bfb0 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e68:	f000 bfac 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e70:	f1a2 0120 	sub.w	r1, r2, #32
 8008e74:	430b      	orrs	r3, r1
 8008e76:	d158      	bne.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008e78:	4b36      	ldr	r3, [pc, #216]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e7e:	f003 0307 	and.w	r3, r3, #7
 8008e82:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d104      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8008e8a:	f7fe f8db 	bl	8007044 <HAL_RCC_GetPCLK3Freq>
 8008e8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e90:	f000 bf98 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d104      	bne.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008e9a:	f7fd ff8b 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8008e9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ea0:	f000 bf90 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008eb0:	d106      	bne.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d103      	bne.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8008eb8:	4b27      	ldr	r3, [pc, #156]	@ (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ebc:	f000 bf82 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008ec0:	4b24      	ldr	r3, [pc, #144]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008ec2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ec6:	f003 0302 	and.w	r3, r3, #2
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d107      	bne.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8008ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d104      	bne.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8008ed4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eda:	f000 bf73 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008ede:	4b1d      	ldr	r3, [pc, #116]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 0320 	and.w	r3, r3, #32
 8008ee6:	2b20      	cmp	r3, #32
 8008ee8:	d11b      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8008eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eec:	2b04      	cmp	r3, #4
 8008eee:	d118      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008ef0:	4b18      	ldr	r3, [pc, #96]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d005      	beq.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8008efc:	4b15      	ldr	r3, [pc, #84]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	0e1b      	lsrs	r3, r3, #24
 8008f02:	f003 030f 	and.w	r3, r3, #15
 8008f06:	e006      	b.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8008f08:	4b12      	ldr	r3, [pc, #72]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008f0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008f0e:	041b      	lsls	r3, r3, #16
 8008f10:	0e1b      	lsrs	r3, r3, #24
 8008f12:	f003 030f 	and.w	r3, r3, #15
 8008f16:	4a11      	ldr	r2, [pc, #68]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f1e:	f000 bf51 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f26:	f000 bf4d 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f2e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008f32:	430b      	orrs	r3, r1
 8008f34:	d172      	bne.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008f36:	4b07      	ldr	r3, [pc, #28]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f3c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008f40:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f48:	d10a      	bne.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f4a:	f7fd ff33 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8008f4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f50:	f000 bf38 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8008f54:	46020c00 	.word	0x46020c00
 8008f58:	00f42400 	.word	0x00f42400
 8008f5c:	080109b8 	.word	0x080109b8
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f66:	d108      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f68:	f107 0318 	add.w	r3, r7, #24
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7ff f91b 	bl	80081a8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8008f72:	6a3b      	ldr	r3, [r7, #32]
 8008f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f76:	f000 bf25 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d104      	bne.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8008f80:	f7fe f81e 	bl	8006fc0 <HAL_RCC_GetHCLKFreq>
 8008f84:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f86:	f000 bf1d 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008f90:	d122      	bne.n	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008f92:	4bb0      	ldr	r3, [pc, #704]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 0320 	and.w	r3, r3, #32
 8008f9a:	2b20      	cmp	r3, #32
 8008f9c:	d118      	bne.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008f9e:	4bad      	ldr	r3, [pc, #692]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d005      	beq.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8008faa:	4baa      	ldr	r3, [pc, #680]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	0e1b      	lsrs	r3, r3, #24
 8008fb0:	f003 030f 	and.w	r3, r3, #15
 8008fb4:	e006      	b.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8008fb6:	4ba7      	ldr	r3, [pc, #668]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008fbc:	041b      	lsls	r3, r3, #16
 8008fbe:	0e1b      	lsrs	r3, r3, #24
 8008fc0:	f003 030f 	and.w	r3, r3, #15
 8008fc4:	4aa4      	ldr	r2, [pc, #656]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fcc:	f000 befa 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fd4:	f000 bef6 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008fd8:	4b9e      	ldr	r3, [pc, #632]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fe0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fe4:	d107      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fec:	d103      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8008fee:	4b9b      	ldr	r3, [pc, #620]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8008ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff2:	f000 bee7 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008ff6:	4b97      	ldr	r3, [pc, #604]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009002:	d107      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8009004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009006:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800900a:	d103      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800900c:	4b94      	ldr	r3, [pc, #592]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 800900e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009010:	f000 bed8 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8009014:	2300      	movs	r3, #0
 8009016:	637b      	str	r3, [r7, #52]	@ 0x34
 8009018:	f000 bed4 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800901c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009020:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009024:	430b      	orrs	r3, r1
 8009026:	d158      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8009028:	4b8a      	ldr	r3, [pc, #552]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800902a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800902e:	f003 0307 	and.w	r3, r3, #7
 8009032:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009036:	2b04      	cmp	r3, #4
 8009038:	d84b      	bhi.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800903a:	a201      	add	r2, pc, #4	@ (adr r2, 8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800903c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009040:	08009079 	.word	0x08009079
 8009044:	08009055 	.word	0x08009055
 8009048:	08009067 	.word	0x08009067
 800904c:	08009083 	.word	0x08009083
 8009050:	0800908d 	.word	0x0800908d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe ff49 	bl	8007ef0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800905e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009060:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009062:	f000 beaf 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009066:	f107 030c 	add.w	r3, r7, #12
 800906a:	4618      	mov	r0, r3
 800906c:	f7ff f9f8 	bl	8008460 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009074:	f000 bea6 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009078:	f7fd ffa2 	bl	8006fc0 <HAL_RCC_GetHCLKFreq>
 800907c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800907e:	f000 bea1 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009082:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009086:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009088:	f000 be9c 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800908c:	4b71      	ldr	r3, [pc, #452]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0320 	and.w	r3, r3, #32
 8009094:	2b20      	cmp	r3, #32
 8009096:	d118      	bne.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009098:	4b6e      	ldr	r3, [pc, #440]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80090a4:	4b6b      	ldr	r3, [pc, #428]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	0e1b      	lsrs	r3, r3, #24
 80090aa:	f003 030f 	and.w	r3, r3, #15
 80090ae:	e006      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80090b0:	4b68      	ldr	r3, [pc, #416]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80090b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80090b6:	041b      	lsls	r3, r3, #16
 80090b8:	0e1b      	lsrs	r3, r3, #24
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	4a66      	ldr	r2, [pc, #408]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80090c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80090c6:	f000 be7d 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80090ca:	2300      	movs	r3, #0
 80090cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090ce:	f000 be79 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 80090d2:	2300      	movs	r3, #0
 80090d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090d6:	f000 be75 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80090da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090de:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80090e2:	430b      	orrs	r3, r1
 80090e4:	d167      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80090e6:	4b5b      	ldr	r3, [pc, #364]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80090e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090ec:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80090f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80090f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090f8:	d036      	beq.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80090fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009100:	d855      	bhi.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8009102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009104:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009108:	d029      	beq.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800910a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009110:	d84d      	bhi.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009118:	d013      	beq.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800911a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009120:	d845      	bhi.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8009122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009124:	2b00      	cmp	r3, #0
 8009126:	d015      	beq.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8009128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800912e:	d13e      	bne.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009130:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009134:	4618      	mov	r0, r3
 8009136:	f7fe fedb 	bl	8007ef0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800913a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800913e:	f000 be41 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009142:	f107 030c 	add.w	r3, r7, #12
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff f98a 	bl	8008460 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009150:	f000 be38 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009154:	f7fd ff34 	bl	8006fc0 <HAL_RCC_GetHCLKFreq>
 8009158:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800915a:	f000 be33 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800915e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009162:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009164:	f000 be2e 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009168:	4b3a      	ldr	r3, [pc, #232]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 0320 	and.w	r3, r3, #32
 8009170:	2b20      	cmp	r3, #32
 8009172:	d118      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009174:	4b37      	ldr	r3, [pc, #220]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d005      	beq.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8009180:	4b34      	ldr	r3, [pc, #208]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	0e1b      	lsrs	r3, r3, #24
 8009186:	f003 030f 	and.w	r3, r3, #15
 800918a:	e006      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800918c:	4b31      	ldr	r3, [pc, #196]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800918e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009192:	041b      	lsls	r3, r3, #16
 8009194:	0e1b      	lsrs	r3, r3, #24
 8009196:	f003 030f 	and.w	r3, r3, #15
 800919a:	4a2f      	ldr	r2, [pc, #188]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800919c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091a0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80091a2:	f000 be0f 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80091a6:	2300      	movs	r3, #0
 80091a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091aa:	f000 be0b 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091b2:	f000 be07 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80091b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ba:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80091be:	430b      	orrs	r3, r1
 80091c0:	d154      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80091c2:	4b24      	ldr	r3, [pc, #144]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80091c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80091cc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80091ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d104      	bne.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80091d4:	f7fd ff0e 	bl	8006ff4 <HAL_RCC_GetPCLK1Freq>
 80091d8:	6378      	str	r0, [r7, #52]	@ 0x34
 80091da:	f000 bdf3 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80091de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091e4:	d104      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80091e6:	f7fd fde5 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 80091ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80091ec:	f000 bdea 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80091f0:	4b18      	ldr	r3, [pc, #96]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091fc:	d107      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 80091fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009204:	d103      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8009206:	4b16      	ldr	r3, [pc, #88]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 8009208:	637b      	str	r3, [r7, #52]	@ 0x34
 800920a:	f000 bddb 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800920e:	4b11      	ldr	r3, [pc, #68]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 0320 	and.w	r3, r3, #32
 8009216:	2b20      	cmp	r3, #32
 8009218:	d124      	bne.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800921a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009220:	d120      	bne.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009222:	4b0c      	ldr	r3, [pc, #48]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d005      	beq.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800922e:	4b09      	ldr	r3, [pc, #36]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	0e1b      	lsrs	r3, r3, #24
 8009234:	f003 030f 	and.w	r3, r3, #15
 8009238:	e006      	b.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800923a:	4b06      	ldr	r3, [pc, #24]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800923c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009240:	041b      	lsls	r3, r3, #16
 8009242:	0e1b      	lsrs	r3, r3, #24
 8009244:	f003 030f 	and.w	r3, r3, #15
 8009248:	4a03      	ldr	r2, [pc, #12]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800924a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800924e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009250:	f000 bdb8 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8009254:	46020c00 	.word	0x46020c00
 8009258:	080109b8 	.word	0x080109b8
 800925c:	007a1200 	.word	0x007a1200
 8009260:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	637b      	str	r3, [r7, #52]	@ 0x34
 8009268:	f000 bdac 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800926c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009270:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8009274:	430b      	orrs	r3, r1
 8009276:	d14c      	bne.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009278:	4ba8      	ldr	r3, [pc, #672]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800927a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800927e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009282:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009286:	2b00      	cmp	r3, #0
 8009288:	d104      	bne.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800928a:	f7fd feb3 	bl	8006ff4 <HAL_RCC_GetPCLK1Freq>
 800928e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009290:	f000 bd98 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8009294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800929a:	d104      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800929c:	f7fd fd8a 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 80092a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80092a2:	f000 bd8f 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80092a6:	4b9d      	ldr	r3, [pc, #628]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092b2:	d107      	bne.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 80092b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ba:	d103      	bne.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
    {
      frequency = HSI_VALUE;
 80092bc:	4b98      	ldr	r3, [pc, #608]	@ (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80092be:	637b      	str	r3, [r7, #52]	@ 0x34
 80092c0:	f000 bd80 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80092c4:	4b95      	ldr	r3, [pc, #596]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b20      	cmp	r3, #32
 80092ce:	d11c      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 80092d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092d6:	d118      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80092d8:	4b90      	ldr	r3, [pc, #576]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d005      	beq.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 80092e4:	4b8d      	ldr	r3, [pc, #564]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	0e1b      	lsrs	r3, r3, #24
 80092ea:	f003 030f 	and.w	r3, r3, #15
 80092ee:	e006      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80092f0:	4b8a      	ldr	r3, [pc, #552]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80092f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092f6:	041b      	lsls	r3, r3, #16
 80092f8:	0e1b      	lsrs	r3, r3, #24
 80092fa:	f003 030f 	and.w	r3, r3, #15
 80092fe:	4a89      	ldr	r2, [pc, #548]	@ (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8009300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009304:	637b      	str	r3, [r7, #52]	@ 0x34
 8009306:	f000 bd5d 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800930a:	2300      	movs	r3, #0
 800930c:	637b      	str	r3, [r7, #52]	@ 0x34
 800930e:	f000 bd59 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009316:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800931a:	430b      	orrs	r3, r1
 800931c:	d158      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800931e:	4b7f      	ldr	r3, [pc, #508]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009324:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009328:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800932a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932c:	2bc0      	cmp	r3, #192	@ 0xc0
 800932e:	d028      	beq.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
 8009330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009332:	2bc0      	cmp	r3, #192	@ 0xc0
 8009334:	d848      	bhi.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8009336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009338:	2b80      	cmp	r3, #128	@ 0x80
 800933a:	d00e      	beq.n	800935a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 800933c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933e:	2b80      	cmp	r3, #128	@ 0x80
 8009340:	d842      	bhi.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8009342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8009348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934a:	2b40      	cmp	r3, #64	@ 0x40
 800934c:	d014      	beq.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
 800934e:	e03b      	b.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009350:	f7fd fe78 	bl	8007044 <HAL_RCC_GetPCLK3Freq>
 8009354:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009356:	f000 bd35 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800935a:	4b70      	ldr	r3, [pc, #448]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009366:	d103      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
        {
          frequency = HSI_VALUE;
 8009368:	4b6d      	ldr	r3, [pc, #436]	@ (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800936a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800936c:	f000 bd2a 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009370:	2300      	movs	r3, #0
 8009372:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009374:	f000 bd26 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009378:	f7fd fd1c 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 800937c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800937e:	f000 bd21 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009382:	4b66      	ldr	r3, [pc, #408]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b20      	cmp	r3, #32
 800938c:	d118      	bne.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800938e:	4b63      	ldr	r3, [pc, #396]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d005      	beq.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 800939a:	4b60      	ldr	r3, [pc, #384]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	0e1b      	lsrs	r3, r3, #24
 80093a0:	f003 030f 	and.w	r3, r3, #15
 80093a4:	e006      	b.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc9c>
 80093a6:	4b5d      	ldr	r3, [pc, #372]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80093a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80093ac:	041b      	lsls	r3, r3, #16
 80093ae:	0e1b      	lsrs	r3, r3, #24
 80093b0:	f003 030f 	and.w	r3, r3, #15
 80093b4:	4a5b      	ldr	r2, [pc, #364]	@ (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 80093b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80093bc:	f000 bd02 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093c4:	f000 bcfe 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      default:
      {
        frequency = 0U;
 80093c8:	2300      	movs	r3, #0
 80093ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093cc:	f000 bcfa 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80093d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093d4:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80093d8:	430b      	orrs	r3, r1
 80093da:	d14c      	bne.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80093dc:	4b4f      	ldr	r3, [pc, #316]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80093de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80093e6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80093e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d104      	bne.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80093ee:	f7fd fe01 	bl	8006ff4 <HAL_RCC_GetPCLK1Freq>
 80093f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80093f4:	f000 bce6 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80093f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093fe:	d104      	bne.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009400:	f7fd fcd8 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8009404:	6378      	str	r0, [r7, #52]	@ 0x34
 8009406:	f000 bcdd 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800940a:	4b44      	ldr	r3, [pc, #272]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009416:	d107      	bne.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 8009418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800941e:	d103      	bne.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
    {
      frequency = HSI_VALUE;
 8009420:	4b3f      	ldr	r3, [pc, #252]	@ (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8009422:	637b      	str	r3, [r7, #52]	@ 0x34
 8009424:	f000 bcce 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009428:	4b3c      	ldr	r3, [pc, #240]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0320 	and.w	r3, r3, #32
 8009430:	2b20      	cmp	r3, #32
 8009432:	d11c      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 8009434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009436:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800943a:	d118      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800943c:	4b37      	ldr	r3, [pc, #220]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
 8009448:	4b34      	ldr	r3, [pc, #208]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	0e1b      	lsrs	r3, r3, #24
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	e006      	b.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
 8009454:	4b31      	ldr	r3, [pc, #196]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009456:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800945a:	041b      	lsls	r3, r3, #16
 800945c:	0e1b      	lsrs	r3, r3, #24
 800945e:	f003 030f 	and.w	r3, r3, #15
 8009462:	4a30      	ldr	r2, [pc, #192]	@ (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8009464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009468:	637b      	str	r3, [r7, #52]	@ 0x34
 800946a:	f000 bcab 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	637b      	str	r3, [r7, #52]	@ 0x34
 8009472:	f000 bca7 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8009476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800947a:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800947e:	430b      	orrs	r3, r1
 8009480:	d152      	bne.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8009482:	4b26      	ldr	r3, [pc, #152]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009484:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009488:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800948c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800948e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009490:	2b00      	cmp	r3, #0
 8009492:	d104      	bne.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0xd86>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009494:	f7fd fdae 	bl	8006ff4 <HAL_RCC_GetPCLK1Freq>
 8009498:	6378      	str	r0, [r7, #52]	@ 0x34
 800949a:	f000 bc93 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094a4:	d104      	bne.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80094a6:	f7fd fc85 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 80094aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80094ac:	f000 bc8a 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 80094b0:	4b1a      	ldr	r3, [pc, #104]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094bc:	d107      	bne.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 80094be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094c4:	d103      	bne.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
    {
      frequency = HSI_VALUE;
 80094c6:	4b16      	ldr	r3, [pc, #88]	@ (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80094c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ca:	f000 bc7b 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 80094ce:	4b13      	ldr	r3, [pc, #76]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0320 	and.w	r3, r3, #32
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	d11c      	bne.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80094da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80094e0:	d118      	bne.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80094e2:	4b0e      	ldr	r3, [pc, #56]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d005      	beq.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 80094ee:	4b0b      	ldr	r3, [pc, #44]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	0e1b      	lsrs	r3, r3, #24
 80094f4:	f003 030f 	and.w	r3, r3, #15
 80094f8:	e006      	b.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
 80094fa:	4b08      	ldr	r3, [pc, #32]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80094fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009500:	041b      	lsls	r3, r3, #16
 8009502:	0e1b      	lsrs	r3, r3, #24
 8009504:	f003 030f 	and.w	r3, r3, #15
 8009508:	4a06      	ldr	r2, [pc, #24]	@ (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 800950a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800950e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009510:	f000 bc58 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	637b      	str	r3, [r7, #52]	@ 0x34
 8009518:	f000 bc54 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 800951c:	46020c00 	.word	0x46020c00
 8009520:	00f42400 	.word	0x00f42400
 8009524:	080109b8 	.word	0x080109b8
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8009528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800952c:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8009530:	430b      	orrs	r3, r1
 8009532:	d14a      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8009534:	4ba5      	ldr	r3, [pc, #660]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009536:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800953a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800953e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8009540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009542:	2b00      	cmp	r3, #0
 8009544:	d104      	bne.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009546:	f7fd fd55 	bl	8006ff4 <HAL_RCC_GetPCLK1Freq>
 800954a:	6378      	str	r0, [r7, #52]	@ 0x34
 800954c:	f000 bc3a 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8009550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009552:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009556:	d104      	bne.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009558:	f7fd fc2c 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 800955c:	6378      	str	r0, [r7, #52]	@ 0x34
 800955e:	f000 bc31 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8009562:	4b9a      	ldr	r3, [pc, #616]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800956a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800956e:	d107      	bne.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
 8009570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009572:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009576:	d103      	bne.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
    {
      frequency = HSI_VALUE;
 8009578:	4b95      	ldr	r3, [pc, #596]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800957a:	637b      	str	r3, [r7, #52]	@ 0x34
 800957c:	f000 bc22 	b.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8009580:	4b92      	ldr	r3, [pc, #584]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 0320 	and.w	r3, r3, #32
 8009588:	2b20      	cmp	r3, #32
 800958a:	d11b      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 800958c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009592:	d117      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009594:	4b8d      	ldr	r3, [pc, #564]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800959c:	2b00      	cmp	r3, #0
 800959e:	d005      	beq.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 80095a0:	4b8a      	ldr	r3, [pc, #552]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	0e1b      	lsrs	r3, r3, #24
 80095a6:	f003 030f 	and.w	r3, r3, #15
 80095aa:	e006      	b.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 80095ac:	4b87      	ldr	r3, [pc, #540]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80095ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80095b2:	041b      	lsls	r3, r3, #16
 80095b4:	0e1b      	lsrs	r3, r3, #24
 80095b6:	f003 030f 	and.w	r3, r3, #15
 80095ba:	4a86      	ldr	r2, [pc, #536]	@ (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 80095bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095c2:	e3ff      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 80095c4:	2300      	movs	r3, #0
 80095c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80095c8:	e3fc      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80095ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ce:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80095d2:	430b      	orrs	r3, r1
 80095d4:	d164      	bne.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80095d6:	4b7d      	ldr	r3, [pc, #500]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80095d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80095dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095e0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80095e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d120      	bne.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80095e8:	4b78      	ldr	r3, [pc, #480]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 0320 	and.w	r3, r3, #32
 80095f0:	2b20      	cmp	r3, #32
 80095f2:	d117      	bne.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80095f4:	4b75      	ldr	r3, [pc, #468]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d005      	beq.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8009600:	4b72      	ldr	r3, [pc, #456]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	0e1b      	lsrs	r3, r3, #24
 8009606:	f003 030f 	and.w	r3, r3, #15
 800960a:	e006      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800960c:	4b6f      	ldr	r3, [pc, #444]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800960e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009612:	041b      	lsls	r3, r3, #16
 8009614:	0e1b      	lsrs	r3, r3, #24
 8009616:	f003 030f 	and.w	r3, r3, #15
 800961a:	4a6e      	ldr	r2, [pc, #440]	@ (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800961c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009620:	637b      	str	r3, [r7, #52]	@ 0x34
 8009622:	e3cf      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	637b      	str	r3, [r7, #52]	@ 0x34
 8009628:	e3cc      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800962a:	4b68      	ldr	r3, [pc, #416]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800962c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009634:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009638:	d112      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800963a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009640:	d10e      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009642:	4b62      	ldr	r3, [pc, #392]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800964c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009650:	d102      	bne.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 8009652:	23fa      	movs	r3, #250	@ 0xfa
 8009654:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009656:	e3b5      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8009658:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800965c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800965e:	e3b1      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009660:	4b5a      	ldr	r3, [pc, #360]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800966c:	d106      	bne.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009674:	d102      	bne.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 8009676:	4b56      	ldr	r3, [pc, #344]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8009678:	637b      	str	r3, [r7, #52]	@ 0x34
 800967a:	e3a3      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800967c:	4b53      	ldr	r3, [pc, #332]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800967e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009682:	f003 0302 	and.w	r3, r3, #2
 8009686:	2b02      	cmp	r3, #2
 8009688:	d107      	bne.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800968a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009690:	d103      	bne.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 8009692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009696:	637b      	str	r3, [r7, #52]	@ 0x34
 8009698:	e394      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800969a:	2300      	movs	r3, #0
 800969c:	637b      	str	r3, [r7, #52]	@ 0x34
 800969e:	e391      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80096a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096a4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80096a8:	430b      	orrs	r3, r1
 80096aa:	d164      	bne.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80096ac:	4b47      	ldr	r3, [pc, #284]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80096ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096b2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80096b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80096b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d120      	bne.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80096be:	4b43      	ldr	r3, [pc, #268]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0320 	and.w	r3, r3, #32
 80096c6:	2b20      	cmp	r3, #32
 80096c8:	d117      	bne.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80096ca:	4b40      	ldr	r3, [pc, #256]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d005      	beq.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 80096d6:	4b3d      	ldr	r3, [pc, #244]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	0e1b      	lsrs	r3, r3, #24
 80096dc:	f003 030f 	and.w	r3, r3, #15
 80096e0:	e006      	b.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80096e2:	4b3a      	ldr	r3, [pc, #232]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80096e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096e8:	041b      	lsls	r3, r3, #16
 80096ea:	0e1b      	lsrs	r3, r3, #24
 80096ec:	f003 030f 	and.w	r3, r3, #15
 80096f0:	4a38      	ldr	r2, [pc, #224]	@ (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 80096f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80096f8:	e364      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 80096fa:	2300      	movs	r3, #0
 80096fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80096fe:	e361      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009700:	4b32      	ldr	r3, [pc, #200]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009706:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800970a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800970e:	d112      	bne.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8009710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009716:	d10e      	bne.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009718:	4b2c      	ldr	r3, [pc, #176]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800971a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800971e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009722:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009726:	d102      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 8009728:	23fa      	movs	r3, #250	@ 0xfa
 800972a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800972c:	e34a      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 800972e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009732:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009734:	e346      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009736:	4b25      	ldr	r3, [pc, #148]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800973e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009742:	d106      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 8009744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009746:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800974a:	d102      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800974c:	4b20      	ldr	r3, [pc, #128]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800974e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009750:	e338      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009752:	4b1e      	ldr	r3, [pc, #120]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009758:	f003 0302 	and.w	r3, r3, #2
 800975c:	2b02      	cmp	r3, #2
 800975e:	d107      	bne.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 8009760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009762:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009766:	d103      	bne.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 8009768:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800976c:	637b      	str	r3, [r7, #52]	@ 0x34
 800976e:	e329      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	637b      	str	r3, [r7, #52]	@ 0x34
 8009774:	e326      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800977a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800977e:	430b      	orrs	r3, r1
 8009780:	d14e      	bne.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009782:	4b12      	ldr	r3, [pc, #72]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009788:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800978c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800978e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009790:	2b00      	cmp	r3, #0
 8009792:	d103      	bne.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009794:	f7fd fc2e 	bl	8006ff4 <HAL_RCC_GetPCLK1Freq>
 8009798:	6378      	str	r0, [r7, #52]	@ 0x34
 800979a:	e313      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800979c:	4b0b      	ldr	r3, [pc, #44]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800979e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097aa:	d119      	bne.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097b2:	d115      	bne.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097b4:	4b05      	ldr	r3, [pc, #20]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80097b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097c2:	d109      	bne.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 80097c4:	23fa      	movs	r3, #250	@ 0xfa
 80097c6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097c8:	e2fc      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80097ca:	bf00      	nop
 80097cc:	46020c00 	.word	0x46020c00
 80097d0:	00f42400 	.word	0x00f42400
 80097d4:	080109b8 	.word	0x080109b8
      }
      else
      {
        frequency = LSI_VALUE;
 80097d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80097dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097de:	e2f1      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80097e0:	4ba8      	ldr	r3, [pc, #672]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097ec:	d106      	bne.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 80097ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80097f4:	d102      	bne.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 80097f6:	4ba4      	ldr	r3, [pc, #656]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80097f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097fa:	e2e3      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80097fc:	4ba1      	ldr	r3, [pc, #644]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80097fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009802:	f003 0302 	and.w	r3, r3, #2
 8009806:	2b02      	cmp	r3, #2
 8009808:	d107      	bne.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800980a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009810:	d103      	bne.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 8009812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009816:	637b      	str	r3, [r7, #52]	@ 0x34
 8009818:	e2d4      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	637b      	str	r3, [r7, #52]	@ 0x34
 800981e:	e2d1      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009824:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009828:	430b      	orrs	r3, r1
 800982a:	d12d      	bne.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800982c:	4b95      	ldr	r3, [pc, #596]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800982e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009832:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009836:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009838:	4b92      	ldr	r3, [pc, #584]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009844:	d105      	bne.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8009846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009848:	2b00      	cmp	r3, #0
 800984a:	d102      	bne.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800984c:	4b8f      	ldr	r3, [pc, #572]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800984e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009850:	e2b8      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009858:	d107      	bne.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800985a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe fb46 	bl	8007ef0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009866:	637b      	str	r3, [r7, #52]	@ 0x34
 8009868:	e2ac      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800986a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009870:	d107      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009872:	f107 0318 	add.w	r3, r7, #24
 8009876:	4618      	mov	r0, r3
 8009878:	f7fe fc96 	bl	80081a8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009880:	e2a0      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009882:	2300      	movs	r3, #0
 8009884:	637b      	str	r3, [r7, #52]	@ 0x34
 8009886:	e29d      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800988c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009890:	430b      	orrs	r3, r1
 8009892:	d156      	bne.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009894:	4b7b      	ldr	r3, [pc, #492]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800989a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800989e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80098a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098a6:	d028      	beq.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80098a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098ae:	d845      	bhi.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80098b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098b6:	d013      	beq.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 80098b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098be:	d83d      	bhi.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80098c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d004      	beq.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098cc:	d004      	beq.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80098ce:	e035      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80098d0:	f7fd fba4 	bl	800701c <HAL_RCC_GetPCLK2Freq>
 80098d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80098d6:	e275      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80098d8:	f7fd fa6c 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 80098dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80098de:	e271      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098e0:	4b68      	ldr	r3, [pc, #416]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098ec:	d102      	bne.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 80098ee:	4b66      	ldr	r3, [pc, #408]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80098f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80098f2:	e267      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80098f4:	2300      	movs	r3, #0
 80098f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098f8:	e264      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80098fa:	4b62      	ldr	r3, [pc, #392]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 0320 	and.w	r3, r3, #32
 8009902:	2b20      	cmp	r3, #32
 8009904:	d117      	bne.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009906:	4b5f      	ldr	r3, [pc, #380]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800990e:	2b00      	cmp	r3, #0
 8009910:	d005      	beq.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 8009912:	4b5c      	ldr	r3, [pc, #368]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	0e1b      	lsrs	r3, r3, #24
 8009918:	f003 030f 	and.w	r3, r3, #15
 800991c:	e006      	b.n	800992c <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800991e:	4b59      	ldr	r3, [pc, #356]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009920:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009924:	041b      	lsls	r3, r3, #16
 8009926:	0e1b      	lsrs	r3, r3, #24
 8009928:	f003 030f 	and.w	r3, r3, #15
 800992c:	4a58      	ldr	r2, [pc, #352]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 800992e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009932:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009934:	e246      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800993a:	e243      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009940:	e240      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009942:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009946:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800994a:	430b      	orrs	r3, r1
 800994c:	d156      	bne.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800994e:	4b4d      	ldr	r3, [pc, #308]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009958:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800995a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009960:	d028      	beq.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 8009962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009964:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009968:	d845      	bhi.n	80099f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800996a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009970:	d013      	beq.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 8009972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009974:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009978:	d83d      	bhi.n	80099f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800997a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997c:	2b00      	cmp	r3, #0
 800997e:	d004      	beq.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 8009980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009986:	d004      	beq.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 8009988:	e035      	b.n	80099f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800998a:	f7fd fb33 	bl	8006ff4 <HAL_RCC_GetPCLK1Freq>
 800998e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009990:	e218      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009992:	f7fd fa0f 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8009996:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009998:	e214      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800999a:	4b3a      	ldr	r3, [pc, #232]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099a6:	d102      	bne.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 80099a8:	4b37      	ldr	r3, [pc, #220]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80099aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80099ac:	e20a      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80099ae:	2300      	movs	r3, #0
 80099b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099b2:	e207      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80099b4:	4b33      	ldr	r3, [pc, #204]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 0320 	and.w	r3, r3, #32
 80099bc:	2b20      	cmp	r3, #32
 80099be:	d117      	bne.n	80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80099c0:	4b30      	ldr	r3, [pc, #192]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d005      	beq.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 80099cc:	4b2d      	ldr	r3, [pc, #180]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	0e1b      	lsrs	r3, r3, #24
 80099d2:	f003 030f 	and.w	r3, r3, #15
 80099d6:	e006      	b.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80099d8:	4b2a      	ldr	r3, [pc, #168]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80099da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099de:	041b      	lsls	r3, r3, #16
 80099e0:	0e1b      	lsrs	r3, r3, #24
 80099e2:	f003 030f 	and.w	r3, r3, #15
 80099e6:	4a2a      	ldr	r2, [pc, #168]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 80099e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80099ee:	e1e9      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80099f0:	2300      	movs	r3, #0
 80099f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099f4:	e1e6      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 80099f6:	2300      	movs	r3, #0
 80099f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099fa:	e1e3      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80099fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a00:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009a04:	430b      	orrs	r3, r1
 8009a06:	d17e      	bne.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009a08:	4b1e      	ldr	r3, [pc, #120]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009a0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a0e:	f003 0318 	and.w	r3, r3, #24
 8009a12:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a16:	2b18      	cmp	r3, #24
 8009a18:	d872      	bhi.n	8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 8009a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 8009a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a20:	08009a95 	.word	0x08009a95
 8009a24:	08009b01 	.word	0x08009b01
 8009a28:	08009b01 	.word	0x08009b01
 8009a2c:	08009b01 	.word	0x08009b01
 8009a30:	08009b01 	.word	0x08009b01
 8009a34:	08009b01 	.word	0x08009b01
 8009a38:	08009b01 	.word	0x08009b01
 8009a3c:	08009b01 	.word	0x08009b01
 8009a40:	08009a9d 	.word	0x08009a9d
 8009a44:	08009b01 	.word	0x08009b01
 8009a48:	08009b01 	.word	0x08009b01
 8009a4c:	08009b01 	.word	0x08009b01
 8009a50:	08009b01 	.word	0x08009b01
 8009a54:	08009b01 	.word	0x08009b01
 8009a58:	08009b01 	.word	0x08009b01
 8009a5c:	08009b01 	.word	0x08009b01
 8009a60:	08009aa5 	.word	0x08009aa5
 8009a64:	08009b01 	.word	0x08009b01
 8009a68:	08009b01 	.word	0x08009b01
 8009a6c:	08009b01 	.word	0x08009b01
 8009a70:	08009b01 	.word	0x08009b01
 8009a74:	08009b01 	.word	0x08009b01
 8009a78:	08009b01 	.word	0x08009b01
 8009a7c:	08009b01 	.word	0x08009b01
 8009a80:	08009abf 	.word	0x08009abf
 8009a84:	46020c00 	.word	0x46020c00
 8009a88:	00f42400 	.word	0x00f42400
 8009a8c:	007a1200 	.word	0x007a1200
 8009a90:	080109b8 	.word	0x080109b8
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009a94:	f7fd fad6 	bl	8007044 <HAL_RCC_GetPCLK3Freq>
 8009a98:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009a9a:	e193      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009a9c:	f7fd f98a 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8009aa0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009aa2:	e18f      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009aa4:	4b9f      	ldr	r3, [pc, #636]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ab0:	d102      	bne.n	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 8009ab2:	4b9d      	ldr	r3, [pc, #628]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8009ab4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ab6:	e185      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009abc:	e182      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009abe:	4b99      	ldr	r3, [pc, #612]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 0320 	and.w	r3, r3, #32
 8009ac6:	2b20      	cmp	r3, #32
 8009ac8:	d117      	bne.n	8009afa <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009aca:	4b96      	ldr	r3, [pc, #600]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d005      	beq.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 8009ad6:	4b93      	ldr	r3, [pc, #588]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	0e1b      	lsrs	r3, r3, #24
 8009adc:	f003 030f 	and.w	r3, r3, #15
 8009ae0:	e006      	b.n	8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8009ae2:	4b90      	ldr	r3, [pc, #576]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009ae8:	041b      	lsls	r3, r3, #16
 8009aea:	0e1b      	lsrs	r3, r3, #24
 8009aec:	f003 030f 	and.w	r3, r3, #15
 8009af0:	4a8e      	ldr	r2, [pc, #568]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8009af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009af6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009af8:	e164      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009afa:	2300      	movs	r3, #0
 8009afc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009afe:	e161      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b04:	e15e      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b0a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8009b0e:	430b      	orrs	r3, r1
 8009b10:	d155      	bne.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009b12:	4b84      	ldr	r3, [pc, #528]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009b14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b18:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009b1c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b24:	d013      	beq.n	8009b4e <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 8009b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b2c:	d844      	bhi.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b34:	d013      	beq.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 8009b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b3c:	d83c      	bhi.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d014      	beq.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8009b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b4a:	d014      	beq.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 8009b4c:	e034      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b4e:	f107 0318 	add.w	r3, r7, #24
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fe fb28 	bl	80081a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b5c:	e132      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fe f9c4 	bl	8007ef0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b6c:	e12a      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009b6e:	f7fd f921 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8009b72:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b74:	e126      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009b76:	4b6b      	ldr	r3, [pc, #428]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0320 	and.w	r3, r3, #32
 8009b7e:	2b20      	cmp	r3, #32
 8009b80:	d117      	bne.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b82:	4b68      	ldr	r3, [pc, #416]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d005      	beq.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 8009b8e:	4b65      	ldr	r3, [pc, #404]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	0e1b      	lsrs	r3, r3, #24
 8009b94:	f003 030f 	and.w	r3, r3, #15
 8009b98:	e006      	b.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 8009b9a:	4b62      	ldr	r3, [pc, #392]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009ba0:	041b      	lsls	r3, r3, #16
 8009ba2:	0e1b      	lsrs	r3, r3, #24
 8009ba4:	f003 030f 	and.w	r3, r3, #15
 8009ba8:	4a60      	ldr	r2, [pc, #384]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8009baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009bb0:	e108      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bb6:	e105      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bbc:	e102      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8009bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bc2:	1e59      	subs	r1, r3, #1
 8009bc4:	ea52 0301 	orrs.w	r3, r2, r1
 8009bc8:	d13c      	bne.n	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8009bca:	4b56      	ldr	r3, [pc, #344]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009bcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009bd0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009bd4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009bdc:	d027      	beq.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8009bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009be4:	d82b      	bhi.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8009be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009bec:	d017      	beq.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 8009bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009bf4:	d823      	bhi.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d004      	beq.n	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c02:	d004      	beq.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 8009c04:	e01b      	b.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009c06:	f7fd f8d5 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8009c0a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009c0c:	e0da      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fe f96c 	bl	8007ef0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c1c:	e0d2      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c1e:	f107 0318 	add.w	r3, r7, #24
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fe fac0 	bl	80081a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c2c:	e0ca      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c2e:	f107 030c 	add.w	r3, r7, #12
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fc14 	bl	8008460 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c3c:	e0c2      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c42:	e0bf      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c48:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009c4c:	430b      	orrs	r3, r1
 8009c4e:	d131      	bne.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009c50:	4b34      	ldr	r3, [pc, #208]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009c52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c5a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009c5c:	4b31      	ldr	r3, [pc, #196]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c62:	f003 0302 	and.w	r3, r3, #2
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d106      	bne.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d103      	bne.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 8009c70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c76:	e0a5      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009c78:	4b2a      	ldr	r3, [pc, #168]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c86:	d112      	bne.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 8009c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c8e:	d10e      	bne.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c90:	4b24      	ldr	r3, [pc, #144]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c9e:	d102      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 8009ca0:	23fa      	movs	r3, #250	@ 0xfa
 8009ca2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009ca4:	e08e      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8009ca6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009caa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009cac:	e08a      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb2:	e087      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8009cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cb8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009cbc:	430b      	orrs	r3, r1
 8009cbe:	d13b      	bne.n	8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009cc0:	4b18      	ldr	r3, [pc, #96]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009cc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009cc6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009cca:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009ccc:	4b15      	ldr	r3, [pc, #84]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cd8:	d105      	bne.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
 8009cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d102      	bne.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
    {
      frequency = HSI48_VALUE;
 8009ce0:	4b13      	ldr	r3, [pc, #76]	@ (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 8009ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ce4:	e06e      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8009ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cf2:	d106      	bne.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
 8009cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cfa:	d102      	bne.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
    {
      frequency = HSI48_VALUE >> 1U ;
 8009cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>)
 8009cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d00:	e060      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8009d02:	4b08      	ldr	r3, [pc, #32]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d0e:	d106      	bne.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 8009d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d16:	d102      	bne.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
    {
      frequency = HSI_VALUE;
 8009d18:	4b03      	ldr	r3, [pc, #12]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8009d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d1c:	e052      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d22:	e04f      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8009d24:	46020c00 	.word	0x46020c00
 8009d28:	00f42400 	.word	0x00f42400
 8009d2c:	080109b8 	.word	0x080109b8
 8009d30:	02dc6c00 	.word	0x02dc6c00
 8009d34:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8009d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d3c:	f1a3 0108 	sub.w	r1, r3, #8
 8009d40:	ea52 0301 	orrs.w	r3, r2, r1
 8009d44:	d13c      	bne.n	8009dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a8>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8009d46:	4b22      	ldr	r3, [pc, #136]	@ (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8009d48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d4c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009d50:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8009d52:	4b1f      	ldr	r3, [pc, #124]	@ (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d5e:	d105      	bne.n	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 8009d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d102      	bne.n	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
    {
      frequency = HSE_VALUE;
 8009d66:	4b1b      	ldr	r3, [pc, #108]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8009d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d6a:	e02b      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8009d6c:	4b18      	ldr	r3, [pc, #96]	@ (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d78:	d106      	bne.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d80:	d102      	bne.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
    {
      frequency = HSE_VALUE >> 1U ;
 8009d82:	4b15      	ldr	r3, [pc, #84]	@ (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 8009d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d86:	e01d      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8009d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d8e:	d107      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1688>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe f8ab 	bl	8007ef0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d9e:	e011      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8009da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009da6:	d108      	bne.n	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fe f89f 	bl	8007ef0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8009db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db4:	085b      	lsrs	r3, r3, #1
 8009db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009db8:	e004      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dbe:	e001      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8009dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3738      	adds	r7, #56	@ 0x38
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	46020c00 	.word	0x46020c00
 8009dd4:	007a1200 	.word	0x007a1200
 8009dd8:	003d0900 	.word	0x003d0900

08009ddc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009de4:	4b47      	ldr	r3, [pc, #284]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a46      	ldr	r2, [pc, #280]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009dea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009dee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009df0:	f7fb f960 	bl	80050b4 <HAL_GetTick>
 8009df4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009df6:	e008      	b.n	8009e0a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009df8:	f7fb f95c 	bl	80050b4 <HAL_GetTick>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d901      	bls.n	8009e0a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e077      	b.n	8009efa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1f0      	bne.n	8009df8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009e16:	4b3b      	ldr	r3, [pc, #236]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009e1e:	f023 0303 	bic.w	r3, r3, #3
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	6811      	ldr	r1, [r2, #0]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	6852      	ldr	r2, [r2, #4]
 8009e2a:	3a01      	subs	r2, #1
 8009e2c:	0212      	lsls	r2, r2, #8
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	4934      	ldr	r1, [pc, #208]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009e32:	4313      	orrs	r3, r2
 8009e34:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009e36:	4b33      	ldr	r3, [pc, #204]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009e38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e3a:	4b33      	ldr	r3, [pc, #204]	@ (8009f08 <RCCEx_PLL2_Config+0x12c>)
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	6892      	ldr	r2, [r2, #8]
 8009e42:	3a01      	subs	r2, #1
 8009e44:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	68d2      	ldr	r2, [r2, #12]
 8009e4c:	3a01      	subs	r2, #1
 8009e4e:	0252      	lsls	r2, r2, #9
 8009e50:	b292      	uxth	r2, r2
 8009e52:	4311      	orrs	r1, r2
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	6912      	ldr	r2, [r2, #16]
 8009e58:	3a01      	subs	r2, #1
 8009e5a:	0412      	lsls	r2, r2, #16
 8009e5c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009e60:	4311      	orrs	r1, r2
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	6952      	ldr	r2, [r2, #20]
 8009e66:	3a01      	subs	r2, #1
 8009e68:	0612      	lsls	r2, r2, #24
 8009e6a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009e6e:	430a      	orrs	r2, r1
 8009e70:	4924      	ldr	r1, [pc, #144]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009e76:	4b23      	ldr	r3, [pc, #140]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e7a:	f023 020c 	bic.w	r2, r3, #12
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	4920      	ldr	r1, [pc, #128]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009e84:	4313      	orrs	r3, r2
 8009e86:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009e88:	4b1e      	ldr	r3, [pc, #120]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a1b      	ldr	r3, [r3, #32]
 8009e90:	491c      	ldr	r1, [pc, #112]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009e92:	4313      	orrs	r3, r2
 8009e94:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009e96:	4b1b      	ldr	r3, [pc, #108]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009e9c:	f023 0310 	bic.w	r3, r3, #16
 8009ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009ea2:	4b18      	ldr	r3, [pc, #96]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009eaa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	69d2      	ldr	r2, [r2, #28]
 8009eb2:	00d2      	lsls	r2, r2, #3
 8009eb4:	4913      	ldr	r1, [pc, #76]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009eba:	4b12      	ldr	r3, [pc, #72]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ebe:	4a11      	ldr	r2, [pc, #68]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009ec0:	f043 0310 	orr.w	r3, r3, #16
 8009ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a0e      	ldr	r2, [pc, #56]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009ecc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009ed0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009ed2:	f7fb f8ef 	bl	80050b4 <HAL_GetTick>
 8009ed6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ed8:	e008      	b.n	8009eec <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009eda:	f7fb f8eb 	bl	80050b4 <HAL_GetTick>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d901      	bls.n	8009eec <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e006      	b.n	8009efa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009eec:	4b05      	ldr	r3, [pc, #20]	@ (8009f04 <RCCEx_PLL2_Config+0x128>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d0f0      	beq.n	8009eda <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0

}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	46020c00 	.word	0x46020c00
 8009f08:	80800000 	.word	0x80800000

08009f0c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009f14:	4b47      	ldr	r3, [pc, #284]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a46      	ldr	r2, [pc, #280]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f1e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009f20:	f7fb f8c8 	bl	80050b4 <HAL_GetTick>
 8009f24:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f26:	e008      	b.n	8009f3a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f28:	f7fb f8c4 	bl	80050b4 <HAL_GetTick>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d901      	bls.n	8009f3a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	e077      	b.n	800a02a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f3a:	4b3e      	ldr	r3, [pc, #248]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1f0      	bne.n	8009f28 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009f46:	4b3b      	ldr	r3, [pc, #236]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009f4e:	f023 0303 	bic.w	r3, r3, #3
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	6811      	ldr	r1, [r2, #0]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	6852      	ldr	r2, [r2, #4]
 8009f5a:	3a01      	subs	r2, #1
 8009f5c:	0212      	lsls	r2, r2, #8
 8009f5e:	430a      	orrs	r2, r1
 8009f60:	4934      	ldr	r1, [pc, #208]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	630b      	str	r3, [r1, #48]	@ 0x30
 8009f66:	4b33      	ldr	r3, [pc, #204]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f6a:	4b33      	ldr	r3, [pc, #204]	@ (800a038 <RCCEx_PLL3_Config+0x12c>)
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	6892      	ldr	r2, [r2, #8]
 8009f72:	3a01      	subs	r2, #1
 8009f74:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	68d2      	ldr	r2, [r2, #12]
 8009f7c:	3a01      	subs	r2, #1
 8009f7e:	0252      	lsls	r2, r2, #9
 8009f80:	b292      	uxth	r2, r2
 8009f82:	4311      	orrs	r1, r2
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	6912      	ldr	r2, [r2, #16]
 8009f88:	3a01      	subs	r2, #1
 8009f8a:	0412      	lsls	r2, r2, #16
 8009f8c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009f90:	4311      	orrs	r1, r2
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	6952      	ldr	r2, [r2, #20]
 8009f96:	3a01      	subs	r2, #1
 8009f98:	0612      	lsls	r2, r2, #24
 8009f9a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	4924      	ldr	r1, [pc, #144]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009fa6:	4b23      	ldr	r3, [pc, #140]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009faa:	f023 020c 	bic.w	r2, r3, #12
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	4920      	ldr	r1, [pc, #128]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009fb8:	4b1e      	ldr	r3, [pc, #120]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009fba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6a1b      	ldr	r3, [r3, #32]
 8009fc0:	491c      	ldr	r1, [pc, #112]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009fc6:	4b1b      	ldr	r3, [pc, #108]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fca:	4a1a      	ldr	r2, [pc, #104]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009fcc:	f023 0310 	bic.w	r3, r3, #16
 8009fd0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009fd2:	4b18      	ldr	r3, [pc, #96]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009fda:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	69d2      	ldr	r2, [r2, #28]
 8009fe2:	00d2      	lsls	r2, r2, #3
 8009fe4:	4913      	ldr	r1, [pc, #76]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009fea:	4b12      	ldr	r3, [pc, #72]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fee:	4a11      	ldr	r2, [pc, #68]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009ff0:	f043 0310 	orr.w	r3, r3, #16
 8009ff4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009ff6:	4b0f      	ldr	r3, [pc, #60]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a0e      	ldr	r2, [pc, #56]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 8009ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a000:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a002:	f7fb f857 	bl	80050b4 <HAL_GetTick>
 800a006:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a008:	e008      	b.n	800a01c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a00a:	f7fb f853 	bl	80050b4 <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	2b02      	cmp	r3, #2
 800a016:	d901      	bls.n	800a01c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a018:	2303      	movs	r3, #3
 800a01a:	e006      	b.n	800a02a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a01c:	4b05      	ldr	r3, [pc, #20]	@ (800a034 <RCCEx_PLL3_Config+0x128>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d0f0      	beq.n	800a00a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	46020c00 	.word	0x46020c00
 800a038:	80800000 	.word	0x80800000

0800a03c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e0fb      	b.n	800a246 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a7f      	ldr	r2, [pc, #508]	@ (800a250 <HAL_SPI_Init+0x214>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d004      	beq.n	800a062 <HAL_SPI_Init+0x26>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a7d      	ldr	r2, [pc, #500]	@ (800a254 <HAL_SPI_Init+0x218>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	e000      	b.n	800a064 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a062:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a78      	ldr	r2, [pc, #480]	@ (800a250 <HAL_SPI_Init+0x214>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d004      	beq.n	800a07e <HAL_SPI_Init+0x42>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a76      	ldr	r2, [pc, #472]	@ (800a254 <HAL_SPI_Init+0x218>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d105      	bne.n	800a08a <HAL_SPI_Init+0x4e>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	2b0f      	cmp	r3, #15
 800a084:	d901      	bls.n	800a08a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e0dd      	b.n	800a246 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fd7a 	bl	800ab84 <SPI_GetPacketSize>
 800a090:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a6e      	ldr	r2, [pc, #440]	@ (800a250 <HAL_SPI_Init+0x214>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d004      	beq.n	800a0a6 <HAL_SPI_Init+0x6a>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a6c      	ldr	r2, [pc, #432]	@ (800a254 <HAL_SPI_Init+0x218>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d102      	bne.n	800a0ac <HAL_SPI_Init+0x70>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b08      	cmp	r3, #8
 800a0aa:	d816      	bhi.n	800a0da <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a0b0:	4a69      	ldr	r2, [pc, #420]	@ (800a258 <HAL_SPI_Init+0x21c>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d00e      	beq.n	800a0d4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a68      	ldr	r2, [pc, #416]	@ (800a25c <HAL_SPI_Init+0x220>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d009      	beq.n	800a0d4 <HAL_SPI_Init+0x98>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a66      	ldr	r2, [pc, #408]	@ (800a260 <HAL_SPI_Init+0x224>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d004      	beq.n	800a0d4 <HAL_SPI_Init+0x98>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a65      	ldr	r2, [pc, #404]	@ (800a264 <HAL_SPI_Init+0x228>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d104      	bne.n	800a0de <HAL_SPI_Init+0xa2>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2b10      	cmp	r3, #16
 800a0d8:	d901      	bls.n	800a0de <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e0b3      	b.n	800a246 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d106      	bne.n	800a0f8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7fa f94c 	bl	8004390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f022 0201 	bic.w	r2, r2, #1
 800a10e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a11a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a124:	d119      	bne.n	800a15a <HAL_SPI_Init+0x11e>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a12e:	d103      	bne.n	800a138 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a134:	2b00      	cmp	r3, #0
 800a136:	d008      	beq.n	800a14a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10c      	bne.n	800a15a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a144:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a148:	d107      	bne.n	800a15a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a158:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00f      	beq.n	800a186 <HAL_SPI_Init+0x14a>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	2b06      	cmp	r3, #6
 800a16c:	d90b      	bls.n	800a186 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	430a      	orrs	r2, r1
 800a182:	601a      	str	r2, [r3, #0]
 800a184:	e007      	b.n	800a196 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a194:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	69da      	ldr	r2, [r3, #28]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a19e:	431a      	orrs	r2, r3
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1a8:	ea42 0103 	orr.w	r1, r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68da      	ldr	r2, [r3, #12]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1c0:	431a      	orrs	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1c6:	431a      	orrs	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	431a      	orrs	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	431a      	orrs	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	431a      	orrs	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	431a      	orrs	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	431a      	orrs	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1ea:	431a      	orrs	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1f6:	431a      	orrs	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1fc:	431a      	orrs	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a202:	ea42 0103 	orr.w	r1, r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	430a      	orrs	r2, r1
 800a210:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00a      	beq.n	800a234 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	430a      	orrs	r2, r1
 800a232:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	46002000 	.word	0x46002000
 800a254:	56002000 	.word	0x56002000
 800a258:	40013000 	.word	0x40013000
 800a25c:	50013000 	.word	0x50013000
 800a260:	40003800 	.word	0x40003800
 800a264:	50003800 	.word	0x50003800

0800a268 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b088      	sub	sp, #32
 800a26c:	af02      	add	r7, sp, #8
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	603b      	str	r3, [r7, #0]
 800a274:	4613      	mov	r3, r2
 800a276:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3320      	adds	r3, #32
 800a27e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a280:	f7fa ff18 	bl	80050b4 <HAL_GetTick>
 800a284:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d001      	beq.n	800a296 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a292:	2302      	movs	r3, #2
 800a294:	e1f3      	b.n	800a67e <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d002      	beq.n	800a2a2 <HAL_SPI_Transmit+0x3a>
 800a29c:	88fb      	ldrh	r3, [r7, #6]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e1eb      	b.n	800a67e <HAL_SPI_Transmit+0x416>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d101      	bne.n	800a2b4 <HAL_SPI_Transmit+0x4c>
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	e1e4      	b.n	800a67e <HAL_SPI_Transmit+0x416>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2203      	movs	r2, #3
 800a2c0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	88fa      	ldrh	r2, [r7, #6]
 800a2d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	88fa      	ldrh	r2, [r7, #6]
 800a2de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a30c:	d108      	bne.n	800a320 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	e009      	b.n	800a334 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a332:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	0c1b      	lsrs	r3, r3, #16
 800a33c:	041b      	lsls	r3, r3, #16
 800a33e:	88f9      	ldrh	r1, [r7, #6]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	6812      	ldr	r2, [r2, #0]
 800a344:	430b      	orrs	r3, r1
 800a346:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f042 0201 	orr.w	r2, r2, #1
 800a356:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10c      	bne.n	800a380 <HAL_SPI_Transmit+0x118>
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a36e:	d107      	bne.n	800a380 <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a37e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	2b0f      	cmp	r3, #15
 800a386:	d95b      	bls.n	800a440 <HAL_SPI_Transmit+0x1d8>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a8f      	ldr	r2, [pc, #572]	@ (800a5cc <HAL_SPI_Transmit+0x364>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d04f      	beq.n	800a432 <HAL_SPI_Transmit+0x1ca>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a8e      	ldr	r2, [pc, #568]	@ (800a5d0 <HAL_SPI_Transmit+0x368>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d04a      	beq.n	800a432 <HAL_SPI_Transmit+0x1ca>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a8c      	ldr	r2, [pc, #560]	@ (800a5d4 <HAL_SPI_Transmit+0x36c>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d045      	beq.n	800a432 <HAL_SPI_Transmit+0x1ca>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a8b      	ldr	r2, [pc, #556]	@ (800a5d8 <HAL_SPI_Transmit+0x370>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d147      	bne.n	800a440 <HAL_SPI_Transmit+0x1d8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a3b0:	e03f      	b.n	800a432 <HAL_SPI_Transmit+0x1ca>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	695b      	ldr	r3, [r3, #20]
 800a3b8:	f003 0302 	and.w	r3, r3, #2
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d114      	bne.n	800a3ea <HAL_SPI_Transmit+0x182>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6812      	ldr	r2, [r2, #0]
 800a3ca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3d0:	1d1a      	adds	r2, r3, #4
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a3e8:	e023      	b.n	800a432 <HAL_SPI_Transmit+0x1ca>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3ea:	f7fa fe63 	bl	80050b4 <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d803      	bhi.n	800a402 <HAL_SPI_Transmit+0x19a>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a400:	d102      	bne.n	800a408 <HAL_SPI_Transmit+0x1a0>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d114      	bne.n	800a432 <HAL_SPI_Transmit+0x1ca>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f000 faed 	bl	800a9e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a414:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e125      	b.n	800a67e <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a438:	b29b      	uxth	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1b9      	bne.n	800a3b2 <HAL_SPI_Transmit+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a43e:	e0f8      	b.n	800a632 <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	2b07      	cmp	r3, #7
 800a446:	f240 80ed 	bls.w	800a624 <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a44a:	e05d      	b.n	800a508 <HAL_SPI_Transmit+0x2a0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	f003 0302 	and.w	r3, r3, #2
 800a456:	2b02      	cmp	r3, #2
 800a458:	d132      	bne.n	800a4c0 <HAL_SPI_Transmit+0x258>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a460:	b29b      	uxth	r3, r3
 800a462:	2b01      	cmp	r3, #1
 800a464:	d918      	bls.n	800a498 <HAL_SPI_Transmit+0x230>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d014      	beq.n	800a498 <HAL_SPI_Transmit+0x230>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	6812      	ldr	r2, [r2, #0]
 800a478:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a47e:	1d1a      	adds	r2, r3, #4
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	3b02      	subs	r3, #2
 800a48e:	b29a      	uxth	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a496:	e037      	b.n	800a508 <HAL_SPI_Transmit+0x2a0>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a49c:	881a      	ldrh	r2, [r3, #0]
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4a6:	1c9a      	adds	r2, r3, #2
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a4be:	e023      	b.n	800a508 <HAL_SPI_Transmit+0x2a0>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4c0:	f7fa fdf8 	bl	80050b4 <HAL_GetTick>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d803      	bhi.n	800a4d8 <HAL_SPI_Transmit+0x270>
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d6:	d102      	bne.n	800a4de <HAL_SPI_Transmit+0x276>
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d114      	bne.n	800a508 <HAL_SPI_Transmit+0x2a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 fa82 	bl	800a9e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a504:	2303      	movs	r3, #3
 800a506:	e0ba      	b.n	800a67e <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a50e:	b29b      	uxth	r3, r3
 800a510:	2b00      	cmp	r3, #0
 800a512:	d19b      	bne.n	800a44c <HAL_SPI_Transmit+0x1e4>
 800a514:	e08d      	b.n	800a632 <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	695b      	ldr	r3, [r3, #20]
 800a51c:	f003 0302 	and.w	r3, r3, #2
 800a520:	2b02      	cmp	r3, #2
 800a522:	d15b      	bne.n	800a5dc <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	2b03      	cmp	r3, #3
 800a52e:	d918      	bls.n	800a562 <HAL_SPI_Transmit+0x2fa>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a534:	2b40      	cmp	r3, #64	@ 0x40
 800a536:	d914      	bls.n	800a562 <HAL_SPI_Transmit+0x2fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6812      	ldr	r2, [r2, #0]
 800a542:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a548:	1d1a      	adds	r2, r3, #4
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a554:	b29b      	uxth	r3, r3
 800a556:	3b04      	subs	r3, #4
 800a558:	b29a      	uxth	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a560:	e060      	b.n	800a624 <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a568:	b29b      	uxth	r3, r3
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d917      	bls.n	800a59e <HAL_SPI_Transmit+0x336>
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a572:	2b00      	cmp	r3, #0
 800a574:	d013      	beq.n	800a59e <HAL_SPI_Transmit+0x336>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a57a:	881a      	ldrh	r2, [r3, #0]
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a584:	1c9a      	adds	r2, r3, #2
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a590:	b29b      	uxth	r3, r3
 800a592:	3b02      	subs	r3, #2
 800a594:	b29a      	uxth	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a59c:	e042      	b.n	800a624 <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3320      	adds	r3, #32
 800a5a8:	7812      	ldrb	r2, [r2, #0]
 800a5aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5b0:	1c5a      	adds	r2, r3, #1
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a5c8:	e02c      	b.n	800a624 <HAL_SPI_Transmit+0x3bc>
 800a5ca:	bf00      	nop
 800a5cc:	40013000 	.word	0x40013000
 800a5d0:	50013000 	.word	0x50013000
 800a5d4:	40003800 	.word	0x40003800
 800a5d8:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5dc:	f7fa fd6a 	bl	80050b4 <HAL_GetTick>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	683a      	ldr	r2, [r7, #0]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d803      	bhi.n	800a5f4 <HAL_SPI_Transmit+0x38c>
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f2:	d102      	bne.n	800a5fa <HAL_SPI_Transmit+0x392>
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d114      	bne.n	800a624 <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f000 f9f4 	bl	800a9e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a606:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a620:	2303      	movs	r3, #3
 800a622:	e02c      	b.n	800a67e <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f47f af72 	bne.w	800a516 <HAL_SPI_Transmit+0x2ae>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	2200      	movs	r2, #0
 800a63a:	2108      	movs	r1, #8
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f000 fa73 	bl	800ab28 <SPI_WaitOnFlagUntilTimeout>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d007      	beq.n	800a658 <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a64e:	f043 0220 	orr.w	r2, r3, #32
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 f9c5 	bl	800a9e8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e000      	b.n	800a67e <HAL_SPI_Transmit+0x416>
  }
  else
  {
    return HAL_OK;
 800a67c:	2300      	movs	r3, #0
  }
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3718      	adds	r7, #24
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop

0800a688 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	603b      	str	r3, [r7, #0]
 800a694:	4613      	mov	r3, r2
 800a696:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	3330      	adds	r3, #48	@ 0x30
 800a69e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a6a0:	f7fa fd08 	bl	80050b4 <HAL_GetTick>
 800a6a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d001      	beq.n	800a6b6 <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 800a6b2:	2302      	movs	r3, #2
 800a6b4:	e17e      	b.n	800a9b4 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <HAL_SPI_Receive+0x3a>
 800a6bc:	88fb      	ldrh	r3, [r7, #6]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e176      	b.n	800a9b4 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d101      	bne.n	800a6d4 <HAL_SPI_Receive+0x4c>
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	e16f      	b.n	800a9b4 <HAL_SPI_Receive+0x32c>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2204      	movs	r2, #4
 800a6e0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	88fa      	ldrh	r2, [r7, #6]
 800a6f6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	88fa      	ldrh	r2, [r7, #6]
 800a6fe:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a72c:	d108      	bne.n	800a740 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	e009      	b.n	800a754 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a752:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	0c1b      	lsrs	r3, r3, #16
 800a75c:	041b      	lsls	r3, r3, #16
 800a75e:	88f9      	ldrh	r1, [r7, #6]
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	6812      	ldr	r2, [r2, #0]
 800a764:	430b      	orrs	r3, r1
 800a766:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f042 0201 	orr.w	r2, r2, #1
 800a776:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	69db      	ldr	r3, [r3, #28]
 800a77e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10c      	bne.n	800a7a0 <HAL_SPI_Receive+0x118>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a78e:	d107      	bne.n	800a7a0 <HAL_SPI_Receive+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a79e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	2b0f      	cmp	r3, #15
 800a7a6:	d95c      	bls.n	800a862 <HAL_SPI_Receive+0x1da>
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a83      	ldr	r2, [pc, #524]	@ (800a9bc <HAL_SPI_Receive+0x334>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d050      	beq.n	800a854 <HAL_SPI_Receive+0x1cc>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a82      	ldr	r2, [pc, #520]	@ (800a9c0 <HAL_SPI_Receive+0x338>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d04b      	beq.n	800a854 <HAL_SPI_Receive+0x1cc>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a80      	ldr	r2, [pc, #512]	@ (800a9c4 <HAL_SPI_Receive+0x33c>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d046      	beq.n	800a854 <HAL_SPI_Receive+0x1cc>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a7f      	ldr	r2, [pc, #508]	@ (800a9c8 <HAL_SPI_Receive+0x340>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d148      	bne.n	800a862 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a7d0:	e040      	b.n	800a854 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	695a      	ldr	r2, [r3, #20]
 800a7d8:	f248 0308 	movw	r3, #32776	@ 0x8008
 800a7dc:	4013      	ands	r3, r2
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d014      	beq.n	800a80c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a7ec:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7f2:	1d1a      	adds	r2, r3, #4
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	3b01      	subs	r3, #1
 800a802:	b29a      	uxth	r2, r3
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a80a:	e023      	b.n	800a854 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a80c:	f7fa fc52 	bl	80050b4 <HAL_GetTick>
 800a810:	4602      	mov	r2, r0
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d803      	bhi.n	800a824 <HAL_SPI_Receive+0x19c>
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a822:	d102      	bne.n	800a82a <HAL_SPI_Receive+0x1a2>
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d114      	bne.n	800a854 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f000 f8dc 	bl	800a9e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a836:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a850:	2303      	movs	r3, #3
 800a852:	e0af      	b.n	800a9b4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1b8      	bne.n	800a7d2 <HAL_SPI_Receive+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a860:	e095      	b.n	800a98e <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	2b07      	cmp	r3, #7
 800a868:	f240 808b 	bls.w	800a982 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a86c:	e03f      	b.n	800a8ee <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	f003 0301 	and.w	r3, r3, #1
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d114      	bne.n	800a8a6 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	8812      	ldrh	r2, [r2, #0]
 800a884:	b292      	uxth	r2, r2
 800a886:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a88c:	1c9a      	adds	r2, r3, #2
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a898:	b29b      	uxth	r3, r3
 800a89a:	3b01      	subs	r3, #1
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a8a4:	e023      	b.n	800a8ee <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8a6:	f7fa fc05 	bl	80050b4 <HAL_GetTick>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d803      	bhi.n	800a8be <HAL_SPI_Receive+0x236>
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8bc:	d102      	bne.n	800a8c4 <HAL_SPI_Receive+0x23c>
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d114      	bne.n	800a8ee <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f000 f88f 	bl	800a9e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e062      	b.n	800a9b4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1b9      	bne.n	800a86e <HAL_SPI_Receive+0x1e6>
 800a8fa:	e048      	b.n	800a98e <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	695b      	ldr	r3, [r3, #20]
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	2b01      	cmp	r3, #1
 800a908:	d117      	bne.n	800a93a <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a916:	7812      	ldrb	r2, [r2, #0]
 800a918:	b2d2      	uxtb	r2, r2
 800a91a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a920:	1c5a      	adds	r2, r3, #1
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	3b01      	subs	r3, #1
 800a930:	b29a      	uxth	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a938:	e023      	b.n	800a982 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a93a:	f7fa fbbb 	bl	80050b4 <HAL_GetTick>
 800a93e:	4602      	mov	r2, r0
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	683a      	ldr	r2, [r7, #0]
 800a946:	429a      	cmp	r2, r3
 800a948:	d803      	bhi.n	800a952 <HAL_SPI_Receive+0x2ca>
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a950:	d102      	bne.n	800a958 <HAL_SPI_Receive+0x2d0>
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d114      	bne.n	800a982 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f000 f845 	bl	800a9e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a964:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a97e:	2303      	movs	r3, #3
 800a980:	e018      	b.n	800a9b4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a988:	b29b      	uxth	r3, r3
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1b6      	bne.n	800a8fc <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f000 f82a 	bl	800a9e8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d001      	beq.n	800a9b2 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e000      	b.n	800a9b4 <HAL_SPI_Receive+0x32c>
  }
  else
  {
    return HAL_OK;
 800a9b2:	2300      	movs	r3, #0
  }
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3718      	adds	r7, #24
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	40013000 	.word	0x40013000
 800a9c0:	50013000 	.word	0x50013000
 800a9c4:	40003800 	.word	0x40003800
 800a9c8:	50003800 	.word	0x50003800

0800a9cc <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a9da:	b2db      	uxtb	r3, r3
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	699a      	ldr	r2, [r3, #24]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f042 0208 	orr.w	r2, r2, #8
 800aa06:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	699a      	ldr	r2, [r3, #24]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f042 0210 	orr.w	r2, r2, #16
 800aa16:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f022 0201 	bic.w	r2, r2, #1
 800aa26:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	6812      	ldr	r2, [r2, #0]
 800aa32:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800aa36:	f023 0303 	bic.w	r3, r3, #3
 800aa3a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	689a      	ldr	r2, [r3, #8]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800aa4a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	2b04      	cmp	r3, #4
 800aa56:	d014      	beq.n	800aa82 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f003 0320 	and.w	r3, r3, #32
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00f      	beq.n	800aa82 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	699a      	ldr	r2, [r3, #24]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f042 0220 	orr.w	r2, r2, #32
 800aa80:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	2b03      	cmp	r3, #3
 800aa8c:	d014      	beq.n	800aab8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00f      	beq.n	800aab8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa9e:	f043 0204 	orr.w	r2, r3, #4
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	699a      	ldr	r2, [r3, #24]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aab6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00f      	beq.n	800aae2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aac8:	f043 0201 	orr.w	r2, r3, #1
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	699a      	ldr	r2, [r3, #24]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aae0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00f      	beq.n	800ab0c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaf2:	f043 0208 	orr.w	r2, r3, #8
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	699a      	ldr	r2, [r3, #24]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab0a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800ab1c:	bf00      	nop
 800ab1e:	3714      	adds	r7, #20
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	603b      	str	r3, [r7, #0]
 800ab34:	4613      	mov	r3, r2
 800ab36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ab38:	e010      	b.n	800ab5c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab3a:	f7fa fabb 	bl	80050b4 <HAL_GetTick>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	1ad3      	subs	r3, r2, r3
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d803      	bhi.n	800ab52 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab50:	d102      	bne.n	800ab58 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d101      	bne.n	800ab5c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e00f      	b.n	800ab7c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	695a      	ldr	r2, [r3, #20]
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	4013      	ands	r3, r2
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	bf0c      	ite	eq
 800ab6c:	2301      	moveq	r3, #1
 800ab6e:	2300      	movne	r3, #0
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	461a      	mov	r2, r3
 800ab74:	79fb      	ldrb	r3, [r7, #7]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d0df      	beq.n	800ab3a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab90:	095b      	lsrs	r3, r3, #5
 800ab92:	3301      	adds	r3, #1
 800ab94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	3307      	adds	r3, #7
 800aba2:	08db      	lsrs	r3, r3, #3
 800aba4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	fb02 f303 	mul.w	r3, r2, r3
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3714      	adds	r7, #20
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800abba:	b480      	push	{r7}
 800abbc:	b083      	sub	sp, #12
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d12e      	bne.n	800ac2e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d101      	bne.n	800abde <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800abda:	2302      	movs	r3, #2
 800abdc:	e028      	b.n	800ac30 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2201      	movs	r2, #1
 800abe2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2202      	movs	r2, #2
 800abea:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 0201 	bic.w	r2, r2, #1
 800abfc:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800ac0a:	ea42 0103 	orr.w	r1, r2, r3
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	689a      	ldr	r2, [r3, #8]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	430a      	orrs	r2, r1
 800ac18:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	e000      	b.n	800ac30 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
  }
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d101      	bne.n	800ac4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e049      	b.n	800ace2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d106      	bne.n	800ac68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f7f9 fc62 	bl	800452c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	3304      	adds	r3, #4
 800ac78:	4619      	mov	r1, r3
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	f000 f938 	bl	800aef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
	...

0800acec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d101      	bne.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c>
 800ad04:	2302      	movs	r3, #2
 800ad06:	e0e6      	b.n	800aed6 <HAL_TIM_ConfigClockSource+0x1ea>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2202      	movs	r2, #2
 800ad14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ad26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ad2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68ba      	ldr	r2, [r7, #8]
 800ad3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a67      	ldr	r2, [pc, #412]	@ (800aee0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	f000 80b1 	beq.w	800aeaa <HAL_TIM_ConfigClockSource+0x1be>
 800ad48:	4a65      	ldr	r2, [pc, #404]	@ (800aee0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	f200 80b6 	bhi.w	800aebc <HAL_TIM_ConfigClockSource+0x1d0>
 800ad50:	4a64      	ldr	r2, [pc, #400]	@ (800aee4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	f000 80a9 	beq.w	800aeaa <HAL_TIM_ConfigClockSource+0x1be>
 800ad58:	4a62      	ldr	r2, [pc, #392]	@ (800aee4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	f200 80ae 	bhi.w	800aebc <HAL_TIM_ConfigClockSource+0x1d0>
 800ad60:	4a61      	ldr	r2, [pc, #388]	@ (800aee8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	f000 80a1 	beq.w	800aeaa <HAL_TIM_ConfigClockSource+0x1be>
 800ad68:	4a5f      	ldr	r2, [pc, #380]	@ (800aee8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	f200 80a6 	bhi.w	800aebc <HAL_TIM_ConfigClockSource+0x1d0>
 800ad70:	4a5e      	ldr	r2, [pc, #376]	@ (800aeec <HAL_TIM_ConfigClockSource+0x200>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	f000 8099 	beq.w	800aeaa <HAL_TIM_ConfigClockSource+0x1be>
 800ad78:	4a5c      	ldr	r2, [pc, #368]	@ (800aeec <HAL_TIM_ConfigClockSource+0x200>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	f200 809e 	bhi.w	800aebc <HAL_TIM_ConfigClockSource+0x1d0>
 800ad80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ad84:	f000 8091 	beq.w	800aeaa <HAL_TIM_ConfigClockSource+0x1be>
 800ad88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ad8c:	f200 8096 	bhi.w	800aebc <HAL_TIM_ConfigClockSource+0x1d0>
 800ad90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad94:	f000 8089 	beq.w	800aeaa <HAL_TIM_ConfigClockSource+0x1be>
 800ad98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad9c:	f200 808e 	bhi.w	800aebc <HAL_TIM_ConfigClockSource+0x1d0>
 800ada0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ada4:	d03e      	beq.n	800ae24 <HAL_TIM_ConfigClockSource+0x138>
 800ada6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adaa:	f200 8087 	bhi.w	800aebc <HAL_TIM_ConfigClockSource+0x1d0>
 800adae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adb2:	f000 8086 	beq.w	800aec2 <HAL_TIM_ConfigClockSource+0x1d6>
 800adb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adba:	d87f      	bhi.n	800aebc <HAL_TIM_ConfigClockSource+0x1d0>
 800adbc:	2b70      	cmp	r3, #112	@ 0x70
 800adbe:	d01a      	beq.n	800adf6 <HAL_TIM_ConfigClockSource+0x10a>
 800adc0:	2b70      	cmp	r3, #112	@ 0x70
 800adc2:	d87b      	bhi.n	800aebc <HAL_TIM_ConfigClockSource+0x1d0>
 800adc4:	2b60      	cmp	r3, #96	@ 0x60
 800adc6:	d050      	beq.n	800ae6a <HAL_TIM_ConfigClockSource+0x17e>
 800adc8:	2b60      	cmp	r3, #96	@ 0x60
 800adca:	d877      	bhi.n	800aebc <HAL_TIM_ConfigClockSource+0x1d0>
 800adcc:	2b50      	cmp	r3, #80	@ 0x50
 800adce:	d03c      	beq.n	800ae4a <HAL_TIM_ConfigClockSource+0x15e>
 800add0:	2b50      	cmp	r3, #80	@ 0x50
 800add2:	d873      	bhi.n	800aebc <HAL_TIM_ConfigClockSource+0x1d0>
 800add4:	2b40      	cmp	r3, #64	@ 0x40
 800add6:	d058      	beq.n	800ae8a <HAL_TIM_ConfigClockSource+0x19e>
 800add8:	2b40      	cmp	r3, #64	@ 0x40
 800adda:	d86f      	bhi.n	800aebc <HAL_TIM_ConfigClockSource+0x1d0>
 800addc:	2b30      	cmp	r3, #48	@ 0x30
 800adde:	d064      	beq.n	800aeaa <HAL_TIM_ConfigClockSource+0x1be>
 800ade0:	2b30      	cmp	r3, #48	@ 0x30
 800ade2:	d86b      	bhi.n	800aebc <HAL_TIM_ConfigClockSource+0x1d0>
 800ade4:	2b20      	cmp	r3, #32
 800ade6:	d060      	beq.n	800aeaa <HAL_TIM_ConfigClockSource+0x1be>
 800ade8:	2b20      	cmp	r3, #32
 800adea:	d867      	bhi.n	800aebc <HAL_TIM_ConfigClockSource+0x1d0>
 800adec:	2b00      	cmp	r3, #0
 800adee:	d05c      	beq.n	800aeaa <HAL_TIM_ConfigClockSource+0x1be>
 800adf0:	2b10      	cmp	r3, #16
 800adf2:	d05a      	beq.n	800aeaa <HAL_TIM_ConfigClockSource+0x1be>
 800adf4:	e062      	b.n	800aebc <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae06:	f000 f9f5 	bl	800b1f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ae18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68ba      	ldr	r2, [r7, #8]
 800ae20:	609a      	str	r2, [r3, #8]
      break;
 800ae22:	e04f      	b.n	800aec4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae34:	f000 f9de 	bl	800b1f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	689a      	ldr	r2, [r3, #8]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae46:	609a      	str	r2, [r3, #8]
      break;
 800ae48:	e03c      	b.n	800aec4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae56:	461a      	mov	r2, r3
 800ae58:	f000 f950 	bl	800b0fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2150      	movs	r1, #80	@ 0x50
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 f9a9 	bl	800b1ba <TIM_ITRx_SetConfig>
      break;
 800ae68:	e02c      	b.n	800aec4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae76:	461a      	mov	r2, r3
 800ae78:	f000 f96f 	bl	800b15a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2160      	movs	r1, #96	@ 0x60
 800ae82:	4618      	mov	r0, r3
 800ae84:	f000 f999 	bl	800b1ba <TIM_ITRx_SetConfig>
      break;
 800ae88:	e01c      	b.n	800aec4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae96:	461a      	mov	r2, r3
 800ae98:	f000 f930 	bl	800b0fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2140      	movs	r1, #64	@ 0x40
 800aea2:	4618      	mov	r0, r3
 800aea4:	f000 f989 	bl	800b1ba <TIM_ITRx_SetConfig>
      break;
 800aea8:	e00c      	b.n	800aec4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	f000 f980 	bl	800b1ba <TIM_ITRx_SetConfig>
      break;
 800aeba:	e003      	b.n	800aec4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	73fb      	strb	r3, [r7, #15]
      break;
 800aec0:	e000      	b.n	800aec4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800aec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	00100070 	.word	0x00100070
 800aee4:	00100040 	.word	0x00100040
 800aee8:	00100030 	.word	0x00100030
 800aeec:	00100020 	.word	0x00100020

0800aef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a6e      	ldr	r2, [pc, #440]	@ (800b0bc <TIM_Base_SetConfig+0x1cc>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d02b      	beq.n	800af60 <TIM_Base_SetConfig+0x70>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a6d      	ldr	r2, [pc, #436]	@ (800b0c0 <TIM_Base_SetConfig+0x1d0>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d027      	beq.n	800af60 <TIM_Base_SetConfig+0x70>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af16:	d023      	beq.n	800af60 <TIM_Base_SetConfig+0x70>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af1e:	d01f      	beq.n	800af60 <TIM_Base_SetConfig+0x70>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a68      	ldr	r2, [pc, #416]	@ (800b0c4 <TIM_Base_SetConfig+0x1d4>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d01b      	beq.n	800af60 <TIM_Base_SetConfig+0x70>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a67      	ldr	r2, [pc, #412]	@ (800b0c8 <TIM_Base_SetConfig+0x1d8>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d017      	beq.n	800af60 <TIM_Base_SetConfig+0x70>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a66      	ldr	r2, [pc, #408]	@ (800b0cc <TIM_Base_SetConfig+0x1dc>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d013      	beq.n	800af60 <TIM_Base_SetConfig+0x70>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a65      	ldr	r2, [pc, #404]	@ (800b0d0 <TIM_Base_SetConfig+0x1e0>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d00f      	beq.n	800af60 <TIM_Base_SetConfig+0x70>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a64      	ldr	r2, [pc, #400]	@ (800b0d4 <TIM_Base_SetConfig+0x1e4>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d00b      	beq.n	800af60 <TIM_Base_SetConfig+0x70>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a63      	ldr	r2, [pc, #396]	@ (800b0d8 <TIM_Base_SetConfig+0x1e8>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d007      	beq.n	800af60 <TIM_Base_SetConfig+0x70>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a62      	ldr	r2, [pc, #392]	@ (800b0dc <TIM_Base_SetConfig+0x1ec>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d003      	beq.n	800af60 <TIM_Base_SetConfig+0x70>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a61      	ldr	r2, [pc, #388]	@ (800b0e0 <TIM_Base_SetConfig+0x1f0>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d108      	bne.n	800af72 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	4313      	orrs	r3, r2
 800af70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a51      	ldr	r2, [pc, #324]	@ (800b0bc <TIM_Base_SetConfig+0x1cc>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d043      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a50      	ldr	r2, [pc, #320]	@ (800b0c0 <TIM_Base_SetConfig+0x1d0>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d03f      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af88:	d03b      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af90:	d037      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a4b      	ldr	r2, [pc, #300]	@ (800b0c4 <TIM_Base_SetConfig+0x1d4>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d033      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a4a      	ldr	r2, [pc, #296]	@ (800b0c8 <TIM_Base_SetConfig+0x1d8>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d02f      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4a49      	ldr	r2, [pc, #292]	@ (800b0cc <TIM_Base_SetConfig+0x1dc>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d02b      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a48      	ldr	r2, [pc, #288]	@ (800b0d0 <TIM_Base_SetConfig+0x1e0>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d027      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4a47      	ldr	r2, [pc, #284]	@ (800b0d4 <TIM_Base_SetConfig+0x1e4>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d023      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a46      	ldr	r2, [pc, #280]	@ (800b0d8 <TIM_Base_SetConfig+0x1e8>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d01f      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a45      	ldr	r2, [pc, #276]	@ (800b0dc <TIM_Base_SetConfig+0x1ec>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d01b      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a44      	ldr	r2, [pc, #272]	@ (800b0e0 <TIM_Base_SetConfig+0x1f0>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d017      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4a43      	ldr	r2, [pc, #268]	@ (800b0e4 <TIM_Base_SetConfig+0x1f4>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d013      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a42      	ldr	r2, [pc, #264]	@ (800b0e8 <TIM_Base_SetConfig+0x1f8>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d00f      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4a41      	ldr	r2, [pc, #260]	@ (800b0ec <TIM_Base_SetConfig+0x1fc>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d00b      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a40      	ldr	r2, [pc, #256]	@ (800b0f0 <TIM_Base_SetConfig+0x200>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d007      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a3f      	ldr	r2, [pc, #252]	@ (800b0f4 <TIM_Base_SetConfig+0x204>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d003      	beq.n	800b002 <TIM_Base_SetConfig+0x112>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a3e      	ldr	r2, [pc, #248]	@ (800b0f8 <TIM_Base_SetConfig+0x208>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d108      	bne.n	800b014 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	4313      	orrs	r3, r2
 800b012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	695b      	ldr	r3, [r3, #20]
 800b01e:	4313      	orrs	r3, r2
 800b020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	689a      	ldr	r2, [r3, #8]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a20      	ldr	r2, [pc, #128]	@ (800b0bc <TIM_Base_SetConfig+0x1cc>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d023      	beq.n	800b088 <TIM_Base_SetConfig+0x198>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a1f      	ldr	r2, [pc, #124]	@ (800b0c0 <TIM_Base_SetConfig+0x1d0>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d01f      	beq.n	800b088 <TIM_Base_SetConfig+0x198>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a24      	ldr	r2, [pc, #144]	@ (800b0dc <TIM_Base_SetConfig+0x1ec>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d01b      	beq.n	800b088 <TIM_Base_SetConfig+0x198>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a23      	ldr	r2, [pc, #140]	@ (800b0e0 <TIM_Base_SetConfig+0x1f0>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d017      	beq.n	800b088 <TIM_Base_SetConfig+0x198>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a22      	ldr	r2, [pc, #136]	@ (800b0e4 <TIM_Base_SetConfig+0x1f4>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d013      	beq.n	800b088 <TIM_Base_SetConfig+0x198>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a21      	ldr	r2, [pc, #132]	@ (800b0e8 <TIM_Base_SetConfig+0x1f8>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d00f      	beq.n	800b088 <TIM_Base_SetConfig+0x198>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a20      	ldr	r2, [pc, #128]	@ (800b0ec <TIM_Base_SetConfig+0x1fc>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d00b      	beq.n	800b088 <TIM_Base_SetConfig+0x198>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4a1f      	ldr	r2, [pc, #124]	@ (800b0f0 <TIM_Base_SetConfig+0x200>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d007      	beq.n	800b088 <TIM_Base_SetConfig+0x198>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a1e      	ldr	r2, [pc, #120]	@ (800b0f4 <TIM_Base_SetConfig+0x204>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d003      	beq.n	800b088 <TIM_Base_SetConfig+0x198>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a1d      	ldr	r2, [pc, #116]	@ (800b0f8 <TIM_Base_SetConfig+0x208>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d103      	bne.n	800b090 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	691a      	ldr	r2, [r3, #16]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	f003 0301 	and.w	r3, r3, #1
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d105      	bne.n	800b0ae <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	f023 0201 	bic.w	r2, r3, #1
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	611a      	str	r2, [r3, #16]
  }
}
 800b0ae:	bf00      	nop
 800b0b0:	3714      	adds	r7, #20
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	40012c00 	.word	0x40012c00
 800b0c0:	50012c00 	.word	0x50012c00
 800b0c4:	40000400 	.word	0x40000400
 800b0c8:	50000400 	.word	0x50000400
 800b0cc:	40000800 	.word	0x40000800
 800b0d0:	50000800 	.word	0x50000800
 800b0d4:	40000c00 	.word	0x40000c00
 800b0d8:	50000c00 	.word	0x50000c00
 800b0dc:	40013400 	.word	0x40013400
 800b0e0:	50013400 	.word	0x50013400
 800b0e4:	40014000 	.word	0x40014000
 800b0e8:	50014000 	.word	0x50014000
 800b0ec:	40014400 	.word	0x40014400
 800b0f0:	50014400 	.word	0x50014400
 800b0f4:	40014800 	.word	0x40014800
 800b0f8:	50014800 	.word	0x50014800

0800b0fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b087      	sub	sp, #28
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6a1b      	ldr	r3, [r3, #32]
 800b10c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	f023 0201 	bic.w	r2, r3, #1
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	699b      	ldr	r3, [r3, #24]
 800b11e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	011b      	lsls	r3, r3, #4
 800b12c:	693a      	ldr	r2, [r7, #16]
 800b12e:	4313      	orrs	r3, r2
 800b130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f023 030a 	bic.w	r3, r3, #10
 800b138:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	4313      	orrs	r3, r2
 800b140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	693a      	ldr	r2, [r7, #16]
 800b146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	697a      	ldr	r2, [r7, #20]
 800b14c:	621a      	str	r2, [r3, #32]
}
 800b14e:	bf00      	nop
 800b150:	371c      	adds	r7, #28
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b15a:	b480      	push	{r7}
 800b15c:	b087      	sub	sp, #28
 800b15e:	af00      	add	r7, sp, #0
 800b160:	60f8      	str	r0, [r7, #12]
 800b162:	60b9      	str	r1, [r7, #8]
 800b164:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6a1b      	ldr	r3, [r3, #32]
 800b170:	f023 0210 	bic.w	r2, r3, #16
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	699b      	ldr	r3, [r3, #24]
 800b17c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b184:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	031b      	lsls	r3, r3, #12
 800b18a:	693a      	ldr	r2, [r7, #16]
 800b18c:	4313      	orrs	r3, r2
 800b18e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b196:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	011b      	lsls	r3, r3, #4
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	693a      	ldr	r2, [r7, #16]
 800b1a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	621a      	str	r2, [r3, #32]
}
 800b1ae:	bf00      	nop
 800b1b0:	371c      	adds	r7, #28
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b085      	sub	sp, #20
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
 800b1c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b1d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1d6:	683a      	ldr	r2, [r7, #0]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	f043 0307 	orr.w	r3, r3, #7
 800b1e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	609a      	str	r2, [r3, #8]
}
 800b1e8:	bf00      	nop
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b087      	sub	sp, #28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
 800b200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b20e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	021a      	lsls	r2, r3, #8
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	431a      	orrs	r2, r3
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	4313      	orrs	r3, r2
 800b220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	697a      	ldr	r2, [r7, #20]
 800b226:	609a      	str	r2, [r3, #8]
}
 800b228:	bf00      	nop
 800b22a:	371c      	adds	r7, #28
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b244:	2b01      	cmp	r3, #1
 800b246:	d101      	bne.n	800b24c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b248:	2302      	movs	r3, #2
 800b24a:	e097      	b.n	800b37c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2202      	movs	r2, #2
 800b258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a45      	ldr	r2, [pc, #276]	@ (800b388 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d00e      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a44      	ldr	r2, [pc, #272]	@ (800b38c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d009      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a42      	ldr	r2, [pc, #264]	@ (800b390 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d004      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a41      	ldr	r2, [pc, #260]	@ (800b394 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d108      	bne.n	800b2a6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b29a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b2ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a2f      	ldr	r2, [pc, #188]	@ (800b388 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d040      	beq.n	800b350 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a2e      	ldr	r2, [pc, #184]	@ (800b38c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d03b      	beq.n	800b350 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2e0:	d036      	beq.n	800b350 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2ea:	d031      	beq.n	800b350 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a29      	ldr	r2, [pc, #164]	@ (800b398 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d02c      	beq.n	800b350 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a28      	ldr	r2, [pc, #160]	@ (800b39c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d027      	beq.n	800b350 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a26      	ldr	r2, [pc, #152]	@ (800b3a0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d022      	beq.n	800b350 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a25      	ldr	r2, [pc, #148]	@ (800b3a4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d01d      	beq.n	800b350 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a23      	ldr	r2, [pc, #140]	@ (800b3a8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d018      	beq.n	800b350 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a22      	ldr	r2, [pc, #136]	@ (800b3ac <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d013      	beq.n	800b350 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a18      	ldr	r2, [pc, #96]	@ (800b390 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d00e      	beq.n	800b350 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a17      	ldr	r2, [pc, #92]	@ (800b394 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d009      	beq.n	800b350 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a1b      	ldr	r2, [pc, #108]	@ (800b3b0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d004      	beq.n	800b350 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a1a      	ldr	r2, [pc, #104]	@ (800b3b4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d10c      	bne.n	800b36a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b356:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	4313      	orrs	r3, r2
 800b360:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2201      	movs	r2, #1
 800b36e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr
 800b388:	40012c00 	.word	0x40012c00
 800b38c:	50012c00 	.word	0x50012c00
 800b390:	40013400 	.word	0x40013400
 800b394:	50013400 	.word	0x50013400
 800b398:	40000400 	.word	0x40000400
 800b39c:	50000400 	.word	0x50000400
 800b3a0:	40000800 	.word	0x40000800
 800b3a4:	50000800 	.word	0x50000800
 800b3a8:	40000c00 	.word	0x40000c00
 800b3ac:	50000c00 	.word	0x50000c00
 800b3b0:	40014000 	.word	0x40014000
 800b3b4:	50014000 	.word	0x50014000

0800b3b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d101      	bne.n	800b3ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e042      	b.n	800b450 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d106      	bne.n	800b3e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 f83b 	bl	800b458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2224      	movs	r2, #36	@ 0x24
 800b3e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f022 0201 	bic.w	r2, r2, #1
 800b3f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d002      	beq.n	800b408 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fb36 	bl	800ba74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f985 	bl	800b718 <UART_SetConfig>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b01      	cmp	r3, #1
 800b412:	d101      	bne.n	800b418 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	e01b      	b.n	800b450 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	685a      	ldr	r2, [r3, #4]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b426:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	689a      	ldr	r2, [r3, #8]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b436:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f042 0201 	orr.w	r2, r2, #1
 800b446:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fbb5 	bl	800bbb8 <UART_CheckIdleState>
 800b44e:	4603      	mov	r3, r0
}
 800b450:	4618      	mov	r0, r3
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800b460:	bf00      	nop
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b08a      	sub	sp, #40	@ 0x28
 800b470:	af02      	add	r7, sp, #8
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	603b      	str	r3, [r7, #0]
 800b478:	4613      	mov	r3, r2
 800b47a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b482:	2b20      	cmp	r3, #32
 800b484:	d17b      	bne.n	800b57e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <HAL_UART_Transmit+0x26>
 800b48c:	88fb      	ldrh	r3, [r7, #6]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d101      	bne.n	800b496 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b492:	2301      	movs	r3, #1
 800b494:	e074      	b.n	800b580 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2200      	movs	r2, #0
 800b49a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2221      	movs	r2, #33	@ 0x21
 800b4a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b4a6:	f7f9 fe05 	bl	80050b4 <HAL_GetTick>
 800b4aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	88fa      	ldrh	r2, [r7, #6]
 800b4b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	88fa      	ldrh	r2, [r7, #6]
 800b4b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4c4:	d108      	bne.n	800b4d8 <HAL_UART_Transmit+0x6c>
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d104      	bne.n	800b4d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	61bb      	str	r3, [r7, #24]
 800b4d6:	e003      	b.n	800b4e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b4e0:	e030      	b.n	800b544 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	9300      	str	r3, [sp, #0]
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2180      	movs	r1, #128	@ 0x80
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f000 fc0d 	bl	800bd0c <UART_WaitOnFlagUntilTimeout>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d005      	beq.n	800b504 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2220      	movs	r2, #32
 800b4fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b500:	2303      	movs	r3, #3
 800b502:	e03d      	b.n	800b580 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10b      	bne.n	800b522 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b50a:	69bb      	ldr	r3, [r7, #24]
 800b50c:	881b      	ldrh	r3, [r3, #0]
 800b50e:	461a      	mov	r2, r3
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b518:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b51a:	69bb      	ldr	r3, [r7, #24]
 800b51c:	3302      	adds	r3, #2
 800b51e:	61bb      	str	r3, [r7, #24]
 800b520:	e007      	b.n	800b532 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	781a      	ldrb	r2, [r3, #0]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	3301      	adds	r3, #1
 800b530:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b538:	b29b      	uxth	r3, r3
 800b53a:	3b01      	subs	r3, #1
 800b53c:	b29a      	uxth	r2, r3
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1c8      	bne.n	800b4e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	2200      	movs	r2, #0
 800b558:	2140      	movs	r1, #64	@ 0x40
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f000 fbd6 	bl	800bd0c <UART_WaitOnFlagUntilTimeout>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d005      	beq.n	800b572 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2220      	movs	r2, #32
 800b56a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b56e:	2303      	movs	r3, #3
 800b570:	e006      	b.n	800b580 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2220      	movs	r2, #32
 800b576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b57a:	2300      	movs	r3, #0
 800b57c:	e000      	b.n	800b580 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b57e:	2302      	movs	r3, #2
  }
}
 800b580:	4618      	mov	r0, r3
 800b582:	3720      	adds	r7, #32
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b08a      	sub	sp, #40	@ 0x28
 800b58c:	af02      	add	r7, sp, #8
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	603b      	str	r3, [r7, #0]
 800b594:	4613      	mov	r3, r2
 800b596:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b59e:	2b20      	cmp	r3, #32
 800b5a0:	f040 80b5 	bne.w	800b70e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d002      	beq.n	800b5b0 <HAL_UART_Receive+0x28>
 800b5aa:	88fb      	ldrh	r3, [r7, #6]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d101      	bne.n	800b5b4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e0ad      	b.n	800b710 <HAL_UART_Receive+0x188>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2222      	movs	r2, #34	@ 0x22
 800b5c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5ca:	f7f9 fd73 	bl	80050b4 <HAL_GetTick>
 800b5ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	88fa      	ldrh	r2, [r7, #6]
 800b5d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	88fa      	ldrh	r2, [r7, #6]
 800b5dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5e8:	d10e      	bne.n	800b608 <HAL_UART_Receive+0x80>
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d105      	bne.n	800b5fe <HAL_UART_Receive+0x76>
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b5f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b5fc:	e02d      	b.n	800b65a <HAL_UART_Receive+0xd2>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	22ff      	movs	r2, #255	@ 0xff
 800b602:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b606:	e028      	b.n	800b65a <HAL_UART_Receive+0xd2>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10d      	bne.n	800b62c <HAL_UART_Receive+0xa4>
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d104      	bne.n	800b622 <HAL_UART_Receive+0x9a>
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	22ff      	movs	r2, #255	@ 0xff
 800b61c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b620:	e01b      	b.n	800b65a <HAL_UART_Receive+0xd2>
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	227f      	movs	r2, #127	@ 0x7f
 800b626:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b62a:	e016      	b.n	800b65a <HAL_UART_Receive+0xd2>
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b634:	d10d      	bne.n	800b652 <HAL_UART_Receive+0xca>
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	691b      	ldr	r3, [r3, #16]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d104      	bne.n	800b648 <HAL_UART_Receive+0xc0>
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	227f      	movs	r2, #127	@ 0x7f
 800b642:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b646:	e008      	b.n	800b65a <HAL_UART_Receive+0xd2>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	223f      	movs	r2, #63	@ 0x3f
 800b64c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b650:	e003      	b.n	800b65a <HAL_UART_Receive+0xd2>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2200      	movs	r2, #0
 800b656:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b660:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b66a:	d108      	bne.n	800b67e <HAL_UART_Receive+0xf6>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d104      	bne.n	800b67e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800b674:	2300      	movs	r3, #0
 800b676:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	61bb      	str	r3, [r7, #24]
 800b67c:	e003      	b.n	800b686 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b682:	2300      	movs	r3, #0
 800b684:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b686:	e036      	b.n	800b6f6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	2200      	movs	r2, #0
 800b690:	2120      	movs	r1, #32
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f000 fb3a 	bl	800bd0c <UART_WaitOnFlagUntilTimeout>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d005      	beq.n	800b6aa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2220      	movs	r2, #32
 800b6a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	e032      	b.n	800b710 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10c      	bne.n	800b6ca <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	8a7b      	ldrh	r3, [r7, #18]
 800b6ba:	4013      	ands	r3, r2
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	3302      	adds	r3, #2
 800b6c6:	61bb      	str	r3, [r7, #24]
 800b6c8:	e00c      	b.n	800b6e4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	8a7b      	ldrh	r3, [r7, #18]
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	4013      	ands	r3, r2
 800b6d8:	b2da      	uxtb	r2, r3
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1c2      	bne.n	800b688 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2220      	movs	r2, #32
 800b706:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800b70a:	2300      	movs	r3, #0
 800b70c:	e000      	b.n	800b710 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800b70e:	2302      	movs	r3, #2
  }
}
 800b710:	4618      	mov	r0, r3
 800b712:	3720      	adds	r7, #32
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b71c:	b094      	sub	sp, #80	@ 0x50
 800b71e:	af00      	add	r7, sp, #0
 800b720:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b722:	2300      	movs	r3, #0
 800b724:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	4b83      	ldr	r3, [pc, #524]	@ (800b93c <UART_SetConfig+0x224>)
 800b72e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b732:	689a      	ldr	r2, [r3, #8]
 800b734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b736:	691b      	ldr	r3, [r3, #16]
 800b738:	431a      	orrs	r2, r3
 800b73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b73c:	695b      	ldr	r3, [r3, #20]
 800b73e:	431a      	orrs	r2, r3
 800b740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b742:	69db      	ldr	r3, [r3, #28]
 800b744:	4313      	orrs	r3, r2
 800b746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	497c      	ldr	r1, [pc, #496]	@ (800b940 <UART_SetConfig+0x228>)
 800b750:	4019      	ands	r1, r3
 800b752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b758:	430b      	orrs	r3, r1
 800b75a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b768:	68d9      	ldr	r1, [r3, #12]
 800b76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	ea40 0301 	orr.w	r3, r0, r1
 800b772:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b776:	699b      	ldr	r3, [r3, #24]
 800b778:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	4b6f      	ldr	r3, [pc, #444]	@ (800b93c <UART_SetConfig+0x224>)
 800b780:	429a      	cmp	r2, r3
 800b782:	d009      	beq.n	800b798 <UART_SetConfig+0x80>
 800b784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	4b6e      	ldr	r3, [pc, #440]	@ (800b944 <UART_SetConfig+0x22c>)
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d004      	beq.n	800b798 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b790:	6a1a      	ldr	r2, [r3, #32]
 800b792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b794:	4313      	orrs	r3, r2
 800b796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b7a2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7ac:	430b      	orrs	r3, r1
 800b7ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b6:	f023 000f 	bic.w	r0, r3, #15
 800b7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	ea40 0301 	orr.w	r3, r0, r1
 800b7c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	4b5e      	ldr	r3, [pc, #376]	@ (800b948 <UART_SetConfig+0x230>)
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d102      	bne.n	800b7d8 <UART_SetConfig+0xc0>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7d6:	e032      	b.n	800b83e <UART_SetConfig+0x126>
 800b7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	4b5b      	ldr	r3, [pc, #364]	@ (800b94c <UART_SetConfig+0x234>)
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d102      	bne.n	800b7e8 <UART_SetConfig+0xd0>
 800b7e2:	2302      	movs	r3, #2
 800b7e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7e6:	e02a      	b.n	800b83e <UART_SetConfig+0x126>
 800b7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	4b58      	ldr	r3, [pc, #352]	@ (800b950 <UART_SetConfig+0x238>)
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d102      	bne.n	800b7f8 <UART_SetConfig+0xe0>
 800b7f2:	2304      	movs	r3, #4
 800b7f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7f6:	e022      	b.n	800b83e <UART_SetConfig+0x126>
 800b7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	4b55      	ldr	r3, [pc, #340]	@ (800b954 <UART_SetConfig+0x23c>)
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d102      	bne.n	800b808 <UART_SetConfig+0xf0>
 800b802:	2308      	movs	r3, #8
 800b804:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b806:	e01a      	b.n	800b83e <UART_SetConfig+0x126>
 800b808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	4b52      	ldr	r3, [pc, #328]	@ (800b958 <UART_SetConfig+0x240>)
 800b80e:	429a      	cmp	r2, r3
 800b810:	d102      	bne.n	800b818 <UART_SetConfig+0x100>
 800b812:	2310      	movs	r3, #16
 800b814:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b816:	e012      	b.n	800b83e <UART_SetConfig+0x126>
 800b818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	4b4f      	ldr	r3, [pc, #316]	@ (800b95c <UART_SetConfig+0x244>)
 800b81e:	429a      	cmp	r2, r3
 800b820:	d103      	bne.n	800b82a <UART_SetConfig+0x112>
 800b822:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800b826:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b828:	e009      	b.n	800b83e <UART_SetConfig+0x126>
 800b82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	4b43      	ldr	r3, [pc, #268]	@ (800b93c <UART_SetConfig+0x224>)
 800b830:	429a      	cmp	r2, r3
 800b832:	d102      	bne.n	800b83a <UART_SetConfig+0x122>
 800b834:	2320      	movs	r3, #32
 800b836:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b838:	e001      	b.n	800b83e <UART_SetConfig+0x126>
 800b83a:	2300      	movs	r3, #0
 800b83c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	4b3e      	ldr	r3, [pc, #248]	@ (800b93c <UART_SetConfig+0x224>)
 800b844:	429a      	cmp	r2, r3
 800b846:	d005      	beq.n	800b854 <UART_SetConfig+0x13c>
 800b848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	4b3d      	ldr	r3, [pc, #244]	@ (800b944 <UART_SetConfig+0x22c>)
 800b84e:	429a      	cmp	r2, r3
 800b850:	f040 8088 	bne.w	800b964 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b856:	2200      	movs	r2, #0
 800b858:	623b      	str	r3, [r7, #32]
 800b85a:	627a      	str	r2, [r7, #36]	@ 0x24
 800b85c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b860:	f7fc ff5a 	bl	8008718 <HAL_RCCEx_GetPeriphCLKFreq>
 800b864:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f000 80eb 	beq.w	800ba44 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b872:	4a3b      	ldr	r2, [pc, #236]	@ (800b960 <UART_SetConfig+0x248>)
 800b874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b878:	461a      	mov	r2, r3
 800b87a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b87c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b880:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b884:	685a      	ldr	r2, [r3, #4]
 800b886:	4613      	mov	r3, r2
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	4413      	add	r3, r2
 800b88c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b88e:	429a      	cmp	r2, r3
 800b890:	d305      	bcc.n	800b89e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b898:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d903      	bls.n	800b8a6 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b8a4:	e048      	b.n	800b938 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	61bb      	str	r3, [r7, #24]
 800b8ac:	61fa      	str	r2, [r7, #28]
 800b8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8b2:	4a2b      	ldr	r2, [pc, #172]	@ (800b960 <UART_SetConfig+0x248>)
 800b8b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	613b      	str	r3, [r7, #16]
 800b8be:	617a      	str	r2, [r7, #20]
 800b8c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b8c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b8c8:	f7f5 f9ee 	bl	8000ca8 <__aeabi_uldivmod>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	f04f 0200 	mov.w	r2, #0
 800b8d8:	f04f 0300 	mov.w	r3, #0
 800b8dc:	020b      	lsls	r3, r1, #8
 800b8de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b8e2:	0202      	lsls	r2, r0, #8
 800b8e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8e6:	6849      	ldr	r1, [r1, #4]
 800b8e8:	0849      	lsrs	r1, r1, #1
 800b8ea:	2000      	movs	r0, #0
 800b8ec:	460c      	mov	r4, r1
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	eb12 0804 	adds.w	r8, r2, r4
 800b8f4:	eb43 0905 	adc.w	r9, r3, r5
 800b8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	60bb      	str	r3, [r7, #8]
 800b900:	60fa      	str	r2, [r7, #12]
 800b902:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b906:	4640      	mov	r0, r8
 800b908:	4649      	mov	r1, r9
 800b90a:	f7f5 f9cd 	bl	8000ca8 <__aeabi_uldivmod>
 800b90e:	4602      	mov	r2, r0
 800b910:	460b      	mov	r3, r1
 800b912:	4613      	mov	r3, r2
 800b914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b918:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b91c:	d308      	bcc.n	800b930 <UART_SetConfig+0x218>
 800b91e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b920:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b924:	d204      	bcs.n	800b930 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800b926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b92c:	60da      	str	r2, [r3, #12]
 800b92e:	e003      	b.n	800b938 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b936:	e085      	b.n	800ba44 <UART_SetConfig+0x32c>
 800b938:	e084      	b.n	800ba44 <UART_SetConfig+0x32c>
 800b93a:	bf00      	nop
 800b93c:	46002400 	.word	0x46002400
 800b940:	cfff69f3 	.word	0xcfff69f3
 800b944:	56002400 	.word	0x56002400
 800b948:	40013800 	.word	0x40013800
 800b94c:	40004400 	.word	0x40004400
 800b950:	40004800 	.word	0x40004800
 800b954:	40004c00 	.word	0x40004c00
 800b958:	40005000 	.word	0x40005000
 800b95c:	40006400 	.word	0x40006400
 800b960:	08010a84 	.word	0x08010a84
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b966:	69db      	ldr	r3, [r3, #28]
 800b968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b96c:	d13c      	bne.n	800b9e8 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b96e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b970:	2200      	movs	r2, #0
 800b972:	603b      	str	r3, [r7, #0]
 800b974:	607a      	str	r2, [r7, #4]
 800b976:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b97a:	f7fc fecd 	bl	8008718 <HAL_RCCEx_GetPeriphCLKFreq>
 800b97e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b982:	2b00      	cmp	r3, #0
 800b984:	d05e      	beq.n	800ba44 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b98a:	4a39      	ldr	r2, [pc, #228]	@ (800ba70 <UART_SetConfig+0x358>)
 800b98c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b990:	461a      	mov	r2, r3
 800b992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b994:	fbb3 f3f2 	udiv	r3, r3, r2
 800b998:	005a      	lsls	r2, r3, #1
 800b99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	085b      	lsrs	r3, r3, #1
 800b9a0:	441a      	add	r2, r3
 800b9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9ae:	2b0f      	cmp	r3, #15
 800b9b0:	d916      	bls.n	800b9e0 <UART_SetConfig+0x2c8>
 800b9b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9b8:	d212      	bcs.n	800b9e0 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	f023 030f 	bic.w	r3, r3, #15
 800b9c2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9c6:	085b      	lsrs	r3, r3, #1
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	f003 0307 	and.w	r3, r3, #7
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b9dc:	60da      	str	r2, [r3, #12]
 800b9de:	e031      	b.n	800ba44 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b9e6:	e02d      	b.n	800ba44 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b9e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	469a      	mov	sl, r3
 800b9ee:	4693      	mov	fp, r2
 800b9f0:	4650      	mov	r0, sl
 800b9f2:	4659      	mov	r1, fp
 800b9f4:	f7fc fe90 	bl	8008718 <HAL_RCCEx_GetPeriphCLKFreq>
 800b9f8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b9fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d021      	beq.n	800ba44 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba04:	4a1a      	ldr	r2, [pc, #104]	@ (800ba70 <UART_SetConfig+0x358>)
 800ba06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba0e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	085b      	lsrs	r3, r3, #1
 800ba18:	441a      	add	r2, r3
 800ba1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba26:	2b0f      	cmp	r3, #15
 800ba28:	d909      	bls.n	800ba3e <UART_SetConfig+0x326>
 800ba2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba30:	d205      	bcs.n	800ba3e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	60da      	str	r2, [r3, #12]
 800ba3c:	e002      	b.n	800ba44 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ba44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba46:	2201      	movs	r2, #1
 800ba48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ba4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba56:	2200      	movs	r2, #0
 800ba58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ba5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ba60:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3750      	adds	r7, #80	@ 0x50
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba6e:	bf00      	nop
 800ba70:	08010a84 	.word	0x08010a84

0800ba74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba80:	f003 0308 	and.w	r3, r3, #8
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00a      	beq.n	800ba9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	430a      	orrs	r2, r1
 800ba9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa2:	f003 0301 	and.w	r3, r3, #1
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00a      	beq.n	800bac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	430a      	orrs	r2, r1
 800babe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bac4:	f003 0302 	and.w	r3, r3, #2
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d00a      	beq.n	800bae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	430a      	orrs	r2, r1
 800bae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bae6:	f003 0304 	and.w	r3, r3, #4
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00a      	beq.n	800bb04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	430a      	orrs	r2, r1
 800bb02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb08:	f003 0310 	and.w	r3, r3, #16
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00a      	beq.n	800bb26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	430a      	orrs	r2, r1
 800bb24:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb2a:	f003 0320 	and.w	r3, r3, #32
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d00a      	beq.n	800bb48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	430a      	orrs	r2, r1
 800bb46:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d01a      	beq.n	800bb8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	430a      	orrs	r2, r1
 800bb68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb72:	d10a      	bne.n	800bb8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	430a      	orrs	r2, r1
 800bb88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00a      	beq.n	800bbac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	430a      	orrs	r2, r1
 800bbaa:	605a      	str	r2, [r3, #4]
  }
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b098      	sub	sp, #96	@ 0x60
 800bbbc:	af02      	add	r7, sp, #8
 800bbbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbc8:	f7f9 fa74 	bl	80050b4 <HAL_GetTick>
 800bbcc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 0308 	and.w	r3, r3, #8
 800bbd8:	2b08      	cmp	r3, #8
 800bbda:	d12f      	bne.n	800bc3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f88e 	bl	800bd0c <UART_WaitOnFlagUntilTimeout>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d022      	beq.n	800bc3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfe:	e853 3f00 	ldrex	r3, [r3]
 800bc02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bc04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc0a:	653b      	str	r3, [r7, #80]	@ 0x50
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	461a      	mov	r2, r3
 800bc12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc14:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bc1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc1c:	e841 2300 	strex	r3, r2, [r1]
 800bc20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bc22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1e6      	bne.n	800bbf6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2220      	movs	r2, #32
 800bc2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc38:	2303      	movs	r3, #3
 800bc3a:	e063      	b.n	800bd04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f003 0304 	and.w	r3, r3, #4
 800bc46:	2b04      	cmp	r3, #4
 800bc48:	d149      	bne.n	800bcde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc52:	2200      	movs	r2, #0
 800bc54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f857 	bl	800bd0c <UART_WaitOnFlagUntilTimeout>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d03c      	beq.n	800bcde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6c:	e853 3f00 	ldrex	r3, [r3]
 800bc70:	623b      	str	r3, [r7, #32]
   return(result);
 800bc72:	6a3b      	ldr	r3, [r7, #32]
 800bc74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc82:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc8a:	e841 2300 	strex	r3, r2, [r1]
 800bc8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bc90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d1e6      	bne.n	800bc64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	3308      	adds	r3, #8
 800bc9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	e853 3f00 	ldrex	r3, [r3]
 800bca4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f023 0301 	bic.w	r3, r3, #1
 800bcac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	3308      	adds	r3, #8
 800bcb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bcb6:	61fa      	str	r2, [r7, #28]
 800bcb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcba:	69b9      	ldr	r1, [r7, #24]
 800bcbc:	69fa      	ldr	r2, [r7, #28]
 800bcbe:	e841 2300 	strex	r3, r2, [r1]
 800bcc2:	617b      	str	r3, [r7, #20]
   return(result);
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1e5      	bne.n	800bc96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2220      	movs	r2, #32
 800bcce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	e012      	b.n	800bd04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2220      	movs	r2, #32
 800bce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2220      	movs	r2, #32
 800bcea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd02:	2300      	movs	r3, #0
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3758      	adds	r7, #88	@ 0x58
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	603b      	str	r3, [r7, #0]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd1c:	e04f      	b.n	800bdbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd24:	d04b      	beq.n	800bdbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd26:	f7f9 f9c5 	bl	80050b4 <HAL_GetTick>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	1ad3      	subs	r3, r2, r3
 800bd30:	69ba      	ldr	r2, [r7, #24]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d302      	bcc.n	800bd3c <UART_WaitOnFlagUntilTimeout+0x30>
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d101      	bne.n	800bd40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	e04e      	b.n	800bdde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 0304 	and.w	r3, r3, #4
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d037      	beq.n	800bdbe <UART_WaitOnFlagUntilTimeout+0xb2>
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2b80      	cmp	r3, #128	@ 0x80
 800bd52:	d034      	beq.n	800bdbe <UART_WaitOnFlagUntilTimeout+0xb2>
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	2b40      	cmp	r3, #64	@ 0x40
 800bd58:	d031      	beq.n	800bdbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	69db      	ldr	r3, [r3, #28]
 800bd60:	f003 0308 	and.w	r3, r3, #8
 800bd64:	2b08      	cmp	r3, #8
 800bd66:	d110      	bne.n	800bd8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2208      	movs	r2, #8
 800bd6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f000 f838 	bl	800bde6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2208      	movs	r2, #8
 800bd7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e029      	b.n	800bdde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	69db      	ldr	r3, [r3, #28]
 800bd90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd98:	d111      	bne.n	800bdbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bda2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f000 f81e 	bl	800bde6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2220      	movs	r2, #32
 800bdae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bdba:	2303      	movs	r3, #3
 800bdbc:	e00f      	b.n	800bdde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	69da      	ldr	r2, [r3, #28]
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	4013      	ands	r3, r2
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	bf0c      	ite	eq
 800bdce:	2301      	moveq	r3, #1
 800bdd0:	2300      	movne	r3, #0
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	79fb      	ldrb	r3, [r7, #7]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d0a0      	beq.n	800bd1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bddc:	2300      	movs	r3, #0
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bde6:	b480      	push	{r7}
 800bde8:	b095      	sub	sp, #84	@ 0x54
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdf6:	e853 3f00 	ldrex	r3, [r3]
 800bdfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bdfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	461a      	mov	r2, r3
 800be0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be0c:	643b      	str	r3, [r7, #64]	@ 0x40
 800be0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be14:	e841 2300 	strex	r3, r2, [r1]
 800be18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1e6      	bne.n	800bdee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3308      	adds	r3, #8
 800be26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be28:	6a3b      	ldr	r3, [r7, #32]
 800be2a:	e853 3f00 	ldrex	r3, [r3]
 800be2e:	61fb      	str	r3, [r7, #28]
   return(result);
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be36:	f023 0301 	bic.w	r3, r3, #1
 800be3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	3308      	adds	r3, #8
 800be42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be4c:	e841 2300 	strex	r3, r2, [r1]
 800be50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1e3      	bne.n	800be20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d118      	bne.n	800be92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	e853 3f00 	ldrex	r3, [r3]
 800be6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	f023 0310 	bic.w	r3, r3, #16
 800be74:	647b      	str	r3, [r7, #68]	@ 0x44
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	461a      	mov	r2, r3
 800be7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be7e:	61bb      	str	r3, [r7, #24]
 800be80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be82:	6979      	ldr	r1, [r7, #20]
 800be84:	69ba      	ldr	r2, [r7, #24]
 800be86:	e841 2300 	strex	r3, r2, [r1]
 800be8a:	613b      	str	r3, [r7, #16]
   return(result);
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d1e6      	bne.n	800be60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2220      	movs	r2, #32
 800be96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bea6:	bf00      	nop
 800bea8:	3754      	adds	r7, #84	@ 0x54
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <_ZdlPvj>:
 800beb2:	f000 b800 	b.w	800beb6 <_ZdlPv>

0800beb6 <_ZdlPv>:
 800beb6:	f000 b809 	b.w	800becc <free>
	...

0800bebc <malloc>:
 800bebc:	4b02      	ldr	r3, [pc, #8]	@ (800bec8 <malloc+0xc>)
 800bebe:	4601      	mov	r1, r0
 800bec0:	6818      	ldr	r0, [r3, #0]
 800bec2:	f000 b82d 	b.w	800bf20 <_malloc_r>
 800bec6:	bf00      	nop
 800bec8:	2000008c 	.word	0x2000008c

0800becc <free>:
 800becc:	4b02      	ldr	r3, [pc, #8]	@ (800bed8 <free+0xc>)
 800bece:	4601      	mov	r1, r0
 800bed0:	6818      	ldr	r0, [r3, #0]
 800bed2:	f002 b859 	b.w	800df88 <_free_r>
 800bed6:	bf00      	nop
 800bed8:	2000008c 	.word	0x2000008c

0800bedc <sbrk_aligned>:
 800bedc:	b570      	push	{r4, r5, r6, lr}
 800bede:	4e0f      	ldr	r6, [pc, #60]	@ (800bf1c <sbrk_aligned+0x40>)
 800bee0:	460c      	mov	r4, r1
 800bee2:	4605      	mov	r5, r0
 800bee4:	6831      	ldr	r1, [r6, #0]
 800bee6:	b911      	cbnz	r1, 800beee <sbrk_aligned+0x12>
 800bee8:	f001 f98c 	bl	800d204 <_sbrk_r>
 800beec:	6030      	str	r0, [r6, #0]
 800beee:	4621      	mov	r1, r4
 800bef0:	4628      	mov	r0, r5
 800bef2:	f001 f987 	bl	800d204 <_sbrk_r>
 800bef6:	1c43      	adds	r3, r0, #1
 800bef8:	d103      	bne.n	800bf02 <sbrk_aligned+0x26>
 800befa:	f04f 34ff 	mov.w	r4, #4294967295
 800befe:	4620      	mov	r0, r4
 800bf00:	bd70      	pop	{r4, r5, r6, pc}
 800bf02:	1cc4      	adds	r4, r0, #3
 800bf04:	f024 0403 	bic.w	r4, r4, #3
 800bf08:	42a0      	cmp	r0, r4
 800bf0a:	d0f8      	beq.n	800befe <sbrk_aligned+0x22>
 800bf0c:	1a21      	subs	r1, r4, r0
 800bf0e:	4628      	mov	r0, r5
 800bf10:	f001 f978 	bl	800d204 <_sbrk_r>
 800bf14:	3001      	adds	r0, #1
 800bf16:	d1f2      	bne.n	800befe <sbrk_aligned+0x22>
 800bf18:	e7ef      	b.n	800befa <sbrk_aligned+0x1e>
 800bf1a:	bf00      	nop
 800bf1c:	200005c8 	.word	0x200005c8

0800bf20 <_malloc_r>:
 800bf20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf24:	1ccd      	adds	r5, r1, #3
 800bf26:	4606      	mov	r6, r0
 800bf28:	f025 0503 	bic.w	r5, r5, #3
 800bf2c:	3508      	adds	r5, #8
 800bf2e:	2d0c      	cmp	r5, #12
 800bf30:	bf38      	it	cc
 800bf32:	250c      	movcc	r5, #12
 800bf34:	2d00      	cmp	r5, #0
 800bf36:	db01      	blt.n	800bf3c <_malloc_r+0x1c>
 800bf38:	42a9      	cmp	r1, r5
 800bf3a:	d904      	bls.n	800bf46 <_malloc_r+0x26>
 800bf3c:	230c      	movs	r3, #12
 800bf3e:	6033      	str	r3, [r6, #0]
 800bf40:	2000      	movs	r0, #0
 800bf42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c01c <_malloc_r+0xfc>
 800bf4a:	f000 f869 	bl	800c020 <__malloc_lock>
 800bf4e:	f8d8 3000 	ldr.w	r3, [r8]
 800bf52:	461c      	mov	r4, r3
 800bf54:	bb44      	cbnz	r4, 800bfa8 <_malloc_r+0x88>
 800bf56:	4629      	mov	r1, r5
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f7ff ffbf 	bl	800bedc <sbrk_aligned>
 800bf5e:	1c43      	adds	r3, r0, #1
 800bf60:	4604      	mov	r4, r0
 800bf62:	d158      	bne.n	800c016 <_malloc_r+0xf6>
 800bf64:	f8d8 4000 	ldr.w	r4, [r8]
 800bf68:	4627      	mov	r7, r4
 800bf6a:	2f00      	cmp	r7, #0
 800bf6c:	d143      	bne.n	800bff6 <_malloc_r+0xd6>
 800bf6e:	2c00      	cmp	r4, #0
 800bf70:	d04b      	beq.n	800c00a <_malloc_r+0xea>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	4639      	mov	r1, r7
 800bf76:	4630      	mov	r0, r6
 800bf78:	eb04 0903 	add.w	r9, r4, r3
 800bf7c:	f001 f942 	bl	800d204 <_sbrk_r>
 800bf80:	4581      	cmp	r9, r0
 800bf82:	d142      	bne.n	800c00a <_malloc_r+0xea>
 800bf84:	6821      	ldr	r1, [r4, #0]
 800bf86:	4630      	mov	r0, r6
 800bf88:	1a6d      	subs	r5, r5, r1
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	f7ff ffa6 	bl	800bedc <sbrk_aligned>
 800bf90:	3001      	adds	r0, #1
 800bf92:	d03a      	beq.n	800c00a <_malloc_r+0xea>
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	442b      	add	r3, r5
 800bf98:	6023      	str	r3, [r4, #0]
 800bf9a:	f8d8 3000 	ldr.w	r3, [r8]
 800bf9e:	685a      	ldr	r2, [r3, #4]
 800bfa0:	bb62      	cbnz	r2, 800bffc <_malloc_r+0xdc>
 800bfa2:	f8c8 7000 	str.w	r7, [r8]
 800bfa6:	e00f      	b.n	800bfc8 <_malloc_r+0xa8>
 800bfa8:	6822      	ldr	r2, [r4, #0]
 800bfaa:	1b52      	subs	r2, r2, r5
 800bfac:	d420      	bmi.n	800bff0 <_malloc_r+0xd0>
 800bfae:	2a0b      	cmp	r2, #11
 800bfb0:	d917      	bls.n	800bfe2 <_malloc_r+0xc2>
 800bfb2:	1961      	adds	r1, r4, r5
 800bfb4:	42a3      	cmp	r3, r4
 800bfb6:	6025      	str	r5, [r4, #0]
 800bfb8:	bf18      	it	ne
 800bfba:	6059      	strne	r1, [r3, #4]
 800bfbc:	6863      	ldr	r3, [r4, #4]
 800bfbe:	bf08      	it	eq
 800bfc0:	f8c8 1000 	streq.w	r1, [r8]
 800bfc4:	5162      	str	r2, [r4, r5]
 800bfc6:	604b      	str	r3, [r1, #4]
 800bfc8:	4630      	mov	r0, r6
 800bfca:	f000 f82f 	bl	800c02c <__malloc_unlock>
 800bfce:	f104 000b 	add.w	r0, r4, #11
 800bfd2:	1d23      	adds	r3, r4, #4
 800bfd4:	f020 0007 	bic.w	r0, r0, #7
 800bfd8:	1ac2      	subs	r2, r0, r3
 800bfda:	bf1c      	itt	ne
 800bfdc:	1a1b      	subne	r3, r3, r0
 800bfde:	50a3      	strne	r3, [r4, r2]
 800bfe0:	e7af      	b.n	800bf42 <_malloc_r+0x22>
 800bfe2:	6862      	ldr	r2, [r4, #4]
 800bfe4:	42a3      	cmp	r3, r4
 800bfe6:	bf0c      	ite	eq
 800bfe8:	f8c8 2000 	streq.w	r2, [r8]
 800bfec:	605a      	strne	r2, [r3, #4]
 800bfee:	e7eb      	b.n	800bfc8 <_malloc_r+0xa8>
 800bff0:	4623      	mov	r3, r4
 800bff2:	6864      	ldr	r4, [r4, #4]
 800bff4:	e7ae      	b.n	800bf54 <_malloc_r+0x34>
 800bff6:	463c      	mov	r4, r7
 800bff8:	687f      	ldr	r7, [r7, #4]
 800bffa:	e7b6      	b.n	800bf6a <_malloc_r+0x4a>
 800bffc:	461a      	mov	r2, r3
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	42a3      	cmp	r3, r4
 800c002:	d1fb      	bne.n	800bffc <_malloc_r+0xdc>
 800c004:	2300      	movs	r3, #0
 800c006:	6053      	str	r3, [r2, #4]
 800c008:	e7de      	b.n	800bfc8 <_malloc_r+0xa8>
 800c00a:	230c      	movs	r3, #12
 800c00c:	4630      	mov	r0, r6
 800c00e:	6033      	str	r3, [r6, #0]
 800c010:	f000 f80c 	bl	800c02c <__malloc_unlock>
 800c014:	e794      	b.n	800bf40 <_malloc_r+0x20>
 800c016:	6005      	str	r5, [r0, #0]
 800c018:	e7d6      	b.n	800bfc8 <_malloc_r+0xa8>
 800c01a:	bf00      	nop
 800c01c:	200005cc 	.word	0x200005cc

0800c020 <__malloc_lock>:
 800c020:	4801      	ldr	r0, [pc, #4]	@ (800c028 <__malloc_lock+0x8>)
 800c022:	f001 b93c 	b.w	800d29e <__retarget_lock_acquire_recursive>
 800c026:	bf00      	nop
 800c028:	20000710 	.word	0x20000710

0800c02c <__malloc_unlock>:
 800c02c:	4801      	ldr	r0, [pc, #4]	@ (800c034 <__malloc_unlock+0x8>)
 800c02e:	f001 b937 	b.w	800d2a0 <__retarget_lock_release_recursive>
 800c032:	bf00      	nop
 800c034:	20000710 	.word	0x20000710

0800c038 <__cvt>:
 800c038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c03c:	ec57 6b10 	vmov	r6, r7, d0
 800c040:	2f00      	cmp	r7, #0
 800c042:	460c      	mov	r4, r1
 800c044:	4619      	mov	r1, r3
 800c046:	463b      	mov	r3, r7
 800c048:	bfb4      	ite	lt
 800c04a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c04e:	2300      	movge	r3, #0
 800c050:	4691      	mov	r9, r2
 800c052:	bfbf      	itttt	lt
 800c054:	4632      	movlt	r2, r6
 800c056:	461f      	movlt	r7, r3
 800c058:	232d      	movlt	r3, #45	@ 0x2d
 800c05a:	4616      	movlt	r6, r2
 800c05c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c060:	700b      	strb	r3, [r1, #0]
 800c062:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c064:	f023 0820 	bic.w	r8, r3, #32
 800c068:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c06c:	d005      	beq.n	800c07a <__cvt+0x42>
 800c06e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c072:	d100      	bne.n	800c076 <__cvt+0x3e>
 800c074:	3401      	adds	r4, #1
 800c076:	2102      	movs	r1, #2
 800c078:	e000      	b.n	800c07c <__cvt+0x44>
 800c07a:	2103      	movs	r1, #3
 800c07c:	ab03      	add	r3, sp, #12
 800c07e:	4622      	mov	r2, r4
 800c080:	9301      	str	r3, [sp, #4]
 800c082:	ab02      	add	r3, sp, #8
 800c084:	ec47 6b10 	vmov	d0, r6, r7
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	4653      	mov	r3, sl
 800c08c:	f001 f9b8 	bl	800d400 <_dtoa_r>
 800c090:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c094:	4605      	mov	r5, r0
 800c096:	d119      	bne.n	800c0cc <__cvt+0x94>
 800c098:	f019 0f01 	tst.w	r9, #1
 800c09c:	d00e      	beq.n	800c0bc <__cvt+0x84>
 800c09e:	eb00 0904 	add.w	r9, r0, r4
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	4639      	mov	r1, r7
 800c0aa:	f7f4 fd1d 	bl	8000ae8 <__aeabi_dcmpeq>
 800c0ae:	b108      	cbz	r0, 800c0b4 <__cvt+0x7c>
 800c0b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c0b4:	2230      	movs	r2, #48	@ 0x30
 800c0b6:	9b03      	ldr	r3, [sp, #12]
 800c0b8:	454b      	cmp	r3, r9
 800c0ba:	d31e      	bcc.n	800c0fa <__cvt+0xc2>
 800c0bc:	9b03      	ldr	r3, [sp, #12]
 800c0be:	4628      	mov	r0, r5
 800c0c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0c2:	1b5b      	subs	r3, r3, r5
 800c0c4:	6013      	str	r3, [r2, #0]
 800c0c6:	b004      	add	sp, #16
 800c0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c0d0:	eb00 0904 	add.w	r9, r0, r4
 800c0d4:	d1e5      	bne.n	800c0a2 <__cvt+0x6a>
 800c0d6:	7803      	ldrb	r3, [r0, #0]
 800c0d8:	2b30      	cmp	r3, #48	@ 0x30
 800c0da:	d10a      	bne.n	800c0f2 <__cvt+0xba>
 800c0dc:	2200      	movs	r2, #0
 800c0de:	2300      	movs	r3, #0
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	4639      	mov	r1, r7
 800c0e4:	f7f4 fd00 	bl	8000ae8 <__aeabi_dcmpeq>
 800c0e8:	b918      	cbnz	r0, 800c0f2 <__cvt+0xba>
 800c0ea:	f1c4 0401 	rsb	r4, r4, #1
 800c0ee:	f8ca 4000 	str.w	r4, [sl]
 800c0f2:	f8da 3000 	ldr.w	r3, [sl]
 800c0f6:	4499      	add	r9, r3
 800c0f8:	e7d3      	b.n	800c0a2 <__cvt+0x6a>
 800c0fa:	1c59      	adds	r1, r3, #1
 800c0fc:	9103      	str	r1, [sp, #12]
 800c0fe:	701a      	strb	r2, [r3, #0]
 800c100:	e7d9      	b.n	800c0b6 <__cvt+0x7e>

0800c102 <__exponent>:
 800c102:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c104:	2900      	cmp	r1, #0
 800c106:	7002      	strb	r2, [r0, #0]
 800c108:	bfba      	itte	lt
 800c10a:	4249      	neglt	r1, r1
 800c10c:	232d      	movlt	r3, #45	@ 0x2d
 800c10e:	232b      	movge	r3, #43	@ 0x2b
 800c110:	2909      	cmp	r1, #9
 800c112:	7043      	strb	r3, [r0, #1]
 800c114:	dd28      	ble.n	800c168 <__exponent+0x66>
 800c116:	f10d 0307 	add.w	r3, sp, #7
 800c11a:	270a      	movs	r7, #10
 800c11c:	461d      	mov	r5, r3
 800c11e:	461a      	mov	r2, r3
 800c120:	3b01      	subs	r3, #1
 800c122:	fbb1 f6f7 	udiv	r6, r1, r7
 800c126:	fb07 1416 	mls	r4, r7, r6, r1
 800c12a:	3430      	adds	r4, #48	@ 0x30
 800c12c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c130:	460c      	mov	r4, r1
 800c132:	4631      	mov	r1, r6
 800c134:	2c63      	cmp	r4, #99	@ 0x63
 800c136:	dcf2      	bgt.n	800c11e <__exponent+0x1c>
 800c138:	3130      	adds	r1, #48	@ 0x30
 800c13a:	1e94      	subs	r4, r2, #2
 800c13c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c140:	1c41      	adds	r1, r0, #1
 800c142:	4623      	mov	r3, r4
 800c144:	42ab      	cmp	r3, r5
 800c146:	d30a      	bcc.n	800c15e <__exponent+0x5c>
 800c148:	f10d 0309 	add.w	r3, sp, #9
 800c14c:	1a9b      	subs	r3, r3, r2
 800c14e:	42ac      	cmp	r4, r5
 800c150:	bf88      	it	hi
 800c152:	2300      	movhi	r3, #0
 800c154:	3302      	adds	r3, #2
 800c156:	4403      	add	r3, r0
 800c158:	1a18      	subs	r0, r3, r0
 800c15a:	b003      	add	sp, #12
 800c15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c15e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c162:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c166:	e7ed      	b.n	800c144 <__exponent+0x42>
 800c168:	2330      	movs	r3, #48	@ 0x30
 800c16a:	3130      	adds	r1, #48	@ 0x30
 800c16c:	7083      	strb	r3, [r0, #2]
 800c16e:	1d03      	adds	r3, r0, #4
 800c170:	70c1      	strb	r1, [r0, #3]
 800c172:	e7f1      	b.n	800c158 <__exponent+0x56>

0800c174 <_printf_float>:
 800c174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c178:	b08d      	sub	sp, #52	@ 0x34
 800c17a:	460c      	mov	r4, r1
 800c17c:	4616      	mov	r6, r2
 800c17e:	461f      	mov	r7, r3
 800c180:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c184:	4605      	mov	r5, r0
 800c186:	f001 f805 	bl	800d194 <_localeconv_r>
 800c18a:	6803      	ldr	r3, [r0, #0]
 800c18c:	4618      	mov	r0, r3
 800c18e:	9304      	str	r3, [sp, #16]
 800c190:	f7f4 f87e 	bl	8000290 <strlen>
 800c194:	2300      	movs	r3, #0
 800c196:	9005      	str	r0, [sp, #20]
 800c198:	930a      	str	r3, [sp, #40]	@ 0x28
 800c19a:	f8d8 3000 	ldr.w	r3, [r8]
 800c19e:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c1a2:	3307      	adds	r3, #7
 800c1a4:	f8d4 b000 	ldr.w	fp, [r4]
 800c1a8:	f023 0307 	bic.w	r3, r3, #7
 800c1ac:	f103 0208 	add.w	r2, r3, #8
 800c1b0:	f8c8 2000 	str.w	r2, [r8]
 800c1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c1c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800c1c4:	9307      	str	r3, [sp, #28]
 800c1c6:	4b9d      	ldr	r3, [pc, #628]	@ (800c43c <_printf_float+0x2c8>)
 800c1c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1cc:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c1d0:	f7f4 fcbc 	bl	8000b4c <__aeabi_dcmpun>
 800c1d4:	bb70      	cbnz	r0, 800c234 <_printf_float+0xc0>
 800c1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c1da:	4b98      	ldr	r3, [pc, #608]	@ (800c43c <_printf_float+0x2c8>)
 800c1dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1e0:	f7f4 fc96 	bl	8000b10 <__aeabi_dcmple>
 800c1e4:	bb30      	cbnz	r0, 800c234 <_printf_float+0xc0>
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	4640      	mov	r0, r8
 800c1ec:	4649      	mov	r1, r9
 800c1ee:	f7f4 fc85 	bl	8000afc <__aeabi_dcmplt>
 800c1f2:	b110      	cbz	r0, 800c1fa <_printf_float+0x86>
 800c1f4:	232d      	movs	r3, #45	@ 0x2d
 800c1f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1fa:	4a91      	ldr	r2, [pc, #580]	@ (800c440 <_printf_float+0x2cc>)
 800c1fc:	4b91      	ldr	r3, [pc, #580]	@ (800c444 <_printf_float+0x2d0>)
 800c1fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c202:	bf94      	ite	ls
 800c204:	4690      	movls	r8, r2
 800c206:	4698      	movhi	r8, r3
 800c208:	2303      	movs	r3, #3
 800c20a:	f04f 0900 	mov.w	r9, #0
 800c20e:	6123      	str	r3, [r4, #16]
 800c210:	f02b 0304 	bic.w	r3, fp, #4
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	4633      	mov	r3, r6
 800c218:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c21a:	4621      	mov	r1, r4
 800c21c:	4628      	mov	r0, r5
 800c21e:	9700      	str	r7, [sp, #0]
 800c220:	f000 f9d2 	bl	800c5c8 <_printf_common>
 800c224:	3001      	adds	r0, #1
 800c226:	f040 808d 	bne.w	800c344 <_printf_float+0x1d0>
 800c22a:	f04f 30ff 	mov.w	r0, #4294967295
 800c22e:	b00d      	add	sp, #52	@ 0x34
 800c230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c234:	4642      	mov	r2, r8
 800c236:	464b      	mov	r3, r9
 800c238:	4640      	mov	r0, r8
 800c23a:	4649      	mov	r1, r9
 800c23c:	f7f4 fc86 	bl	8000b4c <__aeabi_dcmpun>
 800c240:	b140      	cbz	r0, 800c254 <_printf_float+0xe0>
 800c242:	464b      	mov	r3, r9
 800c244:	4a80      	ldr	r2, [pc, #512]	@ (800c448 <_printf_float+0x2d4>)
 800c246:	2b00      	cmp	r3, #0
 800c248:	bfbc      	itt	lt
 800c24a:	232d      	movlt	r3, #45	@ 0x2d
 800c24c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c250:	4b7e      	ldr	r3, [pc, #504]	@ (800c44c <_printf_float+0x2d8>)
 800c252:	e7d4      	b.n	800c1fe <_printf_float+0x8a>
 800c254:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c258:	6863      	ldr	r3, [r4, #4]
 800c25a:	9206      	str	r2, [sp, #24]
 800c25c:	1c5a      	adds	r2, r3, #1
 800c25e:	d13b      	bne.n	800c2d8 <_printf_float+0x164>
 800c260:	2306      	movs	r3, #6
 800c262:	6063      	str	r3, [r4, #4]
 800c264:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c268:	2300      	movs	r3, #0
 800c26a:	4628      	mov	r0, r5
 800c26c:	6022      	str	r2, [r4, #0]
 800c26e:	9303      	str	r3, [sp, #12]
 800c270:	ab0a      	add	r3, sp, #40	@ 0x28
 800c272:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c276:	ab09      	add	r3, sp, #36	@ 0x24
 800c278:	ec49 8b10 	vmov	d0, r8, r9
 800c27c:	9300      	str	r3, [sp, #0]
 800c27e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c282:	6861      	ldr	r1, [r4, #4]
 800c284:	f7ff fed8 	bl	800c038 <__cvt>
 800c288:	9b06      	ldr	r3, [sp, #24]
 800c28a:	4680      	mov	r8, r0
 800c28c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c28e:	2b47      	cmp	r3, #71	@ 0x47
 800c290:	d129      	bne.n	800c2e6 <_printf_float+0x172>
 800c292:	1cc8      	adds	r0, r1, #3
 800c294:	db02      	blt.n	800c29c <_printf_float+0x128>
 800c296:	6863      	ldr	r3, [r4, #4]
 800c298:	4299      	cmp	r1, r3
 800c29a:	dd41      	ble.n	800c320 <_printf_float+0x1ac>
 800c29c:	f1aa 0a02 	sub.w	sl, sl, #2
 800c2a0:	fa5f fa8a 	uxtb.w	sl, sl
 800c2a4:	3901      	subs	r1, #1
 800c2a6:	4652      	mov	r2, sl
 800c2a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c2ac:	9109      	str	r1, [sp, #36]	@ 0x24
 800c2ae:	f7ff ff28 	bl	800c102 <__exponent>
 800c2b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c2b4:	4681      	mov	r9, r0
 800c2b6:	1813      	adds	r3, r2, r0
 800c2b8:	2a01      	cmp	r2, #1
 800c2ba:	6123      	str	r3, [r4, #16]
 800c2bc:	dc02      	bgt.n	800c2c4 <_printf_float+0x150>
 800c2be:	6822      	ldr	r2, [r4, #0]
 800c2c0:	07d2      	lsls	r2, r2, #31
 800c2c2:	d501      	bpl.n	800c2c8 <_printf_float+0x154>
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	6123      	str	r3, [r4, #16]
 800c2c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d0a2      	beq.n	800c216 <_printf_float+0xa2>
 800c2d0:	232d      	movs	r3, #45	@ 0x2d
 800c2d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2d6:	e79e      	b.n	800c216 <_printf_float+0xa2>
 800c2d8:	9a06      	ldr	r2, [sp, #24]
 800c2da:	2a47      	cmp	r2, #71	@ 0x47
 800c2dc:	d1c2      	bne.n	800c264 <_printf_float+0xf0>
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1c0      	bne.n	800c264 <_printf_float+0xf0>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e7bd      	b.n	800c262 <_printf_float+0xee>
 800c2e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c2ea:	d9db      	bls.n	800c2a4 <_printf_float+0x130>
 800c2ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c2f0:	d118      	bne.n	800c324 <_printf_float+0x1b0>
 800c2f2:	2900      	cmp	r1, #0
 800c2f4:	6863      	ldr	r3, [r4, #4]
 800c2f6:	dd0b      	ble.n	800c310 <_printf_float+0x19c>
 800c2f8:	6121      	str	r1, [r4, #16]
 800c2fa:	b913      	cbnz	r3, 800c302 <_printf_float+0x18e>
 800c2fc:	6822      	ldr	r2, [r4, #0]
 800c2fe:	07d0      	lsls	r0, r2, #31
 800c300:	d502      	bpl.n	800c308 <_printf_float+0x194>
 800c302:	3301      	adds	r3, #1
 800c304:	440b      	add	r3, r1
 800c306:	6123      	str	r3, [r4, #16]
 800c308:	f04f 0900 	mov.w	r9, #0
 800c30c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c30e:	e7db      	b.n	800c2c8 <_printf_float+0x154>
 800c310:	b913      	cbnz	r3, 800c318 <_printf_float+0x1a4>
 800c312:	6822      	ldr	r2, [r4, #0]
 800c314:	07d2      	lsls	r2, r2, #31
 800c316:	d501      	bpl.n	800c31c <_printf_float+0x1a8>
 800c318:	3302      	adds	r3, #2
 800c31a:	e7f4      	b.n	800c306 <_printf_float+0x192>
 800c31c:	2301      	movs	r3, #1
 800c31e:	e7f2      	b.n	800c306 <_printf_float+0x192>
 800c320:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c326:	4299      	cmp	r1, r3
 800c328:	db05      	blt.n	800c336 <_printf_float+0x1c2>
 800c32a:	6823      	ldr	r3, [r4, #0]
 800c32c:	6121      	str	r1, [r4, #16]
 800c32e:	07d8      	lsls	r0, r3, #31
 800c330:	d5ea      	bpl.n	800c308 <_printf_float+0x194>
 800c332:	1c4b      	adds	r3, r1, #1
 800c334:	e7e7      	b.n	800c306 <_printf_float+0x192>
 800c336:	2900      	cmp	r1, #0
 800c338:	bfd4      	ite	le
 800c33a:	f1c1 0202 	rsble	r2, r1, #2
 800c33e:	2201      	movgt	r2, #1
 800c340:	4413      	add	r3, r2
 800c342:	e7e0      	b.n	800c306 <_printf_float+0x192>
 800c344:	6823      	ldr	r3, [r4, #0]
 800c346:	055a      	lsls	r2, r3, #21
 800c348:	d407      	bmi.n	800c35a <_printf_float+0x1e6>
 800c34a:	6923      	ldr	r3, [r4, #16]
 800c34c:	4642      	mov	r2, r8
 800c34e:	4631      	mov	r1, r6
 800c350:	4628      	mov	r0, r5
 800c352:	47b8      	blx	r7
 800c354:	3001      	adds	r0, #1
 800c356:	d12b      	bne.n	800c3b0 <_printf_float+0x23c>
 800c358:	e767      	b.n	800c22a <_printf_float+0xb6>
 800c35a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c35e:	f240 80dd 	bls.w	800c51c <_printf_float+0x3a8>
 800c362:	2200      	movs	r2, #0
 800c364:	2300      	movs	r3, #0
 800c366:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c36a:	f7f4 fbbd 	bl	8000ae8 <__aeabi_dcmpeq>
 800c36e:	2800      	cmp	r0, #0
 800c370:	d033      	beq.n	800c3da <_printf_float+0x266>
 800c372:	2301      	movs	r3, #1
 800c374:	4a36      	ldr	r2, [pc, #216]	@ (800c450 <_printf_float+0x2dc>)
 800c376:	4631      	mov	r1, r6
 800c378:	4628      	mov	r0, r5
 800c37a:	47b8      	blx	r7
 800c37c:	3001      	adds	r0, #1
 800c37e:	f43f af54 	beq.w	800c22a <_printf_float+0xb6>
 800c382:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c386:	4543      	cmp	r3, r8
 800c388:	db02      	blt.n	800c390 <_printf_float+0x21c>
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	07d8      	lsls	r0, r3, #31
 800c38e:	d50f      	bpl.n	800c3b0 <_printf_float+0x23c>
 800c390:	4631      	mov	r1, r6
 800c392:	4628      	mov	r0, r5
 800c394:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c398:	47b8      	blx	r7
 800c39a:	3001      	adds	r0, #1
 800c39c:	f43f af45 	beq.w	800c22a <_printf_float+0xb6>
 800c3a0:	f04f 0900 	mov.w	r9, #0
 800c3a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800c3a8:	f104 0a1a 	add.w	sl, r4, #26
 800c3ac:	45c8      	cmp	r8, r9
 800c3ae:	dc09      	bgt.n	800c3c4 <_printf_float+0x250>
 800c3b0:	6823      	ldr	r3, [r4, #0]
 800c3b2:	079b      	lsls	r3, r3, #30
 800c3b4:	f100 8103 	bmi.w	800c5be <_printf_float+0x44a>
 800c3b8:	68e0      	ldr	r0, [r4, #12]
 800c3ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3bc:	4298      	cmp	r0, r3
 800c3be:	bfb8      	it	lt
 800c3c0:	4618      	movlt	r0, r3
 800c3c2:	e734      	b.n	800c22e <_printf_float+0xba>
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	4652      	mov	r2, sl
 800c3c8:	4631      	mov	r1, r6
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	47b8      	blx	r7
 800c3ce:	3001      	adds	r0, #1
 800c3d0:	f43f af2b 	beq.w	800c22a <_printf_float+0xb6>
 800c3d4:	f109 0901 	add.w	r9, r9, #1
 800c3d8:	e7e8      	b.n	800c3ac <_printf_float+0x238>
 800c3da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dc39      	bgt.n	800c454 <_printf_float+0x2e0>
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	4a1b      	ldr	r2, [pc, #108]	@ (800c450 <_printf_float+0x2dc>)
 800c3e4:	4631      	mov	r1, r6
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	47b8      	blx	r7
 800c3ea:	3001      	adds	r0, #1
 800c3ec:	f43f af1d 	beq.w	800c22a <_printf_float+0xb6>
 800c3f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c3f4:	ea59 0303 	orrs.w	r3, r9, r3
 800c3f8:	d102      	bne.n	800c400 <_printf_float+0x28c>
 800c3fa:	6823      	ldr	r3, [r4, #0]
 800c3fc:	07d9      	lsls	r1, r3, #31
 800c3fe:	d5d7      	bpl.n	800c3b0 <_printf_float+0x23c>
 800c400:	4631      	mov	r1, r6
 800c402:	4628      	mov	r0, r5
 800c404:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c408:	47b8      	blx	r7
 800c40a:	3001      	adds	r0, #1
 800c40c:	f43f af0d 	beq.w	800c22a <_printf_float+0xb6>
 800c410:	f04f 0a00 	mov.w	sl, #0
 800c414:	f104 0b1a 	add.w	fp, r4, #26
 800c418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c41a:	425b      	negs	r3, r3
 800c41c:	4553      	cmp	r3, sl
 800c41e:	dc01      	bgt.n	800c424 <_printf_float+0x2b0>
 800c420:	464b      	mov	r3, r9
 800c422:	e793      	b.n	800c34c <_printf_float+0x1d8>
 800c424:	2301      	movs	r3, #1
 800c426:	465a      	mov	r2, fp
 800c428:	4631      	mov	r1, r6
 800c42a:	4628      	mov	r0, r5
 800c42c:	47b8      	blx	r7
 800c42e:	3001      	adds	r0, #1
 800c430:	f43f aefb 	beq.w	800c22a <_printf_float+0xb6>
 800c434:	f10a 0a01 	add.w	sl, sl, #1
 800c438:	e7ee      	b.n	800c418 <_printf_float+0x2a4>
 800c43a:	bf00      	nop
 800c43c:	7fefffff 	.word	0x7fefffff
 800c440:	08010a9c 	.word	0x08010a9c
 800c444:	08010aa0 	.word	0x08010aa0
 800c448:	08010aa4 	.word	0x08010aa4
 800c44c:	08010aa8 	.word	0x08010aa8
 800c450:	08010aac 	.word	0x08010aac
 800c454:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c456:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c45a:	4553      	cmp	r3, sl
 800c45c:	bfa8      	it	ge
 800c45e:	4653      	movge	r3, sl
 800c460:	2b00      	cmp	r3, #0
 800c462:	4699      	mov	r9, r3
 800c464:	dc36      	bgt.n	800c4d4 <_printf_float+0x360>
 800c466:	f04f 0b00 	mov.w	fp, #0
 800c46a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c46e:	f104 021a 	add.w	r2, r4, #26
 800c472:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c474:	9306      	str	r3, [sp, #24]
 800c476:	eba3 0309 	sub.w	r3, r3, r9
 800c47a:	455b      	cmp	r3, fp
 800c47c:	dc31      	bgt.n	800c4e2 <_printf_float+0x36e>
 800c47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c480:	459a      	cmp	sl, r3
 800c482:	dc3a      	bgt.n	800c4fa <_printf_float+0x386>
 800c484:	6823      	ldr	r3, [r4, #0]
 800c486:	07da      	lsls	r2, r3, #31
 800c488:	d437      	bmi.n	800c4fa <_printf_float+0x386>
 800c48a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c48c:	ebaa 0903 	sub.w	r9, sl, r3
 800c490:	9b06      	ldr	r3, [sp, #24]
 800c492:	ebaa 0303 	sub.w	r3, sl, r3
 800c496:	4599      	cmp	r9, r3
 800c498:	bfa8      	it	ge
 800c49a:	4699      	movge	r9, r3
 800c49c:	f1b9 0f00 	cmp.w	r9, #0
 800c4a0:	dc33      	bgt.n	800c50a <_printf_float+0x396>
 800c4a2:	f04f 0800 	mov.w	r8, #0
 800c4a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4aa:	f104 0b1a 	add.w	fp, r4, #26
 800c4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4b0:	ebaa 0303 	sub.w	r3, sl, r3
 800c4b4:	eba3 0309 	sub.w	r3, r3, r9
 800c4b8:	4543      	cmp	r3, r8
 800c4ba:	f77f af79 	ble.w	800c3b0 <_printf_float+0x23c>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	465a      	mov	r2, fp
 800c4c2:	4631      	mov	r1, r6
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	47b8      	blx	r7
 800c4c8:	3001      	adds	r0, #1
 800c4ca:	f43f aeae 	beq.w	800c22a <_printf_float+0xb6>
 800c4ce:	f108 0801 	add.w	r8, r8, #1
 800c4d2:	e7ec      	b.n	800c4ae <_printf_float+0x33a>
 800c4d4:	4642      	mov	r2, r8
 800c4d6:	4631      	mov	r1, r6
 800c4d8:	4628      	mov	r0, r5
 800c4da:	47b8      	blx	r7
 800c4dc:	3001      	adds	r0, #1
 800c4de:	d1c2      	bne.n	800c466 <_printf_float+0x2f2>
 800c4e0:	e6a3      	b.n	800c22a <_printf_float+0xb6>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	4631      	mov	r1, r6
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	9206      	str	r2, [sp, #24]
 800c4ea:	47b8      	blx	r7
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	f43f ae9c 	beq.w	800c22a <_printf_float+0xb6>
 800c4f2:	f10b 0b01 	add.w	fp, fp, #1
 800c4f6:	9a06      	ldr	r2, [sp, #24]
 800c4f8:	e7bb      	b.n	800c472 <_printf_float+0x2fe>
 800c4fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4fe:	4631      	mov	r1, r6
 800c500:	4628      	mov	r0, r5
 800c502:	47b8      	blx	r7
 800c504:	3001      	adds	r0, #1
 800c506:	d1c0      	bne.n	800c48a <_printf_float+0x316>
 800c508:	e68f      	b.n	800c22a <_printf_float+0xb6>
 800c50a:	9a06      	ldr	r2, [sp, #24]
 800c50c:	464b      	mov	r3, r9
 800c50e:	4631      	mov	r1, r6
 800c510:	4628      	mov	r0, r5
 800c512:	4442      	add	r2, r8
 800c514:	47b8      	blx	r7
 800c516:	3001      	adds	r0, #1
 800c518:	d1c3      	bne.n	800c4a2 <_printf_float+0x32e>
 800c51a:	e686      	b.n	800c22a <_printf_float+0xb6>
 800c51c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c520:	f1ba 0f01 	cmp.w	sl, #1
 800c524:	dc01      	bgt.n	800c52a <_printf_float+0x3b6>
 800c526:	07db      	lsls	r3, r3, #31
 800c528:	d536      	bpl.n	800c598 <_printf_float+0x424>
 800c52a:	2301      	movs	r3, #1
 800c52c:	4642      	mov	r2, r8
 800c52e:	4631      	mov	r1, r6
 800c530:	4628      	mov	r0, r5
 800c532:	47b8      	blx	r7
 800c534:	3001      	adds	r0, #1
 800c536:	f43f ae78 	beq.w	800c22a <_printf_float+0xb6>
 800c53a:	4631      	mov	r1, r6
 800c53c:	4628      	mov	r0, r5
 800c53e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c542:	47b8      	blx	r7
 800c544:	3001      	adds	r0, #1
 800c546:	f43f ae70 	beq.w	800c22a <_printf_float+0xb6>
 800c54a:	2200      	movs	r2, #0
 800c54c:	2300      	movs	r3, #0
 800c54e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c552:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c556:	f7f4 fac7 	bl	8000ae8 <__aeabi_dcmpeq>
 800c55a:	b9c0      	cbnz	r0, 800c58e <_printf_float+0x41a>
 800c55c:	4653      	mov	r3, sl
 800c55e:	f108 0201 	add.w	r2, r8, #1
 800c562:	4631      	mov	r1, r6
 800c564:	4628      	mov	r0, r5
 800c566:	47b8      	blx	r7
 800c568:	3001      	adds	r0, #1
 800c56a:	d10c      	bne.n	800c586 <_printf_float+0x412>
 800c56c:	e65d      	b.n	800c22a <_printf_float+0xb6>
 800c56e:	2301      	movs	r3, #1
 800c570:	465a      	mov	r2, fp
 800c572:	4631      	mov	r1, r6
 800c574:	4628      	mov	r0, r5
 800c576:	47b8      	blx	r7
 800c578:	3001      	adds	r0, #1
 800c57a:	f43f ae56 	beq.w	800c22a <_printf_float+0xb6>
 800c57e:	f108 0801 	add.w	r8, r8, #1
 800c582:	45d0      	cmp	r8, sl
 800c584:	dbf3      	blt.n	800c56e <_printf_float+0x3fa>
 800c586:	464b      	mov	r3, r9
 800c588:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c58c:	e6df      	b.n	800c34e <_printf_float+0x1da>
 800c58e:	f04f 0800 	mov.w	r8, #0
 800c592:	f104 0b1a 	add.w	fp, r4, #26
 800c596:	e7f4      	b.n	800c582 <_printf_float+0x40e>
 800c598:	2301      	movs	r3, #1
 800c59a:	4642      	mov	r2, r8
 800c59c:	e7e1      	b.n	800c562 <_printf_float+0x3ee>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	464a      	mov	r2, r9
 800c5a2:	4631      	mov	r1, r6
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	47b8      	blx	r7
 800c5a8:	3001      	adds	r0, #1
 800c5aa:	f43f ae3e 	beq.w	800c22a <_printf_float+0xb6>
 800c5ae:	f108 0801 	add.w	r8, r8, #1
 800c5b2:	68e3      	ldr	r3, [r4, #12]
 800c5b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c5b6:	1a5b      	subs	r3, r3, r1
 800c5b8:	4543      	cmp	r3, r8
 800c5ba:	dcf0      	bgt.n	800c59e <_printf_float+0x42a>
 800c5bc:	e6fc      	b.n	800c3b8 <_printf_float+0x244>
 800c5be:	f04f 0800 	mov.w	r8, #0
 800c5c2:	f104 0919 	add.w	r9, r4, #25
 800c5c6:	e7f4      	b.n	800c5b2 <_printf_float+0x43e>

0800c5c8 <_printf_common>:
 800c5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5cc:	4616      	mov	r6, r2
 800c5ce:	4698      	mov	r8, r3
 800c5d0:	688a      	ldr	r2, [r1, #8]
 800c5d2:	4607      	mov	r7, r0
 800c5d4:	690b      	ldr	r3, [r1, #16]
 800c5d6:	460c      	mov	r4, r1
 800c5d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	bfb8      	it	lt
 800c5e0:	4613      	movlt	r3, r2
 800c5e2:	6033      	str	r3, [r6, #0]
 800c5e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c5e8:	b10a      	cbz	r2, 800c5ee <_printf_common+0x26>
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	6033      	str	r3, [r6, #0]
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	0699      	lsls	r1, r3, #26
 800c5f2:	bf42      	ittt	mi
 800c5f4:	6833      	ldrmi	r3, [r6, #0]
 800c5f6:	3302      	addmi	r3, #2
 800c5f8:	6033      	strmi	r3, [r6, #0]
 800c5fa:	6825      	ldr	r5, [r4, #0]
 800c5fc:	f015 0506 	ands.w	r5, r5, #6
 800c600:	d106      	bne.n	800c610 <_printf_common+0x48>
 800c602:	f104 0a19 	add.w	sl, r4, #25
 800c606:	68e3      	ldr	r3, [r4, #12]
 800c608:	6832      	ldr	r2, [r6, #0]
 800c60a:	1a9b      	subs	r3, r3, r2
 800c60c:	42ab      	cmp	r3, r5
 800c60e:	dc2b      	bgt.n	800c668 <_printf_common+0xa0>
 800c610:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c614:	6822      	ldr	r2, [r4, #0]
 800c616:	3b00      	subs	r3, #0
 800c618:	bf18      	it	ne
 800c61a:	2301      	movne	r3, #1
 800c61c:	0692      	lsls	r2, r2, #26
 800c61e:	d430      	bmi.n	800c682 <_printf_common+0xba>
 800c620:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c624:	4641      	mov	r1, r8
 800c626:	4638      	mov	r0, r7
 800c628:	47c8      	blx	r9
 800c62a:	3001      	adds	r0, #1
 800c62c:	d023      	beq.n	800c676 <_printf_common+0xae>
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	341a      	adds	r4, #26
 800c632:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c636:	f003 0306 	and.w	r3, r3, #6
 800c63a:	2b04      	cmp	r3, #4
 800c63c:	bf0a      	itet	eq
 800c63e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c642:	2500      	movne	r5, #0
 800c644:	6833      	ldreq	r3, [r6, #0]
 800c646:	f04f 0600 	mov.w	r6, #0
 800c64a:	bf08      	it	eq
 800c64c:	1aed      	subeq	r5, r5, r3
 800c64e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c652:	bf08      	it	eq
 800c654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c658:	4293      	cmp	r3, r2
 800c65a:	bfc4      	itt	gt
 800c65c:	1a9b      	subgt	r3, r3, r2
 800c65e:	18ed      	addgt	r5, r5, r3
 800c660:	42b5      	cmp	r5, r6
 800c662:	d11a      	bne.n	800c69a <_printf_common+0xd2>
 800c664:	2000      	movs	r0, #0
 800c666:	e008      	b.n	800c67a <_printf_common+0xb2>
 800c668:	2301      	movs	r3, #1
 800c66a:	4652      	mov	r2, sl
 800c66c:	4641      	mov	r1, r8
 800c66e:	4638      	mov	r0, r7
 800c670:	47c8      	blx	r9
 800c672:	3001      	adds	r0, #1
 800c674:	d103      	bne.n	800c67e <_printf_common+0xb6>
 800c676:	f04f 30ff 	mov.w	r0, #4294967295
 800c67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c67e:	3501      	adds	r5, #1
 800c680:	e7c1      	b.n	800c606 <_printf_common+0x3e>
 800c682:	18e1      	adds	r1, r4, r3
 800c684:	1c5a      	adds	r2, r3, #1
 800c686:	2030      	movs	r0, #48	@ 0x30
 800c688:	3302      	adds	r3, #2
 800c68a:	4422      	add	r2, r4
 800c68c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c690:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c694:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c698:	e7c2      	b.n	800c620 <_printf_common+0x58>
 800c69a:	2301      	movs	r3, #1
 800c69c:	4622      	mov	r2, r4
 800c69e:	4641      	mov	r1, r8
 800c6a0:	4638      	mov	r0, r7
 800c6a2:	47c8      	blx	r9
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	d0e6      	beq.n	800c676 <_printf_common+0xae>
 800c6a8:	3601      	adds	r6, #1
 800c6aa:	e7d9      	b.n	800c660 <_printf_common+0x98>

0800c6ac <_printf_i>:
 800c6ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6b0:	7e0f      	ldrb	r7, [r1, #24]
 800c6b2:	4691      	mov	r9, r2
 800c6b4:	4680      	mov	r8, r0
 800c6b6:	460c      	mov	r4, r1
 800c6b8:	2f78      	cmp	r7, #120	@ 0x78
 800c6ba:	469a      	mov	sl, r3
 800c6bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c6be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c6c2:	d807      	bhi.n	800c6d4 <_printf_i+0x28>
 800c6c4:	2f62      	cmp	r7, #98	@ 0x62
 800c6c6:	d80a      	bhi.n	800c6de <_printf_i+0x32>
 800c6c8:	2f00      	cmp	r7, #0
 800c6ca:	f000 80d2 	beq.w	800c872 <_printf_i+0x1c6>
 800c6ce:	2f58      	cmp	r7, #88	@ 0x58
 800c6d0:	f000 80b9 	beq.w	800c846 <_printf_i+0x19a>
 800c6d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c6dc:	e03a      	b.n	800c754 <_printf_i+0xa8>
 800c6de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c6e2:	2b15      	cmp	r3, #21
 800c6e4:	d8f6      	bhi.n	800c6d4 <_printf_i+0x28>
 800c6e6:	a101      	add	r1, pc, #4	@ (adr r1, 800c6ec <_printf_i+0x40>)
 800c6e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6ec:	0800c745 	.word	0x0800c745
 800c6f0:	0800c759 	.word	0x0800c759
 800c6f4:	0800c6d5 	.word	0x0800c6d5
 800c6f8:	0800c6d5 	.word	0x0800c6d5
 800c6fc:	0800c6d5 	.word	0x0800c6d5
 800c700:	0800c6d5 	.word	0x0800c6d5
 800c704:	0800c759 	.word	0x0800c759
 800c708:	0800c6d5 	.word	0x0800c6d5
 800c70c:	0800c6d5 	.word	0x0800c6d5
 800c710:	0800c6d5 	.word	0x0800c6d5
 800c714:	0800c6d5 	.word	0x0800c6d5
 800c718:	0800c859 	.word	0x0800c859
 800c71c:	0800c783 	.word	0x0800c783
 800c720:	0800c813 	.word	0x0800c813
 800c724:	0800c6d5 	.word	0x0800c6d5
 800c728:	0800c6d5 	.word	0x0800c6d5
 800c72c:	0800c87b 	.word	0x0800c87b
 800c730:	0800c6d5 	.word	0x0800c6d5
 800c734:	0800c783 	.word	0x0800c783
 800c738:	0800c6d5 	.word	0x0800c6d5
 800c73c:	0800c6d5 	.word	0x0800c6d5
 800c740:	0800c81b 	.word	0x0800c81b
 800c744:	6833      	ldr	r3, [r6, #0]
 800c746:	1d1a      	adds	r2, r3, #4
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	6032      	str	r2, [r6, #0]
 800c74c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c750:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c754:	2301      	movs	r3, #1
 800c756:	e09d      	b.n	800c894 <_printf_i+0x1e8>
 800c758:	6833      	ldr	r3, [r6, #0]
 800c75a:	6820      	ldr	r0, [r4, #0]
 800c75c:	1d19      	adds	r1, r3, #4
 800c75e:	6031      	str	r1, [r6, #0]
 800c760:	0606      	lsls	r6, r0, #24
 800c762:	d501      	bpl.n	800c768 <_printf_i+0xbc>
 800c764:	681d      	ldr	r5, [r3, #0]
 800c766:	e003      	b.n	800c770 <_printf_i+0xc4>
 800c768:	0645      	lsls	r5, r0, #25
 800c76a:	d5fb      	bpl.n	800c764 <_printf_i+0xb8>
 800c76c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c770:	2d00      	cmp	r5, #0
 800c772:	da03      	bge.n	800c77c <_printf_i+0xd0>
 800c774:	232d      	movs	r3, #45	@ 0x2d
 800c776:	426d      	negs	r5, r5
 800c778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c77c:	4859      	ldr	r0, [pc, #356]	@ (800c8e4 <_printf_i+0x238>)
 800c77e:	230a      	movs	r3, #10
 800c780:	e011      	b.n	800c7a6 <_printf_i+0xfa>
 800c782:	6821      	ldr	r1, [r4, #0]
 800c784:	6833      	ldr	r3, [r6, #0]
 800c786:	0608      	lsls	r0, r1, #24
 800c788:	f853 5b04 	ldr.w	r5, [r3], #4
 800c78c:	d402      	bmi.n	800c794 <_printf_i+0xe8>
 800c78e:	0649      	lsls	r1, r1, #25
 800c790:	bf48      	it	mi
 800c792:	b2ad      	uxthmi	r5, r5
 800c794:	2f6f      	cmp	r7, #111	@ 0x6f
 800c796:	6033      	str	r3, [r6, #0]
 800c798:	4852      	ldr	r0, [pc, #328]	@ (800c8e4 <_printf_i+0x238>)
 800c79a:	bf14      	ite	ne
 800c79c:	230a      	movne	r3, #10
 800c79e:	2308      	moveq	r3, #8
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c7a6:	6866      	ldr	r6, [r4, #4]
 800c7a8:	2e00      	cmp	r6, #0
 800c7aa:	60a6      	str	r6, [r4, #8]
 800c7ac:	bfa2      	ittt	ge
 800c7ae:	6821      	ldrge	r1, [r4, #0]
 800c7b0:	f021 0104 	bicge.w	r1, r1, #4
 800c7b4:	6021      	strge	r1, [r4, #0]
 800c7b6:	b90d      	cbnz	r5, 800c7bc <_printf_i+0x110>
 800c7b8:	2e00      	cmp	r6, #0
 800c7ba:	d04b      	beq.n	800c854 <_printf_i+0x1a8>
 800c7bc:	4616      	mov	r6, r2
 800c7be:	fbb5 f1f3 	udiv	r1, r5, r3
 800c7c2:	fb03 5711 	mls	r7, r3, r1, r5
 800c7c6:	5dc7      	ldrb	r7, [r0, r7]
 800c7c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c7cc:	462f      	mov	r7, r5
 800c7ce:	460d      	mov	r5, r1
 800c7d0:	42bb      	cmp	r3, r7
 800c7d2:	d9f4      	bls.n	800c7be <_printf_i+0x112>
 800c7d4:	2b08      	cmp	r3, #8
 800c7d6:	d10b      	bne.n	800c7f0 <_printf_i+0x144>
 800c7d8:	6823      	ldr	r3, [r4, #0]
 800c7da:	07df      	lsls	r7, r3, #31
 800c7dc:	d508      	bpl.n	800c7f0 <_printf_i+0x144>
 800c7de:	6923      	ldr	r3, [r4, #16]
 800c7e0:	6861      	ldr	r1, [r4, #4]
 800c7e2:	4299      	cmp	r1, r3
 800c7e4:	bfde      	ittt	le
 800c7e6:	2330      	movle	r3, #48	@ 0x30
 800c7e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c7ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c7f0:	1b92      	subs	r2, r2, r6
 800c7f2:	6122      	str	r2, [r4, #16]
 800c7f4:	464b      	mov	r3, r9
 800c7f6:	aa03      	add	r2, sp, #12
 800c7f8:	4621      	mov	r1, r4
 800c7fa:	4640      	mov	r0, r8
 800c7fc:	f8cd a000 	str.w	sl, [sp]
 800c800:	f7ff fee2 	bl	800c5c8 <_printf_common>
 800c804:	3001      	adds	r0, #1
 800c806:	d14a      	bne.n	800c89e <_printf_i+0x1f2>
 800c808:	f04f 30ff 	mov.w	r0, #4294967295
 800c80c:	b004      	add	sp, #16
 800c80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	f043 0320 	orr.w	r3, r3, #32
 800c818:	6023      	str	r3, [r4, #0]
 800c81a:	2778      	movs	r7, #120	@ 0x78
 800c81c:	4832      	ldr	r0, [pc, #200]	@ (800c8e8 <_printf_i+0x23c>)
 800c81e:	6823      	ldr	r3, [r4, #0]
 800c820:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c824:	061f      	lsls	r7, r3, #24
 800c826:	6831      	ldr	r1, [r6, #0]
 800c828:	f851 5b04 	ldr.w	r5, [r1], #4
 800c82c:	d402      	bmi.n	800c834 <_printf_i+0x188>
 800c82e:	065f      	lsls	r7, r3, #25
 800c830:	bf48      	it	mi
 800c832:	b2ad      	uxthmi	r5, r5
 800c834:	6031      	str	r1, [r6, #0]
 800c836:	07d9      	lsls	r1, r3, #31
 800c838:	bf44      	itt	mi
 800c83a:	f043 0320 	orrmi.w	r3, r3, #32
 800c83e:	6023      	strmi	r3, [r4, #0]
 800c840:	b11d      	cbz	r5, 800c84a <_printf_i+0x19e>
 800c842:	2310      	movs	r3, #16
 800c844:	e7ac      	b.n	800c7a0 <_printf_i+0xf4>
 800c846:	4827      	ldr	r0, [pc, #156]	@ (800c8e4 <_printf_i+0x238>)
 800c848:	e7e9      	b.n	800c81e <_printf_i+0x172>
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	f023 0320 	bic.w	r3, r3, #32
 800c850:	6023      	str	r3, [r4, #0]
 800c852:	e7f6      	b.n	800c842 <_printf_i+0x196>
 800c854:	4616      	mov	r6, r2
 800c856:	e7bd      	b.n	800c7d4 <_printf_i+0x128>
 800c858:	6833      	ldr	r3, [r6, #0]
 800c85a:	6825      	ldr	r5, [r4, #0]
 800c85c:	1d18      	adds	r0, r3, #4
 800c85e:	6961      	ldr	r1, [r4, #20]
 800c860:	6030      	str	r0, [r6, #0]
 800c862:	062e      	lsls	r6, r5, #24
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	d501      	bpl.n	800c86c <_printf_i+0x1c0>
 800c868:	6019      	str	r1, [r3, #0]
 800c86a:	e002      	b.n	800c872 <_printf_i+0x1c6>
 800c86c:	0668      	lsls	r0, r5, #25
 800c86e:	d5fb      	bpl.n	800c868 <_printf_i+0x1bc>
 800c870:	8019      	strh	r1, [r3, #0]
 800c872:	2300      	movs	r3, #0
 800c874:	4616      	mov	r6, r2
 800c876:	6123      	str	r3, [r4, #16]
 800c878:	e7bc      	b.n	800c7f4 <_printf_i+0x148>
 800c87a:	6833      	ldr	r3, [r6, #0]
 800c87c:	2100      	movs	r1, #0
 800c87e:	1d1a      	adds	r2, r3, #4
 800c880:	6032      	str	r2, [r6, #0]
 800c882:	681e      	ldr	r6, [r3, #0]
 800c884:	6862      	ldr	r2, [r4, #4]
 800c886:	4630      	mov	r0, r6
 800c888:	f000 fd0b 	bl	800d2a2 <memchr>
 800c88c:	b108      	cbz	r0, 800c892 <_printf_i+0x1e6>
 800c88e:	1b80      	subs	r0, r0, r6
 800c890:	6060      	str	r0, [r4, #4]
 800c892:	6863      	ldr	r3, [r4, #4]
 800c894:	6123      	str	r3, [r4, #16]
 800c896:	2300      	movs	r3, #0
 800c898:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c89c:	e7aa      	b.n	800c7f4 <_printf_i+0x148>
 800c89e:	6923      	ldr	r3, [r4, #16]
 800c8a0:	4632      	mov	r2, r6
 800c8a2:	4649      	mov	r1, r9
 800c8a4:	4640      	mov	r0, r8
 800c8a6:	47d0      	blx	sl
 800c8a8:	3001      	adds	r0, #1
 800c8aa:	d0ad      	beq.n	800c808 <_printf_i+0x15c>
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	079b      	lsls	r3, r3, #30
 800c8b0:	d413      	bmi.n	800c8da <_printf_i+0x22e>
 800c8b2:	68e0      	ldr	r0, [r4, #12]
 800c8b4:	9b03      	ldr	r3, [sp, #12]
 800c8b6:	4298      	cmp	r0, r3
 800c8b8:	bfb8      	it	lt
 800c8ba:	4618      	movlt	r0, r3
 800c8bc:	e7a6      	b.n	800c80c <_printf_i+0x160>
 800c8be:	2301      	movs	r3, #1
 800c8c0:	4632      	mov	r2, r6
 800c8c2:	4649      	mov	r1, r9
 800c8c4:	4640      	mov	r0, r8
 800c8c6:	47d0      	blx	sl
 800c8c8:	3001      	adds	r0, #1
 800c8ca:	d09d      	beq.n	800c808 <_printf_i+0x15c>
 800c8cc:	3501      	adds	r5, #1
 800c8ce:	68e3      	ldr	r3, [r4, #12]
 800c8d0:	9903      	ldr	r1, [sp, #12]
 800c8d2:	1a5b      	subs	r3, r3, r1
 800c8d4:	42ab      	cmp	r3, r5
 800c8d6:	dcf2      	bgt.n	800c8be <_printf_i+0x212>
 800c8d8:	e7eb      	b.n	800c8b2 <_printf_i+0x206>
 800c8da:	2500      	movs	r5, #0
 800c8dc:	f104 0619 	add.w	r6, r4, #25
 800c8e0:	e7f5      	b.n	800c8ce <_printf_i+0x222>
 800c8e2:	bf00      	nop
 800c8e4:	08010aae 	.word	0x08010aae
 800c8e8:	08010abf 	.word	0x08010abf

0800c8ec <_scanf_float>:
 800c8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f0:	b087      	sub	sp, #28
 800c8f2:	4617      	mov	r7, r2
 800c8f4:	4680      	mov	r8, r0
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	9303      	str	r3, [sp, #12]
 800c8fa:	688b      	ldr	r3, [r1, #8]
 800c8fc:	1e5a      	subs	r2, r3, #1
 800c8fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c902:	460a      	mov	r2, r1
 800c904:	bf89      	itett	hi
 800c906:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c90a:	f04f 0b00 	movls.w	fp, #0
 800c90e:	eb03 0b05 	addhi.w	fp, r3, r5
 800c912:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c916:	f04f 0500 	mov.w	r5, #0
 800c91a:	bf88      	it	hi
 800c91c:	608b      	strhi	r3, [r1, #8]
 800c91e:	680b      	ldr	r3, [r1, #0]
 800c920:	46aa      	mov	sl, r5
 800c922:	46a9      	mov	r9, r5
 800c924:	9502      	str	r5, [sp, #8]
 800c926:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c92a:	f842 3b1c 	str.w	r3, [r2], #28
 800c92e:	4616      	mov	r6, r2
 800c930:	9201      	str	r2, [sp, #4]
 800c932:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c936:	68a2      	ldr	r2, [r4, #8]
 800c938:	b152      	cbz	r2, 800c950 <_scanf_float+0x64>
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	2b4e      	cmp	r3, #78	@ 0x4e
 800c940:	d864      	bhi.n	800ca0c <_scanf_float+0x120>
 800c942:	2b40      	cmp	r3, #64	@ 0x40
 800c944:	d83c      	bhi.n	800c9c0 <_scanf_float+0xd4>
 800c946:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c94a:	b2c8      	uxtb	r0, r1
 800c94c:	280e      	cmp	r0, #14
 800c94e:	d93a      	bls.n	800c9c6 <_scanf_float+0xda>
 800c950:	f1b9 0f00 	cmp.w	r9, #0
 800c954:	d003      	beq.n	800c95e <_scanf_float+0x72>
 800c956:	6823      	ldr	r3, [r4, #0]
 800c958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c95c:	6023      	str	r3, [r4, #0]
 800c95e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c962:	f1ba 0f01 	cmp.w	sl, #1
 800c966:	f200 8117 	bhi.w	800cb98 <_scanf_float+0x2ac>
 800c96a:	9b01      	ldr	r3, [sp, #4]
 800c96c:	429e      	cmp	r6, r3
 800c96e:	f200 8108 	bhi.w	800cb82 <_scanf_float+0x296>
 800c972:	2001      	movs	r0, #1
 800c974:	b007      	add	sp, #28
 800c976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c97a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c97e:	2a0d      	cmp	r2, #13
 800c980:	d8e6      	bhi.n	800c950 <_scanf_float+0x64>
 800c982:	a101      	add	r1, pc, #4	@ (adr r1, 800c988 <_scanf_float+0x9c>)
 800c984:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c988:	0800cacf 	.word	0x0800cacf
 800c98c:	0800c951 	.word	0x0800c951
 800c990:	0800c951 	.word	0x0800c951
 800c994:	0800c951 	.word	0x0800c951
 800c998:	0800cb2f 	.word	0x0800cb2f
 800c99c:	0800cb07 	.word	0x0800cb07
 800c9a0:	0800c951 	.word	0x0800c951
 800c9a4:	0800c951 	.word	0x0800c951
 800c9a8:	0800cadd 	.word	0x0800cadd
 800c9ac:	0800c951 	.word	0x0800c951
 800c9b0:	0800c951 	.word	0x0800c951
 800c9b4:	0800c951 	.word	0x0800c951
 800c9b8:	0800c951 	.word	0x0800c951
 800c9bc:	0800ca95 	.word	0x0800ca95
 800c9c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c9c4:	e7db      	b.n	800c97e <_scanf_float+0x92>
 800c9c6:	290e      	cmp	r1, #14
 800c9c8:	d8c2      	bhi.n	800c950 <_scanf_float+0x64>
 800c9ca:	a001      	add	r0, pc, #4	@ (adr r0, 800c9d0 <_scanf_float+0xe4>)
 800c9cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c9d0:	0800ca85 	.word	0x0800ca85
 800c9d4:	0800c951 	.word	0x0800c951
 800c9d8:	0800ca85 	.word	0x0800ca85
 800c9dc:	0800cb1b 	.word	0x0800cb1b
 800c9e0:	0800c951 	.word	0x0800c951
 800c9e4:	0800ca2d 	.word	0x0800ca2d
 800c9e8:	0800ca6b 	.word	0x0800ca6b
 800c9ec:	0800ca6b 	.word	0x0800ca6b
 800c9f0:	0800ca6b 	.word	0x0800ca6b
 800c9f4:	0800ca6b 	.word	0x0800ca6b
 800c9f8:	0800ca6b 	.word	0x0800ca6b
 800c9fc:	0800ca6b 	.word	0x0800ca6b
 800ca00:	0800ca6b 	.word	0x0800ca6b
 800ca04:	0800ca6b 	.word	0x0800ca6b
 800ca08:	0800ca6b 	.word	0x0800ca6b
 800ca0c:	2b6e      	cmp	r3, #110	@ 0x6e
 800ca0e:	d809      	bhi.n	800ca24 <_scanf_float+0x138>
 800ca10:	2b60      	cmp	r3, #96	@ 0x60
 800ca12:	d8b2      	bhi.n	800c97a <_scanf_float+0x8e>
 800ca14:	2b54      	cmp	r3, #84	@ 0x54
 800ca16:	d07b      	beq.n	800cb10 <_scanf_float+0x224>
 800ca18:	2b59      	cmp	r3, #89	@ 0x59
 800ca1a:	d199      	bne.n	800c950 <_scanf_float+0x64>
 800ca1c:	2d07      	cmp	r5, #7
 800ca1e:	d197      	bne.n	800c950 <_scanf_float+0x64>
 800ca20:	2508      	movs	r5, #8
 800ca22:	e02c      	b.n	800ca7e <_scanf_float+0x192>
 800ca24:	2b74      	cmp	r3, #116	@ 0x74
 800ca26:	d073      	beq.n	800cb10 <_scanf_float+0x224>
 800ca28:	2b79      	cmp	r3, #121	@ 0x79
 800ca2a:	e7f6      	b.n	800ca1a <_scanf_float+0x12e>
 800ca2c:	6821      	ldr	r1, [r4, #0]
 800ca2e:	05c8      	lsls	r0, r1, #23
 800ca30:	d51b      	bpl.n	800ca6a <_scanf_float+0x17e>
 800ca32:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ca36:	f109 0901 	add.w	r9, r9, #1
 800ca3a:	6021      	str	r1, [r4, #0]
 800ca3c:	f1bb 0f00 	cmp.w	fp, #0
 800ca40:	d003      	beq.n	800ca4a <_scanf_float+0x15e>
 800ca42:	3201      	adds	r2, #1
 800ca44:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca48:	60a2      	str	r2, [r4, #8]
 800ca4a:	68a3      	ldr	r3, [r4, #8]
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	60a3      	str	r3, [r4, #8]
 800ca50:	6923      	ldr	r3, [r4, #16]
 800ca52:	3301      	adds	r3, #1
 800ca54:	6123      	str	r3, [r4, #16]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	607b      	str	r3, [r7, #4]
 800ca5e:	f340 8087 	ble.w	800cb70 <_scanf_float+0x284>
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	3301      	adds	r3, #1
 800ca66:	603b      	str	r3, [r7, #0]
 800ca68:	e765      	b.n	800c936 <_scanf_float+0x4a>
 800ca6a:	eb1a 0105 	adds.w	r1, sl, r5
 800ca6e:	f47f af6f 	bne.w	800c950 <_scanf_float+0x64>
 800ca72:	6822      	ldr	r2, [r4, #0]
 800ca74:	460d      	mov	r5, r1
 800ca76:	468a      	mov	sl, r1
 800ca78:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ca7c:	6022      	str	r2, [r4, #0]
 800ca7e:	f806 3b01 	strb.w	r3, [r6], #1
 800ca82:	e7e2      	b.n	800ca4a <_scanf_float+0x15e>
 800ca84:	6822      	ldr	r2, [r4, #0]
 800ca86:	0610      	lsls	r0, r2, #24
 800ca88:	f57f af62 	bpl.w	800c950 <_scanf_float+0x64>
 800ca8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ca90:	6022      	str	r2, [r4, #0]
 800ca92:	e7f4      	b.n	800ca7e <_scanf_float+0x192>
 800ca94:	f1ba 0f00 	cmp.w	sl, #0
 800ca98:	d10e      	bne.n	800cab8 <_scanf_float+0x1cc>
 800ca9a:	f1b9 0f00 	cmp.w	r9, #0
 800ca9e:	d10e      	bne.n	800cabe <_scanf_float+0x1d2>
 800caa0:	6822      	ldr	r2, [r4, #0]
 800caa2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800caa6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800caaa:	d108      	bne.n	800cabe <_scanf_float+0x1d2>
 800caac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cab0:	f04f 0a01 	mov.w	sl, #1
 800cab4:	6022      	str	r2, [r4, #0]
 800cab6:	e7e2      	b.n	800ca7e <_scanf_float+0x192>
 800cab8:	f1ba 0f02 	cmp.w	sl, #2
 800cabc:	d055      	beq.n	800cb6a <_scanf_float+0x27e>
 800cabe:	2d01      	cmp	r5, #1
 800cac0:	d002      	beq.n	800cac8 <_scanf_float+0x1dc>
 800cac2:	2d04      	cmp	r5, #4
 800cac4:	f47f af44 	bne.w	800c950 <_scanf_float+0x64>
 800cac8:	3501      	adds	r5, #1
 800caca:	b2ed      	uxtb	r5, r5
 800cacc:	e7d7      	b.n	800ca7e <_scanf_float+0x192>
 800cace:	f1ba 0f01 	cmp.w	sl, #1
 800cad2:	f47f af3d 	bne.w	800c950 <_scanf_float+0x64>
 800cad6:	f04f 0a02 	mov.w	sl, #2
 800cada:	e7d0      	b.n	800ca7e <_scanf_float+0x192>
 800cadc:	b97d      	cbnz	r5, 800cafe <_scanf_float+0x212>
 800cade:	f1b9 0f00 	cmp.w	r9, #0
 800cae2:	f47f af38 	bne.w	800c956 <_scanf_float+0x6a>
 800cae6:	6822      	ldr	r2, [r4, #0]
 800cae8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800caec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800caf0:	f040 8107 	bne.w	800cd02 <_scanf_float+0x416>
 800caf4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800caf8:	2501      	movs	r5, #1
 800cafa:	6022      	str	r2, [r4, #0]
 800cafc:	e7bf      	b.n	800ca7e <_scanf_float+0x192>
 800cafe:	2d03      	cmp	r5, #3
 800cb00:	d0e2      	beq.n	800cac8 <_scanf_float+0x1dc>
 800cb02:	2d05      	cmp	r5, #5
 800cb04:	e7de      	b.n	800cac4 <_scanf_float+0x1d8>
 800cb06:	2d02      	cmp	r5, #2
 800cb08:	f47f af22 	bne.w	800c950 <_scanf_float+0x64>
 800cb0c:	2503      	movs	r5, #3
 800cb0e:	e7b6      	b.n	800ca7e <_scanf_float+0x192>
 800cb10:	2d06      	cmp	r5, #6
 800cb12:	f47f af1d 	bne.w	800c950 <_scanf_float+0x64>
 800cb16:	2507      	movs	r5, #7
 800cb18:	e7b1      	b.n	800ca7e <_scanf_float+0x192>
 800cb1a:	6822      	ldr	r2, [r4, #0]
 800cb1c:	0591      	lsls	r1, r2, #22
 800cb1e:	f57f af17 	bpl.w	800c950 <_scanf_float+0x64>
 800cb22:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cb26:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb2a:	6022      	str	r2, [r4, #0]
 800cb2c:	e7a7      	b.n	800ca7e <_scanf_float+0x192>
 800cb2e:	6822      	ldr	r2, [r4, #0]
 800cb30:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cb34:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cb38:	d006      	beq.n	800cb48 <_scanf_float+0x25c>
 800cb3a:	0550      	lsls	r0, r2, #21
 800cb3c:	f57f af08 	bpl.w	800c950 <_scanf_float+0x64>
 800cb40:	f1b9 0f00 	cmp.w	r9, #0
 800cb44:	f000 80dd 	beq.w	800cd02 <_scanf_float+0x416>
 800cb48:	0591      	lsls	r1, r2, #22
 800cb4a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cb4e:	bf58      	it	pl
 800cb50:	9902      	ldrpl	r1, [sp, #8]
 800cb52:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cb56:	bf58      	it	pl
 800cb58:	eba9 0101 	subpl.w	r1, r9, r1
 800cb5c:	6022      	str	r2, [r4, #0]
 800cb5e:	f04f 0900 	mov.w	r9, #0
 800cb62:	bf58      	it	pl
 800cb64:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cb68:	e789      	b.n	800ca7e <_scanf_float+0x192>
 800cb6a:	f04f 0a03 	mov.w	sl, #3
 800cb6e:	e786      	b.n	800ca7e <_scanf_float+0x192>
 800cb70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cb74:	4639      	mov	r1, r7
 800cb76:	4640      	mov	r0, r8
 800cb78:	4798      	blx	r3
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	f43f aedb 	beq.w	800c936 <_scanf_float+0x4a>
 800cb80:	e6e6      	b.n	800c950 <_scanf_float+0x64>
 800cb82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb86:	463a      	mov	r2, r7
 800cb88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb8c:	4640      	mov	r0, r8
 800cb8e:	4798      	blx	r3
 800cb90:	6923      	ldr	r3, [r4, #16]
 800cb92:	3b01      	subs	r3, #1
 800cb94:	6123      	str	r3, [r4, #16]
 800cb96:	e6e8      	b.n	800c96a <_scanf_float+0x7e>
 800cb98:	1e6b      	subs	r3, r5, #1
 800cb9a:	2b06      	cmp	r3, #6
 800cb9c:	d824      	bhi.n	800cbe8 <_scanf_float+0x2fc>
 800cb9e:	2d02      	cmp	r5, #2
 800cba0:	d836      	bhi.n	800cc10 <_scanf_float+0x324>
 800cba2:	9b01      	ldr	r3, [sp, #4]
 800cba4:	429e      	cmp	r6, r3
 800cba6:	f67f aee4 	bls.w	800c972 <_scanf_float+0x86>
 800cbaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbae:	463a      	mov	r2, r7
 800cbb0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cbb4:	4640      	mov	r0, r8
 800cbb6:	4798      	blx	r3
 800cbb8:	6923      	ldr	r3, [r4, #16]
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	6123      	str	r3, [r4, #16]
 800cbbe:	e7f0      	b.n	800cba2 <_scanf_float+0x2b6>
 800cbc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbc4:	463a      	mov	r2, r7
 800cbc6:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cbca:	4640      	mov	r0, r8
 800cbcc:	4798      	blx	r3
 800cbce:	6923      	ldr	r3, [r4, #16]
 800cbd0:	3b01      	subs	r3, #1
 800cbd2:	6123      	str	r3, [r4, #16]
 800cbd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cbd8:	fa5f fa8a 	uxtb.w	sl, sl
 800cbdc:	f1ba 0f02 	cmp.w	sl, #2
 800cbe0:	d1ee      	bne.n	800cbc0 <_scanf_float+0x2d4>
 800cbe2:	3d03      	subs	r5, #3
 800cbe4:	b2ed      	uxtb	r5, r5
 800cbe6:	1b76      	subs	r6, r6, r5
 800cbe8:	6823      	ldr	r3, [r4, #0]
 800cbea:	05da      	lsls	r2, r3, #23
 800cbec:	d52f      	bpl.n	800cc4e <_scanf_float+0x362>
 800cbee:	055b      	lsls	r3, r3, #21
 800cbf0:	d511      	bpl.n	800cc16 <_scanf_float+0x32a>
 800cbf2:	9b01      	ldr	r3, [sp, #4]
 800cbf4:	429e      	cmp	r6, r3
 800cbf6:	f67f aebc 	bls.w	800c972 <_scanf_float+0x86>
 800cbfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbfe:	463a      	mov	r2, r7
 800cc00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc04:	4640      	mov	r0, r8
 800cc06:	4798      	blx	r3
 800cc08:	6923      	ldr	r3, [r4, #16]
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	6123      	str	r3, [r4, #16]
 800cc0e:	e7f0      	b.n	800cbf2 <_scanf_float+0x306>
 800cc10:	46aa      	mov	sl, r5
 800cc12:	46b3      	mov	fp, r6
 800cc14:	e7de      	b.n	800cbd4 <_scanf_float+0x2e8>
 800cc16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cc1a:	1e75      	subs	r5, r6, #1
 800cc1c:	6923      	ldr	r3, [r4, #16]
 800cc1e:	2965      	cmp	r1, #101	@ 0x65
 800cc20:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc24:	6123      	str	r3, [r4, #16]
 800cc26:	d00c      	beq.n	800cc42 <_scanf_float+0x356>
 800cc28:	2945      	cmp	r1, #69	@ 0x45
 800cc2a:	d00a      	beq.n	800cc42 <_scanf_float+0x356>
 800cc2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc30:	463a      	mov	r2, r7
 800cc32:	4640      	mov	r0, r8
 800cc34:	1eb5      	subs	r5, r6, #2
 800cc36:	4798      	blx	r3
 800cc38:	6923      	ldr	r3, [r4, #16]
 800cc3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cc3e:	3b01      	subs	r3, #1
 800cc40:	6123      	str	r3, [r4, #16]
 800cc42:	462e      	mov	r6, r5
 800cc44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc48:	463a      	mov	r2, r7
 800cc4a:	4640      	mov	r0, r8
 800cc4c:	4798      	blx	r3
 800cc4e:	6822      	ldr	r2, [r4, #0]
 800cc50:	f012 0210 	ands.w	r2, r2, #16
 800cc54:	d001      	beq.n	800cc5a <_scanf_float+0x36e>
 800cc56:	2000      	movs	r0, #0
 800cc58:	e68c      	b.n	800c974 <_scanf_float+0x88>
 800cc5a:	7032      	strb	r2, [r6, #0]
 800cc5c:	6823      	ldr	r3, [r4, #0]
 800cc5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cc62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc66:	d11c      	bne.n	800cca2 <_scanf_float+0x3b6>
 800cc68:	9b02      	ldr	r3, [sp, #8]
 800cc6a:	454b      	cmp	r3, r9
 800cc6c:	eba3 0209 	sub.w	r2, r3, r9
 800cc70:	d123      	bne.n	800ccba <_scanf_float+0x3ce>
 800cc72:	2200      	movs	r2, #0
 800cc74:	9901      	ldr	r1, [sp, #4]
 800cc76:	4640      	mov	r0, r8
 800cc78:	f002 fc8e 	bl	800f598 <_strtod_r>
 800cc7c:	6821      	ldr	r1, [r4, #0]
 800cc7e:	9b03      	ldr	r3, [sp, #12]
 800cc80:	f011 0f02 	tst.w	r1, #2
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	ec57 6b10 	vmov	r6, r7, d0
 800cc8a:	f103 0204 	add.w	r2, r3, #4
 800cc8e:	d01f      	beq.n	800ccd0 <_scanf_float+0x3e4>
 800cc90:	9903      	ldr	r1, [sp, #12]
 800cc92:	600a      	str	r2, [r1, #0]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	e9c3 6700 	strd	r6, r7, [r3]
 800cc9a:	68e3      	ldr	r3, [r4, #12]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	60e3      	str	r3, [r4, #12]
 800cca0:	e7d9      	b.n	800cc56 <_scanf_float+0x36a>
 800cca2:	9b04      	ldr	r3, [sp, #16]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d0e4      	beq.n	800cc72 <_scanf_float+0x386>
 800cca8:	9905      	ldr	r1, [sp, #20]
 800ccaa:	230a      	movs	r3, #10
 800ccac:	4640      	mov	r0, r8
 800ccae:	3101      	adds	r1, #1
 800ccb0:	f002 fcf2 	bl	800f698 <_strtol_r>
 800ccb4:	9b04      	ldr	r3, [sp, #16]
 800ccb6:	9e05      	ldr	r6, [sp, #20]
 800ccb8:	1ac2      	subs	r2, r0, r3
 800ccba:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ccbe:	4912      	ldr	r1, [pc, #72]	@ (800cd08 <_scanf_float+0x41c>)
 800ccc0:	429e      	cmp	r6, r3
 800ccc2:	bf28      	it	cs
 800ccc4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ccc8:	4630      	mov	r0, r6
 800ccca:	f000 f953 	bl	800cf74 <siprintf>
 800ccce:	e7d0      	b.n	800cc72 <_scanf_float+0x386>
 800ccd0:	f011 0f04 	tst.w	r1, #4
 800ccd4:	9903      	ldr	r1, [sp, #12]
 800ccd6:	600a      	str	r2, [r1, #0]
 800ccd8:	d1dc      	bne.n	800cc94 <_scanf_float+0x3a8>
 800ccda:	681d      	ldr	r5, [r3, #0]
 800ccdc:	4632      	mov	r2, r6
 800ccde:	463b      	mov	r3, r7
 800cce0:	4630      	mov	r0, r6
 800cce2:	4639      	mov	r1, r7
 800cce4:	f7f3 ff32 	bl	8000b4c <__aeabi_dcmpun>
 800cce8:	b128      	cbz	r0, 800ccf6 <_scanf_float+0x40a>
 800ccea:	4808      	ldr	r0, [pc, #32]	@ (800cd0c <_scanf_float+0x420>)
 800ccec:	f000 faf4 	bl	800d2d8 <nanf>
 800ccf0:	ed85 0a00 	vstr	s0, [r5]
 800ccf4:	e7d1      	b.n	800cc9a <_scanf_float+0x3ae>
 800ccf6:	4630      	mov	r0, r6
 800ccf8:	4639      	mov	r1, r7
 800ccfa:	f7f3 ff85 	bl	8000c08 <__aeabi_d2f>
 800ccfe:	6028      	str	r0, [r5, #0]
 800cd00:	e7cb      	b.n	800cc9a <_scanf_float+0x3ae>
 800cd02:	f04f 0900 	mov.w	r9, #0
 800cd06:	e62a      	b.n	800c95e <_scanf_float+0x72>
 800cd08:	08010ad0 	.word	0x08010ad0
 800cd0c:	08010e65 	.word	0x08010e65

0800cd10 <std>:
 800cd10:	2300      	movs	r3, #0
 800cd12:	b510      	push	{r4, lr}
 800cd14:	4604      	mov	r4, r0
 800cd16:	6083      	str	r3, [r0, #8]
 800cd18:	8181      	strh	r1, [r0, #12]
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	6643      	str	r3, [r0, #100]	@ 0x64
 800cd1e:	81c2      	strh	r2, [r0, #14]
 800cd20:	2208      	movs	r2, #8
 800cd22:	6183      	str	r3, [r0, #24]
 800cd24:	e9c0 3300 	strd	r3, r3, [r0]
 800cd28:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd2c:	305c      	adds	r0, #92	@ 0x5c
 800cd2e:	f000 fa29 	bl	800d184 <memset>
 800cd32:	4b0d      	ldr	r3, [pc, #52]	@ (800cd68 <std+0x58>)
 800cd34:	6224      	str	r4, [r4, #32]
 800cd36:	6263      	str	r3, [r4, #36]	@ 0x24
 800cd38:	4b0c      	ldr	r3, [pc, #48]	@ (800cd6c <std+0x5c>)
 800cd3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cd3c:	4b0c      	ldr	r3, [pc, #48]	@ (800cd70 <std+0x60>)
 800cd3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cd40:	4b0c      	ldr	r3, [pc, #48]	@ (800cd74 <std+0x64>)
 800cd42:	6323      	str	r3, [r4, #48]	@ 0x30
 800cd44:	4b0c      	ldr	r3, [pc, #48]	@ (800cd78 <std+0x68>)
 800cd46:	429c      	cmp	r4, r3
 800cd48:	d006      	beq.n	800cd58 <std+0x48>
 800cd4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cd4e:	4294      	cmp	r4, r2
 800cd50:	d002      	beq.n	800cd58 <std+0x48>
 800cd52:	33d0      	adds	r3, #208	@ 0xd0
 800cd54:	429c      	cmp	r4, r3
 800cd56:	d105      	bne.n	800cd64 <std+0x54>
 800cd58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cd5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd60:	f000 ba9c 	b.w	800d29c <__retarget_lock_init_recursive>
 800cd64:	bd10      	pop	{r4, pc}
 800cd66:	bf00      	nop
 800cd68:	0800cfb5 	.word	0x0800cfb5
 800cd6c:	0800cfd7 	.word	0x0800cfd7
 800cd70:	0800d00f 	.word	0x0800d00f
 800cd74:	0800d033 	.word	0x0800d033
 800cd78:	200005d0 	.word	0x200005d0

0800cd7c <stdio_exit_handler>:
 800cd7c:	4a02      	ldr	r2, [pc, #8]	@ (800cd88 <stdio_exit_handler+0xc>)
 800cd7e:	4903      	ldr	r1, [pc, #12]	@ (800cd8c <stdio_exit_handler+0x10>)
 800cd80:	4803      	ldr	r0, [pc, #12]	@ (800cd90 <stdio_exit_handler+0x14>)
 800cd82:	f000 b869 	b.w	800ce58 <_fwalk_sglue>
 800cd86:	bf00      	nop
 800cd88:	20000080 	.word	0x20000080
 800cd8c:	0800fcd9 	.word	0x0800fcd9
 800cd90:	20000090 	.word	0x20000090

0800cd94 <cleanup_stdio>:
 800cd94:	6841      	ldr	r1, [r0, #4]
 800cd96:	4b0c      	ldr	r3, [pc, #48]	@ (800cdc8 <cleanup_stdio+0x34>)
 800cd98:	4299      	cmp	r1, r3
 800cd9a:	b510      	push	{r4, lr}
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	d001      	beq.n	800cda4 <cleanup_stdio+0x10>
 800cda0:	f002 ff9a 	bl	800fcd8 <_fflush_r>
 800cda4:	68a1      	ldr	r1, [r4, #8]
 800cda6:	4b09      	ldr	r3, [pc, #36]	@ (800cdcc <cleanup_stdio+0x38>)
 800cda8:	4299      	cmp	r1, r3
 800cdaa:	d002      	beq.n	800cdb2 <cleanup_stdio+0x1e>
 800cdac:	4620      	mov	r0, r4
 800cdae:	f002 ff93 	bl	800fcd8 <_fflush_r>
 800cdb2:	68e1      	ldr	r1, [r4, #12]
 800cdb4:	4b06      	ldr	r3, [pc, #24]	@ (800cdd0 <cleanup_stdio+0x3c>)
 800cdb6:	4299      	cmp	r1, r3
 800cdb8:	d004      	beq.n	800cdc4 <cleanup_stdio+0x30>
 800cdba:	4620      	mov	r0, r4
 800cdbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdc0:	f002 bf8a 	b.w	800fcd8 <_fflush_r>
 800cdc4:	bd10      	pop	{r4, pc}
 800cdc6:	bf00      	nop
 800cdc8:	200005d0 	.word	0x200005d0
 800cdcc:	20000638 	.word	0x20000638
 800cdd0:	200006a0 	.word	0x200006a0

0800cdd4 <global_stdio_init.part.0>:
 800cdd4:	b510      	push	{r4, lr}
 800cdd6:	4b0b      	ldr	r3, [pc, #44]	@ (800ce04 <global_stdio_init.part.0+0x30>)
 800cdd8:	2104      	movs	r1, #4
 800cdda:	4c0b      	ldr	r4, [pc, #44]	@ (800ce08 <global_stdio_init.part.0+0x34>)
 800cddc:	4a0b      	ldr	r2, [pc, #44]	@ (800ce0c <global_stdio_init.part.0+0x38>)
 800cdde:	4620      	mov	r0, r4
 800cde0:	601a      	str	r2, [r3, #0]
 800cde2:	2200      	movs	r2, #0
 800cde4:	f7ff ff94 	bl	800cd10 <std>
 800cde8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cdec:	2201      	movs	r2, #1
 800cdee:	2109      	movs	r1, #9
 800cdf0:	f7ff ff8e 	bl	800cd10 <std>
 800cdf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	2112      	movs	r1, #18
 800cdfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce00:	f7ff bf86 	b.w	800cd10 <std>
 800ce04:	20000708 	.word	0x20000708
 800ce08:	200005d0 	.word	0x200005d0
 800ce0c:	0800cd7d 	.word	0x0800cd7d

0800ce10 <__sfp_lock_acquire>:
 800ce10:	4801      	ldr	r0, [pc, #4]	@ (800ce18 <__sfp_lock_acquire+0x8>)
 800ce12:	f000 ba44 	b.w	800d29e <__retarget_lock_acquire_recursive>
 800ce16:	bf00      	nop
 800ce18:	20000711 	.word	0x20000711

0800ce1c <__sfp_lock_release>:
 800ce1c:	4801      	ldr	r0, [pc, #4]	@ (800ce24 <__sfp_lock_release+0x8>)
 800ce1e:	f000 ba3f 	b.w	800d2a0 <__retarget_lock_release_recursive>
 800ce22:	bf00      	nop
 800ce24:	20000711 	.word	0x20000711

0800ce28 <__sinit>:
 800ce28:	b510      	push	{r4, lr}
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	f7ff fff0 	bl	800ce10 <__sfp_lock_acquire>
 800ce30:	6a23      	ldr	r3, [r4, #32]
 800ce32:	b11b      	cbz	r3, 800ce3c <__sinit+0x14>
 800ce34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce38:	f7ff bff0 	b.w	800ce1c <__sfp_lock_release>
 800ce3c:	4b04      	ldr	r3, [pc, #16]	@ (800ce50 <__sinit+0x28>)
 800ce3e:	6223      	str	r3, [r4, #32]
 800ce40:	4b04      	ldr	r3, [pc, #16]	@ (800ce54 <__sinit+0x2c>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1f5      	bne.n	800ce34 <__sinit+0xc>
 800ce48:	f7ff ffc4 	bl	800cdd4 <global_stdio_init.part.0>
 800ce4c:	e7f2      	b.n	800ce34 <__sinit+0xc>
 800ce4e:	bf00      	nop
 800ce50:	0800cd95 	.word	0x0800cd95
 800ce54:	20000708 	.word	0x20000708

0800ce58 <_fwalk_sglue>:
 800ce58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce5c:	4607      	mov	r7, r0
 800ce5e:	4688      	mov	r8, r1
 800ce60:	4614      	mov	r4, r2
 800ce62:	2600      	movs	r6, #0
 800ce64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce68:	f1b9 0901 	subs.w	r9, r9, #1
 800ce6c:	d505      	bpl.n	800ce7a <_fwalk_sglue+0x22>
 800ce6e:	6824      	ldr	r4, [r4, #0]
 800ce70:	2c00      	cmp	r4, #0
 800ce72:	d1f7      	bne.n	800ce64 <_fwalk_sglue+0xc>
 800ce74:	4630      	mov	r0, r6
 800ce76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce7a:	89ab      	ldrh	r3, [r5, #12]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d907      	bls.n	800ce90 <_fwalk_sglue+0x38>
 800ce80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce84:	3301      	adds	r3, #1
 800ce86:	d003      	beq.n	800ce90 <_fwalk_sglue+0x38>
 800ce88:	4629      	mov	r1, r5
 800ce8a:	4638      	mov	r0, r7
 800ce8c:	47c0      	blx	r8
 800ce8e:	4306      	orrs	r6, r0
 800ce90:	3568      	adds	r5, #104	@ 0x68
 800ce92:	e7e9      	b.n	800ce68 <_fwalk_sglue+0x10>

0800ce94 <iprintf>:
 800ce94:	b40f      	push	{r0, r1, r2, r3}
 800ce96:	b507      	push	{r0, r1, r2, lr}
 800ce98:	4906      	ldr	r1, [pc, #24]	@ (800ceb4 <iprintf+0x20>)
 800ce9a:	ab04      	add	r3, sp, #16
 800ce9c:	6808      	ldr	r0, [r1, #0]
 800ce9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cea2:	6881      	ldr	r1, [r0, #8]
 800cea4:	9301      	str	r3, [sp, #4]
 800cea6:	f002 fd7b 	bl	800f9a0 <_vfiprintf_r>
 800ceaa:	b003      	add	sp, #12
 800ceac:	f85d eb04 	ldr.w	lr, [sp], #4
 800ceb0:	b004      	add	sp, #16
 800ceb2:	4770      	bx	lr
 800ceb4:	2000008c 	.word	0x2000008c

0800ceb8 <_puts_r>:
 800ceb8:	6a03      	ldr	r3, [r0, #32]
 800ceba:	b570      	push	{r4, r5, r6, lr}
 800cebc:	4605      	mov	r5, r0
 800cebe:	460e      	mov	r6, r1
 800cec0:	6884      	ldr	r4, [r0, #8]
 800cec2:	b90b      	cbnz	r3, 800cec8 <_puts_r+0x10>
 800cec4:	f7ff ffb0 	bl	800ce28 <__sinit>
 800cec8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ceca:	07db      	lsls	r3, r3, #31
 800cecc:	d405      	bmi.n	800ceda <_puts_r+0x22>
 800cece:	89a3      	ldrh	r3, [r4, #12]
 800ced0:	0598      	lsls	r0, r3, #22
 800ced2:	d402      	bmi.n	800ceda <_puts_r+0x22>
 800ced4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ced6:	f000 f9e2 	bl	800d29e <__retarget_lock_acquire_recursive>
 800ceda:	89a3      	ldrh	r3, [r4, #12]
 800cedc:	0719      	lsls	r1, r3, #28
 800cede:	d502      	bpl.n	800cee6 <_puts_r+0x2e>
 800cee0:	6923      	ldr	r3, [r4, #16]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d135      	bne.n	800cf52 <_puts_r+0x9a>
 800cee6:	4621      	mov	r1, r4
 800cee8:	4628      	mov	r0, r5
 800ceea:	f000 f8e5 	bl	800d0b8 <__swsetup_r>
 800ceee:	b380      	cbz	r0, 800cf52 <_puts_r+0x9a>
 800cef0:	f04f 35ff 	mov.w	r5, #4294967295
 800cef4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cef6:	07da      	lsls	r2, r3, #31
 800cef8:	d405      	bmi.n	800cf06 <_puts_r+0x4e>
 800cefa:	89a3      	ldrh	r3, [r4, #12]
 800cefc:	059b      	lsls	r3, r3, #22
 800cefe:	d402      	bmi.n	800cf06 <_puts_r+0x4e>
 800cf00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf02:	f000 f9cd 	bl	800d2a0 <__retarget_lock_release_recursive>
 800cf06:	4628      	mov	r0, r5
 800cf08:	bd70      	pop	{r4, r5, r6, pc}
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	da04      	bge.n	800cf18 <_puts_r+0x60>
 800cf0e:	69a2      	ldr	r2, [r4, #24]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	dc17      	bgt.n	800cf44 <_puts_r+0x8c>
 800cf14:	290a      	cmp	r1, #10
 800cf16:	d015      	beq.n	800cf44 <_puts_r+0x8c>
 800cf18:	6823      	ldr	r3, [r4, #0]
 800cf1a:	1c5a      	adds	r2, r3, #1
 800cf1c:	6022      	str	r2, [r4, #0]
 800cf1e:	7019      	strb	r1, [r3, #0]
 800cf20:	68a3      	ldr	r3, [r4, #8]
 800cf22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cf26:	3b01      	subs	r3, #1
 800cf28:	60a3      	str	r3, [r4, #8]
 800cf2a:	2900      	cmp	r1, #0
 800cf2c:	d1ed      	bne.n	800cf0a <_puts_r+0x52>
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	da11      	bge.n	800cf56 <_puts_r+0x9e>
 800cf32:	4622      	mov	r2, r4
 800cf34:	210a      	movs	r1, #10
 800cf36:	4628      	mov	r0, r5
 800cf38:	f000 f87f 	bl	800d03a <__swbuf_r>
 800cf3c:	3001      	adds	r0, #1
 800cf3e:	d0d7      	beq.n	800cef0 <_puts_r+0x38>
 800cf40:	250a      	movs	r5, #10
 800cf42:	e7d7      	b.n	800cef4 <_puts_r+0x3c>
 800cf44:	4622      	mov	r2, r4
 800cf46:	4628      	mov	r0, r5
 800cf48:	f000 f877 	bl	800d03a <__swbuf_r>
 800cf4c:	3001      	adds	r0, #1
 800cf4e:	d1e7      	bne.n	800cf20 <_puts_r+0x68>
 800cf50:	e7ce      	b.n	800cef0 <_puts_r+0x38>
 800cf52:	3e01      	subs	r6, #1
 800cf54:	e7e4      	b.n	800cf20 <_puts_r+0x68>
 800cf56:	6823      	ldr	r3, [r4, #0]
 800cf58:	1c5a      	adds	r2, r3, #1
 800cf5a:	6022      	str	r2, [r4, #0]
 800cf5c:	220a      	movs	r2, #10
 800cf5e:	701a      	strb	r2, [r3, #0]
 800cf60:	e7ee      	b.n	800cf40 <_puts_r+0x88>
	...

0800cf64 <puts>:
 800cf64:	4b02      	ldr	r3, [pc, #8]	@ (800cf70 <puts+0xc>)
 800cf66:	4601      	mov	r1, r0
 800cf68:	6818      	ldr	r0, [r3, #0]
 800cf6a:	f7ff bfa5 	b.w	800ceb8 <_puts_r>
 800cf6e:	bf00      	nop
 800cf70:	2000008c 	.word	0x2000008c

0800cf74 <siprintf>:
 800cf74:	b40e      	push	{r1, r2, r3}
 800cf76:	b500      	push	{lr}
 800cf78:	b09c      	sub	sp, #112	@ 0x70
 800cf7a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cf7e:	ab1d      	add	r3, sp, #116	@ 0x74
 800cf80:	9002      	str	r0, [sp, #8]
 800cf82:	9006      	str	r0, [sp, #24]
 800cf84:	9107      	str	r1, [sp, #28]
 800cf86:	9104      	str	r1, [sp, #16]
 800cf88:	4808      	ldr	r0, [pc, #32]	@ (800cfac <siprintf+0x38>)
 800cf8a:	4909      	ldr	r1, [pc, #36]	@ (800cfb0 <siprintf+0x3c>)
 800cf8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf90:	9105      	str	r1, [sp, #20]
 800cf92:	a902      	add	r1, sp, #8
 800cf94:	6800      	ldr	r0, [r0, #0]
 800cf96:	9301      	str	r3, [sp, #4]
 800cf98:	f002 fbdc 	bl	800f754 <_svfiprintf_r>
 800cf9c:	9b02      	ldr	r3, [sp, #8]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	701a      	strb	r2, [r3, #0]
 800cfa2:	b01c      	add	sp, #112	@ 0x70
 800cfa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfa8:	b003      	add	sp, #12
 800cfaa:	4770      	bx	lr
 800cfac:	2000008c 	.word	0x2000008c
 800cfb0:	ffff0208 	.word	0xffff0208

0800cfb4 <__sread>:
 800cfb4:	b510      	push	{r4, lr}
 800cfb6:	460c      	mov	r4, r1
 800cfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfbc:	f000 f910 	bl	800d1e0 <_read_r>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	bfab      	itete	ge
 800cfc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cfc6:	89a3      	ldrhlt	r3, [r4, #12]
 800cfc8:	181b      	addge	r3, r3, r0
 800cfca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cfce:	bfac      	ite	ge
 800cfd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cfd2:	81a3      	strhlt	r3, [r4, #12]
 800cfd4:	bd10      	pop	{r4, pc}

0800cfd6 <__swrite>:
 800cfd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfda:	461f      	mov	r7, r3
 800cfdc:	898b      	ldrh	r3, [r1, #12]
 800cfde:	4605      	mov	r5, r0
 800cfe0:	460c      	mov	r4, r1
 800cfe2:	05db      	lsls	r3, r3, #23
 800cfe4:	4616      	mov	r6, r2
 800cfe6:	d505      	bpl.n	800cff4 <__swrite+0x1e>
 800cfe8:	2302      	movs	r3, #2
 800cfea:	2200      	movs	r2, #0
 800cfec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cff0:	f000 f8e4 	bl	800d1bc <_lseek_r>
 800cff4:	89a3      	ldrh	r3, [r4, #12]
 800cff6:	4632      	mov	r2, r6
 800cff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cffc:	4628      	mov	r0, r5
 800cffe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d002:	81a3      	strh	r3, [r4, #12]
 800d004:	463b      	mov	r3, r7
 800d006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d00a:	f000 b90b 	b.w	800d224 <_write_r>

0800d00e <__sseek>:
 800d00e:	b510      	push	{r4, lr}
 800d010:	460c      	mov	r4, r1
 800d012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d016:	f000 f8d1 	bl	800d1bc <_lseek_r>
 800d01a:	1c43      	adds	r3, r0, #1
 800d01c:	89a3      	ldrh	r3, [r4, #12]
 800d01e:	bf15      	itete	ne
 800d020:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d022:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d026:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d02a:	81a3      	strheq	r3, [r4, #12]
 800d02c:	bf18      	it	ne
 800d02e:	81a3      	strhne	r3, [r4, #12]
 800d030:	bd10      	pop	{r4, pc}

0800d032 <__sclose>:
 800d032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d036:	f000 b8b1 	b.w	800d19c <_close_r>

0800d03a <__swbuf_r>:
 800d03a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d03c:	460e      	mov	r6, r1
 800d03e:	4614      	mov	r4, r2
 800d040:	4605      	mov	r5, r0
 800d042:	b118      	cbz	r0, 800d04c <__swbuf_r+0x12>
 800d044:	6a03      	ldr	r3, [r0, #32]
 800d046:	b90b      	cbnz	r3, 800d04c <__swbuf_r+0x12>
 800d048:	f7ff feee 	bl	800ce28 <__sinit>
 800d04c:	69a3      	ldr	r3, [r4, #24]
 800d04e:	60a3      	str	r3, [r4, #8]
 800d050:	89a3      	ldrh	r3, [r4, #12]
 800d052:	071a      	lsls	r2, r3, #28
 800d054:	d501      	bpl.n	800d05a <__swbuf_r+0x20>
 800d056:	6923      	ldr	r3, [r4, #16]
 800d058:	b943      	cbnz	r3, 800d06c <__swbuf_r+0x32>
 800d05a:	4621      	mov	r1, r4
 800d05c:	4628      	mov	r0, r5
 800d05e:	f000 f82b 	bl	800d0b8 <__swsetup_r>
 800d062:	b118      	cbz	r0, 800d06c <__swbuf_r+0x32>
 800d064:	f04f 37ff 	mov.w	r7, #4294967295
 800d068:	4638      	mov	r0, r7
 800d06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d06c:	6823      	ldr	r3, [r4, #0]
 800d06e:	b2f6      	uxtb	r6, r6
 800d070:	6922      	ldr	r2, [r4, #16]
 800d072:	4637      	mov	r7, r6
 800d074:	1a98      	subs	r0, r3, r2
 800d076:	6963      	ldr	r3, [r4, #20]
 800d078:	4283      	cmp	r3, r0
 800d07a:	dc05      	bgt.n	800d088 <__swbuf_r+0x4e>
 800d07c:	4621      	mov	r1, r4
 800d07e:	4628      	mov	r0, r5
 800d080:	f002 fe2a 	bl	800fcd8 <_fflush_r>
 800d084:	2800      	cmp	r0, #0
 800d086:	d1ed      	bne.n	800d064 <__swbuf_r+0x2a>
 800d088:	68a3      	ldr	r3, [r4, #8]
 800d08a:	3b01      	subs	r3, #1
 800d08c:	60a3      	str	r3, [r4, #8]
 800d08e:	6823      	ldr	r3, [r4, #0]
 800d090:	1c5a      	adds	r2, r3, #1
 800d092:	6022      	str	r2, [r4, #0]
 800d094:	701e      	strb	r6, [r3, #0]
 800d096:	1c43      	adds	r3, r0, #1
 800d098:	6962      	ldr	r2, [r4, #20]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d004      	beq.n	800d0a8 <__swbuf_r+0x6e>
 800d09e:	89a3      	ldrh	r3, [r4, #12]
 800d0a0:	07db      	lsls	r3, r3, #31
 800d0a2:	d5e1      	bpl.n	800d068 <__swbuf_r+0x2e>
 800d0a4:	2e0a      	cmp	r6, #10
 800d0a6:	d1df      	bne.n	800d068 <__swbuf_r+0x2e>
 800d0a8:	4621      	mov	r1, r4
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f002 fe14 	bl	800fcd8 <_fflush_r>
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	d0d9      	beq.n	800d068 <__swbuf_r+0x2e>
 800d0b4:	e7d6      	b.n	800d064 <__swbuf_r+0x2a>
	...

0800d0b8 <__swsetup_r>:
 800d0b8:	b538      	push	{r3, r4, r5, lr}
 800d0ba:	4b29      	ldr	r3, [pc, #164]	@ (800d160 <__swsetup_r+0xa8>)
 800d0bc:	4605      	mov	r5, r0
 800d0be:	460c      	mov	r4, r1
 800d0c0:	6818      	ldr	r0, [r3, #0]
 800d0c2:	b118      	cbz	r0, 800d0cc <__swsetup_r+0x14>
 800d0c4:	6a03      	ldr	r3, [r0, #32]
 800d0c6:	b90b      	cbnz	r3, 800d0cc <__swsetup_r+0x14>
 800d0c8:	f7ff feae 	bl	800ce28 <__sinit>
 800d0cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0d0:	0719      	lsls	r1, r3, #28
 800d0d2:	d422      	bmi.n	800d11a <__swsetup_r+0x62>
 800d0d4:	06da      	lsls	r2, r3, #27
 800d0d6:	d407      	bmi.n	800d0e8 <__swsetup_r+0x30>
 800d0d8:	2209      	movs	r2, #9
 800d0da:	602a      	str	r2, [r5, #0]
 800d0dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e4:	81a3      	strh	r3, [r4, #12]
 800d0e6:	e033      	b.n	800d150 <__swsetup_r+0x98>
 800d0e8:	0758      	lsls	r0, r3, #29
 800d0ea:	d512      	bpl.n	800d112 <__swsetup_r+0x5a>
 800d0ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d0ee:	b141      	cbz	r1, 800d102 <__swsetup_r+0x4a>
 800d0f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d0f4:	4299      	cmp	r1, r3
 800d0f6:	d002      	beq.n	800d0fe <__swsetup_r+0x46>
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	f000 ff45 	bl	800df88 <_free_r>
 800d0fe:	2300      	movs	r3, #0
 800d100:	6363      	str	r3, [r4, #52]	@ 0x34
 800d102:	89a3      	ldrh	r3, [r4, #12]
 800d104:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d108:	81a3      	strh	r3, [r4, #12]
 800d10a:	2300      	movs	r3, #0
 800d10c:	6063      	str	r3, [r4, #4]
 800d10e:	6923      	ldr	r3, [r4, #16]
 800d110:	6023      	str	r3, [r4, #0]
 800d112:	89a3      	ldrh	r3, [r4, #12]
 800d114:	f043 0308 	orr.w	r3, r3, #8
 800d118:	81a3      	strh	r3, [r4, #12]
 800d11a:	6923      	ldr	r3, [r4, #16]
 800d11c:	b94b      	cbnz	r3, 800d132 <__swsetup_r+0x7a>
 800d11e:	89a3      	ldrh	r3, [r4, #12]
 800d120:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d128:	d003      	beq.n	800d132 <__swsetup_r+0x7a>
 800d12a:	4621      	mov	r1, r4
 800d12c:	4628      	mov	r0, r5
 800d12e:	f002 fe20 	bl	800fd72 <__smakebuf_r>
 800d132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d136:	f013 0201 	ands.w	r2, r3, #1
 800d13a:	d00a      	beq.n	800d152 <__swsetup_r+0x9a>
 800d13c:	2200      	movs	r2, #0
 800d13e:	60a2      	str	r2, [r4, #8]
 800d140:	6962      	ldr	r2, [r4, #20]
 800d142:	4252      	negs	r2, r2
 800d144:	61a2      	str	r2, [r4, #24]
 800d146:	6922      	ldr	r2, [r4, #16]
 800d148:	b942      	cbnz	r2, 800d15c <__swsetup_r+0xa4>
 800d14a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d14e:	d1c5      	bne.n	800d0dc <__swsetup_r+0x24>
 800d150:	bd38      	pop	{r3, r4, r5, pc}
 800d152:	0799      	lsls	r1, r3, #30
 800d154:	bf58      	it	pl
 800d156:	6962      	ldrpl	r2, [r4, #20]
 800d158:	60a2      	str	r2, [r4, #8]
 800d15a:	e7f4      	b.n	800d146 <__swsetup_r+0x8e>
 800d15c:	2000      	movs	r0, #0
 800d15e:	e7f7      	b.n	800d150 <__swsetup_r+0x98>
 800d160:	2000008c 	.word	0x2000008c

0800d164 <memcmp>:
 800d164:	3901      	subs	r1, #1
 800d166:	4402      	add	r2, r0
 800d168:	b510      	push	{r4, lr}
 800d16a:	4290      	cmp	r0, r2
 800d16c:	d101      	bne.n	800d172 <memcmp+0xe>
 800d16e:	2000      	movs	r0, #0
 800d170:	e005      	b.n	800d17e <memcmp+0x1a>
 800d172:	7803      	ldrb	r3, [r0, #0]
 800d174:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d178:	42a3      	cmp	r3, r4
 800d17a:	d001      	beq.n	800d180 <memcmp+0x1c>
 800d17c:	1b18      	subs	r0, r3, r4
 800d17e:	bd10      	pop	{r4, pc}
 800d180:	3001      	adds	r0, #1
 800d182:	e7f2      	b.n	800d16a <memcmp+0x6>

0800d184 <memset>:
 800d184:	4402      	add	r2, r0
 800d186:	4603      	mov	r3, r0
 800d188:	4293      	cmp	r3, r2
 800d18a:	d100      	bne.n	800d18e <memset+0xa>
 800d18c:	4770      	bx	lr
 800d18e:	f803 1b01 	strb.w	r1, [r3], #1
 800d192:	e7f9      	b.n	800d188 <memset+0x4>

0800d194 <_localeconv_r>:
 800d194:	4800      	ldr	r0, [pc, #0]	@ (800d198 <_localeconv_r+0x4>)
 800d196:	4770      	bx	lr
 800d198:	200001cc 	.word	0x200001cc

0800d19c <_close_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	2300      	movs	r3, #0
 800d1a0:	4d05      	ldr	r5, [pc, #20]	@ (800d1b8 <_close_r+0x1c>)
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	602b      	str	r3, [r5, #0]
 800d1a8:	f7f7 fa7e 	bl	80046a8 <_close>
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d102      	bne.n	800d1b6 <_close_r+0x1a>
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	b103      	cbz	r3, 800d1b6 <_close_r+0x1a>
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	2000070c 	.word	0x2000070c

0800d1bc <_lseek_r>:
 800d1bc:	b538      	push	{r3, r4, r5, lr}
 800d1be:	4604      	mov	r4, r0
 800d1c0:	4d06      	ldr	r5, [pc, #24]	@ (800d1dc <_lseek_r+0x20>)
 800d1c2:	4608      	mov	r0, r1
 800d1c4:	4611      	mov	r1, r2
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	602a      	str	r2, [r5, #0]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	f7f7 fa93 	bl	80046f6 <_lseek>
 800d1d0:	1c43      	adds	r3, r0, #1
 800d1d2:	d102      	bne.n	800d1da <_lseek_r+0x1e>
 800d1d4:	682b      	ldr	r3, [r5, #0]
 800d1d6:	b103      	cbz	r3, 800d1da <_lseek_r+0x1e>
 800d1d8:	6023      	str	r3, [r4, #0]
 800d1da:	bd38      	pop	{r3, r4, r5, pc}
 800d1dc:	2000070c 	.word	0x2000070c

0800d1e0 <_read_r>:
 800d1e0:	b538      	push	{r3, r4, r5, lr}
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	4d06      	ldr	r5, [pc, #24]	@ (800d200 <_read_r+0x20>)
 800d1e6:	4608      	mov	r0, r1
 800d1e8:	4611      	mov	r1, r2
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	602a      	str	r2, [r5, #0]
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	f7f7 fa21 	bl	8004636 <_read>
 800d1f4:	1c43      	adds	r3, r0, #1
 800d1f6:	d102      	bne.n	800d1fe <_read_r+0x1e>
 800d1f8:	682b      	ldr	r3, [r5, #0]
 800d1fa:	b103      	cbz	r3, 800d1fe <_read_r+0x1e>
 800d1fc:	6023      	str	r3, [r4, #0]
 800d1fe:	bd38      	pop	{r3, r4, r5, pc}
 800d200:	2000070c 	.word	0x2000070c

0800d204 <_sbrk_r>:
 800d204:	b538      	push	{r3, r4, r5, lr}
 800d206:	2300      	movs	r3, #0
 800d208:	4d05      	ldr	r5, [pc, #20]	@ (800d220 <_sbrk_r+0x1c>)
 800d20a:	4604      	mov	r4, r0
 800d20c:	4608      	mov	r0, r1
 800d20e:	602b      	str	r3, [r5, #0]
 800d210:	f7f7 fa7e 	bl	8004710 <_sbrk>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	d102      	bne.n	800d21e <_sbrk_r+0x1a>
 800d218:	682b      	ldr	r3, [r5, #0]
 800d21a:	b103      	cbz	r3, 800d21e <_sbrk_r+0x1a>
 800d21c:	6023      	str	r3, [r4, #0]
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
 800d220:	2000070c 	.word	0x2000070c

0800d224 <_write_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4604      	mov	r4, r0
 800d228:	4d06      	ldr	r5, [pc, #24]	@ (800d244 <_write_r+0x20>)
 800d22a:	4608      	mov	r0, r1
 800d22c:	4611      	mov	r1, r2
 800d22e:	2200      	movs	r2, #0
 800d230:	602a      	str	r2, [r5, #0]
 800d232:	461a      	mov	r2, r3
 800d234:	f7f7 fa1c 	bl	8004670 <_write>
 800d238:	1c43      	adds	r3, r0, #1
 800d23a:	d102      	bne.n	800d242 <_write_r+0x1e>
 800d23c:	682b      	ldr	r3, [r5, #0]
 800d23e:	b103      	cbz	r3, 800d242 <_write_r+0x1e>
 800d240:	6023      	str	r3, [r4, #0]
 800d242:	bd38      	pop	{r3, r4, r5, pc}
 800d244:	2000070c 	.word	0x2000070c

0800d248 <__errno>:
 800d248:	4b01      	ldr	r3, [pc, #4]	@ (800d250 <__errno+0x8>)
 800d24a:	6818      	ldr	r0, [r3, #0]
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	2000008c 	.word	0x2000008c

0800d254 <__libc_init_array>:
 800d254:	b570      	push	{r4, r5, r6, lr}
 800d256:	4d0d      	ldr	r5, [pc, #52]	@ (800d28c <__libc_init_array+0x38>)
 800d258:	2600      	movs	r6, #0
 800d25a:	4c0d      	ldr	r4, [pc, #52]	@ (800d290 <__libc_init_array+0x3c>)
 800d25c:	1b64      	subs	r4, r4, r5
 800d25e:	10a4      	asrs	r4, r4, #2
 800d260:	42a6      	cmp	r6, r4
 800d262:	d109      	bne.n	800d278 <__libc_init_array+0x24>
 800d264:	4d0b      	ldr	r5, [pc, #44]	@ (800d294 <__libc_init_array+0x40>)
 800d266:	2600      	movs	r6, #0
 800d268:	4c0b      	ldr	r4, [pc, #44]	@ (800d298 <__libc_init_array+0x44>)
 800d26a:	f003 fa2f 	bl	80106cc <_init>
 800d26e:	1b64      	subs	r4, r4, r5
 800d270:	10a4      	asrs	r4, r4, #2
 800d272:	42a6      	cmp	r6, r4
 800d274:	d105      	bne.n	800d282 <__libc_init_array+0x2e>
 800d276:	bd70      	pop	{r4, r5, r6, pc}
 800d278:	f855 3b04 	ldr.w	r3, [r5], #4
 800d27c:	3601      	adds	r6, #1
 800d27e:	4798      	blx	r3
 800d280:	e7ee      	b.n	800d260 <__libc_init_array+0xc>
 800d282:	f855 3b04 	ldr.w	r3, [r5], #4
 800d286:	3601      	adds	r6, #1
 800d288:	4798      	blx	r3
 800d28a:	e7f2      	b.n	800d272 <__libc_init_array+0x1e>
 800d28c:	08010ed0 	.word	0x08010ed0
 800d290:	08010ed0 	.word	0x08010ed0
 800d294:	08010ed0 	.word	0x08010ed0
 800d298:	08010ed8 	.word	0x08010ed8

0800d29c <__retarget_lock_init_recursive>:
 800d29c:	4770      	bx	lr

0800d29e <__retarget_lock_acquire_recursive>:
 800d29e:	4770      	bx	lr

0800d2a0 <__retarget_lock_release_recursive>:
 800d2a0:	4770      	bx	lr

0800d2a2 <memchr>:
 800d2a2:	b2c9      	uxtb	r1, r1
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	4402      	add	r2, r0
 800d2a8:	b510      	push	{r4, lr}
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	d101      	bne.n	800d2b4 <memchr+0x12>
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	e003      	b.n	800d2bc <memchr+0x1a>
 800d2b4:	7804      	ldrb	r4, [r0, #0]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	428c      	cmp	r4, r1
 800d2ba:	d1f6      	bne.n	800d2aa <memchr+0x8>
 800d2bc:	bd10      	pop	{r4, pc}

0800d2be <memcpy>:
 800d2be:	440a      	add	r2, r1
 800d2c0:	1e43      	subs	r3, r0, #1
 800d2c2:	4291      	cmp	r1, r2
 800d2c4:	d100      	bne.n	800d2c8 <memcpy+0xa>
 800d2c6:	4770      	bx	lr
 800d2c8:	b510      	push	{r4, lr}
 800d2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2ce:	4291      	cmp	r1, r2
 800d2d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2d4:	d1f9      	bne.n	800d2ca <memcpy+0xc>
 800d2d6:	bd10      	pop	{r4, pc}

0800d2d8 <nanf>:
 800d2d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d2e0 <nanf+0x8>
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	7fc00000 	.word	0x7fc00000

0800d2e4 <quorem>:
 800d2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e8:	6903      	ldr	r3, [r0, #16]
 800d2ea:	4607      	mov	r7, r0
 800d2ec:	690c      	ldr	r4, [r1, #16]
 800d2ee:	42a3      	cmp	r3, r4
 800d2f0:	f2c0 8083 	blt.w	800d3fa <quorem+0x116>
 800d2f4:	3c01      	subs	r4, #1
 800d2f6:	f100 0514 	add.w	r5, r0, #20
 800d2fa:	f101 0814 	add.w	r8, r1, #20
 800d2fe:	00a3      	lsls	r3, r4, #2
 800d300:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d304:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d30e:	9301      	str	r3, [sp, #4]
 800d310:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d314:	3301      	adds	r3, #1
 800d316:	429a      	cmp	r2, r3
 800d318:	fbb2 f6f3 	udiv	r6, r2, r3
 800d31c:	d331      	bcc.n	800d382 <quorem+0x9e>
 800d31e:	f04f 0a00 	mov.w	sl, #0
 800d322:	46c4      	mov	ip, r8
 800d324:	46ae      	mov	lr, r5
 800d326:	46d3      	mov	fp, sl
 800d328:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d32c:	b298      	uxth	r0, r3
 800d32e:	45e1      	cmp	r9, ip
 800d330:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d334:	fb06 a000 	mla	r0, r6, r0, sl
 800d338:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800d33c:	b280      	uxth	r0, r0
 800d33e:	fb06 2303 	mla	r3, r6, r3, r2
 800d342:	f8de 2000 	ldr.w	r2, [lr]
 800d346:	b292      	uxth	r2, r2
 800d348:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d34c:	eba2 0200 	sub.w	r2, r2, r0
 800d350:	b29b      	uxth	r3, r3
 800d352:	f8de 0000 	ldr.w	r0, [lr]
 800d356:	445a      	add	r2, fp
 800d358:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d35c:	b292      	uxth	r2, r2
 800d35e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d362:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d366:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d36a:	f84e 2b04 	str.w	r2, [lr], #4
 800d36e:	d2db      	bcs.n	800d328 <quorem+0x44>
 800d370:	9b00      	ldr	r3, [sp, #0]
 800d372:	58eb      	ldr	r3, [r5, r3]
 800d374:	b92b      	cbnz	r3, 800d382 <quorem+0x9e>
 800d376:	9b01      	ldr	r3, [sp, #4]
 800d378:	3b04      	subs	r3, #4
 800d37a:	429d      	cmp	r5, r3
 800d37c:	461a      	mov	r2, r3
 800d37e:	d330      	bcc.n	800d3e2 <quorem+0xfe>
 800d380:	613c      	str	r4, [r7, #16]
 800d382:	4638      	mov	r0, r7
 800d384:	f001 f910 	bl	800e5a8 <__mcmp>
 800d388:	2800      	cmp	r0, #0
 800d38a:	db26      	blt.n	800d3da <quorem+0xf6>
 800d38c:	4629      	mov	r1, r5
 800d38e:	2000      	movs	r0, #0
 800d390:	f858 2b04 	ldr.w	r2, [r8], #4
 800d394:	f8d1 c000 	ldr.w	ip, [r1]
 800d398:	fa1f fe82 	uxth.w	lr, r2
 800d39c:	45c1      	cmp	r9, r8
 800d39e:	fa1f f38c 	uxth.w	r3, ip
 800d3a2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d3a6:	eba3 030e 	sub.w	r3, r3, lr
 800d3aa:	4403      	add	r3, r0
 800d3ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d3b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d3be:	f841 3b04 	str.w	r3, [r1], #4
 800d3c2:	d2e5      	bcs.n	800d390 <quorem+0xac>
 800d3c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3cc:	b922      	cbnz	r2, 800d3d8 <quorem+0xf4>
 800d3ce:	3b04      	subs	r3, #4
 800d3d0:	429d      	cmp	r5, r3
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	d30b      	bcc.n	800d3ee <quorem+0x10a>
 800d3d6:	613c      	str	r4, [r7, #16]
 800d3d8:	3601      	adds	r6, #1
 800d3da:	4630      	mov	r0, r6
 800d3dc:	b003      	add	sp, #12
 800d3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e2:	6812      	ldr	r2, [r2, #0]
 800d3e4:	3b04      	subs	r3, #4
 800d3e6:	2a00      	cmp	r2, #0
 800d3e8:	d1ca      	bne.n	800d380 <quorem+0x9c>
 800d3ea:	3c01      	subs	r4, #1
 800d3ec:	e7c5      	b.n	800d37a <quorem+0x96>
 800d3ee:	6812      	ldr	r2, [r2, #0]
 800d3f0:	3b04      	subs	r3, #4
 800d3f2:	2a00      	cmp	r2, #0
 800d3f4:	d1ef      	bne.n	800d3d6 <quorem+0xf2>
 800d3f6:	3c01      	subs	r4, #1
 800d3f8:	e7ea      	b.n	800d3d0 <quorem+0xec>
 800d3fa:	2000      	movs	r0, #0
 800d3fc:	e7ee      	b.n	800d3dc <quorem+0xf8>
	...

0800d400 <_dtoa_r>:
 800d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d404:	69c7      	ldr	r7, [r0, #28]
 800d406:	b099      	sub	sp, #100	@ 0x64
 800d408:	4683      	mov	fp, r0
 800d40a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d40c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d40e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d410:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d412:	ec55 4b10 	vmov	r4, r5, d0
 800d416:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d41a:	b97f      	cbnz	r7, 800d43c <_dtoa_r+0x3c>
 800d41c:	2010      	movs	r0, #16
 800d41e:	f7fe fd4d 	bl	800bebc <malloc>
 800d422:	4602      	mov	r2, r0
 800d424:	f8cb 001c 	str.w	r0, [fp, #28]
 800d428:	b920      	cbnz	r0, 800d434 <_dtoa_r+0x34>
 800d42a:	4ba7      	ldr	r3, [pc, #668]	@ (800d6c8 <_dtoa_r+0x2c8>)
 800d42c:	21ef      	movs	r1, #239	@ 0xef
 800d42e:	48a7      	ldr	r0, [pc, #668]	@ (800d6cc <_dtoa_r+0x2cc>)
 800d430:	f002 fd32 	bl	800fe98 <__assert_func>
 800d434:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d438:	6007      	str	r7, [r0, #0]
 800d43a:	60c7      	str	r7, [r0, #12]
 800d43c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d440:	6819      	ldr	r1, [r3, #0]
 800d442:	b159      	cbz	r1, 800d45c <_dtoa_r+0x5c>
 800d444:	685a      	ldr	r2, [r3, #4]
 800d446:	2301      	movs	r3, #1
 800d448:	4658      	mov	r0, fp
 800d44a:	4093      	lsls	r3, r2
 800d44c:	604a      	str	r2, [r1, #4]
 800d44e:	608b      	str	r3, [r1, #8]
 800d450:	f000 fe24 	bl	800e09c <_Bfree>
 800d454:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d458:	2200      	movs	r2, #0
 800d45a:	601a      	str	r2, [r3, #0]
 800d45c:	1e2b      	subs	r3, r5, #0
 800d45e:	bfb7      	itett	lt
 800d460:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d464:	2300      	movge	r3, #0
 800d466:	2201      	movlt	r2, #1
 800d468:	9303      	strlt	r3, [sp, #12]
 800d46a:	bfa8      	it	ge
 800d46c:	6033      	strge	r3, [r6, #0]
 800d46e:	9f03      	ldr	r7, [sp, #12]
 800d470:	4b97      	ldr	r3, [pc, #604]	@ (800d6d0 <_dtoa_r+0x2d0>)
 800d472:	bfb8      	it	lt
 800d474:	6032      	strlt	r2, [r6, #0]
 800d476:	43bb      	bics	r3, r7
 800d478:	d112      	bne.n	800d4a0 <_dtoa_r+0xa0>
 800d47a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d47e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d480:	6013      	str	r3, [r2, #0]
 800d482:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d486:	4323      	orrs	r3, r4
 800d488:	f000 854c 	beq.w	800df24 <_dtoa_r+0xb24>
 800d48c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d48e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d6e4 <_dtoa_r+0x2e4>
 800d492:	2b00      	cmp	r3, #0
 800d494:	f000 854e 	beq.w	800df34 <_dtoa_r+0xb34>
 800d498:	f10a 0303 	add.w	r3, sl, #3
 800d49c:	f000 bd48 	b.w	800df30 <_dtoa_r+0xb30>
 800d4a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	ec51 0b17 	vmov	r0, r1, d7
 800d4ac:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d4b0:	f7f3 fb1a 	bl	8000ae8 <__aeabi_dcmpeq>
 800d4b4:	4680      	mov	r8, r0
 800d4b6:	b158      	cbz	r0, 800d4d0 <_dtoa_r+0xd0>
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d4bc:	6013      	str	r3, [r2, #0]
 800d4be:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d4c0:	b113      	cbz	r3, 800d4c8 <_dtoa_r+0xc8>
 800d4c2:	4b84      	ldr	r3, [pc, #528]	@ (800d6d4 <_dtoa_r+0x2d4>)
 800d4c4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d4c6:	6013      	str	r3, [r2, #0]
 800d4c8:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800d6e8 <_dtoa_r+0x2e8>
 800d4cc:	f000 bd32 	b.w	800df34 <_dtoa_r+0xb34>
 800d4d0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d4d4:	aa16      	add	r2, sp, #88	@ 0x58
 800d4d6:	a917      	add	r1, sp, #92	@ 0x5c
 800d4d8:	4658      	mov	r0, fp
 800d4da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d4de:	f001 f98b 	bl	800e7f8 <__d2b>
 800d4e2:	4681      	mov	r9, r0
 800d4e4:	2e00      	cmp	r6, #0
 800d4e6:	d075      	beq.n	800d5d4 <_dtoa_r+0x1d4>
 800d4e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d4ea:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d4ee:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d4f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4f6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d4fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4fe:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d502:	4619      	mov	r1, r3
 800d504:	2200      	movs	r2, #0
 800d506:	4b74      	ldr	r3, [pc, #464]	@ (800d6d8 <_dtoa_r+0x2d8>)
 800d508:	f7f2 fece 	bl	80002a8 <__aeabi_dsub>
 800d50c:	a368      	add	r3, pc, #416	@ (adr r3, 800d6b0 <_dtoa_r+0x2b0>)
 800d50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d512:	f7f3 f881 	bl	8000618 <__aeabi_dmul>
 800d516:	a368      	add	r3, pc, #416	@ (adr r3, 800d6b8 <_dtoa_r+0x2b8>)
 800d518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51c:	f7f2 fec6 	bl	80002ac <__adddf3>
 800d520:	4604      	mov	r4, r0
 800d522:	460d      	mov	r5, r1
 800d524:	4630      	mov	r0, r6
 800d526:	f7f3 f80d 	bl	8000544 <__aeabi_i2d>
 800d52a:	a365      	add	r3, pc, #404	@ (adr r3, 800d6c0 <_dtoa_r+0x2c0>)
 800d52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d530:	f7f3 f872 	bl	8000618 <__aeabi_dmul>
 800d534:	4602      	mov	r2, r0
 800d536:	460b      	mov	r3, r1
 800d538:	4620      	mov	r0, r4
 800d53a:	4629      	mov	r1, r5
 800d53c:	f7f2 feb6 	bl	80002ac <__adddf3>
 800d540:	4604      	mov	r4, r0
 800d542:	460d      	mov	r5, r1
 800d544:	f7f3 fb18 	bl	8000b78 <__aeabi_d2iz>
 800d548:	2200      	movs	r2, #0
 800d54a:	4607      	mov	r7, r0
 800d54c:	2300      	movs	r3, #0
 800d54e:	4620      	mov	r0, r4
 800d550:	4629      	mov	r1, r5
 800d552:	f7f3 fad3 	bl	8000afc <__aeabi_dcmplt>
 800d556:	b140      	cbz	r0, 800d56a <_dtoa_r+0x16a>
 800d558:	4638      	mov	r0, r7
 800d55a:	f7f2 fff3 	bl	8000544 <__aeabi_i2d>
 800d55e:	4622      	mov	r2, r4
 800d560:	462b      	mov	r3, r5
 800d562:	f7f3 fac1 	bl	8000ae8 <__aeabi_dcmpeq>
 800d566:	b900      	cbnz	r0, 800d56a <_dtoa_r+0x16a>
 800d568:	3f01      	subs	r7, #1
 800d56a:	2f16      	cmp	r7, #22
 800d56c:	d851      	bhi.n	800d612 <_dtoa_r+0x212>
 800d56e:	4b5b      	ldr	r3, [pc, #364]	@ (800d6dc <_dtoa_r+0x2dc>)
 800d570:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d574:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57c:	f7f3 fabe 	bl	8000afc <__aeabi_dcmplt>
 800d580:	2800      	cmp	r0, #0
 800d582:	d048      	beq.n	800d616 <_dtoa_r+0x216>
 800d584:	3f01      	subs	r7, #1
 800d586:	2300      	movs	r3, #0
 800d588:	9312      	str	r3, [sp, #72]	@ 0x48
 800d58a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d58c:	1b9b      	subs	r3, r3, r6
 800d58e:	1e5a      	subs	r2, r3, #1
 800d590:	bf46      	itte	mi
 800d592:	f1c3 0801 	rsbmi	r8, r3, #1
 800d596:	2300      	movmi	r3, #0
 800d598:	f04f 0800 	movpl.w	r8, #0
 800d59c:	9208      	str	r2, [sp, #32]
 800d59e:	bf48      	it	mi
 800d5a0:	9308      	strmi	r3, [sp, #32]
 800d5a2:	2f00      	cmp	r7, #0
 800d5a4:	db39      	blt.n	800d61a <_dtoa_r+0x21a>
 800d5a6:	9b08      	ldr	r3, [sp, #32]
 800d5a8:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d5aa:	443b      	add	r3, r7
 800d5ac:	9308      	str	r3, [sp, #32]
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5b4:	2b09      	cmp	r3, #9
 800d5b6:	d864      	bhi.n	800d682 <_dtoa_r+0x282>
 800d5b8:	2b05      	cmp	r3, #5
 800d5ba:	bfc5      	ittet	gt
 800d5bc:	3b04      	subgt	r3, #4
 800d5be:	2400      	movgt	r4, #0
 800d5c0:	2401      	movle	r4, #1
 800d5c2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5c6:	3b02      	subs	r3, #2
 800d5c8:	2b03      	cmp	r3, #3
 800d5ca:	d865      	bhi.n	800d698 <_dtoa_r+0x298>
 800d5cc:	e8df f003 	tbb	[pc, r3]
 800d5d0:	5737392c 	.word	0x5737392c
 800d5d4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d5d8:	441e      	add	r6, r3
 800d5da:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d5de:	2b20      	cmp	r3, #32
 800d5e0:	bfc9      	itett	gt
 800d5e2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d5e6:	f1c3 0320 	rsble	r3, r3, #32
 800d5ea:	409f      	lslgt	r7, r3
 800d5ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d5f0:	bfd8      	it	le
 800d5f2:	fa04 f003 	lslle.w	r0, r4, r3
 800d5f6:	f106 36ff 	add.w	r6, r6, #4294967295
 800d5fa:	bfc4      	itt	gt
 800d5fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d600:	ea47 0003 	orrgt.w	r0, r7, r3
 800d604:	f7f2 ff8e 	bl	8000524 <__aeabi_ui2d>
 800d608:	2201      	movs	r2, #1
 800d60a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d60e:	9214      	str	r2, [sp, #80]	@ 0x50
 800d610:	e777      	b.n	800d502 <_dtoa_r+0x102>
 800d612:	2301      	movs	r3, #1
 800d614:	e7b8      	b.n	800d588 <_dtoa_r+0x188>
 800d616:	9012      	str	r0, [sp, #72]	@ 0x48
 800d618:	e7b7      	b.n	800d58a <_dtoa_r+0x18a>
 800d61a:	427b      	negs	r3, r7
 800d61c:	eba8 0807 	sub.w	r8, r8, r7
 800d620:	930a      	str	r3, [sp, #40]	@ 0x28
 800d622:	2300      	movs	r3, #0
 800d624:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d626:	e7c4      	b.n	800d5b2 <_dtoa_r+0x1b2>
 800d628:	2300      	movs	r3, #0
 800d62a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d62c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d62e:	2b00      	cmp	r3, #0
 800d630:	dc35      	bgt.n	800d69e <_dtoa_r+0x29e>
 800d632:	2301      	movs	r3, #1
 800d634:	461a      	mov	r2, r3
 800d636:	9300      	str	r3, [sp, #0]
 800d638:	9307      	str	r3, [sp, #28]
 800d63a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d63c:	e00b      	b.n	800d656 <_dtoa_r+0x256>
 800d63e:	2301      	movs	r3, #1
 800d640:	e7f3      	b.n	800d62a <_dtoa_r+0x22a>
 800d642:	2300      	movs	r3, #0
 800d644:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d646:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d648:	18fb      	adds	r3, r7, r3
 800d64a:	9300      	str	r3, [sp, #0]
 800d64c:	3301      	adds	r3, #1
 800d64e:	2b01      	cmp	r3, #1
 800d650:	9307      	str	r3, [sp, #28]
 800d652:	bfb8      	it	lt
 800d654:	2301      	movlt	r3, #1
 800d656:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d65a:	2100      	movs	r1, #0
 800d65c:	2204      	movs	r2, #4
 800d65e:	f102 0514 	add.w	r5, r2, #20
 800d662:	429d      	cmp	r5, r3
 800d664:	d91f      	bls.n	800d6a6 <_dtoa_r+0x2a6>
 800d666:	6041      	str	r1, [r0, #4]
 800d668:	4658      	mov	r0, fp
 800d66a:	f000 fcd7 	bl	800e01c <_Balloc>
 800d66e:	4682      	mov	sl, r0
 800d670:	2800      	cmp	r0, #0
 800d672:	d13b      	bne.n	800d6ec <_dtoa_r+0x2ec>
 800d674:	4b1a      	ldr	r3, [pc, #104]	@ (800d6e0 <_dtoa_r+0x2e0>)
 800d676:	4602      	mov	r2, r0
 800d678:	f240 11af 	movw	r1, #431	@ 0x1af
 800d67c:	e6d7      	b.n	800d42e <_dtoa_r+0x2e>
 800d67e:	2301      	movs	r3, #1
 800d680:	e7e0      	b.n	800d644 <_dtoa_r+0x244>
 800d682:	2401      	movs	r4, #1
 800d684:	2300      	movs	r3, #0
 800d686:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d688:	9309      	str	r3, [sp, #36]	@ 0x24
 800d68a:	f04f 33ff 	mov.w	r3, #4294967295
 800d68e:	2200      	movs	r2, #0
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	9307      	str	r3, [sp, #28]
 800d694:	2312      	movs	r3, #18
 800d696:	e7d0      	b.n	800d63a <_dtoa_r+0x23a>
 800d698:	2301      	movs	r3, #1
 800d69a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d69c:	e7f5      	b.n	800d68a <_dtoa_r+0x28a>
 800d69e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	9307      	str	r3, [sp, #28]
 800d6a4:	e7d7      	b.n	800d656 <_dtoa_r+0x256>
 800d6a6:	3101      	adds	r1, #1
 800d6a8:	0052      	lsls	r2, r2, #1
 800d6aa:	e7d8      	b.n	800d65e <_dtoa_r+0x25e>
 800d6ac:	f3af 8000 	nop.w
 800d6b0:	636f4361 	.word	0x636f4361
 800d6b4:	3fd287a7 	.word	0x3fd287a7
 800d6b8:	8b60c8b3 	.word	0x8b60c8b3
 800d6bc:	3fc68a28 	.word	0x3fc68a28
 800d6c0:	509f79fb 	.word	0x509f79fb
 800d6c4:	3fd34413 	.word	0x3fd34413
 800d6c8:	08010ae2 	.word	0x08010ae2
 800d6cc:	08010af9 	.word	0x08010af9
 800d6d0:	7ff00000 	.word	0x7ff00000
 800d6d4:	08010aad 	.word	0x08010aad
 800d6d8:	3ff80000 	.word	0x3ff80000
 800d6dc:	08010bf0 	.word	0x08010bf0
 800d6e0:	08010b51 	.word	0x08010b51
 800d6e4:	08010ade 	.word	0x08010ade
 800d6e8:	08010aac 	.word	0x08010aac
 800d6ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d6f0:	6018      	str	r0, [r3, #0]
 800d6f2:	9b07      	ldr	r3, [sp, #28]
 800d6f4:	2b0e      	cmp	r3, #14
 800d6f6:	f200 80a4 	bhi.w	800d842 <_dtoa_r+0x442>
 800d6fa:	2c00      	cmp	r4, #0
 800d6fc:	f000 80a1 	beq.w	800d842 <_dtoa_r+0x442>
 800d700:	2f00      	cmp	r7, #0
 800d702:	dd33      	ble.n	800d76c <_dtoa_r+0x36c>
 800d704:	f007 020f 	and.w	r2, r7, #15
 800d708:	4bac      	ldr	r3, [pc, #688]	@ (800d9bc <_dtoa_r+0x5bc>)
 800d70a:	05f8      	lsls	r0, r7, #23
 800d70c:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d710:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d714:	ed93 7b00 	vldr	d7, [r3]
 800d718:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d71c:	d516      	bpl.n	800d74c <_dtoa_r+0x34c>
 800d71e:	4ba8      	ldr	r3, [pc, #672]	@ (800d9c0 <_dtoa_r+0x5c0>)
 800d720:	f004 040f 	and.w	r4, r4, #15
 800d724:	2603      	movs	r6, #3
 800d726:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d72a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d72e:	f7f3 f89d 	bl	800086c <__aeabi_ddiv>
 800d732:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d736:	4da2      	ldr	r5, [pc, #648]	@ (800d9c0 <_dtoa_r+0x5c0>)
 800d738:	b954      	cbnz	r4, 800d750 <_dtoa_r+0x350>
 800d73a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d73e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d742:	f7f3 f893 	bl	800086c <__aeabi_ddiv>
 800d746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d74a:	e028      	b.n	800d79e <_dtoa_r+0x39e>
 800d74c:	2602      	movs	r6, #2
 800d74e:	e7f2      	b.n	800d736 <_dtoa_r+0x336>
 800d750:	07e1      	lsls	r1, r4, #31
 800d752:	d508      	bpl.n	800d766 <_dtoa_r+0x366>
 800d754:	3601      	adds	r6, #1
 800d756:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d75a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d75e:	f7f2 ff5b 	bl	8000618 <__aeabi_dmul>
 800d762:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d766:	1064      	asrs	r4, r4, #1
 800d768:	3508      	adds	r5, #8
 800d76a:	e7e5      	b.n	800d738 <_dtoa_r+0x338>
 800d76c:	f000 80d2 	beq.w	800d914 <_dtoa_r+0x514>
 800d770:	427c      	negs	r4, r7
 800d772:	4b92      	ldr	r3, [pc, #584]	@ (800d9bc <_dtoa_r+0x5bc>)
 800d774:	4d92      	ldr	r5, [pc, #584]	@ (800d9c0 <_dtoa_r+0x5c0>)
 800d776:	2602      	movs	r6, #2
 800d778:	f004 020f 	and.w	r2, r4, #15
 800d77c:	1124      	asrs	r4, r4, #4
 800d77e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d782:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78a:	f7f2 ff45 	bl	8000618 <__aeabi_dmul>
 800d78e:	2300      	movs	r3, #0
 800d790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d794:	2c00      	cmp	r4, #0
 800d796:	f040 80b2 	bne.w	800d8fe <_dtoa_r+0x4fe>
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d1d3      	bne.n	800d746 <_dtoa_r+0x346>
 800d79e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d7a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	f000 80b7 	beq.w	800d918 <_dtoa_r+0x518>
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	4b85      	ldr	r3, [pc, #532]	@ (800d9c4 <_dtoa_r+0x5c4>)
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	4629      	mov	r1, r5
 800d7b2:	f7f3 f9a3 	bl	8000afc <__aeabi_dcmplt>
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	f000 80ae 	beq.w	800d918 <_dtoa_r+0x518>
 800d7bc:	9b07      	ldr	r3, [sp, #28]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f000 80aa 	beq.w	800d918 <_dtoa_r+0x518>
 800d7c4:	9b00      	ldr	r3, [sp, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	dd37      	ble.n	800d83a <_dtoa_r+0x43a>
 800d7ca:	1e7b      	subs	r3, r7, #1
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	4629      	mov	r1, r5
 800d7d2:	9304      	str	r3, [sp, #16]
 800d7d4:	3601      	adds	r6, #1
 800d7d6:	4b7c      	ldr	r3, [pc, #496]	@ (800d9c8 <_dtoa_r+0x5c8>)
 800d7d8:	f7f2 ff1e 	bl	8000618 <__aeabi_dmul>
 800d7dc:	9c00      	ldr	r4, [sp, #0]
 800d7de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7e2:	4630      	mov	r0, r6
 800d7e4:	f7f2 feae 	bl	8000544 <__aeabi_i2d>
 800d7e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7ec:	f7f2 ff14 	bl	8000618 <__aeabi_dmul>
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	4b76      	ldr	r3, [pc, #472]	@ (800d9cc <_dtoa_r+0x5cc>)
 800d7f4:	f7f2 fd5a 	bl	80002ac <__adddf3>
 800d7f8:	4605      	mov	r5, r0
 800d7fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d7fe:	2c00      	cmp	r4, #0
 800d800:	f040 808d 	bne.w	800d91e <_dtoa_r+0x51e>
 800d804:	2200      	movs	r2, #0
 800d806:	4b72      	ldr	r3, [pc, #456]	@ (800d9d0 <_dtoa_r+0x5d0>)
 800d808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d80c:	f7f2 fd4c 	bl	80002a8 <__aeabi_dsub>
 800d810:	4602      	mov	r2, r0
 800d812:	460b      	mov	r3, r1
 800d814:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d818:	462a      	mov	r2, r5
 800d81a:	4633      	mov	r3, r6
 800d81c:	f7f3 f98c 	bl	8000b38 <__aeabi_dcmpgt>
 800d820:	2800      	cmp	r0, #0
 800d822:	f040 828b 	bne.w	800dd3c <_dtoa_r+0x93c>
 800d826:	462a      	mov	r2, r5
 800d828:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d82c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d830:	f7f3 f964 	bl	8000afc <__aeabi_dcmplt>
 800d834:	2800      	cmp	r0, #0
 800d836:	f040 8128 	bne.w	800da8a <_dtoa_r+0x68a>
 800d83a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d83e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d842:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d844:	2b00      	cmp	r3, #0
 800d846:	f2c0 815a 	blt.w	800dafe <_dtoa_r+0x6fe>
 800d84a:	2f0e      	cmp	r7, #14
 800d84c:	f300 8157 	bgt.w	800dafe <_dtoa_r+0x6fe>
 800d850:	4b5a      	ldr	r3, [pc, #360]	@ (800d9bc <_dtoa_r+0x5bc>)
 800d852:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d856:	ed93 7b00 	vldr	d7, [r3]
 800d85a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	ed8d 7b00 	vstr	d7, [sp]
 800d862:	da03      	bge.n	800d86c <_dtoa_r+0x46c>
 800d864:	9b07      	ldr	r3, [sp, #28]
 800d866:	2b00      	cmp	r3, #0
 800d868:	f340 8101 	ble.w	800da6e <_dtoa_r+0x66e>
 800d86c:	4656      	mov	r6, sl
 800d86e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d872:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d876:	4620      	mov	r0, r4
 800d878:	4629      	mov	r1, r5
 800d87a:	f7f2 fff7 	bl	800086c <__aeabi_ddiv>
 800d87e:	f7f3 f97b 	bl	8000b78 <__aeabi_d2iz>
 800d882:	4680      	mov	r8, r0
 800d884:	f7f2 fe5e 	bl	8000544 <__aeabi_i2d>
 800d888:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d88c:	f7f2 fec4 	bl	8000618 <__aeabi_dmul>
 800d890:	4602      	mov	r2, r0
 800d892:	4620      	mov	r0, r4
 800d894:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d898:	460b      	mov	r3, r1
 800d89a:	4629      	mov	r1, r5
 800d89c:	f7f2 fd04 	bl	80002a8 <__aeabi_dsub>
 800d8a0:	9d07      	ldr	r5, [sp, #28]
 800d8a2:	f806 4b01 	strb.w	r4, [r6], #1
 800d8a6:	eba6 040a 	sub.w	r4, r6, sl
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	42a5      	cmp	r5, r4
 800d8b0:	f040 8117 	bne.w	800dae2 <_dtoa_r+0x6e2>
 800d8b4:	f7f2 fcfa 	bl	80002ac <__adddf3>
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	460d      	mov	r5, r1
 800d8bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8c0:	f7f3 f93a 	bl	8000b38 <__aeabi_dcmpgt>
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	f040 80f9 	bne.w	800dabc <_dtoa_r+0x6bc>
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	4629      	mov	r1, r5
 800d8ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8d2:	f7f3 f909 	bl	8000ae8 <__aeabi_dcmpeq>
 800d8d6:	b118      	cbz	r0, 800d8e0 <_dtoa_r+0x4e0>
 800d8d8:	f018 0f01 	tst.w	r8, #1
 800d8dc:	f040 80ee 	bne.w	800dabc <_dtoa_r+0x6bc>
 800d8e0:	4649      	mov	r1, r9
 800d8e2:	4658      	mov	r0, fp
 800d8e4:	f000 fbda 	bl	800e09c <_Bfree>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	3701      	adds	r7, #1
 800d8ec:	7033      	strb	r3, [r6, #0]
 800d8ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d8f0:	601f      	str	r7, [r3, #0]
 800d8f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	f000 831d 	beq.w	800df34 <_dtoa_r+0xb34>
 800d8fa:	601e      	str	r6, [r3, #0]
 800d8fc:	e31a      	b.n	800df34 <_dtoa_r+0xb34>
 800d8fe:	07e2      	lsls	r2, r4, #31
 800d900:	d505      	bpl.n	800d90e <_dtoa_r+0x50e>
 800d902:	3601      	adds	r6, #1
 800d904:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d908:	f7f2 fe86 	bl	8000618 <__aeabi_dmul>
 800d90c:	2301      	movs	r3, #1
 800d90e:	1064      	asrs	r4, r4, #1
 800d910:	3508      	adds	r5, #8
 800d912:	e73f      	b.n	800d794 <_dtoa_r+0x394>
 800d914:	2602      	movs	r6, #2
 800d916:	e742      	b.n	800d79e <_dtoa_r+0x39e>
 800d918:	9c07      	ldr	r4, [sp, #28]
 800d91a:	9704      	str	r7, [sp, #16]
 800d91c:	e761      	b.n	800d7e2 <_dtoa_r+0x3e2>
 800d91e:	4b27      	ldr	r3, [pc, #156]	@ (800d9bc <_dtoa_r+0x5bc>)
 800d920:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d922:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d926:	4454      	add	r4, sl
 800d928:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d92c:	2900      	cmp	r1, #0
 800d92e:	d053      	beq.n	800d9d8 <_dtoa_r+0x5d8>
 800d930:	2000      	movs	r0, #0
 800d932:	4928      	ldr	r1, [pc, #160]	@ (800d9d4 <_dtoa_r+0x5d4>)
 800d934:	f7f2 ff9a 	bl	800086c <__aeabi_ddiv>
 800d938:	4633      	mov	r3, r6
 800d93a:	4656      	mov	r6, sl
 800d93c:	462a      	mov	r2, r5
 800d93e:	f7f2 fcb3 	bl	80002a8 <__aeabi_dsub>
 800d942:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d94a:	f7f3 f915 	bl	8000b78 <__aeabi_d2iz>
 800d94e:	4605      	mov	r5, r0
 800d950:	f7f2 fdf8 	bl	8000544 <__aeabi_i2d>
 800d954:	4602      	mov	r2, r0
 800d956:	460b      	mov	r3, r1
 800d958:	3530      	adds	r5, #48	@ 0x30
 800d95a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d95e:	f7f2 fca3 	bl	80002a8 <__aeabi_dsub>
 800d962:	4602      	mov	r2, r0
 800d964:	460b      	mov	r3, r1
 800d966:	f806 5b01 	strb.w	r5, [r6], #1
 800d96a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d96e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d972:	f7f3 f8c3 	bl	8000afc <__aeabi_dcmplt>
 800d976:	2800      	cmp	r0, #0
 800d978:	d171      	bne.n	800da5e <_dtoa_r+0x65e>
 800d97a:	2000      	movs	r0, #0
 800d97c:	4911      	ldr	r1, [pc, #68]	@ (800d9c4 <_dtoa_r+0x5c4>)
 800d97e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d982:	f7f2 fc91 	bl	80002a8 <__aeabi_dsub>
 800d986:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d98a:	f7f3 f8b7 	bl	8000afc <__aeabi_dcmplt>
 800d98e:	2800      	cmp	r0, #0
 800d990:	f040 8095 	bne.w	800dabe <_dtoa_r+0x6be>
 800d994:	42a6      	cmp	r6, r4
 800d996:	f43f af50 	beq.w	800d83a <_dtoa_r+0x43a>
 800d99a:	2200      	movs	r2, #0
 800d99c:	4b0a      	ldr	r3, [pc, #40]	@ (800d9c8 <_dtoa_r+0x5c8>)
 800d99e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d9a2:	f7f2 fe39 	bl	8000618 <__aeabi_dmul>
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	4b07      	ldr	r3, [pc, #28]	@ (800d9c8 <_dtoa_r+0x5c8>)
 800d9aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9b2:	f7f2 fe31 	bl	8000618 <__aeabi_dmul>
 800d9b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9ba:	e7c4      	b.n	800d946 <_dtoa_r+0x546>
 800d9bc:	08010bf0 	.word	0x08010bf0
 800d9c0:	08010bc8 	.word	0x08010bc8
 800d9c4:	3ff00000 	.word	0x3ff00000
 800d9c8:	40240000 	.word	0x40240000
 800d9cc:	401c0000 	.word	0x401c0000
 800d9d0:	40140000 	.word	0x40140000
 800d9d4:	3fe00000 	.word	0x3fe00000
 800d9d8:	4631      	mov	r1, r6
 800d9da:	4656      	mov	r6, sl
 800d9dc:	4628      	mov	r0, r5
 800d9de:	f7f2 fe1b 	bl	8000618 <__aeabi_dmul>
 800d9e2:	9415      	str	r4, [sp, #84]	@ 0x54
 800d9e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d9e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9ec:	f7f3 f8c4 	bl	8000b78 <__aeabi_d2iz>
 800d9f0:	4605      	mov	r5, r0
 800d9f2:	f7f2 fda7 	bl	8000544 <__aeabi_i2d>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	3530      	adds	r5, #48	@ 0x30
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da00:	f7f2 fc52 	bl	80002a8 <__aeabi_dsub>
 800da04:	f806 5b01 	strb.w	r5, [r6], #1
 800da08:	4602      	mov	r2, r0
 800da0a:	460b      	mov	r3, r1
 800da0c:	42a6      	cmp	r6, r4
 800da0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da12:	f04f 0200 	mov.w	r2, #0
 800da16:	d124      	bne.n	800da62 <_dtoa_r+0x662>
 800da18:	4bac      	ldr	r3, [pc, #688]	@ (800dccc <_dtoa_r+0x8cc>)
 800da1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da1e:	f7f2 fc45 	bl	80002ac <__adddf3>
 800da22:	4602      	mov	r2, r0
 800da24:	460b      	mov	r3, r1
 800da26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da2a:	f7f3 f885 	bl	8000b38 <__aeabi_dcmpgt>
 800da2e:	2800      	cmp	r0, #0
 800da30:	d145      	bne.n	800dabe <_dtoa_r+0x6be>
 800da32:	2000      	movs	r0, #0
 800da34:	49a5      	ldr	r1, [pc, #660]	@ (800dccc <_dtoa_r+0x8cc>)
 800da36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da3a:	f7f2 fc35 	bl	80002a8 <__aeabi_dsub>
 800da3e:	4602      	mov	r2, r0
 800da40:	460b      	mov	r3, r1
 800da42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da46:	f7f3 f859 	bl	8000afc <__aeabi_dcmplt>
 800da4a:	2800      	cmp	r0, #0
 800da4c:	f43f aef5 	beq.w	800d83a <_dtoa_r+0x43a>
 800da50:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800da52:	1e73      	subs	r3, r6, #1
 800da54:	9315      	str	r3, [sp, #84]	@ 0x54
 800da56:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da5a:	2b30      	cmp	r3, #48	@ 0x30
 800da5c:	d0f8      	beq.n	800da50 <_dtoa_r+0x650>
 800da5e:	9f04      	ldr	r7, [sp, #16]
 800da60:	e73e      	b.n	800d8e0 <_dtoa_r+0x4e0>
 800da62:	4b9b      	ldr	r3, [pc, #620]	@ (800dcd0 <_dtoa_r+0x8d0>)
 800da64:	f7f2 fdd8 	bl	8000618 <__aeabi_dmul>
 800da68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da6c:	e7bc      	b.n	800d9e8 <_dtoa_r+0x5e8>
 800da6e:	d10c      	bne.n	800da8a <_dtoa_r+0x68a>
 800da70:	2200      	movs	r2, #0
 800da72:	4b98      	ldr	r3, [pc, #608]	@ (800dcd4 <_dtoa_r+0x8d4>)
 800da74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da78:	f7f2 fdce 	bl	8000618 <__aeabi_dmul>
 800da7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da80:	f7f3 f850 	bl	8000b24 <__aeabi_dcmpge>
 800da84:	2800      	cmp	r0, #0
 800da86:	f000 8157 	beq.w	800dd38 <_dtoa_r+0x938>
 800da8a:	2400      	movs	r4, #0
 800da8c:	4625      	mov	r5, r4
 800da8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da90:	4656      	mov	r6, sl
 800da92:	43db      	mvns	r3, r3
 800da94:	9304      	str	r3, [sp, #16]
 800da96:	2700      	movs	r7, #0
 800da98:	4621      	mov	r1, r4
 800da9a:	4658      	mov	r0, fp
 800da9c:	f000 fafe 	bl	800e09c <_Bfree>
 800daa0:	2d00      	cmp	r5, #0
 800daa2:	d0dc      	beq.n	800da5e <_dtoa_r+0x65e>
 800daa4:	b12f      	cbz	r7, 800dab2 <_dtoa_r+0x6b2>
 800daa6:	42af      	cmp	r7, r5
 800daa8:	d003      	beq.n	800dab2 <_dtoa_r+0x6b2>
 800daaa:	4639      	mov	r1, r7
 800daac:	4658      	mov	r0, fp
 800daae:	f000 faf5 	bl	800e09c <_Bfree>
 800dab2:	4629      	mov	r1, r5
 800dab4:	4658      	mov	r0, fp
 800dab6:	f000 faf1 	bl	800e09c <_Bfree>
 800daba:	e7d0      	b.n	800da5e <_dtoa_r+0x65e>
 800dabc:	9704      	str	r7, [sp, #16]
 800dabe:	4633      	mov	r3, r6
 800dac0:	461e      	mov	r6, r3
 800dac2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dac6:	2a39      	cmp	r2, #57	@ 0x39
 800dac8:	d107      	bne.n	800dada <_dtoa_r+0x6da>
 800daca:	459a      	cmp	sl, r3
 800dacc:	d1f8      	bne.n	800dac0 <_dtoa_r+0x6c0>
 800dace:	9a04      	ldr	r2, [sp, #16]
 800dad0:	3201      	adds	r2, #1
 800dad2:	9204      	str	r2, [sp, #16]
 800dad4:	2230      	movs	r2, #48	@ 0x30
 800dad6:	f88a 2000 	strb.w	r2, [sl]
 800dada:	781a      	ldrb	r2, [r3, #0]
 800dadc:	3201      	adds	r2, #1
 800dade:	701a      	strb	r2, [r3, #0]
 800dae0:	e7bd      	b.n	800da5e <_dtoa_r+0x65e>
 800dae2:	2200      	movs	r2, #0
 800dae4:	4b7a      	ldr	r3, [pc, #488]	@ (800dcd0 <_dtoa_r+0x8d0>)
 800dae6:	f7f2 fd97 	bl	8000618 <__aeabi_dmul>
 800daea:	2200      	movs	r2, #0
 800daec:	2300      	movs	r3, #0
 800daee:	4604      	mov	r4, r0
 800daf0:	460d      	mov	r5, r1
 800daf2:	f7f2 fff9 	bl	8000ae8 <__aeabi_dcmpeq>
 800daf6:	2800      	cmp	r0, #0
 800daf8:	f43f aebb 	beq.w	800d872 <_dtoa_r+0x472>
 800dafc:	e6f0      	b.n	800d8e0 <_dtoa_r+0x4e0>
 800dafe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db00:	2a00      	cmp	r2, #0
 800db02:	f000 80db 	beq.w	800dcbc <_dtoa_r+0x8bc>
 800db06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db08:	2a01      	cmp	r2, #1
 800db0a:	f300 80bf 	bgt.w	800dc8c <_dtoa_r+0x88c>
 800db0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800db10:	2a00      	cmp	r2, #0
 800db12:	f000 80b7 	beq.w	800dc84 <_dtoa_r+0x884>
 800db16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800db1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db1c:	4646      	mov	r6, r8
 800db1e:	9a08      	ldr	r2, [sp, #32]
 800db20:	2101      	movs	r1, #1
 800db22:	4658      	mov	r0, fp
 800db24:	4498      	add	r8, r3
 800db26:	441a      	add	r2, r3
 800db28:	9208      	str	r2, [sp, #32]
 800db2a:	f000 fbb7 	bl	800e29c <__i2b>
 800db2e:	4605      	mov	r5, r0
 800db30:	b15e      	cbz	r6, 800db4a <_dtoa_r+0x74a>
 800db32:	9b08      	ldr	r3, [sp, #32]
 800db34:	2b00      	cmp	r3, #0
 800db36:	dd08      	ble.n	800db4a <_dtoa_r+0x74a>
 800db38:	42b3      	cmp	r3, r6
 800db3a:	9a08      	ldr	r2, [sp, #32]
 800db3c:	bfa8      	it	ge
 800db3e:	4633      	movge	r3, r6
 800db40:	eba8 0803 	sub.w	r8, r8, r3
 800db44:	1af6      	subs	r6, r6, r3
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	9308      	str	r3, [sp, #32]
 800db4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db4c:	b1f3      	cbz	r3, 800db8c <_dtoa_r+0x78c>
 800db4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db50:	2b00      	cmp	r3, #0
 800db52:	f000 80b7 	beq.w	800dcc4 <_dtoa_r+0x8c4>
 800db56:	b18c      	cbz	r4, 800db7c <_dtoa_r+0x77c>
 800db58:	4629      	mov	r1, r5
 800db5a:	4622      	mov	r2, r4
 800db5c:	4658      	mov	r0, fp
 800db5e:	f000 fc5d 	bl	800e41c <__pow5mult>
 800db62:	464a      	mov	r2, r9
 800db64:	4601      	mov	r1, r0
 800db66:	4605      	mov	r5, r0
 800db68:	4658      	mov	r0, fp
 800db6a:	f000 fbad 	bl	800e2c8 <__multiply>
 800db6e:	4649      	mov	r1, r9
 800db70:	9004      	str	r0, [sp, #16]
 800db72:	4658      	mov	r0, fp
 800db74:	f000 fa92 	bl	800e09c <_Bfree>
 800db78:	9b04      	ldr	r3, [sp, #16]
 800db7a:	4699      	mov	r9, r3
 800db7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db7e:	1b1a      	subs	r2, r3, r4
 800db80:	d004      	beq.n	800db8c <_dtoa_r+0x78c>
 800db82:	4649      	mov	r1, r9
 800db84:	4658      	mov	r0, fp
 800db86:	f000 fc49 	bl	800e41c <__pow5mult>
 800db8a:	4681      	mov	r9, r0
 800db8c:	2101      	movs	r1, #1
 800db8e:	4658      	mov	r0, fp
 800db90:	f000 fb84 	bl	800e29c <__i2b>
 800db94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db96:	4604      	mov	r4, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	f000 81cf 	beq.w	800df3c <_dtoa_r+0xb3c>
 800db9e:	461a      	mov	r2, r3
 800dba0:	4601      	mov	r1, r0
 800dba2:	4658      	mov	r0, fp
 800dba4:	f000 fc3a 	bl	800e41c <__pow5mult>
 800dba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbaa:	4604      	mov	r4, r0
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	f300 8095 	bgt.w	800dcdc <_dtoa_r+0x8dc>
 800dbb2:	9b02      	ldr	r3, [sp, #8]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f040 8087 	bne.w	800dcc8 <_dtoa_r+0x8c8>
 800dbba:	9b03      	ldr	r3, [sp, #12]
 800dbbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	f040 8089 	bne.w	800dcd8 <_dtoa_r+0x8d8>
 800dbc6:	9b03      	ldr	r3, [sp, #12]
 800dbc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dbcc:	0d1b      	lsrs	r3, r3, #20
 800dbce:	051b      	lsls	r3, r3, #20
 800dbd0:	b12b      	cbz	r3, 800dbde <_dtoa_r+0x7de>
 800dbd2:	9b08      	ldr	r3, [sp, #32]
 800dbd4:	f108 0801 	add.w	r8, r8, #1
 800dbd8:	3301      	adds	r3, #1
 800dbda:	9308      	str	r3, [sp, #32]
 800dbdc:	2301      	movs	r3, #1
 800dbde:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	f000 81b0 	beq.w	800df48 <_dtoa_r+0xb48>
 800dbe8:	6923      	ldr	r3, [r4, #16]
 800dbea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dbee:	6918      	ldr	r0, [r3, #16]
 800dbf0:	f000 fb08 	bl	800e204 <__hi0bits>
 800dbf4:	f1c0 0020 	rsb	r0, r0, #32
 800dbf8:	9b08      	ldr	r3, [sp, #32]
 800dbfa:	4418      	add	r0, r3
 800dbfc:	f010 001f 	ands.w	r0, r0, #31
 800dc00:	d077      	beq.n	800dcf2 <_dtoa_r+0x8f2>
 800dc02:	f1c0 0320 	rsb	r3, r0, #32
 800dc06:	2b04      	cmp	r3, #4
 800dc08:	dd6b      	ble.n	800dce2 <_dtoa_r+0x8e2>
 800dc0a:	f1c0 001c 	rsb	r0, r0, #28
 800dc0e:	9b08      	ldr	r3, [sp, #32]
 800dc10:	4480      	add	r8, r0
 800dc12:	4403      	add	r3, r0
 800dc14:	4406      	add	r6, r0
 800dc16:	9308      	str	r3, [sp, #32]
 800dc18:	f1b8 0f00 	cmp.w	r8, #0
 800dc1c:	dd05      	ble.n	800dc2a <_dtoa_r+0x82a>
 800dc1e:	4649      	mov	r1, r9
 800dc20:	4642      	mov	r2, r8
 800dc22:	4658      	mov	r0, fp
 800dc24:	f000 fc54 	bl	800e4d0 <__lshift>
 800dc28:	4681      	mov	r9, r0
 800dc2a:	9b08      	ldr	r3, [sp, #32]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	dd05      	ble.n	800dc3c <_dtoa_r+0x83c>
 800dc30:	4621      	mov	r1, r4
 800dc32:	461a      	mov	r2, r3
 800dc34:	4658      	mov	r0, fp
 800dc36:	f000 fc4b 	bl	800e4d0 <__lshift>
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d059      	beq.n	800dcf6 <_dtoa_r+0x8f6>
 800dc42:	4621      	mov	r1, r4
 800dc44:	4648      	mov	r0, r9
 800dc46:	f000 fcaf 	bl	800e5a8 <__mcmp>
 800dc4a:	2800      	cmp	r0, #0
 800dc4c:	da53      	bge.n	800dcf6 <_dtoa_r+0x8f6>
 800dc4e:	1e7b      	subs	r3, r7, #1
 800dc50:	4649      	mov	r1, r9
 800dc52:	220a      	movs	r2, #10
 800dc54:	4658      	mov	r0, fp
 800dc56:	9304      	str	r3, [sp, #16]
 800dc58:	2300      	movs	r3, #0
 800dc5a:	f000 fa41 	bl	800e0e0 <__multadd>
 800dc5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc60:	4681      	mov	r9, r0
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	f000 8172 	beq.w	800df4c <_dtoa_r+0xb4c>
 800dc68:	2300      	movs	r3, #0
 800dc6a:	4629      	mov	r1, r5
 800dc6c:	220a      	movs	r2, #10
 800dc6e:	4658      	mov	r0, fp
 800dc70:	f000 fa36 	bl	800e0e0 <__multadd>
 800dc74:	9b00      	ldr	r3, [sp, #0]
 800dc76:	4605      	mov	r5, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	dc67      	bgt.n	800dd4c <_dtoa_r+0x94c>
 800dc7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc7e:	2b02      	cmp	r3, #2
 800dc80:	dc41      	bgt.n	800dd06 <_dtoa_r+0x906>
 800dc82:	e063      	b.n	800dd4c <_dtoa_r+0x94c>
 800dc84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dc86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dc8a:	e746      	b.n	800db1a <_dtoa_r+0x71a>
 800dc8c:	9b07      	ldr	r3, [sp, #28]
 800dc8e:	1e5c      	subs	r4, r3, #1
 800dc90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc92:	42a3      	cmp	r3, r4
 800dc94:	bfb7      	itett	lt
 800dc96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dc98:	1b1c      	subge	r4, r3, r4
 800dc9a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dc9c:	1ae3      	sublt	r3, r4, r3
 800dc9e:	bfbe      	ittt	lt
 800dca0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dca2:	2400      	movlt	r4, #0
 800dca4:	18d2      	addlt	r2, r2, r3
 800dca6:	9b07      	ldr	r3, [sp, #28]
 800dca8:	bfb8      	it	lt
 800dcaa:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	bfb5      	itete	lt
 800dcb0:	eba8 0603 	sublt.w	r6, r8, r3
 800dcb4:	4646      	movge	r6, r8
 800dcb6:	2300      	movlt	r3, #0
 800dcb8:	9b07      	ldrge	r3, [sp, #28]
 800dcba:	e730      	b.n	800db1e <_dtoa_r+0x71e>
 800dcbc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dcbe:	4646      	mov	r6, r8
 800dcc0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dcc2:	e735      	b.n	800db30 <_dtoa_r+0x730>
 800dcc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcc6:	e75c      	b.n	800db82 <_dtoa_r+0x782>
 800dcc8:	2300      	movs	r3, #0
 800dcca:	e788      	b.n	800dbde <_dtoa_r+0x7de>
 800dccc:	3fe00000 	.word	0x3fe00000
 800dcd0:	40240000 	.word	0x40240000
 800dcd4:	40140000 	.word	0x40140000
 800dcd8:	9b02      	ldr	r3, [sp, #8]
 800dcda:	e780      	b.n	800dbde <_dtoa_r+0x7de>
 800dcdc:	2300      	movs	r3, #0
 800dcde:	930a      	str	r3, [sp, #40]	@ 0x28
 800dce0:	e782      	b.n	800dbe8 <_dtoa_r+0x7e8>
 800dce2:	d099      	beq.n	800dc18 <_dtoa_r+0x818>
 800dce4:	331c      	adds	r3, #28
 800dce6:	9a08      	ldr	r2, [sp, #32]
 800dce8:	441a      	add	r2, r3
 800dcea:	4498      	add	r8, r3
 800dcec:	441e      	add	r6, r3
 800dcee:	9208      	str	r2, [sp, #32]
 800dcf0:	e792      	b.n	800dc18 <_dtoa_r+0x818>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	e7f6      	b.n	800dce4 <_dtoa_r+0x8e4>
 800dcf6:	9b07      	ldr	r3, [sp, #28]
 800dcf8:	9704      	str	r7, [sp, #16]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	dc20      	bgt.n	800dd40 <_dtoa_r+0x940>
 800dcfe:	9300      	str	r3, [sp, #0]
 800dd00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd02:	2b02      	cmp	r3, #2
 800dd04:	dd1e      	ble.n	800dd44 <_dtoa_r+0x944>
 800dd06:	9b00      	ldr	r3, [sp, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	f47f aec0 	bne.w	800da8e <_dtoa_r+0x68e>
 800dd0e:	4621      	mov	r1, r4
 800dd10:	2205      	movs	r2, #5
 800dd12:	4658      	mov	r0, fp
 800dd14:	f000 f9e4 	bl	800e0e0 <__multadd>
 800dd18:	4601      	mov	r1, r0
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	4648      	mov	r0, r9
 800dd1e:	f000 fc43 	bl	800e5a8 <__mcmp>
 800dd22:	2800      	cmp	r0, #0
 800dd24:	f77f aeb3 	ble.w	800da8e <_dtoa_r+0x68e>
 800dd28:	2331      	movs	r3, #49	@ 0x31
 800dd2a:	4656      	mov	r6, sl
 800dd2c:	f806 3b01 	strb.w	r3, [r6], #1
 800dd30:	9b04      	ldr	r3, [sp, #16]
 800dd32:	3301      	adds	r3, #1
 800dd34:	9304      	str	r3, [sp, #16]
 800dd36:	e6ae      	b.n	800da96 <_dtoa_r+0x696>
 800dd38:	9c07      	ldr	r4, [sp, #28]
 800dd3a:	9704      	str	r7, [sp, #16]
 800dd3c:	4625      	mov	r5, r4
 800dd3e:	e7f3      	b.n	800dd28 <_dtoa_r+0x928>
 800dd40:	9b07      	ldr	r3, [sp, #28]
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f000 8104 	beq.w	800df54 <_dtoa_r+0xb54>
 800dd4c:	2e00      	cmp	r6, #0
 800dd4e:	dd05      	ble.n	800dd5c <_dtoa_r+0x95c>
 800dd50:	4629      	mov	r1, r5
 800dd52:	4632      	mov	r2, r6
 800dd54:	4658      	mov	r0, fp
 800dd56:	f000 fbbb 	bl	800e4d0 <__lshift>
 800dd5a:	4605      	mov	r5, r0
 800dd5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d05a      	beq.n	800de18 <_dtoa_r+0xa18>
 800dd62:	6869      	ldr	r1, [r5, #4]
 800dd64:	4658      	mov	r0, fp
 800dd66:	f000 f959 	bl	800e01c <_Balloc>
 800dd6a:	4606      	mov	r6, r0
 800dd6c:	b928      	cbnz	r0, 800dd7a <_dtoa_r+0x97a>
 800dd6e:	4b84      	ldr	r3, [pc, #528]	@ (800df80 <_dtoa_r+0xb80>)
 800dd70:	4602      	mov	r2, r0
 800dd72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dd76:	f7ff bb5a 	b.w	800d42e <_dtoa_r+0x2e>
 800dd7a:	692a      	ldr	r2, [r5, #16]
 800dd7c:	f105 010c 	add.w	r1, r5, #12
 800dd80:	300c      	adds	r0, #12
 800dd82:	3202      	adds	r2, #2
 800dd84:	0092      	lsls	r2, r2, #2
 800dd86:	f7ff fa9a 	bl	800d2be <memcpy>
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	4631      	mov	r1, r6
 800dd8e:	4658      	mov	r0, fp
 800dd90:	f000 fb9e 	bl	800e4d0 <__lshift>
 800dd94:	f10a 0301 	add.w	r3, sl, #1
 800dd98:	462f      	mov	r7, r5
 800dd9a:	4605      	mov	r5, r0
 800dd9c:	9307      	str	r3, [sp, #28]
 800dd9e:	9b00      	ldr	r3, [sp, #0]
 800dda0:	4453      	add	r3, sl
 800dda2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dda4:	9b02      	ldr	r3, [sp, #8]
 800dda6:	f003 0301 	and.w	r3, r3, #1
 800ddaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddac:	9b07      	ldr	r3, [sp, #28]
 800ddae:	4621      	mov	r1, r4
 800ddb0:	4648      	mov	r0, r9
 800ddb2:	3b01      	subs	r3, #1
 800ddb4:	9300      	str	r3, [sp, #0]
 800ddb6:	f7ff fa95 	bl	800d2e4 <quorem>
 800ddba:	4639      	mov	r1, r7
 800ddbc:	9002      	str	r0, [sp, #8]
 800ddbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ddc2:	4648      	mov	r0, r9
 800ddc4:	f000 fbf0 	bl	800e5a8 <__mcmp>
 800ddc8:	462a      	mov	r2, r5
 800ddca:	9008      	str	r0, [sp, #32]
 800ddcc:	4621      	mov	r1, r4
 800ddce:	4658      	mov	r0, fp
 800ddd0:	f000 fc06 	bl	800e5e0 <__mdiff>
 800ddd4:	68c2      	ldr	r2, [r0, #12]
 800ddd6:	4606      	mov	r6, r0
 800ddd8:	bb02      	cbnz	r2, 800de1c <_dtoa_r+0xa1c>
 800ddda:	4601      	mov	r1, r0
 800dddc:	4648      	mov	r0, r9
 800ddde:	f000 fbe3 	bl	800e5a8 <__mcmp>
 800dde2:	4602      	mov	r2, r0
 800dde4:	4631      	mov	r1, r6
 800dde6:	4658      	mov	r0, fp
 800dde8:	920e      	str	r2, [sp, #56]	@ 0x38
 800ddea:	f000 f957 	bl	800e09c <_Bfree>
 800ddee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ddf2:	9e07      	ldr	r6, [sp, #28]
 800ddf4:	ea43 0102 	orr.w	r1, r3, r2
 800ddf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddfa:	4319      	orrs	r1, r3
 800ddfc:	d110      	bne.n	800de20 <_dtoa_r+0xa20>
 800ddfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de02:	d029      	beq.n	800de58 <_dtoa_r+0xa58>
 800de04:	9b08      	ldr	r3, [sp, #32]
 800de06:	2b00      	cmp	r3, #0
 800de08:	dd02      	ble.n	800de10 <_dtoa_r+0xa10>
 800de0a:	9b02      	ldr	r3, [sp, #8]
 800de0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800de10:	9b00      	ldr	r3, [sp, #0]
 800de12:	f883 8000 	strb.w	r8, [r3]
 800de16:	e63f      	b.n	800da98 <_dtoa_r+0x698>
 800de18:	4628      	mov	r0, r5
 800de1a:	e7bb      	b.n	800dd94 <_dtoa_r+0x994>
 800de1c:	2201      	movs	r2, #1
 800de1e:	e7e1      	b.n	800dde4 <_dtoa_r+0x9e4>
 800de20:	9b08      	ldr	r3, [sp, #32]
 800de22:	2b00      	cmp	r3, #0
 800de24:	db04      	blt.n	800de30 <_dtoa_r+0xa30>
 800de26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de28:	430b      	orrs	r3, r1
 800de2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800de2c:	430b      	orrs	r3, r1
 800de2e:	d120      	bne.n	800de72 <_dtoa_r+0xa72>
 800de30:	2a00      	cmp	r2, #0
 800de32:	dded      	ble.n	800de10 <_dtoa_r+0xa10>
 800de34:	4649      	mov	r1, r9
 800de36:	2201      	movs	r2, #1
 800de38:	4658      	mov	r0, fp
 800de3a:	f000 fb49 	bl	800e4d0 <__lshift>
 800de3e:	4621      	mov	r1, r4
 800de40:	4681      	mov	r9, r0
 800de42:	f000 fbb1 	bl	800e5a8 <__mcmp>
 800de46:	2800      	cmp	r0, #0
 800de48:	dc03      	bgt.n	800de52 <_dtoa_r+0xa52>
 800de4a:	d1e1      	bne.n	800de10 <_dtoa_r+0xa10>
 800de4c:	f018 0f01 	tst.w	r8, #1
 800de50:	d0de      	beq.n	800de10 <_dtoa_r+0xa10>
 800de52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de56:	d1d8      	bne.n	800de0a <_dtoa_r+0xa0a>
 800de58:	2339      	movs	r3, #57	@ 0x39
 800de5a:	9a00      	ldr	r2, [sp, #0]
 800de5c:	7013      	strb	r3, [r2, #0]
 800de5e:	4633      	mov	r3, r6
 800de60:	461e      	mov	r6, r3
 800de62:	3b01      	subs	r3, #1
 800de64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800de68:	2a39      	cmp	r2, #57	@ 0x39
 800de6a:	d052      	beq.n	800df12 <_dtoa_r+0xb12>
 800de6c:	3201      	adds	r2, #1
 800de6e:	701a      	strb	r2, [r3, #0]
 800de70:	e612      	b.n	800da98 <_dtoa_r+0x698>
 800de72:	2a00      	cmp	r2, #0
 800de74:	dd07      	ble.n	800de86 <_dtoa_r+0xa86>
 800de76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de7a:	d0ed      	beq.n	800de58 <_dtoa_r+0xa58>
 800de7c:	f108 0301 	add.w	r3, r8, #1
 800de80:	9a00      	ldr	r2, [sp, #0]
 800de82:	7013      	strb	r3, [r2, #0]
 800de84:	e608      	b.n	800da98 <_dtoa_r+0x698>
 800de86:	9b07      	ldr	r3, [sp, #28]
 800de88:	9a07      	ldr	r2, [sp, #28]
 800de8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800de8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de90:	4293      	cmp	r3, r2
 800de92:	d028      	beq.n	800dee6 <_dtoa_r+0xae6>
 800de94:	4649      	mov	r1, r9
 800de96:	2300      	movs	r3, #0
 800de98:	220a      	movs	r2, #10
 800de9a:	4658      	mov	r0, fp
 800de9c:	f000 f920 	bl	800e0e0 <__multadd>
 800dea0:	42af      	cmp	r7, r5
 800dea2:	4681      	mov	r9, r0
 800dea4:	f04f 0300 	mov.w	r3, #0
 800dea8:	f04f 020a 	mov.w	r2, #10
 800deac:	4639      	mov	r1, r7
 800deae:	4658      	mov	r0, fp
 800deb0:	d107      	bne.n	800dec2 <_dtoa_r+0xac2>
 800deb2:	f000 f915 	bl	800e0e0 <__multadd>
 800deb6:	4607      	mov	r7, r0
 800deb8:	4605      	mov	r5, r0
 800deba:	9b07      	ldr	r3, [sp, #28]
 800debc:	3301      	adds	r3, #1
 800debe:	9307      	str	r3, [sp, #28]
 800dec0:	e774      	b.n	800ddac <_dtoa_r+0x9ac>
 800dec2:	f000 f90d 	bl	800e0e0 <__multadd>
 800dec6:	4629      	mov	r1, r5
 800dec8:	4607      	mov	r7, r0
 800deca:	2300      	movs	r3, #0
 800decc:	220a      	movs	r2, #10
 800dece:	4658      	mov	r0, fp
 800ded0:	f000 f906 	bl	800e0e0 <__multadd>
 800ded4:	4605      	mov	r5, r0
 800ded6:	e7f0      	b.n	800deba <_dtoa_r+0xaba>
 800ded8:	9b00      	ldr	r3, [sp, #0]
 800deda:	2700      	movs	r7, #0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	bfcc      	ite	gt
 800dee0:	461e      	movgt	r6, r3
 800dee2:	2601      	movle	r6, #1
 800dee4:	4456      	add	r6, sl
 800dee6:	4649      	mov	r1, r9
 800dee8:	2201      	movs	r2, #1
 800deea:	4658      	mov	r0, fp
 800deec:	f000 faf0 	bl	800e4d0 <__lshift>
 800def0:	4621      	mov	r1, r4
 800def2:	4681      	mov	r9, r0
 800def4:	f000 fb58 	bl	800e5a8 <__mcmp>
 800def8:	2800      	cmp	r0, #0
 800defa:	dcb0      	bgt.n	800de5e <_dtoa_r+0xa5e>
 800defc:	d102      	bne.n	800df04 <_dtoa_r+0xb04>
 800defe:	f018 0f01 	tst.w	r8, #1
 800df02:	d1ac      	bne.n	800de5e <_dtoa_r+0xa5e>
 800df04:	4633      	mov	r3, r6
 800df06:	461e      	mov	r6, r3
 800df08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df0c:	2a30      	cmp	r2, #48	@ 0x30
 800df0e:	d0fa      	beq.n	800df06 <_dtoa_r+0xb06>
 800df10:	e5c2      	b.n	800da98 <_dtoa_r+0x698>
 800df12:	459a      	cmp	sl, r3
 800df14:	d1a4      	bne.n	800de60 <_dtoa_r+0xa60>
 800df16:	9b04      	ldr	r3, [sp, #16]
 800df18:	3301      	adds	r3, #1
 800df1a:	9304      	str	r3, [sp, #16]
 800df1c:	2331      	movs	r3, #49	@ 0x31
 800df1e:	f88a 3000 	strb.w	r3, [sl]
 800df22:	e5b9      	b.n	800da98 <_dtoa_r+0x698>
 800df24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800df84 <_dtoa_r+0xb84>
 800df2a:	b11b      	cbz	r3, 800df34 <_dtoa_r+0xb34>
 800df2c:	f10a 0308 	add.w	r3, sl, #8
 800df30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df32:	6013      	str	r3, [r2, #0]
 800df34:	4650      	mov	r0, sl
 800df36:	b019      	add	sp, #100	@ 0x64
 800df38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df3e:	2b01      	cmp	r3, #1
 800df40:	f77f ae37 	ble.w	800dbb2 <_dtoa_r+0x7b2>
 800df44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df46:	930a      	str	r3, [sp, #40]	@ 0x28
 800df48:	2001      	movs	r0, #1
 800df4a:	e655      	b.n	800dbf8 <_dtoa_r+0x7f8>
 800df4c:	9b00      	ldr	r3, [sp, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	f77f aed6 	ble.w	800dd00 <_dtoa_r+0x900>
 800df54:	4656      	mov	r6, sl
 800df56:	4621      	mov	r1, r4
 800df58:	4648      	mov	r0, r9
 800df5a:	f7ff f9c3 	bl	800d2e4 <quorem>
 800df5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800df62:	9b00      	ldr	r3, [sp, #0]
 800df64:	f806 8b01 	strb.w	r8, [r6], #1
 800df68:	eba6 020a 	sub.w	r2, r6, sl
 800df6c:	4293      	cmp	r3, r2
 800df6e:	ddb3      	ble.n	800ded8 <_dtoa_r+0xad8>
 800df70:	4649      	mov	r1, r9
 800df72:	2300      	movs	r3, #0
 800df74:	220a      	movs	r2, #10
 800df76:	4658      	mov	r0, fp
 800df78:	f000 f8b2 	bl	800e0e0 <__multadd>
 800df7c:	4681      	mov	r9, r0
 800df7e:	e7ea      	b.n	800df56 <_dtoa_r+0xb56>
 800df80:	08010b51 	.word	0x08010b51
 800df84:	08010ad5 	.word	0x08010ad5

0800df88 <_free_r>:
 800df88:	b538      	push	{r3, r4, r5, lr}
 800df8a:	4605      	mov	r5, r0
 800df8c:	2900      	cmp	r1, #0
 800df8e:	d041      	beq.n	800e014 <_free_r+0x8c>
 800df90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df94:	1f0c      	subs	r4, r1, #4
 800df96:	2b00      	cmp	r3, #0
 800df98:	bfb8      	it	lt
 800df9a:	18e4      	addlt	r4, r4, r3
 800df9c:	f7fe f840 	bl	800c020 <__malloc_lock>
 800dfa0:	4a1d      	ldr	r2, [pc, #116]	@ (800e018 <_free_r+0x90>)
 800dfa2:	6813      	ldr	r3, [r2, #0]
 800dfa4:	b933      	cbnz	r3, 800dfb4 <_free_r+0x2c>
 800dfa6:	6063      	str	r3, [r4, #4]
 800dfa8:	6014      	str	r4, [r2, #0]
 800dfaa:	4628      	mov	r0, r5
 800dfac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfb0:	f7fe b83c 	b.w	800c02c <__malloc_unlock>
 800dfb4:	42a3      	cmp	r3, r4
 800dfb6:	d908      	bls.n	800dfca <_free_r+0x42>
 800dfb8:	6820      	ldr	r0, [r4, #0]
 800dfba:	1821      	adds	r1, r4, r0
 800dfbc:	428b      	cmp	r3, r1
 800dfbe:	bf01      	itttt	eq
 800dfc0:	6819      	ldreq	r1, [r3, #0]
 800dfc2:	685b      	ldreq	r3, [r3, #4]
 800dfc4:	1809      	addeq	r1, r1, r0
 800dfc6:	6021      	streq	r1, [r4, #0]
 800dfc8:	e7ed      	b.n	800dfa6 <_free_r+0x1e>
 800dfca:	461a      	mov	r2, r3
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	b10b      	cbz	r3, 800dfd4 <_free_r+0x4c>
 800dfd0:	42a3      	cmp	r3, r4
 800dfd2:	d9fa      	bls.n	800dfca <_free_r+0x42>
 800dfd4:	6811      	ldr	r1, [r2, #0]
 800dfd6:	1850      	adds	r0, r2, r1
 800dfd8:	42a0      	cmp	r0, r4
 800dfda:	d10b      	bne.n	800dff4 <_free_r+0x6c>
 800dfdc:	6820      	ldr	r0, [r4, #0]
 800dfde:	4401      	add	r1, r0
 800dfe0:	1850      	adds	r0, r2, r1
 800dfe2:	6011      	str	r1, [r2, #0]
 800dfe4:	4283      	cmp	r3, r0
 800dfe6:	d1e0      	bne.n	800dfaa <_free_r+0x22>
 800dfe8:	6818      	ldr	r0, [r3, #0]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	4408      	add	r0, r1
 800dfee:	6053      	str	r3, [r2, #4]
 800dff0:	6010      	str	r0, [r2, #0]
 800dff2:	e7da      	b.n	800dfaa <_free_r+0x22>
 800dff4:	d902      	bls.n	800dffc <_free_r+0x74>
 800dff6:	230c      	movs	r3, #12
 800dff8:	602b      	str	r3, [r5, #0]
 800dffa:	e7d6      	b.n	800dfaa <_free_r+0x22>
 800dffc:	6820      	ldr	r0, [r4, #0]
 800dffe:	1821      	adds	r1, r4, r0
 800e000:	428b      	cmp	r3, r1
 800e002:	bf02      	ittt	eq
 800e004:	6819      	ldreq	r1, [r3, #0]
 800e006:	685b      	ldreq	r3, [r3, #4]
 800e008:	1809      	addeq	r1, r1, r0
 800e00a:	6063      	str	r3, [r4, #4]
 800e00c:	bf08      	it	eq
 800e00e:	6021      	streq	r1, [r4, #0]
 800e010:	6054      	str	r4, [r2, #4]
 800e012:	e7ca      	b.n	800dfaa <_free_r+0x22>
 800e014:	bd38      	pop	{r3, r4, r5, pc}
 800e016:	bf00      	nop
 800e018:	200005cc 	.word	0x200005cc

0800e01c <_Balloc>:
 800e01c:	b570      	push	{r4, r5, r6, lr}
 800e01e:	69c6      	ldr	r6, [r0, #28]
 800e020:	4604      	mov	r4, r0
 800e022:	460d      	mov	r5, r1
 800e024:	b976      	cbnz	r6, 800e044 <_Balloc+0x28>
 800e026:	2010      	movs	r0, #16
 800e028:	f7fd ff48 	bl	800bebc <malloc>
 800e02c:	4602      	mov	r2, r0
 800e02e:	61e0      	str	r0, [r4, #28]
 800e030:	b920      	cbnz	r0, 800e03c <_Balloc+0x20>
 800e032:	4b18      	ldr	r3, [pc, #96]	@ (800e094 <_Balloc+0x78>)
 800e034:	216b      	movs	r1, #107	@ 0x6b
 800e036:	4818      	ldr	r0, [pc, #96]	@ (800e098 <_Balloc+0x7c>)
 800e038:	f001 ff2e 	bl	800fe98 <__assert_func>
 800e03c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e040:	6006      	str	r6, [r0, #0]
 800e042:	60c6      	str	r6, [r0, #12]
 800e044:	69e6      	ldr	r6, [r4, #28]
 800e046:	68f3      	ldr	r3, [r6, #12]
 800e048:	b183      	cbz	r3, 800e06c <_Balloc+0x50>
 800e04a:	69e3      	ldr	r3, [r4, #28]
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e052:	b9b8      	cbnz	r0, 800e084 <_Balloc+0x68>
 800e054:	2101      	movs	r1, #1
 800e056:	4620      	mov	r0, r4
 800e058:	fa01 f605 	lsl.w	r6, r1, r5
 800e05c:	1d72      	adds	r2, r6, #5
 800e05e:	0092      	lsls	r2, r2, #2
 800e060:	f001 ff38 	bl	800fed4 <_calloc_r>
 800e064:	b160      	cbz	r0, 800e080 <_Balloc+0x64>
 800e066:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e06a:	e00e      	b.n	800e08a <_Balloc+0x6e>
 800e06c:	2221      	movs	r2, #33	@ 0x21
 800e06e:	2104      	movs	r1, #4
 800e070:	4620      	mov	r0, r4
 800e072:	f001 ff2f 	bl	800fed4 <_calloc_r>
 800e076:	69e3      	ldr	r3, [r4, #28]
 800e078:	60f0      	str	r0, [r6, #12]
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d1e4      	bne.n	800e04a <_Balloc+0x2e>
 800e080:	2000      	movs	r0, #0
 800e082:	bd70      	pop	{r4, r5, r6, pc}
 800e084:	6802      	ldr	r2, [r0, #0]
 800e086:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e08a:	2300      	movs	r3, #0
 800e08c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e090:	e7f7      	b.n	800e082 <_Balloc+0x66>
 800e092:	bf00      	nop
 800e094:	08010ae2 	.word	0x08010ae2
 800e098:	08010b62 	.word	0x08010b62

0800e09c <_Bfree>:
 800e09c:	b570      	push	{r4, r5, r6, lr}
 800e09e:	69c6      	ldr	r6, [r0, #28]
 800e0a0:	4605      	mov	r5, r0
 800e0a2:	460c      	mov	r4, r1
 800e0a4:	b976      	cbnz	r6, 800e0c4 <_Bfree+0x28>
 800e0a6:	2010      	movs	r0, #16
 800e0a8:	f7fd ff08 	bl	800bebc <malloc>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	61e8      	str	r0, [r5, #28]
 800e0b0:	b920      	cbnz	r0, 800e0bc <_Bfree+0x20>
 800e0b2:	4b09      	ldr	r3, [pc, #36]	@ (800e0d8 <_Bfree+0x3c>)
 800e0b4:	218f      	movs	r1, #143	@ 0x8f
 800e0b6:	4809      	ldr	r0, [pc, #36]	@ (800e0dc <_Bfree+0x40>)
 800e0b8:	f001 feee 	bl	800fe98 <__assert_func>
 800e0bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0c0:	6006      	str	r6, [r0, #0]
 800e0c2:	60c6      	str	r6, [r0, #12]
 800e0c4:	b13c      	cbz	r4, 800e0d6 <_Bfree+0x3a>
 800e0c6:	69eb      	ldr	r3, [r5, #28]
 800e0c8:	6862      	ldr	r2, [r4, #4]
 800e0ca:	68db      	ldr	r3, [r3, #12]
 800e0cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e0d0:	6021      	str	r1, [r4, #0]
 800e0d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e0d6:	bd70      	pop	{r4, r5, r6, pc}
 800e0d8:	08010ae2 	.word	0x08010ae2
 800e0dc:	08010b62 	.word	0x08010b62

0800e0e0 <__multadd>:
 800e0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e4:	f101 0c14 	add.w	ip, r1, #20
 800e0e8:	4607      	mov	r7, r0
 800e0ea:	460c      	mov	r4, r1
 800e0ec:	461e      	mov	r6, r3
 800e0ee:	690d      	ldr	r5, [r1, #16]
 800e0f0:	2000      	movs	r0, #0
 800e0f2:	f8dc 3000 	ldr.w	r3, [ip]
 800e0f6:	3001      	adds	r0, #1
 800e0f8:	b299      	uxth	r1, r3
 800e0fa:	4285      	cmp	r5, r0
 800e0fc:	fb02 6101 	mla	r1, r2, r1, r6
 800e100:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e104:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800e108:	b289      	uxth	r1, r1
 800e10a:	fb02 3306 	mla	r3, r2, r6, r3
 800e10e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e112:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e116:	f84c 1b04 	str.w	r1, [ip], #4
 800e11a:	dcea      	bgt.n	800e0f2 <__multadd+0x12>
 800e11c:	b30e      	cbz	r6, 800e162 <__multadd+0x82>
 800e11e:	68a3      	ldr	r3, [r4, #8]
 800e120:	42ab      	cmp	r3, r5
 800e122:	dc19      	bgt.n	800e158 <__multadd+0x78>
 800e124:	6861      	ldr	r1, [r4, #4]
 800e126:	4638      	mov	r0, r7
 800e128:	3101      	adds	r1, #1
 800e12a:	f7ff ff77 	bl	800e01c <_Balloc>
 800e12e:	4680      	mov	r8, r0
 800e130:	b928      	cbnz	r0, 800e13e <__multadd+0x5e>
 800e132:	4602      	mov	r2, r0
 800e134:	4b0c      	ldr	r3, [pc, #48]	@ (800e168 <__multadd+0x88>)
 800e136:	21ba      	movs	r1, #186	@ 0xba
 800e138:	480c      	ldr	r0, [pc, #48]	@ (800e16c <__multadd+0x8c>)
 800e13a:	f001 fead 	bl	800fe98 <__assert_func>
 800e13e:	6922      	ldr	r2, [r4, #16]
 800e140:	f104 010c 	add.w	r1, r4, #12
 800e144:	300c      	adds	r0, #12
 800e146:	3202      	adds	r2, #2
 800e148:	0092      	lsls	r2, r2, #2
 800e14a:	f7ff f8b8 	bl	800d2be <memcpy>
 800e14e:	4621      	mov	r1, r4
 800e150:	4644      	mov	r4, r8
 800e152:	4638      	mov	r0, r7
 800e154:	f7ff ffa2 	bl	800e09c <_Bfree>
 800e158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e15c:	3501      	adds	r5, #1
 800e15e:	615e      	str	r6, [r3, #20]
 800e160:	6125      	str	r5, [r4, #16]
 800e162:	4620      	mov	r0, r4
 800e164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e168:	08010b51 	.word	0x08010b51
 800e16c:	08010b62 	.word	0x08010b62

0800e170 <__s2b>:
 800e170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e174:	4615      	mov	r5, r2
 800e176:	461f      	mov	r7, r3
 800e178:	2209      	movs	r2, #9
 800e17a:	3308      	adds	r3, #8
 800e17c:	460c      	mov	r4, r1
 800e17e:	4606      	mov	r6, r0
 800e180:	2100      	movs	r1, #0
 800e182:	fb93 f3f2 	sdiv	r3, r3, r2
 800e186:	2201      	movs	r2, #1
 800e188:	429a      	cmp	r2, r3
 800e18a:	db09      	blt.n	800e1a0 <__s2b+0x30>
 800e18c:	4630      	mov	r0, r6
 800e18e:	f7ff ff45 	bl	800e01c <_Balloc>
 800e192:	b940      	cbnz	r0, 800e1a6 <__s2b+0x36>
 800e194:	4602      	mov	r2, r0
 800e196:	4b19      	ldr	r3, [pc, #100]	@ (800e1fc <__s2b+0x8c>)
 800e198:	21d3      	movs	r1, #211	@ 0xd3
 800e19a:	4819      	ldr	r0, [pc, #100]	@ (800e200 <__s2b+0x90>)
 800e19c:	f001 fe7c 	bl	800fe98 <__assert_func>
 800e1a0:	0052      	lsls	r2, r2, #1
 800e1a2:	3101      	adds	r1, #1
 800e1a4:	e7f0      	b.n	800e188 <__s2b+0x18>
 800e1a6:	9b08      	ldr	r3, [sp, #32]
 800e1a8:	2d09      	cmp	r5, #9
 800e1aa:	6143      	str	r3, [r0, #20]
 800e1ac:	f04f 0301 	mov.w	r3, #1
 800e1b0:	6103      	str	r3, [r0, #16]
 800e1b2:	dd16      	ble.n	800e1e2 <__s2b+0x72>
 800e1b4:	f104 0909 	add.w	r9, r4, #9
 800e1b8:	442c      	add	r4, r5
 800e1ba:	46c8      	mov	r8, r9
 800e1bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e1c0:	4601      	mov	r1, r0
 800e1c2:	220a      	movs	r2, #10
 800e1c4:	4630      	mov	r0, r6
 800e1c6:	3b30      	subs	r3, #48	@ 0x30
 800e1c8:	f7ff ff8a 	bl	800e0e0 <__multadd>
 800e1cc:	45a0      	cmp	r8, r4
 800e1ce:	d1f5      	bne.n	800e1bc <__s2b+0x4c>
 800e1d0:	f1a5 0408 	sub.w	r4, r5, #8
 800e1d4:	444c      	add	r4, r9
 800e1d6:	1b2d      	subs	r5, r5, r4
 800e1d8:	1963      	adds	r3, r4, r5
 800e1da:	42bb      	cmp	r3, r7
 800e1dc:	db04      	blt.n	800e1e8 <__s2b+0x78>
 800e1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1e2:	340a      	adds	r4, #10
 800e1e4:	2509      	movs	r5, #9
 800e1e6:	e7f6      	b.n	800e1d6 <__s2b+0x66>
 800e1e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e1ec:	4601      	mov	r1, r0
 800e1ee:	220a      	movs	r2, #10
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	3b30      	subs	r3, #48	@ 0x30
 800e1f4:	f7ff ff74 	bl	800e0e0 <__multadd>
 800e1f8:	e7ee      	b.n	800e1d8 <__s2b+0x68>
 800e1fa:	bf00      	nop
 800e1fc:	08010b51 	.word	0x08010b51
 800e200:	08010b62 	.word	0x08010b62

0800e204 <__hi0bits>:
 800e204:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e208:	4603      	mov	r3, r0
 800e20a:	bf36      	itet	cc
 800e20c:	0403      	lslcc	r3, r0, #16
 800e20e:	2000      	movcs	r0, #0
 800e210:	2010      	movcc	r0, #16
 800e212:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e216:	bf3c      	itt	cc
 800e218:	021b      	lslcc	r3, r3, #8
 800e21a:	3008      	addcc	r0, #8
 800e21c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e220:	bf3c      	itt	cc
 800e222:	011b      	lslcc	r3, r3, #4
 800e224:	3004      	addcc	r0, #4
 800e226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e22a:	bf3c      	itt	cc
 800e22c:	009b      	lslcc	r3, r3, #2
 800e22e:	3002      	addcc	r0, #2
 800e230:	2b00      	cmp	r3, #0
 800e232:	db05      	blt.n	800e240 <__hi0bits+0x3c>
 800e234:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e238:	f100 0001 	add.w	r0, r0, #1
 800e23c:	bf08      	it	eq
 800e23e:	2020      	moveq	r0, #32
 800e240:	4770      	bx	lr

0800e242 <__lo0bits>:
 800e242:	6803      	ldr	r3, [r0, #0]
 800e244:	4602      	mov	r2, r0
 800e246:	f013 0007 	ands.w	r0, r3, #7
 800e24a:	d00b      	beq.n	800e264 <__lo0bits+0x22>
 800e24c:	07d9      	lsls	r1, r3, #31
 800e24e:	d421      	bmi.n	800e294 <__lo0bits+0x52>
 800e250:	0798      	lsls	r0, r3, #30
 800e252:	bf47      	ittee	mi
 800e254:	085b      	lsrmi	r3, r3, #1
 800e256:	2001      	movmi	r0, #1
 800e258:	089b      	lsrpl	r3, r3, #2
 800e25a:	2002      	movpl	r0, #2
 800e25c:	bf4c      	ite	mi
 800e25e:	6013      	strmi	r3, [r2, #0]
 800e260:	6013      	strpl	r3, [r2, #0]
 800e262:	4770      	bx	lr
 800e264:	b299      	uxth	r1, r3
 800e266:	b909      	cbnz	r1, 800e26c <__lo0bits+0x2a>
 800e268:	0c1b      	lsrs	r3, r3, #16
 800e26a:	2010      	movs	r0, #16
 800e26c:	b2d9      	uxtb	r1, r3
 800e26e:	b909      	cbnz	r1, 800e274 <__lo0bits+0x32>
 800e270:	3008      	adds	r0, #8
 800e272:	0a1b      	lsrs	r3, r3, #8
 800e274:	0719      	lsls	r1, r3, #28
 800e276:	bf04      	itt	eq
 800e278:	091b      	lsreq	r3, r3, #4
 800e27a:	3004      	addeq	r0, #4
 800e27c:	0799      	lsls	r1, r3, #30
 800e27e:	bf04      	itt	eq
 800e280:	089b      	lsreq	r3, r3, #2
 800e282:	3002      	addeq	r0, #2
 800e284:	07d9      	lsls	r1, r3, #31
 800e286:	d403      	bmi.n	800e290 <__lo0bits+0x4e>
 800e288:	085b      	lsrs	r3, r3, #1
 800e28a:	f100 0001 	add.w	r0, r0, #1
 800e28e:	d003      	beq.n	800e298 <__lo0bits+0x56>
 800e290:	6013      	str	r3, [r2, #0]
 800e292:	4770      	bx	lr
 800e294:	2000      	movs	r0, #0
 800e296:	4770      	bx	lr
 800e298:	2020      	movs	r0, #32
 800e29a:	4770      	bx	lr

0800e29c <__i2b>:
 800e29c:	b510      	push	{r4, lr}
 800e29e:	460c      	mov	r4, r1
 800e2a0:	2101      	movs	r1, #1
 800e2a2:	f7ff febb 	bl	800e01c <_Balloc>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	b928      	cbnz	r0, 800e2b6 <__i2b+0x1a>
 800e2aa:	4b05      	ldr	r3, [pc, #20]	@ (800e2c0 <__i2b+0x24>)
 800e2ac:	f240 1145 	movw	r1, #325	@ 0x145
 800e2b0:	4804      	ldr	r0, [pc, #16]	@ (800e2c4 <__i2b+0x28>)
 800e2b2:	f001 fdf1 	bl	800fe98 <__assert_func>
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	6144      	str	r4, [r0, #20]
 800e2ba:	6103      	str	r3, [r0, #16]
 800e2bc:	bd10      	pop	{r4, pc}
 800e2be:	bf00      	nop
 800e2c0:	08010b51 	.word	0x08010b51
 800e2c4:	08010b62 	.word	0x08010b62

0800e2c8 <__multiply>:
 800e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2cc:	4614      	mov	r4, r2
 800e2ce:	690a      	ldr	r2, [r1, #16]
 800e2d0:	460f      	mov	r7, r1
 800e2d2:	b085      	sub	sp, #20
 800e2d4:	6923      	ldr	r3, [r4, #16]
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	bfa2      	ittt	ge
 800e2da:	4623      	movge	r3, r4
 800e2dc:	460c      	movge	r4, r1
 800e2de:	461f      	movge	r7, r3
 800e2e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e2e4:	68a3      	ldr	r3, [r4, #8]
 800e2e6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e2ea:	6861      	ldr	r1, [r4, #4]
 800e2ec:	eb0a 0609 	add.w	r6, sl, r9
 800e2f0:	42b3      	cmp	r3, r6
 800e2f2:	bfb8      	it	lt
 800e2f4:	3101      	addlt	r1, #1
 800e2f6:	f7ff fe91 	bl	800e01c <_Balloc>
 800e2fa:	b930      	cbnz	r0, 800e30a <__multiply+0x42>
 800e2fc:	4602      	mov	r2, r0
 800e2fe:	4b45      	ldr	r3, [pc, #276]	@ (800e414 <__multiply+0x14c>)
 800e300:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e304:	4844      	ldr	r0, [pc, #272]	@ (800e418 <__multiply+0x150>)
 800e306:	f001 fdc7 	bl	800fe98 <__assert_func>
 800e30a:	f100 0514 	add.w	r5, r0, #20
 800e30e:	2200      	movs	r2, #0
 800e310:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e314:	462b      	mov	r3, r5
 800e316:	4543      	cmp	r3, r8
 800e318:	d321      	bcc.n	800e35e <__multiply+0x96>
 800e31a:	f107 0114 	add.w	r1, r7, #20
 800e31e:	f104 0214 	add.w	r2, r4, #20
 800e322:	f104 0715 	add.w	r7, r4, #21
 800e326:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e32a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e32e:	9302      	str	r3, [sp, #8]
 800e330:	1b13      	subs	r3, r2, r4
 800e332:	3b15      	subs	r3, #21
 800e334:	f023 0303 	bic.w	r3, r3, #3
 800e338:	3304      	adds	r3, #4
 800e33a:	42ba      	cmp	r2, r7
 800e33c:	bf38      	it	cc
 800e33e:	2304      	movcc	r3, #4
 800e340:	9301      	str	r3, [sp, #4]
 800e342:	9b02      	ldr	r3, [sp, #8]
 800e344:	9103      	str	r1, [sp, #12]
 800e346:	428b      	cmp	r3, r1
 800e348:	d80c      	bhi.n	800e364 <__multiply+0x9c>
 800e34a:	2e00      	cmp	r6, #0
 800e34c:	dd03      	ble.n	800e356 <__multiply+0x8e>
 800e34e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e352:	2b00      	cmp	r3, #0
 800e354:	d05b      	beq.n	800e40e <__multiply+0x146>
 800e356:	6106      	str	r6, [r0, #16]
 800e358:	b005      	add	sp, #20
 800e35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e35e:	f843 2b04 	str.w	r2, [r3], #4
 800e362:	e7d8      	b.n	800e316 <__multiply+0x4e>
 800e364:	f8b1 a000 	ldrh.w	sl, [r1]
 800e368:	f1ba 0f00 	cmp.w	sl, #0
 800e36c:	d024      	beq.n	800e3b8 <__multiply+0xf0>
 800e36e:	f104 0e14 	add.w	lr, r4, #20
 800e372:	46a9      	mov	r9, r5
 800e374:	f04f 0c00 	mov.w	ip, #0
 800e378:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e37c:	f8d9 3000 	ldr.w	r3, [r9]
 800e380:	fa1f fb87 	uxth.w	fp, r7
 800e384:	4572      	cmp	r2, lr
 800e386:	b29b      	uxth	r3, r3
 800e388:	fb0a 330b 	mla	r3, sl, fp, r3
 800e38c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e390:	f8d9 7000 	ldr.w	r7, [r9]
 800e394:	4463      	add	r3, ip
 800e396:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e39a:	fb0a c70b 	mla	r7, sl, fp, ip
 800e39e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e3a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e3ac:	f849 3b04 	str.w	r3, [r9], #4
 800e3b0:	d8e2      	bhi.n	800e378 <__multiply+0xb0>
 800e3b2:	9b01      	ldr	r3, [sp, #4]
 800e3b4:	f845 c003 	str.w	ip, [r5, r3]
 800e3b8:	9b03      	ldr	r3, [sp, #12]
 800e3ba:	3104      	adds	r1, #4
 800e3bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e3c0:	f1b9 0f00 	cmp.w	r9, #0
 800e3c4:	d021      	beq.n	800e40a <__multiply+0x142>
 800e3c6:	682b      	ldr	r3, [r5, #0]
 800e3c8:	f104 0c14 	add.w	ip, r4, #20
 800e3cc:	46ae      	mov	lr, r5
 800e3ce:	f04f 0a00 	mov.w	sl, #0
 800e3d2:	f8bc b000 	ldrh.w	fp, [ip]
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e3dc:	fb09 770b 	mla	r7, r9, fp, r7
 800e3e0:	4457      	add	r7, sl
 800e3e2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e3e6:	f84e 3b04 	str.w	r3, [lr], #4
 800e3ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e3ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3f2:	f8be 3000 	ldrh.w	r3, [lr]
 800e3f6:	4562      	cmp	r2, ip
 800e3f8:	fb09 330a 	mla	r3, r9, sl, r3
 800e3fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e400:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e404:	d8e5      	bhi.n	800e3d2 <__multiply+0x10a>
 800e406:	9f01      	ldr	r7, [sp, #4]
 800e408:	51eb      	str	r3, [r5, r7]
 800e40a:	3504      	adds	r5, #4
 800e40c:	e799      	b.n	800e342 <__multiply+0x7a>
 800e40e:	3e01      	subs	r6, #1
 800e410:	e79b      	b.n	800e34a <__multiply+0x82>
 800e412:	bf00      	nop
 800e414:	08010b51 	.word	0x08010b51
 800e418:	08010b62 	.word	0x08010b62

0800e41c <__pow5mult>:
 800e41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e420:	4615      	mov	r5, r2
 800e422:	f012 0203 	ands.w	r2, r2, #3
 800e426:	4607      	mov	r7, r0
 800e428:	460e      	mov	r6, r1
 800e42a:	d007      	beq.n	800e43c <__pow5mult+0x20>
 800e42c:	3a01      	subs	r2, #1
 800e42e:	4c25      	ldr	r4, [pc, #148]	@ (800e4c4 <__pow5mult+0xa8>)
 800e430:	2300      	movs	r3, #0
 800e432:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e436:	f7ff fe53 	bl	800e0e0 <__multadd>
 800e43a:	4606      	mov	r6, r0
 800e43c:	10ad      	asrs	r5, r5, #2
 800e43e:	d03d      	beq.n	800e4bc <__pow5mult+0xa0>
 800e440:	69fc      	ldr	r4, [r7, #28]
 800e442:	b97c      	cbnz	r4, 800e464 <__pow5mult+0x48>
 800e444:	2010      	movs	r0, #16
 800e446:	f7fd fd39 	bl	800bebc <malloc>
 800e44a:	4602      	mov	r2, r0
 800e44c:	61f8      	str	r0, [r7, #28]
 800e44e:	b928      	cbnz	r0, 800e45c <__pow5mult+0x40>
 800e450:	4b1d      	ldr	r3, [pc, #116]	@ (800e4c8 <__pow5mult+0xac>)
 800e452:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e456:	481d      	ldr	r0, [pc, #116]	@ (800e4cc <__pow5mult+0xb0>)
 800e458:	f001 fd1e 	bl	800fe98 <__assert_func>
 800e45c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e460:	6004      	str	r4, [r0, #0]
 800e462:	60c4      	str	r4, [r0, #12]
 800e464:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e468:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e46c:	b94c      	cbnz	r4, 800e482 <__pow5mult+0x66>
 800e46e:	f240 2171 	movw	r1, #625	@ 0x271
 800e472:	4638      	mov	r0, r7
 800e474:	f7ff ff12 	bl	800e29c <__i2b>
 800e478:	2300      	movs	r3, #0
 800e47a:	4604      	mov	r4, r0
 800e47c:	f8c8 0008 	str.w	r0, [r8, #8]
 800e480:	6003      	str	r3, [r0, #0]
 800e482:	f04f 0900 	mov.w	r9, #0
 800e486:	07eb      	lsls	r3, r5, #31
 800e488:	d50a      	bpl.n	800e4a0 <__pow5mult+0x84>
 800e48a:	4631      	mov	r1, r6
 800e48c:	4622      	mov	r2, r4
 800e48e:	4638      	mov	r0, r7
 800e490:	f7ff ff1a 	bl	800e2c8 <__multiply>
 800e494:	4680      	mov	r8, r0
 800e496:	4631      	mov	r1, r6
 800e498:	4638      	mov	r0, r7
 800e49a:	4646      	mov	r6, r8
 800e49c:	f7ff fdfe 	bl	800e09c <_Bfree>
 800e4a0:	106d      	asrs	r5, r5, #1
 800e4a2:	d00b      	beq.n	800e4bc <__pow5mult+0xa0>
 800e4a4:	6820      	ldr	r0, [r4, #0]
 800e4a6:	b938      	cbnz	r0, 800e4b8 <__pow5mult+0x9c>
 800e4a8:	4622      	mov	r2, r4
 800e4aa:	4621      	mov	r1, r4
 800e4ac:	4638      	mov	r0, r7
 800e4ae:	f7ff ff0b 	bl	800e2c8 <__multiply>
 800e4b2:	6020      	str	r0, [r4, #0]
 800e4b4:	f8c0 9000 	str.w	r9, [r0]
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	e7e4      	b.n	800e486 <__pow5mult+0x6a>
 800e4bc:	4630      	mov	r0, r6
 800e4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4c2:	bf00      	nop
 800e4c4:	08010bbc 	.word	0x08010bbc
 800e4c8:	08010ae2 	.word	0x08010ae2
 800e4cc:	08010b62 	.word	0x08010b62

0800e4d0 <__lshift>:
 800e4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d4:	460c      	mov	r4, r1
 800e4d6:	4607      	mov	r7, r0
 800e4d8:	4691      	mov	r9, r2
 800e4da:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4de:	6923      	ldr	r3, [r4, #16]
 800e4e0:	6849      	ldr	r1, [r1, #4]
 800e4e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4e6:	68a3      	ldr	r3, [r4, #8]
 800e4e8:	f108 0601 	add.w	r6, r8, #1
 800e4ec:	42b3      	cmp	r3, r6
 800e4ee:	db0b      	blt.n	800e508 <__lshift+0x38>
 800e4f0:	4638      	mov	r0, r7
 800e4f2:	f7ff fd93 	bl	800e01c <_Balloc>
 800e4f6:	4605      	mov	r5, r0
 800e4f8:	b948      	cbnz	r0, 800e50e <__lshift+0x3e>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	4b28      	ldr	r3, [pc, #160]	@ (800e5a0 <__lshift+0xd0>)
 800e4fe:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e502:	4828      	ldr	r0, [pc, #160]	@ (800e5a4 <__lshift+0xd4>)
 800e504:	f001 fcc8 	bl	800fe98 <__assert_func>
 800e508:	3101      	adds	r1, #1
 800e50a:	005b      	lsls	r3, r3, #1
 800e50c:	e7ee      	b.n	800e4ec <__lshift+0x1c>
 800e50e:	2300      	movs	r3, #0
 800e510:	f100 0114 	add.w	r1, r0, #20
 800e514:	f100 0210 	add.w	r2, r0, #16
 800e518:	4618      	mov	r0, r3
 800e51a:	4553      	cmp	r3, sl
 800e51c:	db33      	blt.n	800e586 <__lshift+0xb6>
 800e51e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e522:	f104 0314 	add.w	r3, r4, #20
 800e526:	6920      	ldr	r0, [r4, #16]
 800e528:	f019 091f 	ands.w	r9, r9, #31
 800e52c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e530:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e534:	d02b      	beq.n	800e58e <__lshift+0xbe>
 800e536:	f1c9 0e20 	rsb	lr, r9, #32
 800e53a:	468a      	mov	sl, r1
 800e53c:	2200      	movs	r2, #0
 800e53e:	6818      	ldr	r0, [r3, #0]
 800e540:	fa00 f009 	lsl.w	r0, r0, r9
 800e544:	4310      	orrs	r0, r2
 800e546:	f84a 0b04 	str.w	r0, [sl], #4
 800e54a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e54e:	459c      	cmp	ip, r3
 800e550:	fa22 f20e 	lsr.w	r2, r2, lr
 800e554:	d8f3      	bhi.n	800e53e <__lshift+0x6e>
 800e556:	ebac 0304 	sub.w	r3, ip, r4
 800e55a:	f104 0015 	add.w	r0, r4, #21
 800e55e:	3b15      	subs	r3, #21
 800e560:	f023 0303 	bic.w	r3, r3, #3
 800e564:	3304      	adds	r3, #4
 800e566:	4584      	cmp	ip, r0
 800e568:	bf38      	it	cc
 800e56a:	2304      	movcc	r3, #4
 800e56c:	50ca      	str	r2, [r1, r3]
 800e56e:	b10a      	cbz	r2, 800e574 <__lshift+0xa4>
 800e570:	f108 0602 	add.w	r6, r8, #2
 800e574:	3e01      	subs	r6, #1
 800e576:	4638      	mov	r0, r7
 800e578:	4621      	mov	r1, r4
 800e57a:	612e      	str	r6, [r5, #16]
 800e57c:	f7ff fd8e 	bl	800e09c <_Bfree>
 800e580:	4628      	mov	r0, r5
 800e582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e586:	3301      	adds	r3, #1
 800e588:	f842 0f04 	str.w	r0, [r2, #4]!
 800e58c:	e7c5      	b.n	800e51a <__lshift+0x4a>
 800e58e:	3904      	subs	r1, #4
 800e590:	f853 2b04 	ldr.w	r2, [r3], #4
 800e594:	459c      	cmp	ip, r3
 800e596:	f841 2f04 	str.w	r2, [r1, #4]!
 800e59a:	d8f9      	bhi.n	800e590 <__lshift+0xc0>
 800e59c:	e7ea      	b.n	800e574 <__lshift+0xa4>
 800e59e:	bf00      	nop
 800e5a0:	08010b51 	.word	0x08010b51
 800e5a4:	08010b62 	.word	0x08010b62

0800e5a8 <__mcmp>:
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	690a      	ldr	r2, [r1, #16]
 800e5ac:	6900      	ldr	r0, [r0, #16]
 800e5ae:	1a80      	subs	r0, r0, r2
 800e5b0:	b530      	push	{r4, r5, lr}
 800e5b2:	d10e      	bne.n	800e5d2 <__mcmp+0x2a>
 800e5b4:	3314      	adds	r3, #20
 800e5b6:	3114      	adds	r1, #20
 800e5b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e5bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e5c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e5c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e5c8:	4295      	cmp	r5, r2
 800e5ca:	d003      	beq.n	800e5d4 <__mcmp+0x2c>
 800e5cc:	d205      	bcs.n	800e5da <__mcmp+0x32>
 800e5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d2:	bd30      	pop	{r4, r5, pc}
 800e5d4:	42a3      	cmp	r3, r4
 800e5d6:	d3f3      	bcc.n	800e5c0 <__mcmp+0x18>
 800e5d8:	e7fb      	b.n	800e5d2 <__mcmp+0x2a>
 800e5da:	2001      	movs	r0, #1
 800e5dc:	e7f9      	b.n	800e5d2 <__mcmp+0x2a>
	...

0800e5e0 <__mdiff>:
 800e5e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e4:	4689      	mov	r9, r1
 800e5e6:	4606      	mov	r6, r0
 800e5e8:	4611      	mov	r1, r2
 800e5ea:	4614      	mov	r4, r2
 800e5ec:	4648      	mov	r0, r9
 800e5ee:	f7ff ffdb 	bl	800e5a8 <__mcmp>
 800e5f2:	1e05      	subs	r5, r0, #0
 800e5f4:	d112      	bne.n	800e61c <__mdiff+0x3c>
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	f7ff fd0f 	bl	800e01c <_Balloc>
 800e5fe:	4602      	mov	r2, r0
 800e600:	b928      	cbnz	r0, 800e60e <__mdiff+0x2e>
 800e602:	4b41      	ldr	r3, [pc, #260]	@ (800e708 <__mdiff+0x128>)
 800e604:	f240 2137 	movw	r1, #567	@ 0x237
 800e608:	4840      	ldr	r0, [pc, #256]	@ (800e70c <__mdiff+0x12c>)
 800e60a:	f001 fc45 	bl	800fe98 <__assert_func>
 800e60e:	2301      	movs	r3, #1
 800e610:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e614:	4610      	mov	r0, r2
 800e616:	b003      	add	sp, #12
 800e618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e61c:	bfbc      	itt	lt
 800e61e:	464b      	movlt	r3, r9
 800e620:	46a1      	movlt	r9, r4
 800e622:	4630      	mov	r0, r6
 800e624:	bfb8      	it	lt
 800e626:	2501      	movlt	r5, #1
 800e628:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e62c:	bfb4      	ite	lt
 800e62e:	461c      	movlt	r4, r3
 800e630:	2500      	movge	r5, #0
 800e632:	f7ff fcf3 	bl	800e01c <_Balloc>
 800e636:	4602      	mov	r2, r0
 800e638:	b918      	cbnz	r0, 800e642 <__mdiff+0x62>
 800e63a:	4b33      	ldr	r3, [pc, #204]	@ (800e708 <__mdiff+0x128>)
 800e63c:	f240 2145 	movw	r1, #581	@ 0x245
 800e640:	e7e2      	b.n	800e608 <__mdiff+0x28>
 800e642:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e646:	f104 0e14 	add.w	lr, r4, #20
 800e64a:	6926      	ldr	r6, [r4, #16]
 800e64c:	f100 0b14 	add.w	fp, r0, #20
 800e650:	60c5      	str	r5, [r0, #12]
 800e652:	f109 0514 	add.w	r5, r9, #20
 800e656:	f109 0310 	add.w	r3, r9, #16
 800e65a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e65e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e662:	46d9      	mov	r9, fp
 800e664:	f04f 0c00 	mov.w	ip, #0
 800e668:	9301      	str	r3, [sp, #4]
 800e66a:	9b01      	ldr	r3, [sp, #4]
 800e66c:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e670:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e674:	4576      	cmp	r6, lr
 800e676:	9301      	str	r3, [sp, #4]
 800e678:	fa1f f38a 	uxth.w	r3, sl
 800e67c:	4619      	mov	r1, r3
 800e67e:	b283      	uxth	r3, r0
 800e680:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800e684:	eba1 0303 	sub.w	r3, r1, r3
 800e688:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e68c:	4463      	add	r3, ip
 800e68e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e692:	b29b      	uxth	r3, r3
 800e694:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e698:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e69c:	f849 3b04 	str.w	r3, [r9], #4
 800e6a0:	d8e3      	bhi.n	800e66a <__mdiff+0x8a>
 800e6a2:	1b33      	subs	r3, r6, r4
 800e6a4:	3415      	adds	r4, #21
 800e6a6:	3b15      	subs	r3, #21
 800e6a8:	f023 0303 	bic.w	r3, r3, #3
 800e6ac:	3304      	adds	r3, #4
 800e6ae:	42a6      	cmp	r6, r4
 800e6b0:	bf38      	it	cc
 800e6b2:	2304      	movcc	r3, #4
 800e6b4:	441d      	add	r5, r3
 800e6b6:	445b      	add	r3, fp
 800e6b8:	462c      	mov	r4, r5
 800e6ba:	461e      	mov	r6, r3
 800e6bc:	4544      	cmp	r4, r8
 800e6be:	d30e      	bcc.n	800e6de <__mdiff+0xfe>
 800e6c0:	f108 0103 	add.w	r1, r8, #3
 800e6c4:	1b49      	subs	r1, r1, r5
 800e6c6:	3d03      	subs	r5, #3
 800e6c8:	f021 0103 	bic.w	r1, r1, #3
 800e6cc:	45a8      	cmp	r8, r5
 800e6ce:	bf38      	it	cc
 800e6d0:	2100      	movcc	r1, #0
 800e6d2:	440b      	add	r3, r1
 800e6d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e6d8:	b199      	cbz	r1, 800e702 <__mdiff+0x122>
 800e6da:	6117      	str	r7, [r2, #16]
 800e6dc:	e79a      	b.n	800e614 <__mdiff+0x34>
 800e6de:	f854 1b04 	ldr.w	r1, [r4], #4
 800e6e2:	46e6      	mov	lr, ip
 800e6e4:	fa1f fc81 	uxth.w	ip, r1
 800e6e8:	0c08      	lsrs	r0, r1, #16
 800e6ea:	4471      	add	r1, lr
 800e6ec:	44f4      	add	ip, lr
 800e6ee:	b289      	uxth	r1, r1
 800e6f0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e6f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e6f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e6fc:	f846 1b04 	str.w	r1, [r6], #4
 800e700:	e7dc      	b.n	800e6bc <__mdiff+0xdc>
 800e702:	3f01      	subs	r7, #1
 800e704:	e7e6      	b.n	800e6d4 <__mdiff+0xf4>
 800e706:	bf00      	nop
 800e708:	08010b51 	.word	0x08010b51
 800e70c:	08010b62 	.word	0x08010b62

0800e710 <__ulp>:
 800e710:	b082      	sub	sp, #8
 800e712:	4b11      	ldr	r3, [pc, #68]	@ (800e758 <__ulp+0x48>)
 800e714:	ed8d 0b00 	vstr	d0, [sp]
 800e718:	9a01      	ldr	r2, [sp, #4]
 800e71a:	4013      	ands	r3, r2
 800e71c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e720:	2b00      	cmp	r3, #0
 800e722:	dc08      	bgt.n	800e736 <__ulp+0x26>
 800e724:	425b      	negs	r3, r3
 800e726:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e72a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e72e:	da04      	bge.n	800e73a <__ulp+0x2a>
 800e730:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e734:	4113      	asrs	r3, r2
 800e736:	2200      	movs	r2, #0
 800e738:	e008      	b.n	800e74c <__ulp+0x3c>
 800e73a:	f1a2 0314 	sub.w	r3, r2, #20
 800e73e:	2b1e      	cmp	r3, #30
 800e740:	bfd6      	itet	le
 800e742:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e746:	2201      	movgt	r2, #1
 800e748:	40da      	lsrle	r2, r3
 800e74a:	2300      	movs	r3, #0
 800e74c:	4619      	mov	r1, r3
 800e74e:	4610      	mov	r0, r2
 800e750:	ec41 0b10 	vmov	d0, r0, r1
 800e754:	b002      	add	sp, #8
 800e756:	4770      	bx	lr
 800e758:	7ff00000 	.word	0x7ff00000

0800e75c <__b2d>:
 800e75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e760:	6906      	ldr	r6, [r0, #16]
 800e762:	f100 0814 	add.w	r8, r0, #20
 800e766:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e76a:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e76e:	1f37      	subs	r7, r6, #4
 800e770:	4610      	mov	r0, r2
 800e772:	f7ff fd47 	bl	800e204 <__hi0bits>
 800e776:	f1c0 0320 	rsb	r3, r0, #32
 800e77a:	280a      	cmp	r0, #10
 800e77c:	600b      	str	r3, [r1, #0]
 800e77e:	491d      	ldr	r1, [pc, #116]	@ (800e7f4 <__b2d+0x98>)
 800e780:	dc16      	bgt.n	800e7b0 <__b2d+0x54>
 800e782:	f1c0 0c0b 	rsb	ip, r0, #11
 800e786:	45b8      	cmp	r8, r7
 800e788:	f100 0015 	add.w	r0, r0, #21
 800e78c:	fa22 f30c 	lsr.w	r3, r2, ip
 800e790:	fa02 f000 	lsl.w	r0, r2, r0
 800e794:	ea43 0501 	orr.w	r5, r3, r1
 800e798:	bf34      	ite	cc
 800e79a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e79e:	2300      	movcs	r3, #0
 800e7a0:	fa23 f30c 	lsr.w	r3, r3, ip
 800e7a4:	4303      	orrs	r3, r0
 800e7a6:	461c      	mov	r4, r3
 800e7a8:	ec45 4b10 	vmov	d0, r4, r5
 800e7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7b0:	45b8      	cmp	r8, r7
 800e7b2:	bf3a      	itte	cc
 800e7b4:	f1a6 0708 	subcc.w	r7, r6, #8
 800e7b8:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e7bc:	2300      	movcs	r3, #0
 800e7be:	380b      	subs	r0, #11
 800e7c0:	d014      	beq.n	800e7ec <__b2d+0x90>
 800e7c2:	f1c0 0120 	rsb	r1, r0, #32
 800e7c6:	4082      	lsls	r2, r0
 800e7c8:	4547      	cmp	r7, r8
 800e7ca:	fa23 f401 	lsr.w	r4, r3, r1
 800e7ce:	fa03 f300 	lsl.w	r3, r3, r0
 800e7d2:	ea42 0204 	orr.w	r2, r2, r4
 800e7d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e7da:	bf8c      	ite	hi
 800e7dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e7e0:	2200      	movls	r2, #0
 800e7e2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e7e6:	40ca      	lsrs	r2, r1
 800e7e8:	4313      	orrs	r3, r2
 800e7ea:	e7dc      	b.n	800e7a6 <__b2d+0x4a>
 800e7ec:	ea42 0501 	orr.w	r5, r2, r1
 800e7f0:	e7d9      	b.n	800e7a6 <__b2d+0x4a>
 800e7f2:	bf00      	nop
 800e7f4:	3ff00000 	.word	0x3ff00000

0800e7f8 <__d2b>:
 800e7f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e7fc:	460f      	mov	r7, r1
 800e7fe:	2101      	movs	r1, #1
 800e800:	4616      	mov	r6, r2
 800e802:	ec59 8b10 	vmov	r8, r9, d0
 800e806:	f7ff fc09 	bl	800e01c <_Balloc>
 800e80a:	4604      	mov	r4, r0
 800e80c:	b930      	cbnz	r0, 800e81c <__d2b+0x24>
 800e80e:	4602      	mov	r2, r0
 800e810:	4b23      	ldr	r3, [pc, #140]	@ (800e8a0 <__d2b+0xa8>)
 800e812:	f240 310f 	movw	r1, #783	@ 0x30f
 800e816:	4823      	ldr	r0, [pc, #140]	@ (800e8a4 <__d2b+0xac>)
 800e818:	f001 fb3e 	bl	800fe98 <__assert_func>
 800e81c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e824:	b10d      	cbz	r5, 800e82a <__d2b+0x32>
 800e826:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e82a:	9301      	str	r3, [sp, #4]
 800e82c:	f1b8 0300 	subs.w	r3, r8, #0
 800e830:	d023      	beq.n	800e87a <__d2b+0x82>
 800e832:	4668      	mov	r0, sp
 800e834:	9300      	str	r3, [sp, #0]
 800e836:	f7ff fd04 	bl	800e242 <__lo0bits>
 800e83a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e83e:	b1d0      	cbz	r0, 800e876 <__d2b+0x7e>
 800e840:	f1c0 0320 	rsb	r3, r0, #32
 800e844:	fa02 f303 	lsl.w	r3, r2, r3
 800e848:	40c2      	lsrs	r2, r0
 800e84a:	430b      	orrs	r3, r1
 800e84c:	9201      	str	r2, [sp, #4]
 800e84e:	6163      	str	r3, [r4, #20]
 800e850:	9b01      	ldr	r3, [sp, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	61a3      	str	r3, [r4, #24]
 800e856:	bf0c      	ite	eq
 800e858:	2201      	moveq	r2, #1
 800e85a:	2202      	movne	r2, #2
 800e85c:	6122      	str	r2, [r4, #16]
 800e85e:	b1a5      	cbz	r5, 800e88a <__d2b+0x92>
 800e860:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e864:	4405      	add	r5, r0
 800e866:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e86a:	603d      	str	r5, [r7, #0]
 800e86c:	6030      	str	r0, [r6, #0]
 800e86e:	4620      	mov	r0, r4
 800e870:	b003      	add	sp, #12
 800e872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e876:	6161      	str	r1, [r4, #20]
 800e878:	e7ea      	b.n	800e850 <__d2b+0x58>
 800e87a:	a801      	add	r0, sp, #4
 800e87c:	f7ff fce1 	bl	800e242 <__lo0bits>
 800e880:	9b01      	ldr	r3, [sp, #4]
 800e882:	3020      	adds	r0, #32
 800e884:	2201      	movs	r2, #1
 800e886:	6163      	str	r3, [r4, #20]
 800e888:	e7e8      	b.n	800e85c <__d2b+0x64>
 800e88a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e88e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e892:	6038      	str	r0, [r7, #0]
 800e894:	6918      	ldr	r0, [r3, #16]
 800e896:	f7ff fcb5 	bl	800e204 <__hi0bits>
 800e89a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e89e:	e7e5      	b.n	800e86c <__d2b+0x74>
 800e8a0:	08010b51 	.word	0x08010b51
 800e8a4:	08010b62 	.word	0x08010b62

0800e8a8 <__ratio>:
 800e8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ac:	b085      	sub	sp, #20
 800e8ae:	e9cd 1000 	strd	r1, r0, [sp]
 800e8b2:	a902      	add	r1, sp, #8
 800e8b4:	f7ff ff52 	bl	800e75c <__b2d>
 800e8b8:	a903      	add	r1, sp, #12
 800e8ba:	9800      	ldr	r0, [sp, #0]
 800e8bc:	ec55 4b10 	vmov	r4, r5, d0
 800e8c0:	f7ff ff4c 	bl	800e75c <__b2d>
 800e8c4:	9b01      	ldr	r3, [sp, #4]
 800e8c6:	462f      	mov	r7, r5
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	6919      	ldr	r1, [r3, #16]
 800e8cc:	9b00      	ldr	r3, [sp, #0]
 800e8ce:	691b      	ldr	r3, [r3, #16]
 800e8d0:	1ac9      	subs	r1, r1, r3
 800e8d2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e8d6:	ec5b ab10 	vmov	sl, fp, d0
 800e8da:	1a9b      	subs	r3, r3, r2
 800e8dc:	46d9      	mov	r9, fp
 800e8de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	bfcd      	iteet	gt
 800e8e6:	462a      	movgt	r2, r5
 800e8e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e8ec:	465a      	movle	r2, fp
 800e8ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e8f2:	bfd8      	it	le
 800e8f4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e8f8:	4652      	mov	r2, sl
 800e8fa:	4639      	mov	r1, r7
 800e8fc:	464b      	mov	r3, r9
 800e8fe:	f7f1 ffb5 	bl	800086c <__aeabi_ddiv>
 800e902:	ec41 0b10 	vmov	d0, r0, r1
 800e906:	b005      	add	sp, #20
 800e908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e90c <__copybits>:
 800e90c:	3901      	subs	r1, #1
 800e90e:	f102 0314 	add.w	r3, r2, #20
 800e912:	1149      	asrs	r1, r1, #5
 800e914:	b570      	push	{r4, r5, r6, lr}
 800e916:	3101      	adds	r1, #1
 800e918:	6914      	ldr	r4, [r2, #16]
 800e91a:	1f05      	subs	r5, r0, #4
 800e91c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e920:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e924:	42a3      	cmp	r3, r4
 800e926:	d30c      	bcc.n	800e942 <__copybits+0x36>
 800e928:	1aa3      	subs	r3, r4, r2
 800e92a:	3211      	adds	r2, #17
 800e92c:	3b11      	subs	r3, #17
 800e92e:	f023 0303 	bic.w	r3, r3, #3
 800e932:	42a2      	cmp	r2, r4
 800e934:	bf88      	it	hi
 800e936:	2300      	movhi	r3, #0
 800e938:	4418      	add	r0, r3
 800e93a:	2300      	movs	r3, #0
 800e93c:	4288      	cmp	r0, r1
 800e93e:	d305      	bcc.n	800e94c <__copybits+0x40>
 800e940:	bd70      	pop	{r4, r5, r6, pc}
 800e942:	f853 6b04 	ldr.w	r6, [r3], #4
 800e946:	f845 6f04 	str.w	r6, [r5, #4]!
 800e94a:	e7eb      	b.n	800e924 <__copybits+0x18>
 800e94c:	f840 3b04 	str.w	r3, [r0], #4
 800e950:	e7f4      	b.n	800e93c <__copybits+0x30>

0800e952 <__any_on>:
 800e952:	f100 0214 	add.w	r2, r0, #20
 800e956:	114b      	asrs	r3, r1, #5
 800e958:	6900      	ldr	r0, [r0, #16]
 800e95a:	4298      	cmp	r0, r3
 800e95c:	b510      	push	{r4, lr}
 800e95e:	db11      	blt.n	800e984 <__any_on+0x32>
 800e960:	dd0a      	ble.n	800e978 <__any_on+0x26>
 800e962:	f011 011f 	ands.w	r1, r1, #31
 800e966:	d007      	beq.n	800e978 <__any_on+0x26>
 800e968:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e96c:	fa24 f001 	lsr.w	r0, r4, r1
 800e970:	fa00 f101 	lsl.w	r1, r0, r1
 800e974:	428c      	cmp	r4, r1
 800e976:	d10b      	bne.n	800e990 <__any_on+0x3e>
 800e978:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d803      	bhi.n	800e988 <__any_on+0x36>
 800e980:	2000      	movs	r0, #0
 800e982:	bd10      	pop	{r4, pc}
 800e984:	4603      	mov	r3, r0
 800e986:	e7f7      	b.n	800e978 <__any_on+0x26>
 800e988:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e98c:	2900      	cmp	r1, #0
 800e98e:	d0f5      	beq.n	800e97c <__any_on+0x2a>
 800e990:	2001      	movs	r0, #1
 800e992:	e7f6      	b.n	800e982 <__any_on+0x30>

0800e994 <sulp>:
 800e994:	b570      	push	{r4, r5, r6, lr}
 800e996:	4604      	mov	r4, r0
 800e998:	460d      	mov	r5, r1
 800e99a:	4616      	mov	r6, r2
 800e99c:	ec45 4b10 	vmov	d0, r4, r5
 800e9a0:	f7ff feb6 	bl	800e710 <__ulp>
 800e9a4:	ec51 0b10 	vmov	r0, r1, d0
 800e9a8:	b17e      	cbz	r6, 800e9ca <sulp+0x36>
 800e9aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e9ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	dd09      	ble.n	800e9ca <sulp+0x36>
 800e9b6:	051b      	lsls	r3, r3, #20
 800e9b8:	2400      	movs	r4, #0
 800e9ba:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e9be:	4622      	mov	r2, r4
 800e9c0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e9c4:	462b      	mov	r3, r5
 800e9c6:	f7f1 fe27 	bl	8000618 <__aeabi_dmul>
 800e9ca:	ec41 0b10 	vmov	d0, r0, r1
 800e9ce:	bd70      	pop	{r4, r5, r6, pc}

0800e9d0 <_strtod_l>:
 800e9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d4:	b09f      	sub	sp, #124	@ 0x7c
 800e9d6:	460c      	mov	r4, r1
 800e9d8:	f04f 0a00 	mov.w	sl, #0
 800e9dc:	f04f 0b00 	mov.w	fp, #0
 800e9e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	9005      	str	r0, [sp, #20]
 800e9e6:	921a      	str	r2, [sp, #104]	@ 0x68
 800e9e8:	460a      	mov	r2, r1
 800e9ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800e9ec:	7811      	ldrb	r1, [r2, #0]
 800e9ee:	292b      	cmp	r1, #43	@ 0x2b
 800e9f0:	d04a      	beq.n	800ea88 <_strtod_l+0xb8>
 800e9f2:	d838      	bhi.n	800ea66 <_strtod_l+0x96>
 800e9f4:	290d      	cmp	r1, #13
 800e9f6:	d832      	bhi.n	800ea5e <_strtod_l+0x8e>
 800e9f8:	2908      	cmp	r1, #8
 800e9fa:	d832      	bhi.n	800ea62 <_strtod_l+0x92>
 800e9fc:	2900      	cmp	r1, #0
 800e9fe:	d03b      	beq.n	800ea78 <_strtod_l+0xa8>
 800ea00:	2200      	movs	r2, #0
 800ea02:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ea04:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ea06:	782a      	ldrb	r2, [r5, #0]
 800ea08:	2a30      	cmp	r2, #48	@ 0x30
 800ea0a:	f040 80b3 	bne.w	800eb74 <_strtod_l+0x1a4>
 800ea0e:	786a      	ldrb	r2, [r5, #1]
 800ea10:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ea14:	2a58      	cmp	r2, #88	@ 0x58
 800ea16:	d16e      	bne.n	800eaf6 <_strtod_l+0x126>
 800ea18:	9302      	str	r3, [sp, #8]
 800ea1a:	a919      	add	r1, sp, #100	@ 0x64
 800ea1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea1e:	4a90      	ldr	r2, [pc, #576]	@ (800ec60 <_strtod_l+0x290>)
 800ea20:	9301      	str	r3, [sp, #4]
 800ea22:	ab1a      	add	r3, sp, #104	@ 0x68
 800ea24:	9805      	ldr	r0, [sp, #20]
 800ea26:	9300      	str	r3, [sp, #0]
 800ea28:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ea2a:	f001 facd 	bl	800ffc8 <__gethex>
 800ea2e:	f010 060f 	ands.w	r6, r0, #15
 800ea32:	4604      	mov	r4, r0
 800ea34:	d005      	beq.n	800ea42 <_strtod_l+0x72>
 800ea36:	2e06      	cmp	r6, #6
 800ea38:	d128      	bne.n	800ea8c <_strtod_l+0xbc>
 800ea3a:	3501      	adds	r5, #1
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ea40:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f040 858e 	bne.w	800f566 <_strtod_l+0xb96>
 800ea4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea4c:	b1cb      	cbz	r3, 800ea82 <_strtod_l+0xb2>
 800ea4e:	4652      	mov	r2, sl
 800ea50:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ea54:	ec43 2b10 	vmov	d0, r2, r3
 800ea58:	b01f      	add	sp, #124	@ 0x7c
 800ea5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea5e:	2920      	cmp	r1, #32
 800ea60:	d1ce      	bne.n	800ea00 <_strtod_l+0x30>
 800ea62:	3201      	adds	r2, #1
 800ea64:	e7c1      	b.n	800e9ea <_strtod_l+0x1a>
 800ea66:	292d      	cmp	r1, #45	@ 0x2d
 800ea68:	d1ca      	bne.n	800ea00 <_strtod_l+0x30>
 800ea6a:	2101      	movs	r1, #1
 800ea6c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ea6e:	1c51      	adds	r1, r2, #1
 800ea70:	9119      	str	r1, [sp, #100]	@ 0x64
 800ea72:	7852      	ldrb	r2, [r2, #1]
 800ea74:	2a00      	cmp	r2, #0
 800ea76:	d1c5      	bne.n	800ea04 <_strtod_l+0x34>
 800ea78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ea7a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	f040 8570 	bne.w	800f562 <_strtod_l+0xb92>
 800ea82:	4652      	mov	r2, sl
 800ea84:	465b      	mov	r3, fp
 800ea86:	e7e5      	b.n	800ea54 <_strtod_l+0x84>
 800ea88:	2100      	movs	r1, #0
 800ea8a:	e7ef      	b.n	800ea6c <_strtod_l+0x9c>
 800ea8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ea8e:	b13a      	cbz	r2, 800eaa0 <_strtod_l+0xd0>
 800ea90:	2135      	movs	r1, #53	@ 0x35
 800ea92:	a81c      	add	r0, sp, #112	@ 0x70
 800ea94:	f7ff ff3a 	bl	800e90c <__copybits>
 800ea98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ea9a:	9805      	ldr	r0, [sp, #20]
 800ea9c:	f7ff fafe 	bl	800e09c <_Bfree>
 800eaa0:	3e01      	subs	r6, #1
 800eaa2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800eaa4:	2e04      	cmp	r6, #4
 800eaa6:	d806      	bhi.n	800eab6 <_strtod_l+0xe6>
 800eaa8:	e8df f006 	tbb	[pc, r6]
 800eaac:	201d0314 	.word	0x201d0314
 800eab0:	14          	.byte	0x14
 800eab1:	00          	.byte	0x00
 800eab2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800eab6:	05e1      	lsls	r1, r4, #23
 800eab8:	bf48      	it	mi
 800eaba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800eabe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eac2:	0d1b      	lsrs	r3, r3, #20
 800eac4:	051b      	lsls	r3, r3, #20
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d1bb      	bne.n	800ea42 <_strtod_l+0x72>
 800eaca:	f7fe fbbd 	bl	800d248 <__errno>
 800eace:	2322      	movs	r3, #34	@ 0x22
 800ead0:	6003      	str	r3, [r0, #0]
 800ead2:	e7b6      	b.n	800ea42 <_strtod_l+0x72>
 800ead4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ead8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800eadc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800eae0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800eae4:	e7e7      	b.n	800eab6 <_strtod_l+0xe6>
 800eae6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ec68 <_strtod_l+0x298>
 800eaea:	e7e4      	b.n	800eab6 <_strtod_l+0xe6>
 800eaec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800eaf0:	f04f 3aff 	mov.w	sl, #4294967295
 800eaf4:	e7df      	b.n	800eab6 <_strtod_l+0xe6>
 800eaf6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eaf8:	1c5a      	adds	r2, r3, #1
 800eafa:	9219      	str	r2, [sp, #100]	@ 0x64
 800eafc:	785b      	ldrb	r3, [r3, #1]
 800eafe:	2b30      	cmp	r3, #48	@ 0x30
 800eb00:	d0f9      	beq.n	800eaf6 <_strtod_l+0x126>
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d09d      	beq.n	800ea42 <_strtod_l+0x72>
 800eb06:	2301      	movs	r3, #1
 800eb08:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb0a:	220a      	movs	r2, #10
 800eb0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb0e:	930c      	str	r3, [sp, #48]	@ 0x30
 800eb10:	2300      	movs	r3, #0
 800eb12:	461f      	mov	r7, r3
 800eb14:	9308      	str	r3, [sp, #32]
 800eb16:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb18:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800eb1a:	7805      	ldrb	r5, [r0, #0]
 800eb1c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800eb20:	b2d9      	uxtb	r1, r3
 800eb22:	2909      	cmp	r1, #9
 800eb24:	d928      	bls.n	800eb78 <_strtod_l+0x1a8>
 800eb26:	2201      	movs	r2, #1
 800eb28:	494e      	ldr	r1, [pc, #312]	@ (800ec64 <_strtod_l+0x294>)
 800eb2a:	f001 f978 	bl	800fe1e <strncmp>
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	d033      	beq.n	800eb9a <_strtod_l+0x1ca>
 800eb32:	2000      	movs	r0, #0
 800eb34:	462a      	mov	r2, r5
 800eb36:	463d      	mov	r5, r7
 800eb38:	4681      	mov	r9, r0
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2a65      	cmp	r2, #101	@ 0x65
 800eb3e:	d001      	beq.n	800eb44 <_strtod_l+0x174>
 800eb40:	2a45      	cmp	r2, #69	@ 0x45
 800eb42:	d114      	bne.n	800eb6e <_strtod_l+0x19e>
 800eb44:	b91d      	cbnz	r5, 800eb4e <_strtod_l+0x17e>
 800eb46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb48:	4302      	orrs	r2, r0
 800eb4a:	d095      	beq.n	800ea78 <_strtod_l+0xa8>
 800eb4c:	2500      	movs	r5, #0
 800eb4e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800eb50:	1c62      	adds	r2, r4, #1
 800eb52:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb54:	7862      	ldrb	r2, [r4, #1]
 800eb56:	2a2b      	cmp	r2, #43	@ 0x2b
 800eb58:	d078      	beq.n	800ec4c <_strtod_l+0x27c>
 800eb5a:	2a2d      	cmp	r2, #45	@ 0x2d
 800eb5c:	d07c      	beq.n	800ec58 <_strtod_l+0x288>
 800eb5e:	f04f 0c00 	mov.w	ip, #0
 800eb62:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800eb66:	2909      	cmp	r1, #9
 800eb68:	f240 8084 	bls.w	800ec74 <_strtod_l+0x2a4>
 800eb6c:	9419      	str	r4, [sp, #100]	@ 0x64
 800eb6e:	f04f 0800 	mov.w	r8, #0
 800eb72:	e0a4      	b.n	800ecbe <_strtod_l+0x2ee>
 800eb74:	2300      	movs	r3, #0
 800eb76:	e7c7      	b.n	800eb08 <_strtod_l+0x138>
 800eb78:	2f08      	cmp	r7, #8
 800eb7a:	f100 0001 	add.w	r0, r0, #1
 800eb7e:	f107 0701 	add.w	r7, r7, #1
 800eb82:	bfd5      	itete	le
 800eb84:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800eb86:	9908      	ldrgt	r1, [sp, #32]
 800eb88:	fb02 3301 	mlale	r3, r2, r1, r3
 800eb8c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800eb90:	bfd4      	ite	le
 800eb92:	930a      	strle	r3, [sp, #40]	@ 0x28
 800eb94:	9308      	strgt	r3, [sp, #32]
 800eb96:	9019      	str	r0, [sp, #100]	@ 0x64
 800eb98:	e7be      	b.n	800eb18 <_strtod_l+0x148>
 800eb9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb9c:	1c5a      	adds	r2, r3, #1
 800eb9e:	9219      	str	r2, [sp, #100]	@ 0x64
 800eba0:	785a      	ldrb	r2, [r3, #1]
 800eba2:	b37f      	cbz	r7, 800ec04 <_strtod_l+0x234>
 800eba4:	4681      	mov	r9, r0
 800eba6:	463d      	mov	r5, r7
 800eba8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ebac:	2b09      	cmp	r3, #9
 800ebae:	d912      	bls.n	800ebd6 <_strtod_l+0x206>
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e7c3      	b.n	800eb3c <_strtod_l+0x16c>
 800ebb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	1c5a      	adds	r2, r3, #1
 800ebba:	9219      	str	r2, [sp, #100]	@ 0x64
 800ebbc:	785a      	ldrb	r2, [r3, #1]
 800ebbe:	2a30      	cmp	r2, #48	@ 0x30
 800ebc0:	d0f8      	beq.n	800ebb4 <_strtod_l+0x1e4>
 800ebc2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ebc6:	2b08      	cmp	r3, #8
 800ebc8:	f200 84d2 	bhi.w	800f570 <_strtod_l+0xba0>
 800ebcc:	4681      	mov	r9, r0
 800ebce:	2000      	movs	r0, #0
 800ebd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	930c      	str	r3, [sp, #48]	@ 0x30
 800ebd6:	3a30      	subs	r2, #48	@ 0x30
 800ebd8:	f100 0301 	add.w	r3, r0, #1
 800ebdc:	d02a      	beq.n	800ec34 <_strtod_l+0x264>
 800ebde:	4499      	add	r9, r3
 800ebe0:	eb00 0c05 	add.w	ip, r0, r5
 800ebe4:	462b      	mov	r3, r5
 800ebe6:	210a      	movs	r1, #10
 800ebe8:	4563      	cmp	r3, ip
 800ebea:	d10d      	bne.n	800ec08 <_strtod_l+0x238>
 800ebec:	1c69      	adds	r1, r5, #1
 800ebee:	4401      	add	r1, r0
 800ebf0:	4428      	add	r0, r5
 800ebf2:	2808      	cmp	r0, #8
 800ebf4:	dc16      	bgt.n	800ec24 <_strtod_l+0x254>
 800ebf6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ebf8:	230a      	movs	r3, #10
 800ebfa:	fb03 2300 	mla	r3, r3, r0, r2
 800ebfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec00:	2300      	movs	r3, #0
 800ec02:	e018      	b.n	800ec36 <_strtod_l+0x266>
 800ec04:	4638      	mov	r0, r7
 800ec06:	e7da      	b.n	800ebbe <_strtod_l+0x1ee>
 800ec08:	2b08      	cmp	r3, #8
 800ec0a:	f103 0301 	add.w	r3, r3, #1
 800ec0e:	dc03      	bgt.n	800ec18 <_strtod_l+0x248>
 800ec10:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ec12:	434e      	muls	r6, r1
 800ec14:	960a      	str	r6, [sp, #40]	@ 0x28
 800ec16:	e7e7      	b.n	800ebe8 <_strtod_l+0x218>
 800ec18:	2b10      	cmp	r3, #16
 800ec1a:	bfde      	ittt	le
 800ec1c:	9e08      	ldrle	r6, [sp, #32]
 800ec1e:	434e      	mulle	r6, r1
 800ec20:	9608      	strle	r6, [sp, #32]
 800ec22:	e7e1      	b.n	800ebe8 <_strtod_l+0x218>
 800ec24:	280f      	cmp	r0, #15
 800ec26:	dceb      	bgt.n	800ec00 <_strtod_l+0x230>
 800ec28:	9808      	ldr	r0, [sp, #32]
 800ec2a:	230a      	movs	r3, #10
 800ec2c:	fb03 2300 	mla	r3, r3, r0, r2
 800ec30:	9308      	str	r3, [sp, #32]
 800ec32:	e7e5      	b.n	800ec00 <_strtod_l+0x230>
 800ec34:	4629      	mov	r1, r5
 800ec36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ec38:	460d      	mov	r5, r1
 800ec3a:	1c50      	adds	r0, r2, #1
 800ec3c:	9019      	str	r0, [sp, #100]	@ 0x64
 800ec3e:	4618      	mov	r0, r3
 800ec40:	7852      	ldrb	r2, [r2, #1]
 800ec42:	e7b1      	b.n	800eba8 <_strtod_l+0x1d8>
 800ec44:	f04f 0900 	mov.w	r9, #0
 800ec48:	2301      	movs	r3, #1
 800ec4a:	e77c      	b.n	800eb46 <_strtod_l+0x176>
 800ec4c:	f04f 0c00 	mov.w	ip, #0
 800ec50:	1ca2      	adds	r2, r4, #2
 800ec52:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec54:	78a2      	ldrb	r2, [r4, #2]
 800ec56:	e784      	b.n	800eb62 <_strtod_l+0x192>
 800ec58:	f04f 0c01 	mov.w	ip, #1
 800ec5c:	e7f8      	b.n	800ec50 <_strtod_l+0x280>
 800ec5e:	bf00      	nop
 800ec60:	08010cd0 	.word	0x08010cd0
 800ec64:	08010cb8 	.word	0x08010cb8
 800ec68:	7ff00000 	.word	0x7ff00000
 800ec6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ec6e:	1c51      	adds	r1, r2, #1
 800ec70:	9119      	str	r1, [sp, #100]	@ 0x64
 800ec72:	7852      	ldrb	r2, [r2, #1]
 800ec74:	2a30      	cmp	r2, #48	@ 0x30
 800ec76:	d0f9      	beq.n	800ec6c <_strtod_l+0x29c>
 800ec78:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ec7c:	2908      	cmp	r1, #8
 800ec7e:	f63f af76 	bhi.w	800eb6e <_strtod_l+0x19e>
 800ec82:	3a30      	subs	r2, #48	@ 0x30
 800ec84:	f04f 080a 	mov.w	r8, #10
 800ec88:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ec8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ec8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ec90:	1c56      	adds	r6, r2, #1
 800ec92:	9619      	str	r6, [sp, #100]	@ 0x64
 800ec94:	7852      	ldrb	r2, [r2, #1]
 800ec96:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ec9a:	f1be 0f09 	cmp.w	lr, #9
 800ec9e:	d939      	bls.n	800ed14 <_strtod_l+0x344>
 800eca0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eca2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800eca6:	1a76      	subs	r6, r6, r1
 800eca8:	2e08      	cmp	r6, #8
 800ecaa:	dc03      	bgt.n	800ecb4 <_strtod_l+0x2e4>
 800ecac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ecae:	4588      	cmp	r8, r1
 800ecb0:	bfa8      	it	ge
 800ecb2:	4688      	movge	r8, r1
 800ecb4:	f1bc 0f00 	cmp.w	ip, #0
 800ecb8:	d001      	beq.n	800ecbe <_strtod_l+0x2ee>
 800ecba:	f1c8 0800 	rsb	r8, r8, #0
 800ecbe:	2d00      	cmp	r5, #0
 800ecc0:	d14e      	bne.n	800ed60 <_strtod_l+0x390>
 800ecc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ecc4:	4308      	orrs	r0, r1
 800ecc6:	f47f aebc 	bne.w	800ea42 <_strtod_l+0x72>
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	f47f aed4 	bne.w	800ea78 <_strtod_l+0xa8>
 800ecd0:	2a69      	cmp	r2, #105	@ 0x69
 800ecd2:	d028      	beq.n	800ed26 <_strtod_l+0x356>
 800ecd4:	dc25      	bgt.n	800ed22 <_strtod_l+0x352>
 800ecd6:	2a49      	cmp	r2, #73	@ 0x49
 800ecd8:	d025      	beq.n	800ed26 <_strtod_l+0x356>
 800ecda:	2a4e      	cmp	r2, #78	@ 0x4e
 800ecdc:	f47f aecc 	bne.w	800ea78 <_strtod_l+0xa8>
 800ece0:	499b      	ldr	r1, [pc, #620]	@ (800ef50 <_strtod_l+0x580>)
 800ece2:	a819      	add	r0, sp, #100	@ 0x64
 800ece4:	f001 fb90 	bl	8010408 <__match>
 800ece8:	2800      	cmp	r0, #0
 800ecea:	f43f aec5 	beq.w	800ea78 <_strtod_l+0xa8>
 800ecee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	2b28      	cmp	r3, #40	@ 0x28
 800ecf4:	d12e      	bne.n	800ed54 <_strtod_l+0x384>
 800ecf6:	aa1c      	add	r2, sp, #112	@ 0x70
 800ecf8:	4996      	ldr	r1, [pc, #600]	@ (800ef54 <_strtod_l+0x584>)
 800ecfa:	a819      	add	r0, sp, #100	@ 0x64
 800ecfc:	f001 fb98 	bl	8010430 <__hexnan>
 800ed00:	2805      	cmp	r0, #5
 800ed02:	d127      	bne.n	800ed54 <_strtod_l+0x384>
 800ed04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ed06:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ed0a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ed0e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ed12:	e696      	b.n	800ea42 <_strtod_l+0x72>
 800ed14:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ed16:	fb08 2101 	mla	r1, r8, r1, r2
 800ed1a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ed1e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ed20:	e7b5      	b.n	800ec8e <_strtod_l+0x2be>
 800ed22:	2a6e      	cmp	r2, #110	@ 0x6e
 800ed24:	e7da      	b.n	800ecdc <_strtod_l+0x30c>
 800ed26:	498c      	ldr	r1, [pc, #560]	@ (800ef58 <_strtod_l+0x588>)
 800ed28:	a819      	add	r0, sp, #100	@ 0x64
 800ed2a:	f001 fb6d 	bl	8010408 <__match>
 800ed2e:	2800      	cmp	r0, #0
 800ed30:	f43f aea2 	beq.w	800ea78 <_strtod_l+0xa8>
 800ed34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed36:	a819      	add	r0, sp, #100	@ 0x64
 800ed38:	4988      	ldr	r1, [pc, #544]	@ (800ef5c <_strtod_l+0x58c>)
 800ed3a:	3b01      	subs	r3, #1
 800ed3c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ed3e:	f001 fb63 	bl	8010408 <__match>
 800ed42:	b910      	cbnz	r0, 800ed4a <_strtod_l+0x37a>
 800ed44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed46:	3301      	adds	r3, #1
 800ed48:	9319      	str	r3, [sp, #100]	@ 0x64
 800ed4a:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ef6c <_strtod_l+0x59c>
 800ed4e:	f04f 0a00 	mov.w	sl, #0
 800ed52:	e676      	b.n	800ea42 <_strtod_l+0x72>
 800ed54:	4882      	ldr	r0, [pc, #520]	@ (800ef60 <_strtod_l+0x590>)
 800ed56:	f001 f897 	bl	800fe88 <nan>
 800ed5a:	ec5b ab10 	vmov	sl, fp, d0
 800ed5e:	e670      	b.n	800ea42 <_strtod_l+0x72>
 800ed60:	eba8 0309 	sub.w	r3, r8, r9
 800ed64:	2f00      	cmp	r7, #0
 800ed66:	bf08      	it	eq
 800ed68:	462f      	moveq	r7, r5
 800ed6a:	2d10      	cmp	r5, #16
 800ed6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ed6e:	462c      	mov	r4, r5
 800ed70:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed72:	bfa8      	it	ge
 800ed74:	2410      	movge	r4, #16
 800ed76:	f7f1 fbd5 	bl	8000524 <__aeabi_ui2d>
 800ed7a:	2d09      	cmp	r5, #9
 800ed7c:	4682      	mov	sl, r0
 800ed7e:	468b      	mov	fp, r1
 800ed80:	dc13      	bgt.n	800edaa <_strtod_l+0x3da>
 800ed82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	f43f ae5c 	beq.w	800ea42 <_strtod_l+0x72>
 800ed8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed8c:	dd78      	ble.n	800ee80 <_strtod_l+0x4b0>
 800ed8e:	2b16      	cmp	r3, #22
 800ed90:	dc5f      	bgt.n	800ee52 <_strtod_l+0x482>
 800ed92:	4974      	ldr	r1, [pc, #464]	@ (800ef64 <_strtod_l+0x594>)
 800ed94:	4652      	mov	r2, sl
 800ed96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ed9a:	465b      	mov	r3, fp
 800ed9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eda0:	f7f1 fc3a 	bl	8000618 <__aeabi_dmul>
 800eda4:	4682      	mov	sl, r0
 800eda6:	468b      	mov	fp, r1
 800eda8:	e64b      	b.n	800ea42 <_strtod_l+0x72>
 800edaa:	4b6e      	ldr	r3, [pc, #440]	@ (800ef64 <_strtod_l+0x594>)
 800edac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800edb0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800edb4:	f7f1 fc30 	bl	8000618 <__aeabi_dmul>
 800edb8:	4682      	mov	sl, r0
 800edba:	468b      	mov	fp, r1
 800edbc:	9808      	ldr	r0, [sp, #32]
 800edbe:	f7f1 fbb1 	bl	8000524 <__aeabi_ui2d>
 800edc2:	4602      	mov	r2, r0
 800edc4:	460b      	mov	r3, r1
 800edc6:	4650      	mov	r0, sl
 800edc8:	4659      	mov	r1, fp
 800edca:	f7f1 fa6f 	bl	80002ac <__adddf3>
 800edce:	2d0f      	cmp	r5, #15
 800edd0:	4682      	mov	sl, r0
 800edd2:	468b      	mov	fp, r1
 800edd4:	ddd5      	ble.n	800ed82 <_strtod_l+0x3b2>
 800edd6:	1b2c      	subs	r4, r5, r4
 800edd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edda:	441c      	add	r4, r3
 800eddc:	2c00      	cmp	r4, #0
 800edde:	f340 8096 	ble.w	800ef0e <_strtod_l+0x53e>
 800ede2:	f014 030f 	ands.w	r3, r4, #15
 800ede6:	d00a      	beq.n	800edfe <_strtod_l+0x42e>
 800ede8:	495e      	ldr	r1, [pc, #376]	@ (800ef64 <_strtod_l+0x594>)
 800edea:	4652      	mov	r2, sl
 800edec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800edf0:	465b      	mov	r3, fp
 800edf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edf6:	f7f1 fc0f 	bl	8000618 <__aeabi_dmul>
 800edfa:	4682      	mov	sl, r0
 800edfc:	468b      	mov	fp, r1
 800edfe:	f034 040f 	bics.w	r4, r4, #15
 800ee02:	d073      	beq.n	800eeec <_strtod_l+0x51c>
 800ee04:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ee08:	dd48      	ble.n	800ee9c <_strtod_l+0x4cc>
 800ee0a:	2400      	movs	r4, #0
 800ee0c:	46a0      	mov	r8, r4
 800ee0e:	46a1      	mov	r9, r4
 800ee10:	940a      	str	r4, [sp, #40]	@ 0x28
 800ee12:	2322      	movs	r3, #34	@ 0x22
 800ee14:	9a05      	ldr	r2, [sp, #20]
 800ee16:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ef6c <_strtod_l+0x59c>
 800ee1a:	f04f 0a00 	mov.w	sl, #0
 800ee1e:	6013      	str	r3, [r2, #0]
 800ee20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f43f ae0d 	beq.w	800ea42 <_strtod_l+0x72>
 800ee28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ee2a:	9805      	ldr	r0, [sp, #20]
 800ee2c:	f7ff f936 	bl	800e09c <_Bfree>
 800ee30:	4649      	mov	r1, r9
 800ee32:	9805      	ldr	r0, [sp, #20]
 800ee34:	f7ff f932 	bl	800e09c <_Bfree>
 800ee38:	4641      	mov	r1, r8
 800ee3a:	9805      	ldr	r0, [sp, #20]
 800ee3c:	f7ff f92e 	bl	800e09c <_Bfree>
 800ee40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee42:	9805      	ldr	r0, [sp, #20]
 800ee44:	f7ff f92a 	bl	800e09c <_Bfree>
 800ee48:	4621      	mov	r1, r4
 800ee4a:	9805      	ldr	r0, [sp, #20]
 800ee4c:	f7ff f926 	bl	800e09c <_Bfree>
 800ee50:	e5f7      	b.n	800ea42 <_strtod_l+0x72>
 800ee52:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ee56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	dbbc      	blt.n	800edd6 <_strtod_l+0x406>
 800ee5c:	f1c5 050f 	rsb	r5, r5, #15
 800ee60:	4c40      	ldr	r4, [pc, #256]	@ (800ef64 <_strtod_l+0x594>)
 800ee62:	4652      	mov	r2, sl
 800ee64:	465b      	mov	r3, fp
 800ee66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ee6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee6e:	f7f1 fbd3 	bl	8000618 <__aeabi_dmul>
 800ee72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee74:	1b5d      	subs	r5, r3, r5
 800ee76:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ee7a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ee7e:	e78f      	b.n	800eda0 <_strtod_l+0x3d0>
 800ee80:	3316      	adds	r3, #22
 800ee82:	dba8      	blt.n	800edd6 <_strtod_l+0x406>
 800ee84:	eba9 0808 	sub.w	r8, r9, r8
 800ee88:	4b36      	ldr	r3, [pc, #216]	@ (800ef64 <_strtod_l+0x594>)
 800ee8a:	4650      	mov	r0, sl
 800ee8c:	4659      	mov	r1, fp
 800ee8e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ee92:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ee96:	f7f1 fce9 	bl	800086c <__aeabi_ddiv>
 800ee9a:	e783      	b.n	800eda4 <_strtod_l+0x3d4>
 800ee9c:	4b32      	ldr	r3, [pc, #200]	@ (800ef68 <_strtod_l+0x598>)
 800ee9e:	1124      	asrs	r4, r4, #4
 800eea0:	4650      	mov	r0, sl
 800eea2:	4659      	mov	r1, fp
 800eea4:	9308      	str	r3, [sp, #32]
 800eea6:	2300      	movs	r3, #0
 800eea8:	461e      	mov	r6, r3
 800eeaa:	2c01      	cmp	r4, #1
 800eeac:	dc21      	bgt.n	800eef2 <_strtod_l+0x522>
 800eeae:	b10b      	cbz	r3, 800eeb4 <_strtod_l+0x4e4>
 800eeb0:	4682      	mov	sl, r0
 800eeb2:	468b      	mov	fp, r1
 800eeb4:	492c      	ldr	r1, [pc, #176]	@ (800ef68 <_strtod_l+0x598>)
 800eeb6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800eeba:	4652      	mov	r2, sl
 800eebc:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800eec0:	465b      	mov	r3, fp
 800eec2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eec6:	f7f1 fba7 	bl	8000618 <__aeabi_dmul>
 800eeca:	4b28      	ldr	r3, [pc, #160]	@ (800ef6c <_strtod_l+0x59c>)
 800eecc:	460a      	mov	r2, r1
 800eece:	4682      	mov	sl, r0
 800eed0:	400b      	ands	r3, r1
 800eed2:	4927      	ldr	r1, [pc, #156]	@ (800ef70 <_strtod_l+0x5a0>)
 800eed4:	428b      	cmp	r3, r1
 800eed6:	d898      	bhi.n	800ee0a <_strtod_l+0x43a>
 800eed8:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800eedc:	428b      	cmp	r3, r1
 800eede:	bf86      	itte	hi
 800eee0:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ef74 <_strtod_l+0x5a4>
 800eee4:	f04f 3aff 	movhi.w	sl, #4294967295
 800eee8:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800eeec:	2300      	movs	r3, #0
 800eeee:	9308      	str	r3, [sp, #32]
 800eef0:	e07a      	b.n	800efe8 <_strtod_l+0x618>
 800eef2:	07e2      	lsls	r2, r4, #31
 800eef4:	d505      	bpl.n	800ef02 <_strtod_l+0x532>
 800eef6:	9b08      	ldr	r3, [sp, #32]
 800eef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefc:	f7f1 fb8c 	bl	8000618 <__aeabi_dmul>
 800ef00:	2301      	movs	r3, #1
 800ef02:	9a08      	ldr	r2, [sp, #32]
 800ef04:	3601      	adds	r6, #1
 800ef06:	1064      	asrs	r4, r4, #1
 800ef08:	3208      	adds	r2, #8
 800ef0a:	9208      	str	r2, [sp, #32]
 800ef0c:	e7cd      	b.n	800eeaa <_strtod_l+0x4da>
 800ef0e:	d0ed      	beq.n	800eeec <_strtod_l+0x51c>
 800ef10:	4264      	negs	r4, r4
 800ef12:	f014 020f 	ands.w	r2, r4, #15
 800ef16:	d00a      	beq.n	800ef2e <_strtod_l+0x55e>
 800ef18:	4b12      	ldr	r3, [pc, #72]	@ (800ef64 <_strtod_l+0x594>)
 800ef1a:	4650      	mov	r0, sl
 800ef1c:	4659      	mov	r1, fp
 800ef1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef26:	f7f1 fca1 	bl	800086c <__aeabi_ddiv>
 800ef2a:	4682      	mov	sl, r0
 800ef2c:	468b      	mov	fp, r1
 800ef2e:	1124      	asrs	r4, r4, #4
 800ef30:	d0dc      	beq.n	800eeec <_strtod_l+0x51c>
 800ef32:	2c1f      	cmp	r4, #31
 800ef34:	dd20      	ble.n	800ef78 <_strtod_l+0x5a8>
 800ef36:	2400      	movs	r4, #0
 800ef38:	46a0      	mov	r8, r4
 800ef3a:	46a1      	mov	r9, r4
 800ef3c:	940a      	str	r4, [sp, #40]	@ 0x28
 800ef3e:	2322      	movs	r3, #34	@ 0x22
 800ef40:	9a05      	ldr	r2, [sp, #20]
 800ef42:	f04f 0a00 	mov.w	sl, #0
 800ef46:	f04f 0b00 	mov.w	fp, #0
 800ef4a:	6013      	str	r3, [r2, #0]
 800ef4c:	e768      	b.n	800ee20 <_strtod_l+0x450>
 800ef4e:	bf00      	nop
 800ef50:	08010aa9 	.word	0x08010aa9
 800ef54:	08010cbc 	.word	0x08010cbc
 800ef58:	08010aa1 	.word	0x08010aa1
 800ef5c:	08010ad8 	.word	0x08010ad8
 800ef60:	08010e65 	.word	0x08010e65
 800ef64:	08010bf0 	.word	0x08010bf0
 800ef68:	08010bc8 	.word	0x08010bc8
 800ef6c:	7ff00000 	.word	0x7ff00000
 800ef70:	7ca00000 	.word	0x7ca00000
 800ef74:	7fefffff 	.word	0x7fefffff
 800ef78:	f014 0310 	ands.w	r3, r4, #16
 800ef7c:	4650      	mov	r0, sl
 800ef7e:	4659      	mov	r1, fp
 800ef80:	4ea9      	ldr	r6, [pc, #676]	@ (800f228 <_strtod_l+0x858>)
 800ef82:	bf18      	it	ne
 800ef84:	236a      	movne	r3, #106	@ 0x6a
 800ef86:	9308      	str	r3, [sp, #32]
 800ef88:	2300      	movs	r3, #0
 800ef8a:	07e2      	lsls	r2, r4, #31
 800ef8c:	d504      	bpl.n	800ef98 <_strtod_l+0x5c8>
 800ef8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ef92:	f7f1 fb41 	bl	8000618 <__aeabi_dmul>
 800ef96:	2301      	movs	r3, #1
 800ef98:	1064      	asrs	r4, r4, #1
 800ef9a:	f106 0608 	add.w	r6, r6, #8
 800ef9e:	d1f4      	bne.n	800ef8a <_strtod_l+0x5ba>
 800efa0:	b10b      	cbz	r3, 800efa6 <_strtod_l+0x5d6>
 800efa2:	4682      	mov	sl, r0
 800efa4:	468b      	mov	fp, r1
 800efa6:	9b08      	ldr	r3, [sp, #32]
 800efa8:	b1b3      	cbz	r3, 800efd8 <_strtod_l+0x608>
 800efaa:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800efae:	4659      	mov	r1, fp
 800efb0:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	dd0f      	ble.n	800efd8 <_strtod_l+0x608>
 800efb8:	2b1f      	cmp	r3, #31
 800efba:	dd55      	ble.n	800f068 <_strtod_l+0x698>
 800efbc:	2b34      	cmp	r3, #52	@ 0x34
 800efbe:	f04f 0a00 	mov.w	sl, #0
 800efc2:	bfdb      	ittet	le
 800efc4:	f04f 33ff 	movle.w	r3, #4294967295
 800efc8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800efcc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800efd0:	4093      	lslle	r3, r2
 800efd2:	bfd8      	it	le
 800efd4:	ea03 0b01 	andle.w	fp, r3, r1
 800efd8:	2200      	movs	r2, #0
 800efda:	2300      	movs	r3, #0
 800efdc:	4650      	mov	r0, sl
 800efde:	4659      	mov	r1, fp
 800efe0:	f7f1 fd82 	bl	8000ae8 <__aeabi_dcmpeq>
 800efe4:	2800      	cmp	r0, #0
 800efe6:	d1a6      	bne.n	800ef36 <_strtod_l+0x566>
 800efe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efea:	463a      	mov	r2, r7
 800efec:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800efee:	9300      	str	r3, [sp, #0]
 800eff0:	462b      	mov	r3, r5
 800eff2:	9805      	ldr	r0, [sp, #20]
 800eff4:	f7ff f8bc 	bl	800e170 <__s2b>
 800eff8:	900a      	str	r0, [sp, #40]	@ 0x28
 800effa:	2800      	cmp	r0, #0
 800effc:	f43f af05 	beq.w	800ee0a <_strtod_l+0x43a>
 800f000:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f002:	eba9 0308 	sub.w	r3, r9, r8
 800f006:	2400      	movs	r4, #0
 800f008:	2a00      	cmp	r2, #0
 800f00a:	46a0      	mov	r8, r4
 800f00c:	bfa8      	it	ge
 800f00e:	2300      	movge	r3, #0
 800f010:	9312      	str	r3, [sp, #72]	@ 0x48
 800f012:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f016:	9316      	str	r3, [sp, #88]	@ 0x58
 800f018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f01a:	9805      	ldr	r0, [sp, #20]
 800f01c:	6859      	ldr	r1, [r3, #4]
 800f01e:	f7fe fffd 	bl	800e01c <_Balloc>
 800f022:	4681      	mov	r9, r0
 800f024:	2800      	cmp	r0, #0
 800f026:	f43f aef4 	beq.w	800ee12 <_strtod_l+0x442>
 800f02a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f02c:	300c      	adds	r0, #12
 800f02e:	691a      	ldr	r2, [r3, #16]
 800f030:	f103 010c 	add.w	r1, r3, #12
 800f034:	3202      	adds	r2, #2
 800f036:	0092      	lsls	r2, r2, #2
 800f038:	f7fe f941 	bl	800d2be <memcpy>
 800f03c:	aa1c      	add	r2, sp, #112	@ 0x70
 800f03e:	a91b      	add	r1, sp, #108	@ 0x6c
 800f040:	9805      	ldr	r0, [sp, #20]
 800f042:	ec4b ab10 	vmov	d0, sl, fp
 800f046:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f04a:	f7ff fbd5 	bl	800e7f8 <__d2b>
 800f04e:	901a      	str	r0, [sp, #104]	@ 0x68
 800f050:	2800      	cmp	r0, #0
 800f052:	f43f aede 	beq.w	800ee12 <_strtod_l+0x442>
 800f056:	2101      	movs	r1, #1
 800f058:	9805      	ldr	r0, [sp, #20]
 800f05a:	f7ff f91f 	bl	800e29c <__i2b>
 800f05e:	4680      	mov	r8, r0
 800f060:	b948      	cbnz	r0, 800f076 <_strtod_l+0x6a6>
 800f062:	f04f 0800 	mov.w	r8, #0
 800f066:	e6d4      	b.n	800ee12 <_strtod_l+0x442>
 800f068:	f04f 32ff 	mov.w	r2, #4294967295
 800f06c:	fa02 f303 	lsl.w	r3, r2, r3
 800f070:	ea03 0a0a 	and.w	sl, r3, sl
 800f074:	e7b0      	b.n	800efd8 <_strtod_l+0x608>
 800f076:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f078:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f07a:	2d00      	cmp	r5, #0
 800f07c:	bfa9      	itett	ge
 800f07e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f080:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f082:	18ef      	addge	r7, r5, r3
 800f084:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f086:	bfb8      	it	lt
 800f088:	1b5e      	sublt	r6, r3, r5
 800f08a:	9b08      	ldr	r3, [sp, #32]
 800f08c:	bfb8      	it	lt
 800f08e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f090:	1aed      	subs	r5, r5, r3
 800f092:	4b66      	ldr	r3, [pc, #408]	@ (800f22c <_strtod_l+0x85c>)
 800f094:	4415      	add	r5, r2
 800f096:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f09a:	3d01      	subs	r5, #1
 800f09c:	429d      	cmp	r5, r3
 800f09e:	da4f      	bge.n	800f140 <_strtod_l+0x770>
 800f0a0:	1b5b      	subs	r3, r3, r5
 800f0a2:	2101      	movs	r1, #1
 800f0a4:	2b1f      	cmp	r3, #31
 800f0a6:	eba2 0203 	sub.w	r2, r2, r3
 800f0aa:	dc3d      	bgt.n	800f128 <_strtod_l+0x758>
 800f0ac:	fa01 f303 	lsl.w	r3, r1, r3
 800f0b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	9310      	str	r3, [sp, #64]	@ 0x40
 800f0b6:	18bd      	adds	r5, r7, r2
 800f0b8:	9b08      	ldr	r3, [sp, #32]
 800f0ba:	4416      	add	r6, r2
 800f0bc:	42af      	cmp	r7, r5
 800f0be:	441e      	add	r6, r3
 800f0c0:	463b      	mov	r3, r7
 800f0c2:	bfa8      	it	ge
 800f0c4:	462b      	movge	r3, r5
 800f0c6:	42b3      	cmp	r3, r6
 800f0c8:	bfa8      	it	ge
 800f0ca:	4633      	movge	r3, r6
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	bfc2      	ittt	gt
 800f0d0:	1aed      	subgt	r5, r5, r3
 800f0d2:	1af6      	subgt	r6, r6, r3
 800f0d4:	1aff      	subgt	r7, r7, r3
 800f0d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	dd16      	ble.n	800f10a <_strtod_l+0x73a>
 800f0dc:	4641      	mov	r1, r8
 800f0de:	461a      	mov	r2, r3
 800f0e0:	9805      	ldr	r0, [sp, #20]
 800f0e2:	f7ff f99b 	bl	800e41c <__pow5mult>
 800f0e6:	4680      	mov	r8, r0
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	d0ba      	beq.n	800f062 <_strtod_l+0x692>
 800f0ec:	4601      	mov	r1, r0
 800f0ee:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f0f0:	9805      	ldr	r0, [sp, #20]
 800f0f2:	f7ff f8e9 	bl	800e2c8 <__multiply>
 800f0f6:	900e      	str	r0, [sp, #56]	@ 0x38
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	f43f ae8a 	beq.w	800ee12 <_strtod_l+0x442>
 800f0fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f100:	9805      	ldr	r0, [sp, #20]
 800f102:	f7fe ffcb 	bl	800e09c <_Bfree>
 800f106:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f108:	931a      	str	r3, [sp, #104]	@ 0x68
 800f10a:	2d00      	cmp	r5, #0
 800f10c:	dc1d      	bgt.n	800f14a <_strtod_l+0x77a>
 800f10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f110:	2b00      	cmp	r3, #0
 800f112:	dd23      	ble.n	800f15c <_strtod_l+0x78c>
 800f114:	4649      	mov	r1, r9
 800f116:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f118:	9805      	ldr	r0, [sp, #20]
 800f11a:	f7ff f97f 	bl	800e41c <__pow5mult>
 800f11e:	4681      	mov	r9, r0
 800f120:	b9e0      	cbnz	r0, 800f15c <_strtod_l+0x78c>
 800f122:	f04f 0900 	mov.w	r9, #0
 800f126:	e674      	b.n	800ee12 <_strtod_l+0x442>
 800f128:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f12c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f12e:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f132:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f136:	35e2      	adds	r5, #226	@ 0xe2
 800f138:	fa01 f305 	lsl.w	r3, r1, r5
 800f13c:	9310      	str	r3, [sp, #64]	@ 0x40
 800f13e:	e7ba      	b.n	800f0b6 <_strtod_l+0x6e6>
 800f140:	2300      	movs	r3, #0
 800f142:	9310      	str	r3, [sp, #64]	@ 0x40
 800f144:	2301      	movs	r3, #1
 800f146:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f148:	e7b5      	b.n	800f0b6 <_strtod_l+0x6e6>
 800f14a:	462a      	mov	r2, r5
 800f14c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f14e:	9805      	ldr	r0, [sp, #20]
 800f150:	f7ff f9be 	bl	800e4d0 <__lshift>
 800f154:	901a      	str	r0, [sp, #104]	@ 0x68
 800f156:	2800      	cmp	r0, #0
 800f158:	d1d9      	bne.n	800f10e <_strtod_l+0x73e>
 800f15a:	e65a      	b.n	800ee12 <_strtod_l+0x442>
 800f15c:	2e00      	cmp	r6, #0
 800f15e:	dd07      	ble.n	800f170 <_strtod_l+0x7a0>
 800f160:	4649      	mov	r1, r9
 800f162:	4632      	mov	r2, r6
 800f164:	9805      	ldr	r0, [sp, #20]
 800f166:	f7ff f9b3 	bl	800e4d0 <__lshift>
 800f16a:	4681      	mov	r9, r0
 800f16c:	2800      	cmp	r0, #0
 800f16e:	d0d8      	beq.n	800f122 <_strtod_l+0x752>
 800f170:	2f00      	cmp	r7, #0
 800f172:	dd08      	ble.n	800f186 <_strtod_l+0x7b6>
 800f174:	4641      	mov	r1, r8
 800f176:	463a      	mov	r2, r7
 800f178:	9805      	ldr	r0, [sp, #20]
 800f17a:	f7ff f9a9 	bl	800e4d0 <__lshift>
 800f17e:	4680      	mov	r8, r0
 800f180:	2800      	cmp	r0, #0
 800f182:	f43f ae46 	beq.w	800ee12 <_strtod_l+0x442>
 800f186:	464a      	mov	r2, r9
 800f188:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f18a:	9805      	ldr	r0, [sp, #20]
 800f18c:	f7ff fa28 	bl	800e5e0 <__mdiff>
 800f190:	4604      	mov	r4, r0
 800f192:	2800      	cmp	r0, #0
 800f194:	f43f ae3d 	beq.w	800ee12 <_strtod_l+0x442>
 800f198:	68c3      	ldr	r3, [r0, #12]
 800f19a:	4641      	mov	r1, r8
 800f19c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f19e:	2300      	movs	r3, #0
 800f1a0:	60c3      	str	r3, [r0, #12]
 800f1a2:	f7ff fa01 	bl	800e5a8 <__mcmp>
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	da46      	bge.n	800f238 <_strtod_l+0x868>
 800f1aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1ac:	ea53 030a 	orrs.w	r3, r3, sl
 800f1b0:	d16c      	bne.n	800f28c <_strtod_l+0x8bc>
 800f1b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d168      	bne.n	800f28c <_strtod_l+0x8bc>
 800f1ba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f1be:	0d1b      	lsrs	r3, r3, #20
 800f1c0:	051b      	lsls	r3, r3, #20
 800f1c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f1c6:	d961      	bls.n	800f28c <_strtod_l+0x8bc>
 800f1c8:	6963      	ldr	r3, [r4, #20]
 800f1ca:	b913      	cbnz	r3, 800f1d2 <_strtod_l+0x802>
 800f1cc:	6923      	ldr	r3, [r4, #16]
 800f1ce:	2b01      	cmp	r3, #1
 800f1d0:	dd5c      	ble.n	800f28c <_strtod_l+0x8bc>
 800f1d2:	4621      	mov	r1, r4
 800f1d4:	2201      	movs	r2, #1
 800f1d6:	9805      	ldr	r0, [sp, #20]
 800f1d8:	f7ff f97a 	bl	800e4d0 <__lshift>
 800f1dc:	4641      	mov	r1, r8
 800f1de:	4604      	mov	r4, r0
 800f1e0:	f7ff f9e2 	bl	800e5a8 <__mcmp>
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	dd51      	ble.n	800f28c <_strtod_l+0x8bc>
 800f1e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f1ec:	9a08      	ldr	r2, [sp, #32]
 800f1ee:	0d1b      	lsrs	r3, r3, #20
 800f1f0:	051b      	lsls	r3, r3, #20
 800f1f2:	2a00      	cmp	r2, #0
 800f1f4:	d06b      	beq.n	800f2ce <_strtod_l+0x8fe>
 800f1f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f1fa:	d868      	bhi.n	800f2ce <_strtod_l+0x8fe>
 800f1fc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f200:	f67f ae9d 	bls.w	800ef3e <_strtod_l+0x56e>
 800f204:	4b0a      	ldr	r3, [pc, #40]	@ (800f230 <_strtod_l+0x860>)
 800f206:	4650      	mov	r0, sl
 800f208:	4659      	mov	r1, fp
 800f20a:	2200      	movs	r2, #0
 800f20c:	f7f1 fa04 	bl	8000618 <__aeabi_dmul>
 800f210:	4b08      	ldr	r3, [pc, #32]	@ (800f234 <_strtod_l+0x864>)
 800f212:	4682      	mov	sl, r0
 800f214:	468b      	mov	fp, r1
 800f216:	400b      	ands	r3, r1
 800f218:	2b00      	cmp	r3, #0
 800f21a:	f47f ae05 	bne.w	800ee28 <_strtod_l+0x458>
 800f21e:	2322      	movs	r3, #34	@ 0x22
 800f220:	9a05      	ldr	r2, [sp, #20]
 800f222:	6013      	str	r3, [r2, #0]
 800f224:	e600      	b.n	800ee28 <_strtod_l+0x458>
 800f226:	bf00      	nop
 800f228:	08010ce8 	.word	0x08010ce8
 800f22c:	fffffc02 	.word	0xfffffc02
 800f230:	39500000 	.word	0x39500000
 800f234:	7ff00000 	.word	0x7ff00000
 800f238:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f23c:	d165      	bne.n	800f30a <_strtod_l+0x93a>
 800f23e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f240:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f244:	b35a      	cbz	r2, 800f29e <_strtod_l+0x8ce>
 800f246:	4a9e      	ldr	r2, [pc, #632]	@ (800f4c0 <_strtod_l+0xaf0>)
 800f248:	4293      	cmp	r3, r2
 800f24a:	d12b      	bne.n	800f2a4 <_strtod_l+0x8d4>
 800f24c:	9b08      	ldr	r3, [sp, #32]
 800f24e:	4651      	mov	r1, sl
 800f250:	b303      	cbz	r3, 800f294 <_strtod_l+0x8c4>
 800f252:	465a      	mov	r2, fp
 800f254:	4b9b      	ldr	r3, [pc, #620]	@ (800f4c4 <_strtod_l+0xaf4>)
 800f256:	4013      	ands	r3, r2
 800f258:	f04f 32ff 	mov.w	r2, #4294967295
 800f25c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f260:	d81b      	bhi.n	800f29a <_strtod_l+0x8ca>
 800f262:	0d1b      	lsrs	r3, r3, #20
 800f264:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f268:	fa02 f303 	lsl.w	r3, r2, r3
 800f26c:	4299      	cmp	r1, r3
 800f26e:	d119      	bne.n	800f2a4 <_strtod_l+0x8d4>
 800f270:	4b95      	ldr	r3, [pc, #596]	@ (800f4c8 <_strtod_l+0xaf8>)
 800f272:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f274:	429a      	cmp	r2, r3
 800f276:	d102      	bne.n	800f27e <_strtod_l+0x8ae>
 800f278:	3101      	adds	r1, #1
 800f27a:	f43f adca 	beq.w	800ee12 <_strtod_l+0x442>
 800f27e:	4b91      	ldr	r3, [pc, #580]	@ (800f4c4 <_strtod_l+0xaf4>)
 800f280:	f04f 0a00 	mov.w	sl, #0
 800f284:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f286:	401a      	ands	r2, r3
 800f288:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f28c:	9b08      	ldr	r3, [sp, #32]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d1b8      	bne.n	800f204 <_strtod_l+0x834>
 800f292:	e5c9      	b.n	800ee28 <_strtod_l+0x458>
 800f294:	f04f 33ff 	mov.w	r3, #4294967295
 800f298:	e7e8      	b.n	800f26c <_strtod_l+0x89c>
 800f29a:	4613      	mov	r3, r2
 800f29c:	e7e6      	b.n	800f26c <_strtod_l+0x89c>
 800f29e:	ea53 030a 	orrs.w	r3, r3, sl
 800f2a2:	d0a1      	beq.n	800f1e8 <_strtod_l+0x818>
 800f2a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f2a6:	b1db      	cbz	r3, 800f2e0 <_strtod_l+0x910>
 800f2a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f2aa:	4213      	tst	r3, r2
 800f2ac:	d0ee      	beq.n	800f28c <_strtod_l+0x8bc>
 800f2ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2b0:	4650      	mov	r0, sl
 800f2b2:	9a08      	ldr	r2, [sp, #32]
 800f2b4:	4659      	mov	r1, fp
 800f2b6:	b1bb      	cbz	r3, 800f2e8 <_strtod_l+0x918>
 800f2b8:	f7ff fb6c 	bl	800e994 <sulp>
 800f2bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2c0:	ec53 2b10 	vmov	r2, r3, d0
 800f2c4:	f7f0 fff2 	bl	80002ac <__adddf3>
 800f2c8:	4682      	mov	sl, r0
 800f2ca:	468b      	mov	fp, r1
 800f2cc:	e7de      	b.n	800f28c <_strtod_l+0x8bc>
 800f2ce:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f2d2:	f04f 3aff 	mov.w	sl, #4294967295
 800f2d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f2da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f2de:	e7d5      	b.n	800f28c <_strtod_l+0x8bc>
 800f2e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f2e2:	ea13 0f0a 	tst.w	r3, sl
 800f2e6:	e7e1      	b.n	800f2ac <_strtod_l+0x8dc>
 800f2e8:	f7ff fb54 	bl	800e994 <sulp>
 800f2ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2f0:	ec53 2b10 	vmov	r2, r3, d0
 800f2f4:	f7f0 ffd8 	bl	80002a8 <__aeabi_dsub>
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	4682      	mov	sl, r0
 800f2fe:	468b      	mov	fp, r1
 800f300:	f7f1 fbf2 	bl	8000ae8 <__aeabi_dcmpeq>
 800f304:	2800      	cmp	r0, #0
 800f306:	d0c1      	beq.n	800f28c <_strtod_l+0x8bc>
 800f308:	e619      	b.n	800ef3e <_strtod_l+0x56e>
 800f30a:	4641      	mov	r1, r8
 800f30c:	4620      	mov	r0, r4
 800f30e:	f7ff facb 	bl	800e8a8 <__ratio>
 800f312:	2200      	movs	r2, #0
 800f314:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f318:	ec57 6b10 	vmov	r6, r7, d0
 800f31c:	4630      	mov	r0, r6
 800f31e:	4639      	mov	r1, r7
 800f320:	f7f1 fbf6 	bl	8000b10 <__aeabi_dcmple>
 800f324:	2800      	cmp	r0, #0
 800f326:	d06f      	beq.n	800f408 <_strtod_l+0xa38>
 800f328:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d17a      	bne.n	800f424 <_strtod_l+0xa54>
 800f32e:	f1ba 0f00 	cmp.w	sl, #0
 800f332:	d158      	bne.n	800f3e6 <_strtod_l+0xa16>
 800f334:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d15a      	bne.n	800f3f4 <_strtod_l+0xa24>
 800f33e:	2200      	movs	r2, #0
 800f340:	4b62      	ldr	r3, [pc, #392]	@ (800f4cc <_strtod_l+0xafc>)
 800f342:	4630      	mov	r0, r6
 800f344:	4639      	mov	r1, r7
 800f346:	f7f1 fbd9 	bl	8000afc <__aeabi_dcmplt>
 800f34a:	2800      	cmp	r0, #0
 800f34c:	d159      	bne.n	800f402 <_strtod_l+0xa32>
 800f34e:	4630      	mov	r0, r6
 800f350:	4639      	mov	r1, r7
 800f352:	2200      	movs	r2, #0
 800f354:	4b5e      	ldr	r3, [pc, #376]	@ (800f4d0 <_strtod_l+0xb00>)
 800f356:	f7f1 f95f 	bl	8000618 <__aeabi_dmul>
 800f35a:	4606      	mov	r6, r0
 800f35c:	460f      	mov	r7, r1
 800f35e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f362:	9606      	str	r6, [sp, #24]
 800f364:	9307      	str	r3, [sp, #28]
 800f366:	4d57      	ldr	r5, [pc, #348]	@ (800f4c4 <_strtod_l+0xaf4>)
 800f368:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f36c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f370:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f372:	401d      	ands	r5, r3
 800f374:	4b57      	ldr	r3, [pc, #348]	@ (800f4d4 <_strtod_l+0xb04>)
 800f376:	429d      	cmp	r5, r3
 800f378:	f040 80b0 	bne.w	800f4dc <_strtod_l+0xb0c>
 800f37c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f37e:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f382:	ec4b ab10 	vmov	d0, sl, fp
 800f386:	f7ff f9c3 	bl	800e710 <__ulp>
 800f38a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f38e:	ec51 0b10 	vmov	r0, r1, d0
 800f392:	f7f1 f941 	bl	8000618 <__aeabi_dmul>
 800f396:	4652      	mov	r2, sl
 800f398:	465b      	mov	r3, fp
 800f39a:	f7f0 ff87 	bl	80002ac <__adddf3>
 800f39e:	460b      	mov	r3, r1
 800f3a0:	4948      	ldr	r1, [pc, #288]	@ (800f4c4 <_strtod_l+0xaf4>)
 800f3a2:	4682      	mov	sl, r0
 800f3a4:	4a4c      	ldr	r2, [pc, #304]	@ (800f4d8 <_strtod_l+0xb08>)
 800f3a6:	4019      	ands	r1, r3
 800f3a8:	4291      	cmp	r1, r2
 800f3aa:	d942      	bls.n	800f432 <_strtod_l+0xa62>
 800f3ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f3ae:	4b46      	ldr	r3, [pc, #280]	@ (800f4c8 <_strtod_l+0xaf8>)
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d103      	bne.n	800f3bc <_strtod_l+0x9ec>
 800f3b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	f43f ad2b 	beq.w	800ee12 <_strtod_l+0x442>
 800f3bc:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800f4c8 <_strtod_l+0xaf8>
 800f3c0:	f04f 3aff 	mov.w	sl, #4294967295
 800f3c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f3c6:	9805      	ldr	r0, [sp, #20]
 800f3c8:	f7fe fe68 	bl	800e09c <_Bfree>
 800f3cc:	4649      	mov	r1, r9
 800f3ce:	9805      	ldr	r0, [sp, #20]
 800f3d0:	f7fe fe64 	bl	800e09c <_Bfree>
 800f3d4:	4641      	mov	r1, r8
 800f3d6:	9805      	ldr	r0, [sp, #20]
 800f3d8:	f7fe fe60 	bl	800e09c <_Bfree>
 800f3dc:	4621      	mov	r1, r4
 800f3de:	9805      	ldr	r0, [sp, #20]
 800f3e0:	f7fe fe5c 	bl	800e09c <_Bfree>
 800f3e4:	e618      	b.n	800f018 <_strtod_l+0x648>
 800f3e6:	f1ba 0f01 	cmp.w	sl, #1
 800f3ea:	d103      	bne.n	800f3f4 <_strtod_l+0xa24>
 800f3ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f43f ada5 	beq.w	800ef3e <_strtod_l+0x56e>
 800f3f4:	2600      	movs	r6, #0
 800f3f6:	4f35      	ldr	r7, [pc, #212]	@ (800f4cc <_strtod_l+0xafc>)
 800f3f8:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800f4a0 <_strtod_l+0xad0>
 800f3fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f400:	e7b1      	b.n	800f366 <_strtod_l+0x996>
 800f402:	2600      	movs	r6, #0
 800f404:	4f32      	ldr	r7, [pc, #200]	@ (800f4d0 <_strtod_l+0xb00>)
 800f406:	e7aa      	b.n	800f35e <_strtod_l+0x98e>
 800f408:	4b31      	ldr	r3, [pc, #196]	@ (800f4d0 <_strtod_l+0xb00>)
 800f40a:	4630      	mov	r0, r6
 800f40c:	4639      	mov	r1, r7
 800f40e:	2200      	movs	r2, #0
 800f410:	f7f1 f902 	bl	8000618 <__aeabi_dmul>
 800f414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f416:	4606      	mov	r6, r0
 800f418:	460f      	mov	r7, r1
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d09f      	beq.n	800f35e <_strtod_l+0x98e>
 800f41e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f422:	e7a0      	b.n	800f366 <_strtod_l+0x996>
 800f424:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800f4a8 <_strtod_l+0xad8>
 800f428:	ec57 6b17 	vmov	r6, r7, d7
 800f42c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f430:	e799      	b.n	800f366 <_strtod_l+0x996>
 800f432:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f436:	9b08      	ldr	r3, [sp, #32]
 800f438:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d1c1      	bne.n	800f3c4 <_strtod_l+0x9f4>
 800f440:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f444:	0d1b      	lsrs	r3, r3, #20
 800f446:	051b      	lsls	r3, r3, #20
 800f448:	429d      	cmp	r5, r3
 800f44a:	d1bb      	bne.n	800f3c4 <_strtod_l+0x9f4>
 800f44c:	4630      	mov	r0, r6
 800f44e:	4639      	mov	r1, r7
 800f450:	f7f1 fc42 	bl	8000cd8 <__aeabi_d2lz>
 800f454:	f7f1 f8b2 	bl	80005bc <__aeabi_l2d>
 800f458:	4602      	mov	r2, r0
 800f45a:	460b      	mov	r3, r1
 800f45c:	4630      	mov	r0, r6
 800f45e:	4639      	mov	r1, r7
 800f460:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f464:	f7f0 ff20 	bl	80002a8 <__aeabi_dsub>
 800f468:	460b      	mov	r3, r1
 800f46a:	4602      	mov	r2, r0
 800f46c:	ea46 060a 	orr.w	r6, r6, sl
 800f470:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f476:	431e      	orrs	r6, r3
 800f478:	d06d      	beq.n	800f556 <_strtod_l+0xb86>
 800f47a:	a30d      	add	r3, pc, #52	@ (adr r3, 800f4b0 <_strtod_l+0xae0>)
 800f47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f480:	f7f1 fb3c 	bl	8000afc <__aeabi_dcmplt>
 800f484:	2800      	cmp	r0, #0
 800f486:	f47f accf 	bne.w	800ee28 <_strtod_l+0x458>
 800f48a:	a30b      	add	r3, pc, #44	@ (adr r3, 800f4b8 <_strtod_l+0xae8>)
 800f48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f494:	f7f1 fb50 	bl	8000b38 <__aeabi_dcmpgt>
 800f498:	2800      	cmp	r0, #0
 800f49a:	d093      	beq.n	800f3c4 <_strtod_l+0x9f4>
 800f49c:	e4c4      	b.n	800ee28 <_strtod_l+0x458>
 800f49e:	bf00      	nop
 800f4a0:	00000000 	.word	0x00000000
 800f4a4:	bff00000 	.word	0xbff00000
 800f4a8:	00000000 	.word	0x00000000
 800f4ac:	3ff00000 	.word	0x3ff00000
 800f4b0:	94a03595 	.word	0x94a03595
 800f4b4:	3fdfffff 	.word	0x3fdfffff
 800f4b8:	35afe535 	.word	0x35afe535
 800f4bc:	3fe00000 	.word	0x3fe00000
 800f4c0:	000fffff 	.word	0x000fffff
 800f4c4:	7ff00000 	.word	0x7ff00000
 800f4c8:	7fefffff 	.word	0x7fefffff
 800f4cc:	3ff00000 	.word	0x3ff00000
 800f4d0:	3fe00000 	.word	0x3fe00000
 800f4d4:	7fe00000 	.word	0x7fe00000
 800f4d8:	7c9fffff 	.word	0x7c9fffff
 800f4dc:	9b08      	ldr	r3, [sp, #32]
 800f4de:	b323      	cbz	r3, 800f52a <_strtod_l+0xb5a>
 800f4e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f4e4:	d821      	bhi.n	800f52a <_strtod_l+0xb5a>
 800f4e6:	4630      	mov	r0, r6
 800f4e8:	4639      	mov	r1, r7
 800f4ea:	a327      	add	r3, pc, #156	@ (adr r3, 800f588 <_strtod_l+0xbb8>)
 800f4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f0:	f7f1 fb0e 	bl	8000b10 <__aeabi_dcmple>
 800f4f4:	b1a0      	cbz	r0, 800f520 <_strtod_l+0xb50>
 800f4f6:	4639      	mov	r1, r7
 800f4f8:	4630      	mov	r0, r6
 800f4fa:	f7f1 fb65 	bl	8000bc8 <__aeabi_d2uiz>
 800f4fe:	2801      	cmp	r0, #1
 800f500:	bf38      	it	cc
 800f502:	2001      	movcc	r0, #1
 800f504:	f7f1 f80e 	bl	8000524 <__aeabi_ui2d>
 800f508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f50a:	4606      	mov	r6, r0
 800f50c:	460f      	mov	r7, r1
 800f50e:	b9fb      	cbnz	r3, 800f550 <_strtod_l+0xb80>
 800f510:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f514:	9014      	str	r0, [sp, #80]	@ 0x50
 800f516:	9315      	str	r3, [sp, #84]	@ 0x54
 800f518:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f51c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f520:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f522:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f526:	1b5b      	subs	r3, r3, r5
 800f528:	9311      	str	r3, [sp, #68]	@ 0x44
 800f52a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f52e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f532:	f7ff f8ed 	bl	800e710 <__ulp>
 800f536:	4650      	mov	r0, sl
 800f538:	4659      	mov	r1, fp
 800f53a:	ec53 2b10 	vmov	r2, r3, d0
 800f53e:	f7f1 f86b 	bl	8000618 <__aeabi_dmul>
 800f542:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f546:	f7f0 feb1 	bl	80002ac <__adddf3>
 800f54a:	4682      	mov	sl, r0
 800f54c:	468b      	mov	fp, r1
 800f54e:	e772      	b.n	800f436 <_strtod_l+0xa66>
 800f550:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f554:	e7e0      	b.n	800f518 <_strtod_l+0xb48>
 800f556:	a30e      	add	r3, pc, #56	@ (adr r3, 800f590 <_strtod_l+0xbc0>)
 800f558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55c:	f7f1 face 	bl	8000afc <__aeabi_dcmplt>
 800f560:	e79a      	b.n	800f498 <_strtod_l+0xac8>
 800f562:	2300      	movs	r3, #0
 800f564:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f566:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f568:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f56a:	6013      	str	r3, [r2, #0]
 800f56c:	f7ff ba6d 	b.w	800ea4a <_strtod_l+0x7a>
 800f570:	2a65      	cmp	r2, #101	@ 0x65
 800f572:	f43f ab67 	beq.w	800ec44 <_strtod_l+0x274>
 800f576:	2a45      	cmp	r2, #69	@ 0x45
 800f578:	f43f ab64 	beq.w	800ec44 <_strtod_l+0x274>
 800f57c:	2301      	movs	r3, #1
 800f57e:	f7ff bba0 	b.w	800ecc2 <_strtod_l+0x2f2>
 800f582:	bf00      	nop
 800f584:	f3af 8000 	nop.w
 800f588:	ffc00000 	.word	0xffc00000
 800f58c:	41dfffff 	.word	0x41dfffff
 800f590:	94a03595 	.word	0x94a03595
 800f594:	3fcfffff 	.word	0x3fcfffff

0800f598 <_strtod_r>:
 800f598:	4b01      	ldr	r3, [pc, #4]	@ (800f5a0 <_strtod_r+0x8>)
 800f59a:	f7ff ba19 	b.w	800e9d0 <_strtod_l>
 800f59e:	bf00      	nop
 800f5a0:	200000dc 	.word	0x200000dc

0800f5a4 <_strtol_l.constprop.0>:
 800f5a4:	2b24      	cmp	r3, #36	@ 0x24
 800f5a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5aa:	4686      	mov	lr, r0
 800f5ac:	4690      	mov	r8, r2
 800f5ae:	d801      	bhi.n	800f5b4 <_strtol_l.constprop.0+0x10>
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d106      	bne.n	800f5c2 <_strtol_l.constprop.0+0x1e>
 800f5b4:	f7fd fe48 	bl	800d248 <__errno>
 800f5b8:	2316      	movs	r3, #22
 800f5ba:	6003      	str	r3, [r0, #0]
 800f5bc:	2000      	movs	r0, #0
 800f5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5c2:	460d      	mov	r5, r1
 800f5c4:	4833      	ldr	r0, [pc, #204]	@ (800f694 <_strtol_l.constprop.0+0xf0>)
 800f5c6:	462a      	mov	r2, r5
 800f5c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f5cc:	5d06      	ldrb	r6, [r0, r4]
 800f5ce:	f016 0608 	ands.w	r6, r6, #8
 800f5d2:	d1f8      	bne.n	800f5c6 <_strtol_l.constprop.0+0x22>
 800f5d4:	2c2d      	cmp	r4, #45	@ 0x2d
 800f5d6:	d12d      	bne.n	800f634 <_strtol_l.constprop.0+0x90>
 800f5d8:	782c      	ldrb	r4, [r5, #0]
 800f5da:	2601      	movs	r6, #1
 800f5dc:	1c95      	adds	r5, r2, #2
 800f5de:	f033 0210 	bics.w	r2, r3, #16
 800f5e2:	d109      	bne.n	800f5f8 <_strtol_l.constprop.0+0x54>
 800f5e4:	2c30      	cmp	r4, #48	@ 0x30
 800f5e6:	d12a      	bne.n	800f63e <_strtol_l.constprop.0+0x9a>
 800f5e8:	782a      	ldrb	r2, [r5, #0]
 800f5ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f5ee:	2a58      	cmp	r2, #88	@ 0x58
 800f5f0:	d125      	bne.n	800f63e <_strtol_l.constprop.0+0x9a>
 800f5f2:	786c      	ldrb	r4, [r5, #1]
 800f5f4:	2310      	movs	r3, #16
 800f5f6:	3502      	adds	r5, #2
 800f5f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f602:	4610      	mov	r0, r2
 800f604:	fbbc f9f3 	udiv	r9, ip, r3
 800f608:	fb03 ca19 	mls	sl, r3, r9, ip
 800f60c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f610:	2f09      	cmp	r7, #9
 800f612:	d81b      	bhi.n	800f64c <_strtol_l.constprop.0+0xa8>
 800f614:	463c      	mov	r4, r7
 800f616:	42a3      	cmp	r3, r4
 800f618:	dd27      	ble.n	800f66a <_strtol_l.constprop.0+0xc6>
 800f61a:	1c57      	adds	r7, r2, #1
 800f61c:	d007      	beq.n	800f62e <_strtol_l.constprop.0+0x8a>
 800f61e:	4581      	cmp	r9, r0
 800f620:	d320      	bcc.n	800f664 <_strtol_l.constprop.0+0xc0>
 800f622:	d101      	bne.n	800f628 <_strtol_l.constprop.0+0x84>
 800f624:	45a2      	cmp	sl, r4
 800f626:	db1d      	blt.n	800f664 <_strtol_l.constprop.0+0xc0>
 800f628:	fb00 4003 	mla	r0, r0, r3, r4
 800f62c:	2201      	movs	r2, #1
 800f62e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f632:	e7eb      	b.n	800f60c <_strtol_l.constprop.0+0x68>
 800f634:	2c2b      	cmp	r4, #43	@ 0x2b
 800f636:	bf04      	itt	eq
 800f638:	782c      	ldrbeq	r4, [r5, #0]
 800f63a:	1c95      	addeq	r5, r2, #2
 800f63c:	e7cf      	b.n	800f5de <_strtol_l.constprop.0+0x3a>
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d1da      	bne.n	800f5f8 <_strtol_l.constprop.0+0x54>
 800f642:	2c30      	cmp	r4, #48	@ 0x30
 800f644:	bf0c      	ite	eq
 800f646:	2308      	moveq	r3, #8
 800f648:	230a      	movne	r3, #10
 800f64a:	e7d5      	b.n	800f5f8 <_strtol_l.constprop.0+0x54>
 800f64c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f650:	2f19      	cmp	r7, #25
 800f652:	d801      	bhi.n	800f658 <_strtol_l.constprop.0+0xb4>
 800f654:	3c37      	subs	r4, #55	@ 0x37
 800f656:	e7de      	b.n	800f616 <_strtol_l.constprop.0+0x72>
 800f658:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f65c:	2f19      	cmp	r7, #25
 800f65e:	d804      	bhi.n	800f66a <_strtol_l.constprop.0+0xc6>
 800f660:	3c57      	subs	r4, #87	@ 0x57
 800f662:	e7d8      	b.n	800f616 <_strtol_l.constprop.0+0x72>
 800f664:	f04f 32ff 	mov.w	r2, #4294967295
 800f668:	e7e1      	b.n	800f62e <_strtol_l.constprop.0+0x8a>
 800f66a:	1c53      	adds	r3, r2, #1
 800f66c:	d108      	bne.n	800f680 <_strtol_l.constprop.0+0xdc>
 800f66e:	2322      	movs	r3, #34	@ 0x22
 800f670:	4660      	mov	r0, ip
 800f672:	f8ce 3000 	str.w	r3, [lr]
 800f676:	f1b8 0f00 	cmp.w	r8, #0
 800f67a:	d0a0      	beq.n	800f5be <_strtol_l.constprop.0+0x1a>
 800f67c:	1e69      	subs	r1, r5, #1
 800f67e:	e006      	b.n	800f68e <_strtol_l.constprop.0+0xea>
 800f680:	b106      	cbz	r6, 800f684 <_strtol_l.constprop.0+0xe0>
 800f682:	4240      	negs	r0, r0
 800f684:	f1b8 0f00 	cmp.w	r8, #0
 800f688:	d099      	beq.n	800f5be <_strtol_l.constprop.0+0x1a>
 800f68a:	2a00      	cmp	r2, #0
 800f68c:	d1f6      	bne.n	800f67c <_strtol_l.constprop.0+0xd8>
 800f68e:	f8c8 1000 	str.w	r1, [r8]
 800f692:	e794      	b.n	800f5be <_strtol_l.constprop.0+0x1a>
 800f694:	08010d11 	.word	0x08010d11

0800f698 <_strtol_r>:
 800f698:	f7ff bf84 	b.w	800f5a4 <_strtol_l.constprop.0>

0800f69c <__ssputs_r>:
 800f69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6a0:	461f      	mov	r7, r3
 800f6a2:	688e      	ldr	r6, [r1, #8]
 800f6a4:	4682      	mov	sl, r0
 800f6a6:	460c      	mov	r4, r1
 800f6a8:	42be      	cmp	r6, r7
 800f6aa:	4690      	mov	r8, r2
 800f6ac:	680b      	ldr	r3, [r1, #0]
 800f6ae:	d82d      	bhi.n	800f70c <__ssputs_r+0x70>
 800f6b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f6b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f6b8:	d026      	beq.n	800f708 <__ssputs_r+0x6c>
 800f6ba:	6965      	ldr	r5, [r4, #20]
 800f6bc:	6909      	ldr	r1, [r1, #16]
 800f6be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f6c2:	eba3 0901 	sub.w	r9, r3, r1
 800f6c6:	1c7b      	adds	r3, r7, #1
 800f6c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f6cc:	444b      	add	r3, r9
 800f6ce:	106d      	asrs	r5, r5, #1
 800f6d0:	429d      	cmp	r5, r3
 800f6d2:	bf38      	it	cc
 800f6d4:	461d      	movcc	r5, r3
 800f6d6:	0553      	lsls	r3, r2, #21
 800f6d8:	d527      	bpl.n	800f72a <__ssputs_r+0x8e>
 800f6da:	4629      	mov	r1, r5
 800f6dc:	f7fc fc20 	bl	800bf20 <_malloc_r>
 800f6e0:	4606      	mov	r6, r0
 800f6e2:	b360      	cbz	r0, 800f73e <__ssputs_r+0xa2>
 800f6e4:	464a      	mov	r2, r9
 800f6e6:	6921      	ldr	r1, [r4, #16]
 800f6e8:	f7fd fde9 	bl	800d2be <memcpy>
 800f6ec:	89a3      	ldrh	r3, [r4, #12]
 800f6ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f6f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f6f6:	81a3      	strh	r3, [r4, #12]
 800f6f8:	6126      	str	r6, [r4, #16]
 800f6fa:	444e      	add	r6, r9
 800f6fc:	6165      	str	r5, [r4, #20]
 800f6fe:	eba5 0509 	sub.w	r5, r5, r9
 800f702:	6026      	str	r6, [r4, #0]
 800f704:	463e      	mov	r6, r7
 800f706:	60a5      	str	r5, [r4, #8]
 800f708:	42be      	cmp	r6, r7
 800f70a:	d900      	bls.n	800f70e <__ssputs_r+0x72>
 800f70c:	463e      	mov	r6, r7
 800f70e:	4632      	mov	r2, r6
 800f710:	4641      	mov	r1, r8
 800f712:	6820      	ldr	r0, [r4, #0]
 800f714:	f000 fb69 	bl	800fdea <memmove>
 800f718:	68a3      	ldr	r3, [r4, #8]
 800f71a:	2000      	movs	r0, #0
 800f71c:	1b9b      	subs	r3, r3, r6
 800f71e:	60a3      	str	r3, [r4, #8]
 800f720:	6823      	ldr	r3, [r4, #0]
 800f722:	4433      	add	r3, r6
 800f724:	6023      	str	r3, [r4, #0]
 800f726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f72a:	462a      	mov	r2, r5
 800f72c:	f000 ff2d 	bl	801058a <_realloc_r>
 800f730:	4606      	mov	r6, r0
 800f732:	2800      	cmp	r0, #0
 800f734:	d1e0      	bne.n	800f6f8 <__ssputs_r+0x5c>
 800f736:	6921      	ldr	r1, [r4, #16]
 800f738:	4650      	mov	r0, sl
 800f73a:	f7fe fc25 	bl	800df88 <_free_r>
 800f73e:	230c      	movs	r3, #12
 800f740:	f04f 30ff 	mov.w	r0, #4294967295
 800f744:	f8ca 3000 	str.w	r3, [sl]
 800f748:	89a3      	ldrh	r3, [r4, #12]
 800f74a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f74e:	81a3      	strh	r3, [r4, #12]
 800f750:	e7e9      	b.n	800f726 <__ssputs_r+0x8a>
	...

0800f754 <_svfiprintf_r>:
 800f754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f758:	4698      	mov	r8, r3
 800f75a:	898b      	ldrh	r3, [r1, #12]
 800f75c:	b09d      	sub	sp, #116	@ 0x74
 800f75e:	4607      	mov	r7, r0
 800f760:	061b      	lsls	r3, r3, #24
 800f762:	460d      	mov	r5, r1
 800f764:	4614      	mov	r4, r2
 800f766:	d510      	bpl.n	800f78a <_svfiprintf_r+0x36>
 800f768:	690b      	ldr	r3, [r1, #16]
 800f76a:	b973      	cbnz	r3, 800f78a <_svfiprintf_r+0x36>
 800f76c:	2140      	movs	r1, #64	@ 0x40
 800f76e:	f7fc fbd7 	bl	800bf20 <_malloc_r>
 800f772:	6028      	str	r0, [r5, #0]
 800f774:	6128      	str	r0, [r5, #16]
 800f776:	b930      	cbnz	r0, 800f786 <_svfiprintf_r+0x32>
 800f778:	230c      	movs	r3, #12
 800f77a:	603b      	str	r3, [r7, #0]
 800f77c:	f04f 30ff 	mov.w	r0, #4294967295
 800f780:	b01d      	add	sp, #116	@ 0x74
 800f782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f786:	2340      	movs	r3, #64	@ 0x40
 800f788:	616b      	str	r3, [r5, #20]
 800f78a:	2300      	movs	r3, #0
 800f78c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f790:	f04f 0901 	mov.w	r9, #1
 800f794:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800f938 <_svfiprintf_r+0x1e4>
 800f798:	9309      	str	r3, [sp, #36]	@ 0x24
 800f79a:	2320      	movs	r3, #32
 800f79c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7a0:	2330      	movs	r3, #48	@ 0x30
 800f7a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7a6:	4623      	mov	r3, r4
 800f7a8:	469a      	mov	sl, r3
 800f7aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7ae:	b10a      	cbz	r2, 800f7b4 <_svfiprintf_r+0x60>
 800f7b0:	2a25      	cmp	r2, #37	@ 0x25
 800f7b2:	d1f9      	bne.n	800f7a8 <_svfiprintf_r+0x54>
 800f7b4:	ebba 0b04 	subs.w	fp, sl, r4
 800f7b8:	d00b      	beq.n	800f7d2 <_svfiprintf_r+0x7e>
 800f7ba:	465b      	mov	r3, fp
 800f7bc:	4622      	mov	r2, r4
 800f7be:	4629      	mov	r1, r5
 800f7c0:	4638      	mov	r0, r7
 800f7c2:	f7ff ff6b 	bl	800f69c <__ssputs_r>
 800f7c6:	3001      	adds	r0, #1
 800f7c8:	f000 80a7 	beq.w	800f91a <_svfiprintf_r+0x1c6>
 800f7cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7ce:	445a      	add	r2, fp
 800f7d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f7d2:	f89a 3000 	ldrb.w	r3, [sl]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	f000 809f 	beq.w	800f91a <_svfiprintf_r+0x1c6>
 800f7dc:	2300      	movs	r3, #0
 800f7de:	f04f 32ff 	mov.w	r2, #4294967295
 800f7e2:	f10a 0a01 	add.w	sl, sl, #1
 800f7e6:	9304      	str	r3, [sp, #16]
 800f7e8:	9307      	str	r3, [sp, #28]
 800f7ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f7ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800f7f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7f4:	4654      	mov	r4, sl
 800f7f6:	2205      	movs	r2, #5
 800f7f8:	484f      	ldr	r0, [pc, #316]	@ (800f938 <_svfiprintf_r+0x1e4>)
 800f7fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7fe:	f7fd fd50 	bl	800d2a2 <memchr>
 800f802:	9a04      	ldr	r2, [sp, #16]
 800f804:	b9d8      	cbnz	r0, 800f83e <_svfiprintf_r+0xea>
 800f806:	06d0      	lsls	r0, r2, #27
 800f808:	bf44      	itt	mi
 800f80a:	2320      	movmi	r3, #32
 800f80c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f810:	0711      	lsls	r1, r2, #28
 800f812:	bf44      	itt	mi
 800f814:	232b      	movmi	r3, #43	@ 0x2b
 800f816:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f81a:	f89a 3000 	ldrb.w	r3, [sl]
 800f81e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f820:	d015      	beq.n	800f84e <_svfiprintf_r+0xfa>
 800f822:	9a07      	ldr	r2, [sp, #28]
 800f824:	4654      	mov	r4, sl
 800f826:	2000      	movs	r0, #0
 800f828:	f04f 0c0a 	mov.w	ip, #10
 800f82c:	4621      	mov	r1, r4
 800f82e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f832:	3b30      	subs	r3, #48	@ 0x30
 800f834:	2b09      	cmp	r3, #9
 800f836:	d94b      	bls.n	800f8d0 <_svfiprintf_r+0x17c>
 800f838:	b1b0      	cbz	r0, 800f868 <_svfiprintf_r+0x114>
 800f83a:	9207      	str	r2, [sp, #28]
 800f83c:	e014      	b.n	800f868 <_svfiprintf_r+0x114>
 800f83e:	eba0 0308 	sub.w	r3, r0, r8
 800f842:	46a2      	mov	sl, r4
 800f844:	fa09 f303 	lsl.w	r3, r9, r3
 800f848:	4313      	orrs	r3, r2
 800f84a:	9304      	str	r3, [sp, #16]
 800f84c:	e7d2      	b.n	800f7f4 <_svfiprintf_r+0xa0>
 800f84e:	9b03      	ldr	r3, [sp, #12]
 800f850:	1d19      	adds	r1, r3, #4
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	9103      	str	r1, [sp, #12]
 800f858:	bfbb      	ittet	lt
 800f85a:	425b      	neglt	r3, r3
 800f85c:	f042 0202 	orrlt.w	r2, r2, #2
 800f860:	9307      	strge	r3, [sp, #28]
 800f862:	9307      	strlt	r3, [sp, #28]
 800f864:	bfb8      	it	lt
 800f866:	9204      	strlt	r2, [sp, #16]
 800f868:	7823      	ldrb	r3, [r4, #0]
 800f86a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f86c:	d10a      	bne.n	800f884 <_svfiprintf_r+0x130>
 800f86e:	7863      	ldrb	r3, [r4, #1]
 800f870:	2b2a      	cmp	r3, #42	@ 0x2a
 800f872:	d132      	bne.n	800f8da <_svfiprintf_r+0x186>
 800f874:	9b03      	ldr	r3, [sp, #12]
 800f876:	3402      	adds	r4, #2
 800f878:	1d1a      	adds	r2, r3, #4
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f880:	9203      	str	r2, [sp, #12]
 800f882:	9305      	str	r3, [sp, #20]
 800f884:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f948 <_svfiprintf_r+0x1f4>
 800f888:	2203      	movs	r2, #3
 800f88a:	7821      	ldrb	r1, [r4, #0]
 800f88c:	4650      	mov	r0, sl
 800f88e:	f7fd fd08 	bl	800d2a2 <memchr>
 800f892:	b138      	cbz	r0, 800f8a4 <_svfiprintf_r+0x150>
 800f894:	eba0 000a 	sub.w	r0, r0, sl
 800f898:	2240      	movs	r2, #64	@ 0x40
 800f89a:	9b04      	ldr	r3, [sp, #16]
 800f89c:	3401      	adds	r4, #1
 800f89e:	4082      	lsls	r2, r0
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	9304      	str	r3, [sp, #16]
 800f8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8a8:	2206      	movs	r2, #6
 800f8aa:	4824      	ldr	r0, [pc, #144]	@ (800f93c <_svfiprintf_r+0x1e8>)
 800f8ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f8b0:	f7fd fcf7 	bl	800d2a2 <memchr>
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	d036      	beq.n	800f926 <_svfiprintf_r+0x1d2>
 800f8b8:	4b21      	ldr	r3, [pc, #132]	@ (800f940 <_svfiprintf_r+0x1ec>)
 800f8ba:	bb1b      	cbnz	r3, 800f904 <_svfiprintf_r+0x1b0>
 800f8bc:	9b03      	ldr	r3, [sp, #12]
 800f8be:	3307      	adds	r3, #7
 800f8c0:	f023 0307 	bic.w	r3, r3, #7
 800f8c4:	3308      	adds	r3, #8
 800f8c6:	9303      	str	r3, [sp, #12]
 800f8c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8ca:	4433      	add	r3, r6
 800f8cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8ce:	e76a      	b.n	800f7a6 <_svfiprintf_r+0x52>
 800f8d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8d4:	460c      	mov	r4, r1
 800f8d6:	2001      	movs	r0, #1
 800f8d8:	e7a8      	b.n	800f82c <_svfiprintf_r+0xd8>
 800f8da:	2300      	movs	r3, #0
 800f8dc:	3401      	adds	r4, #1
 800f8de:	f04f 0c0a 	mov.w	ip, #10
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	9305      	str	r3, [sp, #20]
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8ec:	3a30      	subs	r2, #48	@ 0x30
 800f8ee:	2a09      	cmp	r2, #9
 800f8f0:	d903      	bls.n	800f8fa <_svfiprintf_r+0x1a6>
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d0c6      	beq.n	800f884 <_svfiprintf_r+0x130>
 800f8f6:	9105      	str	r1, [sp, #20]
 800f8f8:	e7c4      	b.n	800f884 <_svfiprintf_r+0x130>
 800f8fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8fe:	4604      	mov	r4, r0
 800f900:	2301      	movs	r3, #1
 800f902:	e7f0      	b.n	800f8e6 <_svfiprintf_r+0x192>
 800f904:	ab03      	add	r3, sp, #12
 800f906:	462a      	mov	r2, r5
 800f908:	a904      	add	r1, sp, #16
 800f90a:	4638      	mov	r0, r7
 800f90c:	9300      	str	r3, [sp, #0]
 800f90e:	4b0d      	ldr	r3, [pc, #52]	@ (800f944 <_svfiprintf_r+0x1f0>)
 800f910:	f7fc fc30 	bl	800c174 <_printf_float>
 800f914:	1c42      	adds	r2, r0, #1
 800f916:	4606      	mov	r6, r0
 800f918:	d1d6      	bne.n	800f8c8 <_svfiprintf_r+0x174>
 800f91a:	89ab      	ldrh	r3, [r5, #12]
 800f91c:	065b      	lsls	r3, r3, #25
 800f91e:	f53f af2d 	bmi.w	800f77c <_svfiprintf_r+0x28>
 800f922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f924:	e72c      	b.n	800f780 <_svfiprintf_r+0x2c>
 800f926:	ab03      	add	r3, sp, #12
 800f928:	462a      	mov	r2, r5
 800f92a:	a904      	add	r1, sp, #16
 800f92c:	4638      	mov	r0, r7
 800f92e:	9300      	str	r3, [sp, #0]
 800f930:	4b04      	ldr	r3, [pc, #16]	@ (800f944 <_svfiprintf_r+0x1f0>)
 800f932:	f7fc febb 	bl	800c6ac <_printf_i>
 800f936:	e7ed      	b.n	800f914 <_svfiprintf_r+0x1c0>
 800f938:	08010e11 	.word	0x08010e11
 800f93c:	08010e1b 	.word	0x08010e1b
 800f940:	0800c175 	.word	0x0800c175
 800f944:	0800f69d 	.word	0x0800f69d
 800f948:	08010e17 	.word	0x08010e17

0800f94c <__sfputc_r>:
 800f94c:	6893      	ldr	r3, [r2, #8]
 800f94e:	3b01      	subs	r3, #1
 800f950:	2b00      	cmp	r3, #0
 800f952:	6093      	str	r3, [r2, #8]
 800f954:	b410      	push	{r4}
 800f956:	da08      	bge.n	800f96a <__sfputc_r+0x1e>
 800f958:	6994      	ldr	r4, [r2, #24]
 800f95a:	42a3      	cmp	r3, r4
 800f95c:	db01      	blt.n	800f962 <__sfputc_r+0x16>
 800f95e:	290a      	cmp	r1, #10
 800f960:	d103      	bne.n	800f96a <__sfputc_r+0x1e>
 800f962:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f966:	f7fd bb68 	b.w	800d03a <__swbuf_r>
 800f96a:	6813      	ldr	r3, [r2, #0]
 800f96c:	1c58      	adds	r0, r3, #1
 800f96e:	6010      	str	r0, [r2, #0]
 800f970:	4608      	mov	r0, r1
 800f972:	7019      	strb	r1, [r3, #0]
 800f974:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f978:	4770      	bx	lr

0800f97a <__sfputs_r>:
 800f97a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f97c:	4606      	mov	r6, r0
 800f97e:	460f      	mov	r7, r1
 800f980:	4614      	mov	r4, r2
 800f982:	18d5      	adds	r5, r2, r3
 800f984:	42ac      	cmp	r4, r5
 800f986:	d101      	bne.n	800f98c <__sfputs_r+0x12>
 800f988:	2000      	movs	r0, #0
 800f98a:	e007      	b.n	800f99c <__sfputs_r+0x22>
 800f98c:	463a      	mov	r2, r7
 800f98e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f992:	4630      	mov	r0, r6
 800f994:	f7ff ffda 	bl	800f94c <__sfputc_r>
 800f998:	1c43      	adds	r3, r0, #1
 800f99a:	d1f3      	bne.n	800f984 <__sfputs_r+0xa>
 800f99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f9a0 <_vfiprintf_r>:
 800f9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a4:	460d      	mov	r5, r1
 800f9a6:	b09d      	sub	sp, #116	@ 0x74
 800f9a8:	4614      	mov	r4, r2
 800f9aa:	4698      	mov	r8, r3
 800f9ac:	4606      	mov	r6, r0
 800f9ae:	b118      	cbz	r0, 800f9b8 <_vfiprintf_r+0x18>
 800f9b0:	6a03      	ldr	r3, [r0, #32]
 800f9b2:	b90b      	cbnz	r3, 800f9b8 <_vfiprintf_r+0x18>
 800f9b4:	f7fd fa38 	bl	800ce28 <__sinit>
 800f9b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9ba:	07d9      	lsls	r1, r3, #31
 800f9bc:	d405      	bmi.n	800f9ca <_vfiprintf_r+0x2a>
 800f9be:	89ab      	ldrh	r3, [r5, #12]
 800f9c0:	059a      	lsls	r2, r3, #22
 800f9c2:	d402      	bmi.n	800f9ca <_vfiprintf_r+0x2a>
 800f9c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f9c6:	f7fd fc6a 	bl	800d29e <__retarget_lock_acquire_recursive>
 800f9ca:	89ab      	ldrh	r3, [r5, #12]
 800f9cc:	071b      	lsls	r3, r3, #28
 800f9ce:	d501      	bpl.n	800f9d4 <_vfiprintf_r+0x34>
 800f9d0:	692b      	ldr	r3, [r5, #16]
 800f9d2:	b99b      	cbnz	r3, 800f9fc <_vfiprintf_r+0x5c>
 800f9d4:	4629      	mov	r1, r5
 800f9d6:	4630      	mov	r0, r6
 800f9d8:	f7fd fb6e 	bl	800d0b8 <__swsetup_r>
 800f9dc:	b170      	cbz	r0, 800f9fc <_vfiprintf_r+0x5c>
 800f9de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9e0:	07dc      	lsls	r4, r3, #31
 800f9e2:	d504      	bpl.n	800f9ee <_vfiprintf_r+0x4e>
 800f9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9e8:	b01d      	add	sp, #116	@ 0x74
 800f9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ee:	89ab      	ldrh	r3, [r5, #12]
 800f9f0:	0598      	lsls	r0, r3, #22
 800f9f2:	d4f7      	bmi.n	800f9e4 <_vfiprintf_r+0x44>
 800f9f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f9f6:	f7fd fc53 	bl	800d2a0 <__retarget_lock_release_recursive>
 800f9fa:	e7f3      	b.n	800f9e4 <_vfiprintf_r+0x44>
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa02:	f04f 0901 	mov.w	r9, #1
 800fa06:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800fbbc <_vfiprintf_r+0x21c>
 800fa0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa0c:	2320      	movs	r3, #32
 800fa0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa12:	2330      	movs	r3, #48	@ 0x30
 800fa14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa18:	4623      	mov	r3, r4
 800fa1a:	469a      	mov	sl, r3
 800fa1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa20:	b10a      	cbz	r2, 800fa26 <_vfiprintf_r+0x86>
 800fa22:	2a25      	cmp	r2, #37	@ 0x25
 800fa24:	d1f9      	bne.n	800fa1a <_vfiprintf_r+0x7a>
 800fa26:	ebba 0b04 	subs.w	fp, sl, r4
 800fa2a:	d00b      	beq.n	800fa44 <_vfiprintf_r+0xa4>
 800fa2c:	465b      	mov	r3, fp
 800fa2e:	4622      	mov	r2, r4
 800fa30:	4629      	mov	r1, r5
 800fa32:	4630      	mov	r0, r6
 800fa34:	f7ff ffa1 	bl	800f97a <__sfputs_r>
 800fa38:	3001      	adds	r0, #1
 800fa3a:	f000 80a7 	beq.w	800fb8c <_vfiprintf_r+0x1ec>
 800fa3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa40:	445a      	add	r2, fp
 800fa42:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa44:	f89a 3000 	ldrb.w	r3, [sl]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f000 809f 	beq.w	800fb8c <_vfiprintf_r+0x1ec>
 800fa4e:	2300      	movs	r3, #0
 800fa50:	f04f 32ff 	mov.w	r2, #4294967295
 800fa54:	f10a 0a01 	add.w	sl, sl, #1
 800fa58:	9304      	str	r3, [sp, #16]
 800fa5a:	9307      	str	r3, [sp, #28]
 800fa5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa60:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa66:	4654      	mov	r4, sl
 800fa68:	2205      	movs	r2, #5
 800fa6a:	4854      	ldr	r0, [pc, #336]	@ (800fbbc <_vfiprintf_r+0x21c>)
 800fa6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa70:	f7fd fc17 	bl	800d2a2 <memchr>
 800fa74:	9a04      	ldr	r2, [sp, #16]
 800fa76:	b9d8      	cbnz	r0, 800fab0 <_vfiprintf_r+0x110>
 800fa78:	06d1      	lsls	r1, r2, #27
 800fa7a:	bf44      	itt	mi
 800fa7c:	2320      	movmi	r3, #32
 800fa7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa82:	0713      	lsls	r3, r2, #28
 800fa84:	bf44      	itt	mi
 800fa86:	232b      	movmi	r3, #43	@ 0x2b
 800fa88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa8c:	f89a 3000 	ldrb.w	r3, [sl]
 800fa90:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa92:	d015      	beq.n	800fac0 <_vfiprintf_r+0x120>
 800fa94:	9a07      	ldr	r2, [sp, #28]
 800fa96:	4654      	mov	r4, sl
 800fa98:	2000      	movs	r0, #0
 800fa9a:	f04f 0c0a 	mov.w	ip, #10
 800fa9e:	4621      	mov	r1, r4
 800faa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800faa4:	3b30      	subs	r3, #48	@ 0x30
 800faa6:	2b09      	cmp	r3, #9
 800faa8:	d94b      	bls.n	800fb42 <_vfiprintf_r+0x1a2>
 800faaa:	b1b0      	cbz	r0, 800fada <_vfiprintf_r+0x13a>
 800faac:	9207      	str	r2, [sp, #28]
 800faae:	e014      	b.n	800fada <_vfiprintf_r+0x13a>
 800fab0:	eba0 0308 	sub.w	r3, r0, r8
 800fab4:	46a2      	mov	sl, r4
 800fab6:	fa09 f303 	lsl.w	r3, r9, r3
 800faba:	4313      	orrs	r3, r2
 800fabc:	9304      	str	r3, [sp, #16]
 800fabe:	e7d2      	b.n	800fa66 <_vfiprintf_r+0xc6>
 800fac0:	9b03      	ldr	r3, [sp, #12]
 800fac2:	1d19      	adds	r1, r3, #4
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	9103      	str	r1, [sp, #12]
 800faca:	bfbb      	ittet	lt
 800facc:	425b      	neglt	r3, r3
 800face:	f042 0202 	orrlt.w	r2, r2, #2
 800fad2:	9307      	strge	r3, [sp, #28]
 800fad4:	9307      	strlt	r3, [sp, #28]
 800fad6:	bfb8      	it	lt
 800fad8:	9204      	strlt	r2, [sp, #16]
 800fada:	7823      	ldrb	r3, [r4, #0]
 800fadc:	2b2e      	cmp	r3, #46	@ 0x2e
 800fade:	d10a      	bne.n	800faf6 <_vfiprintf_r+0x156>
 800fae0:	7863      	ldrb	r3, [r4, #1]
 800fae2:	2b2a      	cmp	r3, #42	@ 0x2a
 800fae4:	d132      	bne.n	800fb4c <_vfiprintf_r+0x1ac>
 800fae6:	9b03      	ldr	r3, [sp, #12]
 800fae8:	3402      	adds	r4, #2
 800faea:	1d1a      	adds	r2, r3, #4
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800faf2:	9203      	str	r2, [sp, #12]
 800faf4:	9305      	str	r3, [sp, #20]
 800faf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fbcc <_vfiprintf_r+0x22c>
 800fafa:	2203      	movs	r2, #3
 800fafc:	7821      	ldrb	r1, [r4, #0]
 800fafe:	4650      	mov	r0, sl
 800fb00:	f7fd fbcf 	bl	800d2a2 <memchr>
 800fb04:	b138      	cbz	r0, 800fb16 <_vfiprintf_r+0x176>
 800fb06:	eba0 000a 	sub.w	r0, r0, sl
 800fb0a:	2240      	movs	r2, #64	@ 0x40
 800fb0c:	9b04      	ldr	r3, [sp, #16]
 800fb0e:	3401      	adds	r4, #1
 800fb10:	4082      	lsls	r2, r0
 800fb12:	4313      	orrs	r3, r2
 800fb14:	9304      	str	r3, [sp, #16]
 800fb16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb1a:	2206      	movs	r2, #6
 800fb1c:	4828      	ldr	r0, [pc, #160]	@ (800fbc0 <_vfiprintf_r+0x220>)
 800fb1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb22:	f7fd fbbe 	bl	800d2a2 <memchr>
 800fb26:	2800      	cmp	r0, #0
 800fb28:	d03f      	beq.n	800fbaa <_vfiprintf_r+0x20a>
 800fb2a:	4b26      	ldr	r3, [pc, #152]	@ (800fbc4 <_vfiprintf_r+0x224>)
 800fb2c:	bb1b      	cbnz	r3, 800fb76 <_vfiprintf_r+0x1d6>
 800fb2e:	9b03      	ldr	r3, [sp, #12]
 800fb30:	3307      	adds	r3, #7
 800fb32:	f023 0307 	bic.w	r3, r3, #7
 800fb36:	3308      	adds	r3, #8
 800fb38:	9303      	str	r3, [sp, #12]
 800fb3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb3c:	443b      	add	r3, r7
 800fb3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb40:	e76a      	b.n	800fa18 <_vfiprintf_r+0x78>
 800fb42:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb46:	460c      	mov	r4, r1
 800fb48:	2001      	movs	r0, #1
 800fb4a:	e7a8      	b.n	800fa9e <_vfiprintf_r+0xfe>
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	3401      	adds	r4, #1
 800fb50:	f04f 0c0a 	mov.w	ip, #10
 800fb54:	4619      	mov	r1, r3
 800fb56:	9305      	str	r3, [sp, #20]
 800fb58:	4620      	mov	r0, r4
 800fb5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb5e:	3a30      	subs	r2, #48	@ 0x30
 800fb60:	2a09      	cmp	r2, #9
 800fb62:	d903      	bls.n	800fb6c <_vfiprintf_r+0x1cc>
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d0c6      	beq.n	800faf6 <_vfiprintf_r+0x156>
 800fb68:	9105      	str	r1, [sp, #20]
 800fb6a:	e7c4      	b.n	800faf6 <_vfiprintf_r+0x156>
 800fb6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb70:	4604      	mov	r4, r0
 800fb72:	2301      	movs	r3, #1
 800fb74:	e7f0      	b.n	800fb58 <_vfiprintf_r+0x1b8>
 800fb76:	ab03      	add	r3, sp, #12
 800fb78:	462a      	mov	r2, r5
 800fb7a:	a904      	add	r1, sp, #16
 800fb7c:	4630      	mov	r0, r6
 800fb7e:	9300      	str	r3, [sp, #0]
 800fb80:	4b11      	ldr	r3, [pc, #68]	@ (800fbc8 <_vfiprintf_r+0x228>)
 800fb82:	f7fc faf7 	bl	800c174 <_printf_float>
 800fb86:	4607      	mov	r7, r0
 800fb88:	1c78      	adds	r0, r7, #1
 800fb8a:	d1d6      	bne.n	800fb3a <_vfiprintf_r+0x19a>
 800fb8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb8e:	07d9      	lsls	r1, r3, #31
 800fb90:	d405      	bmi.n	800fb9e <_vfiprintf_r+0x1fe>
 800fb92:	89ab      	ldrh	r3, [r5, #12]
 800fb94:	059a      	lsls	r2, r3, #22
 800fb96:	d402      	bmi.n	800fb9e <_vfiprintf_r+0x1fe>
 800fb98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb9a:	f7fd fb81 	bl	800d2a0 <__retarget_lock_release_recursive>
 800fb9e:	89ab      	ldrh	r3, [r5, #12]
 800fba0:	065b      	lsls	r3, r3, #25
 800fba2:	f53f af1f 	bmi.w	800f9e4 <_vfiprintf_r+0x44>
 800fba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fba8:	e71e      	b.n	800f9e8 <_vfiprintf_r+0x48>
 800fbaa:	ab03      	add	r3, sp, #12
 800fbac:	462a      	mov	r2, r5
 800fbae:	a904      	add	r1, sp, #16
 800fbb0:	4630      	mov	r0, r6
 800fbb2:	9300      	str	r3, [sp, #0]
 800fbb4:	4b04      	ldr	r3, [pc, #16]	@ (800fbc8 <_vfiprintf_r+0x228>)
 800fbb6:	f7fc fd79 	bl	800c6ac <_printf_i>
 800fbba:	e7e4      	b.n	800fb86 <_vfiprintf_r+0x1e6>
 800fbbc:	08010e11 	.word	0x08010e11
 800fbc0:	08010e1b 	.word	0x08010e1b
 800fbc4:	0800c175 	.word	0x0800c175
 800fbc8:	0800f97b 	.word	0x0800f97b
 800fbcc:	08010e17 	.word	0x08010e17

0800fbd0 <__sflush_r>:
 800fbd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd8:	0716      	lsls	r6, r2, #28
 800fbda:	4605      	mov	r5, r0
 800fbdc:	460c      	mov	r4, r1
 800fbde:	d454      	bmi.n	800fc8a <__sflush_r+0xba>
 800fbe0:	684b      	ldr	r3, [r1, #4]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	dc02      	bgt.n	800fbec <__sflush_r+0x1c>
 800fbe6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	dd48      	ble.n	800fc7e <__sflush_r+0xae>
 800fbec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fbee:	2e00      	cmp	r6, #0
 800fbf0:	d045      	beq.n	800fc7e <__sflush_r+0xae>
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fbf8:	682f      	ldr	r7, [r5, #0]
 800fbfa:	6a21      	ldr	r1, [r4, #32]
 800fbfc:	602b      	str	r3, [r5, #0]
 800fbfe:	d030      	beq.n	800fc62 <__sflush_r+0x92>
 800fc00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fc02:	89a3      	ldrh	r3, [r4, #12]
 800fc04:	0759      	lsls	r1, r3, #29
 800fc06:	d505      	bpl.n	800fc14 <__sflush_r+0x44>
 800fc08:	6863      	ldr	r3, [r4, #4]
 800fc0a:	1ad2      	subs	r2, r2, r3
 800fc0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fc0e:	b10b      	cbz	r3, 800fc14 <__sflush_r+0x44>
 800fc10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fc12:	1ad2      	subs	r2, r2, r3
 800fc14:	2300      	movs	r3, #0
 800fc16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fc18:	6a21      	ldr	r1, [r4, #32]
 800fc1a:	4628      	mov	r0, r5
 800fc1c:	47b0      	blx	r6
 800fc1e:	1c43      	adds	r3, r0, #1
 800fc20:	89a3      	ldrh	r3, [r4, #12]
 800fc22:	d106      	bne.n	800fc32 <__sflush_r+0x62>
 800fc24:	6829      	ldr	r1, [r5, #0]
 800fc26:	291d      	cmp	r1, #29
 800fc28:	d82b      	bhi.n	800fc82 <__sflush_r+0xb2>
 800fc2a:	4a2a      	ldr	r2, [pc, #168]	@ (800fcd4 <__sflush_r+0x104>)
 800fc2c:	410a      	asrs	r2, r1
 800fc2e:	07d6      	lsls	r6, r2, #31
 800fc30:	d427      	bmi.n	800fc82 <__sflush_r+0xb2>
 800fc32:	2200      	movs	r2, #0
 800fc34:	04d9      	lsls	r1, r3, #19
 800fc36:	6062      	str	r2, [r4, #4]
 800fc38:	6922      	ldr	r2, [r4, #16]
 800fc3a:	6022      	str	r2, [r4, #0]
 800fc3c:	d504      	bpl.n	800fc48 <__sflush_r+0x78>
 800fc3e:	1c42      	adds	r2, r0, #1
 800fc40:	d101      	bne.n	800fc46 <__sflush_r+0x76>
 800fc42:	682b      	ldr	r3, [r5, #0]
 800fc44:	b903      	cbnz	r3, 800fc48 <__sflush_r+0x78>
 800fc46:	6560      	str	r0, [r4, #84]	@ 0x54
 800fc48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fc4a:	602f      	str	r7, [r5, #0]
 800fc4c:	b1b9      	cbz	r1, 800fc7e <__sflush_r+0xae>
 800fc4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fc52:	4299      	cmp	r1, r3
 800fc54:	d002      	beq.n	800fc5c <__sflush_r+0x8c>
 800fc56:	4628      	mov	r0, r5
 800fc58:	f7fe f996 	bl	800df88 <_free_r>
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	6363      	str	r3, [r4, #52]	@ 0x34
 800fc60:	e00d      	b.n	800fc7e <__sflush_r+0xae>
 800fc62:	2301      	movs	r3, #1
 800fc64:	4628      	mov	r0, r5
 800fc66:	47b0      	blx	r6
 800fc68:	4602      	mov	r2, r0
 800fc6a:	1c50      	adds	r0, r2, #1
 800fc6c:	d1c9      	bne.n	800fc02 <__sflush_r+0x32>
 800fc6e:	682b      	ldr	r3, [r5, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d0c6      	beq.n	800fc02 <__sflush_r+0x32>
 800fc74:	2b1d      	cmp	r3, #29
 800fc76:	d001      	beq.n	800fc7c <__sflush_r+0xac>
 800fc78:	2b16      	cmp	r3, #22
 800fc7a:	d11d      	bne.n	800fcb8 <__sflush_r+0xe8>
 800fc7c:	602f      	str	r7, [r5, #0]
 800fc7e:	2000      	movs	r0, #0
 800fc80:	e021      	b.n	800fcc6 <__sflush_r+0xf6>
 800fc82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc86:	b21b      	sxth	r3, r3
 800fc88:	e01a      	b.n	800fcc0 <__sflush_r+0xf0>
 800fc8a:	690f      	ldr	r7, [r1, #16]
 800fc8c:	2f00      	cmp	r7, #0
 800fc8e:	d0f6      	beq.n	800fc7e <__sflush_r+0xae>
 800fc90:	0793      	lsls	r3, r2, #30
 800fc92:	680e      	ldr	r6, [r1, #0]
 800fc94:	600f      	str	r7, [r1, #0]
 800fc96:	bf0c      	ite	eq
 800fc98:	694b      	ldreq	r3, [r1, #20]
 800fc9a:	2300      	movne	r3, #0
 800fc9c:	eba6 0807 	sub.w	r8, r6, r7
 800fca0:	608b      	str	r3, [r1, #8]
 800fca2:	f1b8 0f00 	cmp.w	r8, #0
 800fca6:	ddea      	ble.n	800fc7e <__sflush_r+0xae>
 800fca8:	4643      	mov	r3, r8
 800fcaa:	463a      	mov	r2, r7
 800fcac:	6a21      	ldr	r1, [r4, #32]
 800fcae:	4628      	mov	r0, r5
 800fcb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fcb2:	47b0      	blx	r6
 800fcb4:	2800      	cmp	r0, #0
 800fcb6:	dc08      	bgt.n	800fcca <__sflush_r+0xfa>
 800fcb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc4:	81a3      	strh	r3, [r4, #12]
 800fcc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcca:	4407      	add	r7, r0
 800fccc:	eba8 0800 	sub.w	r8, r8, r0
 800fcd0:	e7e7      	b.n	800fca2 <__sflush_r+0xd2>
 800fcd2:	bf00      	nop
 800fcd4:	dfbffffe 	.word	0xdfbffffe

0800fcd8 <_fflush_r>:
 800fcd8:	b538      	push	{r3, r4, r5, lr}
 800fcda:	690b      	ldr	r3, [r1, #16]
 800fcdc:	4605      	mov	r5, r0
 800fcde:	460c      	mov	r4, r1
 800fce0:	b913      	cbnz	r3, 800fce8 <_fflush_r+0x10>
 800fce2:	2500      	movs	r5, #0
 800fce4:	4628      	mov	r0, r5
 800fce6:	bd38      	pop	{r3, r4, r5, pc}
 800fce8:	b118      	cbz	r0, 800fcf2 <_fflush_r+0x1a>
 800fcea:	6a03      	ldr	r3, [r0, #32]
 800fcec:	b90b      	cbnz	r3, 800fcf2 <_fflush_r+0x1a>
 800fcee:	f7fd f89b 	bl	800ce28 <__sinit>
 800fcf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d0f3      	beq.n	800fce2 <_fflush_r+0xa>
 800fcfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fcfc:	07d0      	lsls	r0, r2, #31
 800fcfe:	d404      	bmi.n	800fd0a <_fflush_r+0x32>
 800fd00:	0599      	lsls	r1, r3, #22
 800fd02:	d402      	bmi.n	800fd0a <_fflush_r+0x32>
 800fd04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd06:	f7fd faca 	bl	800d29e <__retarget_lock_acquire_recursive>
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	4621      	mov	r1, r4
 800fd0e:	f7ff ff5f 	bl	800fbd0 <__sflush_r>
 800fd12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fd14:	4605      	mov	r5, r0
 800fd16:	07da      	lsls	r2, r3, #31
 800fd18:	d4e4      	bmi.n	800fce4 <_fflush_r+0xc>
 800fd1a:	89a3      	ldrh	r3, [r4, #12]
 800fd1c:	059b      	lsls	r3, r3, #22
 800fd1e:	d4e1      	bmi.n	800fce4 <_fflush_r+0xc>
 800fd20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd22:	f7fd fabd 	bl	800d2a0 <__retarget_lock_release_recursive>
 800fd26:	e7dd      	b.n	800fce4 <_fflush_r+0xc>

0800fd28 <__swhatbuf_r>:
 800fd28:	b570      	push	{r4, r5, r6, lr}
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd30:	b096      	sub	sp, #88	@ 0x58
 800fd32:	4615      	mov	r5, r2
 800fd34:	2900      	cmp	r1, #0
 800fd36:	461e      	mov	r6, r3
 800fd38:	da0c      	bge.n	800fd54 <__swhatbuf_r+0x2c>
 800fd3a:	89a3      	ldrh	r3, [r4, #12]
 800fd3c:	2100      	movs	r1, #0
 800fd3e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fd42:	bf14      	ite	ne
 800fd44:	2340      	movne	r3, #64	@ 0x40
 800fd46:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fd4a:	2000      	movs	r0, #0
 800fd4c:	6031      	str	r1, [r6, #0]
 800fd4e:	602b      	str	r3, [r5, #0]
 800fd50:	b016      	add	sp, #88	@ 0x58
 800fd52:	bd70      	pop	{r4, r5, r6, pc}
 800fd54:	466a      	mov	r2, sp
 800fd56:	f000 f875 	bl	800fe44 <_fstat_r>
 800fd5a:	2800      	cmp	r0, #0
 800fd5c:	dbed      	blt.n	800fd3a <__swhatbuf_r+0x12>
 800fd5e:	9901      	ldr	r1, [sp, #4]
 800fd60:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fd64:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fd68:	4259      	negs	r1, r3
 800fd6a:	4159      	adcs	r1, r3
 800fd6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd70:	e7eb      	b.n	800fd4a <__swhatbuf_r+0x22>

0800fd72 <__smakebuf_r>:
 800fd72:	898b      	ldrh	r3, [r1, #12]
 800fd74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd76:	079d      	lsls	r5, r3, #30
 800fd78:	4606      	mov	r6, r0
 800fd7a:	460c      	mov	r4, r1
 800fd7c:	d507      	bpl.n	800fd8e <__smakebuf_r+0x1c>
 800fd7e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fd82:	6023      	str	r3, [r4, #0]
 800fd84:	6123      	str	r3, [r4, #16]
 800fd86:	2301      	movs	r3, #1
 800fd88:	6163      	str	r3, [r4, #20]
 800fd8a:	b003      	add	sp, #12
 800fd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd8e:	ab01      	add	r3, sp, #4
 800fd90:	466a      	mov	r2, sp
 800fd92:	f7ff ffc9 	bl	800fd28 <__swhatbuf_r>
 800fd96:	9f00      	ldr	r7, [sp, #0]
 800fd98:	4605      	mov	r5, r0
 800fd9a:	4630      	mov	r0, r6
 800fd9c:	4639      	mov	r1, r7
 800fd9e:	f7fc f8bf 	bl	800bf20 <_malloc_r>
 800fda2:	b948      	cbnz	r0, 800fdb8 <__smakebuf_r+0x46>
 800fda4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fda8:	059a      	lsls	r2, r3, #22
 800fdaa:	d4ee      	bmi.n	800fd8a <__smakebuf_r+0x18>
 800fdac:	f023 0303 	bic.w	r3, r3, #3
 800fdb0:	f043 0302 	orr.w	r3, r3, #2
 800fdb4:	81a3      	strh	r3, [r4, #12]
 800fdb6:	e7e2      	b.n	800fd7e <__smakebuf_r+0xc>
 800fdb8:	89a3      	ldrh	r3, [r4, #12]
 800fdba:	6020      	str	r0, [r4, #0]
 800fdbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fdc0:	81a3      	strh	r3, [r4, #12]
 800fdc2:	9b01      	ldr	r3, [sp, #4]
 800fdc4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fdc8:	b15b      	cbz	r3, 800fde2 <__smakebuf_r+0x70>
 800fdca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdce:	4630      	mov	r0, r6
 800fdd0:	f000 f84a 	bl	800fe68 <_isatty_r>
 800fdd4:	b128      	cbz	r0, 800fde2 <__smakebuf_r+0x70>
 800fdd6:	89a3      	ldrh	r3, [r4, #12]
 800fdd8:	f023 0303 	bic.w	r3, r3, #3
 800fddc:	f043 0301 	orr.w	r3, r3, #1
 800fde0:	81a3      	strh	r3, [r4, #12]
 800fde2:	89a3      	ldrh	r3, [r4, #12]
 800fde4:	431d      	orrs	r5, r3
 800fde6:	81a5      	strh	r5, [r4, #12]
 800fde8:	e7cf      	b.n	800fd8a <__smakebuf_r+0x18>

0800fdea <memmove>:
 800fdea:	4288      	cmp	r0, r1
 800fdec:	b510      	push	{r4, lr}
 800fdee:	eb01 0402 	add.w	r4, r1, r2
 800fdf2:	d902      	bls.n	800fdfa <memmove+0x10>
 800fdf4:	4284      	cmp	r4, r0
 800fdf6:	4623      	mov	r3, r4
 800fdf8:	d807      	bhi.n	800fe0a <memmove+0x20>
 800fdfa:	1e43      	subs	r3, r0, #1
 800fdfc:	42a1      	cmp	r1, r4
 800fdfe:	d008      	beq.n	800fe12 <memmove+0x28>
 800fe00:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe04:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe08:	e7f8      	b.n	800fdfc <memmove+0x12>
 800fe0a:	4402      	add	r2, r0
 800fe0c:	4601      	mov	r1, r0
 800fe0e:	428a      	cmp	r2, r1
 800fe10:	d100      	bne.n	800fe14 <memmove+0x2a>
 800fe12:	bd10      	pop	{r4, pc}
 800fe14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe18:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe1c:	e7f7      	b.n	800fe0e <memmove+0x24>

0800fe1e <strncmp>:
 800fe1e:	b510      	push	{r4, lr}
 800fe20:	b16a      	cbz	r2, 800fe3e <strncmp+0x20>
 800fe22:	3901      	subs	r1, #1
 800fe24:	1884      	adds	r4, r0, r2
 800fe26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe2a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d103      	bne.n	800fe3a <strncmp+0x1c>
 800fe32:	42a0      	cmp	r0, r4
 800fe34:	d001      	beq.n	800fe3a <strncmp+0x1c>
 800fe36:	2a00      	cmp	r2, #0
 800fe38:	d1f5      	bne.n	800fe26 <strncmp+0x8>
 800fe3a:	1ad0      	subs	r0, r2, r3
 800fe3c:	bd10      	pop	{r4, pc}
 800fe3e:	4610      	mov	r0, r2
 800fe40:	e7fc      	b.n	800fe3c <strncmp+0x1e>
	...

0800fe44 <_fstat_r>:
 800fe44:	b538      	push	{r3, r4, r5, lr}
 800fe46:	2300      	movs	r3, #0
 800fe48:	4d06      	ldr	r5, [pc, #24]	@ (800fe64 <_fstat_r+0x20>)
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	4608      	mov	r0, r1
 800fe4e:	4611      	mov	r1, r2
 800fe50:	602b      	str	r3, [r5, #0]
 800fe52:	f7f4 fc35 	bl	80046c0 <_fstat>
 800fe56:	1c43      	adds	r3, r0, #1
 800fe58:	d102      	bne.n	800fe60 <_fstat_r+0x1c>
 800fe5a:	682b      	ldr	r3, [r5, #0]
 800fe5c:	b103      	cbz	r3, 800fe60 <_fstat_r+0x1c>
 800fe5e:	6023      	str	r3, [r4, #0]
 800fe60:	bd38      	pop	{r3, r4, r5, pc}
 800fe62:	bf00      	nop
 800fe64:	2000070c 	.word	0x2000070c

0800fe68 <_isatty_r>:
 800fe68:	b538      	push	{r3, r4, r5, lr}
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	4d05      	ldr	r5, [pc, #20]	@ (800fe84 <_isatty_r+0x1c>)
 800fe6e:	4604      	mov	r4, r0
 800fe70:	4608      	mov	r0, r1
 800fe72:	602b      	str	r3, [r5, #0]
 800fe74:	f7f4 fc34 	bl	80046e0 <_isatty>
 800fe78:	1c43      	adds	r3, r0, #1
 800fe7a:	d102      	bne.n	800fe82 <_isatty_r+0x1a>
 800fe7c:	682b      	ldr	r3, [r5, #0]
 800fe7e:	b103      	cbz	r3, 800fe82 <_isatty_r+0x1a>
 800fe80:	6023      	str	r3, [r4, #0]
 800fe82:	bd38      	pop	{r3, r4, r5, pc}
 800fe84:	2000070c 	.word	0x2000070c

0800fe88 <nan>:
 800fe88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fe90 <nan+0x8>
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop
 800fe90:	00000000 	.word	0x00000000
 800fe94:	7ff80000 	.word	0x7ff80000

0800fe98 <__assert_func>:
 800fe98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe9a:	4614      	mov	r4, r2
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	4b09      	ldr	r3, [pc, #36]	@ (800fec4 <__assert_func+0x2c>)
 800fea0:	4605      	mov	r5, r0
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	68d8      	ldr	r0, [r3, #12]
 800fea6:	b954      	cbnz	r4, 800febe <__assert_func+0x26>
 800fea8:	4b07      	ldr	r3, [pc, #28]	@ (800fec8 <__assert_func+0x30>)
 800feaa:	461c      	mov	r4, r3
 800feac:	9100      	str	r1, [sp, #0]
 800feae:	4907      	ldr	r1, [pc, #28]	@ (800fecc <__assert_func+0x34>)
 800feb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800feb4:	462b      	mov	r3, r5
 800feb6:	f000 fba3 	bl	8010600 <fiprintf>
 800feba:	f000 fbb3 	bl	8010624 <abort>
 800febe:	4b04      	ldr	r3, [pc, #16]	@ (800fed0 <__assert_func+0x38>)
 800fec0:	e7f4      	b.n	800feac <__assert_func+0x14>
 800fec2:	bf00      	nop
 800fec4:	2000008c 	.word	0x2000008c
 800fec8:	08010e65 	.word	0x08010e65
 800fecc:	08010e37 	.word	0x08010e37
 800fed0:	08010e2a 	.word	0x08010e2a

0800fed4 <_calloc_r>:
 800fed4:	b570      	push	{r4, r5, r6, lr}
 800fed6:	fba1 5402 	umull	r5, r4, r1, r2
 800feda:	b93c      	cbnz	r4, 800feec <_calloc_r+0x18>
 800fedc:	4629      	mov	r1, r5
 800fede:	f7fc f81f 	bl	800bf20 <_malloc_r>
 800fee2:	4606      	mov	r6, r0
 800fee4:	b928      	cbnz	r0, 800fef2 <_calloc_r+0x1e>
 800fee6:	2600      	movs	r6, #0
 800fee8:	4630      	mov	r0, r6
 800feea:	bd70      	pop	{r4, r5, r6, pc}
 800feec:	220c      	movs	r2, #12
 800feee:	6002      	str	r2, [r0, #0]
 800fef0:	e7f9      	b.n	800fee6 <_calloc_r+0x12>
 800fef2:	462a      	mov	r2, r5
 800fef4:	4621      	mov	r1, r4
 800fef6:	f7fd f945 	bl	800d184 <memset>
 800fefa:	e7f5      	b.n	800fee8 <_calloc_r+0x14>

0800fefc <rshift>:
 800fefc:	6903      	ldr	r3, [r0, #16]
 800fefe:	114a      	asrs	r2, r1, #5
 800ff00:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ff04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff08:	f100 0414 	add.w	r4, r0, #20
 800ff0c:	dd45      	ble.n	800ff9a <rshift+0x9e>
 800ff0e:	f011 011f 	ands.w	r1, r1, #31
 800ff12:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ff16:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ff1a:	d10c      	bne.n	800ff36 <rshift+0x3a>
 800ff1c:	f100 0710 	add.w	r7, r0, #16
 800ff20:	4629      	mov	r1, r5
 800ff22:	42b1      	cmp	r1, r6
 800ff24:	d334      	bcc.n	800ff90 <rshift+0x94>
 800ff26:	1a9b      	subs	r3, r3, r2
 800ff28:	1eea      	subs	r2, r5, #3
 800ff2a:	009b      	lsls	r3, r3, #2
 800ff2c:	4296      	cmp	r6, r2
 800ff2e:	bf38      	it	cc
 800ff30:	2300      	movcc	r3, #0
 800ff32:	4423      	add	r3, r4
 800ff34:	e015      	b.n	800ff62 <rshift+0x66>
 800ff36:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ff3a:	f1c1 0820 	rsb	r8, r1, #32
 800ff3e:	f105 0e04 	add.w	lr, r5, #4
 800ff42:	46a1      	mov	r9, r4
 800ff44:	40cf      	lsrs	r7, r1
 800ff46:	4576      	cmp	r6, lr
 800ff48:	46f4      	mov	ip, lr
 800ff4a:	d815      	bhi.n	800ff78 <rshift+0x7c>
 800ff4c:	1a9a      	subs	r2, r3, r2
 800ff4e:	3501      	adds	r5, #1
 800ff50:	0092      	lsls	r2, r2, #2
 800ff52:	3a04      	subs	r2, #4
 800ff54:	42ae      	cmp	r6, r5
 800ff56:	bf38      	it	cc
 800ff58:	2200      	movcc	r2, #0
 800ff5a:	18a3      	adds	r3, r4, r2
 800ff5c:	50a7      	str	r7, [r4, r2]
 800ff5e:	b107      	cbz	r7, 800ff62 <rshift+0x66>
 800ff60:	3304      	adds	r3, #4
 800ff62:	1b1a      	subs	r2, r3, r4
 800ff64:	42a3      	cmp	r3, r4
 800ff66:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ff6a:	bf08      	it	eq
 800ff6c:	2300      	moveq	r3, #0
 800ff6e:	6102      	str	r2, [r0, #16]
 800ff70:	bf08      	it	eq
 800ff72:	6143      	streq	r3, [r0, #20]
 800ff74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff78:	f8dc c000 	ldr.w	ip, [ip]
 800ff7c:	fa0c fc08 	lsl.w	ip, ip, r8
 800ff80:	ea4c 0707 	orr.w	r7, ip, r7
 800ff84:	f849 7b04 	str.w	r7, [r9], #4
 800ff88:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ff8c:	40cf      	lsrs	r7, r1
 800ff8e:	e7da      	b.n	800ff46 <rshift+0x4a>
 800ff90:	f851 cb04 	ldr.w	ip, [r1], #4
 800ff94:	f847 cf04 	str.w	ip, [r7, #4]!
 800ff98:	e7c3      	b.n	800ff22 <rshift+0x26>
 800ff9a:	4623      	mov	r3, r4
 800ff9c:	e7e1      	b.n	800ff62 <rshift+0x66>

0800ff9e <__hexdig_fun>:
 800ff9e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ffa2:	2b09      	cmp	r3, #9
 800ffa4:	d802      	bhi.n	800ffac <__hexdig_fun+0xe>
 800ffa6:	3820      	subs	r0, #32
 800ffa8:	b2c0      	uxtb	r0, r0
 800ffaa:	4770      	bx	lr
 800ffac:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ffb0:	2b05      	cmp	r3, #5
 800ffb2:	d801      	bhi.n	800ffb8 <__hexdig_fun+0x1a>
 800ffb4:	3847      	subs	r0, #71	@ 0x47
 800ffb6:	e7f7      	b.n	800ffa8 <__hexdig_fun+0xa>
 800ffb8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ffbc:	2b05      	cmp	r3, #5
 800ffbe:	d801      	bhi.n	800ffc4 <__hexdig_fun+0x26>
 800ffc0:	3827      	subs	r0, #39	@ 0x27
 800ffc2:	e7f1      	b.n	800ffa8 <__hexdig_fun+0xa>
 800ffc4:	2000      	movs	r0, #0
 800ffc6:	4770      	bx	lr

0800ffc8 <__gethex>:
 800ffc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffcc:	b085      	sub	sp, #20
 800ffce:	468a      	mov	sl, r1
 800ffd0:	4690      	mov	r8, r2
 800ffd2:	9302      	str	r3, [sp, #8]
 800ffd4:	680b      	ldr	r3, [r1, #0]
 800ffd6:	9001      	str	r0, [sp, #4]
 800ffd8:	1c9c      	adds	r4, r3, #2
 800ffda:	46a1      	mov	r9, r4
 800ffdc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ffe0:	2830      	cmp	r0, #48	@ 0x30
 800ffe2:	d0fa      	beq.n	800ffda <__gethex+0x12>
 800ffe4:	eba9 0303 	sub.w	r3, r9, r3
 800ffe8:	f1a3 0b02 	sub.w	fp, r3, #2
 800ffec:	f7ff ffd7 	bl	800ff9e <__hexdig_fun>
 800fff0:	4605      	mov	r5, r0
 800fff2:	2800      	cmp	r0, #0
 800fff4:	d166      	bne.n	80100c4 <__gethex+0xfc>
 800fff6:	2201      	movs	r2, #1
 800fff8:	499e      	ldr	r1, [pc, #632]	@ (8010274 <__gethex+0x2ac>)
 800fffa:	4648      	mov	r0, r9
 800fffc:	f7ff ff0f 	bl	800fe1e <strncmp>
 8010000:	4607      	mov	r7, r0
 8010002:	2800      	cmp	r0, #0
 8010004:	d165      	bne.n	80100d2 <__gethex+0x10a>
 8010006:	f899 0001 	ldrb.w	r0, [r9, #1]
 801000a:	4626      	mov	r6, r4
 801000c:	f7ff ffc7 	bl	800ff9e <__hexdig_fun>
 8010010:	2800      	cmp	r0, #0
 8010012:	d060      	beq.n	80100d6 <__gethex+0x10e>
 8010014:	4623      	mov	r3, r4
 8010016:	7818      	ldrb	r0, [r3, #0]
 8010018:	4699      	mov	r9, r3
 801001a:	3301      	adds	r3, #1
 801001c:	2830      	cmp	r0, #48	@ 0x30
 801001e:	d0fa      	beq.n	8010016 <__gethex+0x4e>
 8010020:	f7ff ffbd 	bl	800ff9e <__hexdig_fun>
 8010024:	fab0 f580 	clz	r5, r0
 8010028:	f04f 0b01 	mov.w	fp, #1
 801002c:	096d      	lsrs	r5, r5, #5
 801002e:	464a      	mov	r2, r9
 8010030:	4616      	mov	r6, r2
 8010032:	3201      	adds	r2, #1
 8010034:	7830      	ldrb	r0, [r6, #0]
 8010036:	f7ff ffb2 	bl	800ff9e <__hexdig_fun>
 801003a:	2800      	cmp	r0, #0
 801003c:	d1f8      	bne.n	8010030 <__gethex+0x68>
 801003e:	2201      	movs	r2, #1
 8010040:	498c      	ldr	r1, [pc, #560]	@ (8010274 <__gethex+0x2ac>)
 8010042:	4630      	mov	r0, r6
 8010044:	f7ff feeb 	bl	800fe1e <strncmp>
 8010048:	2800      	cmp	r0, #0
 801004a:	d13e      	bne.n	80100ca <__gethex+0x102>
 801004c:	b944      	cbnz	r4, 8010060 <__gethex+0x98>
 801004e:	1c74      	adds	r4, r6, #1
 8010050:	4622      	mov	r2, r4
 8010052:	4616      	mov	r6, r2
 8010054:	3201      	adds	r2, #1
 8010056:	7830      	ldrb	r0, [r6, #0]
 8010058:	f7ff ffa1 	bl	800ff9e <__hexdig_fun>
 801005c:	2800      	cmp	r0, #0
 801005e:	d1f8      	bne.n	8010052 <__gethex+0x8a>
 8010060:	1ba4      	subs	r4, r4, r6
 8010062:	00a7      	lsls	r7, r4, #2
 8010064:	7833      	ldrb	r3, [r6, #0]
 8010066:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801006a:	2b50      	cmp	r3, #80	@ 0x50
 801006c:	d13d      	bne.n	80100ea <__gethex+0x122>
 801006e:	7873      	ldrb	r3, [r6, #1]
 8010070:	2b2b      	cmp	r3, #43	@ 0x2b
 8010072:	d032      	beq.n	80100da <__gethex+0x112>
 8010074:	2b2d      	cmp	r3, #45	@ 0x2d
 8010076:	d033      	beq.n	80100e0 <__gethex+0x118>
 8010078:	1c71      	adds	r1, r6, #1
 801007a:	2400      	movs	r4, #0
 801007c:	7808      	ldrb	r0, [r1, #0]
 801007e:	f7ff ff8e 	bl	800ff9e <__hexdig_fun>
 8010082:	1e43      	subs	r3, r0, #1
 8010084:	b2db      	uxtb	r3, r3
 8010086:	2b18      	cmp	r3, #24
 8010088:	d82f      	bhi.n	80100ea <__gethex+0x122>
 801008a:	f1a0 0210 	sub.w	r2, r0, #16
 801008e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010092:	f7ff ff84 	bl	800ff9e <__hexdig_fun>
 8010096:	f100 3cff 	add.w	ip, r0, #4294967295
 801009a:	230a      	movs	r3, #10
 801009c:	fa5f fc8c 	uxtb.w	ip, ip
 80100a0:	f1bc 0f18 	cmp.w	ip, #24
 80100a4:	d91e      	bls.n	80100e4 <__gethex+0x11c>
 80100a6:	b104      	cbz	r4, 80100aa <__gethex+0xe2>
 80100a8:	4252      	negs	r2, r2
 80100aa:	4417      	add	r7, r2
 80100ac:	f8ca 1000 	str.w	r1, [sl]
 80100b0:	b1ed      	cbz	r5, 80100ee <__gethex+0x126>
 80100b2:	f1bb 0f00 	cmp.w	fp, #0
 80100b6:	bf0c      	ite	eq
 80100b8:	2506      	moveq	r5, #6
 80100ba:	2500      	movne	r5, #0
 80100bc:	4628      	mov	r0, r5
 80100be:	b005      	add	sp, #20
 80100c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100c4:	2500      	movs	r5, #0
 80100c6:	462c      	mov	r4, r5
 80100c8:	e7b1      	b.n	801002e <__gethex+0x66>
 80100ca:	2c00      	cmp	r4, #0
 80100cc:	d1c8      	bne.n	8010060 <__gethex+0x98>
 80100ce:	4627      	mov	r7, r4
 80100d0:	e7c8      	b.n	8010064 <__gethex+0x9c>
 80100d2:	464e      	mov	r6, r9
 80100d4:	462f      	mov	r7, r5
 80100d6:	2501      	movs	r5, #1
 80100d8:	e7c4      	b.n	8010064 <__gethex+0x9c>
 80100da:	2400      	movs	r4, #0
 80100dc:	1cb1      	adds	r1, r6, #2
 80100de:	e7cd      	b.n	801007c <__gethex+0xb4>
 80100e0:	2401      	movs	r4, #1
 80100e2:	e7fb      	b.n	80100dc <__gethex+0x114>
 80100e4:	fb03 0002 	mla	r0, r3, r2, r0
 80100e8:	e7cf      	b.n	801008a <__gethex+0xc2>
 80100ea:	4631      	mov	r1, r6
 80100ec:	e7de      	b.n	80100ac <__gethex+0xe4>
 80100ee:	eba6 0309 	sub.w	r3, r6, r9
 80100f2:	4629      	mov	r1, r5
 80100f4:	3b01      	subs	r3, #1
 80100f6:	2b07      	cmp	r3, #7
 80100f8:	dc0a      	bgt.n	8010110 <__gethex+0x148>
 80100fa:	9801      	ldr	r0, [sp, #4]
 80100fc:	f7fd ff8e 	bl	800e01c <_Balloc>
 8010100:	4604      	mov	r4, r0
 8010102:	b940      	cbnz	r0, 8010116 <__gethex+0x14e>
 8010104:	4b5c      	ldr	r3, [pc, #368]	@ (8010278 <__gethex+0x2b0>)
 8010106:	4602      	mov	r2, r0
 8010108:	21e4      	movs	r1, #228	@ 0xe4
 801010a:	485c      	ldr	r0, [pc, #368]	@ (801027c <__gethex+0x2b4>)
 801010c:	f7ff fec4 	bl	800fe98 <__assert_func>
 8010110:	3101      	adds	r1, #1
 8010112:	105b      	asrs	r3, r3, #1
 8010114:	e7ef      	b.n	80100f6 <__gethex+0x12e>
 8010116:	f100 0a14 	add.w	sl, r0, #20
 801011a:	2300      	movs	r3, #0
 801011c:	4655      	mov	r5, sl
 801011e:	469b      	mov	fp, r3
 8010120:	45b1      	cmp	r9, r6
 8010122:	d337      	bcc.n	8010194 <__gethex+0x1cc>
 8010124:	f845 bb04 	str.w	fp, [r5], #4
 8010128:	eba5 050a 	sub.w	r5, r5, sl
 801012c:	4658      	mov	r0, fp
 801012e:	10ad      	asrs	r5, r5, #2
 8010130:	6125      	str	r5, [r4, #16]
 8010132:	016d      	lsls	r5, r5, #5
 8010134:	f7fe f866 	bl	800e204 <__hi0bits>
 8010138:	f8d8 6000 	ldr.w	r6, [r8]
 801013c:	1a2d      	subs	r5, r5, r0
 801013e:	42b5      	cmp	r5, r6
 8010140:	dd54      	ble.n	80101ec <__gethex+0x224>
 8010142:	1bad      	subs	r5, r5, r6
 8010144:	4620      	mov	r0, r4
 8010146:	4629      	mov	r1, r5
 8010148:	f7fe fc03 	bl	800e952 <__any_on>
 801014c:	4681      	mov	r9, r0
 801014e:	b178      	cbz	r0, 8010170 <__gethex+0x1a8>
 8010150:	1e6b      	subs	r3, r5, #1
 8010152:	f04f 0901 	mov.w	r9, #1
 8010156:	1159      	asrs	r1, r3, #5
 8010158:	f003 021f 	and.w	r2, r3, #31
 801015c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010160:	fa09 f202 	lsl.w	r2, r9, r2
 8010164:	420a      	tst	r2, r1
 8010166:	d003      	beq.n	8010170 <__gethex+0x1a8>
 8010168:	454b      	cmp	r3, r9
 801016a:	dc36      	bgt.n	80101da <__gethex+0x212>
 801016c:	f04f 0902 	mov.w	r9, #2
 8010170:	442f      	add	r7, r5
 8010172:	4629      	mov	r1, r5
 8010174:	4620      	mov	r0, r4
 8010176:	f7ff fec1 	bl	800fefc <rshift>
 801017a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801017e:	42bb      	cmp	r3, r7
 8010180:	da42      	bge.n	8010208 <__gethex+0x240>
 8010182:	4621      	mov	r1, r4
 8010184:	9801      	ldr	r0, [sp, #4]
 8010186:	f7fd ff89 	bl	800e09c <_Bfree>
 801018a:	2300      	movs	r3, #0
 801018c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801018e:	25a3      	movs	r5, #163	@ 0xa3
 8010190:	6013      	str	r3, [r2, #0]
 8010192:	e793      	b.n	80100bc <__gethex+0xf4>
 8010194:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010198:	2a2e      	cmp	r2, #46	@ 0x2e
 801019a:	d012      	beq.n	80101c2 <__gethex+0x1fa>
 801019c:	2b20      	cmp	r3, #32
 801019e:	d104      	bne.n	80101aa <__gethex+0x1e2>
 80101a0:	f845 bb04 	str.w	fp, [r5], #4
 80101a4:	f04f 0b00 	mov.w	fp, #0
 80101a8:	465b      	mov	r3, fp
 80101aa:	7830      	ldrb	r0, [r6, #0]
 80101ac:	9303      	str	r3, [sp, #12]
 80101ae:	f7ff fef6 	bl	800ff9e <__hexdig_fun>
 80101b2:	9b03      	ldr	r3, [sp, #12]
 80101b4:	f000 000f 	and.w	r0, r0, #15
 80101b8:	4098      	lsls	r0, r3
 80101ba:	3304      	adds	r3, #4
 80101bc:	ea4b 0b00 	orr.w	fp, fp, r0
 80101c0:	e7ae      	b.n	8010120 <__gethex+0x158>
 80101c2:	45b1      	cmp	r9, r6
 80101c4:	d8ea      	bhi.n	801019c <__gethex+0x1d4>
 80101c6:	2201      	movs	r2, #1
 80101c8:	492a      	ldr	r1, [pc, #168]	@ (8010274 <__gethex+0x2ac>)
 80101ca:	4630      	mov	r0, r6
 80101cc:	9303      	str	r3, [sp, #12]
 80101ce:	f7ff fe26 	bl	800fe1e <strncmp>
 80101d2:	9b03      	ldr	r3, [sp, #12]
 80101d4:	2800      	cmp	r0, #0
 80101d6:	d1e1      	bne.n	801019c <__gethex+0x1d4>
 80101d8:	e7a2      	b.n	8010120 <__gethex+0x158>
 80101da:	1ea9      	subs	r1, r5, #2
 80101dc:	4620      	mov	r0, r4
 80101de:	f7fe fbb8 	bl	800e952 <__any_on>
 80101e2:	2800      	cmp	r0, #0
 80101e4:	d0c2      	beq.n	801016c <__gethex+0x1a4>
 80101e6:	f04f 0903 	mov.w	r9, #3
 80101ea:	e7c1      	b.n	8010170 <__gethex+0x1a8>
 80101ec:	da09      	bge.n	8010202 <__gethex+0x23a>
 80101ee:	1b75      	subs	r5, r6, r5
 80101f0:	4621      	mov	r1, r4
 80101f2:	9801      	ldr	r0, [sp, #4]
 80101f4:	462a      	mov	r2, r5
 80101f6:	1b7f      	subs	r7, r7, r5
 80101f8:	f7fe f96a 	bl	800e4d0 <__lshift>
 80101fc:	4604      	mov	r4, r0
 80101fe:	f100 0a14 	add.w	sl, r0, #20
 8010202:	f04f 0900 	mov.w	r9, #0
 8010206:	e7b8      	b.n	801017a <__gethex+0x1b2>
 8010208:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801020c:	42bd      	cmp	r5, r7
 801020e:	dd6f      	ble.n	80102f0 <__gethex+0x328>
 8010210:	1bed      	subs	r5, r5, r7
 8010212:	42ae      	cmp	r6, r5
 8010214:	dc34      	bgt.n	8010280 <__gethex+0x2b8>
 8010216:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801021a:	2b02      	cmp	r3, #2
 801021c:	d022      	beq.n	8010264 <__gethex+0x29c>
 801021e:	2b03      	cmp	r3, #3
 8010220:	d024      	beq.n	801026c <__gethex+0x2a4>
 8010222:	2b01      	cmp	r3, #1
 8010224:	d115      	bne.n	8010252 <__gethex+0x28a>
 8010226:	42ae      	cmp	r6, r5
 8010228:	d113      	bne.n	8010252 <__gethex+0x28a>
 801022a:	2e01      	cmp	r6, #1
 801022c:	d10b      	bne.n	8010246 <__gethex+0x27e>
 801022e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010232:	2562      	movs	r5, #98	@ 0x62
 8010234:	9a02      	ldr	r2, [sp, #8]
 8010236:	6013      	str	r3, [r2, #0]
 8010238:	2301      	movs	r3, #1
 801023a:	6123      	str	r3, [r4, #16]
 801023c:	f8ca 3000 	str.w	r3, [sl]
 8010240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010242:	601c      	str	r4, [r3, #0]
 8010244:	e73a      	b.n	80100bc <__gethex+0xf4>
 8010246:	1e71      	subs	r1, r6, #1
 8010248:	4620      	mov	r0, r4
 801024a:	f7fe fb82 	bl	800e952 <__any_on>
 801024e:	2800      	cmp	r0, #0
 8010250:	d1ed      	bne.n	801022e <__gethex+0x266>
 8010252:	4621      	mov	r1, r4
 8010254:	9801      	ldr	r0, [sp, #4]
 8010256:	f7fd ff21 	bl	800e09c <_Bfree>
 801025a:	2300      	movs	r3, #0
 801025c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801025e:	2550      	movs	r5, #80	@ 0x50
 8010260:	6013      	str	r3, [r2, #0]
 8010262:	e72b      	b.n	80100bc <__gethex+0xf4>
 8010264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010266:	2b00      	cmp	r3, #0
 8010268:	d1f3      	bne.n	8010252 <__gethex+0x28a>
 801026a:	e7e0      	b.n	801022e <__gethex+0x266>
 801026c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801026e:	2b00      	cmp	r3, #0
 8010270:	d1dd      	bne.n	801022e <__gethex+0x266>
 8010272:	e7ee      	b.n	8010252 <__gethex+0x28a>
 8010274:	08010cb8 	.word	0x08010cb8
 8010278:	08010b51 	.word	0x08010b51
 801027c:	08010e66 	.word	0x08010e66
 8010280:	1e6f      	subs	r7, r5, #1
 8010282:	f1b9 0f00 	cmp.w	r9, #0
 8010286:	d130      	bne.n	80102ea <__gethex+0x322>
 8010288:	b127      	cbz	r7, 8010294 <__gethex+0x2cc>
 801028a:	4639      	mov	r1, r7
 801028c:	4620      	mov	r0, r4
 801028e:	f7fe fb60 	bl	800e952 <__any_on>
 8010292:	4681      	mov	r9, r0
 8010294:	117a      	asrs	r2, r7, #5
 8010296:	2301      	movs	r3, #1
 8010298:	f007 071f 	and.w	r7, r7, #31
 801029c:	4629      	mov	r1, r5
 801029e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80102a2:	4620      	mov	r0, r4
 80102a4:	40bb      	lsls	r3, r7
 80102a6:	1b76      	subs	r6, r6, r5
 80102a8:	2502      	movs	r5, #2
 80102aa:	4213      	tst	r3, r2
 80102ac:	bf18      	it	ne
 80102ae:	f049 0902 	orrne.w	r9, r9, #2
 80102b2:	f7ff fe23 	bl	800fefc <rshift>
 80102b6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80102ba:	f1b9 0f00 	cmp.w	r9, #0
 80102be:	d047      	beq.n	8010350 <__gethex+0x388>
 80102c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80102c4:	2b02      	cmp	r3, #2
 80102c6:	d015      	beq.n	80102f4 <__gethex+0x32c>
 80102c8:	2b03      	cmp	r3, #3
 80102ca:	d017      	beq.n	80102fc <__gethex+0x334>
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	d109      	bne.n	80102e4 <__gethex+0x31c>
 80102d0:	f019 0f02 	tst.w	r9, #2
 80102d4:	d006      	beq.n	80102e4 <__gethex+0x31c>
 80102d6:	f8da 3000 	ldr.w	r3, [sl]
 80102da:	ea49 0903 	orr.w	r9, r9, r3
 80102de:	f019 0f01 	tst.w	r9, #1
 80102e2:	d10e      	bne.n	8010302 <__gethex+0x33a>
 80102e4:	f045 0510 	orr.w	r5, r5, #16
 80102e8:	e032      	b.n	8010350 <__gethex+0x388>
 80102ea:	f04f 0901 	mov.w	r9, #1
 80102ee:	e7d1      	b.n	8010294 <__gethex+0x2cc>
 80102f0:	2501      	movs	r5, #1
 80102f2:	e7e2      	b.n	80102ba <__gethex+0x2f2>
 80102f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102f6:	f1c3 0301 	rsb	r3, r3, #1
 80102fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80102fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d0f0      	beq.n	80102e4 <__gethex+0x31c>
 8010302:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010306:	f104 0314 	add.w	r3, r4, #20
 801030a:	f04f 0c00 	mov.w	ip, #0
 801030e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010312:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010316:	4618      	mov	r0, r3
 8010318:	f853 2b04 	ldr.w	r2, [r3], #4
 801031c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010320:	d01b      	beq.n	801035a <__gethex+0x392>
 8010322:	3201      	adds	r2, #1
 8010324:	6002      	str	r2, [r0, #0]
 8010326:	2d02      	cmp	r5, #2
 8010328:	f104 0314 	add.w	r3, r4, #20
 801032c:	d13c      	bne.n	80103a8 <__gethex+0x3e0>
 801032e:	f8d8 2000 	ldr.w	r2, [r8]
 8010332:	3a01      	subs	r2, #1
 8010334:	42b2      	cmp	r2, r6
 8010336:	d109      	bne.n	801034c <__gethex+0x384>
 8010338:	1171      	asrs	r1, r6, #5
 801033a:	2201      	movs	r2, #1
 801033c:	f006 061f 	and.w	r6, r6, #31
 8010340:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010344:	fa02 f606 	lsl.w	r6, r2, r6
 8010348:	421e      	tst	r6, r3
 801034a:	d13a      	bne.n	80103c2 <__gethex+0x3fa>
 801034c:	f045 0520 	orr.w	r5, r5, #32
 8010350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010352:	601c      	str	r4, [r3, #0]
 8010354:	9b02      	ldr	r3, [sp, #8]
 8010356:	601f      	str	r7, [r3, #0]
 8010358:	e6b0      	b.n	80100bc <__gethex+0xf4>
 801035a:	4299      	cmp	r1, r3
 801035c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010360:	d8d9      	bhi.n	8010316 <__gethex+0x34e>
 8010362:	68a3      	ldr	r3, [r4, #8]
 8010364:	459b      	cmp	fp, r3
 8010366:	db17      	blt.n	8010398 <__gethex+0x3d0>
 8010368:	6861      	ldr	r1, [r4, #4]
 801036a:	9801      	ldr	r0, [sp, #4]
 801036c:	3101      	adds	r1, #1
 801036e:	f7fd fe55 	bl	800e01c <_Balloc>
 8010372:	4681      	mov	r9, r0
 8010374:	b918      	cbnz	r0, 801037e <__gethex+0x3b6>
 8010376:	4b1a      	ldr	r3, [pc, #104]	@ (80103e0 <__gethex+0x418>)
 8010378:	4602      	mov	r2, r0
 801037a:	2184      	movs	r1, #132	@ 0x84
 801037c:	e6c5      	b.n	801010a <__gethex+0x142>
 801037e:	6922      	ldr	r2, [r4, #16]
 8010380:	f104 010c 	add.w	r1, r4, #12
 8010384:	300c      	adds	r0, #12
 8010386:	3202      	adds	r2, #2
 8010388:	0092      	lsls	r2, r2, #2
 801038a:	f7fc ff98 	bl	800d2be <memcpy>
 801038e:	4621      	mov	r1, r4
 8010390:	464c      	mov	r4, r9
 8010392:	9801      	ldr	r0, [sp, #4]
 8010394:	f7fd fe82 	bl	800e09c <_Bfree>
 8010398:	6923      	ldr	r3, [r4, #16]
 801039a:	1c5a      	adds	r2, r3, #1
 801039c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80103a0:	6122      	str	r2, [r4, #16]
 80103a2:	2201      	movs	r2, #1
 80103a4:	615a      	str	r2, [r3, #20]
 80103a6:	e7be      	b.n	8010326 <__gethex+0x35e>
 80103a8:	6922      	ldr	r2, [r4, #16]
 80103aa:	455a      	cmp	r2, fp
 80103ac:	dd0b      	ble.n	80103c6 <__gethex+0x3fe>
 80103ae:	2101      	movs	r1, #1
 80103b0:	4620      	mov	r0, r4
 80103b2:	f7ff fda3 	bl	800fefc <rshift>
 80103b6:	3701      	adds	r7, #1
 80103b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80103bc:	42bb      	cmp	r3, r7
 80103be:	f6ff aee0 	blt.w	8010182 <__gethex+0x1ba>
 80103c2:	2501      	movs	r5, #1
 80103c4:	e7c2      	b.n	801034c <__gethex+0x384>
 80103c6:	f016 061f 	ands.w	r6, r6, #31
 80103ca:	d0fa      	beq.n	80103c2 <__gethex+0x3fa>
 80103cc:	4453      	add	r3, sl
 80103ce:	f1c6 0620 	rsb	r6, r6, #32
 80103d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80103d6:	f7fd ff15 	bl	800e204 <__hi0bits>
 80103da:	42b0      	cmp	r0, r6
 80103dc:	dbe7      	blt.n	80103ae <__gethex+0x3e6>
 80103de:	e7f0      	b.n	80103c2 <__gethex+0x3fa>
 80103e0:	08010b51 	.word	0x08010b51

080103e4 <L_shift>:
 80103e4:	f1c2 0208 	rsb	r2, r2, #8
 80103e8:	0092      	lsls	r2, r2, #2
 80103ea:	b570      	push	{r4, r5, r6, lr}
 80103ec:	f1c2 0620 	rsb	r6, r2, #32
 80103f0:	6843      	ldr	r3, [r0, #4]
 80103f2:	6804      	ldr	r4, [r0, #0]
 80103f4:	fa03 f506 	lsl.w	r5, r3, r6
 80103f8:	40d3      	lsrs	r3, r2
 80103fa:	432c      	orrs	r4, r5
 80103fc:	6004      	str	r4, [r0, #0]
 80103fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8010402:	4288      	cmp	r0, r1
 8010404:	d3f4      	bcc.n	80103f0 <L_shift+0xc>
 8010406:	bd70      	pop	{r4, r5, r6, pc}

08010408 <__match>:
 8010408:	6803      	ldr	r3, [r0, #0]
 801040a:	3301      	adds	r3, #1
 801040c:	b530      	push	{r4, r5, lr}
 801040e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010412:	b914      	cbnz	r4, 801041a <__match+0x12>
 8010414:	6003      	str	r3, [r0, #0]
 8010416:	2001      	movs	r0, #1
 8010418:	bd30      	pop	{r4, r5, pc}
 801041a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801041e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010422:	2d19      	cmp	r5, #25
 8010424:	bf98      	it	ls
 8010426:	3220      	addls	r2, #32
 8010428:	42a2      	cmp	r2, r4
 801042a:	d0f0      	beq.n	801040e <__match+0x6>
 801042c:	2000      	movs	r0, #0
 801042e:	e7f3      	b.n	8010418 <__match+0x10>

08010430 <__hexnan>:
 8010430:	680b      	ldr	r3, [r1, #0]
 8010432:	6801      	ldr	r1, [r0, #0]
 8010434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010438:	115e      	asrs	r6, r3, #5
 801043a:	f013 031f 	ands.w	r3, r3, #31
 801043e:	f04f 0500 	mov.w	r5, #0
 8010442:	b087      	sub	sp, #28
 8010444:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010448:	4682      	mov	sl, r0
 801044a:	4690      	mov	r8, r2
 801044c:	46ab      	mov	fp, r5
 801044e:	bf18      	it	ne
 8010450:	3604      	addne	r6, #4
 8010452:	9301      	str	r3, [sp, #4]
 8010454:	9502      	str	r5, [sp, #8]
 8010456:	1f37      	subs	r7, r6, #4
 8010458:	f846 5c04 	str.w	r5, [r6, #-4]
 801045c:	46b9      	mov	r9, r7
 801045e:	463c      	mov	r4, r7
 8010460:	1c4b      	adds	r3, r1, #1
 8010462:	784a      	ldrb	r2, [r1, #1]
 8010464:	9303      	str	r3, [sp, #12]
 8010466:	b342      	cbz	r2, 80104ba <__hexnan+0x8a>
 8010468:	4610      	mov	r0, r2
 801046a:	9105      	str	r1, [sp, #20]
 801046c:	9204      	str	r2, [sp, #16]
 801046e:	f7ff fd96 	bl	800ff9e <__hexdig_fun>
 8010472:	2800      	cmp	r0, #0
 8010474:	d151      	bne.n	801051a <__hexnan+0xea>
 8010476:	9a04      	ldr	r2, [sp, #16]
 8010478:	9905      	ldr	r1, [sp, #20]
 801047a:	2a20      	cmp	r2, #32
 801047c:	d818      	bhi.n	80104b0 <__hexnan+0x80>
 801047e:	9b02      	ldr	r3, [sp, #8]
 8010480:	459b      	cmp	fp, r3
 8010482:	dd13      	ble.n	80104ac <__hexnan+0x7c>
 8010484:	454c      	cmp	r4, r9
 8010486:	d206      	bcs.n	8010496 <__hexnan+0x66>
 8010488:	2d07      	cmp	r5, #7
 801048a:	dc04      	bgt.n	8010496 <__hexnan+0x66>
 801048c:	462a      	mov	r2, r5
 801048e:	4649      	mov	r1, r9
 8010490:	4620      	mov	r0, r4
 8010492:	f7ff ffa7 	bl	80103e4 <L_shift>
 8010496:	4544      	cmp	r4, r8
 8010498:	d951      	bls.n	801053e <__hexnan+0x10e>
 801049a:	2300      	movs	r3, #0
 801049c:	f1a4 0904 	sub.w	r9, r4, #4
 80104a0:	f8cd b008 	str.w	fp, [sp, #8]
 80104a4:	f844 3c04 	str.w	r3, [r4, #-4]
 80104a8:	461d      	mov	r5, r3
 80104aa:	464c      	mov	r4, r9
 80104ac:	9903      	ldr	r1, [sp, #12]
 80104ae:	e7d7      	b.n	8010460 <__hexnan+0x30>
 80104b0:	2a29      	cmp	r2, #41	@ 0x29
 80104b2:	d156      	bne.n	8010562 <__hexnan+0x132>
 80104b4:	3102      	adds	r1, #2
 80104b6:	f8ca 1000 	str.w	r1, [sl]
 80104ba:	f1bb 0f00 	cmp.w	fp, #0
 80104be:	d050      	beq.n	8010562 <__hexnan+0x132>
 80104c0:	454c      	cmp	r4, r9
 80104c2:	d206      	bcs.n	80104d2 <__hexnan+0xa2>
 80104c4:	2d07      	cmp	r5, #7
 80104c6:	dc04      	bgt.n	80104d2 <__hexnan+0xa2>
 80104c8:	462a      	mov	r2, r5
 80104ca:	4649      	mov	r1, r9
 80104cc:	4620      	mov	r0, r4
 80104ce:	f7ff ff89 	bl	80103e4 <L_shift>
 80104d2:	4544      	cmp	r4, r8
 80104d4:	d935      	bls.n	8010542 <__hexnan+0x112>
 80104d6:	f1a8 0204 	sub.w	r2, r8, #4
 80104da:	4623      	mov	r3, r4
 80104dc:	f853 1b04 	ldr.w	r1, [r3], #4
 80104e0:	429f      	cmp	r7, r3
 80104e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80104e6:	d2f9      	bcs.n	80104dc <__hexnan+0xac>
 80104e8:	1b3b      	subs	r3, r7, r4
 80104ea:	3e03      	subs	r6, #3
 80104ec:	3401      	adds	r4, #1
 80104ee:	2200      	movs	r2, #0
 80104f0:	f023 0303 	bic.w	r3, r3, #3
 80104f4:	3304      	adds	r3, #4
 80104f6:	42b4      	cmp	r4, r6
 80104f8:	bf88      	it	hi
 80104fa:	2304      	movhi	r3, #4
 80104fc:	4443      	add	r3, r8
 80104fe:	f843 2b04 	str.w	r2, [r3], #4
 8010502:	429f      	cmp	r7, r3
 8010504:	d2fb      	bcs.n	80104fe <__hexnan+0xce>
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	b91b      	cbnz	r3, 8010512 <__hexnan+0xe2>
 801050a:	4547      	cmp	r7, r8
 801050c:	d127      	bne.n	801055e <__hexnan+0x12e>
 801050e:	2301      	movs	r3, #1
 8010510:	603b      	str	r3, [r7, #0]
 8010512:	2005      	movs	r0, #5
 8010514:	b007      	add	sp, #28
 8010516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801051a:	3501      	adds	r5, #1
 801051c:	f10b 0b01 	add.w	fp, fp, #1
 8010520:	2d08      	cmp	r5, #8
 8010522:	dd05      	ble.n	8010530 <__hexnan+0x100>
 8010524:	4544      	cmp	r4, r8
 8010526:	d9c1      	bls.n	80104ac <__hexnan+0x7c>
 8010528:	2300      	movs	r3, #0
 801052a:	3c04      	subs	r4, #4
 801052c:	2501      	movs	r5, #1
 801052e:	6023      	str	r3, [r4, #0]
 8010530:	6822      	ldr	r2, [r4, #0]
 8010532:	f000 000f 	and.w	r0, r0, #15
 8010536:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801053a:	6020      	str	r0, [r4, #0]
 801053c:	e7b6      	b.n	80104ac <__hexnan+0x7c>
 801053e:	2508      	movs	r5, #8
 8010540:	e7b4      	b.n	80104ac <__hexnan+0x7c>
 8010542:	9b01      	ldr	r3, [sp, #4]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d0de      	beq.n	8010506 <__hexnan+0xd6>
 8010548:	f1c3 0320 	rsb	r3, r3, #32
 801054c:	f04f 32ff 	mov.w	r2, #4294967295
 8010550:	40da      	lsrs	r2, r3
 8010552:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010556:	4013      	ands	r3, r2
 8010558:	f846 3c04 	str.w	r3, [r6, #-4]
 801055c:	e7d3      	b.n	8010506 <__hexnan+0xd6>
 801055e:	3f04      	subs	r7, #4
 8010560:	e7d1      	b.n	8010506 <__hexnan+0xd6>
 8010562:	2004      	movs	r0, #4
 8010564:	e7d6      	b.n	8010514 <__hexnan+0xe4>

08010566 <__ascii_mbtowc>:
 8010566:	b082      	sub	sp, #8
 8010568:	b901      	cbnz	r1, 801056c <__ascii_mbtowc+0x6>
 801056a:	a901      	add	r1, sp, #4
 801056c:	b142      	cbz	r2, 8010580 <__ascii_mbtowc+0x1a>
 801056e:	b14b      	cbz	r3, 8010584 <__ascii_mbtowc+0x1e>
 8010570:	7813      	ldrb	r3, [r2, #0]
 8010572:	600b      	str	r3, [r1, #0]
 8010574:	7812      	ldrb	r2, [r2, #0]
 8010576:	1e10      	subs	r0, r2, #0
 8010578:	bf18      	it	ne
 801057a:	2001      	movne	r0, #1
 801057c:	b002      	add	sp, #8
 801057e:	4770      	bx	lr
 8010580:	4610      	mov	r0, r2
 8010582:	e7fb      	b.n	801057c <__ascii_mbtowc+0x16>
 8010584:	f06f 0001 	mvn.w	r0, #1
 8010588:	e7f8      	b.n	801057c <__ascii_mbtowc+0x16>

0801058a <_realloc_r>:
 801058a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801058e:	4680      	mov	r8, r0
 8010590:	4615      	mov	r5, r2
 8010592:	460c      	mov	r4, r1
 8010594:	b921      	cbnz	r1, 80105a0 <_realloc_r+0x16>
 8010596:	4611      	mov	r1, r2
 8010598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801059c:	f7fb bcc0 	b.w	800bf20 <_malloc_r>
 80105a0:	b92a      	cbnz	r2, 80105ae <_realloc_r+0x24>
 80105a2:	f7fd fcf1 	bl	800df88 <_free_r>
 80105a6:	2400      	movs	r4, #0
 80105a8:	4620      	mov	r0, r4
 80105aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ae:	f000 f840 	bl	8010632 <_malloc_usable_size_r>
 80105b2:	4285      	cmp	r5, r0
 80105b4:	4606      	mov	r6, r0
 80105b6:	d802      	bhi.n	80105be <_realloc_r+0x34>
 80105b8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80105bc:	d8f4      	bhi.n	80105a8 <_realloc_r+0x1e>
 80105be:	4629      	mov	r1, r5
 80105c0:	4640      	mov	r0, r8
 80105c2:	f7fb fcad 	bl	800bf20 <_malloc_r>
 80105c6:	4607      	mov	r7, r0
 80105c8:	2800      	cmp	r0, #0
 80105ca:	d0ec      	beq.n	80105a6 <_realloc_r+0x1c>
 80105cc:	42b5      	cmp	r5, r6
 80105ce:	462a      	mov	r2, r5
 80105d0:	4621      	mov	r1, r4
 80105d2:	bf28      	it	cs
 80105d4:	4632      	movcs	r2, r6
 80105d6:	f7fc fe72 	bl	800d2be <memcpy>
 80105da:	4621      	mov	r1, r4
 80105dc:	4640      	mov	r0, r8
 80105de:	463c      	mov	r4, r7
 80105e0:	f7fd fcd2 	bl	800df88 <_free_r>
 80105e4:	e7e0      	b.n	80105a8 <_realloc_r+0x1e>

080105e6 <__ascii_wctomb>:
 80105e6:	4603      	mov	r3, r0
 80105e8:	4608      	mov	r0, r1
 80105ea:	b141      	cbz	r1, 80105fe <__ascii_wctomb+0x18>
 80105ec:	2aff      	cmp	r2, #255	@ 0xff
 80105ee:	d904      	bls.n	80105fa <__ascii_wctomb+0x14>
 80105f0:	228a      	movs	r2, #138	@ 0x8a
 80105f2:	f04f 30ff 	mov.w	r0, #4294967295
 80105f6:	601a      	str	r2, [r3, #0]
 80105f8:	4770      	bx	lr
 80105fa:	2001      	movs	r0, #1
 80105fc:	700a      	strb	r2, [r1, #0]
 80105fe:	4770      	bx	lr

08010600 <fiprintf>:
 8010600:	b40e      	push	{r1, r2, r3}
 8010602:	b503      	push	{r0, r1, lr}
 8010604:	ab03      	add	r3, sp, #12
 8010606:	4601      	mov	r1, r0
 8010608:	4805      	ldr	r0, [pc, #20]	@ (8010620 <fiprintf+0x20>)
 801060a:	f853 2b04 	ldr.w	r2, [r3], #4
 801060e:	6800      	ldr	r0, [r0, #0]
 8010610:	9301      	str	r3, [sp, #4]
 8010612:	f7ff f9c5 	bl	800f9a0 <_vfiprintf_r>
 8010616:	b002      	add	sp, #8
 8010618:	f85d eb04 	ldr.w	lr, [sp], #4
 801061c:	b003      	add	sp, #12
 801061e:	4770      	bx	lr
 8010620:	2000008c 	.word	0x2000008c

08010624 <abort>:
 8010624:	2006      	movs	r0, #6
 8010626:	b508      	push	{r3, lr}
 8010628:	f000 f834 	bl	8010694 <raise>
 801062c:	2001      	movs	r0, #1
 801062e:	f7f3 fff7 	bl	8004620 <_exit>

08010632 <_malloc_usable_size_r>:
 8010632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010636:	1f18      	subs	r0, r3, #4
 8010638:	2b00      	cmp	r3, #0
 801063a:	bfbc      	itt	lt
 801063c:	580b      	ldrlt	r3, [r1, r0]
 801063e:	18c0      	addlt	r0, r0, r3
 8010640:	4770      	bx	lr

08010642 <_raise_r>:
 8010642:	291f      	cmp	r1, #31
 8010644:	b538      	push	{r3, r4, r5, lr}
 8010646:	4605      	mov	r5, r0
 8010648:	460c      	mov	r4, r1
 801064a:	d904      	bls.n	8010656 <_raise_r+0x14>
 801064c:	2316      	movs	r3, #22
 801064e:	6003      	str	r3, [r0, #0]
 8010650:	f04f 30ff 	mov.w	r0, #4294967295
 8010654:	bd38      	pop	{r3, r4, r5, pc}
 8010656:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010658:	b112      	cbz	r2, 8010660 <_raise_r+0x1e>
 801065a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801065e:	b94b      	cbnz	r3, 8010674 <_raise_r+0x32>
 8010660:	4628      	mov	r0, r5
 8010662:	f000 f831 	bl	80106c8 <_getpid_r>
 8010666:	4622      	mov	r2, r4
 8010668:	4601      	mov	r1, r0
 801066a:	4628      	mov	r0, r5
 801066c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010670:	f000 b818 	b.w	80106a4 <_kill_r>
 8010674:	2b01      	cmp	r3, #1
 8010676:	d00a      	beq.n	801068e <_raise_r+0x4c>
 8010678:	1c59      	adds	r1, r3, #1
 801067a:	d103      	bne.n	8010684 <_raise_r+0x42>
 801067c:	2316      	movs	r3, #22
 801067e:	6003      	str	r3, [r0, #0]
 8010680:	2001      	movs	r0, #1
 8010682:	e7e7      	b.n	8010654 <_raise_r+0x12>
 8010684:	2100      	movs	r1, #0
 8010686:	4620      	mov	r0, r4
 8010688:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801068c:	4798      	blx	r3
 801068e:	2000      	movs	r0, #0
 8010690:	e7e0      	b.n	8010654 <_raise_r+0x12>
	...

08010694 <raise>:
 8010694:	4b02      	ldr	r3, [pc, #8]	@ (80106a0 <raise+0xc>)
 8010696:	4601      	mov	r1, r0
 8010698:	6818      	ldr	r0, [r3, #0]
 801069a:	f7ff bfd2 	b.w	8010642 <_raise_r>
 801069e:	bf00      	nop
 80106a0:	2000008c 	.word	0x2000008c

080106a4 <_kill_r>:
 80106a4:	b538      	push	{r3, r4, r5, lr}
 80106a6:	2300      	movs	r3, #0
 80106a8:	4d06      	ldr	r5, [pc, #24]	@ (80106c4 <_kill_r+0x20>)
 80106aa:	4604      	mov	r4, r0
 80106ac:	4608      	mov	r0, r1
 80106ae:	4611      	mov	r1, r2
 80106b0:	602b      	str	r3, [r5, #0]
 80106b2:	f7f3 ffa5 	bl	8004600 <_kill>
 80106b6:	1c43      	adds	r3, r0, #1
 80106b8:	d102      	bne.n	80106c0 <_kill_r+0x1c>
 80106ba:	682b      	ldr	r3, [r5, #0]
 80106bc:	b103      	cbz	r3, 80106c0 <_kill_r+0x1c>
 80106be:	6023      	str	r3, [r4, #0]
 80106c0:	bd38      	pop	{r3, r4, r5, pc}
 80106c2:	bf00      	nop
 80106c4:	2000070c 	.word	0x2000070c

080106c8 <_getpid_r>:
 80106c8:	f7f3 bf92 	b.w	80045f0 <_getpid>

080106cc <_init>:
 80106cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ce:	bf00      	nop
 80106d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106d2:	bc08      	pop	{r3}
 80106d4:	469e      	mov	lr, r3
 80106d6:	4770      	bx	lr

080106d8 <_fini>:
 80106d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106da:	bf00      	nop
 80106dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106de:	bc08      	pop	{r3}
 80106e0:	469e      	mov	lr, r3
 80106e2:	4770      	bx	lr
